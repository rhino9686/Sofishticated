
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00003c7e  00003d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000273  00800242  00800242  00003e54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00003ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001307c  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a4e  00000000  00000000  00017924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000678b  00000000  00000000  0001b372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e5c  00000000  00000000  00021b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b8f  00000000  00000000  0002395c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b62d  00000000  00000000  000284eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  00033b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__dtors_end>
       4:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_1>
       8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_2>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_6>
      1c:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__vector_7>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_18>
      4c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	4f 17       	cp	r20, r31
      6a:	4f 17       	cp	r20, r31
      6c:	4f 17       	cp	r20, r31
      6e:	8e 17       	cp	r24, r30
      70:	79 17       	cp	r23, r25
      72:	88 17       	cp	r24, r24
      74:	4f 17       	cp	r20, r31
      76:	4f 17       	cp	r20, r31
      78:	8e 17       	cp	r24, r30
      7a:	79 17       	cp	r23, r25

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a2:	00 00 00 00                                         ....

000000a6 <digital_pin_to_bit_mask_PGM>:
      a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b6:	04 08 10 20                                         ... 

000000ba <digital_pin_to_port_PGM>:
      ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ca:	03 03 03 03                                         ....

000000ce <port_to_input_PGM>:
      ce:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d8 <port_to_output_PGM>:
      d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e2 <port_to_mode_PGM>:
      e2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ec <__ctors_start>:
      ec:	69 05       	cpc	r22, r9
      ee:	91 09       	sbc	r25, r1

000000f0 <__ctors_end>:
      f0:	79 05       	cpc	r23, r9

000000f2 <__dtors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d8 e0       	ldi	r29, 0x08	; 8
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
      fe:	12 e0       	ldi	r17, 0x02	; 2
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	ee e7       	ldi	r30, 0x7E	; 126
     106:	fc e3       	ldi	r31, 0x3C	; 60
     108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
     10a:	05 90       	lpm	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	a2 34       	cpi	r26, 0x42	; 66
     110:	b1 07       	cpc	r27, r17
     112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
     114:	24 e0       	ldi	r18, 0x04	; 4
     116:	a2 e4       	ldi	r26, 0x42	; 66
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	a5 3b       	cpi	r26, 0xB5	; 181
     120:	b2 07       	cpc	r27, r18
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>

00000124 <__do_global_ctors>:
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	c8 e7       	ldi	r28, 0x78	; 120
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_global_ctors+0x10>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	fe 01       	movw	r30, r28
     130:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
     134:	c6 37       	cpi	r28, 0x76	; 118
     136:	d1 07       	cpc	r29, r17
     138:	c9 f7       	brne	.-14     	; 0x12c <__do_global_ctors+0x8>
     13a:	0e 94 be 09 	call	0x137c	; 0x137c <main>
     13e:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__do_global_dtors>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     146:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <eeprom_read_byte>

0000014a <_ZN10DFRobot_PHC1Ev>:
#define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);}

#define PHVALUEADDR 0x00    //the start address of the pH calibration parameters stored in the EEPROM


DFRobot_PH::DFRobot_PH()
     14a:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	a8 ec       	ldi	r26, 0xC8	; 200
     152:	b1 e4       	ldi	r27, 0x41	; 65
     154:	80 8b       	std	Z+16, r24	; 0x10
     156:	91 8b       	std	Z+17, r25	; 0x11
     158:	a2 8b       	std	Z+18, r26	; 0x12
     15a:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	a0 ee       	ldi	r26, 0xE0	; 224
     162:	b0 e4       	ldi	r27, 0x40	; 64
     164:	80 83       	st	Z, r24
     166:	91 83       	std	Z+1, r25	; 0x01
     168:	a2 83       	std	Z+2, r26	; 0x02
     16a:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     16c:	84 e1       	ldi	r24, 0x14	; 20
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	ae ef       	ldi	r26, 0xFE	; 254
     172:	b4 e4       	ldi	r27, 0x44	; 68
     174:	84 83       	std	Z+4, r24	; 0x04
     176:	95 83       	std	Z+5, r25	; 0x05
     178:	a6 83       	std	Z+6, r26	; 0x06
     17a:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e8       	ldi	r25, 0x80	; 128
     180:	ab eb       	ldi	r26, 0xBB	; 187
     182:	b4 e4       	ldi	r27, 0x44	; 68
     184:	80 87       	std	Z+8, r24	; 0x08
     186:	91 87       	std	Z+9, r25	; 0x09
     188:	a2 87       	std	Z+10, r26	; 0x0a
     18a:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     18c:	84 87       	std	Z+12, r24	; 0x0c
     18e:	95 87       	std	Z+13, r25	; 0x0d
     190:	a6 87       	std	Z+14, r26	; 0x0e
     192:	b7 87       	std	Z+15, r27	; 0x0f
     194:	08 95       	ret

00000196 <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     196:	08 95       	ret

00000198 <_ZN10DFRobot_PH5beginEv>:
{

}

void DFRobot_PH::begin()
{
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
    EEPROM_read(PHVALUEADDR, this->_neutralVoltage);  //load the neutral (pH = 7.0)voltage of the pH board from the EEPROM
     1aa:	7c 01       	movw	r14, r24
     1ac:	88 e0       	ldi	r24, 0x08	; 8
     1ae:	e8 0e       	add	r14, r24
     1b0:	f1 1c       	adc	r15, r1
     1b2:	67 01       	movw	r12, r14
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	c8 01       	movw	r24, r16
     1ba:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     1be:	f6 01       	movw	r30, r12
     1c0:	81 93       	st	Z+, r24
     1c2:	6f 01       	movw	r12, r30
     1c4:	0f 5f       	subi	r16, 0xFF	; 255
     1c6:	1f 4f       	sbci	r17, 0xFF	; 255
     1c8:	04 30       	cpi	r16, 0x04	; 4
     1ca:	11 05       	cpc	r17, r1
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <_ZN10DFRobot_PH5beginEv+0x20>
    Serial.print("_neutralVoltage:");
     1ce:	60 e3       	ldi	r22, 0x30	; 48
     1d0:	71 e0       	ldi	r23, 0x01	; 1
     1d2:	84 e7       	ldi	r24, 0x74	; 116
     1d4:	93 e0       	ldi	r25, 0x03	; 3
     1d6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
    Serial.println(this->_neutralVoltage);
     1da:	48 85       	ldd	r20, Y+8	; 0x08
     1dc:	59 85       	ldd	r21, Y+9	; 0x09
     1de:	6a 85       	ldd	r22, Y+10	; 0x0a
     1e0:	7b 85       	ldd	r23, Y+11	; 0x0b
     1e2:	22 e0       	ldi	r18, 0x02	; 2
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	84 e7       	ldi	r24, 0x74	; 116
     1e8:	93 e0       	ldi	r25, 0x03	; 3
     1ea:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR)==0xFF && EEPROM.read(PHVALUEADDR+1)==0xFF && EEPROM.read(PHVALUEADDR+2)==0xFF && EEPROM.read(PHVALUEADDR+3)==0xFF){
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     1f6:	8f 3f       	cpi	r24, 0xFF	; 255
     1f8:	39 f5       	brne	.+78     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     202:	8f 3f       	cpi	r24, 0xFF	; 255
     204:	09 f5       	brne	.+66     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     20e:	8f 3f       	cpi	r24, 0xFF	; 255
     210:	d9 f4       	brne	.+54     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     21a:	8f 3f       	cpi	r24, 0xFF	; 255
     21c:	a9 f4       	brne	.+42     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
        this->_neutralVoltage = 1500.0;  // new EEPROM, write typical voltage
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e8       	ldi	r25, 0x80	; 128
     222:	ab eb       	ldi	r26, 0xBB	; 187
     224:	b4 e4       	ldi	r27, 0x44	; 68
     226:	88 87       	std	Y+8, r24	; 0x08
     228:	99 87       	std	Y+9, r25	; 0x09
     22a:	aa 87       	std	Y+10, r26	; 0x0a
     22c:	bb 87       	std	Y+11, r27	; 0x0b
        EEPROM_write(PHVALUEADDR, this->_neutralVoltage);
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	f7 01       	movw	r30, r14
     234:	61 91       	ld	r22, Z+
     236:	7f 01       	movw	r14, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <eeprom_write_byte>
     23e:	0f 5f       	subi	r16, 0xFF	; 255
     240:	1f 4f       	sbci	r17, 0xFF	; 255
     242:	04 30       	cpi	r16, 0x04	; 4
     244:	11 05       	cpc	r17, r1
     246:	a9 f7       	brne	.-22     	; 0x232 <_ZN10DFRobot_PH5beginEv+0x9a>
    }
    EEPROM_read(PHVALUEADDR+4, this->_acidVoltage);//load the acid (pH = 4.0) voltage of the pH board from the EEPROM
     248:	7e 01       	movw	r14, r28
     24a:	f4 e0       	ldi	r31, 0x04	; 4
     24c:	ef 0e       	add	r14, r31
     24e:	f1 1c       	adc	r15, r1
     250:	67 01       	movw	r12, r14
     252:	04 e0       	ldi	r16, 0x04	; 4
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	c8 01       	movw	r24, r16
     258:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     25c:	f6 01       	movw	r30, r12
     25e:	81 93       	st	Z+, r24
     260:	6f 01       	movw	r12, r30
     262:	0f 5f       	subi	r16, 0xFF	; 255
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	08 30       	cpi	r16, 0x08	; 8
     268:	11 05       	cpc	r17, r1
     26a:	a9 f7       	brne	.-22     	; 0x256 <_ZN10DFRobot_PH5beginEv+0xbe>
    Serial.print("_acidVoltage:");
     26c:	61 e4       	ldi	r22, 0x41	; 65
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	84 e7       	ldi	r24, 0x74	; 116
     272:	93 e0       	ldi	r25, 0x03	; 3
     274:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
    Serial.println(this->_acidVoltage);
     278:	4c 81       	ldd	r20, Y+4	; 0x04
     27a:	5d 81       	ldd	r21, Y+5	; 0x05
     27c:	6e 81       	ldd	r22, Y+6	; 0x06
     27e:	7f 81       	ldd	r23, Y+7	; 0x07
     280:	22 e0       	ldi	r18, 0x02	; 2
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	84 e7       	ldi	r24, 0x74	; 116
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR+4)==0xFF && EEPROM.read(PHVALUEADDR+5)==0xFF && EEPROM.read(PHVALUEADDR+6)==0xFF && EEPROM.read(PHVALUEADDR+7)==0xFF){
     28c:	84 e0       	ldi	r24, 0x04	; 4
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     294:	8f 3f       	cpi	r24, 0xFF	; 255
     296:	31 f5       	brne	.+76     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2a0:	8f 3f       	cpi	r24, 0xFF	; 255
     2a2:	01 f5       	brne	.+64     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2ac:	8f 3f       	cpi	r24, 0xFF	; 255
     2ae:	d1 f4       	brne	.+52     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2b8:	8f 3f       	cpi	r24, 0xFF	; 255
     2ba:	a1 f4       	brne	.+40     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
        this->_acidVoltage = 2032.44;  // new EEPROM, write typical voltage
     2bc:	84 e1       	ldi	r24, 0x14	; 20
     2be:	9e e0       	ldi	r25, 0x0E	; 14
     2c0:	ae ef       	ldi	r26, 0xFE	; 254
     2c2:	b4 e4       	ldi	r27, 0x44	; 68
     2c4:	8c 83       	std	Y+4, r24	; 0x04
     2c6:	9d 83       	std	Y+5, r25	; 0x05
     2c8:	ae 83       	std	Y+6, r26	; 0x06
     2ca:	bf 83       	std	Y+7, r27	; 0x07
     2cc:	c4 e0       	ldi	r28, 0x04	; 4
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
        EEPROM_write(PHVALUEADDR+4, this->_acidVoltage);
     2d0:	f7 01       	movw	r30, r14
     2d2:	61 91       	ld	r22, Z+
     2d4:	7f 01       	movw	r14, r30
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <eeprom_write_byte>
     2dc:	21 96       	adiw	r28, 0x01	; 1
     2de:	c8 30       	cpi	r28, 0x08	; 8
     2e0:	d1 05       	cpc	r29, r1
     2e2:	b1 f7       	brne	.-20     	; 0x2d0 <_ZN10DFRobot_PH5beginEv+0x138>
    }
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <_Z8fromWifiv>:
	return phValue;
}

void calibratePH() {
	ph.calibration(voltage, temperature);
     2f6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xAmmonia>
     2fa:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xAmmonia+0x1>
     2fe:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <vTaskResume>

00000302 <_ZN5Print5writeEPKc>:
     302:	61 15       	cp	r22, r1
     304:	71 05       	cpc	r23, r1
     306:	79 f0       	breq	.+30     	; 0x326 <_ZN5Print5writeEPKc+0x24>
     308:	fb 01       	movw	r30, r22
     30a:	01 90       	ld	r0, Z+
     30c:	00 20       	and	r0, r0
     30e:	e9 f7       	brne	.-6      	; 0x30a <_ZN5Print5writeEPKc+0x8>
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	af 01       	movw	r20, r30
     314:	46 1b       	sub	r20, r22
     316:	57 0b       	sbc	r21, r23
     318:	dc 01       	movw	r26, r24
     31a:	ed 91       	ld	r30, X+
     31c:	fc 91       	ld	r31, X
     31e:	02 80       	ldd	r0, Z+2	; 0x02
     320:	f3 81       	ldd	r31, Z+3	; 0x03
     322:	e0 2d       	mov	r30, r0
     324:	09 94       	ijmp
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	08 95       	ret

0000032c <_Z9addColorsv>:
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	c3 e3       	ldi	r28, 0x33	; 51
     336:	d3 e0       	ldi	r29, 0x03	; 3
     338:	18 82       	st	Y, r1
     33a:	19 82       	std	Y+1, r1	; 0x01
     33c:	1a 82       	std	Y+2, r1	; 0x02
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	1d 82       	std	Y+5, r1	; 0x05
     342:	1c 82       	std	Y+4, r1	; 0x04
     344:	1f 82       	std	Y+7, r1	; 0x07
     346:	1e 82       	std	Y+6, r1	; 0x06
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	18 86       	std	Y+8, r1	; 0x08
     34c:	ad ee       	ldi	r26, 0xED	; 237
     34e:	b2 e0       	ldi	r27, 0x02	; 2
     350:	1d 92       	st	X+, r1
     352:	1d 92       	st	X+, r1
     354:	1d 92       	st	X+, r1
     356:	1c 92       	st	X, r1
     358:	13 97       	sbiw	r26, 0x03	; 3
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	15 96       	adiw	r26, 0x05	; 5
     360:	3c 93       	st	X, r19
     362:	2e 93       	st	-X, r18
     364:	14 97       	sbiw	r26, 0x04	; 4
     366:	8f e5       	ldi	r24, 0x5F	; 95
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	17 96       	adiw	r26, 0x07	; 7
     36c:	9c 93       	st	X, r25
     36e:	8e 93       	st	-X, r24
     370:	16 97       	sbiw	r26, 0x06	; 6
     372:	19 96       	adiw	r26, 0x09	; 9
     374:	9c 93       	st	X, r25
     376:	8e 93       	st	-X, r24
     378:	18 97       	sbiw	r26, 0x08	; 8
     37a:	e7 ea       	ldi	r30, 0xA7	; 167
     37c:	f2 e0       	ldi	r31, 0x02	; 2
     37e:	10 82       	st	Z, r1
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	12 82       	std	Z+2, r1	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	35 83       	std	Z+5, r19	; 0x05
     388:	24 83       	std	Z+4, r18	; 0x04
     38a:	97 83       	std	Z+7, r25	; 0x07
     38c:	86 83       	std	Z+6, r24	; 0x06
     38e:	91 87       	std	Z+9, r25	; 0x09
     390:	80 87       	std	Z+8, r24	; 0x08
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e8       	ldi	r22, 0x80	; 128
     398:	7e e3       	ldi	r23, 0x3E	; 62
     39a:	4a 87       	std	Y+10, r20	; 0x0a
     39c:	5b 87       	std	Y+11, r21	; 0x0b
     39e:	6c 87       	std	Y+12, r22	; 0x0c
     3a0:	7d 87       	std	Y+13, r23	; 0x0d
     3a2:	1f 86       	std	Y+15, r1	; 0x0f
     3a4:	1e 86       	std	Y+14, r1	; 0x0e
     3a6:	19 8a       	std	Y+17, r1	; 0x11
     3a8:	18 8a       	std	Y+16, r1	; 0x10
     3aa:	1b 8a       	std	Y+19, r1	; 0x13
     3ac:	1a 8a       	std	Y+18, r1	; 0x12
     3ae:	4a e9       	ldi	r20, 0x9A	; 154
     3b0:	59 e9       	ldi	r21, 0x99	; 153
     3b2:	69 e1       	ldi	r22, 0x19	; 25
     3b4:	7e e3       	ldi	r23, 0x3E	; 62
     3b6:	1a 96       	adiw	r26, 0x0a	; 10
     3b8:	4d 93       	st	X+, r20
     3ba:	5d 93       	st	X+, r21
     3bc:	6d 93       	st	X+, r22
     3be:	7c 93       	st	X, r23
     3c0:	1d 97       	sbiw	r26, 0x0d	; 13
     3c2:	1f 96       	adiw	r26, 0x0f	; 15
     3c4:	1c 92       	st	X, r1
     3c6:	1e 92       	st	-X, r1
     3c8:	1e 97       	sbiw	r26, 0x0e	; 14
     3ca:	51 96       	adiw	r26, 0x11	; 17
     3cc:	1c 92       	st	X, r1
     3ce:	1e 92       	st	-X, r1
     3d0:	50 97       	sbiw	r26, 0x10	; 16
     3d2:	53 96       	adiw	r26, 0x13	; 19
     3d4:	1c 92       	st	X, r1
     3d6:	1e 92       	st	-X, r1
     3d8:	52 97       	sbiw	r26, 0x12	; 18
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	7f e3       	ldi	r23, 0x3F	; 63
     3e2:	42 87       	std	Z+10, r20	; 0x0a
     3e4:	53 87       	std	Z+11, r21	; 0x0b
     3e6:	64 87       	std	Z+12, r22	; 0x0c
     3e8:	75 87       	std	Z+13, r23	; 0x0d
     3ea:	17 86       	std	Z+15, r1	; 0x0f
     3ec:	16 86       	std	Z+14, r1	; 0x0e
     3ee:	11 8a       	std	Z+17, r1	; 0x11
     3f0:	10 8a       	std	Z+16, r1	; 0x10
     3f2:	13 8a       	std	Z+19, r1	; 0x13
     3f4:	12 8a       	std	Z+18, r1	; 0x12
     3f6:	4c 8b       	std	Y+20, r20	; 0x14
     3f8:	5d 8b       	std	Y+21, r21	; 0x15
     3fa:	6e 8b       	std	Y+22, r22	; 0x16
     3fc:	7f 8b       	std	Y+23, r23	; 0x17
     3fe:	19 8e       	std	Y+25, r1	; 0x19
     400:	18 8e       	std	Y+24, r1	; 0x18
     402:	1b 8e       	std	Y+27, r1	; 0x1b
     404:	1a 8e       	std	Y+26, r1	; 0x1a
     406:	1d 8e       	std	Y+29, r1	; 0x1d
     408:	1c 8e       	std	Y+28, r1	; 0x1c
     40a:	4a e9       	ldi	r20, 0x9A	; 154
     40c:	59 e9       	ldi	r21, 0x99	; 153
     40e:	69 e9       	ldi	r22, 0x99	; 153
     410:	7e e3       	ldi	r23, 0x3E	; 62
     412:	54 96       	adiw	r26, 0x14	; 20
     414:	4d 93       	st	X+, r20
     416:	5d 93       	st	X+, r21
     418:	6d 93       	st	X+, r22
     41a:	7c 93       	st	X, r23
     41c:	57 97       	sbiw	r26, 0x17	; 23
     41e:	59 96       	adiw	r26, 0x19	; 25
     420:	1c 92       	st	X, r1
     422:	1e 92       	st	-X, r1
     424:	58 97       	sbiw	r26, 0x18	; 24
     426:	5b 96       	adiw	r26, 0x1b	; 27
     428:	1c 92       	st	X, r1
     42a:	1e 92       	st	-X, r1
     42c:	5a 97       	sbiw	r26, 0x1a	; 26
     42e:	5d 96       	adiw	r26, 0x1d	; 29
     430:	1c 92       	st	X, r1
     432:	1e 92       	st	-X, r1
     434:	5c 97       	sbiw	r26, 0x1c	; 28
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e4       	ldi	r23, 0x40	; 64
     43e:	44 8b       	std	Z+20, r20	; 0x14
     440:	55 8b       	std	Z+21, r21	; 0x15
     442:	66 8b       	std	Z+22, r22	; 0x16
     444:	77 8b       	std	Z+23, r23	; 0x17
     446:	11 8e       	std	Z+25, r1	; 0x19
     448:	10 8e       	std	Z+24, r1	; 0x18
     44a:	13 8e       	std	Z+27, r1	; 0x1b
     44c:	12 8e       	std	Z+26, r1	; 0x1a
     44e:	15 8e       	std	Z+29, r1	; 0x1d
     450:	14 8e       	std	Z+28, r1	; 0x1c
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	20 e4       	ldi	r18, 0x40	; 64
     458:	30 e4       	ldi	r19, 0x40	; 64
     45a:	0e 8f       	std	Y+30, r16	; 0x1e
     45c:	1f 8f       	std	Y+31, r17	; 0x1f
     45e:	28 a3       	std	Y+32, r18	; 0x20
     460:	39 a3       	std	Y+33, r19	; 0x21
     462:	1b a2       	std	Y+35, r1	; 0x23
     464:	1a a2       	std	Y+34, r1	; 0x22
     466:	1d a2       	std	Y+37, r1	; 0x25
     468:	1c a2       	std	Y+36, r1	; 0x24
     46a:	1f a2       	std	Y+39, r1	; 0x27
     46c:	1e a2       	std	Y+38, r1	; 0x26
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	60 e8       	ldi	r22, 0x80	; 128
     474:	7f e3       	ldi	r23, 0x3F	; 63
     476:	5e 96       	adiw	r26, 0x1e	; 30
     478:	4d 93       	st	X+, r20
     47a:	5d 93       	st	X+, r21
     47c:	6d 93       	st	X+, r22
     47e:	7c 93       	st	X, r23
     480:	91 97       	sbiw	r26, 0x21	; 33
     482:	93 96       	adiw	r26, 0x23	; 35
     484:	1c 92       	st	X, r1
     486:	1e 92       	st	-X, r1
     488:	92 97       	sbiw	r26, 0x22	; 34
     48a:	95 96       	adiw	r26, 0x25	; 37
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	94 97       	sbiw	r26, 0x24	; 36
     492:	97 96       	adiw	r26, 0x27	; 39
     494:	1c 92       	st	X, r1
     496:	1e 92       	st	-X, r1
     498:	96 97       	sbiw	r26, 0x26	; 38
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	60 ea       	ldi	r22, 0xA0	; 160
     4a0:	70 e4       	ldi	r23, 0x40	; 64
     4a2:	46 8f       	std	Z+30, r20	; 0x1e
     4a4:	57 8f       	std	Z+31, r21	; 0x1f
     4a6:	60 a3       	std	Z+32, r22	; 0x20
     4a8:	71 a3       	std	Z+33, r23	; 0x21
     4aa:	13 a2       	std	Z+35, r1	; 0x23
     4ac:	12 a2       	std	Z+34, r1	; 0x22
     4ae:	15 a2       	std	Z+37, r1	; 0x25
     4b0:	14 a2       	std	Z+36, r1	; 0x24
     4b2:	17 a2       	std	Z+39, r1	; 0x27
     4b4:	16 a2       	std	Z+38, r1	; 0x26
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	60 ec       	ldi	r22, 0xC0	; 192
     4bc:	70 e4       	ldi	r23, 0x40	; 64
     4be:	48 a7       	std	Y+40, r20	; 0x28
     4c0:	59 a7       	std	Y+41, r21	; 0x29
     4c2:	6a a7       	std	Y+42, r22	; 0x2a
     4c4:	7b a7       	std	Y+43, r23	; 0x2b
     4c6:	1d a6       	std	Y+45, r1	; 0x2d
     4c8:	1c a6       	std	Y+44, r1	; 0x2c
     4ca:	1f a6       	std	Y+47, r1	; 0x2f
     4cc:	1e a6       	std	Y+46, r1	; 0x2e
     4ce:	19 aa       	std	Y+49, r1	; 0x31
     4d0:	18 aa       	std	Y+48, r1	; 0x30
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 ec       	ldi	r22, 0xC0	; 192
     4d8:	7f e3       	ldi	r23, 0x3F	; 63
     4da:	98 96       	adiw	r26, 0x28	; 40
     4dc:	4d 93       	st	X+, r20
     4de:	5d 93       	st	X+, r21
     4e0:	6d 93       	st	X+, r22
     4e2:	7c 93       	st	X, r23
     4e4:	9b 97       	sbiw	r26, 0x2b	; 43
     4e6:	9d 96       	adiw	r26, 0x2d	; 45
     4e8:	1c 92       	st	X, r1
     4ea:	1e 92       	st	-X, r1
     4ec:	9c 97       	sbiw	r26, 0x2c	; 44
     4ee:	9f 96       	adiw	r26, 0x2f	; 47
     4f0:	1c 92       	st	X, r1
     4f2:	1e 92       	st	-X, r1
     4f4:	9e 97       	sbiw	r26, 0x2e	; 46
     4f6:	d1 96       	adiw	r26, 0x31	; 49
     4f8:	1c 92       	st	X, r1
     4fa:	1e 92       	st	-X, r1
     4fc:	d0 97       	sbiw	r26, 0x30	; 48
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	71 e4       	ldi	r23, 0x41	; 65
     506:	40 a7       	std	Z+40, r20	; 0x28
     508:	51 a7       	std	Z+41, r21	; 0x29
     50a:	62 a7       	std	Z+42, r22	; 0x2a
     50c:	73 a7       	std	Z+43, r23	; 0x2b
     50e:	15 a6       	std	Z+45, r1	; 0x2d
     510:	14 a6       	std	Z+44, r1	; 0x2c
     512:	17 a6       	std	Z+47, r1	; 0x2f
     514:	16 a6       	std	Z+46, r1	; 0x2e
     516:	11 aa       	std	Z+49, r1	; 0x31
     518:	10 aa       	std	Z+48, r1	; 0x30
     51a:	d2 96       	adiw	r26, 0x32	; 50
     51c:	0d 93       	st	X+, r16
     51e:	1d 93       	st	X+, r17
     520:	2d 93       	st	X+, r18
     522:	3c 93       	st	X, r19
     524:	d5 97       	sbiw	r26, 0x35	; 53
     526:	d7 96       	adiw	r26, 0x37	; 55
     528:	1c 92       	st	X, r1
     52a:	1e 92       	st	-X, r1
     52c:	d6 97       	sbiw	r26, 0x36	; 54
     52e:	d9 96       	adiw	r26, 0x39	; 57
     530:	1c 92       	st	X, r1
     532:	1e 92       	st	-X, r1
     534:	d8 97       	sbiw	r26, 0x38	; 56
     536:	db 96       	adiw	r26, 0x3b	; 59
     538:	1c 92       	st	X, r1
     53a:	1e 92       	st	-X, r1
     53c:	da 97       	sbiw	r26, 0x3a	; 58
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	20 ea       	ldi	r18, 0xA0	; 160
     544:	31 e4       	ldi	r19, 0x41	; 65
     546:	02 ab       	std	Z+50, r16	; 0x32
     548:	13 ab       	std	Z+51, r17	; 0x33
     54a:	24 ab       	std	Z+52, r18	; 0x34
     54c:	35 ab       	std	Z+53, r19	; 0x35
     54e:	17 aa       	std	Z+55, r1	; 0x37
     550:	16 aa       	std	Z+54, r1	; 0x36
     552:	11 ae       	std	Z+57, r1	; 0x39
     554:	10 ae       	std	Z+56, r1	; 0x38
     556:	13 ae       	std	Z+59, r1	; 0x3b
     558:	12 ae       	std	Z+58, r1	; 0x3a
     55a:	dc 96       	adiw	r26, 0x3c	; 60
     55c:	4d 93       	st	X+, r20
     55e:	5d 93       	st	X+, r21
     560:	6d 93       	st	X+, r22
     562:	7c 93       	st	X, r23
     564:	df 97       	sbiw	r26, 0x3f	; 63
     566:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <Nitrite+0x41>
     56a:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <Nitrite+0x40>
     56e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <Nitrite+0x43>
     572:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <Nitrite+0x42>
     576:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <Nitrite+0x45>
     57a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <Nitrite+0x44>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a8 e4       	ldi	r26, 0x48	; 72
     584:	b2 e4       	ldi	r27, 0x42	; 66
     586:	84 af       	std	Z+60, r24	; 0x3c
     588:	95 af       	std	Z+61, r25	; 0x3d
     58a:	a6 af       	std	Z+62, r26	; 0x3e
     58c:	b7 af       	std	Z+63, r27	; 0x3f
     58e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <Nitrate+0x41>
     592:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <Nitrate+0x40>
     596:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <Nitrate+0x43>
     59a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <Nitrate+0x42>
     59e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <Nitrate+0x45>
     5a2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <Nitrate+0x44>
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <_Z9SameColorv>:
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	10 91 a4 02 	lds	r17, 0x02A4	; 0x8002a4 <rgb>
     5ba:	d0 91 a5 02 	lds	r29, 0x02A5	; 0x8002a5 <rgb+0x1>
     5be:	c0 91 a6 02 	lds	r28, 0x02A6	; 0x8002a6 <rgb+0x2>
     5c2:	6d e9       	ldi	r22, 0x9D	; 157
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	84 e7       	ldi	r24, 0x74	; 116
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     5ce:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <c+0x4>
     5d2:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <c+0x5>
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	84 e7       	ldi	r24, 0x74	; 116
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     5e2:	6f e9       	ldi	r22, 0x9F	; 159
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	84 e7       	ldi	r24, 0x74	; 116
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     5ee:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <c+0x6>
     5f2:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <c+0x7>
     5f6:	4a e0       	ldi	r20, 0x0A	; 10
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	84 e7       	ldi	r24, 0x74	; 116
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     602:	6f e9       	ldi	r22, 0x9F	; 159
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	84 e7       	ldi	r24, 0x74	; 116
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     60e:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <c+0x8>
     612:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <c+0x9>
     616:	4a e0       	ldi	r20, 0x0A	; 10
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	84 e7       	ldi	r24, 0x74	; 116
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     622:	61 ea       	ldi	r22, 0xA1	; 161
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	84 e7       	ldi	r24, 0x74	; 116
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     62e:	4a e0       	ldi	r20, 0x0A	; 10
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	61 2f       	mov	r22, r17
     634:	84 e7       	ldi	r24, 0x74	; 116
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     63c:	6f e9       	ldi	r22, 0x9F	; 159
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	84 e7       	ldi	r24, 0x74	; 116
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     648:	4a e0       	ldi	r20, 0x0A	; 10
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	6d 2f       	mov	r22, r29
     64e:	84 e7       	ldi	r24, 0x74	; 116
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     656:	6f e9       	ldi	r22, 0x9F	; 159
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	84 e7       	ldi	r24, 0x74	; 116
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     662:	4a e0       	ldi	r20, 0x0A	; 10
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	6c 2f       	mov	r22, r28
     668:	84 e7       	ldi	r24, 0x74	; 116
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     670:	61 2f       	mov	r22, r17
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <c+0x4>
     678:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <c+0x5>
     67c:	9c 01       	movw	r18, r24
     67e:	25 50       	subi	r18, 0x05	; 5
     680:	31 09       	sbc	r19, r1
     682:	62 17       	cp	r22, r18
     684:	73 07       	cpc	r23, r19
     686:	64 f1       	brlt	.+88     	; 0x6e0 <_Z9SameColorv+0x130>
     688:	05 96       	adiw	r24, 0x05	; 5
     68a:	86 17       	cp	r24, r22
     68c:	97 07       	cpc	r25, r23
     68e:	44 f1       	brlt	.+80     	; 0x6e0 <_Z9SameColorv+0x130>
     690:	6d 2f       	mov	r22, r29
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <c+0x6>
     698:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <c+0x7>
     69c:	9c 01       	movw	r18, r24
     69e:	25 50       	subi	r18, 0x05	; 5
     6a0:	31 09       	sbc	r19, r1
     6a2:	62 17       	cp	r22, r18
     6a4:	73 07       	cpc	r23, r19
     6a6:	e4 f0       	brlt	.+56     	; 0x6e0 <_Z9SameColorv+0x130>
     6a8:	05 96       	adiw	r24, 0x05	; 5
     6aa:	86 17       	cp	r24, r22
     6ac:	97 07       	cpc	r25, r23
     6ae:	c4 f0       	brlt	.+48     	; 0x6e0 <_Z9SameColorv+0x130>
     6b0:	6c 2f       	mov	r22, r28
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <c+0x8>
     6b8:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <c+0x9>
     6bc:	9c 01       	movw	r18, r24
     6be:	25 50       	subi	r18, 0x05	; 5
     6c0:	31 09       	sbc	r19, r1
     6c2:	62 17       	cp	r22, r18
     6c4:	73 07       	cpc	r23, r19
     6c6:	64 f0       	brlt	.+24     	; 0x6e0 <_Z9SameColorv+0x130>
     6c8:	05 96       	adiw	r24, 0x05	; 5
     6ca:	86 17       	cp	r24, r22
     6cc:	97 07       	cpc	r25, r23
     6ce:	44 f0       	brlt	.+16     	; 0x6e0 <_Z9SameColorv+0x130>
     6d0:	6c e7       	ldi	r22, 0x7C	; 124
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	84 e7       	ldi	r24, 0x74	; 116
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN5Print5printEPK19__FlashStringHelper>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <_Z9SameColorv+0x132>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	08 95       	ret

000006ea <_Z9FindMatchv>:
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <typeToRead>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <_Z9FindMatchv+0x12>
     6fa:	48 c0       	rjmp	.+144    	; 0x78c <_Z9FindMatchv+0xa2>
     6fc:	40 f0       	brcs	.+16     	; 0x70e <_Z9FindMatchv+0x24>
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	09 f0       	breq	.+2      	; 0x704 <_Z9FindMatchv+0x1a>
     702:	6e c0       	rjmp	.+220    	; 0x7e0 <_Z9FindMatchv+0xf6>
     704:	0d ee       	ldi	r16, 0xED	; 237
     706:	12 e0       	ldi	r17, 0x02	; 2
     708:	c6 e0       	ldi	r28, 0x06	; 6
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	29 c0       	rjmp	.+82     	; 0x760 <_Z9FindMatchv+0x76>
     70e:	03 e3       	ldi	r16, 0x33	; 51
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c4 e0       	ldi	r28, 0x04	; 4
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	f8 01       	movw	r30, r16
     71a:	b8 96       	adiw	r30, 0x28	; 40
     71c:	aa e9       	ldi	r26, 0x9A	; 154
     71e:	b2 e0       	ldi	r27, 0x02	; 2
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	8a 95       	dec	r24
     726:	e1 f7       	brne	.-8      	; 0x720 <_Z9FindMatchv+0x36>
     728:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     72c:	88 23       	and	r24, r24
     72e:	49 f0       	breq	.+18     	; 0x742 <_Z9FindMatchv+0x58>
     730:	8a e0       	ldi	r24, 0x0A	; 10
     732:	8c 9f       	mul	r24, r28
     734:	f0 01       	movw	r30, r0
     736:	8d 9f       	mul	r24, r29
     738:	f0 0d       	add	r31, r0
     73a:	11 24       	eor	r1, r1
     73c:	ed 5c       	subi	r30, 0xCD	; 205
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
     740:	3e c0       	rjmp	.+124    	; 0x7be <_Z9FindMatchv+0xd4>
     742:	21 97       	sbiw	r28, 0x01	; 1
     744:	0a 50       	subi	r16, 0x0A	; 10
     746:	11 09       	sbc	r17, r1
     748:	cf 3f       	cpi	r28, 0xFF	; 255
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	d8 07       	cpc	r29, r24
     74e:	19 f7       	brne	.-58     	; 0x716 <_Z9FindMatchv+0x2c>
     750:	42 c0       	rjmp	.+132    	; 0x7d6 <_Z9FindMatchv+0xec>
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0a 50       	subi	r16, 0x0A	; 10
     756:	11 09       	sbc	r17, r1
     758:	cf 3f       	cpi	r28, 0xFF	; 255
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	d8 07       	cpc	r29, r24
     75e:	d9 f1       	breq	.+118    	; 0x7d6 <_Z9FindMatchv+0xec>
     760:	8a e0       	ldi	r24, 0x0A	; 10
     762:	f8 01       	movw	r30, r16
     764:	fc 96       	adiw	r30, 0x3c	; 60
     766:	aa e9       	ldi	r26, 0x9A	; 154
     768:	b2 e0       	ldi	r27, 0x02	; 2
     76a:	01 90       	ld	r0, Z+
     76c:	0d 92       	st	X+, r0
     76e:	8a 95       	dec	r24
     770:	e1 f7       	brne	.-8      	; 0x76a <_Z9FindMatchv+0x80>
     772:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     776:	88 23       	and	r24, r24
     778:	61 f3       	breq	.-40     	; 0x752 <_Z9FindMatchv+0x68>
     77a:	8a e0       	ldi	r24, 0x0A	; 10
     77c:	8c 9f       	mul	r24, r28
     77e:	f0 01       	movw	r30, r0
     780:	8d 9f       	mul	r24, r29
     782:	f0 0d       	add	r31, r0
     784:	11 24       	eor	r1, r1
     786:	e3 51       	subi	r30, 0x13	; 19
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	19 c0       	rjmp	.+50     	; 0x7be <_Z9FindMatchv+0xd4>
     78c:	07 ea       	ldi	r16, 0xA7	; 167
     78e:	12 e0       	ldi	r17, 0x02	; 2
     790:	c6 e0       	ldi	r28, 0x06	; 6
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	f8 01       	movw	r30, r16
     798:	fc 96       	adiw	r30, 0x3c	; 60
     79a:	aa e9       	ldi	r26, 0x9A	; 154
     79c:	b2 e0       	ldi	r27, 0x02	; 2
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <_Z9FindMatchv+0xb4>
     7a6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     7aa:	88 23       	and	r24, r24
     7ac:	69 f0       	breq	.+26     	; 0x7c8 <_Z9FindMatchv+0xde>
     7ae:	8a e0       	ldi	r24, 0x0A	; 10
     7b0:	8c 9f       	mul	r24, r28
     7b2:	f0 01       	movw	r30, r0
     7b4:	8d 9f       	mul	r24, r29
     7b6:	f0 0d       	add	r31, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	e9 55       	subi	r30, 0x59	; 89
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	30 81       	ld	r19, Z
     7c0:	21 81       	ldd	r18, Z+1	; 0x01
     7c2:	92 81       	ldd	r25, Z+2	; 0x02
     7c4:	83 81       	ldd	r24, Z+3	; 0x03
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <_Z9FindMatchv+0xf4>
     7c8:	21 97       	sbiw	r28, 0x01	; 1
     7ca:	0a 50       	subi	r16, 0x0A	; 10
     7cc:	11 09       	sbc	r17, r1
     7ce:	cf 3f       	cpi	r28, 0xFF	; 255
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	d8 07       	cpc	r29, r24
     7d4:	f9 f6       	brne	.-66     	; 0x794 <_Z9FindMatchv+0xaa>
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	90 e8       	ldi	r25, 0x80	; 128
     7dc:	8f eb       	ldi	r24, 0xBF	; 191
     7de:	ac 01       	movw	r20, r24
     7e0:	63 2f       	mov	r22, r19
     7e2:	72 2f       	mov	r23, r18
     7e4:	85 2f       	mov	r24, r21
     7e6:	94 2f       	mov	r25, r20
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <_Z9ScanColorv>:
     7f2:	8b e6       	ldi	r24, 0x6B	; 107
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN9MD_TCS2304readEv>
     7fa:	8b e6       	ldi	r24, 0x6B	; 107
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 28 19 	call	0x3250	; 0x3250 <_ZN9MD_TCS2309availableEv>
     802:	88 23       	and	r24, r24
     804:	d1 f3       	breq	.-12     	; 0x7fa <_Z9ScanColorv+0x8>
     806:	64 ea       	ldi	r22, 0xA4	; 164
     808:	72 e0       	ldi	r23, 0x02	; 2
     80a:	8b e6       	ldi	r24, 0x6B	; 107
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN9MD_TCS2306getRGBEP9colorData>
     812:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z9FindMatchv>
     816:	0e 94 94 06 	call	0xd28	; 0xd28 <__fixsfsi>
     81a:	08 95       	ret

0000081c <_Z13findTestStripv>:
     81c:	cf 93       	push	r28
     81e:	8b e6       	ldi	r24, 0x6B	; 107
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN9MD_TCS2304readEv>
     826:	8b e6       	ldi	r24, 0x6B	; 107
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	0e 94 28 19 	call	0x3250	; 0x3250 <_ZN9MD_TCS2309availableEv>
     82e:	88 23       	and	r24, r24
     830:	d1 f3       	breq	.-12     	; 0x826 <_Z13findTestStripv+0xa>
     832:	64 ea       	ldi	r22, 0xA4	; 164
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	8b e6       	ldi	r24, 0x6B	; 107
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN9MD_TCS2306getRGBEP9colorData>
     83e:	8a e0       	ldi	r24, 0x0A	; 10
     840:	e2 e2       	ldi	r30, 0x22	; 34
     842:	f1 e0       	ldi	r31, 0x01	; 1
     844:	aa e9       	ldi	r26, 0x9A	; 154
     846:	b2 e0       	ldi	r27, 0x02	; 2
     848:	01 90       	ld	r0, Z+
     84a:	0d 92       	st	X+, r0
     84c:	8a 95       	dec	r24
     84e:	e1 f7       	brne	.-8      	; 0x848 <_Z13findTestStripv+0x2c>
     850:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     854:	c8 2f       	mov	r28, r24
     856:	6b ea       	ldi	r22, 0xAB	; 171
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	84 e7       	ldi	r24, 0x74	; 116
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     862:	6c 2f       	mov	r22, r28
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	4a e0       	ldi	r20, 0x0A	; 10
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	84 e7       	ldi	r24, 0x74	; 116
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN5Print7printlnEii>
     872:	64 e2       	ldi	r22, 0x24	; 36
     874:	72 e0       	ldi	r23, 0x02	; 2
     876:	84 e7       	ldi	r24, 0x74	; 116
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     87e:	8a e0       	ldi	r24, 0x0A	; 10
     880:	e8 e1       	ldi	r30, 0x18	; 24
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	aa e9       	ldi	r26, 0x9A	; 154
     886:	b2 e0       	ldi	r27, 0x02	; 2
     888:	01 90       	ld	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	8a 95       	dec	r24
     88e:	e1 f7       	brne	.-8      	; 0x888 <_Z13findTestStripv+0x6c>
     890:	c1 11       	cpse	r28, r1
     892:	03 c0       	rjmp	.+6      	; 0x89a <_Z13findTestStripv+0x7e>
     894:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     898:	c8 2f       	mov	r28, r24
     89a:	6b eb       	ldi	r22, 0xBB	; 187
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	84 e7       	ldi	r24, 0x74	; 116
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     8a6:	6c 2f       	mov	r22, r28
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	4a e0       	ldi	r20, 0x0A	; 10
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	84 e7       	ldi	r24, 0x74	; 116
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN5Print7printlnEii>
     8b6:	64 e2       	ldi	r22, 0x24	; 36
     8b8:	72 e0       	ldi	r23, 0x02	; 2
     8ba:	84 e7       	ldi	r24, 0x74	; 116
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     8c2:	cc 23       	and	r28, r28
     8c4:	51 f0       	breq	.+20     	; 0x8da <_Z13findTestStripv+0xbe>
     8c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z9FindMatchv>
     8ca:	c1 e0       	ldi	r28, 0x01	; 1
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e8       	ldi	r20, 0x80	; 128
     8d2:	5f eb       	ldi	r21, 0xBF	; 191
     8d4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
     8d8:	81 11       	cpse	r24, r1
     8da:	c0 e0       	ldi	r28, 0x00	; 0
     8dc:	8c 2f       	mov	r24, r28
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <_Z6setLED8LEDColor>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <_Z6setLED8LEDColor+0x6>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <_Z6setLED8LEDColor+0x8>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <_Z6setLED8LEDColor+0xa>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	49 83       	std	Y+1, r20	; 0x01
     8f2:	5a 83       	std	Y+2, r21	; 0x02
     8f4:	6b 83       	std	Y+3, r22	; 0x03
     8f6:	7c 83       	std	Y+4, r23	; 0x04
     8f8:	8d 83       	std	Y+5, r24	; 0x05
     8fa:	9e 83       	std	Y+6, r25	; 0x06
     8fc:	69 81       	ldd	r22, Y+1	; 0x01
     8fe:	7a 81       	ldd	r23, Y+2	; 0x02
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <analogWrite>
     906:	6b 81       	ldd	r22, Y+3	; 0x03
     908:	7c 81       	ldd	r23, Y+4	; 0x04
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <analogWrite>
     910:	6d 81       	ldd	r22, Y+5	; 0x05
     912:	7e 81       	ldd	r23, Y+6	; 0x06
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	26 96       	adiw	r28, 0x06	; 6
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <analogWrite>

0000092a <_Z22TaskNitriteNitrateReadPv>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <_Z22TaskNitriteNitrateReadPv+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     944:	11 e0       	ldi	r17, 0x01	; 1
     946:	02 e0       	ldi	r16, 0x02	; 2
     948:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Red>
     94c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Red+0x1>
     950:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Red+0x2>
     954:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Red+0x3>
     958:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Red+0x4>
     95c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Red+0x5>
     960:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     964:	10 93 65 03 	sts	0x0365, r17	; 0x800365 <typeToRead>
     968:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z13findTestStripv>
     96c:	81 11       	cpse	r24, r1
     96e:	fc cf       	rjmp	.-8      	; 0x968 <_Z22TaskNitriteNitrateReadPv+0x3e>
     970:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Green>
     974:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Green+0x1>
     978:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Green+0x2>
     97c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Green+0x3>
     980:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Green+0x4>
     984:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Green+0x5>
     988:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     98c:	6a ef       	ldi	r22, 0xFA	; 250
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 b7 0c 	call	0x196e	; 0x196e <delay>
     998:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z9ScanColorv>
     99c:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     9a0:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     9a4:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     9a8:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     9ac:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     9b0:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     9b4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     9b8:	00 93 65 03 	sts	0x0365, r16	; 0x800365 <typeToRead>
     9bc:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z13findTestStripv>
     9c0:	81 11       	cpse	r24, r1
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <_Z22TaskNitriteNitrateReadPv+0x92>
     9c4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     9c8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     9cc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     9d0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     9d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     9d8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     9dc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     9e0:	6a ef       	ldi	r22, 0xFA	; 250
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <delay>
     9ec:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z9ScanColorv>
     9f0:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     9f4:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     9f8:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     9fc:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     a00:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     a04:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     a08:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     a0c:	61 e7       	ldi	r22, 0x71	; 113
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskDelayUntil>
     a18:	97 cf       	rjmp	.-210    	; 0x948 <_Z22TaskNitriteNitrateReadPv+0x1e>

00000a1a <_Z8setupLEDv>:
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a32:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     a36:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     a3a:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     a3e:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     a42:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     a46:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     a4a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>

00000a4e <_Z6phInitv>:
     a4e:	86 e4       	ldi	r24, 0x46	; 70
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0c 94 cc 00 	jmp	0x198	; 0x198 <_ZN10DFRobot_PH5beginEv>

00000a56 <setup>:
TaskHandle_t xTemperature;



// the setup function runs once when you press reset or power the board
void setup() {
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a5c:	26 e0       	ldi	r18, 0x06	; 6
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	52 ec       	ldi	r21, 0xC2	; 194
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	84 e7       	ldi	r24, 0x74	; 116
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN14HardwareSerial5beginEmh>
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
  }
  
  // initialize Wifi module
  Serial.write("AT");
     a6e:	66 ed       	ldi	r22, 0xD6	; 214
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	84 e7       	ldi	r24, 0x74	; 116
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>
  //String okay = Serial.read(); // unsure how to read from Wifi module
  //assert(okay == "OK"); // module is on
  Serial.write("AT+CWMODE=1"); // client mode
     a7a:	69 ed       	ldi	r22, 0xD9	; 217
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	84 e7       	ldi	r24, 0x74	; 116
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>

  // load test strip color data and initialize indicator LED
  addColors();
     a86:	0e 94 96 01 	call	0x32c	; 0x32c <_Z9addColorsv>
  setupLED();
     a8a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z8setupLEDv>
  
  // initialize pH sensor
  phInit();
     a8e:	0e 94 27 05 	call	0xa4e	; 0xa4e <_Z6phInitv>
  
  digitalWrite(0, LOW);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>

  // TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
  attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
     a9a:	43 e0       	ldi	r20, 0x03	; 3
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	6b e7       	ldi	r22, 0x7B	; 123
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <attachInterrupt>
    TaskNitriteNitrateRead
    ,  (const portCHAR *) "Nitrite/Nitrate"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xNitriteNitrate );
     aa8:	82 e4       	ldi	r24, 0x42	; 66
     aaa:	e8 2e       	mov	r14, r24
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	f8 2e       	mov	r15, r24
     ab0:	02 e0       	ldi	r16, 0x02	; 2
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e8       	ldi	r20, 0x80	; 128
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	65 ee       	ldi	r22, 0xE5	; 229
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	85 e9       	ldi	r24, 0x95	; 149
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
  vTaskSuspend(xAmmonia);
  vTaskSuspend(xNitriteNitrate);*/

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
}
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
	
  vTaskSuspend(xAmmonia);
  vTaskSuspend(xNitriteNitrate);*/

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
     acc:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <vTaskStartScheduler>

00000ad0 <loop>:
}

void loop()
{
     ad0:	08 95       	ret

00000ad2 <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     ad2:	67 e0       	ldi	r22, 0x07	; 7
     ad4:	86 e6       	ldi	r24, 0x66	; 102
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN7OneWire5beginEh>
Color WhiteTestStrip {0, {245, 45, 45}};

colorData rgb;
Color c;

MD_TCS230  CS(S2, S3, OE);
     adc:	28 e0       	ldi	r18, 0x08	; 8
     ade:	4d e0       	ldi	r20, 0x0D	; 13
     ae0:	6c e0       	ldi	r22, 0x0C	; 12
     ae2:	8b e6       	ldi	r24, 0x6B	; 107
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN9MD_TCS230C1Ehhh>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define PH_PIN A1
float voltage, phValue, temperature = 25;
DFRobot_PH ph;
     aea:	86 e4       	ldi	r24, 0x46	; 70
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_ZN10DFRobot_PHC1Ev>

00000af2 <_GLOBAL__sub_D_ds>:
     af2:	86 e4       	ldi	r24, 0x46	; 70
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN10DFRobot_PHD1Ev>
     afa:	8b e6       	ldi	r24, 0x6B	; 107
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <_ZN9MD_TCS230D1Ev>

00000b02 <_ZN7OneWire12reset_searchEv>:
     b02:	fc 01       	movw	r30, r24
     b04:	13 86       	std	Z+11, r1	; 0x0b
     b06:	15 86       	std	Z+13, r1	; 0x0d
     b08:	14 86       	std	Z+12, r1	; 0x0c
     b0a:	dc 01       	movw	r26, r24
     b0c:	1b 96       	adiw	r26, 0x0b	; 11
     b0e:	33 96       	adiw	r30, 0x03	; 3
     b10:	1e 92       	st	-X, r1
     b12:	ae 17       	cp	r26, r30
     b14:	bf 07       	cpc	r27, r31
     b16:	e1 f7       	brne	.-8      	; 0xb10 <_ZN7OneWire12reset_searchEv+0xe>
     b18:	08 95       	ret

00000b1a <_ZN7OneWire5beginEh>:
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	16 2f       	mov	r17, r22
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	81 2f       	mov	r24, r17
     b28:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     b2c:	61 2f       	mov	r22, r17
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	fb 01       	movw	r30, r22
     b32:	ea 55       	subi	r30, 0x5A	; 90
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	e4 91       	lpm	r30, Z
     b38:	e8 83       	st	Y, r30
     b3a:	fb 01       	movw	r30, r22
     b3c:	e6 54       	subi	r30, 0x46	; 70
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	e4 91       	lpm	r30, Z
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	e2 53       	subi	r30, 0x32	; 50
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	85 91       	lpm	r24, Z+
     b4e:	94 91       	lpm	r25, Z
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	ce 01       	movw	r24, r28
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_ZN7OneWire12reset_searchEv>

00000b60 <__subsf3>:
     b60:	50 58       	subi	r21, 0x80	; 128

00000b62 <__addsf3>:
     b62:	bb 27       	eor	r27, r27
     b64:	aa 27       	eor	r26, r26
     b66:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3x>
     b6a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     b6e:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     b72:	38 f0       	brcs	.+14     	; 0xb82 <__addsf3+0x20>
     b74:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x20>
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__addsf3+0x28>
     b7c:	9f 3f       	cpi	r25, 0xFF	; 255
     b7e:	19 f4       	brne	.+6      	; 0xb86 <__addsf3+0x24>
     b80:	26 f4       	brtc	.+8      	; 0xb8a <__addsf3+0x28>
     b82:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     b86:	0e f4       	brtc	.+2      	; 0xb8a <__addsf3+0x28>
     b88:	e0 95       	com	r30
     b8a:	e7 fb       	bst	r30, 7
     b8c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>

00000b90 <__addsf3x>:
     b90:	e9 2f       	mov	r30, r25
     b92:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     b96:	58 f3       	brcs	.-42     	; 0xb6e <__addsf3+0xc>
     b98:	ba 17       	cp	r27, r26
     b9a:	62 07       	cpc	r22, r18
     b9c:	73 07       	cpc	r23, r19
     b9e:	84 07       	cpc	r24, r20
     ba0:	95 07       	cpc	r25, r21
     ba2:	20 f0       	brcs	.+8      	; 0xbac <__addsf3x+0x1c>
     ba4:	79 f4       	brne	.+30     	; 0xbc4 <__addsf3x+0x34>
     ba6:	a6 f5       	brtc	.+104    	; 0xc10 <__addsf3x+0x80>
     ba8:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     bac:	0e f4       	brtc	.+2      	; 0xbb0 <__addsf3x+0x20>
     bae:	e0 95       	com	r30
     bb0:	0b 2e       	mov	r0, r27
     bb2:	ba 2f       	mov	r27, r26
     bb4:	a0 2d       	mov	r26, r0
     bb6:	0b 01       	movw	r0, r22
     bb8:	b9 01       	movw	r22, r18
     bba:	90 01       	movw	r18, r0
     bbc:	0c 01       	movw	r0, r24
     bbe:	ca 01       	movw	r24, r20
     bc0:	a0 01       	movw	r20, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	ff 27       	eor	r31, r31
     bc6:	59 1b       	sub	r21, r25
     bc8:	99 f0       	breq	.+38     	; 0xbf0 <__addsf3x+0x60>
     bca:	59 3f       	cpi	r21, 0xF9	; 249
     bcc:	50 f4       	brcc	.+20     	; 0xbe2 <__addsf3x+0x52>
     bce:	50 3e       	cpi	r21, 0xE0	; 224
     bd0:	68 f1       	brcs	.+90     	; 0xc2c <__addsf3x+0x9c>
     bd2:	1a 16       	cp	r1, r26
     bd4:	f0 40       	sbci	r31, 0x00	; 0
     bd6:	a2 2f       	mov	r26, r18
     bd8:	23 2f       	mov	r18, r19
     bda:	34 2f       	mov	r19, r20
     bdc:	44 27       	eor	r20, r20
     bde:	58 5f       	subi	r21, 0xF8	; 248
     be0:	f3 cf       	rjmp	.-26     	; 0xbc8 <__addsf3x+0x38>
     be2:	46 95       	lsr	r20
     be4:	37 95       	ror	r19
     be6:	27 95       	ror	r18
     be8:	a7 95       	ror	r26
     bea:	f0 40       	sbci	r31, 0x00	; 0
     bec:	53 95       	inc	r21
     bee:	c9 f7       	brne	.-14     	; 0xbe2 <__addsf3x+0x52>
     bf0:	7e f4       	brtc	.+30     	; 0xc10 <__addsf3x+0x80>
     bf2:	1f 16       	cp	r1, r31
     bf4:	ba 0b       	sbc	r27, r26
     bf6:	62 0b       	sbc	r22, r18
     bf8:	73 0b       	sbc	r23, r19
     bfa:	84 0b       	sbc	r24, r20
     bfc:	ba f0       	brmi	.+46     	; 0xc2c <__addsf3x+0x9c>
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	a1 f0       	breq	.+40     	; 0xc2a <__addsf3x+0x9a>
     c02:	ff 0f       	add	r31, r31
     c04:	bb 1f       	adc	r27, r27
     c06:	66 1f       	adc	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	c2 f7       	brpl	.-16     	; 0xbfe <__addsf3x+0x6e>
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <__addsf3x+0x9c>
     c10:	ba 0f       	add	r27, r26
     c12:	62 1f       	adc	r22, r18
     c14:	73 1f       	adc	r23, r19
     c16:	84 1f       	adc	r24, r20
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__addsf3x+0x9c>
     c1a:	87 95       	ror	r24
     c1c:	77 95       	ror	r23
     c1e:	67 95       	ror	r22
     c20:	b7 95       	ror	r27
     c22:	f7 95       	ror	r31
     c24:	9e 3f       	cpi	r25, 0xFE	; 254
     c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9a>
     c28:	b0 cf       	rjmp	.-160    	; 0xb8a <__addsf3+0x28>
     c2a:	93 95       	inc	r25
     c2c:	88 0f       	add	r24, r24
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <__addsf3x+0xa2>
     c30:	99 27       	eor	r25, r25
     c32:	ee 0f       	add	r30, r30
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	08 95       	ret

00000c3a <__cmpsf2>:
     c3a:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <__cmpsf2+0x8>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	08 95       	ret

00000c44 <__divsf3>:
     c44:	0e 94 36 06 	call	0xc6c	; 0xc6c <__divsf3x>
     c48:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     c4c:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     c50:	58 f0       	brcs	.+22     	; 0xc68 <__divsf3+0x24>
     c52:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     c56:	40 f0       	brcs	.+16     	; 0xc68 <__divsf3+0x24>
     c58:	29 f4       	brne	.+10     	; 0xc64 <__divsf3+0x20>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	29 f0       	breq	.+10     	; 0xc68 <__divsf3+0x24>
     c5e:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     c62:	51 11       	cpse	r21, r1
     c64:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     c68:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>

00000c6c <__divsf3x>:
     c6c:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     c70:	68 f3       	brcs	.-38     	; 0xc4c <__divsf3+0x8>

00000c72 <__divsf3_pse>:
     c72:	99 23       	and	r25, r25
     c74:	b1 f3       	breq	.-20     	; 0xc62 <__divsf3+0x1e>
     c76:	55 23       	and	r21, r21
     c78:	91 f3       	breq	.-28     	; 0xc5e <__divsf3+0x1a>
     c7a:	95 1b       	sub	r25, r21
     c7c:	55 0b       	sbc	r21, r21
     c7e:	bb 27       	eor	r27, r27
     c80:	aa 27       	eor	r26, r26
     c82:	62 17       	cp	r22, r18
     c84:	73 07       	cpc	r23, r19
     c86:	84 07       	cpc	r24, r20
     c88:	38 f0       	brcs	.+14     	; 0xc98 <__divsf3_pse+0x26>
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	44 1f       	adc	r20, r20
     c94:	aa 1f       	adc	r26, r26
     c96:	a9 f3       	breq	.-22     	; 0xc82 <__divsf3_pse+0x10>
     c98:	35 d0       	rcall	.+106    	; 0xd04 <__divsf3_pse+0x92>
     c9a:	0e 2e       	mov	r0, r30
     c9c:	3a f0       	brmi	.+14     	; 0xcac <__divsf3_pse+0x3a>
     c9e:	e0 e8       	ldi	r30, 0x80	; 128
     ca0:	32 d0       	rcall	.+100    	; 0xd06 <__divsf3_pse+0x94>
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	50 40       	sbci	r21, 0x00	; 0
     ca6:	e6 95       	lsr	r30
     ca8:	00 1c       	adc	r0, r0
     caa:	ca f7       	brpl	.-14     	; 0xc9e <__divsf3_pse+0x2c>
     cac:	2b d0       	rcall	.+86     	; 0xd04 <__divsf3_pse+0x92>
     cae:	fe 2f       	mov	r31, r30
     cb0:	29 d0       	rcall	.+82     	; 0xd04 <__divsf3_pse+0x92>
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	bb 1f       	adc	r27, r27
     cba:	26 17       	cp	r18, r22
     cbc:	37 07       	cpc	r19, r23
     cbe:	48 07       	cpc	r20, r24
     cc0:	ab 07       	cpc	r26, r27
     cc2:	b0 e8       	ldi	r27, 0x80	; 128
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <__divsf3_pse+0x56>
     cc6:	bb 0b       	sbc	r27, r27
     cc8:	80 2d       	mov	r24, r0
     cca:	bf 01       	movw	r22, r30
     ccc:	ff 27       	eor	r31, r31
     cce:	93 58       	subi	r25, 0x83	; 131
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	3a f0       	brmi	.+14     	; 0xce2 <__divsf3_pse+0x70>
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	51 05       	cpc	r21, r1
     cd8:	78 f0       	brcs	.+30     	; 0xcf8 <__divsf3_pse+0x86>
     cda:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     cde:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     ce2:	5f 3f       	cpi	r21, 0xFF	; 255
     ce4:	e4 f3       	brlt	.-8      	; 0xcde <__divsf3_pse+0x6c>
     ce6:	98 3e       	cpi	r25, 0xE8	; 232
     ce8:	d4 f3       	brlt	.-12     	; 0xcde <__divsf3_pse+0x6c>
     cea:	86 95       	lsr	r24
     cec:	77 95       	ror	r23
     cee:	67 95       	ror	r22
     cf0:	b7 95       	ror	r27
     cf2:	f7 95       	ror	r31
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	c9 f7       	brne	.-14     	; 0xcea <__divsf3_pse+0x78>
     cf8:	88 0f       	add	r24, r24
     cfa:	91 1d       	adc	r25, r1
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	bb 1f       	adc	r27, r27
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	ba 07       	cpc	r27, r26
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__divsf3_pse+0xae>
     d18:	62 1b       	sub	r22, r18
     d1a:	73 0b       	sbc	r23, r19
     d1c:	84 0b       	sbc	r24, r20
     d1e:	ba 0b       	sbc	r27, r26
     d20:	ee 1f       	adc	r30, r30
     d22:	88 f7       	brcc	.-30     	; 0xd06 <__divsf3_pse+0x94>
     d24:	e0 95       	com	r30
     d26:	08 95       	ret

00000d28 <__fixsfsi>:
     d28:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
     d2c:	68 94       	set
     d2e:	b1 11       	cpse	r27, r1
     d30:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     d34:	08 95       	ret

00000d36 <__fixunssfsi>:
     d36:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
     d3a:	88 f0       	brcs	.+34     	; 0xd5e <__fixunssfsi+0x28>
     d3c:	9f 57       	subi	r25, 0x7F	; 127
     d3e:	98 f0       	brcs	.+38     	; 0xd66 <__fixunssfsi+0x30>
     d40:	b9 2f       	mov	r27, r25
     d42:	99 27       	eor	r25, r25
     d44:	b7 51       	subi	r27, 0x17	; 23
     d46:	b0 f0       	brcs	.+44     	; 0xd74 <__fixunssfsi+0x3e>
     d48:	e1 f0       	breq	.+56     	; 0xd82 <__fixunssfsi+0x4c>
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	1a f0       	brmi	.+6      	; 0xd5a <__fixunssfsi+0x24>
     d54:	ba 95       	dec	r27
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__fixunssfsi+0x14>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <__fixunssfsi+0x4c>
     d5a:	b1 30       	cpi	r27, 0x01	; 1
     d5c:	91 f0       	breq	.+36     	; 0xd82 <__fixunssfsi+0x4c>
     d5e:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_zero>
     d62:	b1 e0       	ldi	r27, 0x01	; 1
     d64:	08 95       	ret
     d66:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     d6a:	67 2f       	mov	r22, r23
     d6c:	78 2f       	mov	r23, r24
     d6e:	88 27       	eor	r24, r24
     d70:	b8 5f       	subi	r27, 0xF8	; 248
     d72:	39 f0       	breq	.+14     	; 0xd82 <__fixunssfsi+0x4c>
     d74:	b9 3f       	cpi	r27, 0xF9	; 249
     d76:	cc f3       	brlt	.-14     	; 0xd6a <__fixunssfsi+0x34>
     d78:	86 95       	lsr	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b3 95       	inc	r27
     d80:	d9 f7       	brne	.-10     	; 0xd78 <__fixunssfsi+0x42>
     d82:	3e f4       	brtc	.+14     	; 0xd92 <__fixunssfsi+0x5c>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	08 95       	ret

00000d94 <__floatunsisf>:
     d94:	e8 94       	clt
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__floatsisf+0x12>

00000d98 <__floatsisf>:
     d98:	97 fb       	bst	r25, 7
     d9a:	3e f4       	brtc	.+14     	; 0xdaa <__floatsisf+0x12>
     d9c:	90 95       	com	r25
     d9e:	80 95       	com	r24
     da0:	70 95       	com	r23
     da2:	61 95       	neg	r22
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	8f 4f       	sbci	r24, 0xFF	; 255
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	99 23       	and	r25, r25
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <__floatsisf+0x40>
     dae:	f9 2f       	mov	r31, r25
     db0:	96 e9       	ldi	r25, 0x96	; 150
     db2:	bb 27       	eor	r27, r27
     db4:	93 95       	inc	r25
     db6:	f6 95       	lsr	r31
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f1 11       	cpse	r31, r1
     dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <__floatsisf+0x1c>
     dc4:	fa f4       	brpl	.+62     	; 0xe04 <__floatsisf+0x6c>
     dc6:	bb 0f       	add	r27, r27
     dc8:	11 f4       	brne	.+4      	; 0xdce <__floatsisf+0x36>
     dca:	60 ff       	sbrs	r22, 0
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__floatsisf+0x6c>
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <__floatsisf+0x6c>
     dd8:	88 23       	and	r24, r24
     dda:	11 f0       	breq	.+4      	; 0xde0 <__floatsisf+0x48>
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <__floatsisf+0x6a>
     de0:	77 23       	and	r23, r23
     de2:	21 f0       	breq	.+8      	; 0xdec <__floatsisf+0x54>
     de4:	9e e8       	ldi	r25, 0x8E	; 142
     de6:	87 2f       	mov	r24, r23
     de8:	76 2f       	mov	r23, r22
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__floatsisf+0x5e>
     dec:	66 23       	and	r22, r22
     dee:	71 f0       	breq	.+28     	; 0xe0c <__floatsisf+0x74>
     df0:	96 e8       	ldi	r25, 0x86	; 134
     df2:	86 2f       	mov	r24, r22
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	2a f0       	brmi	.+10     	; 0xe04 <__floatsisf+0x6c>
     dfa:	9a 95       	dec	r25
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	da f7       	brpl	.-10     	; 0xdfa <__floatsisf+0x62>
     e04:	88 0f       	add	r24, r24
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret

00000e0e <__fp_cmp>:
     e0e:	99 0f       	add	r25, r25
     e10:	00 08       	sbc	r0, r0
     e12:	55 0f       	add	r21, r21
     e14:	aa 0b       	sbc	r26, r26
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	fe ef       	ldi	r31, 0xFE	; 254
     e1a:	16 16       	cp	r1, r22
     e1c:	17 06       	cpc	r1, r23
     e1e:	e8 07       	cpc	r30, r24
     e20:	f9 07       	cpc	r31, r25
     e22:	c0 f0       	brcs	.+48     	; 0xe54 <__fp_cmp+0x46>
     e24:	12 16       	cp	r1, r18
     e26:	13 06       	cpc	r1, r19
     e28:	e4 07       	cpc	r30, r20
     e2a:	f5 07       	cpc	r31, r21
     e2c:	98 f0       	brcs	.+38     	; 0xe54 <__fp_cmp+0x46>
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	95 0b       	sbc	r25, r21
     e36:	39 f4       	brne	.+14     	; 0xe46 <__fp_cmp+0x38>
     e38:	0a 26       	eor	r0, r26
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_cmp+0x46>
     e3c:	23 2b       	or	r18, r19
     e3e:	24 2b       	or	r18, r20
     e40:	25 2b       	or	r18, r21
     e42:	21 f4       	brne	.+8      	; 0xe4c <__fp_cmp+0x3e>
     e44:	08 95       	ret
     e46:	0a 26       	eor	r0, r26
     e48:	09 f4       	brne	.+2      	; 0xe4c <__fp_cmp+0x3e>
     e4a:	a1 40       	sbci	r26, 0x01	; 1
     e4c:	a6 95       	lsr	r26
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	81 1d       	adc	r24, r1
     e52:	81 1d       	adc	r24, r1
     e54:	08 95       	ret

00000e56 <__fp_inf>:
     e56:	97 f9       	bld	r25, 7
     e58:	9f 67       	ori	r25, 0x7F	; 127
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	08 95       	ret

00000e62 <__fp_nan>:
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	08 95       	ret

00000e68 <__fp_pscA>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	18 06       	cpc	r1, r24
     e72:	09 06       	cpc	r0, r25
     e74:	08 95       	ret

00000e76 <__fp_pscB>:
     e76:	00 24       	eor	r0, r0
     e78:	0a 94       	dec	r0
     e7a:	12 16       	cp	r1, r18
     e7c:	13 06       	cpc	r1, r19
     e7e:	14 06       	cpc	r1, r20
     e80:	05 06       	cpc	r0, r21
     e82:	08 95       	ret

00000e84 <__fp_round>:
     e84:	09 2e       	mov	r0, r25
     e86:	03 94       	inc	r0
     e88:	00 0c       	add	r0, r0
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__fp_round+0xc>
     e8c:	88 23       	and	r24, r24
     e8e:	52 f0       	brmi	.+20     	; 0xea4 <__fp_round+0x20>
     e90:	bb 0f       	add	r27, r27
     e92:	40 f4       	brcc	.+16     	; 0xea4 <__fp_round+0x20>
     e94:	bf 2b       	or	r27, r31
     e96:	11 f4       	brne	.+4      	; 0xe9c <__fp_round+0x18>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__fp_round+0x20>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	08 95       	ret

00000ea6 <__fp_split3>:
     ea6:	57 fd       	sbrc	r21, 7
     ea8:	90 58       	subi	r25, 0x80	; 128
     eaa:	44 0f       	add	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	59 f0       	breq	.+22     	; 0xec6 <__fp_splitA+0x10>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__fp_splitA+0x1a>
     eb4:	47 95       	ror	r20

00000eb6 <__fp_splitA>:
     eb6:	88 0f       	add	r24, r24
     eb8:	97 fb       	bst	r25, 7
     eba:	99 1f       	adc	r25, r25
     ebc:	61 f0       	breq	.+24     	; 0xed6 <__fp_splitA+0x20>
     ebe:	9f 3f       	cpi	r25, 0xFF	; 255
     ec0:	79 f0       	breq	.+30     	; 0xee0 <__fp_splitA+0x2a>
     ec2:	87 95       	ror	r24
     ec4:	08 95       	ret
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	f2 cf       	rjmp	.-28     	; 0xeb4 <__fp_split3+0xe>
     ed0:	46 95       	lsr	r20
     ed2:	f1 df       	rcall	.-30     	; 0xeb6 <__fp_splitA>
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <__fp_splitA+0x30>
     ed6:	16 16       	cp	r1, r22
     ed8:	17 06       	cpc	r1, r23
     eda:	18 06       	cpc	r1, r24
     edc:	99 1f       	adc	r25, r25
     ede:	f1 cf       	rjmp	.-30     	; 0xec2 <__fp_splitA+0xc>
     ee0:	86 95       	lsr	r24
     ee2:	71 05       	cpc	r23, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	08 94       	sec
     ee8:	08 95       	ret

00000eea <__fp_zero>:
     eea:	e8 94       	clt

00000eec <__fp_szero>:
     eec:	bb 27       	eor	r27, r27
     eee:	66 27       	eor	r22, r22
     ef0:	77 27       	eor	r23, r23
     ef2:	cb 01       	movw	r24, r22
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__gesf2>:
     ef8:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
     efc:	08 f4       	brcc	.+2      	; 0xf00 <__gesf2+0x8>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	08 95       	ret

00000f02 <__mulsf3>:
     f02:	0e 94 94 07 	call	0xf28	; 0xf28 <__mulsf3x>
     f06:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     f0a:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     f0e:	38 f0       	brcs	.+14     	; 0xf1e <__mulsf3+0x1c>
     f10:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     f14:	20 f0       	brcs	.+8      	; 0xf1e <__mulsf3+0x1c>
     f16:	95 23       	and	r25, r21
     f18:	11 f0       	breq	.+4      	; 0xf1e <__mulsf3+0x1c>
     f1a:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     f1e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     f22:	11 24       	eor	r1, r1
     f24:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>

00000f28 <__mulsf3x>:
     f28:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     f2c:	70 f3       	brcs	.-36     	; 0xf0a <__mulsf3+0x8>

00000f2e <__mulsf3_pse>:
     f2e:	95 9f       	mul	r25, r21
     f30:	c1 f3       	breq	.-16     	; 0xf22 <__mulsf3+0x20>
     f32:	95 0f       	add	r25, r21
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	55 1f       	adc	r21, r21
     f38:	62 9f       	mul	r22, r18
     f3a:	f0 01       	movw	r30, r0
     f3c:	72 9f       	mul	r23, r18
     f3e:	bb 27       	eor	r27, r27
     f40:	f0 0d       	add	r31, r0
     f42:	b1 1d       	adc	r27, r1
     f44:	63 9f       	mul	r22, r19
     f46:	aa 27       	eor	r26, r26
     f48:	f0 0d       	add	r31, r0
     f4a:	b1 1d       	adc	r27, r1
     f4c:	aa 1f       	adc	r26, r26
     f4e:	64 9f       	mul	r22, r20
     f50:	66 27       	eor	r22, r22
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	66 1f       	adc	r22, r22
     f58:	82 9f       	mul	r24, r18
     f5a:	22 27       	eor	r18, r18
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	62 1f       	adc	r22, r18
     f62:	73 9f       	mul	r23, r19
     f64:	b0 0d       	add	r27, r0
     f66:	a1 1d       	adc	r26, r1
     f68:	62 1f       	adc	r22, r18
     f6a:	83 9f       	mul	r24, r19
     f6c:	a0 0d       	add	r26, r0
     f6e:	61 1d       	adc	r22, r1
     f70:	22 1f       	adc	r18, r18
     f72:	74 9f       	mul	r23, r20
     f74:	33 27       	eor	r19, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	23 1f       	adc	r18, r19
     f7c:	84 9f       	mul	r24, r20
     f7e:	60 0d       	add	r22, r0
     f80:	21 1d       	adc	r18, r1
     f82:	82 2f       	mov	r24, r18
     f84:	76 2f       	mov	r23, r22
     f86:	6a 2f       	mov	r22, r26
     f88:	11 24       	eor	r1, r1
     f8a:	9f 57       	subi	r25, 0x7F	; 127
     f8c:	50 40       	sbci	r21, 0x00	; 0
     f8e:	9a f0       	brmi	.+38     	; 0xfb6 <__mulsf3_pse+0x88>
     f90:	f1 f0       	breq	.+60     	; 0xfce <__mulsf3_pse+0xa0>
     f92:	88 23       	and	r24, r24
     f94:	4a f0       	brmi	.+18     	; 0xfa8 <__mulsf3_pse+0x7a>
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	bb 1f       	adc	r27, r27
     f9c:	66 1f       	adc	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	91 50       	subi	r25, 0x01	; 1
     fa4:	50 40       	sbci	r21, 0x00	; 0
     fa6:	a9 f7       	brne	.-22     	; 0xf92 <__mulsf3_pse+0x64>
     fa8:	9e 3f       	cpi	r25, 0xFE	; 254
     faa:	51 05       	cpc	r21, r1
     fac:	80 f0       	brcs	.+32     	; 0xfce <__mulsf3_pse+0xa0>
     fae:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     fb2:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     fb6:	5f 3f       	cpi	r21, 0xFF	; 255
     fb8:	e4 f3       	brlt	.-8      	; 0xfb2 <__mulsf3_pse+0x84>
     fba:	98 3e       	cpi	r25, 0xE8	; 232
     fbc:	d4 f3       	brlt	.-12     	; 0xfb2 <__mulsf3_pse+0x84>
     fbe:	86 95       	lsr	r24
     fc0:	77 95       	ror	r23
     fc2:	67 95       	ror	r22
     fc4:	b7 95       	ror	r27
     fc6:	f7 95       	ror	r31
     fc8:	e7 95       	ror	r30
     fca:	9f 5f       	subi	r25, 0xFF	; 255
     fcc:	c1 f7       	brne	.-16     	; 0xfbe <__mulsf3_pse+0x90>
     fce:	fe 2b       	or	r31, r30
     fd0:	88 0f       	add	r24, r24
     fd2:	91 1d       	adc	r25, r1
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	97 f9       	bld	r25, 7
     fda:	08 95       	ret

00000fdc <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     fdc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     fde:	91 8d       	ldd	r25, Z+25	; 0x19
     fe0:	22 8d       	ldd	r18, Z+26	; 0x1a
     fe2:	89 2f       	mov	r24, r25
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 5c       	subi	r24, 0xC0	; 192
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	82 1b       	sub	r24, r18
     fec:	91 09       	sbc	r25, r1
}
     fee:	8f 73       	andi	r24, 0x3F	; 63
     ff0:	99 27       	eor	r25, r25
     ff2:	08 95       	ret

00000ff4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ff4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ff6:	91 8d       	ldd	r25, Z+25	; 0x19
     ff8:	82 8d       	ldd	r24, Z+26	; 0x1a
     ffa:	98 17       	cp	r25, r24
     ffc:	31 f0       	breq	.+12     	; 0x100a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ffe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1000:	e8 0f       	add	r30, r24
    1002:	f1 1d       	adc	r31, r1
    1004:	85 8d       	ldd	r24, Z+29	; 0x1d
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    100e:	08 95       	ret

00001010 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1010:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1012:	91 8d       	ldd	r25, Z+25	; 0x19
    1014:	82 8d       	ldd	r24, Z+26	; 0x1a
    1016:	98 17       	cp	r25, r24
    1018:	61 f0       	breq	.+24     	; 0x1032 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    101a:	82 8d       	ldd	r24, Z+26	; 0x1a
    101c:	df 01       	movw	r26, r30
    101e:	a8 0f       	add	r26, r24
    1020:	b1 1d       	adc	r27, r1
    1022:	5d 96       	adiw	r26, 0x1d	; 29
    1024:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1026:	92 8d       	ldd	r25, Z+26	; 0x1a
    1028:	9f 5f       	subi	r25, 0xFF	; 255
    102a:	9f 73       	andi	r25, 0x3F	; 63
    102c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1036:	08 95       	ret

00001038 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1038:	fc 01       	movw	r30, r24
    103a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    103c:	44 8d       	ldd	r20, Z+28	; 0x1c
    103e:	25 2f       	mov	r18, r21
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	84 2f       	mov	r24, r20
    1044:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1046:	82 1b       	sub	r24, r18
    1048:	93 0b       	sbc	r25, r19
    104a:	54 17       	cp	r21, r20
    104c:	10 f0       	brcs	.+4      	; 0x1052 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    104e:	cf 96       	adiw	r24, 0x3f	; 63
    1050:	08 95       	ret
  return tail - head - 1;
    1052:	01 97       	sbiw	r24, 0x01	; 1
}
    1054:	08 95       	ret

00001056 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1056:	87 e8       	ldi	r24, 0x87	; 135
    1058:	99 e0       	ldi	r25, 0x09	; 9
    105a:	89 2b       	or	r24, r25
    105c:	49 f0       	breq	.+18     	; 0x1070 <_Z14serialEventRunv+0x1a>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	89 2b       	or	r24, r25
    1064:	29 f0       	breq	.+10     	; 0x1070 <_Z14serialEventRunv+0x1a>
    1066:	0e 94 87 09 	call	0x130e	; 0x130e <_Z17Serial0_availablev>
    106a:	81 11       	cpse	r24, r1
    106c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1070:	08 95       	ret

00001072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1072:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1074:	84 8d       	ldd	r24, Z+28	; 0x1c
    1076:	df 01       	movw	r26, r30
    1078:	a8 0f       	add	r26, r24
    107a:	b1 1d       	adc	r27, r1
    107c:	a3 5a       	subi	r26, 0xA3	; 163
    107e:	bf 4f       	sbci	r27, 0xFF	; 255
    1080:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1082:	84 8d       	ldd	r24, Z+28	; 0x1c
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	8f 73       	andi	r24, 0x3F	; 63
    108a:	99 27       	eor	r25, r25
    108c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    108e:	a6 89       	ldd	r26, Z+22	; 0x16
    1090:	b7 89       	ldd	r27, Z+23	; 0x17
    1092:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1094:	a0 89       	ldd	r26, Z+16	; 0x10
    1096:	b1 89       	ldd	r27, Z+17	; 0x11
    1098:	8c 91       	ld	r24, X
    109a:	83 70       	andi	r24, 0x03	; 3
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    10a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    10a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    10a4:	98 13       	cpse	r25, r24
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    10a8:	02 88       	ldd	r0, Z+18	; 0x12
    10aa:	f3 89       	ldd	r31, Z+19	; 0x13
    10ac:	e0 2d       	mov	r30, r0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	80 83       	st	Z, r24
    10b4:	08 95       	ret

000010b6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ec 01       	movw	r28, r24
  _written = true;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    10c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10cc:	98 13       	cpse	r25, r24
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <_ZN14HardwareSerial5writeEh+0x24>
    10d0:	e8 89       	ldd	r30, Y+16	; 0x10
    10d2:	f9 89       	ldd	r31, Y+17	; 0x11
    10d4:	80 81       	ld	r24, Z
    10d6:	85 fd       	sbrc	r24, 5
    10d8:	26 c0       	rjmp	.+76     	; 0x1126 <_ZN14HardwareSerial5writeEh+0x70>
    10da:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    10dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	0f 5f       	subi	r16, 0xFF	; 255
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	0f 73       	andi	r16, 0x3F	; 63
    10e6:	11 27       	eor	r17, r17
    10e8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    10ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ec:	e8 12       	cpse	r14, r24
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	07 fc       	sbrc	r0, 7
    10f4:	fa cf       	rjmp	.-12     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    10f6:	e8 89       	ldd	r30, Y+16	; 0x10
    10f8:	f9 89       	ldd	r31, Y+17	; 0x11
    10fa:	80 81       	ld	r24, Z
    10fc:	85 ff       	sbrs	r24, 5
    10fe:	f5 cf       	rjmp	.-22     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1106:	f1 cf       	rjmp	.-30     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110a:	fe 01       	movw	r30, r28
    110c:	e8 0f       	add	r30, r24
    110e:	f1 1d       	adc	r31, r1
    1110:	e3 5a       	subi	r30, 0xA3	; 163
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1116:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1118:	f8 94       	cli
    _tx_buffer_head = i;
    111a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    111c:	ea 89       	ldd	r30, Y+18	; 0x12
    111e:	fb 89       	ldd	r31, Y+19	; 0x13
    1120:	80 81       	ld	r24, Z
    1122:	80 62       	ori	r24, 0x20	; 32
    1124:	0a c0       	rjmp	.+20     	; 0x113a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1126:	9f b7       	in	r25, 0x3f	; 63
    1128:	f8 94       	cli
      *_udr = c;
    112a:	ee 89       	ldd	r30, Y+22	; 0x16
    112c:	ff 89       	ldd	r31, Y+23	; 0x17
    112e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1130:	e8 89       	ldd	r30, Y+16	; 0x10
    1132:	f9 89       	ldd	r31, Y+17	; 0x11
    1134:	80 81       	ld	r24, Z
    1136:	83 70       	andi	r24, 0x03	; 3
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    113c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	08 95       	ret

00001150 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1156:	88 8d       	ldd	r24, Y+24	; 0x18
    1158:	88 23       	and	r24, r24
    115a:	c9 f0       	breq	.+50     	; 0x118e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    115c:	ea 89       	ldd	r30, Y+18	; 0x12
    115e:	fb 89       	ldd	r31, Y+19	; 0x13
    1160:	80 81       	ld	r24, Z
    1162:	85 fd       	sbrc	r24, 5
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <_ZN14HardwareSerial5flushEv+0x20>
    1166:	a8 89       	ldd	r26, Y+16	; 0x10
    1168:	b9 89       	ldd	r27, Y+17	; 0x11
    116a:	8c 91       	ld	r24, X
    116c:	86 fd       	sbrc	r24, 6
    116e:	0f c0       	rjmp	.+30     	; 0x118e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	07 fc       	sbrc	r0, 7
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
    1176:	80 81       	ld	r24, Z
    1178:	85 ff       	sbrs	r24, 5
    117a:	f2 cf       	rjmp	.-28     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    117c:	a8 89       	ldd	r26, Y+16	; 0x10
    117e:	b9 89       	ldd	r27, Y+17	; 0x11
    1180:	8c 91       	ld	r24, X
    1182:	85 ff       	sbrs	r24, 5
    1184:	ed cf       	rjmp	.-38     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    118c:	e7 cf       	rjmp	.-50     	; 0x115c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
    11a4:	6a 01       	movw	r12, r20
    11a6:	7b 01       	movw	r14, r22
    11a8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    11aa:	e8 89       	ldd	r30, Y+16	; 0x10
    11ac:	f9 89       	ldd	r31, Y+17	; 0x11
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    11b2:	41 15       	cp	r20, r1
    11b4:	51 4e       	sbci	r21, 0xE1	; 225
    11b6:	61 05       	cpc	r22, r1
    11b8:	71 05       	cpc	r23, r1
    11ba:	b1 f0       	breq	.+44     	; 0x11e8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	79 e0       	ldi	r23, 0x09	; 9
    11c0:	8d e3       	ldi	r24, 0x3D	; 61
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a7 01       	movw	r20, r14
    11c6:	96 01       	movw	r18, r12
    11c8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	a1 09       	sbc	r26, r1
    11d4:	b1 09       	sbc	r27, r1
    11d6:	b6 95       	lsr	r27
    11d8:	a7 95       	ror	r26
    11da:	97 95       	ror	r25
    11dc:	87 95       	ror	r24
    11de:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    11e0:	21 15       	cp	r18, r1
    11e2:	80 e1       	ldi	r24, 0x10	; 16
    11e4:	38 07       	cpc	r19, r24
    11e6:	a8 f0       	brcs	.+42     	; 0x1212 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    11e8:	e8 89       	ldd	r30, Y+16	; 0x10
    11ea:	f9 89       	ldd	r31, Y+17	; 0x11
    11ec:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    11ee:	60 e8       	ldi	r22, 0x80	; 128
    11f0:	74 e8       	ldi	r23, 0x84	; 132
    11f2:	8e e1       	ldi	r24, 0x1E	; 30
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a7 01       	movw	r20, r14
    11f8:	96 01       	movw	r18, r12
    11fa:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    11fe:	da 01       	movw	r26, r20
    1200:	c9 01       	movw	r24, r18
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	b6 95       	lsr	r27
    120a:	a7 95       	ror	r26
    120c:	97 95       	ror	r25
    120e:	87 95       	ror	r24
    1210:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1212:	ec 85       	ldd	r30, Y+12	; 0x0c
    1214:	fd 85       	ldd	r31, Y+13	; 0x0d
    1216:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1218:	ee 85       	ldd	r30, Y+14	; 0x0e
    121a:	ff 85       	ldd	r31, Y+15	; 0x0f
    121c:	20 83       	st	Z, r18

  _written = false;
    121e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1220:	ec 89       	ldd	r30, Y+20	; 0x14
    1222:	fd 89       	ldd	r31, Y+21	; 0x15
    1224:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1226:	ea 89       	ldd	r30, Y+18	; 0x12
    1228:	fb 89       	ldd	r31, Y+19	; 0x13
    122a:	80 81       	ld	r24, Z
    122c:	80 61       	ori	r24, 0x10	; 16
    122e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1230:	ea 89       	ldd	r30, Y+18	; 0x12
    1232:	fb 89       	ldd	r31, Y+19	; 0x13
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    123a:	ea 89       	ldd	r30, Y+18	; 0x12
    123c:	fb 89       	ldd	r31, Y+19	; 0x13
    123e:	80 81       	ld	r24, Z
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1244:	ea 89       	ldd	r30, Y+18	; 0x12
    1246:	fb 89       	ldd	r31, Y+19	; 0x13
    1248:	80 81       	ld	r24, Z
    124a:	8f 7d       	andi	r24, 0xDF	; 223
    124c:	80 83       	st	Z, r24
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	08 95       	ret

0000125e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1272:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Serial+0x10>
    1276:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <Serial+0x11>
    127a:	80 81       	ld	r24, Z
    127c:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <Serial+0x16>
    1280:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <Serial+0x17>
    1284:	82 fd       	sbrc	r24, 2
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1288:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    128a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <Serial+0x19>
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1292:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <Serial+0x1a>
    1296:	82 17       	cp	r24, r18
    1298:	51 f0       	breq	.+20     	; 0x12ae <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    129a:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <Serial+0x19>
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ec 58       	subi	r30, 0x8C	; 140
    12a2:	fc 4f       	sbci	r31, 0xFC	; 252
    12a4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    12a6:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Serial+0x19>
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    12ac:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    12e4:	84 e7       	ldi	r24, 0x74	; 116
    12e6:	93 e0       	ldi	r25, 0x03	; 3
    12e8:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    130e:	84 e7       	ldi	r24, 0x74	; 116
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN14HardwareSerial9availableEv>
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	89 2b       	or	r24, r25
    131a:	09 f4       	brne	.+2      	; 0x131e <_Z17Serial0_availablev+0x10>
    131c:	20 e0       	ldi	r18, 0x00	; 0
}
    131e:	82 2f       	mov	r24, r18
    1320:	08 95       	ret

00001322 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1322:	e4 e7       	ldi	r30, 0x74	; 116
    1324:	f3 e0       	ldi	r31, 0x03	; 3
    1326:	13 82       	std	Z+3, r1	; 0x03
    1328:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    132a:	88 ee       	ldi	r24, 0xE8	; 232
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	84 83       	std	Z+4, r24	; 0x04
    1334:	95 83       	std	Z+5, r25	; 0x05
    1336:	a6 83       	std	Z+6, r26	; 0x06
    1338:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    133a:	85 e1       	ldi	r24, 0x15	; 21
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	85 ec       	ldi	r24, 0xC5	; 197
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	95 87       	std	Z+13, r25	; 0x0d
    1348:	84 87       	std	Z+12, r24	; 0x0c
    134a:	84 ec       	ldi	r24, 0xC4	; 196
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	97 87       	std	Z+15, r25	; 0x0f
    1350:	86 87       	std	Z+14, r24	; 0x0e
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	91 8b       	std	Z+17, r25	; 0x11
    1358:	80 8b       	std	Z+16, r24	; 0x10
    135a:	81 ec       	ldi	r24, 0xC1	; 193
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	93 8b       	std	Z+19, r25	; 0x13
    1360:	82 8b       	std	Z+18, r24	; 0x12
    1362:	82 ec       	ldi	r24, 0xC2	; 194
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	95 8b       	std	Z+21, r25	; 0x15
    1368:	84 8b       	std	Z+20, r24	; 0x14
    136a:	86 ec       	ldi	r24, 0xC6	; 198
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	97 8b       	std	Z+23, r25	; 0x17
    1370:	86 8b       	std	Z+22, r24	; 0x16
    1372:	11 8e       	std	Z+25, r1	; 0x19
    1374:	12 8e       	std	Z+26, r1	; 0x1a
    1376:	13 8e       	std	Z+27, r1	; 0x1b
    1378:	14 8e       	std	Z+28, r1	; 0x1c
    137a:	08 95       	ret

0000137c <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    137c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <init>

	initVariant();
    1380:	0e 94 93 17 	call	0x2f26	; 0x2f26 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1384:	0e 94 2b 05 	call	0xa56	; 0xa56 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1388:	cb e2       	ldi	r28, 0x2B	; 43
    138a:	d8 e0       	ldi	r29, 0x08	; 8
#endif
	
	setup();
    
	for (;;) {
		loop();
    138c:	0e 94 68 05 	call	0xad0	; 0xad0 <loop>
		if (serialEventRun) serialEventRun();
    1390:	20 97       	sbiw	r28, 0x00	; 0
    1392:	e1 f3       	breq	.-8      	; 0x138c <main+0x10>
    1394:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z14serialEventRunv>
    1398:	f9 cf       	rjmp	.-14     	; 0x138c <main+0x10>

0000139a <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	6c 01       	movw	r12, r24
    13ac:	7a 01       	movw	r14, r20
    13ae:	8b 01       	movw	r16, r22
    13b0:	c0 e0       	ldi	r28, 0x00	; 0
    13b2:	d0 e0       	ldi	r29, 0x00	; 0
    13b4:	ce 15       	cp	r28, r14
    13b6:	df 05       	cpc	r29, r15
    13b8:	81 f0       	breq	.+32     	; 0x13da <_ZN5Print5writeEPKhj+0x40>
    13ba:	d8 01       	movw	r26, r16
    13bc:	6d 91       	ld	r22, X+
    13be:	8d 01       	movw	r16, r26
    13c0:	d6 01       	movw	r26, r12
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	c6 01       	movw	r24, r12
    13ce:	09 95       	icall
    13d0:	89 2b       	or	r24, r25
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <_ZN5Print5writeEPKhj+0x3e>
    13d4:	21 96       	adiw	r28, 0x01	; 1
    13d6:	ee cf       	rjmp	.-36     	; 0x13b4 <_ZN5Print5writeEPKhj+0x1a>
    13d8:	7e 01       	movw	r14, r28
    13da:	c7 01       	movw	r24, r14
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <_ZN5Print5printEPK19__FlashStringHelper>:
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	8c 01       	movw	r16, r24
    13fc:	7b 01       	movw	r14, r22
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	d0 e0       	ldi	r29, 0x00	; 0
    1402:	f7 01       	movw	r30, r14
    1404:	ec 0f       	add	r30, r28
    1406:	fd 1f       	adc	r31, r29
    1408:	64 91       	lpm	r22, Z
    140a:	66 23       	and	r22, r22
    140c:	61 f0       	breq	.+24     	; 0x1426 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    140e:	d8 01       	movw	r26, r16
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	01 90       	ld	r0, Z+
    1416:	f0 81       	ld	r31, Z
    1418:	e0 2d       	mov	r30, r0
    141a:	c8 01       	movw	r24, r16
    141c:	09 95       	icall
    141e:	89 2b       	or	r24, r25
    1420:	11 f0       	breq	.+4      	; 0x1426 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1422:	21 96       	adiw	r28, 0x01	; 1
    1424:	ee cf       	rjmp	.-36     	; 0x1402 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1426:	ce 01       	movw	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <_ZN5Print5printEPKc>:
    1436:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>

0000143a <_ZN5Print5printEc>:
    143a:	dc 01       	movw	r26, r24
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	01 90       	ld	r0, Z+
    1442:	f0 81       	ld	r31, Z
    1444:	e0 2d       	mov	r30, r0
    1446:	09 94       	ijmp

00001448 <_ZN5Print7printlnEv>:
    1448:	63 e2       	ldi	r22, 0x23	; 35
    144a:	72 e0       	ldi	r23, 0x02	; 2
    144c:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>

00001450 <_ZN5Print11printNumberEmh>:
    1450:	8f 92       	push	r8
    1452:	9f 92       	push	r9
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	a1 97       	sbiw	r28, 0x21	; 33
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	7c 01       	movw	r14, r24
    1476:	fa 01       	movw	r30, r20
    1478:	cb 01       	movw	r24, r22
    147a:	19 a2       	std	Y+33, r1	; 0x21
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	08 f4       	brcc	.+2      	; 0x1482 <_ZN5Print11printNumberEmh+0x32>
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	8e 01       	movw	r16, r28
    1484:	0f 5d       	subi	r16, 0xDF	; 223
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	82 2e       	mov	r8, r18
    148a:	91 2c       	mov	r9, r1
    148c:	a1 2c       	mov	r10, r1
    148e:	b1 2c       	mov	r11, r1
    1490:	bf 01       	movw	r22, r30
    1492:	a5 01       	movw	r20, r10
    1494:	94 01       	movw	r18, r8
    1496:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    149a:	f9 01       	movw	r30, r18
    149c:	ca 01       	movw	r24, r20
    149e:	01 50       	subi	r16, 0x01	; 1
    14a0:	11 09       	sbc	r17, r1
    14a2:	6a 30       	cpi	r22, 0x0A	; 10
    14a4:	10 f4       	brcc	.+4      	; 0x14aa <_ZN5Print11printNumberEmh+0x5a>
    14a6:	60 5d       	subi	r22, 0xD0	; 208
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_ZN5Print11printNumberEmh+0x5c>
    14aa:	69 5c       	subi	r22, 0xC9	; 201
    14ac:	d8 01       	movw	r26, r16
    14ae:	6c 93       	st	X, r22
    14b0:	23 2b       	or	r18, r19
    14b2:	24 2b       	or	r18, r20
    14b4:	25 2b       	or	r18, r21
    14b6:	61 f7       	brne	.-40     	; 0x1490 <_ZN5Print11printNumberEmh+0x40>
    14b8:	b8 01       	movw	r22, r16
    14ba:	c7 01       	movw	r24, r14
    14bc:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>
    14c0:	a1 96       	adiw	r28, 0x21	; 33
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	08 95       	ret

000014e2 <_ZN5Print5printEmi>:
    14e2:	21 15       	cp	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <_ZN5Print5printEmi+0x16>
    14e8:	dc 01       	movw	r26, r24
    14ea:	ed 91       	ld	r30, X+
    14ec:	fc 91       	ld	r31, X
    14ee:	01 90       	ld	r0, Z+
    14f0:	f0 81       	ld	r31, Z
    14f2:	e0 2d       	mov	r30, r0
    14f4:	64 2f       	mov	r22, r20
    14f6:	09 94       	ijmp
    14f8:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>

000014fc <_ZN5Print5printEhi>:
    14fc:	9a 01       	movw	r18, r20
    14fe:	46 2f       	mov	r20, r22
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5printEmi>

0000150a <_ZN5Print5printEji>:
    150a:	9a 01       	movw	r18, r20
    150c:	ab 01       	movw	r20, r22
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5printEmi>

00001516 <_ZN5Print5printEli>:
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	21 15       	cp	r18, r1
    1528:	31 05       	cpc	r19, r1
    152a:	81 f4       	brne	.+32     	; 0x154c <_ZN5Print5printEli+0x36>
    152c:	dc 01       	movw	r26, r24
    152e:	ed 91       	ld	r30, X+
    1530:	fc 91       	ld	r31, X
    1532:	01 90       	ld	r0, Z+
    1534:	f0 81       	ld	r31, Z
    1536:	e0 2d       	mov	r30, r0
    1538:	64 2f       	mov	r22, r20
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	09 94       	ijmp
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	31 05       	cpc	r19, r1
    1550:	01 f5       	brne	.+64     	; 0x1592 <_ZN5Print5printEli+0x7c>
    1552:	77 ff       	sbrs	r23, 7
    1554:	1d c0       	rjmp	.+58     	; 0x1590 <_ZN5Print5printEli+0x7a>
    1556:	6a 01       	movw	r12, r20
    1558:	7b 01       	movw	r14, r22
    155a:	ec 01       	movw	r28, r24
    155c:	6d e2       	ldi	r22, 0x2D	; 45
    155e:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    1562:	8c 01       	movw	r16, r24
    1564:	44 27       	eor	r20, r20
    1566:	55 27       	eor	r21, r21
    1568:	ba 01       	movw	r22, r20
    156a:	4c 19       	sub	r20, r12
    156c:	5d 09       	sbc	r21, r13
    156e:	6e 09       	sbc	r22, r14
    1570:	7f 09       	sbc	r23, r15
    1572:	2a e0       	ldi	r18, 0x0A	; 10
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>
    157a:	80 0f       	add	r24, r16
    157c:	91 1f       	adc	r25, r17
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	08 95       	ret
    1590:	2a e0       	ldi	r18, 0x0A	; 10
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>

000015a6 <_ZN5Print5printEii>:
    15a6:	9a 01       	movw	r18, r20
    15a8:	ab 01       	movw	r20, r22
    15aa:	77 0f       	add	r23, r23
    15ac:	66 0b       	sbc	r22, r22
    15ae:	77 0b       	sbc	r23, r23
    15b0:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <_ZN5Print5printEli>

000015b4 <_ZN5Print7printlnEii>:
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
    15c2:	8c 01       	movw	r16, r24
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN5Print7printlnEv>
    15ca:	80 0f       	add	r24, r16
    15cc:	91 1f       	adc	r25, r17
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <_ZN5Print10printFloatEdh>:
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	8c 01       	movw	r16, r24
    15f4:	6a 01       	movw	r12, r20
    15f6:	7b 01       	movw	r14, r22
    15f8:	72 2e       	mov	r7, r18
    15fa:	9a 01       	movw	r18, r20
    15fc:	ab 01       	movw	r20, r22
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__unordsf2>
    1606:	88 23       	and	r24, r24
    1608:	19 f0       	breq	.+6      	; 0x1610 <_ZN5Print10printFloatEdh+0x38>
    160a:	66 e2       	ldi	r22, 0x26	; 38
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	27 c0       	rjmp	.+78     	; 0x165e <_ZN5Print10printFloatEdh+0x86>
    1610:	46 01       	movw	r8, r12
    1612:	57 01       	movw	r10, r14
    1614:	e8 94       	clt
    1616:	b7 f8       	bld	r11, 7
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	5f e7       	ldi	r21, 0x7F	; 127
    1620:	c5 01       	movw	r24, r10
    1622:	b4 01       	movw	r22, r8
    1624:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__unordsf2>
    1628:	81 11       	cpse	r24, r1
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <_ZN5Print10printFloatEdh+0x6e>
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	5f e7       	ldi	r21, 0x7F	; 127
    1634:	c5 01       	movw	r24, r10
    1636:	b4 01       	movw	r22, r8
    1638:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    163c:	18 16       	cp	r1, r24
    163e:	1c f4       	brge	.+6      	; 0x1646 <_ZN5Print10printFloatEdh+0x6e>
    1640:	6a e2       	ldi	r22, 0x2A	; 42
    1642:	72 e0       	ldi	r23, 0x02	; 2
    1644:	0c c0       	rjmp	.+24     	; 0x165e <_ZN5Print10printFloatEdh+0x86>
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	5f e4       	ldi	r21, 0x4F	; 79
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 7c 07 	call	0xef8	; 0xef8 <__gesf2>
    1656:	18 16       	cp	r1, r24
    1658:	94 f4       	brge	.+36     	; 0x167e <_ZN5Print10printFloatEdh+0xa6>
    165a:	6e e2       	ldi	r22, 0x2E	; 46
    165c:	72 e0       	ldi	r23, 0x02	; 2
    165e:	c8 01       	movw	r24, r16
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>
    167e:	2f ef       	ldi	r18, 0xFF	; 255
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	5f ec       	ldi	r21, 0xCF	; 207
    1686:	c7 01       	movw	r24, r14
    1688:	b6 01       	movw	r22, r12
    168a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    168e:	87 fd       	sbrc	r24, 7
    1690:	e4 cf       	rjmp	.-56     	; 0x165a <_ZN5Print10printFloatEdh+0x82>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    16a0:	87 ff       	sbrs	r24, 7
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <_ZN5Print10printFloatEdh+0xe0>
    16a4:	6d e2       	ldi	r22, 0x2D	; 45
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    16ac:	ec 01       	movw	r28, r24
    16ae:	f7 fa       	bst	r15, 7
    16b0:	f0 94       	com	r15
    16b2:	f7 f8       	bld	r15, 7
    16b4:	f0 94       	com	r15
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN5Print10printFloatEdh+0xe4>
    16b8:	c0 e0       	ldi	r28, 0x00	; 0
    16ba:	d0 e0       	ldi	r29, 0x00	; 0
    16bc:	b1 2c       	mov	r11, r1
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	9f e3       	ldi	r25, 0x3F	; 63
    16c6:	7b 14       	cp	r7, r11
    16c8:	41 f0       	breq	.+16     	; 0x16da <_ZN5Print10printFloatEdh+0x102>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 22 06 	call	0xc44	; 0xc44 <__divsf3>
    16d6:	b3 94       	inc	r11
    16d8:	f6 cf       	rjmp	.-20     	; 0x16c6 <_ZN5Print10printFloatEdh+0xee>
    16da:	a7 01       	movw	r20, r14
    16dc:	96 01       	movw	r18, r12
    16de:	0e 94 b1 05 	call	0xb62	; 0xb62 <__addsf3>
    16e2:	6b 01       	movw	r12, r22
    16e4:	7c 01       	movw	r14, r24
    16e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
    16ea:	4b 01       	movw	r8, r22
    16ec:	5c 01       	movw	r10, r24
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	ab 01       	movw	r20, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>
    16fa:	c8 0f       	add	r28, r24
    16fc:	d9 1f       	adc	r29, r25
    16fe:	77 20       	and	r7, r7
    1700:	b9 f1       	breq	.+110    	; 0x1770 <_ZN5Print10printFloatEdh+0x198>
    1702:	c5 01       	movw	r24, r10
    1704:	b4 01       	movw	r22, r8
    1706:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 b0 05 	call	0xb60	; 0xb60 <__subsf3>
    1716:	6b 01       	movw	r12, r22
    1718:	7c 01       	movw	r14, r24
    171a:	6e e2       	ldi	r22, 0x2E	; 46
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    1722:	c8 0f       	add	r28, r24
    1724:	d9 1f       	adc	r29, r25
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	0e 94 81 07 	call	0xf02	; 0xf02 <__mulsf3>
    1736:	4b 01       	movw	r8, r22
    1738:	5c 01       	movw	r10, r24
    173a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	4a e0       	ldi	r20, 0x0A	; 10
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	c8 01       	movw	r24, r16
    1748:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEji>
    174c:	c8 0f       	add	r28, r24
    174e:	d9 1f       	adc	r29, r25
    1750:	b6 01       	movw	r22, r12
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	c5 01       	movw	r24, r10
    1760:	b4 01       	movw	r22, r8
    1762:	0e 94 b0 05 	call	0xb60	; 0xb60 <__subsf3>
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
    176a:	7a 94       	dec	r7
    176c:	71 10       	cpse	r7, r1
    176e:	db cf       	rjmp	.-74     	; 0x1726 <_ZN5Print10printFloatEdh+0x14e>
    1770:	ce 01       	movw	r24, r28
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	08 95       	ret

0000178e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1798:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN5Print10printFloatEdh>
    179c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN5Print7printlnEv>
  return n;
}
    17a4:	80 0f       	add	r24, r16
    17a6:	91 1f       	adc	r25, r17
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    17b2:	08 95       	ret

000017b4 <attachInterrupt>:
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	e8 f4       	brcc	.+58     	; 0x17f2 <attachInterrupt+0x3e>
    17b8:	e8 2f       	mov	r30, r24
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	e4 5d       	subi	r30, 0xD4	; 212
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	71 83       	std	Z+1, r23	; 0x01
    17c6:	60 83       	st	Z, r22
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	41 f0       	breq	.+16     	; 0x17dc <attachInterrupt+0x28>
    17cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17d0:	8c 7f       	andi	r24, 0xFC	; 252
    17d2:	48 2b       	or	r20, r24
    17d4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17d8:	e8 9a       	sbi	0x1d, 0	; 29
    17da:	08 95       	ret
    17dc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17e0:	83 7f       	andi	r24, 0xF3	; 243
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	44 0f       	add	r20, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	48 2b       	or	r20, r24
    17ec:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17f0:	e9 9a       	sbi	0x1d, 1	; 29
    17f2:	08 95       	ret

000017f4 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	2f 93       	push	r18
    1800:	3f 93       	push	r19
    1802:	4f 93       	push	r20
    1804:	5f 93       	push	r21
    1806:	6f 93       	push	r22
    1808:	7f 93       	push	r23
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	af 93       	push	r26
    1810:	bf 93       	push	r27
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <intFunc>
    181a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <intFunc+0x1>
    181e:	09 95       	icall
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <intFunc+0x2>
    1868:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <intFunc+0x3>
    186c:	09 95       	icall
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	af 93       	push	r26
    18a4:	bf 93       	push	r27
    18a6:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <timer0_millis>
    18aa:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <timer0_millis+0x1>
    18ae:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <timer0_millis+0x2>
    18b2:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <timer0_millis+0x3>
    18b6:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <timer0_fract>
    18ba:	23 e0       	ldi	r18, 0x03	; 3
    18bc:	23 0f       	add	r18, r19
    18be:	2d 37       	cpi	r18, 0x7D	; 125
    18c0:	20 f4       	brcc	.+8      	; 0x18ca <__vector_16+0x3a>
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__vector_16+0x44>
    18ca:	26 e8       	ldi	r18, 0x86	; 134
    18cc:	23 0f       	add	r18, r19
    18ce:	02 96       	adiw	r24, 0x02	; 2
    18d0:	a1 1d       	adc	r26, r1
    18d2:	b1 1d       	adc	r27, r1
    18d4:	20 93 11 04 	sts	0x0411, r18	; 0x800411 <timer0_fract>
    18d8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <timer0_millis>
    18dc:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <timer0_millis+0x1>
    18e0:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <timer0_millis+0x2>
    18e4:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <timer0_millis+0x3>
    18e8:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    18ec:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    18f0:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    18f4:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	a1 1d       	adc	r26, r1
    18fc:	b1 1d       	adc	r27, r1
    18fe:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <timer0_overflow_count>
    1902:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <timer0_overflow_count+0x1>
    1906:	a0 93 18 04 	sts	0x0418, r26	; 0x800418 <timer0_overflow_count+0x2>
    190a:	b0 93 19 04 	sts	0x0419, r27	; 0x800419 <timer0_overflow_count+0x3>
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <micros>:
    1924:	3f b7       	in	r19, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    192c:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    1930:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    1934:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
    1938:	26 b5       	in	r18, 0x26	; 38
    193a:	a8 9b       	sbis	0x15, 0	; 21
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <micros+0x24>
    193e:	2f 3f       	cpi	r18, 0xFF	; 255
    1940:	19 f0       	breq	.+6      	; 0x1948 <micros+0x24>
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	a1 1d       	adc	r26, r1
    1946:	b1 1d       	adc	r27, r1
    1948:	3f bf       	out	0x3f, r19	; 63
    194a:	ba 2f       	mov	r27, r26
    194c:	a9 2f       	mov	r26, r25
    194e:	98 2f       	mov	r25, r24
    1950:	88 27       	eor	r24, r24
    1952:	82 0f       	add	r24, r18
    1954:	91 1d       	adc	r25, r1
    1956:	a1 1d       	adc	r26, r1
    1958:	b1 1d       	adc	r27, r1
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	42 e0       	ldi	r20, 0x02	; 2
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	4a 95       	dec	r20
    196a:	d1 f7       	brne	.-12     	; 0x1960 <micros+0x3c>
    196c:	08 95       	ret

0000196e <delay>:
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	6b 01       	movw	r12, r22
    1980:	7c 01       	movw	r14, r24
    1982:	0e 94 92 0c 	call	0x1924	; 0x1924 <micros>
    1986:	4b 01       	movw	r8, r22
    1988:	5c 01       	movw	r10, r24
    198a:	c1 14       	cp	r12, r1
    198c:	d1 04       	cpc	r13, r1
    198e:	e1 04       	cpc	r14, r1
    1990:	f1 04       	cpc	r15, r1
    1992:	01 f1       	breq	.+64     	; 0x19d4 <delay+0x66>
    1994:	0e 94 36 19 	call	0x326c	; 0x326c <yield>
    1998:	0e 94 92 0c 	call	0x1924	; 0x1924 <micros>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	88 19       	sub	r24, r8
    19a2:	99 09       	sbc	r25, r9
    19a4:	aa 09       	sbc	r26, r10
    19a6:	bb 09       	sbc	r27, r11
    19a8:	88 3e       	cpi	r24, 0xE8	; 232
    19aa:	93 40       	sbci	r25, 0x03	; 3
    19ac:	a1 05       	cpc	r26, r1
    19ae:	b1 05       	cpc	r27, r1
    19b0:	60 f3       	brcs	.-40     	; 0x198a <delay+0x1c>
    19b2:	21 e0       	ldi	r18, 0x01	; 1
    19b4:	c2 1a       	sub	r12, r18
    19b6:	d1 08       	sbc	r13, r1
    19b8:	e1 08       	sbc	r14, r1
    19ba:	f1 08       	sbc	r15, r1
    19bc:	88 ee       	ldi	r24, 0xE8	; 232
    19be:	88 0e       	add	r8, r24
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	98 1e       	adc	r9, r24
    19c4:	a1 1c       	adc	r10, r1
    19c6:	b1 1c       	adc	r11, r1
    19c8:	c1 14       	cp	r12, r1
    19ca:	d1 04       	cpc	r13, r1
    19cc:	e1 04       	cpc	r14, r1
    19ce:	f1 04       	cpc	r15, r1
    19d0:	19 f7       	brne	.-58     	; 0x1998 <delay+0x2a>
    19d2:	db cf       	rjmp	.-74     	; 0x198a <delay+0x1c>
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	08 95       	ret

000019e6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    19e6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    19e8:	84 b5       	in	r24, 0x24	; 36
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    19ee:	84 b5       	in	r24, 0x24	; 36
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    19f4:	85 b5       	in	r24, 0x25	; 37
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    19fa:	85 b5       	in	r24, 0x25	; 37
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a00:	ee e6       	ldi	r30, 0x6E	; 110
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a0a:	e1 e8       	ldi	r30, 0x81	; 129
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a10:	80 81       	ld	r24, Z
    1a12:	82 60       	ori	r24, 0x02	; 2
    1a14:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a16:	80 81       	ld	r24, Z
    1a18:	81 60       	ori	r24, 0x01	; 1
    1a1a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a1c:	e0 e8       	ldi	r30, 0x80	; 128
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a26:	e1 eb       	ldi	r30, 0xB1	; 177
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	84 60       	ori	r24, 0x04	; 4
    1a2e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a30:	e0 eb       	ldi	r30, 0xB0	; 176
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1a3a:	ea e7       	ldi	r30, 0x7A	; 122
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	84 60       	ori	r24, 0x04	; 4
    1a42:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1a44:	80 81       	ld	r24, Z
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1a50:	80 81       	ld	r24, Z
    1a52:	80 68       	ori	r24, 0x80	; 128
    1a54:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a56:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1a5a:	08 95       	ret

00001a5c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	18 2f       	mov	r17, r24
    1a64:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
	if (val == 0)
    1a6c:	20 97       	sbiw	r28, 0x00	; 0
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <analogWrite+0x20>
	}
	else if (val == 255)
    1a74:	cf 3f       	cpi	r28, 0xFF	; 255
    1a76:	d1 05       	cpc	r29, r1
    1a78:	39 f4       	brne	.+14     	; 0x1a88 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1a84:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1a88:	e1 2f       	mov	r30, r17
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	ee 56       	subi	r30, 0x6E	; 110
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	e4 91       	lpm	r30, Z
    1a92:	e3 30       	cpi	r30, 0x03	; 3
    1a94:	f9 f0       	breq	.+62     	; 0x1ad4 <analogWrite+0x78>
    1a96:	48 f4       	brcc	.+18     	; 0x1aaa <analogWrite+0x4e>
    1a98:	e1 30       	cpi	r30, 0x01	; 1
    1a9a:	b9 f0       	breq	.+46     	; 0x1aca <analogWrite+0x6e>
    1a9c:	e2 30       	cpi	r30, 0x02	; 2
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1aa0:	84 b5       	in	r24, 0x24	; 36
    1aa2:	80 62       	ori	r24, 0x20	; 32
    1aa4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1aa6:	c8 bd       	out	0x28, r28	; 40
				break;
    1aa8:	34 c0       	rjmp	.+104    	; 0x1b12 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1aaa:	e7 30       	cpi	r30, 0x07	; 7
    1aac:	e9 f0       	breq	.+58     	; 0x1ae8 <analogWrite+0x8c>
    1aae:	e8 30       	cpi	r30, 0x08	; 8
    1ab0:	19 f1       	breq	.+70     	; 0x1af8 <analogWrite+0x9c>
    1ab2:	e4 30       	cpi	r30, 0x04	; 4
    1ab4:	49 f5       	brne	.+82     	; 0x1b08 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1ab6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    1ac0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1ac4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    1ac8:	24 c0       	rjmp	.+72     	; 0x1b12 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1aca:	84 b5       	in	r24, 0x24	; 36
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1ad0:	c7 bd       	out	0x27, r28	; 39
				break;
    1ad2:	1f c0       	rjmp	.+62     	; 0x1b12 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1ad4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    1ade:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ae2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    1ae6:	15 c0       	rjmp	.+42     	; 0x1b12 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1ae8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    1af2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    1af6:	0d c0       	rjmp	.+26     	; 0x1b12 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1af8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1afc:	80 62       	ori	r24, 0x20	; 32
    1afe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    1b02:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1b08:	c0 38       	cpi	r28, 0x80	; 128
    1b0a:	d1 05       	cpc	r29, r1
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <analogWrite+0xb4>
    1b0e:	b5 cf       	rjmp	.-150    	; 0x1a7a <analogWrite+0x1e>
    1b10:	af cf       	rjmp	.-162    	; 0x1a70 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	08 95       	ret

00001b1a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <turnOffPWM+0x24>
    1b1e:	28 f4       	brcc	.+10     	; 0x1b2a <turnOffPWM+0x10>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	99 f0       	breq	.+38     	; 0x1b4a <turnOffPWM+0x30>
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	a1 f0       	breq	.+40     	; 0x1b50 <turnOffPWM+0x36>
    1b28:	08 95       	ret
    1b2a:	87 30       	cpi	r24, 0x07	; 7
    1b2c:	a9 f0       	breq	.+42     	; 0x1b58 <turnOffPWM+0x3e>
    1b2e:	88 30       	cpi	r24, 0x08	; 8
    1b30:	b9 f0       	breq	.+46     	; 0x1b60 <turnOffPWM+0x46>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	d1 f4       	brne	.+52     	; 0x1b6a <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b36:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b42:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b44:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b48:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b4a:	84 b5       	in	r24, 0x24	; 36
    1b4c:	8f 77       	andi	r24, 0x7F	; 127
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b50:	84 b5       	in	r24, 0x24	; 36
    1b52:	8f 7d       	andi	r24, 0xDF	; 223
    1b54:	84 bd       	out	0x24, r24	; 36
    1b56:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b58:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b6a:	08 95       	ret

00001b6c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	fc 01       	movw	r30, r24
    1b74:	ea 55       	subi	r30, 0x5A	; 90
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e6 54       	subi	r30, 0x46	; 70
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b82:	88 23       	and	r24, r24
    1b84:	61 f1       	breq	.+88     	; 0x1bde <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	ee 51       	subi	r30, 0x1E	; 30
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	c5 91       	lpm	r28, Z+
    1b94:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b96:	fc 01       	movw	r30, r24
    1b98:	e8 52       	subi	r30, 0x28	; 40
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	a5 91       	lpm	r26, Z+
    1b9e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1ba0:	61 11       	cpse	r22, r1
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1ba4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ba6:	f8 94       	cli
		*reg &= ~bit;
    1ba8:	88 81       	ld	r24, Y
    1baa:	20 95       	com	r18
    1bac:	82 23       	and	r24, r18
    1bae:	88 83       	st	Y, r24
		*out &= ~bit;
    1bb0:	ec 91       	ld	r30, X
    1bb2:	2e 23       	and	r18, r30
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bb6:	62 30       	cpi	r22, 0x02	; 2
    1bb8:	61 f4       	brne	.+24     	; 0x1bd2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bbc:	f8 94       	cli
		*reg &= ~bit;
    1bbe:	88 81       	ld	r24, Y
    1bc0:	32 2f       	mov	r19, r18
    1bc2:	30 95       	com	r19
    1bc4:	83 23       	and	r24, r19
    1bc6:	88 83       	st	Y, r24
		*out |= bit;
    1bc8:	ec 91       	ld	r30, X
    1bca:	2e 2b       	or	r18, r30
    1bcc:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bce:	9f bf       	out	0x3f, r25	; 63
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bd2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bd4:	f8 94       	cli
		*reg |= bit;
    1bd6:	e8 81       	ld	r30, Y
    1bd8:	2e 2b       	or	r18, r30
    1bda:	28 83       	st	Y, r18
		SREG = oldSREG;
    1bdc:	8f bf       	out	0x3f, r24	; 63
	}
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	f9 01       	movw	r30, r18
    1bf0:	ee 56       	subi	r30, 0x6E	; 110
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	ea 55       	subi	r30, 0x5A	; 90
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bfe:	f9 01       	movw	r30, r18
    1c00:	e6 54       	subi	r30, 0x46	; 70
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c06:	cc 23       	and	r28, r28
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <digitalWrite+0x56>
    1c0a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <turnOffPWM>

	out = portOutputRegister(port);
    1c12:	ec 2f       	mov	r30, r28
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	e8 52       	subi	r30, 0x28	; 40
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	a5 91       	lpm	r26, Z+
    1c20:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c22:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c24:	f8 94       	cli

	if (val == LOW) {
    1c26:	11 11       	cpse	r17, r1
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <digitalWrite+0x4e>
		*out &= ~bit;
    1c2a:	8c 91       	ld	r24, X
    1c2c:	d0 95       	com	r29
    1c2e:	d8 23       	and	r29, r24
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c32:	ec 91       	ld	r30, X
    1c34:	de 2b       	or	r29, r30
    1c36:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c38:	9f bf       	out	0x3f, r25	; 63
}
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	08 95       	ret

00001c42 <prvIsQueueEmpty>:
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	0f 92       	push	r0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	91 11       	cpse	r25, r1
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <prvCopyDataToQueue>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ec 01       	movw	r28, r24
    1c62:	04 2f       	mov	r16, r20
    1c64:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1c66:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1c68:	41 11       	cpse	r20, r1
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <prvCopyDataToQueue+0x2a>
    1c6c:	88 81       	ld	r24, Y
    1c6e:	99 81       	ldd	r25, Y+1	; 0x01
    1c70:	89 2b       	or	r24, r25
    1c72:	e9 f5       	brne	.+122    	; 0x1cee <prvCopyDataToQueue+0x96>
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskPriorityDisinherit>
    1c7c:	1d 82       	std	Y+5, r1	; 0x05
    1c7e:	1c 82       	std	Y+4, r1	; 0x04
    1c80:	37 c0       	rjmp	.+110    	; 0x1cf0 <prvCopyDataToQueue+0x98>
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	01 11       	cpse	r16, r1
    1c86:	15 c0       	rjmp	.+42     	; 0x1cb2 <prvCopyDataToQueue+0x5a>
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <memcpy>
    1c90:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	82 0f       	add	r24, r18
    1c98:	91 1d       	adc	r25, r1
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	82 17       	cp	r24, r18
    1ca4:	93 07       	cpc	r25, r19
    1ca6:	18 f1       	brcs	.+70     	; 0x1cee <prvCopyDataToQueue+0x96>
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	9b 83       	std	Y+3, r25	; 0x03
    1cae:	8a 83       	std	Y+2, r24	; 0x02
    1cb0:	1e c0       	rjmp	.+60     	; 0x1cee <prvCopyDataToQueue+0x96>
    1cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb6:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <memcpy>
    1cba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	91 95       	neg	r25
    1cc0:	81 95       	neg	r24
    1cc2:	91 09       	sbc	r25, r1
    1cc4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc8:	28 0f       	add	r18, r24
    1cca:	39 1f       	adc	r19, r25
    1ccc:	3f 83       	std	Y+7, r19	; 0x07
    1cce:	2e 83       	std	Y+6, r18	; 0x06
    1cd0:	48 81       	ld	r20, Y
    1cd2:	59 81       	ldd	r21, Y+1	; 0x01
    1cd4:	24 17       	cp	r18, r20
    1cd6:	35 07       	cpc	r19, r21
    1cd8:	30 f4       	brcc	.+12     	; 0x1ce6 <prvCopyDataToQueue+0x8e>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	9f 83       	std	Y+7, r25	; 0x07
    1ce4:	8e 83       	std	Y+6, r24	; 0x06
    1ce6:	02 30       	cpi	r16, 0x02	; 2
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <prvCopyDataToQueue+0x96>
    1cea:	11 11       	cpse	r17, r1
    1cec:	11 50       	subi	r17, 0x01	; 1
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	1f 5f       	subi	r17, 0xFF	; 255
    1cf2:	1a 8f       	std	Y+26, r17	; 0x1a
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <prvCopyDataFromQueue>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d04:	44 23       	and	r20, r20
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <prvCopyDataFromQueue+0x32>
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	26 81       	ldd	r18, Z+6	; 0x06
    1d0c:	37 81       	ldd	r19, Z+7	; 0x07
    1d0e:	24 0f       	add	r18, r20
    1d10:	35 1f       	adc	r19, r21
    1d12:	37 83       	std	Z+7, r19	; 0x07
    1d14:	26 83       	std	Z+6, r18	; 0x06
    1d16:	64 81       	ldd	r22, Z+4	; 0x04
    1d18:	75 81       	ldd	r23, Z+5	; 0x05
    1d1a:	26 17       	cp	r18, r22
    1d1c:	37 07       	cpc	r19, r23
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <prvCopyDataFromQueue+0x2a>
    1d20:	20 81       	ld	r18, Z
    1d22:	31 81       	ldd	r19, Z+1	; 0x01
    1d24:	37 83       	std	Z+7, r19	; 0x07
    1d26:	26 83       	std	Z+6, r18	; 0x06
    1d28:	66 81       	ldd	r22, Z+6	; 0x06
    1d2a:	77 81       	ldd	r23, Z+7	; 0x07
    1d2c:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <memcpy>
    1d30:	08 95       	ret

00001d32 <prvUnlockQueue>:
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	0f 92       	push	r0
    1d44:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1d46:	7c 01       	movw	r14, r24
    1d48:	81 e1       	ldi	r24, 0x11	; 17
    1d4a:	e8 0e       	add	r14, r24
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	11 16       	cp	r1, r17
    1d50:	5c f4       	brge	.+22     	; 0x1d68 <prvUnlockQueue+0x36>
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	88 23       	and	r24, r24
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <prvUnlockQueue+0x36>
    1d58:	c7 01       	movw	r24, r14
    1d5a:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	0e 94 41 15 	call	0x2a82	; 0x2a82 <vTaskMissedYield>
    1d64:	11 50       	subi	r17, 0x01	; 1
    1d66:	f3 cf       	rjmp	.-26     	; 0x1d4e <prvUnlockQueue+0x1c>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	0f 92       	push	r0
    1d76:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1d78:	7e 01       	movw	r14, r28
    1d7a:	88 e0       	ldi	r24, 0x08	; 8
    1d7c:	e8 0e       	add	r14, r24
    1d7e:	f1 1c       	adc	r15, r1
    1d80:	11 16       	cp	r1, r17
    1d82:	5c f4       	brge	.+22     	; 0x1d9a <prvUnlockQueue+0x68>
    1d84:	88 85       	ldd	r24, Y+8	; 0x08
    1d86:	88 23       	and	r24, r24
    1d88:	41 f0       	breq	.+16     	; 0x1d9a <prvUnlockQueue+0x68>
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1d90:	81 11       	cpse	r24, r1
    1d92:	0e 94 41 15 	call	0x2a82	; 0x2a82 <vTaskMissedYield>
    1d96:	11 50       	subi	r17, 0x01	; 1
    1d98:	f3 cf       	rjmp	.-26     	; 0x1d80 <prvUnlockQueue+0x4e>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	08 95       	ret

00001dae <xQueueGenericReset>:
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	ec 01       	movw	r28, r24
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	0f 92       	push	r0
    1dba:	48 81       	ld	r20, Y
    1dbc:	59 81       	ldd	r21, Y+1	; 0x01
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	87 9f       	mul	r24, r23
    1dc6:	20 0d       	add	r18, r0
    1dc8:	31 1d       	adc	r19, r1
    1dca:	11 24       	eor	r1, r1
    1dcc:	3d 83       	std	Y+5, r19	; 0x05
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	1a 8e       	std	Y+26, r1	; 0x1a
    1dd2:	5b 83       	std	Y+3, r21	; 0x03
    1dd4:	4a 83       	std	Y+2, r20	; 0x02
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	78 9f       	mul	r23, r24
    1ddc:	90 01       	movw	r18, r0
    1dde:	79 9f       	mul	r23, r25
    1de0:	30 0d       	add	r19, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	ca 01       	movw	r24, r20
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	9f 83       	std	Y+7, r25	; 0x07
    1dec:	8e 83       	std	Y+6, r24	; 0x06
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	8d 8f       	std	Y+29, r24	; 0x1d
    1df2:	8e 8f       	std	Y+30, r24	; 0x1e
    1df4:	61 11       	cpse	r22, r1
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <xQueueGenericReset+0x62>
    1df8:	88 85       	ldd	r24, Y+8	; 0x08
    1dfa:	88 23       	and	r24, r24
    1dfc:	89 f0       	breq	.+34     	; 0x1e20 <xQueueGenericReset+0x72>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	08 96       	adiw	r24, 0x08	; 8
    1e02:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1e06:	88 23       	and	r24, r24
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <xQueueGenericReset+0x72>
    1e0a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <xQueueGenericReset+0x72>
    1e10:	ce 01       	movw	r24, r28
    1e12:	08 96       	adiw	r24, 0x08	; 8
    1e14:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    1e18:	ce 01       	movw	r24, r28
    1e1a:	41 96       	adiw	r24, 0x11	; 17
    1e1c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <xQueueGenericCreate>:
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	08 2f       	mov	r16, r24
    1e36:	16 2f       	mov	r17, r22
    1e38:	66 23       	and	r22, r22
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <xQueueGenericCreate+0x18>
    1e3c:	86 9f       	mul	r24, r22
    1e3e:	c0 01       	movw	r24, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <xQueueGenericCreate+0x1c>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	4f 96       	adiw	r24, 0x1f	; 31
    1e4a:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    1e4e:	ec 01       	movw	r28, r24
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	71 f0       	breq	.+28     	; 0x1e70 <xQueueGenericCreate+0x44>
    1e54:	11 11       	cpse	r17, r1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <xQueueGenericCreate+0x32>
    1e58:	99 83       	std	Y+1, r25	; 0x01
    1e5a:	88 83       	st	Y, r24
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <xQueueGenericCreate+0x38>
    1e5e:	4f 96       	adiw	r24, 0x1f	; 31
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	88 83       	st	Y, r24
    1e64:	0b 8f       	std	Y+27, r16	; 0x1b
    1e66:	1c 8f       	std	Y+28, r17	; 0x1c
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xQueueGenericReset>
    1e70:	ce 01       	movw	r24, r28
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <xQueueGenericSend>:
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <xQueueGenericSend+0x14>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <xQueueGenericSend+0x16>
    1e92:	1f 92       	push	r1
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	8c 01       	movw	r16, r24
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	5d 83       	std	Y+5, r21	; 0x05
    1e9e:	4c 83       	std	Y+4, r20	; 0x04
    1ea0:	f2 2e       	mov	r15, r18
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	58 01       	movw	r10, r16
    1ea6:	98 e0       	ldi	r25, 0x08	; 8
    1ea8:	a9 0e       	add	r10, r25
    1eaa:	b1 1c       	adc	r11, r1
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	0f 92       	push	r0
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eb8:	29 17       	cp	r18, r25
    1eba:	18 f0       	brcs	.+6      	; 0x1ec2 <xQueueGenericSend+0x46>
    1ebc:	f2 e0       	ldi	r31, 0x02	; 2
    1ebe:	ff 12       	cpse	r15, r31
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <xQueueGenericSend+0x6e>
    1ec2:	4f 2d       	mov	r20, r15
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <prvCopyDataToQueue>
    1ecc:	f8 01       	movw	r30, r16
    1ece:	91 89       	ldd	r25, Z+17	; 0x11
    1ed0:	99 23       	and	r25, r25
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <xQueueGenericSend+0x60>
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	41 96       	adiw	r24, 0x11	; 17
    1ed8:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1edc:	81 11       	cpse	r24, r1
    1ede:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	50 c0       	rjmp	.+160    	; 0x1f8a <xQueueGenericSend+0x10e>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	23 2b       	or	r18, r19
    1ef0:	19 f4       	brne	.+6      	; 0x1ef8 <xQueueGenericSend+0x7c>
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	48 c0       	rjmp	.+144    	; 0x1f88 <xQueueGenericSend+0x10c>
    1ef8:	81 11       	cpse	r24, r1
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <xQueueGenericSend+0x88>
    1efc:	ce 01       	movw	r24, r28
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	0f 92       	push	r0
    1f12:	f8 01       	movw	r30, r16
    1f14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f16:	8f 3f       	cpi	r24, 0xFF	; 255
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <xQueueGenericSend+0xa0>
    1f1a:	15 8e       	std	Z+29, r1	; 0x1d
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f20:	8f 3f       	cpi	r24, 0xFF	; 255
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <xQueueGenericSend+0xaa>
    1f24:	16 8e       	std	Z+30, r1	; 0x1e
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	be 01       	movw	r22, r28
    1f2c:	6c 5f       	subi	r22, 0xFC	; 252
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <xTaskCheckForTimeOut>
    1f38:	81 11       	cpse	r24, r1
    1f3a:	21 c0       	rjmp	.+66     	; 0x1f7e <xQueueGenericSend+0x102>
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	f8 01       	movw	r30, r16
    1f44:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f46:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	98 13       	cpse	r25, r24
    1f4e:	11 c0       	rjmp	.+34     	; 0x1f72 <xQueueGenericSend+0xf6>
    1f50:	6c 81       	ldd	r22, Y+4	; 0x04
    1f52:	7d 81       	ldd	r23, Y+5	; 0x05
    1f54:	c5 01       	movw	r24, r10
    1f56:	0e 94 9a 14 	call	0x2934	; 0x2934 <vTaskPlaceOnEventList>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f60:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f64:	88 23       	and	r24, r24
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <xQueueGenericSend+0xf0>
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	a0 cf       	rjmp	.-192    	; 0x1eac <xQueueGenericSend+0x30>
    1f6c:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1f70:	fb cf       	rjmp	.-10     	; 0x1f68 <xQueueGenericSend+0xec>
    1f72:	c8 01       	movw	r24, r16
    1f74:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f78:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f7c:	f5 cf       	rjmp	.-22     	; 0x1f68 <xQueueGenericSend+0xec>
    1f7e:	c8 01       	movw	r24, r16
    1f80:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f84:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	08 95       	ret

00001fa8 <xQueueGenericSendFromISR>:
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb8:	98 17       	cp	r25, r24
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <xQueueGenericSendFromISR+0x18>
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	e1 f4       	brne	.+56     	; 0x1ff8 <xQueueGenericSendFromISR+0x50>
    1fc0:	7a 01       	movw	r14, r20
    1fc2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1fc4:	42 2f       	mov	r20, r18
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <prvCopyDataToQueue>
    1fcc:	1f 3f       	cpi	r17, 0xFF	; 255
    1fce:	81 f4       	brne	.+32     	; 0x1ff0 <xQueueGenericSendFromISR+0x48>
    1fd0:	89 89       	ldd	r24, Y+17	; 0x11
    1fd2:	88 23       	and	r24, r24
    1fd4:	79 f0       	breq	.+30     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	41 96       	adiw	r24, 0x11	; 17
    1fda:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1fde:	88 23       	and	r24, r24
    1fe0:	49 f0       	breq	.+18     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fe2:	e1 14       	cp	r14, r1
    1fe4:	f1 04       	cpc	r15, r1
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	f7 01       	movw	r30, r14
    1fec:	80 83       	st	Z, r24
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <xQueueGenericSendFromISR+0x52>
    1ff0:	1f 5f       	subi	r17, 0xFF	; 255
    1ff2:	1e 8f       	std	Y+30, r17	; 0x1e
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xQueueGenericSendFromISR+0x52>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	08 95       	ret

00002006 <xQueueReceive>:
    2006:	af 92       	push	r10
    2008:	bf 92       	push	r11
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	00 d0       	rcall	.+0      	; 0x201a <xQueueReceive+0x14>
    201a:	00 d0       	rcall	.+0      	; 0x201c <xQueueReceive+0x16>
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	8c 01       	movw	r16, r24
    2024:	6b 01       	movw	r12, r22
    2026:	5d 83       	std	Y+5, r21	; 0x05
    2028:	4c 83       	std	Y+4, r20	; 0x04
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	58 01       	movw	r10, r16
    202e:	91 e1       	ldi	r25, 0x11	; 17
    2030:	a9 0e       	add	r10, r25
    2032:	b1 1c       	adc	r11, r1
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	0f 92       	push	r0
    203a:	f8 01       	movw	r30, r16
    203c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    203e:	ff 20       	and	r15, r15
    2040:	a9 f0       	breq	.+42     	; 0x206c <xQueueReceive+0x66>
    2042:	b6 01       	movw	r22, r12
    2044:	c8 01       	movw	r24, r16
    2046:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <prvCopyDataFromQueue>
    204a:	fa 94       	dec	r15
    204c:	f8 01       	movw	r30, r16
    204e:	f2 8e       	std	Z+26, r15	; 0x1a
    2050:	80 85       	ldd	r24, Z+8	; 0x08
    2052:	88 23       	and	r24, r24
    2054:	39 f0       	breq	.+14     	; 0x2064 <xQueueReceive+0x5e>
    2056:	c8 01       	movw	r24, r16
    2058:	08 96       	adiw	r24, 0x08	; 8
    205a:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    205e:	81 11       	cpse	r24, r1
    2060:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	50 c0       	rjmp	.+160    	; 0x210c <xQueueReceive+0x106>
    206c:	2c 81       	ldd	r18, Y+4	; 0x04
    206e:	3d 81       	ldd	r19, Y+5	; 0x05
    2070:	23 2b       	or	r18, r19
    2072:	19 f4       	brne	.+6      	; 0x207a <xQueueReceive+0x74>
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	48 c0       	rjmp	.+144    	; 0x210a <xQueueReceive+0x104>
    207a:	81 11       	cpse	r24, r1
    207c:	04 c0       	rjmp	.+8      	; 0x2086 <xQueueReceive+0x80>
    207e:	ce 01       	movw	r24, r28
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	0f 92       	push	r0
    2094:	f8 01       	movw	r30, r16
    2096:	85 8d       	ldd	r24, Z+29	; 0x1d
    2098:	8f 3f       	cpi	r24, 0xFF	; 255
    209a:	09 f4       	brne	.+2      	; 0x209e <xQueueReceive+0x98>
    209c:	15 8e       	std	Z+29, r1	; 0x1d
    209e:	f8 01       	movw	r30, r16
    20a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    20a2:	8f 3f       	cpi	r24, 0xFF	; 255
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <xQueueReceive+0xa2>
    20a6:	16 8e       	std	Z+30, r1	; 0x1e
    20a8:	0f 90       	pop	r0
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	be 01       	movw	r22, r28
    20ae:	6c 5f       	subi	r22, 0xFC	; 252
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <xTaskCheckForTimeOut>
    20ba:	81 11       	cpse	r24, r1
    20bc:	1c c0       	rjmp	.+56     	; 0x20f6 <xQueueReceive+0xf0>
    20be:	c8 01       	movw	r24, r16
    20c0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <prvIsQueueEmpty>
    20c4:	88 23       	and	r24, r24
    20c6:	89 f0       	breq	.+34     	; 0x20ea <xQueueReceive+0xe4>
    20c8:	6c 81       	ldd	r22, Y+4	; 0x04
    20ca:	7d 81       	ldd	r23, Y+5	; 0x05
    20cc:	c5 01       	movw	r24, r10
    20ce:	0e 94 9a 14 	call	0x2934	; 0x2934 <vTaskPlaceOnEventList>
    20d2:	c8 01       	movw	r24, r16
    20d4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20d8:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    20dc:	88 23       	and	r24, r24
    20de:	11 f0       	breq	.+4      	; 0x20e4 <xQueueReceive+0xde>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	a8 cf       	rjmp	.-176    	; 0x2034 <xQueueReceive+0x2e>
    20e4:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    20e8:	fb cf       	rjmp	.-10     	; 0x20e0 <xQueueReceive+0xda>
    20ea:	c8 01       	movw	r24, r16
    20ec:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20f0:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    20f4:	f5 cf       	rjmp	.-22     	; 0x20e0 <xQueueReceive+0xda>
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20fc:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2100:	c8 01       	movw	r24, r16
    2102:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <prvIsQueueEmpty>
    2106:	88 23       	and	r24, r24
    2108:	59 f3       	breq	.-42     	; 0x20e0 <xQueueReceive+0xda>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	08 95       	ret

0000212a <vQueueWaitForMessageRestricted>:
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	ec 01       	movw	r28, r24
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	0f 92       	push	r0
    2136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	09 f4       	brne	.+2      	; 0x213e <vQueueWaitForMessageRestricted+0x14>
    213c:	1d 8e       	std	Y+29, r1	; 0x1d
    213e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2140:	8f 3f       	cpi	r24, 0xFF	; 255
    2142:	09 f4       	brne	.+2      	; 0x2146 <vQueueWaitForMessageRestricted+0x1c>
    2144:	1e 8e       	std	Y+30, r1	; 0x1e
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    214c:	81 11       	cpse	r24, r1
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <vQueueWaitForMessageRestricted+0x2e>
    2150:	ce 01       	movw	r24, r28
    2152:	41 96       	adiw	r24, 0x11	; 17
    2154:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskPlaceOnEventListRestricted>
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <prvUnlockQueue>

00002162 <prvResetNextTaskUnblockTime>:
    2162:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    2166:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    216a:	80 81       	ld	r24, Z
    216c:	81 11       	cpse	r24, r1
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <prvResetNextTaskUnblockTime+0x14>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	0c c0       	rjmp	.+24     	; 0x218e <prvResetNextTaskUnblockTime+0x2c>
    2176:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    217a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    217e:	05 80       	ldd	r0, Z+5	; 0x05
    2180:	f6 81       	ldd	r31, Z+6	; 0x06
    2182:	e0 2d       	mov	r30, r0
    2184:	06 80       	ldd	r0, Z+6	; 0x06
    2186:	f7 81       	ldd	r31, Z+7	; 0x07
    2188:	e0 2d       	mov	r30, r0
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    2192:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    2196:	08 95       	ret

00002198 <prvAddCurrentTaskToDelayedList>:
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	ec 01       	movw	r28, r24
    21a4:	f6 2e       	mov	r15, r22
    21a6:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    21aa:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    21ae:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    21b2:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21b6:	02 96       	adiw	r24, 0x02	; 2
    21b8:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    21bc:	cf 3f       	cpi	r28, 0xFF	; 255
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	d8 07       	cpc	r29, r24
    21c2:	89 f4       	brne	.+34     	; 0x21e6 <prvAddCurrentTaskToDelayedList+0x4e>
    21c4:	ff 20       	and	r15, r15
    21c6:	79 f0       	breq	.+30     	; 0x21e6 <prvAddCurrentTaskToDelayedList+0x4e>
    21c8:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    21cc:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21d0:	6e 5f       	subi	r22, 0xFE	; 254
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	88 e2       	ldi	r24, 0x28	; 40
    21d6:	94 e0       	ldi	r25, 0x04	; 4
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	0c 94 6d 19 	jmp	0x32da	; 0x32da <vListInsertEnd>
    21e6:	c0 0f       	add	r28, r16
    21e8:	d1 1f       	adc	r29, r17
    21ea:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    21ee:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21f2:	d3 83       	std	Z+3, r29	; 0x03
    21f4:	c2 83       	std	Z+2, r28	; 0x02
    21f6:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    21fa:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21fe:	c0 17       	cp	r28, r16
    2200:	d1 07       	cpc	r29, r17
    2202:	68 f4       	brcc	.+26     	; 0x221e <prvAddCurrentTaskToDelayedList+0x86>
    2204:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    2208:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    220c:	6e 5f       	subi	r22, 0xFE	; 254
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <vListInsert>
    221e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    2222:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2226:	6e 5f       	subi	r22, 0xFE	; 254
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    222e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    2232:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    2236:	c8 17       	cp	r28, r24
    2238:	d9 07       	cpc	r29, r25
    223a:	20 f4       	brcc	.+8      	; 0x2244 <prvAddCurrentTaskToDelayedList+0xac>
    223c:	d0 93 1e 04 	sts	0x041E, r29	; 0x80041e <xNextTaskUnblockTime+0x1>
    2240:	c0 93 1d 04 	sts	0x041D, r28	; 0x80041d <xNextTaskUnblockTime>
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	08 95       	ret

00002250 <prvIdleTask>:
    2250:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2254:	88 23       	and	r24, r24
    2256:	09 f1       	breq	.+66     	; 0x229a <prvIdleTask+0x4a>
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	0f 92       	push	r0
    225e:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <xTasksWaitingTermination+0x5>
    2262:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <xTasksWaitingTermination+0x6>
    2266:	c6 81       	ldd	r28, Z+6	; 0x06
    2268:	d7 81       	ldd	r29, Z+7	; 0x07
    226a:	ce 01       	movw	r24, r28
    226c:	02 96       	adiw	r24, 0x02	; 2
    226e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2272:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2276:	81 50       	subi	r24, 0x01	; 1
    2278:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    227c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2286:	0f 90       	pop	r0
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2292:	ce 01       	movw	r24, r28
    2294:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2298:	db cf       	rjmp	.-74     	; 0x2250 <prvIdleTask>
    229a:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <pxReadyTasksLists>
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	10 f0       	brcs	.+4      	; 0x22a6 <prvIdleTask+0x56>
    22a2:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    22a6:	0e 94 98 17 	call	0x2f30	; 0x2f30 <vApplicationIdleHook>
    22aa:	d2 cf       	rjmp	.-92     	; 0x2250 <prvIdleTask>

000022ac <xTaskCreate>:
    22ac:	5f 92       	push	r5
    22ae:	6f 92       	push	r6
    22b0:	7f 92       	push	r7
    22b2:	8f 92       	push	r8
    22b4:	9f 92       	push	r9
    22b6:	af 92       	push	r10
    22b8:	bf 92       	push	r11
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	3c 01       	movw	r6, r24
    22cc:	6b 01       	movw	r12, r22
    22ce:	5a 01       	movw	r10, r20
    22d0:	49 01       	movw	r8, r18
    22d2:	50 2e       	mov	r5, r16
    22d4:	ca 01       	movw	r24, r20
    22d6:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    22da:	8c 01       	movw	r16, r24
    22dc:	89 2b       	or	r24, r25
    22de:	09 f4       	brne	.+2      	; 0x22e2 <xTaskCreate+0x36>
    22e0:	e0 c0       	rjmp	.+448    	; 0x24a2 <xTaskCreate+0x1f6>
    22e2:	88 e2       	ldi	r24, 0x28	; 40
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    22ea:	ec 01       	movw	r28, r24
    22ec:	89 2b       	or	r24, r25
    22ee:	c9 f0       	breq	.+50     	; 0x2322 <xTaskCreate+0x76>
    22f0:	18 8f       	std	Y+24, r17	; 0x18
    22f2:	0f 8b       	std	Y+23, r16	; 0x17
    22f4:	a5 01       	movw	r20, r10
    22f6:	65 ea       	ldi	r22, 0xA5	; 165
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	c8 01       	movw	r24, r16
    22fc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <memset>
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	a2 1a       	sub	r10, r18
    2304:	b1 08       	sbc	r11, r1
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	a8 0e       	add	r10, r24
    230c:	b9 1e       	adc	r11, r25
    230e:	c1 14       	cp	r12, r1
    2310:	d1 04       	cpc	r13, r1
    2312:	c9 f0       	breq	.+50     	; 0x2346 <xTaskCreate+0x9a>
    2314:	be 01       	movw	r22, r28
    2316:	67 5e       	subi	r22, 0xE7	; 231
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	f6 01       	movw	r30, r12
    231c:	c6 01       	movw	r24, r12
    231e:	08 96       	adiw	r24, 0x08	; 8
    2320:	07 c0       	rjmp	.+14     	; 0x2330 <xTaskCreate+0x84>
    2322:	c8 01       	movw	r24, r16
    2324:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2328:	bc c0       	rjmp	.+376    	; 0x24a2 <xTaskCreate+0x1f6>
    232a:	e8 17       	cp	r30, r24
    232c:	f9 07       	cpc	r31, r25
    232e:	49 f0       	breq	.+18     	; 0x2342 <xTaskCreate+0x96>
    2330:	9f 01       	movw	r18, r30
    2332:	41 91       	ld	r20, Z+
    2334:	db 01       	movw	r26, r22
    2336:	4d 93       	st	X+, r20
    2338:	bd 01       	movw	r22, r26
    233a:	d9 01       	movw	r26, r18
    233c:	2c 91       	ld	r18, X
    233e:	21 11       	cpse	r18, r1
    2340:	f4 cf       	rjmp	.-24     	; 0x232a <xTaskCreate+0x7e>
    2342:	18 a2       	std	Y+32, r1	; 0x20
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <xTaskCreate+0x9c>
    2346:	19 8e       	std	Y+25, r1	; 0x19
    2348:	05 2d       	mov	r16, r5
    234a:	04 30       	cpi	r16, 0x04	; 4
    234c:	08 f0       	brcs	.+2      	; 0x2350 <xTaskCreate+0xa4>
    234e:	03 e0       	ldi	r16, 0x03	; 3
    2350:	0e 8b       	std	Y+22, r16	; 0x16
    2352:	09 a3       	std	Y+33, r16	; 0x21
    2354:	1a a2       	std	Y+34, r1	; 0x22
    2356:	6e 01       	movw	r12, r28
    2358:	b2 e0       	ldi	r27, 0x02	; 2
    235a:	cb 0e       	add	r12, r27
    235c:	d1 1c       	adc	r13, r1
    235e:	c6 01       	movw	r24, r12
    2360:	0e 94 69 19 	call	0x32d2	; 0x32d2 <vListInitialiseItem>
    2364:	ce 01       	movw	r24, r28
    2366:	0c 96       	adiw	r24, 0x0c	; 12
    2368:	0e 94 69 19 	call	0x32d2	; 0x32d2 <vListInitialiseItem>
    236c:	d9 87       	std	Y+9, r29	; 0x09
    236e:	c8 87       	std	Y+8, r28	; 0x08
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	80 1b       	sub	r24, r16
    2376:	91 09       	sbc	r25, r1
    2378:	9d 87       	std	Y+13, r25	; 0x0d
    237a:	8c 87       	std	Y+12, r24	; 0x0c
    237c:	db 8b       	std	Y+19, r29	; 0x13
    237e:	ca 8b       	std	Y+18, r28	; 0x12
    2380:	1b a2       	std	Y+35, r1	; 0x23
    2382:	1c a2       	std	Y+36, r1	; 0x24
    2384:	1d a2       	std	Y+37, r1	; 0x25
    2386:	1e a2       	std	Y+38, r1	; 0x26
    2388:	1f a2       	std	Y+39, r1	; 0x27
    238a:	a4 01       	movw	r20, r8
    238c:	b3 01       	movw	r22, r6
    238e:	c5 01       	movw	r24, r10
    2390:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <pxPortInitialiseStack>
    2394:	99 83       	std	Y+1, r25	; 0x01
    2396:	88 83       	st	Y, r24
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	19 f0       	breq	.+6      	; 0x23a4 <xTaskCreate+0xf8>
    239e:	f7 01       	movw	r30, r14
    23a0:	d1 83       	std	Z+1, r29	; 0x01
    23a2:	c0 83       	st	Z, r28
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	0f 92       	push	r0
    23aa:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    23b4:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    23b8:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    23bc:	89 2b       	or	r24, r25
    23be:	d1 f5       	brne	.+116    	; 0x2434 <xTaskCreate+0x188>
    23c0:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    23c4:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    23c8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <xTaskCreate+0x126>
    23d0:	41 c0       	rjmp	.+130    	; 0x2454 <xTaskCreate+0x1a8>
    23d2:	8a e5       	ldi	r24, 0x5A	; 90
    23d4:	94 e0       	ldi	r25, 0x04	; 4
    23d6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23da:	83 e6       	ldi	r24, 0x63	; 99
    23dc:	94 e0       	ldi	r25, 0x04	; 4
    23de:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23e2:	8c e6       	ldi	r24, 0x6C	; 108
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23ea:	85 e7       	ldi	r24, 0x75	; 117
    23ec:	94 e0       	ldi	r25, 0x04	; 4
    23ee:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23f2:	81 e5       	ldi	r24, 0x51	; 81
    23f4:	94 e0       	ldi	r25, 0x04	; 4
    23f6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23fa:	88 e4       	ldi	r24, 0x48	; 72
    23fc:	94 e0       	ldi	r25, 0x04	; 4
    23fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2402:	8b e3       	ldi	r24, 0x3B	; 59
    2404:	94 e0       	ldi	r25, 0x04	; 4
    2406:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    240a:	82 e3       	ldi	r24, 0x32	; 50
    240c:	94 e0       	ldi	r25, 0x04	; 4
    240e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2412:	88 e2       	ldi	r24, 0x28	; 40
    2414:	94 e0       	ldi	r25, 0x04	; 4
    2416:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    241a:	81 e5       	ldi	r24, 0x51	; 81
    241c:	94 e0       	ldi	r25, 0x04	; 4
    241e:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <pxDelayedTaskList+0x1>
    2422:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <pxDelayedTaskList>
    2426:	88 e4       	ldi	r24, 0x48	; 72
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    242e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    2432:	10 c0       	rjmp	.+32     	; 0x2454 <xTaskCreate+0x1a8>
    2434:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2438:	81 11       	cpse	r24, r1
    243a:	0c c0       	rjmp	.+24     	; 0x2454 <xTaskCreate+0x1a8>
    243c:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2440:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2444:	96 89       	ldd	r25, Z+22	; 0x16
    2446:	8e 89       	ldd	r24, Y+22	; 0x16
    2448:	89 17       	cp	r24, r25
    244a:	20 f0       	brcs	.+8      	; 0x2454 <xTaskCreate+0x1a8>
    244c:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    2450:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    2454:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <uxTaskNumber>
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <uxTaskNumber>
    245e:	8e 89       	ldd	r24, Y+22	; 0x16
    2460:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2464:	98 17       	cp	r25, r24
    2466:	10 f4       	brcc	.+4      	; 0x246c <xTaskCreate+0x1c0>
    2468:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    246c:	f9 e0       	ldi	r31, 0x09	; 9
    246e:	8f 9f       	mul	r24, r31
    2470:	c0 01       	movw	r24, r0
    2472:	11 24       	eor	r1, r1
    2474:	b6 01       	movw	r22, r12
    2476:	86 5a       	subi	r24, 0xA6	; 166
    2478:	9b 4f       	sbci	r25, 0xFB	; 251
    247a:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2486:	88 23       	and	r24, r24
    2488:	51 f0       	breq	.+20     	; 0x249e <xTaskCreate+0x1f2>
    248a:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    248e:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2492:	96 89       	ldd	r25, Z+22	; 0x16
    2494:	8e 89       	ldd	r24, Y+22	; 0x16
    2496:	98 17       	cp	r25, r24
    2498:	10 f4       	brcc	.+4      	; 0x249e <xTaskCreate+0x1f2>
    249a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <xTaskCreate+0x1f8>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	df 90       	pop	r13
    24b2:	cf 90       	pop	r12
    24b4:	bf 90       	pop	r11
    24b6:	af 90       	pop	r10
    24b8:	9f 90       	pop	r9
    24ba:	8f 90       	pop	r8
    24bc:	7f 90       	pop	r7
    24be:	6f 90       	pop	r6
    24c0:	5f 90       	pop	r5
    24c2:	08 95       	ret

000024c4 <vTaskResume>:
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	20 91 7e 04 	lds	r18, 0x047E	; 0x80047e <pxCurrentTCB>
    24d0:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    24d4:	82 17       	cp	r24, r18
    24d6:	93 07       	cpc	r25, r19
    24d8:	09 f4       	brne	.+2      	; 0x24dc <vTaskResume+0x18>
    24da:	38 c0       	rjmp	.+112    	; 0x254c <vTaskResume+0x88>
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f4       	brne	.+2      	; 0x24e2 <vTaskResume+0x1e>
    24e0:	35 c0       	rjmp	.+106    	; 0x254c <vTaskResume+0x88>
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	0f 92       	push	r0
    24e8:	fc 01       	movw	r30, r24
    24ea:	22 85       	ldd	r18, Z+10	; 0x0a
    24ec:	33 85       	ldd	r19, Z+11	; 0x0b
    24ee:	28 52       	subi	r18, 0x28	; 40
    24f0:	34 40       	sbci	r19, 0x04	; 4
    24f2:	51 f5       	brne	.+84     	; 0x2548 <vTaskResume+0x84>
    24f4:	fc 01       	movw	r30, r24
    24f6:	24 89       	ldd	r18, Z+20	; 0x14
    24f8:	35 89       	ldd	r19, Z+21	; 0x15
    24fa:	f4 e0       	ldi	r31, 0x04	; 4
    24fc:	2b 33       	cpi	r18, 0x3B	; 59
    24fe:	3f 07       	cpc	r19, r31
    2500:	19 f1       	breq	.+70     	; 0x2548 <vTaskResume+0x84>
    2502:	23 2b       	or	r18, r19
    2504:	09 f5       	brne	.+66     	; 0x2548 <vTaskResume+0x84>
    2506:	ec 01       	movw	r28, r24
    2508:	8c 01       	movw	r16, r24
    250a:	0e 5f       	subi	r16, 0xFE	; 254
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2514:	8e 89       	ldd	r24, Y+22	; 0x16
    2516:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    251a:	98 17       	cp	r25, r24
    251c:	10 f4       	brcc	.+4      	; 0x2522 <vTaskResume+0x5e>
    251e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2522:	29 e0       	ldi	r18, 0x09	; 9
    2524:	82 9f       	mul	r24, r18
    2526:	c0 01       	movw	r24, r0
    2528:	11 24       	eor	r1, r1
    252a:	b8 01       	movw	r22, r16
    252c:	86 5a       	subi	r24, 0xA6	; 166
    252e:	9b 4f       	sbci	r25, 0xFB	; 251
    2530:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2534:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2538:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    253c:	9e 89       	ldd	r25, Y+22	; 0x16
    253e:	86 89       	ldd	r24, Z+22	; 0x16
    2540:	98 17       	cp	r25, r24
    2542:	10 f0       	brcs	.+4      	; 0x2548 <vTaskResume+0x84>
    2544:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	08 95       	ret

00002556 <vTaskStartScheduler>:
    2556:	ef 92       	push	r14
    2558:	ff 92       	push	r15
    255a:	0f 93       	push	r16
    255c:	8b e1       	ldi	r24, 0x1B	; 27
    255e:	e8 2e       	mov	r14, r24
    2560:	84 e0       	ldi	r24, 0x04	; 4
    2562:	f8 2e       	mov	r15, r24
    2564:	00 e0       	ldi	r16, 0x00	; 0
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 ec       	ldi	r20, 0xC0	; 192
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	62 e3       	ldi	r22, 0x32	; 50
    2570:	72 e0       	ldi	r23, 0x02	; 2
    2572:	88 e2       	ldi	r24, 0x28	; 40
    2574:	91 e1       	ldi	r25, 0x11	; 17
    2576:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
    257a:	81 30       	cpi	r24, 0x01	; 1
    257c:	b1 f4       	brne	.+44     	; 0x25aa <vTaskStartScheduler+0x54>
    257e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTimerCreateTimerTask>
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	91 f4       	brne	.+36     	; 0x25aa <vTaskStartScheduler+0x54>
    2586:	f8 94       	cli
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	30 93 1e 04 	sts	0x041E, r19	; 0x80041e <xNextTaskUnblockTime+0x1>
    2590:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <xNextTaskUnblockTime>
    2594:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <xSchedulerRunning>
    2598:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <xTickCount+0x1>
    259c:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <xTickCount>
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <xPortStartScheduler>
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	08 95       	ret

000025b2 <vTaskSuspendAll>:
    25b2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    25bc:	08 95       	ret

000025be <xTaskGetTickCount>:
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	0f 92       	push	r0
    25c4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTickCount>
    25c8:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTickCount+0x1>
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	08 95       	ret

000025d2 <xTaskIncrementTick>:
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    25e6:	81 11       	cpse	r24, r1
    25e8:	8c c0       	rjmp	.+280    	; 0x2702 <xTaskIncrementTick+0x130>
    25ea:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    25ee:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	10 93 26 04 	sts	0x0426, r17	; 0x800426 <xTickCount+0x1>
    25fa:	00 93 25 04 	sts	0x0425, r16	; 0x800425 <xTickCount>
    25fe:	01 15       	cp	r16, r1
    2600:	11 05       	cpc	r17, r1
    2602:	b9 f4       	brne	.+46     	; 0x2632 <xTaskIncrementTick+0x60>
    2604:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    2608:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    260c:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    2610:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2614:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <pxDelayedTaskList+0x1>
    2618:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <pxDelayedTaskList>
    261c:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2620:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    2624:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <xNumOfOverflows>
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <xNumOfOverflows>
    262e:	0e 94 b1 10 	call	0x2162	; 0x2162 <prvResetNextTaskUnblockTime>
    2632:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    2636:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    263a:	c0 e0       	ldi	r28, 0x00	; 0
    263c:	08 17       	cp	r16, r24
    263e:	19 07       	cpc	r17, r25
    2640:	08 f4       	brcc	.+2      	; 0x2644 <xTaskIncrementTick+0x72>
    2642:	4f c0       	rjmp	.+158    	; 0x26e2 <xTaskIncrementTick+0x110>
    2644:	d9 e0       	ldi	r29, 0x09	; 9
    2646:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    264a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    264e:	80 81       	ld	r24, Z
    2650:	81 11       	cpse	r24, r1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <xTaskIncrementTick+0x88>
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	9f ef       	ldi	r25, 0xFF	; 255
    2658:	11 c0       	rjmp	.+34     	; 0x267c <xTaskIncrementTick+0xaa>
    265a:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    265e:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2662:	05 80       	ldd	r0, Z+5	; 0x05
    2664:	f6 81       	ldd	r31, Z+6	; 0x06
    2666:	e0 2d       	mov	r30, r0
    2668:	e6 80       	ldd	r14, Z+6	; 0x06
    266a:	f7 80       	ldd	r15, Z+7	; 0x07
    266c:	d7 01       	movw	r26, r14
    266e:	12 96       	adiw	r26, 0x02	; 2
    2670:	8d 91       	ld	r24, X+
    2672:	9c 91       	ld	r25, X
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	08 17       	cp	r16, r24
    2678:	19 07       	cpc	r17, r25
    267a:	28 f4       	brcc	.+10     	; 0x2686 <xTaskIncrementTick+0xb4>
    267c:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    2680:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    2684:	2e c0       	rjmp	.+92     	; 0x26e2 <xTaskIncrementTick+0x110>
    2686:	67 01       	movw	r12, r14
    2688:	b2 e0       	ldi	r27, 0x02	; 2
    268a:	cb 0e       	add	r12, r27
    268c:	d1 1c       	adc	r13, r1
    268e:	c6 01       	movw	r24, r12
    2690:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2694:	f7 01       	movw	r30, r14
    2696:	84 89       	ldd	r24, Z+20	; 0x14
    2698:	95 89       	ldd	r25, Z+21	; 0x15
    269a:	89 2b       	or	r24, r25
    269c:	21 f0       	breq	.+8      	; 0x26a6 <xTaskIncrementTick+0xd4>
    269e:	c7 01       	movw	r24, r14
    26a0:	0c 96       	adiw	r24, 0x0c	; 12
    26a2:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    26a6:	d7 01       	movw	r26, r14
    26a8:	56 96       	adiw	r26, 0x16	; 22
    26aa:	8c 91       	ld	r24, X
    26ac:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    26b0:	98 17       	cp	r25, r24
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <xTaskIncrementTick+0xe6>
    26b4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    26b8:	d8 9f       	mul	r29, r24
    26ba:	c0 01       	movw	r24, r0
    26bc:	11 24       	eor	r1, r1
    26be:	b6 01       	movw	r22, r12
    26c0:	86 5a       	subi	r24, 0xA6	; 166
    26c2:	9b 4f       	sbci	r25, 0xFB	; 251
    26c4:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    26c8:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    26cc:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    26d0:	d7 01       	movw	r26, r14
    26d2:	56 96       	adiw	r26, 0x16	; 22
    26d4:	9c 91       	ld	r25, X
    26d6:	86 89       	ldd	r24, Z+22	; 0x16
    26d8:	98 17       	cp	r25, r24
    26da:	08 f4       	brcc	.+2      	; 0x26de <xTaskIncrementTick+0x10c>
    26dc:	b4 cf       	rjmp	.-152    	; 0x2646 <xTaskIncrementTick+0x74>
    26de:	c1 e0       	ldi	r28, 0x01	; 1
    26e0:	b2 cf       	rjmp	.-156    	; 0x2646 <xTaskIncrementTick+0x74>
    26e2:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    26e6:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    26ea:	e6 89       	ldd	r30, Z+22	; 0x16
    26ec:	b9 e0       	ldi	r27, 0x09	; 9
    26ee:	eb 9f       	mul	r30, r27
    26f0:	f0 01       	movw	r30, r0
    26f2:	11 24       	eor	r1, r1
    26f4:	e6 5a       	subi	r30, 0xA6	; 166
    26f6:	fb 4f       	sbci	r31, 0xFB	; 251
    26f8:	80 81       	ld	r24, Z
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	40 f0       	brcs	.+16     	; 0x270e <xTaskIncrementTick+0x13c>
    26fe:	c1 e0       	ldi	r28, 0x01	; 1
    2700:	06 c0       	rjmp	.+12     	; 0x270e <xTaskIncrementTick+0x13c>
    2702:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxPendedTicks>
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxPendedTicks>
    270c:	c0 e0       	ldi	r28, 0x00	; 0
    270e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    2712:	81 11       	cpse	r24, r1
    2714:	c1 e0       	ldi	r28, 0x01	; 1
    2716:	8c 2f       	mov	r24, r28
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	08 95       	ret

0000272a <xTaskResumeAll>:
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	0f 92       	push	r0
    273c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    2746:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    274a:	88 23       	and	r24, r24
    274c:	11 f0       	breq	.+4      	; 0x2752 <xTaskResumeAll+0x28>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	52 c0       	rjmp	.+164    	; 0x27f6 <xTaskResumeAll+0xcc>
    2752:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2756:	88 23       	and	r24, r24
    2758:	d1 f3       	breq	.-12     	; 0x274e <xTaskResumeAll+0x24>
    275a:	c0 e0       	ldi	r28, 0x00	; 0
    275c:	d0 e0       	ldi	r29, 0x00	; 0
    275e:	89 e0       	ldi	r24, 0x09	; 9
    2760:	f8 2e       	mov	r15, r24
    2762:	ee 24       	eor	r14, r14
    2764:	e3 94       	inc	r14
    2766:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <xPendingReadyList>
    276a:	88 23       	and	r24, r24
    276c:	51 f1       	breq	.+84     	; 0x27c2 <xTaskResumeAll+0x98>
    276e:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <xPendingReadyList+0x5>
    2772:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <xPendingReadyList+0x6>
    2776:	c6 81       	ldd	r28, Z+6	; 0x06
    2778:	d7 81       	ldd	r29, Z+7	; 0x07
    277a:	ce 01       	movw	r24, r28
    277c:	0c 96       	adiw	r24, 0x0c	; 12
    277e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2782:	8e 01       	movw	r16, r28
    2784:	0e 5f       	subi	r16, 0xFE	; 254
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	c8 01       	movw	r24, r16
    278a:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    278e:	8e 89       	ldd	r24, Y+22	; 0x16
    2790:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2794:	98 17       	cp	r25, r24
    2796:	10 f4       	brcc	.+4      	; 0x279c <xTaskResumeAll+0x72>
    2798:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    279c:	f8 9e       	mul	r15, r24
    279e:	c0 01       	movw	r24, r0
    27a0:	11 24       	eor	r1, r1
    27a2:	b8 01       	movw	r22, r16
    27a4:	86 5a       	subi	r24, 0xA6	; 166
    27a6:	9b 4f       	sbci	r25, 0xFB	; 251
    27a8:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    27ac:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    27b0:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    27b4:	9e 89       	ldd	r25, Y+22	; 0x16
    27b6:	86 89       	ldd	r24, Z+22	; 0x16
    27b8:	98 17       	cp	r25, r24
    27ba:	a8 f2       	brcs	.-86     	; 0x2766 <xTaskResumeAll+0x3c>
    27bc:	e0 92 21 04 	sts	0x0421, r14	; 0x800421 <xYieldPending>
    27c0:	d2 cf       	rjmp	.-92     	; 0x2766 <xTaskResumeAll+0x3c>
    27c2:	cd 2b       	or	r28, r29
    27c4:	11 f0       	breq	.+4      	; 0x27ca <xTaskResumeAll+0xa0>
    27c6:	0e 94 b1 10 	call	0x2162	; 0x2162 <prvResetNextTaskUnblockTime>
    27ca:	c0 91 22 04 	lds	r28, 0x0422	; 0x800422 <uxPendedTicks>
    27ce:	cc 23       	and	r28, r28
    27d0:	51 f0       	breq	.+20     	; 0x27e6 <xTaskResumeAll+0xbc>
    27d2:	d1 e0       	ldi	r29, 0x01	; 1
    27d4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <xTaskIncrementTick>
    27d8:	81 11       	cpse	r24, r1
    27da:	d0 93 21 04 	sts	0x0421, r29	; 0x800421 <xYieldPending>
    27de:	c1 50       	subi	r28, 0x01	; 1
    27e0:	c9 f7       	brne	.-14     	; 0x27d4 <xTaskResumeAll+0xaa>
    27e2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <uxPendedTicks>
    27e6:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <xTaskResumeAll+0xc6>
    27ee:	af cf       	rjmp	.-162    	; 0x274e <xTaskResumeAll+0x24>
    27f0:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	0f 90       	pop	r0
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	08 95       	ret

00002808 <vTaskDelayUntil>:
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	8c 01       	movw	r16, r24
    2812:	eb 01       	movw	r28, r22
    2814:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    2818:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    281c:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    2820:	f8 01       	movw	r30, r16
    2822:	20 81       	ld	r18, Z
    2824:	31 81       	ldd	r19, Z+1	; 0x01
    2826:	c9 01       	movw	r24, r18
    2828:	8c 0f       	add	r24, r28
    282a:	9d 1f       	adc	r25, r29
    282c:	42 17       	cp	r20, r18
    282e:	53 07       	cpc	r21, r19
    2830:	20 f4       	brcc	.+8      	; 0x283a <vTaskDelayUntil+0x32>
    2832:	82 17       	cp	r24, r18
    2834:	93 07       	cpc	r25, r19
    2836:	40 f4       	brcc	.+16     	; 0x2848 <vTaskDelayUntil+0x40>
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <vTaskDelayUntil+0x38>
    283a:	82 17       	cp	r24, r18
    283c:	93 07       	cpc	r25, r19
    283e:	30 f0       	brcs	.+12     	; 0x284c <vTaskDelayUntil+0x44>
    2840:	21 e0       	ldi	r18, 0x01	; 1
    2842:	48 17       	cp	r20, r24
    2844:	59 07       	cpc	r21, r25
    2846:	18 f0       	brcs	.+6      	; 0x284e <vTaskDelayUntil+0x46>
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	01 c0       	rjmp	.+2      	; 0x284e <vTaskDelayUntil+0x46>
    284c:	21 e0       	ldi	r18, 0x01	; 1
    284e:	f8 01       	movw	r30, r16
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	22 23       	and	r18, r18
    2856:	29 f0       	breq	.+10     	; 0x2862 <vTaskDelayUntil+0x5a>
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	84 1b       	sub	r24, r20
    285c:	95 0b       	sbc	r25, r21
    285e:	0e 94 cc 10 	call	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>
    2862:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2866:	81 11       	cpse	r24, r1
    2868:	02 c0       	rjmp	.+4      	; 0x286e <vTaskDelayUntil+0x66>
    286a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	08 95       	ret

00002878 <vTaskSwitchContext>:
    2878:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    287c:	88 23       	and	r24, r24
    287e:	21 f0       	breq	.+8      	; 0x2888 <vTaskSwitchContext+0x10>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    2886:	08 95       	ret
    2888:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <xYieldPending>
    288c:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    2890:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2894:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2898:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    289c:	2d 91       	ld	r18, X+
    289e:	3c 91       	ld	r19, X
    28a0:	87 89       	ldd	r24, Z+23	; 0x17
    28a2:	90 8d       	ldd	r25, Z+24	; 0x18
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	60 f0       	brcs	.+24     	; 0x28c2 <vTaskSwitchContext+0x4a>
    28aa:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    28ae:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    28b2:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    28b6:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    28ba:	67 5e       	subi	r22, 0xE7	; 231
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <vApplicationStackOverflowHook>
    28c2:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <uxTopReadyPriority>
    28c6:	69 e0       	ldi	r22, 0x09	; 9
    28c8:	48 2f       	mov	r20, r24
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	64 9f       	mul	r22, r20
    28ce:	90 01       	movw	r18, r0
    28d0:	65 9f       	mul	r22, r21
    28d2:	30 0d       	add	r19, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	f9 01       	movw	r30, r18
    28d8:	e6 5a       	subi	r30, 0xA6	; 166
    28da:	fb 4f       	sbci	r31, 0xFB	; 251
    28dc:	90 81       	ld	r25, Z
    28de:	91 11       	cpse	r25, r1
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <vTaskSwitchContext+0x6e>
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	f1 cf       	rjmp	.-30     	; 0x28c8 <vTaskSwitchContext+0x50>
    28e6:	a1 81       	ldd	r26, Z+1	; 0x01
    28e8:	b2 81       	ldd	r27, Z+2	; 0x02
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	0d 90       	ld	r0, X+
    28ee:	bc 91       	ld	r27, X
    28f0:	a0 2d       	mov	r26, r0
    28f2:	b2 83       	std	Z+2, r27	; 0x02
    28f4:	a1 83       	std	Z+1, r26	; 0x01
    28f6:	23 5a       	subi	r18, 0xA3	; 163
    28f8:	3b 4f       	sbci	r19, 0xFB	; 251
    28fa:	a2 17       	cp	r26, r18
    28fc:	b3 07       	cpc	r27, r19
    28fe:	31 f4       	brne	.+12     	; 0x290c <vTaskSwitchContext+0x94>
    2900:	12 96       	adiw	r26, 0x02	; 2
    2902:	2d 91       	ld	r18, X+
    2904:	3c 91       	ld	r19, X
    2906:	13 97       	sbiw	r26, 0x03	; 3
    2908:	32 83       	std	Z+2, r19	; 0x02
    290a:	21 83       	std	Z+1, r18	; 0x01
    290c:	99 e0       	ldi	r25, 0x09	; 9
    290e:	94 9f       	mul	r25, r20
    2910:	f0 01       	movw	r30, r0
    2912:	95 9f       	mul	r25, r21
    2914:	f0 0d       	add	r31, r0
    2916:	11 24       	eor	r1, r1
    2918:	e6 5a       	subi	r30, 0xA6	; 166
    291a:	fb 4f       	sbci	r31, 0xFB	; 251
    291c:	01 80       	ldd	r0, Z+1	; 0x01
    291e:	f2 81       	ldd	r31, Z+2	; 0x02
    2920:	e0 2d       	mov	r30, r0
    2922:	26 81       	ldd	r18, Z+6	; 0x06
    2924:	37 81       	ldd	r19, Z+7	; 0x07
    2926:	30 93 7f 04 	sts	0x047F, r19	; 0x80047f <pxCurrentTCB+0x1>
    292a:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <pxCurrentTCB>
    292e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2932:	08 95       	ret

00002934 <vTaskPlaceOnEventList>:
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	eb 01       	movw	r28, r22
    293a:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    293e:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2942:	64 5f       	subi	r22, 0xF4	; 244
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	ce 01       	movw	r24, r28
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>

00002956 <vTaskPlaceOnEventListRestricted>:
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	eb 01       	movw	r28, r22
    295e:	14 2f       	mov	r17, r20
    2960:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    2964:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2968:	64 5f       	subi	r22, 0xF4	; 244
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2970:	11 23       	and	r17, r17
    2972:	11 f0       	breq	.+4      	; 0x2978 <vTaskPlaceOnEventListRestricted+0x22>
    2974:	cf ef       	ldi	r28, 0xFF	; 255
    2976:	df ef       	ldi	r29, 0xFF	; 255
    2978:	61 2f       	mov	r22, r17
    297a:	ce 01       	movw	r24, r28
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>

00002986 <xTaskRemoveFromEventList>:
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	dc 01       	movw	r26, r24
    2990:	15 96       	adiw	r26, 0x05	; 5
    2992:	ed 91       	ld	r30, X+
    2994:	fc 91       	ld	r31, X
    2996:	16 97       	sbiw	r26, 0x06	; 6
    2998:	c6 81       	ldd	r28, Z+6	; 0x06
    299a:	d7 81       	ldd	r29, Z+7	; 0x07
    299c:	8e 01       	movw	r16, r28
    299e:	04 5f       	subi	r16, 0xF4	; 244
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	c8 01       	movw	r24, r16
    29a4:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    29a8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    29ac:	81 11       	cpse	r24, r1
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <xTaskRemoveFromEventList+0x52>
    29b0:	0a 50       	subi	r16, 0x0A	; 10
    29b2:	11 09       	sbc	r17, r1
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    29ba:	8e 89       	ldd	r24, Y+22	; 0x16
    29bc:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    29c0:	98 17       	cp	r25, r24
    29c2:	10 f4       	brcc	.+4      	; 0x29c8 <xTaskRemoveFromEventList+0x42>
    29c4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    29c8:	b9 e0       	ldi	r27, 0x09	; 9
    29ca:	8b 9f       	mul	r24, r27
    29cc:	c0 01       	movw	r24, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	b8 01       	movw	r22, r16
    29d2:	86 5a       	subi	r24, 0xA6	; 166
    29d4:	9b 4f       	sbci	r25, 0xFB	; 251
    29d6:	03 c0       	rjmp	.+6      	; 0x29de <xTaskRemoveFromEventList+0x58>
    29d8:	b8 01       	movw	r22, r16
    29da:	8b e3       	ldi	r24, 0x3B	; 59
    29dc:	94 e0       	ldi	r25, 0x04	; 4
    29de:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    29e2:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    29e6:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    29ea:	9e 89       	ldd	r25, Y+22	; 0x16
    29ec:	86 89       	ldd	r24, Z+22	; 0x16
    29ee:	89 17       	cp	r24, r25
    29f0:	20 f4       	brcc	.+8      	; 0x29fa <xTaskRemoveFromEventList+0x74>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <xTaskRemoveFromEventList+0x76>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	08 95       	ret

00002a06 <vTaskInternalSetTimeOutState>:
    2a06:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <xNumOfOverflows>
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
    2a0e:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <xTickCount>
    2a12:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <xTickCount+0x1>
    2a16:	32 83       	std	Z+2, r19	; 0x02
    2a18:	21 83       	std	Z+1, r18	; 0x01
    2a1a:	08 95       	ret

00002a1c <xTaskCheckForTimeOut>:
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	0f 92       	push	r0
    2a26:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    2a2a:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    2a2e:	db 01       	movw	r26, r22
    2a30:	2d 91       	ld	r18, X+
    2a32:	3c 91       	ld	r19, X
    2a34:	2f 3f       	cpi	r18, 0xFF	; 255
    2a36:	bf ef       	ldi	r27, 0xFF	; 255
    2a38:	3b 07       	cpc	r19, r27
    2a3a:	d9 f0       	breq	.+54     	; 0x2a72 <xTaskCheckForTimeOut+0x56>
    2a3c:	ec 01       	movw	r28, r24
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	fa 81       	ldd	r31, Y+2	; 0x02
    2a42:	a0 91 20 04 	lds	r26, 0x0420	; 0x800420 <xNumOfOverflows>
    2a46:	b8 81       	ld	r27, Y
    2a48:	ba 17       	cp	r27, r26
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <xTaskCheckForTimeOut+0x36>
    2a4c:	4e 17       	cp	r20, r30
    2a4e:	5f 07       	cpc	r21, r31
    2a50:	90 f4       	brcc	.+36     	; 0x2a76 <xTaskCheckForTimeOut+0x5a>
    2a52:	4e 1b       	sub	r20, r30
    2a54:	5f 0b       	sbc	r21, r31
    2a56:	fb 01       	movw	r30, r22
    2a58:	42 17       	cp	r20, r18
    2a5a:	53 07       	cpc	r21, r19
    2a5c:	38 f4       	brcc	.+14     	; 0x2a6c <xTaskCheckForTimeOut+0x50>
    2a5e:	24 1b       	sub	r18, r20
    2a60:	35 0b       	sbc	r19, r21
    2a62:	31 83       	std	Z+1, r19	; 0x01
    2a64:	20 83       	st	Z, r18
    2a66:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    2a6a:	03 c0       	rjmp	.+6      	; 0x2a72 <xTaskCheckForTimeOut+0x56>
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <xTaskCheckForTimeOut+0x5a>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <xTaskCheckForTimeOut+0x5c>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	08 95       	ret

00002a82 <vTaskMissedYield>:
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    2a88:	08 95       	ret

00002a8a <xTaskGetSchedulerState>:
    2a8a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2a8e:	88 23       	and	r24, r24
    2a90:	31 f0       	breq	.+12     	; 0x2a9e <xTaskGetSchedulerState+0x14>
    2a92:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    2a96:	88 23       	and	r24, r24
    2a98:	21 f0       	breq	.+8      	; 0x2aa2 <xTaskGetSchedulerState+0x18>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	08 95       	ret
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	08 95       	ret
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	08 95       	ret

00002aa6 <xTaskPriorityDisinherit>:
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	fc 01       	movw	r30, r24
    2ab0:	89 2b       	or	r24, r25
    2ab2:	11 f4       	brne	.+4      	; 0x2ab8 <xTaskPriorityDisinherit+0x12>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	2c c0       	rjmp	.+88     	; 0x2b10 <xTaskPriorityDisinherit+0x6a>
    2ab8:	82 a1       	ldd	r24, Z+34	; 0x22
    2aba:	81 50       	subi	r24, 0x01	; 1
    2abc:	82 a3       	std	Z+34, r24	; 0x22
    2abe:	26 89       	ldd	r18, Z+22	; 0x16
    2ac0:	91 a1       	ldd	r25, Z+33	; 0x21
    2ac2:	29 17       	cp	r18, r25
    2ac4:	b9 f3       	breq	.-18     	; 0x2ab4 <xTaskPriorityDisinherit+0xe>
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	f5 cf       	rjmp	.-22     	; 0x2ab4 <xTaskPriorityDisinherit+0xe>
    2aca:	ef 01       	movw	r28, r30
    2acc:	8f 01       	movw	r16, r30
    2ace:	0e 5f       	subi	r16, 0xFE	; 254
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	8e 8b       	std	Y+22, r24	; 0x16
    2adc:	48 2f       	mov	r20, r24
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	24 e0       	ldi	r18, 0x04	; 4
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	24 1b       	sub	r18, r20
    2ae6:	35 0b       	sbc	r19, r21
    2ae8:	3d 87       	std	Y+13, r19	; 0x0d
    2aea:	2c 87       	std	Y+12, r18	; 0x0c
    2aec:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2af0:	98 17       	cp	r25, r24
    2af2:	10 f4       	brcc	.+4      	; 0x2af8 <xTaskPriorityDisinherit+0x52>
    2af4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2af8:	29 e0       	ldi	r18, 0x09	; 9
    2afa:	24 9f       	mul	r18, r20
    2afc:	c0 01       	movw	r24, r0
    2afe:	25 9f       	mul	r18, r21
    2b00:	90 0d       	add	r25, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	b8 01       	movw	r22, r16
    2b06:	86 5a       	subi	r24, 0xA6	; 166
    2b08:	9b 4f       	sbci	r25, 0xFB	; 251
    2b0a:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	08 95       	ret

00002b1a <prvCheckForValidListAndQueue>:
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	0f 92       	push	r0
    2b20:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2b24:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2b28:	89 2b       	or	r24, r25
    2b2a:	e9 f4       	brne	.+58     	; 0x2b66 <prvCheckForValidListAndQueue+0x4c>
    2b2c:	83 e9       	ldi	r24, 0x93	; 147
    2b2e:	94 e0       	ldi	r25, 0x04	; 4
    2b30:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2b34:	8a e8       	ldi	r24, 0x8A	; 138
    2b36:	94 e0       	ldi	r25, 0x04	; 4
    2b38:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2b3c:	83 e9       	ldi	r24, 0x93	; 147
    2b3e:	94 e0       	ldi	r25, 0x04	; 4
    2b40:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    2b44:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    2b48:	8a e8       	ldi	r24, 0x8A	; 138
    2b4a:	94 e0       	ldi	r25, 0x04	; 4
    2b4c:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <pxOverflowTimerList+0x1>
    2b50:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <pxOverflowTimerList>
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	65 e0       	ldi	r22, 0x05	; 5
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <xQueueGenericCreate>
    2b5e:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <xTimerQueue+0x1>
    2b62:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <xTimerQueue>
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	08 95       	ret

00002b6c <prvInsertTimerInActiveList>:
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	73 83       	std	Z+3, r23	; 0x03
    2b70:	62 83       	std	Z+2, r22	; 0x02
    2b72:	91 87       	std	Z+9, r25	; 0x09
    2b74:	80 87       	std	Z+8, r24	; 0x08
    2b76:	46 17       	cp	r20, r22
    2b78:	57 07       	cpc	r21, r23
    2b7a:	78 f0       	brcs	.+30     	; 0x2b9a <prvInsertTimerInActiveList+0x2e>
    2b7c:	42 1b       	sub	r20, r18
    2b7e:	53 0b       	sbc	r21, r19
    2b80:	84 85       	ldd	r24, Z+12	; 0x0c
    2b82:	95 85       	ldd	r25, Z+13	; 0x0d
    2b84:	48 17       	cp	r20, r24
    2b86:	59 07       	cpc	r21, r25
    2b88:	c8 f4       	brcc	.+50     	; 0x2bbc <prvInsertTimerInActiveList+0x50>
    2b8a:	bf 01       	movw	r22, r30
    2b8c:	6e 5f       	subi	r22, 0xFE	; 254
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    2b94:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <prvInsertTimerInActiveList+0x48>
    2b9a:	42 17       	cp	r20, r18
    2b9c:	53 07       	cpc	r21, r19
    2b9e:	18 f4       	brcc	.+6      	; 0x2ba6 <prvInsertTimerInActiveList+0x3a>
    2ba0:	62 17       	cp	r22, r18
    2ba2:	73 07       	cpc	r23, r19
    2ba4:	58 f4       	brcc	.+22     	; 0x2bbc <prvInsertTimerInActiveList+0x50>
    2ba6:	bf 01       	movw	r22, r30
    2ba8:	6e 5f       	subi	r22, 0xFE	; 254
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    2bb0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2bb4:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	08 95       	ret
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	08 95       	ret

00002bc0 <xTimerCreateTimerTask>:
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <prvCheckForValidListAndQueue>
    2bca:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2bce:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2bd2:	89 2b       	or	r24, r25
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <xTimerCreateTimerTask+0x36>
    2bd6:	82 e8       	ldi	r24, 0x82	; 130
    2bd8:	e8 2e       	mov	r14, r24
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	f8 2e       	mov	r15, r24
    2bde:	03 e0       	ldi	r16, 0x03	; 3
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	45 e5       	ldi	r20, 0x55	; 85
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	67 e3       	ldi	r22, 0x37	; 55
    2bea:	72 e0       	ldi	r23, 0x02	; 2
    2bec:	80 e9       	ldi	r24, 0x90	; 144
    2bee:	96 e1       	ldi	r25, 0x16	; 22
    2bf0:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <xTimerCreateTimerTask+0x38>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	ef 90       	pop	r14
    2bfe:	08 95       	ret

00002c00 <xTimerGenericCommand>:
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <xTimerGenericCommand+0xa>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <xTimerGenericCommand+0xc>
    2c0c:	1f 92       	push	r1
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <xTimerQueue>
    2c16:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2c1a:	10 97       	sbiw	r26, 0x00	; 0
    2c1c:	29 f1       	breq	.+74     	; 0x2c68 <xTimerGenericCommand+0x68>
    2c1e:	f9 01       	movw	r30, r18
    2c20:	69 83       	std	Y+1, r22	; 0x01
    2c22:	5b 83       	std	Y+3, r21	; 0x03
    2c24:	4a 83       	std	Y+2, r20	; 0x02
    2c26:	9d 83       	std	Y+5, r25	; 0x05
    2c28:	8c 83       	std	Y+4, r24	; 0x04
    2c2a:	66 30       	cpi	r22, 0x06	; 6
    2c2c:	a4 f4       	brge	.+40     	; 0x2c56 <xTimerGenericCommand+0x56>
    2c2e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <xTaskGetSchedulerState>
    2c32:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <xTimerQueue>
    2c36:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	82 30       	cpi	r24, 0x02	; 2
    2c3e:	11 f4       	brne	.+4      	; 0x2c44 <xTimerGenericCommand+0x44>
    2c40:	a8 01       	movw	r20, r16
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <xTimerGenericCommand+0x48>
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	be 01       	movw	r22, r28
    2c4a:	6f 5f       	subi	r22, 0xFF	; 255
    2c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4e:	cf 01       	movw	r24, r30
    2c50:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <xQueueGenericSend>
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <xTimerGenericCommand+0x6a>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	af 01       	movw	r20, r30
    2c5a:	be 01       	movw	r22, r28
    2c5c:	6f 5f       	subi	r22, 0xFF	; 255
    2c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <xQueueGenericSendFromISR>
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <xTimerGenericCommand+0x6a>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <prvSwitchTimerLists>:
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2c8e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2c92:	80 81       	ld	r24, Z
    2c94:	88 23       	and	r24, r24
    2c96:	89 f1       	breq	.+98     	; 0x2cfa <prvSwitchTimerLists+0x7c>
    2c98:	05 80       	ldd	r0, Z+5	; 0x05
    2c9a:	f6 81       	ldd	r31, Z+6	; 0x06
    2c9c:	e0 2d       	mov	r30, r0
    2c9e:	e0 80       	ld	r14, Z
    2ca0:	f1 80       	ldd	r15, Z+1	; 0x01
    2ca2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ca4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ca6:	8e 01       	movw	r16, r28
    2ca8:	0e 5f       	subi	r16, 0xFE	; 254
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	c8 01       	movw	r24, r16
    2cae:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2cb2:	e8 89       	ldd	r30, Y+16	; 0x10
    2cb4:	f9 89       	ldd	r31, Y+17	; 0x11
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	09 95       	icall
    2cba:	8a 89       	ldd	r24, Y+18	; 0x12
    2cbc:	82 ff       	sbrs	r24, 2
    2cbe:	e5 cf       	rjmp	.-54     	; 0x2c8a <prvSwitchTimerLists+0xc>
    2cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc4:	8e 0d       	add	r24, r14
    2cc6:	9f 1d       	adc	r25, r15
    2cc8:	e8 16       	cp	r14, r24
    2cca:	f9 06       	cpc	r15, r25
    2ccc:	60 f4       	brcc	.+24     	; 0x2ce6 <prvSwitchTimerLists+0x68>
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	d9 87       	std	Y+9, r29	; 0x09
    2cd4:	c8 87       	std	Y+8, r28	; 0x08
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    2cdc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2ce0:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    2ce4:	d2 cf       	rjmp	.-92     	; 0x2c8a <prvSwitchTimerLists+0xc>
    2ce6:	00 e0       	ldi	r16, 0x00	; 0
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	a7 01       	movw	r20, r14
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2cf8:	c8 cf       	rjmp	.-112    	; 0x2c8a <prvSwitchTimerLists+0xc>
    2cfa:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    2cfe:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2d02:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    2d06:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    2d0a:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <pxOverflowTimerList+0x1>
    2d0e:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <pxOverflowTimerList>
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	ef 90       	pop	r14
    2d1e:	08 95       	ret

00002d20 <prvTimerTask>:
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <prvTimerTask+0x6>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <prvTimerTask+0x8>
    2d28:	1f 92       	push	r1
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2d32:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2d36:	d0 80       	ld	r13, Z
    2d38:	dd 20       	and	r13, r13
    2d3a:	31 f0       	breq	.+12     	; 0x2d48 <prvTimerTask+0x28>
    2d3c:	05 80       	ldd	r0, Z+5	; 0x05
    2d3e:	f6 81       	ldd	r31, Z+6	; 0x06
    2d40:	e0 2d       	mov	r30, r0
    2d42:	e0 80       	ld	r14, Z
    2d44:	f1 80       	ldd	r15, Z+1	; 0x01
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <prvTimerTask+0x2c>
    2d48:	e1 2c       	mov	r14, r1
    2d4a:	f1 2c       	mov	r15, r1
    2d4c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    2d50:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
    2d54:	8c 01       	movw	r16, r24
    2d56:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    2d5a:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    2d5e:	08 17       	cp	r16, r24
    2d60:	19 07       	cpc	r17, r25
    2d62:	20 f4       	brcc	.+8      	; 0x2d6c <prvTimerTask+0x4c>
    2d64:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <prvSwitchTimerLists>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <prvTimerTask+0x4e>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	10 93 81 04 	sts	0x0481, r17	; 0x800481 <xLastTime.2412+0x1>
    2d72:	00 93 80 04 	sts	0x0480, r16	; 0x800480 <xLastTime.2412>
    2d76:	81 11       	cpse	r24, r1
    2d78:	55 c0       	rjmp	.+170    	; 0x2e24 <prvTimerTask+0x104>
    2d7a:	dd 20       	and	r13, r13
    2d7c:	d9 f1       	breq	.+118    	; 0x2df4 <prvTimerTask+0xd4>
    2d7e:	0e 15       	cp	r16, r14
    2d80:	1f 05       	cpc	r17, r15
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <prvTimerTask+0x66>
    2d84:	3e c0       	rjmp	.+124    	; 0x2e02 <prvTimerTask+0xe2>
    2d86:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2d8a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2d8e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2d92:	05 80       	ldd	r0, Z+5	; 0x05
    2d94:	f6 81       	ldd	r31, Z+6	; 0x06
    2d96:	e0 2d       	mov	r30, r0
    2d98:	c6 80       	ldd	r12, Z+6	; 0x06
    2d9a:	d7 80       	ldd	r13, Z+7	; 0x07
    2d9c:	c6 01       	movw	r24, r12
    2d9e:	02 96       	adiw	r24, 0x02	; 2
    2da0:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2da4:	d6 01       	movw	r26, r12
    2da6:	52 96       	adiw	r26, 0x12	; 18
    2da8:	8c 91       	ld	r24, X
    2daa:	52 97       	sbiw	r26, 0x12	; 18
    2dac:	82 ff       	sbrs	r24, 2
    2dae:	17 c0       	rjmp	.+46     	; 0x2dde <prvTimerTask+0xbe>
    2db0:	1c 96       	adiw	r26, 0x0c	; 12
    2db2:	6d 91       	ld	r22, X+
    2db4:	7c 91       	ld	r23, X
    2db6:	1d 97       	sbiw	r26, 0x0d	; 13
    2db8:	6e 0d       	add	r22, r14
    2dba:	7f 1d       	adc	r23, r15
    2dbc:	97 01       	movw	r18, r14
    2dbe:	a8 01       	movw	r20, r16
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2dc6:	88 23       	and	r24, r24
    2dc8:	69 f0       	breq	.+26     	; 0x2de4 <prvTimerTask+0xc4>
    2dca:	00 e0       	ldi	r16, 0x00	; 0
    2dcc:	10 e0       	ldi	r17, 0x00	; 0
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	a7 01       	movw	r20, r14
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	c6 01       	movw	r24, r12
    2dd8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <prvTimerTask+0xc4>
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	f6 01       	movw	r30, r12
    2de2:	82 8b       	std	Z+18, r24	; 0x12
    2de4:	d6 01       	movw	r26, r12
    2de6:	50 96       	adiw	r26, 0x10	; 16
    2de8:	ed 91       	ld	r30, X+
    2dea:	fc 91       	ld	r31, X
    2dec:	51 97       	sbiw	r26, 0x11	; 17
    2dee:	c6 01       	movw	r24, r12
    2df0:	09 95       	icall
    2df2:	1e c0       	rjmp	.+60     	; 0x2e30 <prvTimerTask+0x110>
    2df4:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxOverflowTimerList>
    2df8:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2dfc:	80 81       	ld	r24, Z
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	81 11       	cpse	r24, r1
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	b7 01       	movw	r22, r14
    2e06:	60 1b       	sub	r22, r16
    2e08:	71 0b       	sbc	r23, r17
    2e0a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2e0e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2e12:	0e 94 95 10 	call	0x212a	; 0x212a <vQueueWaitForMessageRestricted>
    2e16:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	09 c0       	rjmp	.+18     	; 0x2e30 <prvTimerTask+0x110>
    2e1e:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2e22:	06 c0       	rjmp	.+12     	; 0x2e30 <prvTimerTask+0x110>
    2e24:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <prvTimerTask+0x110>
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	87 ff       	sbrs	r24, 7
    2e2e:	0e c0       	rjmp	.+28     	; 0x2e4c <prvTimerTask+0x12c>
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	be 01       	movw	r22, r28
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2e3e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2e42:	0e 94 03 10 	call	0x2006	; 0x2006 <xQueueReceive>
    2e46:	81 11       	cpse	r24, r1
    2e48:	f0 cf       	rjmp	.-32     	; 0x2e2a <prvTimerTask+0x10a>
    2e4a:	71 cf       	rjmp	.-286    	; 0x2d2e <prvTimerTask+0xe>
    2e4c:	ec 80       	ldd	r14, Y+4	; 0x04
    2e4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e50:	f7 01       	movw	r30, r14
    2e52:	82 85       	ldd	r24, Z+10	; 0x0a
    2e54:	93 85       	ldd	r25, Z+11	; 0x0b
    2e56:	89 2b       	or	r24, r25
    2e58:	21 f0       	breq	.+8      	; 0x2e62 <prvTimerTask+0x142>
    2e5a:	c7 01       	movw	r24, r14
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2e62:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
    2e66:	6c 01       	movw	r12, r24
    2e68:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    2e6c:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    2e70:	c8 16       	cp	r12, r24
    2e72:	d9 06       	cpc	r13, r25
    2e74:	10 f4       	brcc	.+4      	; 0x2e7a <prvTimerTask+0x15a>
    2e76:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <prvSwitchTimerLists>
    2e7a:	d0 92 81 04 	sts	0x0481, r13	; 0x800481 <xLastTime.2412+0x1>
    2e7e:	c0 92 80 04 	sts	0x0480, r12	; 0x800480 <xLastTime.2412>
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	0e 2e       	mov	r0, r30
    2e86:	00 0c       	add	r0, r0
    2e88:	ff 0b       	sbc	r31, r31
    2e8a:	ea 30       	cpi	r30, 0x0A	; 10
    2e8c:	f1 05       	cpc	r31, r1
    2e8e:	80 f6       	brcc	.-96     	; 0x2e30 <prvTimerTask+0x110>
    2e90:	ec 5c       	subi	r30, 0xCC	; 204
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	d7 01       	movw	r26, r14
    2e96:	52 96       	adiw	r26, 0x12	; 18
    2e98:	8c 91       	ld	r24, X
    2e9a:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    2e9e:	81 60       	ori	r24, 0x01	; 1
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	82 8b       	std	Z+18, r24	; 0x12
    2ea4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ea8:	64 85       	ldd	r22, Z+12	; 0x0c
    2eaa:	75 85       	ldd	r23, Z+13	; 0x0d
    2eac:	62 0f       	add	r22, r18
    2eae:	73 1f       	adc	r23, r19
    2eb0:	a6 01       	movw	r20, r12
    2eb2:	c7 01       	movw	r24, r14
    2eb4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <prvTimerTask+0x19e>
    2ebc:	b9 cf       	rjmp	.-142    	; 0x2e30 <prvTimerTask+0x110>
    2ebe:	d7 01       	movw	r26, r14
    2ec0:	50 96       	adiw	r26, 0x10	; 16
    2ec2:	ed 91       	ld	r30, X+
    2ec4:	fc 91       	ld	r31, X
    2ec6:	51 97       	sbiw	r26, 0x11	; 17
    2ec8:	c7 01       	movw	r24, r14
    2eca:	09 95       	icall
    2ecc:	f7 01       	movw	r30, r14
    2ece:	82 89       	ldd	r24, Z+18	; 0x12
    2ed0:	82 ff       	sbrs	r24, 2
    2ed2:	ae cf       	rjmp	.-164    	; 0x2e30 <prvTimerTask+0x110>
    2ed4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ed6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ed8:	84 85       	ldd	r24, Z+12	; 0x0c
    2eda:	95 85       	ldd	r25, Z+13	; 0x0d
    2edc:	48 0f       	add	r20, r24
    2ede:	59 1f       	adc	r21, r25
    2ee0:	00 e0       	ldi	r16, 0x00	; 0
    2ee2:	10 e0       	ldi	r17, 0x00	; 0
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	c7 01       	movw	r24, r14
    2eec:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2ef0:	9f cf       	rjmp	.-194    	; 0x2e30 <prvTimerTask+0x110>
    2ef2:	81 60       	ori	r24, 0x01	; 1
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	82 8b       	std	Z+18, r24	; 0x12
    2ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    2efa:	7b 81       	ldd	r23, Y+3	; 0x03
    2efc:	75 87       	std	Z+13, r23	; 0x0d
    2efe:	64 87       	std	Z+12, r22	; 0x0c
    2f00:	6c 0d       	add	r22, r12
    2f02:	7d 1d       	adc	r23, r13
    2f04:	96 01       	movw	r18, r12
    2f06:	a6 01       	movw	r20, r12
    2f08:	c7 01       	movw	r24, r14
    2f0a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2f0e:	90 cf       	rjmp	.-224    	; 0x2e30 <prvTimerTask+0x110>
    2f10:	81 fd       	sbrc	r24, 1
    2f12:	04 c0       	rjmp	.+8      	; 0x2f1c <prvTimerTask+0x1fc>
    2f14:	c7 01       	movw	r24, r14
    2f16:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2f1a:	8a cf       	rjmp	.-236    	; 0x2e30 <prvTimerTask+0x110>
    2f1c:	8e 7f       	andi	r24, 0xFE	; 254
    2f1e:	d7 01       	movw	r26, r14
    2f20:	52 96       	adiw	r26, 0x12	; 18
    2f22:	8c 93       	st	X, r24
    2f24:	85 cf       	rjmp	.-246    	; 0x2e30 <prvTimerTask+0x110>

00002f26 <initVariant>:
    2f26:	0e 94 2b 05 	call	0xa56	; 0xa56 <setup>
    2f2a:	0e 94 ab 12 	call	0x2556	; 0x2556 <vTaskStartScheduler>
    2f2e:	08 95       	ret

00002f30 <vApplicationIdleHook>:
    2f30:	0e 94 68 05 	call	0xad0	; 0xad0 <loop>
    2f34:	8b e2       	ldi	r24, 0x2B	; 43
    2f36:	98 e0       	ldi	r25, 0x08	; 8
    2f38:	89 2b       	or	r24, r25
    2f3a:	11 f0       	breq	.+4      	; 0x2f40 <vApplicationIdleHook+0x10>
    2f3c:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <_Z14serialEventRunv>
    2f40:	08 95       	ret

00002f42 <vApplicationMallocFailedHook>:
    2f42:	25 9a       	sbi	0x04, 5	; 4
    2f44:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f46:	2f ef       	ldi	r18, 0xFF	; 255
    2f48:	80 e7       	ldi	r24, 0x70	; 112
    2f4a:	92 e0       	ldi	r25, 0x02	; 2
    2f4c:	21 50       	subi	r18, 0x01	; 1
    2f4e:	80 40       	sbci	r24, 0x00	; 0
    2f50:	90 40       	sbci	r25, 0x00	; 0
    2f52:	e1 f7       	brne	.-8      	; 0x2f4c <vApplicationMallocFailedHook+0xa>
    2f54:	00 c0       	rjmp	.+0      	; 0x2f56 <vApplicationMallocFailedHook+0x14>
    2f56:	00 00       	nop
    2f58:	1d 9a       	sbi	0x03, 5	; 3
    2f5a:	f5 cf       	rjmp	.-22     	; 0x2f46 <vApplicationMallocFailedHook+0x4>

00002f5c <vApplicationStackOverflowHook>:
    2f5c:	25 9a       	sbi	0x04, 5	; 4
    2f5e:	2d 9a       	sbi	0x05, 5	; 5
    2f60:	2f ef       	ldi	r18, 0xFF	; 255
    2f62:	87 ea       	ldi	r24, 0xA7	; 167
    2f64:	91 e6       	ldi	r25, 0x61	; 97
    2f66:	21 50       	subi	r18, 0x01	; 1
    2f68:	80 40       	sbci	r24, 0x00	; 0
    2f6a:	90 40       	sbci	r25, 0x00	; 0
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <vApplicationStackOverflowHook+0xa>
    2f6e:	00 c0       	rjmp	.+0      	; 0x2f70 <vApplicationStackOverflowHook+0x14>
    2f70:	00 00       	nop
    2f72:	1d 9a       	sbi	0x03, 5	; 3
    2f74:	f5 cf       	rjmp	.-22     	; 0x2f60 <vApplicationStackOverflowHook+0x4>

00002f76 <_ZN9MD_TCS23010initialiseEv>:
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	80 83       	st	Z, r24
    2f80:	81 83       	std	Z+1, r24	; 0x01
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	83 83       	std	Z+3, r24	; 0x03
    2f86:	84 83       	std	Z+4, r24	; 0x04
    2f88:	8a e0       	ldi	r24, 0x0A	; 10
    2f8a:	85 83       	std	Z+5, r24	; 0x05
    2f8c:	16 82       	std	Z+6, r1	; 0x06
    2f8e:	df 01       	movw	r26, r30
    2f90:	17 96       	adiw	r26, 0x07	; 7
    2f92:	73 96       	adiw	r30, 0x13	; 19
    2f94:	00 e7       	ldi	r16, 0x70	; 112
    2f96:	17 e1       	ldi	r17, 0x17	; 23
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	48 ed       	ldi	r20, 0xD8	; 216
    2f9e:	56 ed       	ldi	r21, 0xD6	; 214
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	0d 93       	st	X+, r16
    2fa6:	1d 93       	st	X+, r17
    2fa8:	2d 93       	st	X+, r18
    2faa:	3d 93       	st	X+, r19
    2fac:	18 96       	adiw	r26, 0x08	; 8
    2fae:	4d 93       	st	X+, r20
    2fb0:	5d 93       	st	X+, r21
    2fb2:	6d 93       	st	X+, r22
    2fb4:	7c 93       	st	X, r23
    2fb6:	1b 97       	sbiw	r26, 0x0b	; 11
    2fb8:	ae 17       	cp	r26, r30
    2fba:	bf 07       	cpc	r27, r31
    2fbc:	99 f7       	brne	.-26     	; 0x2fa4 <_ZN9MD_TCS23010initialiseEv+0x2e>
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <_ZN9MD_TCS230C1Ehhh>:
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	ec 01       	movw	r28, r24
    2fd0:	f6 2e       	mov	r15, r22
    2fd2:	04 2f       	mov	r16, r20
    2fd4:	12 2f       	mov	r17, r18
    2fd6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN9MD_TCS23010initialiseEv>
    2fda:	fb 82       	std	Y+3, r15	; 0x03
    2fdc:	0c 83       	std	Y+4, r16	; 0x04
    2fde:	18 83       	st	Y, r17
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	08 95       	ret

00002fec <_ZN9MD_TCS230D1Ev>:
    2fec:	08 95       	ret

00002fee <_ZN9MD_TCS2309setFilterEh>:
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	ec 01       	movw	r28, r24
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff8:	e9 f0       	breq	.+58     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ffe:	d1 f0       	breq	.+52     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    3000:	61 30       	cpi	r22, 0x01	; 1
    3002:	49 f0       	breq	.+18     	; 0x3016 <_ZN9MD_TCS2309setFilterEh+0x28>
    3004:	30 f0       	brcs	.+12     	; 0x3012 <_ZN9MD_TCS2309setFilterEh+0x24>
    3006:	62 30       	cpi	r22, 0x02	; 2
    3008:	41 f0       	breq	.+16     	; 0x301a <_ZN9MD_TCS2309setFilterEh+0x2c>
    300a:	63 30       	cpi	r22, 0x03	; 3
    300c:	99 f4       	brne	.+38     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <_ZN9MD_TCS2309setFilterEh+0x36>
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <_ZN9MD_TCS2309setFilterEh+0x36>
    3016:	61 e0       	ldi	r22, 0x01	; 1
    3018:	01 c0       	rjmp	.+2      	; 0x301c <_ZN9MD_TCS2309setFilterEh+0x2e>
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3020:	61 e0       	ldi	r22, 0x01	; 1
    3022:	03 c0       	rjmp	.+6      	; 0x302a <_ZN9MD_TCS2309setFilterEh+0x3c>
    3024:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	8c 81       	ldd	r24, Y+4	; 0x04
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

0000303a <_ZN9MD_TCS23013setFrequency2Eh>:
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	ec 01       	movw	r28, r24
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	8f 3f       	cpi	r24, 0xFF	; 255
    3044:	e9 f0       	breq	.+58     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	9f 3f       	cpi	r25, 0xFF	; 255
    304a:	d1 f0       	breq	.+52     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    304c:	61 30       	cpi	r22, 0x01	; 1
    304e:	49 f0       	breq	.+18     	; 0x3062 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3050:	30 f0       	brcs	.+12     	; 0x305e <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3052:	62 30       	cpi	r22, 0x02	; 2
    3054:	41 f0       	breq	.+16     	; 0x3066 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    3056:	63 30       	cpi	r22, 0x03	; 3
    3058:	99 f4       	brne	.+38     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	09 c0       	rjmp	.+18     	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	03 c0       	rjmp	.+6      	; 0x3076 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    3070:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	08 95       	ret

00003086 <_ZN9MD_TCS2309setEnableEb>:
    3086:	fc 01       	movw	r30, r24
    3088:	20 81       	ld	r18, Z
    308a:	2f 3f       	cpi	r18, 0xFF	; 255
    308c:	29 f0       	breq	.+10     	; 0x3098 <_ZN9MD_TCS2309setEnableEb+0x12>
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	69 27       	eor	r22, r25
    3092:	82 2f       	mov	r24, r18
    3094:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3098:	66 23       	and	r22, r22
    309a:	19 f0       	breq	.+6      	; 0x30a2 <_ZN9MD_TCS2309setEnableEb+0x1c>
    309c:	fc 01       	movw	r30, r24
    309e:	66 81       	ldd	r22, Z+6	; 0x06
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <_ZN9MD_TCS2309setEnableEb+0x1e>
    30a2:	63 e0       	ldi	r22, 0x03	; 3
    30a4:	0c 94 1d 18 	jmp	0x303a	; 0x303a <_ZN9MD_TCS23013setFrequency2Eh>

000030a8 <_ZN9MD_TCS2306getRGBEP9colorData>:
    30a8:	dc 01       	movw	r26, r24
    30aa:	fb 01       	movw	r30, r22
    30ac:	30 97       	sbiw	r30, 0x00	; 0
    30ae:	59 f0       	breq	.+22     	; 0x30c6 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    30b0:	9b 96       	adiw	r26, 0x2b	; 43
    30b2:	8c 91       	ld	r24, X
    30b4:	9b 97       	sbiw	r26, 0x2b	; 43
    30b6:	80 83       	st	Z, r24
    30b8:	9c 96       	adiw	r26, 0x2c	; 44
    30ba:	8c 91       	ld	r24, X
    30bc:	9c 97       	sbiw	r26, 0x2c	; 44
    30be:	81 83       	std	Z+1, r24	; 0x01
    30c0:	9d 96       	adiw	r26, 0x2d	; 45
    30c2:	8c 91       	ld	r24, X
    30c4:	82 83       	std	Z+2, r24	; 0x02
    30c6:	08 95       	ret

000030c8 <_ZN9MD_TCS23017RGBTransformationEv>:
    30c8:	4f 92       	push	r4
    30ca:	5f 92       	push	r5
    30cc:	6f 92       	push	r6
    30ce:	7f 92       	push	r7
    30d0:	8f 92       	push	r8
    30d2:	9f 92       	push	r9
    30d4:	af 92       	push	r10
    30d6:	bf 92       	push	r11
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	8c 01       	movw	r16, r24
    30e8:	09 5f       	subi	r16, 0xF9	; 249
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	ec 01       	movw	r28, r24
    30ee:	7c 01       	movw	r14, r24
    30f0:	83 e1       	ldi	r24, 0x13	; 19
    30f2:	e8 0e       	add	r14, r24
    30f4:	f1 1c       	adc	r15, r1
    30f6:	dd 24       	eor	r13, r13
    30f8:	da 94       	dec	r13
    30fa:	f8 01       	movw	r30, r16
    30fc:	d8 01       	movw	r26, r16
    30fe:	8d 90       	ld	r8, X+
    3100:	9d 90       	ld	r9, X+
    3102:	ad 90       	ld	r10, X+
    3104:	bd 90       	ld	r11, X+
    3106:	8d 01       	movw	r16, r26
    3108:	80 8d       	ldd	r24, Z+24	; 0x18
    310a:	91 8d       	ldd	r25, Z+25	; 0x19
    310c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    310e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3110:	9c 01       	movw	r18, r24
    3112:	ad 01       	movw	r20, r26
    3114:	28 19       	sub	r18, r8
    3116:	39 09       	sbc	r19, r9
    3118:	4a 09       	sbc	r20, r10
    311a:	5b 09       	sbc	r21, r11
    311c:	af ef       	ldi	r26, 0xFF	; 255
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	0e 94 bd 1c 	call	0x397a	; 0x397a <__muluhisi3>
    3124:	f8 01       	movw	r30, r16
    3126:	40 84       	ldd	r4, Z+8	; 0x08
    3128:	51 84       	ldd	r5, Z+9	; 0x09
    312a:	62 84       	ldd	r6, Z+10	; 0x0a
    312c:	73 84       	ldd	r7, Z+11	; 0x0b
    312e:	a3 01       	movw	r20, r6
    3130:	92 01       	movw	r18, r4
    3132:	28 19       	sub	r18, r8
    3134:	39 09       	sbc	r19, r9
    3136:	4a 09       	sbc	r20, r10
    3138:	5b 09       	sbc	r21, r11
    313a:	0e 94 98 1c 	call	0x3930	; 0x3930 <__divmodsi4>
    313e:	57 ff       	sbrs	r21, 7
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    3142:	1b a6       	std	Y+43, r1	; 0x2b
    3144:	09 c0       	rjmp	.+18     	; 0x3158 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3146:	2f 3f       	cpi	r18, 0xFF	; 255
    3148:	31 05       	cpc	r19, r1
    314a:	41 05       	cpc	r20, r1
    314c:	51 05       	cpc	r21, r1
    314e:	19 f0       	breq	.+6      	; 0x3156 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3150:	14 f0       	brlt	.+4      	; 0x3156 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3152:	db a6       	std	Y+43, r13	; 0x2b
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3156:	2b a7       	std	Y+43, r18	; 0x2b
    3158:	21 96       	adiw	r28, 0x01	; 1
    315a:	0e 15       	cp	r16, r14
    315c:	1f 05       	cpc	r17, r15
    315e:	69 f6       	brne	.-102    	; 0x30fa <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	bf 90       	pop	r11
    3170:	af 90       	pop	r10
    3172:	9f 90       	pop	r9
    3174:	8f 90       	pop	r8
    3176:	7f 90       	pop	r7
    3178:	6f 90       	pop	r6
    317a:	5f 90       	pop	r5
    317c:	4f 90       	pop	r4
    317e:	08 95       	ret

00003180 <_ZN9MD_TCS2307readFSMEh>:
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	8c 01       	movw	r16, r24
    318a:	c6 2f       	mov	r28, r22
    318c:	61 30       	cpi	r22, 0x01	; 1
    318e:	49 f0       	breq	.+18     	; 0x31a2 <_ZN9MD_TCS2307readFSMEh+0x22>
    3190:	18 f0       	brcs	.+6      	; 0x3198 <_ZN9MD_TCS2307readFSMEh+0x18>
    3192:	62 30       	cpi	r22, 0x02	; 2
    3194:	d9 f0       	breq	.+54     	; 0x31cc <_ZN9MD_TCS2307readFSMEh+0x4c>
    3196:	4c c0       	rjmp	.+152    	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3198:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    319c:	61 e0       	ldi	r22, 0x01	; 1
    319e:	0e 94 43 18 	call	0x3086	; 0x3086 <_ZN9MD_TCS2309setEnableEb>
    31a2:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	e1 5c       	subi	r30, 0xC1	; 193
    31aa:	fd 4f       	sbci	r31, 0xFD	; 253
    31ac:	60 81       	ld	r22, Z
    31ae:	c8 01       	movw	r24, r16
    31b0:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_ZN9MD_TCS2309setFilterEh>
    31b4:	f8 01       	movw	r30, r16
    31b6:	65 81       	ldd	r22, Z+5	; 0x05
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	88 ee       	ldi	r24, 0xE8	; 232
    31bc:	93 e0       	ldi	r25, 0x03	; 3
    31be:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__divmodhi4>
    31c2:	cb 01       	movw	r24, r22
    31c4:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN14FreqCountClass5beginEj>
    31c8:	c2 e0       	ldi	r28, 0x02	; 2
    31ca:	32 c0       	rjmp	.+100    	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    31cc:	0e 94 bf 1b 	call	0x377e	; 0x377e <_ZN14FreqCountClass9availableEv>
    31d0:	88 23       	and	r24, r24
    31d2:	71 f1       	breq	.+92     	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    31d4:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	8e 0f       	add	r24, r30
    31dc:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	e1 5c       	subi	r30, 0xC1	; 193
    31e4:	fd 4f       	sbci	r31, 0xFD	; 253
    31e6:	c0 81       	ld	r28, Z
    31e8:	d0 e0       	ldi	r29, 0x00	; 0
    31ea:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN14FreqCountClass4readEv>
    31ee:	9b 01       	movw	r18, r22
    31f0:	ac 01       	movw	r20, r24
    31f2:	cc 0f       	add	r28, r28
    31f4:	dd 1f       	adc	r29, r29
    31f6:	cc 0f       	add	r28, r28
    31f8:	dd 1f       	adc	r29, r29
    31fa:	c0 0f       	add	r28, r16
    31fc:	d1 1f       	adc	r29, r17
    31fe:	f8 01       	movw	r30, r16
    3200:	a5 81       	ldd	r26, Z+5	; 0x05
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	0e 94 bd 1c 	call	0x397a	; 0x397a <__muluhisi3>
    3208:	6f 8f       	std	Y+31, r22	; 0x1f
    320a:	78 a3       	std	Y+32, r23	; 0x20
    320c:	89 a3       	std	Y+33, r24	; 0x21
    320e:	9a a3       	std	Y+34, r25	; 0x22
    3210:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3214:	83 30       	cpi	r24, 0x03	; 3
    3216:	58 f0       	brcs	.+22     	; 0x322e <_ZN9MD_TCS2307readFSMEh+0xae>
    3218:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN14FreqCountClass3endEv>
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	c8 01       	movw	r24, r16
    3220:	0e 94 43 18 	call	0x3086	; 0x3086 <_ZN9MD_TCS2309setEnableEb>
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN9MD_TCS23017RGBTransformationEv>
    322a:	c0 e0       	ldi	r28, 0x00	; 0
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    322e:	c1 e0       	ldi	r28, 0x01	; 1
    3230:	8c 2f       	mov	r24, r28
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <_ZN9MD_TCS2304readEv>:
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	ec 01       	movw	r28, r24
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN9MD_TCS2307readFSMEh>
    3248:	8e a7       	std	Y+46, r24	; 0x2e
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	08 95       	ret

00003250 <_ZN9MD_TCS2309availableEv>:
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	ec 01       	movw	r28, r24
    3256:	6e a5       	ldd	r22, Y+46	; 0x2e
    3258:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN9MD_TCS2307readFSMEh>
    325c:	98 2f       	mov	r25, r24
    325e:	8e a7       	std	Y+46, r24	; 0x2e
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	91 11       	cpse	r25, r1
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	08 95       	ret

0000326c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    326c:	08 95       	ret

0000326e <pvPortMalloc>:
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	ec 01       	movw	r28, r24
    3274:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    3278:	ce 01       	movw	r24, r28
    327a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <malloc>
    327e:	ec 01       	movw	r28, r24
    3280:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    3284:	20 97       	sbiw	r28, 0x00	; 0
    3286:	11 f4       	brne	.+4      	; 0x328c <pvPortMalloc+0x1e>
    3288:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <vApplicationMallocFailedHook>
    328c:	ce 01       	movw	r24, r28
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	08 95       	ret

00003294 <vPortFree>:
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	51 f0       	breq	.+20     	; 0x32b0 <vPortFree+0x1c>
    329c:	ec 01       	movw	r28, r24
    329e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    32a2:	ce 01       	movw	r24, r28
    32a4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <free>
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	0c 94 95 13 	jmp	0x272a	; 0x272a <xTaskResumeAll>
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <vListInitialise>:
    32b6:	fc 01       	movw	r30, r24
    32b8:	03 96       	adiw	r24, 0x03	; 3
    32ba:	92 83       	std	Z+2, r25	; 0x02
    32bc:	81 83       	std	Z+1, r24	; 0x01
    32be:	2f ef       	ldi	r18, 0xFF	; 255
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	34 83       	std	Z+4, r19	; 0x04
    32c4:	23 83       	std	Z+3, r18	; 0x03
    32c6:	96 83       	std	Z+6, r25	; 0x06
    32c8:	85 83       	std	Z+5, r24	; 0x05
    32ca:	90 87       	std	Z+8, r25	; 0x08
    32cc:	87 83       	std	Z+7, r24	; 0x07
    32ce:	10 82       	st	Z, r1
    32d0:	08 95       	ret

000032d2 <vListInitialiseItem>:
    32d2:	fc 01       	movw	r30, r24
    32d4:	11 86       	std	Z+9, r1	; 0x09
    32d6:	10 86       	std	Z+8, r1	; 0x08
    32d8:	08 95       	ret

000032da <vListInsertEnd>:
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	9c 01       	movw	r18, r24
    32e0:	fb 01       	movw	r30, r22
    32e2:	dc 01       	movw	r26, r24
    32e4:	11 96       	adiw	r26, 0x01	; 1
    32e6:	cd 91       	ld	r28, X+
    32e8:	dc 91       	ld	r29, X
    32ea:	12 97       	sbiw	r26, 0x02	; 2
    32ec:	d3 83       	std	Z+3, r29	; 0x03
    32ee:	c2 83       	std	Z+2, r28	; 0x02
    32f0:	8c 81       	ldd	r24, Y+4	; 0x04
    32f2:	9d 81       	ldd	r25, Y+5	; 0x05
    32f4:	95 83       	std	Z+5, r25	; 0x05
    32f6:	84 83       	std	Z+4, r24	; 0x04
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	9d 81       	ldd	r25, Y+5	; 0x05
    32fc:	dc 01       	movw	r26, r24
    32fe:	13 96       	adiw	r26, 0x03	; 3
    3300:	7c 93       	st	X, r23
    3302:	6e 93       	st	-X, r22
    3304:	12 97       	sbiw	r26, 0x02	; 2
    3306:	7d 83       	std	Y+5, r23	; 0x05
    3308:	6c 83       	std	Y+4, r22	; 0x04
    330a:	31 87       	std	Z+9, r19	; 0x09
    330c:	20 87       	std	Z+8, r18	; 0x08
    330e:	f9 01       	movw	r30, r18
    3310:	80 81       	ld	r24, Z
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 83       	st	Z, r24
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	08 95       	ret

0000331c <vListInsert>:
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	8c 01       	movw	r16, r24
    3326:	fb 01       	movw	r30, r22
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	8f 3f       	cpi	r24, 0xFF	; 255
    332e:	2f ef       	ldi	r18, 0xFF	; 255
    3330:	92 07       	cpc	r25, r18
    3332:	21 f4       	brne	.+8      	; 0x333c <vListInsert+0x20>
    3334:	e8 01       	movw	r28, r16
    3336:	af 81       	ldd	r26, Y+7	; 0x07
    3338:	b8 85       	ldd	r27, Y+8	; 0x08
    333a:	0e c0       	rjmp	.+28     	; 0x3358 <vListInsert+0x3c>
    333c:	d8 01       	movw	r26, r16
    333e:	13 96       	adiw	r26, 0x03	; 3
    3340:	12 96       	adiw	r26, 0x02	; 2
    3342:	2d 91       	ld	r18, X+
    3344:	3c 91       	ld	r19, X
    3346:	13 97       	sbiw	r26, 0x03	; 3
    3348:	e9 01       	movw	r28, r18
    334a:	48 81       	ld	r20, Y
    334c:	59 81       	ldd	r21, Y+1	; 0x01
    334e:	84 17       	cp	r24, r20
    3350:	95 07       	cpc	r25, r21
    3352:	10 f0       	brcs	.+4      	; 0x3358 <vListInsert+0x3c>
    3354:	d9 01       	movw	r26, r18
    3356:	f4 cf       	rjmp	.-24     	; 0x3340 <vListInsert+0x24>
    3358:	12 96       	adiw	r26, 0x02	; 2
    335a:	8d 91       	ld	r24, X+
    335c:	9c 91       	ld	r25, X
    335e:	13 97       	sbiw	r26, 0x03	; 3
    3360:	93 83       	std	Z+3, r25	; 0x03
    3362:	82 83       	std	Z+2, r24	; 0x02
    3364:	ec 01       	movw	r28, r24
    3366:	fd 83       	std	Y+5, r31	; 0x05
    3368:	ec 83       	std	Y+4, r30	; 0x04
    336a:	b5 83       	std	Z+5, r27	; 0x05
    336c:	a4 83       	std	Z+4, r26	; 0x04
    336e:	13 96       	adiw	r26, 0x03	; 3
    3370:	fc 93       	st	X, r31
    3372:	ee 93       	st	-X, r30
    3374:	12 97       	sbiw	r26, 0x02	; 2
    3376:	11 87       	std	Z+9, r17	; 0x09
    3378:	00 87       	std	Z+8, r16	; 0x08
    337a:	f8 01       	movw	r30, r16
    337c:	80 81       	ld	r24, Z
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	80 83       	st	Z, r24
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	08 95       	ret

0000338c <uxListRemove>:
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	fc 01       	movw	r30, r24
    3392:	a0 85       	ldd	r26, Z+8	; 0x08
    3394:	b1 85       	ldd	r27, Z+9	; 0x09
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	24 81       	ldd	r18, Z+4	; 0x04
    339c:	35 81       	ldd	r19, Z+5	; 0x05
    339e:	ec 01       	movw	r28, r24
    33a0:	3d 83       	std	Y+5, r19	; 0x05
    33a2:	2c 83       	std	Y+4, r18	; 0x04
    33a4:	c4 81       	ldd	r28, Z+4	; 0x04
    33a6:	d5 81       	ldd	r29, Z+5	; 0x05
    33a8:	9b 83       	std	Y+3, r25	; 0x03
    33aa:	8a 83       	std	Y+2, r24	; 0x02
    33ac:	11 96       	adiw	r26, 0x01	; 1
    33ae:	8d 91       	ld	r24, X+
    33b0:	9c 91       	ld	r25, X
    33b2:	12 97       	sbiw	r26, 0x02	; 2
    33b4:	e8 17       	cp	r30, r24
    33b6:	f9 07       	cpc	r31, r25
    33b8:	21 f4       	brne	.+8      	; 0x33c2 <uxListRemove+0x36>
    33ba:	12 96       	adiw	r26, 0x02	; 2
    33bc:	dc 93       	st	X, r29
    33be:	ce 93       	st	-X, r28
    33c0:	11 97       	sbiw	r26, 0x01	; 1
    33c2:	11 86       	std	Z+9, r1	; 0x09
    33c4:	10 86       	std	Z+8, r1	; 0x08
    33c6:	8c 91       	ld	r24, X
    33c8:	81 50       	subi	r24, 0x01	; 1
    33ca:	8c 93       	st	X, r24
    33cc:	8c 91       	ld	r24, X
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	08 95       	ret

000033d4 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    33d4:	31 e1       	ldi	r19, 0x11	; 17
    33d6:	fc 01       	movw	r30, r24
    33d8:	30 83       	st	Z, r19
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	22 e2       	ldi	r18, 0x22	; 34
    33de:	20 83       	st	Z, r18
    33e0:	31 97       	sbiw	r30, 0x01	; 1
    33e2:	a3 e3       	ldi	r26, 0x33	; 51
    33e4:	a0 83       	st	Z, r26
    33e6:	31 97       	sbiw	r30, 0x01	; 1
    33e8:	60 83       	st	Z, r22
    33ea:	31 97       	sbiw	r30, 0x01	; 1
    33ec:	70 83       	st	Z, r23
    33ee:	31 97       	sbiw	r30, 0x01	; 1
    33f0:	10 82       	st	Z, r1
    33f2:	31 97       	sbiw	r30, 0x01	; 1
    33f4:	60 e8       	ldi	r22, 0x80	; 128
    33f6:	60 83       	st	Z, r22
    33f8:	31 97       	sbiw	r30, 0x01	; 1
    33fa:	10 82       	st	Z, r1
    33fc:	31 97       	sbiw	r30, 0x01	; 1
    33fe:	62 e0       	ldi	r22, 0x02	; 2
    3400:	60 83       	st	Z, r22
    3402:	31 97       	sbiw	r30, 0x01	; 1
    3404:	63 e0       	ldi	r22, 0x03	; 3
    3406:	60 83       	st	Z, r22
    3408:	31 97       	sbiw	r30, 0x01	; 1
    340a:	64 e0       	ldi	r22, 0x04	; 4
    340c:	60 83       	st	Z, r22
    340e:	31 97       	sbiw	r30, 0x01	; 1
    3410:	65 e0       	ldi	r22, 0x05	; 5
    3412:	60 83       	st	Z, r22
    3414:	31 97       	sbiw	r30, 0x01	; 1
    3416:	66 e0       	ldi	r22, 0x06	; 6
    3418:	60 83       	st	Z, r22
    341a:	31 97       	sbiw	r30, 0x01	; 1
    341c:	67 e0       	ldi	r22, 0x07	; 7
    341e:	60 83       	st	Z, r22
    3420:	31 97       	sbiw	r30, 0x01	; 1
    3422:	68 e0       	ldi	r22, 0x08	; 8
    3424:	60 83       	st	Z, r22
    3426:	31 97       	sbiw	r30, 0x01	; 1
    3428:	69 e0       	ldi	r22, 0x09	; 9
    342a:	60 83       	st	Z, r22
    342c:	31 97       	sbiw	r30, 0x01	; 1
    342e:	60 e1       	ldi	r22, 0x10	; 16
    3430:	60 83       	st	Z, r22
    3432:	31 97       	sbiw	r30, 0x01	; 1
    3434:	30 83       	st	Z, r19
    3436:	31 97       	sbiw	r30, 0x01	; 1
    3438:	32 e1       	ldi	r19, 0x12	; 18
    343a:	30 83       	st	Z, r19
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	33 e1       	ldi	r19, 0x13	; 19
    3440:	30 83       	st	Z, r19
    3442:	31 97       	sbiw	r30, 0x01	; 1
    3444:	34 e1       	ldi	r19, 0x14	; 20
    3446:	30 83       	st	Z, r19
    3448:	31 97       	sbiw	r30, 0x01	; 1
    344a:	35 e1       	ldi	r19, 0x15	; 21
    344c:	30 83       	st	Z, r19
    344e:	31 97       	sbiw	r30, 0x01	; 1
    3450:	36 e1       	ldi	r19, 0x16	; 22
    3452:	30 83       	st	Z, r19
    3454:	31 97       	sbiw	r30, 0x01	; 1
    3456:	37 e1       	ldi	r19, 0x17	; 23
    3458:	30 83       	st	Z, r19
    345a:	31 97       	sbiw	r30, 0x01	; 1
    345c:	38 e1       	ldi	r19, 0x18	; 24
    345e:	30 83       	st	Z, r19
    3460:	31 97       	sbiw	r30, 0x01	; 1
    3462:	39 e1       	ldi	r19, 0x19	; 25
    3464:	30 83       	st	Z, r19
    3466:	31 97       	sbiw	r30, 0x01	; 1
    3468:	30 e2       	ldi	r19, 0x20	; 32
    346a:	30 83       	st	Z, r19
    346c:	31 97       	sbiw	r30, 0x01	; 1
    346e:	31 e2       	ldi	r19, 0x21	; 33
    3470:	30 83       	st	Z, r19
    3472:	31 97       	sbiw	r30, 0x01	; 1
    3474:	20 83       	st	Z, r18
    3476:	31 97       	sbiw	r30, 0x01	; 1
    3478:	23 e2       	ldi	r18, 0x23	; 35
    347a:	20 83       	st	Z, r18
    347c:	31 97       	sbiw	r30, 0x01	; 1
    347e:	40 83       	st	Z, r20
    3480:	31 97       	sbiw	r30, 0x01	; 1
    3482:	50 83       	st	Z, r21
    3484:	31 97       	sbiw	r30, 0x01	; 1
    3486:	26 e2       	ldi	r18, 0x26	; 38
    3488:	20 83       	st	Z, r18
    348a:	31 97       	sbiw	r30, 0x01	; 1
    348c:	27 e2       	ldi	r18, 0x27	; 39
    348e:	20 83       	st	Z, r18
    3490:	31 97       	sbiw	r30, 0x01	; 1
    3492:	28 e2       	ldi	r18, 0x28	; 40
    3494:	20 83       	st	Z, r18
    3496:	31 97       	sbiw	r30, 0x01	; 1
    3498:	29 e2       	ldi	r18, 0x29	; 41
    349a:	20 83       	st	Z, r18
    349c:	31 97       	sbiw	r30, 0x01	; 1
    349e:	20 e3       	ldi	r18, 0x30	; 48
    34a0:	20 83       	st	Z, r18
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	21 e3       	ldi	r18, 0x31	; 49
    34a6:	20 83       	st	Z, r18
    34a8:	86 97       	sbiw	r24, 0x26	; 38
    34aa:	08 95       	ret

000034ac <xPortStartScheduler>:
    34ac:	a8 95       	wdr
    34ae:	90 ec       	ldi	r25, 0xC0	; 192
    34b0:	88 e1       	ldi	r24, 0x18	; 24
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	a8 95       	wdr
    34b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    34c2:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    34c6:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    34ca:	cd 91       	ld	r28, X+
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	dd 91       	ld	r29, X+
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	ff 91       	pop	r31
    34d4:	ef 91       	pop	r30
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	bf 91       	pop	r27
    34dc:	af 91       	pop	r26
    34de:	9f 91       	pop	r25
    34e0:	8f 91       	pop	r24
    34e2:	7f 91       	pop	r23
    34e4:	6f 91       	pop	r22
    34e6:	5f 91       	pop	r21
    34e8:	4f 91       	pop	r20
    34ea:	3f 91       	pop	r19
    34ec:	2f 91       	pop	r18
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	bf 90       	pop	r11
    34fc:	af 90       	pop	r10
    34fe:	9f 90       	pop	r9
    3500:	8f 90       	pop	r8
    3502:	7f 90       	pop	r7
    3504:	6f 90       	pop	r6
    3506:	5f 90       	pop	r5
    3508:	4f 90       	pop	r4
    350a:	3f 90       	pop	r3
    350c:	2f 90       	pop	r2
    350e:	1f 90       	pop	r1
    3510:	0f 90       	pop	r0
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	0f 90       	pop	r0
    3516:	08 95       	ret
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	08 95       	ret

0000351c <vPortYield>:
    351c:	0f 92       	push	r0
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	0f 92       	push	r0
    3524:	1f 92       	push	r1
    3526:	11 24       	eor	r1, r1
    3528:	2f 92       	push	r2
    352a:	3f 92       	push	r3
    352c:	4f 92       	push	r4
    352e:	5f 92       	push	r5
    3530:	6f 92       	push	r6
    3532:	7f 92       	push	r7
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	2f 93       	push	r18
    354a:	3f 93       	push	r19
    354c:	4f 93       	push	r20
    354e:	5f 93       	push	r21
    3550:	6f 93       	push	r22
    3552:	7f 93       	push	r23
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	af 93       	push	r26
    355a:	bf 93       	push	r27
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ef 93       	push	r30
    3562:	ff 93       	push	r31
    3564:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3568:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    356c:	0d b6       	in	r0, 0x3d	; 61
    356e:	0d 92       	st	X+, r0
    3570:	0e b6       	in	r0, 0x3e	; 62
    3572:	0d 92       	st	X+, r0
    3574:	0e 94 3c 14 	call	0x2878	; 0x2878 <vTaskSwitchContext>
    3578:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    357c:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3580:	cd 91       	ld	r28, X+
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	dd 91       	ld	r29, X+
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	ff 91       	pop	r31
    358a:	ef 91       	pop	r30
    358c:	df 91       	pop	r29
    358e:	cf 91       	pop	r28
    3590:	bf 91       	pop	r27
    3592:	af 91       	pop	r26
    3594:	9f 91       	pop	r25
    3596:	8f 91       	pop	r24
    3598:	7f 91       	pop	r23
    359a:	6f 91       	pop	r22
    359c:	5f 91       	pop	r21
    359e:	4f 91       	pop	r20
    35a0:	3f 91       	pop	r19
    35a2:	2f 91       	pop	r18
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	df 90       	pop	r13
    35ae:	cf 90       	pop	r12
    35b0:	bf 90       	pop	r11
    35b2:	af 90       	pop	r10
    35b4:	9f 90       	pop	r9
    35b6:	8f 90       	pop	r8
    35b8:	7f 90       	pop	r7
    35ba:	6f 90       	pop	r6
    35bc:	5f 90       	pop	r5
    35be:	4f 90       	pop	r4
    35c0:	3f 90       	pop	r3
    35c2:	2f 90       	pop	r2
    35c4:	1f 90       	pop	r1
    35c6:	0f 90       	pop	r0
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	0f 90       	pop	r0
    35cc:	08 95       	ret

000035ce <vPortYieldFromTick>:
    35ce:	0f 92       	push	r0
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	0f 92       	push	r0
    35d6:	1f 92       	push	r1
    35d8:	11 24       	eor	r1, r1
    35da:	2f 92       	push	r2
    35dc:	3f 92       	push	r3
    35de:	4f 92       	push	r4
    35e0:	5f 92       	push	r5
    35e2:	6f 92       	push	r6
    35e4:	7f 92       	push	r7
    35e6:	8f 92       	push	r8
    35e8:	9f 92       	push	r9
    35ea:	af 92       	push	r10
    35ec:	bf 92       	push	r11
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	2f 93       	push	r18
    35fc:	3f 93       	push	r19
    35fe:	4f 93       	push	r20
    3600:	5f 93       	push	r21
    3602:	6f 93       	push	r22
    3604:	7f 93       	push	r23
    3606:	8f 93       	push	r24
    3608:	9f 93       	push	r25
    360a:	af 93       	push	r26
    360c:	bf 93       	push	r27
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	ef 93       	push	r30
    3614:	ff 93       	push	r31
    3616:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    361a:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    361e:	0d b6       	in	r0, 0x3d	; 61
    3620:	0d 92       	st	X+, r0
    3622:	0e b6       	in	r0, 0x3e	; 62
    3624:	0d 92       	st	X+, r0
    3626:	13 be       	out	0x33, r1	; 51
    3628:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <xTaskIncrementTick>
    362c:	81 11       	cpse	r24, r1
    362e:	0e 94 3c 14 	call	0x2878	; 0x2878 <vTaskSwitchContext>
    3632:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3636:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    363a:	cd 91       	ld	r28, X+
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	dd 91       	ld	r29, X+
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	bf 91       	pop	r27
    364c:	af 91       	pop	r26
    364e:	9f 91       	pop	r25
    3650:	8f 91       	pop	r24
    3652:	7f 91       	pop	r23
    3654:	6f 91       	pop	r22
    3656:	5f 91       	pop	r21
    3658:	4f 91       	pop	r20
    365a:	3f 91       	pop	r19
    365c:	2f 91       	pop	r18
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	df 90       	pop	r13
    3668:	cf 90       	pop	r12
    366a:	bf 90       	pop	r11
    366c:	af 90       	pop	r10
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	7f 90       	pop	r7
    3674:	6f 90       	pop	r6
    3676:	5f 90       	pop	r5
    3678:	4f 90       	pop	r4
    367a:	3f 90       	pop	r3
    367c:	2f 90       	pop	r2
    367e:	1f 90       	pop	r1
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	08 95       	ret

00003688 <__vector_6>:
    3688:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <vPortYieldFromTick>
    368c:	18 95       	reti

0000368e <_ZN14FreqCountClass5beginEj>:
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	09 f4       	brne	.+2      	; 0x3694 <_ZN14FreqCountClass5beginEj+0x6>
    3692:	74 c0       	rjmp	.+232    	; 0x377c <L_130_loop+0xc>
    3694:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    3698:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
    369c:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZL9count_msw+0x1>
    36a0:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL9count_msw>
    36a4:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZL10count_prev>
    36a8:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZL10count_prev+0x1>
    36ac:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZL10count_prev+0x2>
    36b0:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10count_prev+0x3>
    36b4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>
    36b8:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36bc:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <_ZL10saveTCCR1A>
    36c0:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    36c4:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <_ZL10saveTCCR1B>
    36c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    36cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    36d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    36d8:	21 e0       	ldi	r18, 0x01	; 1
    36da:	26 bb       	out	0x16, r18	; 22
    36dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    36e0:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36e4:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <_ZL10saveTCCR2A>
    36e8:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    36ec:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <_ZL10saveTCCR2B>
    36f0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    36f4:	22 e0       	ldi	r18, 0x02	; 2
    36f6:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36fa:	9c 01       	movw	r18, r24
    36fc:	27 70       	andi	r18, 0x07	; 7
    36fe:	33 27       	eor	r19, r19
    3700:	23 2b       	or	r18, r19
    3702:	51 f4       	brne	.+20     	; 0x3718 <_ZN14FreqCountClass5beginEj+0x8a>
    3704:	43 e0       	ldi	r20, 0x03	; 3
    3706:	96 95       	lsr	r25
    3708:	87 95       	ror	r24
    370a:	4a 95       	dec	r20
    370c:	e1 f7       	brne	.-8      	; 0x3706 <_ZN14FreqCountClass5beginEj+0x78>
    370e:	2c e7       	ldi	r18, 0x7C	; 124
    3710:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    3714:	27 e0       	ldi	r18, 0x07	; 7
    3716:	18 c0       	rjmp	.+48     	; 0x3748 <_ZN14FreqCountClass5beginEj+0xba>
    3718:	9c 01       	movw	r18, r24
    371a:	23 70       	andi	r18, 0x03	; 3
    371c:	33 27       	eor	r19, r19
    371e:	23 2b       	or	r18, r19
    3720:	31 f4       	brne	.+12     	; 0x372e <_ZN14FreqCountClass5beginEj+0xa0>
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	96 95       	lsr	r25
    3728:	87 95       	ror	r24
    372a:	29 ef       	ldi	r18, 0xF9	; 249
    372c:	05 c0       	rjmp	.+10     	; 0x3738 <_ZN14FreqCountClass5beginEj+0xaa>
    372e:	80 fd       	sbrc	r24, 0
    3730:	07 c0       	rjmp	.+14     	; 0x3740 <_ZN14FreqCountClass5beginEj+0xb2>
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	2c e7       	ldi	r18, 0x7C	; 124
    3738:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    373c:	26 e0       	ldi	r18, 0x06	; 6
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <_ZN14FreqCountClass5beginEj+0xba>
    3740:	2c e7       	ldi	r18, 0x7C	; 124
    3742:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    3746:	25 e0       	ldi	r18, 0x05	; 5
    3748:	20 93 ac 04 	sts	0x04AC, r18	; 0x8004ac <_ZL11startTCCR2B>
    374c:	22 e0       	ldi	r18, 0x02	; 2
    374e:	27 bb       	out	0x17, r18	; 23
    3750:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    3754:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZL11gate_length+0x1>
    3758:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZL11gate_length>
    375c:	9f b7       	in	r25, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	23 bd       	out	0x23, r18	; 35
    3762:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <_ZL11startTCCR2B>
    3766:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    376a:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    376e:	8b e0       	ldi	r24, 0x0B	; 11

00003770 <L_130_loop>:
    3770:	81 50       	subi	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <L_130_loop>
    3774:	87 e0       	ldi	r24, 0x07	; 7
    3776:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    377a:	9f bf       	out	0x3f, r25	; 63
    377c:	08 95       	ret

0000377e <_ZN14FreqCountClass9availableEv>:
    377e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZL11count_ready>
    3782:	08 95       	ret

00003784 <_ZN14FreqCountClass4readEv>:
    3784:	2f b7       	in	r18, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <_ZL12count_output>
    378c:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <_ZL12count_output+0x1>
    3790:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZL12count_output+0x2>
    3794:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <_ZL12count_output+0x3>
    3798:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>
    379c:	2f bf       	out	0x3f, r18	; 63
    379e:	08 95       	ret

000037a0 <_ZN14FreqCountClass3endEv>:
    37a0:	e1 eb       	ldi	r30, 0xB1	; 177
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	10 82       	st	Z, r1
    37a6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    37aa:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZL10saveTCCR2A>
    37ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    37b2:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL10saveTCCR2B>
    37b6:	80 83       	st	Z, r24
    37b8:	e1 e8       	ldi	r30, 0x81	; 129
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	10 82       	st	Z, r1
    37be:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZL10saveTCCR1A>
    37c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37c6:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZL10saveTCCR1B>
    37ca:	80 83       	st	Z, r24
    37cc:	08 95       	ret

000037ce <__vector_7>:
    37ce:	1f 92       	push	r1
    37d0:	0f 92       	push	r0
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	0f 92       	push	r0
    37d6:	11 24       	eor	r1, r1
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	2f 93       	push	r18
    37de:	3f 93       	push	r19
    37e0:	4f 93       	push	r20
    37e2:	5f 93       	push	r21
    37e4:	6f 93       	push	r22
    37e6:	7f 93       	push	r23
    37e8:	8f 93       	push	r24
    37ea:	9f 93       	push	r25
    37ec:	af 93       	push	r26
    37ee:	bf 93       	push	r27
    37f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    37f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    37f8:	b0 9b       	sbis	0x16, 0	; 22
    37fa:	0b c0       	rjmp	.+22     	; 0x3812 <__vector_7+0x44>
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	86 bb       	out	0x16, r24	; 22
    3800:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    3804:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <_ZL9count_msw+0x1>
    380e:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_ZL9count_msw>
    3812:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZL10gate_index>
    3816:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZL10gate_index+0x1>
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <_ZL11gate_length>
    3820:	50 91 a0 04 	lds	r21, 0x04A0	; 0x8004a0 <_ZL11gate_length+0x1>
    3824:	84 17       	cp	r24, r20
    3826:	95 07       	cpc	r25, r21
    3828:	98 f1       	brcs	.+102    	; 0x3890 <__vector_7+0xc2>
    382a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    382e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
    3832:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    3836:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    383a:	a0 e0       	ldi	r26, 0x00	; 0
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	dc 01       	movw	r26, r24
    3840:	99 27       	eor	r25, r25
    3842:	88 27       	eor	r24, r24
    3844:	82 0f       	add	r24, r18
    3846:	93 1f       	adc	r25, r19
    3848:	a1 1d       	adc	r26, r1
    384a:	b1 1d       	adc	r27, r1
    384c:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <_ZL10count_prev>
    3850:	50 91 a7 04 	lds	r21, 0x04A7	; 0x8004a7 <_ZL10count_prev+0x1>
    3854:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <_ZL10count_prev+0x2>
    3858:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <_ZL10count_prev+0x3>
    385c:	8c 01       	movw	r16, r24
    385e:	9d 01       	movw	r18, r26
    3860:	04 1b       	sub	r16, r20
    3862:	15 0b       	sbc	r17, r21
    3864:	26 0b       	sbc	r18, r22
    3866:	37 0b       	sbc	r19, r23
    3868:	00 93 a2 04 	sts	0x04A2, r16	; 0x8004a2 <_ZL12count_output>
    386c:	10 93 a3 04 	sts	0x04A3, r17	; 0x8004a3 <_ZL12count_output+0x1>
    3870:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <_ZL12count_output+0x2>
    3874:	30 93 a5 04 	sts	0x04A5, r19	; 0x8004a5 <_ZL12count_output+0x3>
    3878:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_ZL10count_prev>
    387c:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <_ZL10count_prev+0x1>
    3880:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <_ZL10count_prev+0x2>
    3884:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <_ZL10count_prev+0x3>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZL11count_ready>
    388e:	04 c0       	rjmp	.+8      	; 0x3898 <__vector_7+0xca>
    3890:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZL10gate_index+0x1>
    3894:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZL10gate_index>
    3898:	bf 91       	pop	r27
    389a:	af 91       	pop	r26
    389c:	9f 91       	pop	r25
    389e:	8f 91       	pop	r24
    38a0:	7f 91       	pop	r23
    38a2:	6f 91       	pop	r22
    38a4:	5f 91       	pop	r21
    38a6:	4f 91       	pop	r20
    38a8:	3f 91       	pop	r19
    38aa:	2f 91       	pop	r18
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f 90       	pop	r0
    38b6:	1f 90       	pop	r1
    38b8:	18 95       	reti

000038ba <__unordsf2>:
    38ba:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
    38be:	88 0b       	sbc	r24, r24
    38c0:	99 0b       	sbc	r25, r25
    38c2:	08 95       	ret

000038c4 <__divmodhi4>:
    38c4:	97 fb       	bst	r25, 7
    38c6:	07 2e       	mov	r0, r23
    38c8:	16 f4       	brtc	.+4      	; 0x38ce <__divmodhi4+0xa>
    38ca:	00 94       	com	r0
    38cc:	07 d0       	rcall	.+14     	; 0x38dc <__divmodhi4_neg1>
    38ce:	77 fd       	sbrc	r23, 7
    38d0:	09 d0       	rcall	.+18     	; 0x38e4 <__divmodhi4_neg2>
    38d2:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    38d6:	07 fc       	sbrc	r0, 7
    38d8:	05 d0       	rcall	.+10     	; 0x38e4 <__divmodhi4_neg2>
    38da:	3e f4       	brtc	.+14     	; 0x38ea <__divmodhi4_exit>

000038dc <__divmodhi4_neg1>:
    38dc:	90 95       	com	r25
    38de:	81 95       	neg	r24
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	08 95       	ret

000038e4 <__divmodhi4_neg2>:
    38e4:	70 95       	com	r23
    38e6:	61 95       	neg	r22
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255

000038ea <__divmodhi4_exit>:
    38ea:	08 95       	ret

000038ec <__udivmodsi4>:
    38ec:	a1 e2       	ldi	r26, 0x21	; 33
    38ee:	1a 2e       	mov	r1, r26
    38f0:	aa 1b       	sub	r26, r26
    38f2:	bb 1b       	sub	r27, r27
    38f4:	fd 01       	movw	r30, r26
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <__udivmodsi4_ep>

000038f8 <__udivmodsi4_loop>:
    38f8:	aa 1f       	adc	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	ee 1f       	adc	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	a2 17       	cp	r26, r18
    3902:	b3 07       	cpc	r27, r19
    3904:	e4 07       	cpc	r30, r20
    3906:	f5 07       	cpc	r31, r21
    3908:	20 f0       	brcs	.+8      	; 0x3912 <__udivmodsi4_ep>
    390a:	a2 1b       	sub	r26, r18
    390c:	b3 0b       	sbc	r27, r19
    390e:	e4 0b       	sbc	r30, r20
    3910:	f5 0b       	sbc	r31, r21

00003912 <__udivmodsi4_ep>:
    3912:	66 1f       	adc	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	1a 94       	dec	r1
    391c:	69 f7       	brne	.-38     	; 0x38f8 <__udivmodsi4_loop>
    391e:	60 95       	com	r22
    3920:	70 95       	com	r23
    3922:	80 95       	com	r24
    3924:	90 95       	com	r25
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	bd 01       	movw	r22, r26
    392c:	cf 01       	movw	r24, r30
    392e:	08 95       	ret

00003930 <__divmodsi4>:
    3930:	05 2e       	mov	r0, r21
    3932:	97 fb       	bst	r25, 7
    3934:	1e f4       	brtc	.+6      	; 0x393c <__divmodsi4+0xc>
    3936:	00 94       	com	r0
    3938:	0e 94 af 1c 	call	0x395e	; 0x395e <__negsi2>
    393c:	57 fd       	sbrc	r21, 7
    393e:	07 d0       	rcall	.+14     	; 0x394e <__divmodsi4_neg2>
    3940:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    3944:	07 fc       	sbrc	r0, 7
    3946:	03 d0       	rcall	.+6      	; 0x394e <__divmodsi4_neg2>
    3948:	4e f4       	brtc	.+18     	; 0x395c <__divmodsi4_exit>
    394a:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__negsi2>

0000394e <__divmodsi4_neg2>:
    394e:	50 95       	com	r21
    3950:	40 95       	com	r20
    3952:	30 95       	com	r19
    3954:	21 95       	neg	r18
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	4f 4f       	sbci	r20, 0xFF	; 255
    395a:	5f 4f       	sbci	r21, 0xFF	; 255

0000395c <__divmodsi4_exit>:
    395c:	08 95       	ret

0000395e <__negsi2>:
    395e:	90 95       	com	r25
    3960:	80 95       	com	r24
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	8f 4f       	sbci	r24, 0xFF	; 255
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	08 95       	ret

0000396e <__tablejump2__>:
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	05 90       	lpm	r0, Z+
    3974:	f4 91       	lpm	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	09 94       	ijmp

0000397a <__muluhisi3>:
    397a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__umulhisi3>
    397e:	a5 9f       	mul	r26, r21
    3980:	90 0d       	add	r25, r0
    3982:	b4 9f       	mul	r27, r20
    3984:	90 0d       	add	r25, r0
    3986:	a4 9f       	mul	r26, r20
    3988:	80 0d       	add	r24, r0
    398a:	91 1d       	adc	r25, r1
    398c:	11 24       	eor	r1, r1
    398e:	08 95       	ret

00003990 <__udivmodhi4>:
    3990:	aa 1b       	sub	r26, r26
    3992:	bb 1b       	sub	r27, r27
    3994:	51 e1       	ldi	r21, 0x11	; 17
    3996:	07 c0       	rjmp	.+14     	; 0x39a6 <__udivmodhi4_ep>

00003998 <__udivmodhi4_loop>:
    3998:	aa 1f       	adc	r26, r26
    399a:	bb 1f       	adc	r27, r27
    399c:	a6 17       	cp	r26, r22
    399e:	b7 07       	cpc	r27, r23
    39a0:	10 f0       	brcs	.+4      	; 0x39a6 <__udivmodhi4_ep>
    39a2:	a6 1b       	sub	r26, r22
    39a4:	b7 0b       	sbc	r27, r23

000039a6 <__udivmodhi4_ep>:
    39a6:	88 1f       	adc	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	5a 95       	dec	r21
    39ac:	a9 f7       	brne	.-22     	; 0x3998 <__udivmodhi4_loop>
    39ae:	80 95       	com	r24
    39b0:	90 95       	com	r25
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	08 95       	ret

000039b8 <__umulhisi3>:
    39b8:	a2 9f       	mul	r26, r18
    39ba:	b0 01       	movw	r22, r0
    39bc:	b3 9f       	mul	r27, r19
    39be:	c0 01       	movw	r24, r0
    39c0:	a3 9f       	mul	r26, r19
    39c2:	70 0d       	add	r23, r0
    39c4:	81 1d       	adc	r24, r1
    39c6:	11 24       	eor	r1, r1
    39c8:	91 1d       	adc	r25, r1
    39ca:	b2 9f       	mul	r27, r18
    39cc:	70 0d       	add	r23, r0
    39ce:	81 1d       	adc	r24, r1
    39d0:	11 24       	eor	r1, r1
    39d2:	91 1d       	adc	r25, r1
    39d4:	08 95       	ret

000039d6 <malloc>:
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	82 30       	cpi	r24, 0x02	; 2
    39e0:	91 05       	cpc	r25, r1
    39e2:	10 f4       	brcc	.+4      	; 0x39e8 <malloc+0x12>
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <__flp>
    39ec:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <__flp+0x1>
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	a0 e0       	ldi	r26, 0x00	; 0
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	30 97       	sbiw	r30, 0x00	; 0
    39fa:	19 f1       	breq	.+70     	; 0x3a42 <malloc+0x6c>
    39fc:	40 81       	ld	r20, Z
    39fe:	51 81       	ldd	r21, Z+1	; 0x01
    3a00:	02 81       	ldd	r16, Z+2	; 0x02
    3a02:	13 81       	ldd	r17, Z+3	; 0x03
    3a04:	48 17       	cp	r20, r24
    3a06:	59 07       	cpc	r21, r25
    3a08:	c8 f0       	brcs	.+50     	; 0x3a3c <malloc+0x66>
    3a0a:	84 17       	cp	r24, r20
    3a0c:	95 07       	cpc	r25, r21
    3a0e:	69 f4       	brne	.+26     	; 0x3a2a <malloc+0x54>
    3a10:	10 97       	sbiw	r26, 0x00	; 0
    3a12:	31 f0       	breq	.+12     	; 0x3a20 <malloc+0x4a>
    3a14:	12 96       	adiw	r26, 0x02	; 2
    3a16:	0c 93       	st	X, r16
    3a18:	12 97       	sbiw	r26, 0x02	; 2
    3a1a:	13 96       	adiw	r26, 0x03	; 3
    3a1c:	1c 93       	st	X, r17
    3a1e:	27 c0       	rjmp	.+78     	; 0x3a6e <malloc+0x98>
    3a20:	00 93 b3 04 	sts	0x04B3, r16	; 0x8004b3 <__flp>
    3a24:	10 93 b4 04 	sts	0x04B4, r17	; 0x8004b4 <__flp+0x1>
    3a28:	22 c0       	rjmp	.+68     	; 0x3a6e <malloc+0x98>
    3a2a:	21 15       	cp	r18, r1
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <malloc+0x60>
    3a30:	42 17       	cp	r20, r18
    3a32:	53 07       	cpc	r21, r19
    3a34:	18 f4       	brcc	.+6      	; 0x3a3c <malloc+0x66>
    3a36:	9a 01       	movw	r18, r20
    3a38:	bd 01       	movw	r22, r26
    3a3a:	ef 01       	movw	r28, r30
    3a3c:	df 01       	movw	r26, r30
    3a3e:	f8 01       	movw	r30, r16
    3a40:	db cf       	rjmp	.-74     	; 0x39f8 <malloc+0x22>
    3a42:	21 15       	cp	r18, r1
    3a44:	31 05       	cpc	r19, r1
    3a46:	f9 f0       	breq	.+62     	; 0x3a86 <malloc+0xb0>
    3a48:	28 1b       	sub	r18, r24
    3a4a:	39 0b       	sbc	r19, r25
    3a4c:	24 30       	cpi	r18, 0x04	; 4
    3a4e:	31 05       	cpc	r19, r1
    3a50:	80 f4       	brcc	.+32     	; 0x3a72 <malloc+0x9c>
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	9b 81       	ldd	r25, Y+3	; 0x03
    3a56:	61 15       	cp	r22, r1
    3a58:	71 05       	cpc	r23, r1
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <malloc+0x8e>
    3a5c:	fb 01       	movw	r30, r22
    3a5e:	93 83       	std	Z+3, r25	; 0x03
    3a60:	82 83       	std	Z+2, r24	; 0x02
    3a62:	04 c0       	rjmp	.+8      	; 0x3a6c <malloc+0x96>
    3a64:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <__flp+0x1>
    3a68:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <__flp>
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	32 96       	adiw	r30, 0x02	; 2
    3a70:	44 c0       	rjmp	.+136    	; 0x3afa <malloc+0x124>
    3a72:	fe 01       	movw	r30, r28
    3a74:	e2 0f       	add	r30, r18
    3a76:	f3 1f       	adc	r31, r19
    3a78:	81 93       	st	Z+, r24
    3a7a:	91 93       	st	Z+, r25
    3a7c:	22 50       	subi	r18, 0x02	; 2
    3a7e:	31 09       	sbc	r19, r1
    3a80:	39 83       	std	Y+1, r19	; 0x01
    3a82:	28 83       	st	Y, r18
    3a84:	3a c0       	rjmp	.+116    	; 0x3afa <malloc+0x124>
    3a86:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3a8a:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3a8e:	23 2b       	or	r18, r19
    3a90:	41 f4       	brne	.+16     	; 0x3aa2 <malloc+0xcc>
    3a92:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a96:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a9a:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <__brkval+0x1>
    3a9e:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <__brkval>
    3aa2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3aa6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3aaa:	21 15       	cp	r18, r1
    3aac:	31 05       	cpc	r19, r1
    3aae:	41 f4       	brne	.+16     	; 0x3ac0 <malloc+0xea>
    3ab0:	2d b7       	in	r18, 0x3d	; 61
    3ab2:	3e b7       	in	r19, 0x3e	; 62
    3ab4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3ab8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3abc:	24 1b       	sub	r18, r20
    3abe:	35 0b       	sbc	r19, r21
    3ac0:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <__brkval>
    3ac4:	f0 91 b2 04 	lds	r31, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3ac8:	e2 17       	cp	r30, r18
    3aca:	f3 07       	cpc	r31, r19
    3acc:	a0 f4       	brcc	.+40     	; 0x3af6 <malloc+0x120>
    3ace:	2e 1b       	sub	r18, r30
    3ad0:	3f 0b       	sbc	r19, r31
    3ad2:	28 17       	cp	r18, r24
    3ad4:	39 07       	cpc	r19, r25
    3ad6:	78 f0       	brcs	.+30     	; 0x3af6 <malloc+0x120>
    3ad8:	ac 01       	movw	r20, r24
    3ada:	4e 5f       	subi	r20, 0xFE	; 254
    3adc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ade:	24 17       	cp	r18, r20
    3ae0:	35 07       	cpc	r19, r21
    3ae2:	48 f0       	brcs	.+18     	; 0x3af6 <malloc+0x120>
    3ae4:	4e 0f       	add	r20, r30
    3ae6:	5f 1f       	adc	r21, r31
    3ae8:	50 93 b2 04 	sts	0x04B2, r21	; 0x8004b2 <__brkval+0x1>
    3aec:	40 93 b1 04 	sts	0x04B1, r20	; 0x8004b1 <__brkval>
    3af0:	81 93       	st	Z+, r24
    3af2:	91 93       	st	Z+, r25
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <malloc+0x124>
    3af6:	e0 e0       	ldi	r30, 0x00	; 0
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	cf 01       	movw	r24, r30
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	08 95       	ret

00003b06 <free>:
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <free+0xa>
    3b0e:	81 c0       	rjmp	.+258    	; 0x3c12 <free+0x10c>
    3b10:	fc 01       	movw	r30, r24
    3b12:	32 97       	sbiw	r30, 0x02	; 2
    3b14:	13 82       	std	Z+3, r1	; 0x03
    3b16:	12 82       	std	Z+2, r1	; 0x02
    3b18:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <__flp>
    3b1c:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <__flp+0x1>
    3b20:	10 97       	sbiw	r26, 0x00	; 0
    3b22:	81 f4       	brne	.+32     	; 0x3b44 <free+0x3e>
    3b24:	20 81       	ld	r18, Z
    3b26:	31 81       	ldd	r19, Z+1	; 0x01
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3b30:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3b34:	28 17       	cp	r18, r24
    3b36:	39 07       	cpc	r19, r25
    3b38:	51 f5       	brne	.+84     	; 0x3b8e <free+0x88>
    3b3a:	f0 93 b2 04 	sts	0x04B2, r31	; 0x8004b2 <__brkval+0x1>
    3b3e:	e0 93 b1 04 	sts	0x04B1, r30	; 0x8004b1 <__brkval>
    3b42:	67 c0       	rjmp	.+206    	; 0x3c12 <free+0x10c>
    3b44:	ed 01       	movw	r28, r26
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	ce 17       	cp	r28, r30
    3b4c:	df 07       	cpc	r29, r31
    3b4e:	40 f4       	brcc	.+16     	; 0x3b60 <free+0x5a>
    3b50:	4a 81       	ldd	r20, Y+2	; 0x02
    3b52:	5b 81       	ldd	r21, Y+3	; 0x03
    3b54:	9e 01       	movw	r18, r28
    3b56:	41 15       	cp	r20, r1
    3b58:	51 05       	cpc	r21, r1
    3b5a:	f1 f0       	breq	.+60     	; 0x3b98 <free+0x92>
    3b5c:	ea 01       	movw	r28, r20
    3b5e:	f5 cf       	rjmp	.-22     	; 0x3b4a <free+0x44>
    3b60:	d3 83       	std	Z+3, r29	; 0x03
    3b62:	c2 83       	std	Z+2, r28	; 0x02
    3b64:	40 81       	ld	r20, Z
    3b66:	51 81       	ldd	r21, Z+1	; 0x01
    3b68:	84 0f       	add	r24, r20
    3b6a:	95 1f       	adc	r25, r21
    3b6c:	c8 17       	cp	r28, r24
    3b6e:	d9 07       	cpc	r29, r25
    3b70:	59 f4       	brne	.+22     	; 0x3b88 <free+0x82>
    3b72:	88 81       	ld	r24, Y
    3b74:	99 81       	ldd	r25, Y+1	; 0x01
    3b76:	84 0f       	add	r24, r20
    3b78:	95 1f       	adc	r25, r21
    3b7a:	02 96       	adiw	r24, 0x02	; 2
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	9b 81       	ldd	r25, Y+3	; 0x03
    3b84:	93 83       	std	Z+3, r25	; 0x03
    3b86:	82 83       	std	Z+2, r24	; 0x02
    3b88:	21 15       	cp	r18, r1
    3b8a:	31 05       	cpc	r19, r1
    3b8c:	29 f4       	brne	.+10     	; 0x3b98 <free+0x92>
    3b8e:	f0 93 b4 04 	sts	0x04B4, r31	; 0x8004b4 <__flp+0x1>
    3b92:	e0 93 b3 04 	sts	0x04B3, r30	; 0x8004b3 <__flp>
    3b96:	3d c0       	rjmp	.+122    	; 0x3c12 <free+0x10c>
    3b98:	e9 01       	movw	r28, r18
    3b9a:	fb 83       	std	Y+3, r31	; 0x03
    3b9c:	ea 83       	std	Y+2, r30	; 0x02
    3b9e:	49 91       	ld	r20, Y+
    3ba0:	59 91       	ld	r21, Y+
    3ba2:	c4 0f       	add	r28, r20
    3ba4:	d5 1f       	adc	r29, r21
    3ba6:	ec 17       	cp	r30, r28
    3ba8:	fd 07       	cpc	r31, r29
    3baa:	61 f4       	brne	.+24     	; 0x3bc4 <free+0xbe>
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	84 0f       	add	r24, r20
    3bb2:	95 1f       	adc	r25, r21
    3bb4:	02 96       	adiw	r24, 0x02	; 2
    3bb6:	e9 01       	movw	r28, r18
    3bb8:	99 83       	std	Y+1, r25	; 0x01
    3bba:	88 83       	st	Y, r24
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	9b 83       	std	Y+3, r25	; 0x03
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
    3bc4:	e0 e0       	ldi	r30, 0x00	; 0
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	12 96       	adiw	r26, 0x02	; 2
    3bca:	8d 91       	ld	r24, X+
    3bcc:	9c 91       	ld	r25, X
    3bce:	13 97       	sbiw	r26, 0x03	; 3
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <free+0xd4>
    3bd4:	fd 01       	movw	r30, r26
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	f7 cf       	rjmp	.-18     	; 0x3bc8 <free+0xc2>
    3bda:	8d 91       	ld	r24, X+
    3bdc:	9c 91       	ld	r25, X
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	9d 01       	movw	r18, r26
    3be2:	2e 5f       	subi	r18, 0xFE	; 254
    3be4:	3f 4f       	sbci	r19, 0xFF	; 255
    3be6:	82 0f       	add	r24, r18
    3be8:	93 1f       	adc	r25, r19
    3bea:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3bee:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3bf2:	28 17       	cp	r18, r24
    3bf4:	39 07       	cpc	r19, r25
    3bf6:	69 f4       	brne	.+26     	; 0x3c12 <free+0x10c>
    3bf8:	30 97       	sbiw	r30, 0x00	; 0
    3bfa:	29 f4       	brne	.+10     	; 0x3c06 <free+0x100>
    3bfc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <__flp+0x1>
    3c00:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <__flp>
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <free+0x104>
    3c06:	13 82       	std	Z+3, r1	; 0x03
    3c08:	12 82       	std	Z+2, r1	; 0x02
    3c0a:	b0 93 b2 04 	sts	0x04B2, r27	; 0x8004b2 <__brkval+0x1>
    3c0e:	a0 93 b1 04 	sts	0x04B1, r26	; 0x8004b1 <__brkval>
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <memcpy>:
    3c18:	fb 01       	movw	r30, r22
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <memcpy+0xa>
    3c1e:	01 90       	ld	r0, Z+
    3c20:	0d 92       	st	X+, r0
    3c22:	41 50       	subi	r20, 0x01	; 1
    3c24:	50 40       	sbci	r21, 0x00	; 0
    3c26:	d8 f7       	brcc	.-10     	; 0x3c1e <memcpy+0x6>
    3c28:	08 95       	ret

00003c2a <memset>:
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	01 c0       	rjmp	.+2      	; 0x3c30 <memset+0x6>
    3c2e:	6d 93       	st	X+, r22
    3c30:	41 50       	subi	r20, 0x01	; 1
    3c32:	50 40       	sbci	r21, 0x00	; 0
    3c34:	e0 f7       	brcc	.-8      	; 0x3c2e <memset+0x4>
    3c36:	08 95       	ret

00003c38 <eeprom_read_byte>:
    3c38:	f9 99       	sbic	0x1f, 1	; 31
    3c3a:	fe cf       	rjmp	.-4      	; 0x3c38 <eeprom_read_byte>
    3c3c:	92 bd       	out	0x22, r25	; 34
    3c3e:	81 bd       	out	0x21, r24	; 33
    3c40:	f8 9a       	sbi	0x1f, 0	; 31
    3c42:	99 27       	eor	r25, r25
    3c44:	80 b5       	in	r24, 0x20	; 32
    3c46:	08 95       	ret

00003c48 <eeprom_write_byte>:
    3c48:	26 2f       	mov	r18, r22

00003c4a <eeprom_write_r18>:
    3c4a:	f9 99       	sbic	0x1f, 1	; 31
    3c4c:	fe cf       	rjmp	.-4      	; 0x3c4a <eeprom_write_r18>
    3c4e:	1f ba       	out	0x1f, r1	; 31
    3c50:	92 bd       	out	0x22, r25	; 34
    3c52:	81 bd       	out	0x21, r24	; 33
    3c54:	20 bd       	out	0x20, r18	; 32
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	fa 9a       	sbi	0x1f, 2	; 31
    3c5c:	f9 9a       	sbi	0x1f, 1	; 31
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	08 95       	ret

00003c64 <__do_global_dtors>:
    3c64:	10 e0       	ldi	r17, 0x00	; 0
    3c66:	c8 e7       	ldi	r28, 0x78	; 120
    3c68:	d0 e0       	ldi	r29, 0x00	; 0
    3c6a:	04 c0       	rjmp	.+8      	; 0x3c74 <__do_global_dtors+0x10>
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
    3c72:	21 96       	adiw	r28, 0x01	; 1
    3c74:	c9 37       	cpi	r28, 0x79	; 121
    3c76:	d1 07       	cpc	r29, r17
    3c78:	c9 f7       	brne	.-14     	; 0x3c6c <__do_global_dtors+0x8>
    3c7a:	f8 94       	cli

00003c7c <__stop_program>:
    3c7c:	ff cf       	rjmp	.-2      	; 0x3c7c <__stop_program>
