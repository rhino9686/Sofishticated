
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00004734  000047c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024e  0080026a  0080026a  00004932  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004932  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  000049a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013014  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a4b  00000000  00000000  0001839c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000066bc  00000000  00000000  0001bde7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e40  00000000  00000000  000224a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ba0  00000000  00000000  000242e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b50b  00000000  00000000  00028e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  0003438f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__dtors_end>
       4:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_1>
       8:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__vector_2>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__vector_6>
      1c:	0c 94 13 21 	jmp	0x4226	; 0x4226 <__vector_7>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_16>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_18>
      4c:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_19>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	7b 1c       	adc	r7, r11
      6a:	7b 1c       	adc	r7, r11
      6c:	7b 1c       	adc	r7, r11
      6e:	ba 1c       	adc	r11, r10
      70:	a5 1c       	adc	r10, r5
      72:	b4 1c       	adc	r11, r4
      74:	7b 1c       	adc	r7, r11
      76:	7b 1c       	adc	r7, r11
      78:	ba 1c       	adc	r11, r10
      7a:	a5 1c       	adc	r10, r5

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <_ZL15dscrc2x16_table>:
      92:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      a2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000b2 <digital_pin_to_timer_PGM>:
      b2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c2:	00 00 00 00                                         ....

000000c6 <digital_pin_to_bit_mask_PGM>:
      c6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d6:	04 08 10 20                                         ... 

000000da <digital_pin_to_port_PGM>:
      da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ea:	03 03 03 03                                         ....

000000ee <port_to_input_PGM>:
      ee:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f8 <port_to_output_PGM>:
      f8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000102 <port_to_mode_PGM>:
     102:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010c <__ctors_start>:
     10c:	c7 05       	cpc	r28, r7
     10e:	e4 0c       	add	r14, r4

00000110 <__ctors_end>:
     110:	d7 05       	cpc	r29, r7

00000112 <__dtors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d8 e0       	ldi	r29, 0x08	; 8
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	12 e0       	ldi	r17, 0x02	; 2
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e4 e3       	ldi	r30, 0x34	; 52
     126:	f7 e4       	ldi	r31, 0x47	; 71
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	aa 36       	cpi	r26, 0x6A	; 106
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	24 e0       	ldi	r18, 0x04	; 4
     136:	aa e6       	ldi	r26, 0x6A	; 106
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a8 3b       	cpi	r26, 0xB8	; 184
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>

00000144 <__do_global_ctors>:
     144:	10 e0       	ldi	r17, 0x00	; 0
     146:	c8 e8       	ldi	r28, 0x88	; 136
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	04 c0       	rjmp	.+8      	; 0x154 <__do_global_ctors+0x10>
     14c:	21 97       	sbiw	r28, 0x01	; 1
     14e:	fe 01       	movw	r30, r28
     150:	0e 94 12 22 	call	0x4424	; 0x4424 <__tablejump2__>
     154:	c6 38       	cpi	r28, 0x86	; 134
     156:	d1 07       	cpc	r29, r17
     158:	c9 f7       	brne	.-14     	; 0x14c <__do_global_ctors+0x8>
     15a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <main>
     15e:	0c 94 8d 23 	jmp	0x471a	; 0x471a <__do_global_dtors>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <_ZN11EEPROMClass4readEi.isra.0>:
     166:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <eeprom_read_byte>

0000016a <_ZN10DFRobot_PHC1Ev>:
     16a:	fc 01       	movw	r30, r24
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	a8 ec       	ldi	r26, 0xC8	; 200
     172:	b1 e4       	ldi	r27, 0x41	; 65
     174:	80 8b       	std	Z+16, r24	; 0x10
     176:	91 8b       	std	Z+17, r25	; 0x11
     178:	a2 8b       	std	Z+18, r26	; 0x12
     17a:	b3 8b       	std	Z+19, r27	; 0x13
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	a0 ee       	ldi	r26, 0xE0	; 224
     182:	b0 e4       	ldi	r27, 0x40	; 64
     184:	80 83       	st	Z, r24
     186:	91 83       	std	Z+1, r25	; 0x01
     188:	a2 83       	std	Z+2, r26	; 0x02
     18a:	b3 83       	std	Z+3, r27	; 0x03
     18c:	84 e1       	ldi	r24, 0x14	; 20
     18e:	9e e0       	ldi	r25, 0x0E	; 14
     190:	ae ef       	ldi	r26, 0xFE	; 254
     192:	b4 e4       	ldi	r27, 0x44	; 68
     194:	84 83       	std	Z+4, r24	; 0x04
     196:	95 83       	std	Z+5, r25	; 0x05
     198:	a6 83       	std	Z+6, r26	; 0x06
     19a:	b7 83       	std	Z+7, r27	; 0x07
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e8       	ldi	r25, 0x80	; 128
     1a0:	ab eb       	ldi	r26, 0xBB	; 187
     1a2:	b4 e4       	ldi	r27, 0x44	; 68
     1a4:	80 87       	std	Z+8, r24	; 0x08
     1a6:	91 87       	std	Z+9, r25	; 0x09
     1a8:	a2 87       	std	Z+10, r26	; 0x0a
     1aa:	b3 87       	std	Z+11, r27	; 0x0b
     1ac:	84 87       	std	Z+12, r24	; 0x0c
     1ae:	95 87       	std	Z+13, r25	; 0x0d
     1b0:	a6 87       	std	Z+14, r26	; 0x0e
     1b2:	b7 87       	std	Z+15, r27	; 0x0f
     1b4:	08 95       	ret

000001b6 <_ZN10DFRobot_PHD1Ev>:
     1b6:	08 95       	ret

000001b8 <_ZN10DFRobot_PH5beginEv>:
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	7c 01       	movw	r14, r24
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	e8 0e       	add	r14, r24
     1d0:	f1 1c       	adc	r15, r1
     1d2:	67 01       	movw	r12, r14
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	c8 01       	movw	r24, r16
     1da:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     1de:	f6 01       	movw	r30, r12
     1e0:	81 93       	st	Z+, r24
     1e2:	6f 01       	movw	r12, r30
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	04 30       	cpi	r16, 0x04	; 4
     1ea:	11 05       	cpc	r17, r1
     1ec:	a9 f7       	brne	.-22     	; 0x1d8 <_ZN10DFRobot_PH5beginEv+0x20>
     1ee:	61 e2       	ldi	r22, 0x21	; 33
     1f0:	71 e0       	ldi	r23, 0x01	; 1
     1f2:	87 e7       	ldi	r24, 0x77	; 119
     1f4:	93 e0       	ldi	r25, 0x03	; 3
     1f6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
     1fa:	48 85       	ldd	r20, Y+8	; 0x08
     1fc:	59 85       	ldd	r21, Y+9	; 0x09
     1fe:	6a 85       	ldd	r22, Y+10	; 0x0a
     200:	7b 85       	ldd	r23, Y+11	; 0x0b
     202:	22 e0       	ldi	r18, 0x02	; 2
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	87 e7       	ldi	r24, 0x77	; 119
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     216:	8f 3f       	cpi	r24, 0xFF	; 255
     218:	39 f5       	brne	.+78     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	09 f5       	brne	.+66     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     22e:	8f 3f       	cpi	r24, 0xFF	; 255
     230:	d9 f4       	brne	.+54     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     23a:	8f 3f       	cpi	r24, 0xFF	; 255
     23c:	a9 f4       	brne	.+42     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e8       	ldi	r25, 0x80	; 128
     242:	ab eb       	ldi	r26, 0xBB	; 187
     244:	b4 e4       	ldi	r27, 0x44	; 68
     246:	88 87       	std	Y+8, r24	; 0x08
     248:	99 87       	std	Y+9, r25	; 0x09
     24a:	aa 87       	std	Y+10, r26	; 0x0a
     24c:	bb 87       	std	Y+11, r27	; 0x0b
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	f7 01       	movw	r30, r14
     254:	61 91       	ld	r22, Z+
     256:	7f 01       	movw	r14, r30
     258:	c8 01       	movw	r24, r16
     25a:	0e 94 7f 23 	call	0x46fe	; 0x46fe <eeprom_write_byte>
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	04 30       	cpi	r16, 0x04	; 4
     264:	11 05       	cpc	r17, r1
     266:	a9 f7       	brne	.-22     	; 0x252 <_ZN10DFRobot_PH5beginEv+0x9a>
     268:	7e 01       	movw	r14, r28
     26a:	f4 e0       	ldi	r31, 0x04	; 4
     26c:	ef 0e       	add	r14, r31
     26e:	f1 1c       	adc	r15, r1
     270:	67 01       	movw	r12, r14
     272:	04 e0       	ldi	r16, 0x04	; 4
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	c8 01       	movw	r24, r16
     278:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     27c:	f6 01       	movw	r30, r12
     27e:	81 93       	st	Z+, r24
     280:	6f 01       	movw	r12, r30
     282:	0f 5f       	subi	r16, 0xFF	; 255
     284:	1f 4f       	sbci	r17, 0xFF	; 255
     286:	08 30       	cpi	r16, 0x08	; 8
     288:	11 05       	cpc	r17, r1
     28a:	a9 f7       	brne	.-22     	; 0x276 <_ZN10DFRobot_PH5beginEv+0xbe>
     28c:	62 e3       	ldi	r22, 0x32	; 50
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	87 e7       	ldi	r24, 0x77	; 119
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
     298:	4c 81       	ldd	r20, Y+4	; 0x04
     29a:	5d 81       	ldd	r21, Y+5	; 0x05
     29c:	6e 81       	ldd	r22, Y+6	; 0x06
     29e:	7f 81       	ldd	r23, Y+7	; 0x07
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	87 e7       	ldi	r24, 0x77	; 119
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <_ZN5Print7printlnEdi>
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2b4:	8f 3f       	cpi	r24, 0xFF	; 255
     2b6:	31 f5       	brne	.+76     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2c0:	8f 3f       	cpi	r24, 0xFF	; 255
     2c2:	01 f5       	brne	.+64     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	d1 f4       	brne	.+52     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2d8:	8f 3f       	cpi	r24, 0xFF	; 255
     2da:	a1 f4       	brne	.+40     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2dc:	84 e1       	ldi	r24, 0x14	; 20
     2de:	9e e0       	ldi	r25, 0x0E	; 14
     2e0:	ae ef       	ldi	r26, 0xFE	; 254
     2e2:	b4 e4       	ldi	r27, 0x44	; 68
     2e4:	8c 83       	std	Y+4, r24	; 0x04
     2e6:	9d 83       	std	Y+5, r25	; 0x05
     2e8:	ae 83       	std	Y+6, r26	; 0x06
     2ea:	bf 83       	std	Y+7, r27	; 0x07
     2ec:	c4 e0       	ldi	r28, 0x04	; 4
     2ee:	d0 e0       	ldi	r29, 0x00	; 0
     2f0:	f7 01       	movw	r30, r14
     2f2:	61 91       	ld	r22, Z+
     2f4:	7f 01       	movw	r14, r30
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 7f 23 	call	0x46fe	; 0x46fe <eeprom_write_byte>
     2fc:	21 96       	adiw	r28, 0x01	; 1
     2fe:	c8 30       	cpi	r28, 0x08	; 8
     300:	d1 05       	cpc	r29, r1
     302:	b1 f7       	brne	.-20     	; 0x2f0 <_ZN10DFRobot_PH5beginEv+0x138>
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	08 95       	ret

00000316 <_ZN10DFRobot_PH6readPHEff>:
     316:	4f 92       	push	r4
     318:	5f 92       	push	r5
     31a:	6f 92       	push	r6
     31c:	7f 92       	push	r7
     31e:	8f 92       	push	r8
     320:	9f 92       	push	r9
     322:	af 92       	push	r10
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
     334:	2a 01       	movw	r4, r20
     336:	3b 01       	movw	r6, r22
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e8       	ldi	r19, 0x80	; 128
     33c:	4b eb       	ldi	r20, 0xBB	; 187
     33e:	54 e4       	ldi	r21, 0x44	; 68
     340:	68 85       	ldd	r22, Y+8	; 0x08
     342:	79 85       	ldd	r23, Y+9	; 0x09
     344:	8a 85       	ldd	r24, Y+10	; 0x0a
     346:	9b 85       	ldd	r25, Y+11	; 0x0b
     348:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     34c:	4b 01       	movw	r8, r22
     34e:	5c 01       	movw	r10, r24
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e4       	ldi	r20, 0x40	; 64
     356:	50 e4       	ldi	r21, 0x40	; 64
     358:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e8       	ldi	r19, 0x80	; 128
     364:	4b eb       	ldi	r20, 0xBB	; 187
     366:	54 e4       	ldi	r21, 0x44	; 68
     368:	6c 81       	ldd	r22, Y+4	; 0x04
     36a:	7d 81       	ldd	r23, Y+5	; 0x05
     36c:	8e 81       	ldd	r24, Y+6	; 0x06
     36e:	9f 81       	ldd	r25, Y+7	; 0x07
     370:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e4       	ldi	r20, 0x40	; 64
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
     384:	c7 01       	movw	r24, r14
     386:	b6 01       	movw	r22, r12
     388:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     38c:	9b 01       	movw	r18, r22
     38e:	ac 01       	movw	r20, r24
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	80 e4       	ldi	r24, 0x40	; 64
     396:	90 e4       	ldi	r25, 0x40	; 64
     398:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
     39c:	6b 01       	movw	r12, r22
     39e:	7c 01       	movw	r14, r24
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e4       	ldi	r20, 0x40	; 64
     3b2:	50 e4       	ldi	r21, 0x40	; 64
     3b4:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	80 ee       	ldi	r24, 0xE0	; 224
     3c2:	90 e4       	ldi	r25, 0x40	; 64
     3c4:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     3c8:	4b 01       	movw	r8, r22
     3ca:	5c 01       	movw	r10, r24
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e8       	ldi	r19, 0x80	; 128
     3d0:	4b eb       	ldi	r20, 0xBB	; 187
     3d2:	54 e4       	ldi	r21, 0x44	; 68
     3d4:	c3 01       	movw	r24, r6
     3d6:	b2 01       	movw	r22, r4
     3d8:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
     3dc:	a7 01       	movw	r20, r14
     3de:	96 01       	movw	r18, r12
     3e0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e4       	ldi	r20, 0x40	; 64
     3ea:	50 e4       	ldi	r21, 0x40	; 64
     3ec:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c5 01       	movw	r24, r10
     3f6:	b4 01       	movw	r22, r8
     3f8:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     3fc:	68 83       	st	Y, r22
     3fe:	79 83       	std	Y+1, r23	; 0x01
     400:	8a 83       	std	Y+2, r24	; 0x02
     402:	9b 83       	std	Y+3, r25	; 0x03
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	9f 90       	pop	r9
     416:	8f 90       	pop	r8
     418:	7f 90       	pop	r7
     41a:	6f 90       	pop	r6
     41c:	5f 90       	pop	r5
     41e:	4f 90       	pop	r4
     420:	08 95       	ret

00000422 <_Z8fromWifiv>:
	phValue = ph.readPH(voltage, temperature);
	return phValue;
}
void calibratePH() {
	ph.calibration(voltage, temperature);
     422:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <xAmmonia>
     426:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <xAmmonia+0x1>
     42a:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <vTaskResume>

0000042e <_Z9addColorsv>:
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	c5 e4       	ldi	r28, 0x45	; 69
     438:	d3 e0       	ldi	r29, 0x03	; 3
     43a:	18 82       	st	Y, r1
     43c:	19 82       	std	Y+1, r1	; 0x01
     43e:	1a 82       	std	Y+2, r1	; 0x02
     440:	1b 82       	std	Y+3, r1	; 0x03
     442:	1c 82       	std	Y+4, r1	; 0x04
     444:	1d 82       	std	Y+5, r1	; 0x05
     446:	1e 82       	std	Y+6, r1	; 0x06
     448:	a4 e1       	ldi	r26, 0x14	; 20
     44a:	b3 e0       	ldi	r27, 0x03	; 3
     44c:	1d 92       	st	X+, r1
     44e:	1d 92       	st	X+, r1
     450:	1d 92       	st	X+, r1
     452:	1c 92       	st	X, r1
     454:	13 97       	sbiw	r26, 0x03	; 3
     456:	14 96       	adiw	r26, 0x04	; 4
     458:	1c 92       	st	X, r1
     45a:	14 97       	sbiw	r26, 0x04	; 4
     45c:	15 96       	adiw	r26, 0x05	; 5
     45e:	1c 92       	st	X, r1
     460:	15 97       	sbiw	r26, 0x05	; 5
     462:	16 96       	adiw	r26, 0x06	; 6
     464:	1c 92       	st	X, r1
     466:	16 97       	sbiw	r26, 0x06	; 6
     468:	e3 ee       	ldi	r30, 0xE3	; 227
     46a:	f2 e0       	ldi	r31, 0x02	; 2
     46c:	10 82       	st	Z, r1
     46e:	11 82       	std	Z+1, r1	; 0x01
     470:	12 82       	std	Z+2, r1	; 0x02
     472:	13 82       	std	Z+3, r1	; 0x03
     474:	14 82       	std	Z+4, r1	; 0x04
     476:	15 82       	std	Z+5, r1	; 0x05
     478:	16 82       	std	Z+6, r1	; 0x06
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	60 e8       	ldi	r22, 0x80	; 128
     480:	7e e3       	ldi	r23, 0x3E	; 62
     482:	4f 83       	std	Y+7, r20	; 0x07
     484:	58 87       	std	Y+8, r21	; 0x08
     486:	69 87       	std	Y+9, r22	; 0x09
     488:	7a 87       	std	Y+10, r23	; 0x0a
     48a:	1b 86       	std	Y+11, r1	; 0x0b
     48c:	1c 86       	std	Y+12, r1	; 0x0c
     48e:	1d 86       	std	Y+13, r1	; 0x0d
     490:	4a e9       	ldi	r20, 0x9A	; 154
     492:	59 e9       	ldi	r21, 0x99	; 153
     494:	69 e1       	ldi	r22, 0x19	; 25
     496:	7e e3       	ldi	r23, 0x3E	; 62
     498:	17 96       	adiw	r26, 0x07	; 7
     49a:	4d 93       	st	X+, r20
     49c:	5d 93       	st	X+, r21
     49e:	6d 93       	st	X+, r22
     4a0:	7c 93       	st	X, r23
     4a2:	1a 97       	sbiw	r26, 0x0a	; 10
     4a4:	1b 96       	adiw	r26, 0x0b	; 11
     4a6:	1c 92       	st	X, r1
     4a8:	1b 97       	sbiw	r26, 0x0b	; 11
     4aa:	1c 96       	adiw	r26, 0x0c	; 12
     4ac:	1c 92       	st	X, r1
     4ae:	1c 97       	sbiw	r26, 0x0c	; 12
     4b0:	1d 96       	adiw	r26, 0x0d	; 13
     4b2:	1c 92       	st	X, r1
     4b4:	1d 97       	sbiw	r26, 0x0d	; 13
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	7f e3       	ldi	r23, 0x3F	; 63
     4be:	47 83       	std	Z+7, r20	; 0x07
     4c0:	50 87       	std	Z+8, r21	; 0x08
     4c2:	61 87       	std	Z+9, r22	; 0x09
     4c4:	72 87       	std	Z+10, r23	; 0x0a
     4c6:	13 86       	std	Z+11, r1	; 0x0b
     4c8:	14 86       	std	Z+12, r1	; 0x0c
     4ca:	15 86       	std	Z+13, r1	; 0x0d
     4cc:	4e 87       	std	Y+14, r20	; 0x0e
     4ce:	5f 87       	std	Y+15, r21	; 0x0f
     4d0:	68 8b       	std	Y+16, r22	; 0x10
     4d2:	79 8b       	std	Y+17, r23	; 0x11
     4d4:	1a 8a       	std	Y+18, r1	; 0x12
     4d6:	1b 8a       	std	Y+19, r1	; 0x13
     4d8:	1c 8a       	std	Y+20, r1	; 0x14
     4da:	4a e9       	ldi	r20, 0x9A	; 154
     4dc:	59 e9       	ldi	r21, 0x99	; 153
     4de:	69 e9       	ldi	r22, 0x99	; 153
     4e0:	7e e3       	ldi	r23, 0x3E	; 62
     4e2:	1e 96       	adiw	r26, 0x0e	; 14
     4e4:	4d 93       	st	X+, r20
     4e6:	5d 93       	st	X+, r21
     4e8:	6d 93       	st	X+, r22
     4ea:	7c 93       	st	X, r23
     4ec:	51 97       	sbiw	r26, 0x11	; 17
     4ee:	52 96       	adiw	r26, 0x12	; 18
     4f0:	1c 92       	st	X, r1
     4f2:	52 97       	sbiw	r26, 0x12	; 18
     4f4:	53 96       	adiw	r26, 0x13	; 19
     4f6:	1c 92       	st	X, r1
     4f8:	53 97       	sbiw	r26, 0x13	; 19
     4fa:	54 96       	adiw	r26, 0x14	; 20
     4fc:	1c 92       	st	X, r1
     4fe:	54 97       	sbiw	r26, 0x14	; 20
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e4       	ldi	r23, 0x40	; 64
     508:	46 87       	std	Z+14, r20	; 0x0e
     50a:	57 87       	std	Z+15, r21	; 0x0f
     50c:	60 8b       	std	Z+16, r22	; 0x10
     50e:	71 8b       	std	Z+17, r23	; 0x11
     510:	12 8a       	std	Z+18, r1	; 0x12
     512:	13 8a       	std	Z+19, r1	; 0x13
     514:	14 8a       	std	Z+20, r1	; 0x14
     516:	00 e0       	ldi	r16, 0x00	; 0
     518:	10 e0       	ldi	r17, 0x00	; 0
     51a:	20 e4       	ldi	r18, 0x40	; 64
     51c:	30 e4       	ldi	r19, 0x40	; 64
     51e:	0d 8b       	std	Y+21, r16	; 0x15
     520:	1e 8b       	std	Y+22, r17	; 0x16
     522:	2f 8b       	std	Y+23, r18	; 0x17
     524:	38 8f       	std	Y+24, r19	; 0x18
     526:	19 8e       	std	Y+25, r1	; 0x19
     528:	1a 8e       	std	Y+26, r1	; 0x1a
     52a:	1b 8e       	std	Y+27, r1	; 0x1b
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	60 e8       	ldi	r22, 0x80	; 128
     532:	7f e3       	ldi	r23, 0x3F	; 63
     534:	55 96       	adiw	r26, 0x15	; 21
     536:	4d 93       	st	X+, r20
     538:	5d 93       	st	X+, r21
     53a:	6d 93       	st	X+, r22
     53c:	7c 93       	st	X, r23
     53e:	58 97       	sbiw	r26, 0x18	; 24
     540:	59 96       	adiw	r26, 0x19	; 25
     542:	1c 92       	st	X, r1
     544:	59 97       	sbiw	r26, 0x19	; 25
     546:	5a 96       	adiw	r26, 0x1a	; 26
     548:	1c 92       	st	X, r1
     54a:	5a 97       	sbiw	r26, 0x1a	; 26
     54c:	5b 96       	adiw	r26, 0x1b	; 27
     54e:	1c 92       	st	X, r1
     550:	5b 97       	sbiw	r26, 0x1b	; 27
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 ea       	ldi	r22, 0xA0	; 160
     558:	70 e4       	ldi	r23, 0x40	; 64
     55a:	45 8b       	std	Z+21, r20	; 0x15
     55c:	56 8b       	std	Z+22, r21	; 0x16
     55e:	67 8b       	std	Z+23, r22	; 0x17
     560:	70 8f       	std	Z+24, r23	; 0x18
     562:	11 8e       	std	Z+25, r1	; 0x19
     564:	12 8e       	std	Z+26, r1	; 0x1a
     566:	13 8e       	std	Z+27, r1	; 0x1b
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	60 ec       	ldi	r22, 0xC0	; 192
     56e:	70 e4       	ldi	r23, 0x40	; 64
     570:	4c 8f       	std	Y+28, r20	; 0x1c
     572:	5d 8f       	std	Y+29, r21	; 0x1d
     574:	6e 8f       	std	Y+30, r22	; 0x1e
     576:	7f 8f       	std	Y+31, r23	; 0x1f
     578:	18 a2       	std	Y+32, r1	; 0x20
     57a:	19 a2       	std	Y+33, r1	; 0x21
     57c:	1a a2       	std	Y+34, r1	; 0x22
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	60 ec       	ldi	r22, 0xC0	; 192
     584:	7f e3       	ldi	r23, 0x3F	; 63
     586:	5c 96       	adiw	r26, 0x1c	; 28
     588:	4d 93       	st	X+, r20
     58a:	5d 93       	st	X+, r21
     58c:	6d 93       	st	X+, r22
     58e:	7c 93       	st	X, r23
     590:	5f 97       	sbiw	r26, 0x1f	; 31
     592:	90 96       	adiw	r26, 0x20	; 32
     594:	1c 92       	st	X, r1
     596:	90 97       	sbiw	r26, 0x20	; 32
     598:	91 96       	adiw	r26, 0x21	; 33
     59a:	1c 92       	st	X, r1
     59c:	91 97       	sbiw	r26, 0x21	; 33
     59e:	92 96       	adiw	r26, 0x22	; 34
     5a0:	1c 92       	st	X, r1
     5a2:	92 97       	sbiw	r26, 0x22	; 34
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e2       	ldi	r22, 0x20	; 32
     5aa:	71 e4       	ldi	r23, 0x41	; 65
     5ac:	44 8f       	std	Z+28, r20	; 0x1c
     5ae:	55 8f       	std	Z+29, r21	; 0x1d
     5b0:	66 8f       	std	Z+30, r22	; 0x1e
     5b2:	77 8f       	std	Z+31, r23	; 0x1f
     5b4:	10 a2       	std	Z+32, r1	; 0x20
     5b6:	11 a2       	std	Z+33, r1	; 0x21
     5b8:	12 a2       	std	Z+34, r1	; 0x22
     5ba:	93 96       	adiw	r26, 0x23	; 35
     5bc:	0d 93       	st	X+, r16
     5be:	1d 93       	st	X+, r17
     5c0:	2d 93       	st	X+, r18
     5c2:	3c 93       	st	X, r19
     5c4:	96 97       	sbiw	r26, 0x26	; 38
     5c6:	97 96       	adiw	r26, 0x27	; 39
     5c8:	1c 92       	st	X, r1
     5ca:	97 97       	sbiw	r26, 0x27	; 39
     5cc:	98 96       	adiw	r26, 0x28	; 40
     5ce:	1c 92       	st	X, r1
     5d0:	98 97       	sbiw	r26, 0x28	; 40
     5d2:	99 96       	adiw	r26, 0x29	; 41
     5d4:	1c 92       	st	X, r1
     5d6:	99 97       	sbiw	r26, 0x29	; 41
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	20 ea       	ldi	r18, 0xA0	; 160
     5de:	31 e4       	ldi	r19, 0x41	; 65
     5e0:	03 a3       	std	Z+35, r16	; 0x23
     5e2:	14 a3       	std	Z+36, r17	; 0x24
     5e4:	25 a3       	std	Z+37, r18	; 0x25
     5e6:	36 a3       	std	Z+38, r19	; 0x26
     5e8:	17 a2       	std	Z+39, r1	; 0x27
     5ea:	10 a6       	std	Z+40, r1	; 0x28
     5ec:	11 a6       	std	Z+41, r1	; 0x29
     5ee:	9a 96       	adiw	r26, 0x2a	; 42
     5f0:	4d 93       	st	X+, r20
     5f2:	5d 93       	st	X+, r21
     5f4:	6d 93       	st	X+, r22
     5f6:	7c 93       	st	X, r23
     5f8:	9d 97       	sbiw	r26, 0x2d	; 45
     5fa:	9e 96       	adiw	r26, 0x2e	; 46
     5fc:	1c 92       	st	X, r1
     5fe:	9e 97       	sbiw	r26, 0x2e	; 46
     600:	9f 96       	adiw	r26, 0x2f	; 47
     602:	1c 92       	st	X, r1
     604:	9f 97       	sbiw	r26, 0x2f	; 47
     606:	d0 96       	adiw	r26, 0x30	; 48
     608:	1c 92       	st	X, r1
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a8 e4       	ldi	r26, 0x48	; 72
     610:	b2 e4       	ldi	r27, 0x42	; 66
     612:	82 a7       	std	Z+42, r24	; 0x2a
     614:	93 a7       	std	Z+43, r25	; 0x2b
     616:	a4 a7       	std	Z+44, r26	; 0x2c
     618:	b5 a7       	std	Z+45, r27	; 0x2d
     61a:	16 a6       	std	Z+46, r1	; 0x2e
     61c:	17 a6       	std	Z+47, r1	; 0x2f
     61e:	10 aa       	std	Z+48, r1	; 0x30
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	1f 91       	pop	r17
     626:	0f 91       	pop	r16
     628:	08 95       	ret

0000062a <_Z9SameColorv>:
     62a:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <c+0x4>
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <rgb>
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	ac 01       	movw	r20, r24
     638:	43 52       	subi	r20, 0x23	; 35
     63a:	51 09       	sbc	r21, r1
     63c:	24 17       	cp	r18, r20
     63e:	35 07       	cpc	r19, r21
     640:	f4 f0       	brlt	.+60     	; 0x67e <_Z9SameColorv+0x54>
     642:	83 96       	adiw	r24, 0x23	; 35
     644:	82 17       	cp	r24, r18
     646:	93 07       	cpc	r25, r19
     648:	d4 f0       	brlt	.+52     	; 0x67e <_Z9SameColorv+0x54>
     64a:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <c+0x5>
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	24 17       	cp	r18, r20
     652:	35 07       	cpc	r19, r21
     654:	a4 f0       	brlt	.+40     	; 0x67e <_Z9SameColorv+0x54>
     656:	82 17       	cp	r24, r18
     658:	93 07       	cpc	r25, r19
     65a:	8c f0       	brlt	.+34     	; 0x67e <_Z9SameColorv+0x54>
     65c:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <c+0x6>
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	24 17       	cp	r18, r20
     664:	35 07       	cpc	r19, r21
     666:	5c f0       	brlt	.+22     	; 0x67e <_Z9SameColorv+0x54>
     668:	82 17       	cp	r24, r18
     66a:	93 07       	cpc	r25, r19
     66c:	44 f0       	brlt	.+16     	; 0x67e <_Z9SameColorv+0x54>
     66e:	6c e7       	ldi	r22, 0x7C	; 124
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	87 e7       	ldi	r24, 0x77	; 119
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <_ZN5Print5printEPK19__FlashStringHelper>
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	08 95       	ret
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	08 95       	ret

00000682 <_Z9FindMatchv>:
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <typeToRead>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	09 f4       	brne	.+2      	; 0x694 <_Z9FindMatchv+0x12>
     692:	48 c0       	rjmp	.+144    	; 0x724 <_Z9FindMatchv+0xa2>
     694:	40 f0       	brcs	.+16     	; 0x6a6 <_Z9FindMatchv+0x24>
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	09 f0       	breq	.+2      	; 0x69c <_Z9FindMatchv+0x1a>
     69a:	6e c0       	rjmp	.+220    	; 0x778 <_Z9FindMatchv+0xf6>
     69c:	04 e1       	ldi	r16, 0x14	; 20
     69e:	13 e0       	ldi	r17, 0x03	; 3
     6a0:	c6 e0       	ldi	r28, 0x06	; 6
     6a2:	d0 e0       	ldi	r29, 0x00	; 0
     6a4:	29 c0       	rjmp	.+82     	; 0x6f8 <_Z9FindMatchv+0x76>
     6a6:	05 e4       	ldi	r16, 0x45	; 69
     6a8:	13 e0       	ldi	r17, 0x03	; 3
     6aa:	c4 e0       	ldi	r28, 0x04	; 4
     6ac:	d0 e0       	ldi	r29, 0x00	; 0
     6ae:	87 e0       	ldi	r24, 0x07	; 7
     6b0:	f8 01       	movw	r30, r16
     6b2:	7c 96       	adiw	r30, 0x1c	; 28
     6b4:	a2 ed       	ldi	r26, 0xD2	; 210
     6b6:	b2 e0       	ldi	r27, 0x02	; 2
     6b8:	01 90       	ld	r0, Z+
     6ba:	0d 92       	st	X+, r0
     6bc:	8a 95       	dec	r24
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <_Z9FindMatchv+0x36>
     6c0:	0e 94 15 03 	call	0x62a	; 0x62a <_Z9SameColorv>
     6c4:	88 23       	and	r24, r24
     6c6:	49 f0       	breq	.+18     	; 0x6da <_Z9FindMatchv+0x58>
     6c8:	87 e0       	ldi	r24, 0x07	; 7
     6ca:	8c 9f       	mul	r24, r28
     6cc:	f0 01       	movw	r30, r0
     6ce:	8d 9f       	mul	r24, r29
     6d0:	f0 0d       	add	r31, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	eb 5b       	subi	r30, 0xBB	; 187
     6d6:	fc 4f       	sbci	r31, 0xFC	; 252
     6d8:	3e c0       	rjmp	.+124    	; 0x756 <_Z9FindMatchv+0xd4>
     6da:	21 97       	sbiw	r28, 0x01	; 1
     6dc:	07 50       	subi	r16, 0x07	; 7
     6de:	11 09       	sbc	r17, r1
     6e0:	cf 3f       	cpi	r28, 0xFF	; 255
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	d8 07       	cpc	r29, r24
     6e6:	19 f7       	brne	.-58     	; 0x6ae <_Z9FindMatchv+0x2c>
     6e8:	42 c0       	rjmp	.+132    	; 0x76e <_Z9FindMatchv+0xec>
     6ea:	21 97       	sbiw	r28, 0x01	; 1
     6ec:	07 50       	subi	r16, 0x07	; 7
     6ee:	11 09       	sbc	r17, r1
     6f0:	cf 3f       	cpi	r28, 0xFF	; 255
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	d8 07       	cpc	r29, r24
     6f6:	d9 f1       	breq	.+118    	; 0x76e <_Z9FindMatchv+0xec>
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	f8 01       	movw	r30, r16
     6fc:	ba 96       	adiw	r30, 0x2a	; 42
     6fe:	a2 ed       	ldi	r26, 0xD2	; 210
     700:	b2 e0       	ldi	r27, 0x02	; 2
     702:	01 90       	ld	r0, Z+
     704:	0d 92       	st	X+, r0
     706:	8a 95       	dec	r24
     708:	e1 f7       	brne	.-8      	; 0x702 <_Z9FindMatchv+0x80>
     70a:	0e 94 15 03 	call	0x62a	; 0x62a <_Z9SameColorv>
     70e:	88 23       	and	r24, r24
     710:	61 f3       	breq	.-40     	; 0x6ea <_Z9FindMatchv+0x68>
     712:	87 e0       	ldi	r24, 0x07	; 7
     714:	8c 9f       	mul	r24, r28
     716:	f0 01       	movw	r30, r0
     718:	8d 9f       	mul	r24, r29
     71a:	f0 0d       	add	r31, r0
     71c:	11 24       	eor	r1, r1
     71e:	ec 5e       	subi	r30, 0xEC	; 236
     720:	fc 4f       	sbci	r31, 0xFC	; 252
     722:	19 c0       	rjmp	.+50     	; 0x756 <_Z9FindMatchv+0xd4>
     724:	03 ee       	ldi	r16, 0xE3	; 227
     726:	12 e0       	ldi	r17, 0x02	; 2
     728:	c6 e0       	ldi	r28, 0x06	; 6
     72a:	d0 e0       	ldi	r29, 0x00	; 0
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	f8 01       	movw	r30, r16
     730:	ba 96       	adiw	r30, 0x2a	; 42
     732:	a2 ed       	ldi	r26, 0xD2	; 210
     734:	b2 e0       	ldi	r27, 0x02	; 2
     736:	01 90       	ld	r0, Z+
     738:	0d 92       	st	X+, r0
     73a:	8a 95       	dec	r24
     73c:	e1 f7       	brne	.-8      	; 0x736 <_Z9FindMatchv+0xb4>
     73e:	0e 94 15 03 	call	0x62a	; 0x62a <_Z9SameColorv>
     742:	88 23       	and	r24, r24
     744:	69 f0       	breq	.+26     	; 0x760 <_Z9FindMatchv+0xde>
     746:	87 e0       	ldi	r24, 0x07	; 7
     748:	8c 9f       	mul	r24, r28
     74a:	f0 01       	movw	r30, r0
     74c:	8d 9f       	mul	r24, r29
     74e:	f0 0d       	add	r31, r0
     750:	11 24       	eor	r1, r1
     752:	ed 51       	subi	r30, 0x1D	; 29
     754:	fd 4f       	sbci	r31, 0xFD	; 253
     756:	30 81       	ld	r19, Z
     758:	21 81       	ldd	r18, Z+1	; 0x01
     75a:	92 81       	ldd	r25, Z+2	; 0x02
     75c:	83 81       	ldd	r24, Z+3	; 0x03
     75e:	0b c0       	rjmp	.+22     	; 0x776 <_Z9FindMatchv+0xf4>
     760:	21 97       	sbiw	r28, 0x01	; 1
     762:	07 50       	subi	r16, 0x07	; 7
     764:	11 09       	sbc	r17, r1
     766:	cf 3f       	cpi	r28, 0xFF	; 255
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	d8 07       	cpc	r29, r24
     76c:	f9 f6       	brne	.-66     	; 0x72c <_Z9FindMatchv+0xaa>
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	90 e8       	ldi	r25, 0x80	; 128
     774:	8f eb       	ldi	r24, 0xBF	; 191
     776:	ac 01       	movw	r20, r24
     778:	63 2f       	mov	r22, r19
     77a:	72 2f       	mov	r23, r18
     77c:	85 2f       	mov	r24, r21
     77e:	94 2f       	mov	r25, r20
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <_Z9ScanColorv>:
     78a:	83 ea       	ldi	r24, 0xA3	; 163
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_ZN9MD_TCS2304readEv>
     792:	83 ea       	ldi	r24, 0xA3	; 163
     794:	92 e0       	ldi	r25, 0x02	; 2
     796:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <_ZN9MD_TCS2309availableEv>
     79a:	88 23       	and	r24, r24
     79c:	d1 f3       	breq	.-12     	; 0x792 <_Z9ScanColorv+0x8>
     79e:	69 ed       	ldi	r22, 0xD9	; 217
     7a0:	72 e0       	ldi	r23, 0x02	; 2
     7a2:	83 ea       	ldi	r24, 0xA3	; 163
     7a4:	92 e0       	ldi	r25, 0x02	; 2
     7a6:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <_ZN9MD_TCS2306getRGBEP9colorData>
     7aa:	0c 94 41 03 	jmp	0x682	; 0x682 <_Z9FindMatchv>

000007ae <_Z13findTestStripv>:
     7ae:	83 ea       	ldi	r24, 0xA3	; 163
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_ZN9MD_TCS2304readEv>
     7b6:	83 ea       	ldi	r24, 0xA3	; 163
     7b8:	92 e0       	ldi	r25, 0x02	; 2
     7ba:	0e 94 54 1e 	call	0x3ca8	; 0x3ca8 <_ZN9MD_TCS2309availableEv>
     7be:	88 23       	and	r24, r24
     7c0:	d1 f3       	breq	.-12     	; 0x7b6 <_Z13findTestStripv+0x8>
     7c2:	69 ed       	ldi	r22, 0xD9	; 217
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	83 ea       	ldi	r24, 0xA3	; 163
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <_ZN9MD_TCS2306getRGBEP9colorData>
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	ec ed       	ldi	r30, 0xDC	; 220
     7d2:	f2 e0       	ldi	r31, 0x02	; 2
     7d4:	a2 ed       	ldi	r26, 0xD2	; 210
     7d6:	b2 e0       	ldi	r27, 0x02	; 2
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	8a 95       	dec	r24
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <_Z13findTestStripv+0x2a>
     7e0:	0c 94 15 03 	jmp	0x62a	; 0x62a <_Z9SameColorv>

000007e4 <_Z6setLED8LEDColor>:
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <_Z6setLED8LEDColor+0x6>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <_Z6setLED8LEDColor+0x8>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <_Z6setLED8LEDColor+0xa>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	49 83       	std	Y+1, r20	; 0x01
     7f4:	5a 83       	std	Y+2, r21	; 0x02
     7f6:	6b 83       	std	Y+3, r22	; 0x03
     7f8:	7c 83       	std	Y+4, r23	; 0x04
     7fa:	8d 83       	std	Y+5, r24	; 0x05
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	69 81       	ldd	r22, Y+1	; 0x01
     800:	7a 81       	ldd	r23, Y+2	; 0x02
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	0e 94 71 10 	call	0x20e2	; 0x20e2 <analogWrite>
     808:	6b 81       	ldd	r22, Y+3	; 0x03
     80a:	7c 81       	ldd	r23, Y+4	; 0x04
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	0e 94 71 10 	call	0x20e2	; 0x20e2 <analogWrite>
     812:	6d 81       	ldd	r22, Y+5	; 0x05
     814:	7e 81       	ldd	r23, Y+6	; 0x06
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	26 96       	adiw	r28, 0x06	; 6
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <analogWrite>

0000082c <_Z15TaskAmmoniaReadPv>:
     82c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	8d e0       	ldi	r24, 0x0D	; 13
     834:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     840:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     844:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <xQueueSemaphoreTake>
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	a9 f5       	brne	.+106    	; 0x8b6 <_Z15TaskAmmoniaReadPv+0x8a>
     84c:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z13findTestStripv>
     850:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Red>
     854:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Red+0x1>
     858:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Red+0x2>
     85c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <Red+0x3>
     860:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Red+0x4>
     864:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Red+0x5>
     868:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     86c:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <typeToRead>
     870:	8c eb       	ldi	r24, 0xBC	; 188
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     878:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z9ScanColorv>
     87c:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <Black>
     880:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <Black+0x1>
     884:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <Black+0x2>
     888:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <Black+0x3>
     88c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Black+0x4>
     890:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <Black+0x5>
     894:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     8a6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     8aa:	0e 94 81 12 	call	0x2502	; 0x2502 <xQueueGenericSend>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 b4 18 	call	0x3168	; 0x3168 <vTaskSuspend>
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     8be:	bc cf       	rjmp	.-136    	; 0x838 <_Z15TaskAmmoniaReadPv+0xc>

000008c0 <_Z15TaskNitriteReadPv>:
     8c0:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	8d e0       	ldi	r24, 0x0D	; 13
     8c8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     8cc:	c2 e0       	ldi	r28, 0x02	; 2
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     8d6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     8da:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <xQueueSemaphoreTake>
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	a9 f5       	brne	.+106    	; 0x94c <__stack+0x4d>
     8e2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z13findTestStripv>
     8e6:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Green>
     8ea:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Green+0x1>
     8ee:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Green+0x2>
     8f2:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Green+0x3>
     8f6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Green+0x4>
     8fa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Green+0x5>
     8fe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     902:	c0 93 68 03 	sts	0x0368, r28	; 0x800368 <typeToRead>
     906:	80 ea       	ldi	r24, 0xA0	; 160
     908:	9f e0       	ldi	r25, 0x0F	; 15
     90a:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     90e:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z9ScanColorv>
     912:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <Black>
     916:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <Black+0x1>
     91a:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <Black+0x2>
     91e:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <Black+0x3>
     922:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Black+0x4>
     926:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <Black+0x5>
     92a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     93c:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     940:	0e 94 81 12 	call	0x2502	; 0x2502 <xQueueGenericSend>
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 b4 18 	call	0x3168	; 0x3168 <vTaskSuspend>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     954:	bc cf       	rjmp	.-136    	; 0x8ce <_Z15TaskNitriteReadPv+0xe>

00000956 <_Z15TaskNitrateReadPv>:
     956:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     96a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     96e:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <xQueueSemaphoreTake>
     972:	c8 2f       	mov	r28, r24
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	a9 f5       	brne	.+106    	; 0x9e2 <_Z15TaskNitrateReadPv+0x8c>
     978:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_Z13findTestStripv>
     97c:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Blue>
     980:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Blue+0x1>
     984:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Blue+0x2>
     988:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Blue+0x3>
     98c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Blue+0x4>
     990:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Blue+0x5>
     994:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     998:	c0 93 68 03 	sts	0x0368, r28	; 0x800368 <typeToRead>
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	9f e0       	ldi	r25, 0x0F	; 15
     9a0:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     9a4:	0e 94 c5 03 	call	0x78a	; 0x78a <_Z9ScanColorv>
     9a8:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <Black>
     9ac:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <Black+0x1>
     9b0:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <Black+0x2>
     9b4:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <Black+0x3>
     9b8:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Black+0x4>
     9bc:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <Black+0x5>
     9c0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <xSerialSemaphoreColorSensor>
     9d2:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <xSerialSemaphoreColorSensor+0x1>
     9d6:	0e 94 81 12 	call	0x2502	; 0x2502 <xQueueGenericSend>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 b4 18 	call	0x3168	; 0x3168 <vTaskSuspend>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 41 18 	call	0x3082	; 0x3082 <vTaskDelay>
     9ea:	bb cf       	rjmp	.-138    	; 0x962 <_Z15TaskNitrateReadPv+0xc>

000009ec <_Z8setupLEDv>:
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
     a04:	40 91 9d 02 	lds	r20, 0x029D	; 0x80029d <Black>
     a08:	50 91 9e 02 	lds	r21, 0x029E	; 0x80029e <Black+0x1>
     a0c:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <Black+0x2>
     a10:	70 91 a0 02 	lds	r23, 0x02A0	; 0x8002a0 <Black+0x3>
     a14:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Black+0x4>
     a18:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <Black+0x5>
     a1c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_Z6setLED8LEDColor>

00000a20 <_Z6phInitv>:
     a20:	86 e7       	ldi	r24, 0x76	; 118
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_ZN10DFRobot_PH5beginEv>

00000a28 <_Z5getPHv>:
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	8f e0       	ldi	r24, 0x0F	; 15
     a2e:	0e 94 54 10 	call	0x20a8	; 0x20a8 <analogRead>
     a32:	bc 01       	movw	r22, r24
     a34:	99 0f       	add	r25, r25
     a36:	88 0b       	sbc	r24, r24
     a38:	99 0b       	sbc	r25, r25
     a3a:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatsisf>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e8       	ldi	r20, 0x80	; 128
     a44:	5a e3       	ldi	r21, 0x3A	; 58
     a46:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e4       	ldi	r19, 0x40	; 64
     a4e:	4c e9       	ldi	r20, 0x9C	; 156
     a50:	55 e4       	ldi	r21, 0x45	; 69
     a52:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     a56:	ab 01       	movw	r20, r22
     a58:	bc 01       	movw	r22, r24
     a5a:	40 93 99 02 	sts	0x0299, r20	; 0x800299 <voltage>
     a5e:	50 93 9a 02 	sts	0x029A, r21	; 0x80029a <voltage+0x1>
     a62:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <voltage+0x2>
     a66:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <voltage+0x3>
     a6a:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <temperature>
     a6e:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <temperature+0x1>
     a72:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperature+0x2>
     a76:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperature+0x3>
     a7a:	86 e7       	ldi	r24, 0x76	; 118
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN10DFRobot_PH6readPHEff>
     a82:	60 93 95 02 	sts	0x0295, r22	; 0x800295 <phValue>
     a86:	70 93 96 02 	sts	0x0296, r23	; 0x800296 <phValue+0x1>
     a8a:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <phValue+0x2>
     a8e:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <phValue+0x3>
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <_Z10TaskPHReadPv>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <_Z10TaskPHReadPv+0x6>
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
     aa6:	9a 83       	std	Y+2, r25	; 0x02
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	0e 94 10 05 	call	0xa20	; 0xa20 <_Z6phInitv>
     aae:	0e 94 14 05 	call	0xa28	; 0xa28 <_Z5getPHv>
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	0e 94 35 11 	call	0x226a	; 0x226a <digitalWrite>
     aba:	6a eb       	ldi	r22, 0xBA	; 186
     abc:	7b ed       	ldi	r23, 0xDB	; 219
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskDelayUntil>
     ac6:	f1 cf       	rjmp	.-30     	; 0xaaa <_Z10TaskPHReadPv+0x12>

00000ac8 <setup>:
TaskHandle_t xTemperature;



// the setup function runs once when you press reset or power the board
void setup() {
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     ace:	26 e0       	ldi	r18, 0x06	; 6
     ad0:	40 e8       	ldi	r20, 0x80	; 128
     ad2:	55 e2       	ldi	r21, 0x25	; 37
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	87 e7       	ldi	r24, 0x77	; 119
     ada:	93 e0       	ldi	r25, 0x03	; 3
     adc:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN14HardwareSerial5beginEmh>
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
  }

  // load test strip color data and initialize indicator LED
  addColors();
     ae0:	0e 94 17 02 	call	0x42e	; 0x42e <_Z9addColorsv>
  setupLED();
     ae4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_Z8setupLEDv>

  // TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
  attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
     ae8:	43 e0       	ldi	r20, 0x03	; 3
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	61 e1       	ldi	r22, 0x11	; 17
     aee:	72 e0       	ldi	r23, 0x02	; 2
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <attachInterrupt>
    TaskAmmoniaRead
    ,  (const portCHAR *)"Ammonia"
    ,  128
    ,  NULL
    ,  2
    ,  &xAmmonia );
     af6:	82 e7       	ldi	r24, 0x72	; 114
     af8:	e8 2e       	mov	r14, r24
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	f8 2e       	mov	r15, r24
     afe:	02 e0       	ldi	r16, 0x02	; 2
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e8       	ldi	r20, 0x80	; 128
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	65 e5       	ldi	r22, 0x55	; 85
     b0a:	71 e0       	ldi	r23, 0x01	; 1
     b0c:	86 e1       	ldi	r24, 0x16	; 22
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    TaskNitriteRead
    ,  (const portCHAR *) "Nitrite"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xNitrite );
     b14:	90 e7       	ldi	r25, 0x70	; 112
     b16:	e9 2e       	mov	r14, r25
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	f9 2e       	mov	r15, r25
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e8       	ldi	r20, 0x80	; 128
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	6d e5       	ldi	r22, 0x5D	; 93
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	80 e6       	ldi	r24, 0x60	; 96
     b2a:	94 e0       	ldi	r25, 0x04	; 4
     b2c:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    TaskNitrateRead
    ,  (const portCHAR *) "Nitrate"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xNitrate );
     b30:	2e e6       	ldi	r18, 0x6E	; 110
     b32:	e2 2e       	mov	r14, r18
     b34:	22 e0       	ldi	r18, 0x02	; 2
     b36:	f2 2e       	mov	r15, r18
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e8       	ldi	r20, 0x80	; 128
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	65 e6       	ldi	r22, 0x65	; 101
     b42:	71 e0       	ldi	r23, 0x01	; 1
     b44:	8b ea       	ldi	r24, 0xAB	; 171
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    TaskPHRead
    ,  (const portCHAR *) "pH"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xPH );
     b4c:	3c e6       	ldi	r19, 0x6C	; 108
     b4e:	e3 2e       	mov	r14, r19
     b50:	32 e0       	ldi	r19, 0x02	; 2
     b52:	f3 2e       	mov	r15, r19
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e8       	ldi	r20, 0x80	; 128
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	6d e6       	ldi	r22, 0x6D	; 109
     b5e:	71 e0       	ldi	r23, 0x01	; 1
     b60:	8c e4       	ldi	r24, 0x4C	; 76
     b62:	95 e0       	ldi	r25, 0x05	; 5
     b64:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    TaskTemperatureRead
    ,  (const portCHAR *) "Temperature"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xTemperature );
     b68:	4a e6       	ldi	r20, 0x6A	; 106
     b6a:	e4 2e       	mov	r14, r20
     b6c:	42 e0       	ldi	r20, 0x02	; 2
     b6e:	f4 2e       	mov	r15, r20
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e7       	ldi	r22, 0x70	; 112
     b7a:	71 e0       	ldi	r23, 0x01	; 1
     b7c:	8d e4       	ldi	r24, 0x4D	; 77
     b7e:	97 e0       	ldi	r25, 0x07	; 7
     b80:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
}
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	08 95       	ret

00000b8c <loop>:

void loop()
{
     b8c:	08 95       	ret

00000b8e <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     b8e:	67 e0       	ldi	r22, 0x07	; 7
     b90:	89 e6       	ldi	r24, 0x69	; 105
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	0e 94 77 08 	call	0x10ee	; 0x10ee <_ZN7OneWire5beginEh>
Color EmptyTestBox {0, {0, 0, 0}};

colorData rgb;
Color c;

MD_TCS230  CS(S2, S3, OE);
     b98:	28 e0       	ldi	r18, 0x08	; 8
     b9a:	4d e0       	ldi	r20, 0x0D	; 13
     b9c:	6c e0       	ldi	r22, 0x0C	; 12
     b9e:	83 ea       	ldi	r24, 0xA3	; 163
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZN9MD_TCS230C1Ehhh>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define PH_PIN A1
float voltage, phValue, temperature = 25;
DFRobot_PH ph;
     ba6:	86 e7       	ldi	r24, 0x76	; 118
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_ZN10DFRobot_PHC1Ev>

00000bae <_GLOBAL__sub_D_ds>:
     bae:	86 e7       	ldi	r24, 0x76	; 118
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN10DFRobot_PHD1Ev>
     bb6:	83 ea       	ldi	r24, 0xA3	; 163
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <_ZN9MD_TCS230D1Ev>

00000bbe <_Z11measureTempv>:

OneWire ds(TEMP_PIN); // Temp sensor on pin 7


/* measureTemp() returns the measured temperature in degrees Celsius */
float measureTemp() {
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	64 97       	sbiw	r28, 0x14	; 20
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
	byte type_s;
	byte data[12];
	byte addr[8];
	float celsius, fahrenheit;
	
	if ( !ds.search(addr)) {
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	be 01       	movw	r22, r28
     be6:	63 5f       	subi	r22, 0xF3	; 243
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	89 e6       	ldi	r24, 0x69	; 105
     bec:	93 e0       	ldi	r25, 0x03	; 3
     bee:	0e 94 9a 08 	call	0x1134	; 0x1134 <_ZN7OneWire6searchEPhb>
     bf2:	81 11       	cpse	r24, r1
     bf4:	15 c0       	rjmp	.+42     	; 0xc20 <_Z11measureTempv+0x62>
		Serial.println("No more addresses.");
     bf6:	6c e7       	ldi	r22, 0x7C	; 124
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	87 e7       	ldi	r24, 0x77	; 119
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		Serial.println();
     c02:	87 e7       	ldi	r24, 0x77	; 119
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN5Print7printlnEv>
		ds.reset_search();
     c0a:	89 e6       	ldi	r24, 0x69	; 105
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <_ZN7OneWire12reset_searchEv>
		delay(250);
     c12:	6a ef       	ldi	r22, 0xFA	; 250
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <delay>
     c1e:	2c c0       	rjmp	.+88     	; 0xc78 <_Z11measureTempv+0xba>
		return -1;
	}
	
	Serial.print("ROM =");
     c20:	6f e8       	ldi	r22, 0x8F	; 143
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	87 e7       	ldi	r24, 0x77	; 119
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
     c2c:	8e 01       	movw	r16, r28
     c2e:	03 5f       	subi	r16, 0xF3	; 243
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	7e 01       	movw	r14, r28
     c34:	85 e1       	ldi	r24, 0x15	; 21
     c36:	e8 0e       	add	r14, r24
     c38:	f1 1c       	adc	r15, r1
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     c3a:	60 e2       	ldi	r22, 0x20	; 32
     c3c:	87 e7       	ldi	r24, 0x77	; 119
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN14HardwareSerial5writeEh>
	for( i = 0; i < 8; i++) {
		Serial.write(' ');
		Serial.print(addr[i], HEX);
     c44:	f8 01       	movw	r30, r16
     c46:	61 91       	ld	r22, Z+
     c48:	8f 01       	movw	r16, r30
     c4a:	40 e1       	ldi	r20, 0x10	; 16
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	87 e7       	ldi	r24, 0x77	; 119
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN5Print5printEhi>
		delay(250);
		return -1;
	}
	
	Serial.print("ROM =");
	for( i = 0; i < 8; i++) {
     c56:	0e 15       	cp	r16, r14
     c58:	1f 05       	cpc	r17, r15
     c5a:	79 f7       	brne	.-34     	; 0xc3a <_Z11measureTempv+0x7c>
		Serial.write(' ');
		Serial.print(addr[i], HEX);
	}

	if (OneWire::crc8(addr, 7) != addr[7]) {
     c5c:	67 e0       	ldi	r22, 0x07	; 7
     c5e:	ce 01       	movw	r24, r28
     c60:	0d 96       	adiw	r24, 0x0d	; 13
     c62:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN7OneWire4crc8EPKhh>
     c66:	9c 89       	ldd	r25, Y+20	; 0x14
     c68:	89 17       	cp	r24, r25
     c6a:	59 f0       	breq	.+22     	; 0xc82 <_Z11measureTempv+0xc4>
		Serial.println("CRC is not valid!");
     c6c:	65 e9       	ldi	r22, 0x95	; 149
     c6e:	71 e0       	ldi	r23, 0x01	; 1
     c70:	87 e7       	ldi	r24, 0x77	; 119
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		return -1;
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	80 e8       	ldi	r24, 0x80	; 128
     c7e:	9f eb       	ldi	r25, 0xBF	; 191
     c80:	f6 c0       	rjmp	.+492    	; 0xe6e <_Z11measureTempv+0x2b0>
	}
	Serial.println();
     c82:	87 e7       	ldi	r24, 0x77	; 119
     c84:	93 e0       	ldi	r25, 0x03	; 3
     c86:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN5Print7printlnEv>
	
	// the first ROM byte indicates which chip
	switch (addr[0]) {
     c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c8c:	82 32       	cpi	r24, 0x22	; 34
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <_Z11measureTempv+0xf2>
     c90:	88 32       	cpi	r24, 0x28	; 40
     c92:	59 f0       	breq	.+22     	; 0xcaa <_Z11measureTempv+0xec>
     c94:	80 31       	cpi	r24, 0x10	; 16
     c96:	a1 f4       	brne	.+40     	; 0xcc0 <_Z11measureTempv+0x102>
		case 0x10:
		Serial.println("  Chip = DS18S20");  // or old DS1820
     c98:	67 ea       	ldi	r22, 0xA7	; 167
     c9a:	71 e0       	ldi	r23, 0x01	; 1
     c9c:	87 e7       	ldi	r24, 0x77	; 119
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		type_s = 1;
     ca4:	ff 24       	eor	r15, r15
     ca6:	f3 94       	inc	r15
		break;
     ca8:	0e c0       	rjmp	.+28     	; 0xcc6 <_Z11measureTempv+0x108>
		case 0x28:
		Serial.println("  Chip = DS18B20");
     caa:	68 eb       	ldi	r22, 0xB8	; 184
     cac:	71 e0       	ldi	r23, 0x01	; 1
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <_Z11measureTempv+0xf6>
		type_s = 0;
		break;
		case 0x22:
		Serial.println("  Chip = DS1822");
     cb0:	69 ec       	ldi	r22, 0xC9	; 201
     cb2:	71 e0       	ldi	r23, 0x01	; 1
     cb4:	87 e7       	ldi	r24, 0x77	; 119
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
		type_s = 0;
     cbc:	f1 2c       	mov	r15, r1
		break;
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <_Z11measureTempv+0x108>
		default:
		Serial.println("Device is not a DS18x20 family device.");
     cc0:	69 ed       	ldi	r22, 0xD9	; 217
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	d5 cf       	rjmp	.-86     	; 0xc70 <_Z11measureTempv+0xb2>
		return -1;
	}

	ds.reset();
     cc6:	89 e6       	ldi	r24, 0x69	; 105
     cc8:	93 e0       	ldi	r25, 0x03	; 3
     cca:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN7OneWire5resetEv>
	ds.select(addr);
     cce:	be 01       	movw	r22, r28
     cd0:	63 5f       	subi	r22, 0xF3	; 243
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	89 e6       	ldi	r24, 0x69	; 105
     cd6:	93 e0       	ldi	r25, 0x03	; 3
     cd8:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7OneWire6selectEPKh>
	ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	64 e4       	ldi	r22, 0x44	; 68
     ce0:	89 e6       	ldi	r24, 0x69	; 105
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN7OneWire5writeEhh>
	
	delay(1000);     // maybe 750ms is enough, maybe not
     ce8:	68 ee       	ldi	r22, 0xE8	; 232
     cea:	73 e0       	ldi	r23, 0x03	; 3
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <delay>
	// we might do a ds.depower() here, but the reset will take care of it.
	
	present = ds.reset();
     cf4:	89 e6       	ldi	r24, 0x69	; 105
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN7OneWire5resetEv>
     cfc:	18 2f       	mov	r17, r24
	ds.select(addr);
     cfe:	be 01       	movw	r22, r28
     d00:	63 5f       	subi	r22, 0xF3	; 243
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	89 e6       	ldi	r24, 0x69	; 105
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 4c 08 	call	0x1098	; 0x1098 <_ZN7OneWire6selectEPKh>
	ds.write(0xBE);         // Read Scratchpad
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	6e eb       	ldi	r22, 0xBE	; 190
     d10:	89 e6       	ldi	r24, 0x69	; 105
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN7OneWire5writeEhh>

	Serial.print("  Data = ");
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	72 e0       	ldi	r23, 0x02	; 2
     d1c:	87 e7       	ldi	r24, 0x77	; 119
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
	Serial.print(present, HEX);
     d24:	40 e1       	ldi	r20, 0x10	; 16
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	61 2f       	mov	r22, r17
     d2a:	87 e7       	ldi	r24, 0x77	; 119
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN5Print5printEhi>
	Serial.print(" ");
     d32:	6a e2       	ldi	r22, 0x2A	; 42
     d34:	72 e0       	ldi	r23, 0x02	; 2
     d36:	87 e7       	ldi	r24, 0x77	; 119
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
     d3e:	8e 01       	movw	r16, r28
     d40:	0f 5f       	subi	r16, 0xFF	; 255
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	5e 01       	movw	r10, r28
     d46:	fa e0       	ldi	r31, 0x0A	; 10
     d48:	af 0e       	add	r10, r31
     d4a:	b1 1c       	adc	r11, r1
     d4c:	d0 2e       	mov	r13, r16
     d4e:	e1 2e       	mov	r14, r17
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
		data[i] = ds.read();
     d50:	89 e6       	ldi	r24, 0x69	; 105
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN7OneWire4readEv>
     d58:	f8 01       	movw	r30, r16
     d5a:	81 93       	st	Z+, r24
     d5c:	8f 01       	movw	r16, r30
		Serial.print(data[i], HEX);
     d5e:	40 e1       	ldi	r20, 0x10	; 16
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	68 2f       	mov	r22, r24
     d64:	87 e7       	ldi	r24, 0x77	; 119
     d66:	93 e0       	ldi	r25, 0x03	; 3
     d68:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN5Print5printEhi>
		Serial.print(" ");
     d6c:	6a e2       	ldi	r22, 0x2A	; 42
     d6e:	72 e0       	ldi	r23, 0x02	; 2
     d70:	87 e7       	ldi	r24, 0x77	; 119
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
	ds.write(0xBE);         // Read Scratchpad

	Serial.print("  Data = ");
	Serial.print(present, HEX);
	Serial.print(" ");
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     d78:	a0 16       	cp	r10, r16
     d7a:	b1 06       	cpc	r11, r17
     d7c:	49 f7       	brne	.-46     	; 0xd50 <_Z11measureTempv+0x192>
		data[i] = ds.read();
		Serial.print(data[i], HEX);
		Serial.print(" ");
	}
	Serial.print(" CRC=");
     d7e:	6a e0       	ldi	r22, 0x0A	; 10
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	87 e7       	ldi	r24, 0x77	; 119
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
	Serial.print(OneWire::crc8(data, 8), HEX);
     d8a:	68 e0       	ldi	r22, 0x08	; 8
     d8c:	8d 2d       	mov	r24, r13
     d8e:	9e 2d       	mov	r25, r14
     d90:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN7OneWire4crc8EPKhh>
     d94:	40 e1       	ldi	r20, 0x10	; 16
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	68 2f       	mov	r22, r24
     d9a:	87 e7       	ldi	r24, 0x77	; 119
     d9c:	93 e0       	ldi	r25, 0x03	; 3
     d9e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <_ZN5Print5printEhi>
	Serial.println();
     da2:	87 e7       	ldi	r24, 0x77	; 119
     da4:	93 e0       	ldi	r25, 0x03	; 3
     da6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN5Print7printlnEv>

	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
     daa:	69 81       	ldd	r22, Y+1	; 0x01
     dac:	7a 81       	ldd	r23, Y+2	; 0x02
	if (type_s) {
     dae:	ff 20       	and	r15, r15
     db0:	89 f0       	breq	.+34     	; 0xdd4 <_Z11measureTempv+0x216>
		raw = raw << 3; // 9 bit resolution default
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	66 0f       	add	r22, r22
     db6:	77 1f       	adc	r23, r23
     db8:	8a 95       	dec	r24
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <_Z11measureTempv+0x1f6>
		if (data[7] == 0x10) {
     dbc:	88 85       	ldd	r24, Y+8	; 0x08
     dbe:	80 31       	cpi	r24, 0x10	; 16
     dc0:	a9 f4       	brne	.+42     	; 0xdec <_Z11measureTempv+0x22e>
			// "count remain" gives full 12 bit resolution
			raw = (raw & 0xFFF0) + 12 - data[6];
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	8c e0       	ldi	r24, 0x0C	; 12
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	82 1b       	sub	r24, r18
     dca:	91 09       	sbc	r25, r1
     dcc:	60 7f       	andi	r22, 0xF0	; 240
     dce:	68 0f       	add	r22, r24
     dd0:	79 1f       	adc	r23, r25
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <_Z11measureTempv+0x22e>
		}
		} else {
		byte cfg = (data[4] & 0x60);
     dd4:	8d 81       	ldd	r24, Y+5	; 0x05
     dd6:	80 76       	andi	r24, 0x60	; 96
		// at lower res, the low bits are undefined, so let's zero them
		if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
     dd8:	11 f4       	brne	.+4      	; 0xdde <_Z11measureTempv+0x220>
     dda:	68 7f       	andi	r22, 0xF8	; 248
     ddc:	07 c0       	rjmp	.+14     	; 0xdec <_Z11measureTempv+0x22e>
		else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
     dde:	80 32       	cpi	r24, 0x20	; 32
     de0:	11 f4       	brne	.+4      	; 0xde6 <_Z11measureTempv+0x228>
     de2:	6c 7f       	andi	r22, 0xFC	; 252
     de4:	03 c0       	rjmp	.+6      	; 0xdec <_Z11measureTempv+0x22e>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
     de6:	80 34       	cpi	r24, 0x40	; 64
     de8:	09 f4       	brne	.+2      	; 0xdec <_Z11measureTempv+0x22e>
     dea:	6e 7f       	andi	r22, 0xFE	; 254
		//// default is 12 bit resolution, 750 ms conversion time
	}
	celsius = (float)raw / 16.0;
     dec:	07 2e       	mov	r0, r23
     dee:	00 0c       	add	r0, r0
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	0e 94 1f 0a 	call	0x143e	; 0x143e <__floatsisf>
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	5d e3       	ldi	r21, 0x3D	; 61
     e00:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     e04:	7b 01       	movw	r14, r22
     e06:	8c 01       	movw	r16, r24
	fahrenheit = celsius * 1.8 + 32.0;
	Serial.print("  Temperature = ");
     e08:	60 e1       	ldi	r22, 0x10	; 16
     e0a:	72 e0       	ldi	r23, 0x02	; 2
     e0c:	87 e7       	ldi	r24, 0x77	; 119
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
	Serial.print(celsius);
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	a7 01       	movw	r20, r14
     e1a:	b8 01       	movw	r22, r16
     e1c:	87 e7       	ldi	r24, 0x77	; 119
     e1e:	93 e0       	ldi	r25, 0x03	; 3
     e20:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5Print5printEdi>
	Serial.print(" Celsius, ");
     e24:	61 e2       	ldi	r22, 0x21	; 33
     e26:	72 e0       	ldi	r23, 0x02	; 2
     e28:	87 e7       	ldi	r24, 0x77	; 119
     e2a:	93 e0       	ldi	r25, 0x03	; 3
     e2c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN5Print5printEPKc>
	Serial.print(fahrenheit);
     e30:	26 e6       	ldi	r18, 0x66	; 102
     e32:	36 e6       	ldi	r19, 0x66	; 102
     e34:	46 ee       	ldi	r20, 0xE6	; 230
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	b7 01       	movw	r22, r14
     e3a:	c8 01       	movw	r24, r16
     e3c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	52 e4       	ldi	r21, 0x42	; 66
     e48:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
     e4c:	ab 01       	movw	r20, r22
     e4e:	bc 01       	movw	r22, r24
     e50:	22 e0       	ldi	r18, 0x02	; 2
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	87 e7       	ldi	r24, 0x77	; 119
     e56:	93 e0       	ldi	r25, 0x03	; 3
     e58:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5Print5printEdi>
	Serial.println(" Fahrenheit");
     e5c:	6c e2       	ldi	r22, 0x2C	; 44
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	87 e7       	ldi	r24, 0x77	; 119
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <_ZN5Print7printlnEPKc>
	return celsius;
     e68:	2e 2d       	mov	r18, r14
     e6a:	7f 2d       	mov	r23, r15
     e6c:	c8 01       	movw	r24, r16
     e6e:	c2 2e       	mov	r12, r18
     e70:	d7 2e       	mov	r13, r23
     e72:	7c 01       	movw	r14, r24
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	64 96       	adiw	r28, 0x14	; 20
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	08 95       	ret

00000e9a <_Z19TaskTemperatureReadPv>:
  }
}

// get Temperature reading from sensor
void TaskTemperatureRead(void *pvParameters)
{
     e9a:	cf 93       	push	r28
     e9c:	df 93       	push	r29
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <_Z19TaskTemperatureReadPv+0x6>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     ea4:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
  for (;;) // A Task shall never return or exit.
  {
    // Gets temperature value in Celsius
	float temp = measureTemp();
     eac:	0e 94 df 05 	call	0xbbe	; 0xbbe <_Z11measureTempv>

	// TODO: transmit to Wifi

    // check temperature every 2 min
    vTaskDelayUntil( &xLastWakeTime, 7500 / portTICK_PERIOD_MS );
     eb0:	64 ed       	ldi	r22, 0xD4	; 212
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	ce 01       	movw	r24, r28
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	0e 94 09 18 	call	0x3012	; 0x3012 <vTaskDelayUntil>
     ebc:	f7 cf       	rjmp	.-18     	; 0xeac <_Z19TaskTemperatureReadPv+0x12>

00000ebe <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	fc 01       	movw	r30, r24
     eca:	f0 80       	ld	r15, Z
     ecc:	c1 81       	ldd	r28, Z+1	; 0x01
     ece:	d2 81       	ldd	r29, Z+2	; 0x02
     ed0:	f8 94       	cli
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	0f 2d       	mov	r16, r15
     ed6:	00 95       	com	r16
     ed8:	80 23       	and	r24, r16
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	78 94       	sei
     ede:	1d e7       	ldi	r17, 0x7D	; 125
     ee0:	11 50       	subi	r17, 0x01	; 1
     ee2:	29 f1       	breq	.+74     	; 0xf2e <_ZN7OneWire5resetEv+0x70>
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     eec:	88 81       	ld	r24, Y
     eee:	8f 21       	and	r24, r15
     ef0:	b9 f3       	breq	.-18     	; 0xee0 <_ZN7OneWire5resetEv+0x22>
     ef2:	f8 94       	cli
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	80 23       	and	r24, r16
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8f 29       	or	r24, r15
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	78 94       	sei
     f02:	80 ee       	ldi	r24, 0xE0	; 224
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     f0a:	f8 94       	cli
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	08 23       	and	r16, r24
     f10:	09 83       	std	Y+1, r16	; 0x01
     f12:	86 e4       	ldi	r24, 0x46	; 70
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     f1a:	88 81       	ld	r24, Y
     f1c:	f8 22       	and	r15, r24
     f1e:	11 e0       	ldi	r17, 0x01	; 1
     f20:	09 f0       	breq	.+2      	; 0xf24 <_ZN7OneWire5resetEv+0x66>
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	78 94       	sei
     f26:	8a e9       	ldi	r24, 0x9A	; 154
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     f2e:	81 2f       	mov	r24, r17
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	08 95       	ret

00000f3c <_ZN7OneWire9write_bitEh>:
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	fc 01       	movw	r30, r24
     f44:	10 81       	ld	r17, Z
     f46:	c1 81       	ldd	r28, Z+1	; 0x01
     f48:	d2 81       	ldd	r29, Z+2	; 0x02
     f4a:	81 2f       	mov	r24, r17
     f4c:	80 95       	com	r24
     f4e:	60 ff       	sbrs	r22, 0
     f50:	12 c0       	rjmp	.+36     	; 0xf76 <_ZN7OneWire9write_bitEh+0x3a>
     f52:	f8 94       	cli
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	89 23       	and	r24, r25
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	89 81       	ldd	r24, Y+1	; 0x01
     f5c:	81 2b       	or	r24, r17
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	8a e0       	ldi	r24, 0x0A	; 10
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	18 2b       	or	r17, r24
     f6c:	1a 83       	std	Y+2, r17	; 0x02
     f6e:	78 94       	sei
     f70:	87 e3       	ldi	r24, 0x37	; 55
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	11 c0       	rjmp	.+34     	; 0xf98 <_ZN7OneWire9write_bitEh+0x5c>
     f76:	f8 94       	cli
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	89 23       	and	r24, r25
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	81 2b       	or	r24, r17
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	81 e4       	ldi	r24, 0x41	; 65
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	18 2b       	or	r17, r24
     f90:	1a 83       	std	Y+2, r17	; 0x02
     f92:	78 94       	sei
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0c 94 0e 10 	jmp	0x201c	; 0x201c <delayMicroseconds>

00000fa2 <_ZN7OneWire8read_bitEv>:
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	fc 01       	movw	r30, r24
     fac:	00 81       	ld	r16, Z
     fae:	c1 81       	ldd	r28, Z+1	; 0x01
     fb0:	d2 81       	ldd	r29, Z+2	; 0x02
     fb2:	f8 94       	cli
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 2b       	or	r24, r16
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	10 2f       	mov	r17, r16
     fbe:	10 95       	com	r17
     fc0:	81 23       	and	r24, r17
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	18 23       	and	r17, r24
     fd0:	19 83       	std	Y+1, r17	; 0x01
     fd2:	8a e0       	ldi	r24, 0x0A	; 10
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     fda:	c8 81       	ld	r28, Y
     fdc:	78 94       	sei
     fde:	85 e3       	ldi	r24, 0x35	; 53
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 0e 10 	call	0x201c	; 0x201c <delayMicroseconds>
     fe6:	c0 23       	and	r28, r16
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	09 f4       	brne	.+2      	; 0xfee <_ZN7OneWire8read_bitEv+0x4c>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	08 95       	ret

00000ff8 <_ZN7OneWire5writeEhh>:
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	ec 01       	movw	r28, r24
    1008:	d6 2e       	mov	r13, r22
    100a:	e4 2e       	mov	r14, r20
    100c:	08 e0       	ldi	r16, 0x08	; 8
    100e:	10 e0       	ldi	r17, 0x00	; 0
    1010:	ff 24       	eor	r15, r15
    1012:	f3 94       	inc	r15
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	8d 2d       	mov	r24, r13
    1018:	8f 21       	and	r24, r15
    101a:	09 f4       	brne	.+2      	; 0x101e <_ZN7OneWire5writeEhh+0x26>
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN7OneWire9write_bitEh>
    1024:	ff 0c       	add	r15, r15
    1026:	01 50       	subi	r16, 0x01	; 1
    1028:	11 09       	sbc	r17, r1
    102a:	a1 f7       	brne	.-24     	; 0x1014 <_ZN7OneWire5writeEhh+0x1c>
    102c:	e1 10       	cpse	r14, r1
    102e:	10 c0       	rjmp	.+32     	; 0x1050 <_ZN7OneWire5writeEhh+0x58>
    1030:	f8 94       	cli
    1032:	e9 81       	ldd	r30, Y+1	; 0x01
    1034:	fa 81       	ldd	r31, Y+2	; 0x02
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	88 81       	ld	r24, Y
    103a:	80 95       	com	r24
    103c:	89 23       	and	r24, r25
    103e:	81 83       	std	Z+1, r24	; 0x01
    1040:	e9 81       	ldd	r30, Y+1	; 0x01
    1042:	fa 81       	ldd	r31, Y+2	; 0x02
    1044:	92 81       	ldd	r25, Z+2	; 0x02
    1046:	88 81       	ld	r24, Y
    1048:	80 95       	com	r24
    104a:	89 23       	and	r24, r25
    104c:	82 83       	std	Z+2, r24	; 0x02
    104e:	78 94       	sei
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	df 90       	pop	r13
    105e:	08 95       	ret

00001060 <_ZN7OneWire4readEv>:
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	7c 01       	movw	r14, r24
    106e:	08 e0       	ldi	r16, 0x08	; 8
    1070:	10 e0       	ldi	r17, 0x00	; 0
    1072:	c0 e0       	ldi	r28, 0x00	; 0
    1074:	d1 e0       	ldi	r29, 0x01	; 1
    1076:	c7 01       	movw	r24, r14
    1078:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN7OneWire8read_bitEv>
    107c:	81 11       	cpse	r24, r1
    107e:	cd 2b       	or	r28, r29
    1080:	dd 0f       	add	r29, r29
    1082:	01 50       	subi	r16, 0x01	; 1
    1084:	11 09       	sbc	r17, r1
    1086:	b9 f7       	brne	.-18     	; 0x1076 <_ZN7OneWire4readEv+0x16>
    1088:	8c 2f       	mov	r24, r28
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <_ZN7OneWire6selectEPKh>:
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	8c 01       	movw	r16, r24
    10a6:	7b 01       	movw	r14, r22
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	65 e5       	ldi	r22, 0x55	; 85
    10ac:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN7OneWire5writeEhh>
    10b0:	e7 01       	movw	r28, r14
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	e8 0e       	add	r14, r24
    10b6:	f1 1c       	adc	r15, r1
    10b8:	69 91       	ld	r22, Y+
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	c8 01       	movw	r24, r16
    10be:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN7OneWire5writeEhh>
    10c2:	ce 15       	cp	r28, r14
    10c4:	df 05       	cpc	r29, r15
    10c6:	c1 f7       	brne	.-16     	; 0x10b8 <_ZN7OneWire6selectEPKh+0x20>
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	1f 91       	pop	r17
    10ce:	0f 91       	pop	r16
    10d0:	ff 90       	pop	r15
    10d2:	ef 90       	pop	r14
    10d4:	08 95       	ret

000010d6 <_ZN7OneWire12reset_searchEv>:
    10d6:	fc 01       	movw	r30, r24
    10d8:	13 86       	std	Z+11, r1	; 0x0b
    10da:	15 86       	std	Z+13, r1	; 0x0d
    10dc:	14 86       	std	Z+12, r1	; 0x0c
    10de:	dc 01       	movw	r26, r24
    10e0:	1b 96       	adiw	r26, 0x0b	; 11
    10e2:	33 96       	adiw	r30, 0x03	; 3
    10e4:	1e 92       	st	-X, r1
    10e6:	ae 17       	cp	r26, r30
    10e8:	bf 07       	cpc	r27, r31
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <_ZN7OneWire12reset_searchEv+0xe>
    10ec:	08 95       	ret

000010ee <_ZN7OneWire5beginEh>:
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	ec 01       	movw	r28, r24
    10f6:	16 2f       	mov	r17, r22
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	81 2f       	mov	r24, r17
    10fc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
    1100:	61 2f       	mov	r22, r17
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	fb 01       	movw	r30, r22
    1106:	ea 53       	subi	r30, 0x3A	; 58
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	e4 91       	lpm	r30, Z
    110c:	e8 83       	st	Y, r30
    110e:	fb 01       	movw	r30, r22
    1110:	e6 52       	subi	r30, 0x26	; 38
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	e4 91       	lpm	r30, Z
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e2 51       	subi	r30, 0x12	; 18
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	85 91       	lpm	r24, Z+
    1122:	94 91       	lpm	r25, Z
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	ce 01       	movw	r24, r28
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <_ZN7OneWire12reset_searchEv>

00001134 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	ec 01       	movw	r28, r24
    1148:	6b 01       	movw	r12, r22
    114a:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    114c:	8d 85       	ldd	r24, Y+13	; 0x0d
    114e:	81 11       	cpse	r24, r1
    1150:	05 c0       	rjmp	.+10     	; 0x115c <_ZN7OneWire6searchEPhb+0x28>
      // 1-Wire reset
      if (!reset()) {
    1152:	ce 01       	movw	r24, r28
    1154:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN7OneWire5resetEv>
    1158:	81 11       	cpse	r24, r1
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <_ZN7OneWire6searchEPhb+0x32>
         // reset the search
         LastDiscrepancy = 0;
    115c:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = false;
    115e:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1160:	1c 86       	std	Y+12, r1	; 0x0c
         return false;
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	64 c0       	rjmp	.+200    	; 0x122e <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    1166:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
    1168:	11 23       	and	r17, r17
    116a:	11 f0       	breq	.+4      	; 0x1170 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
    116c:	60 ef       	ldi	r22, 0xF0	; 240
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    1170:	6c ee       	ldi	r22, 0xEC	; 236
    1172:	ce 01       	movw	r24, r28
    1174:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    1178:	01 e0       	ldi	r16, 0x01	; 1
    117a:	e1 2c       	mov	r14, r1
    117c:	b1 2c       	mov	r11, r1
    117e:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1180:	ce 01       	movw	r24, r28
    1182:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN7OneWire8read_bitEv>
    1186:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	f9 12       	cpse	r15, r25
    1192:	03 c0       	rjmp	.+6      	; 0x119a <_ZN7OneWire6searchEPhb+0x66>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	b1 f4       	brne	.+44     	; 0x11c4 <_ZN7OneWire6searchEPhb+0x90>
    1198:	34 c0       	rjmp	.+104    	; 0x1202 <_ZN7OneWire6searchEPhb+0xce>
    119a:	2e 2d       	mov	r18, r14
    119c:	30 e0       	ldi	r19, 0x00	; 0
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    119e:	f8 12       	cpse	r15, r24
    11a0:	1b c0       	rjmp	.+54     	; 0x11d8 <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    11a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a4:	18 17       	cp	r17, r24
    11a6:	38 f4       	brcc	.+14     	; 0x11b6 <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    11a8:	fe 01       	movw	r30, r28
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	83 81       	ldd	r24, Z+3	; 0x03
    11b0:	80 23       	and	r24, r16
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <_ZN7OneWire6searchEPhb+0x90>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <_ZN7OneWire6searchEPhb+0x86>
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    11b6:	18 17       	cp	r17, r24
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <_ZN7OneWire6searchEPhb+0x90>
    11ba:	f1 2c       	mov	r15, r1
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    11bc:	19 30       	cpi	r17, 0x09	; 9
    11be:	58 f4       	brcc	.+22     	; 0x11d6 <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
    11c0:	1c 87       	std	Y+12, r17	; 0x0c
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    11c4:	fe 01       	movw	r30, r28
    11c6:	ee 0d       	add	r30, r14
    11c8:	f1 1d       	adc	r31, r1
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	80 2b       	or	r24, r16
    11ce:	83 83       	std	Z+3, r24	; 0x03
    11d0:	ff 24       	eor	r15, r15
    11d2:	f3 94       	inc	r15
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    11d6:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    11d8:	fe 01       	movw	r30, r28
    11da:	e2 0f       	add	r30, r18
    11dc:	f3 1f       	adc	r31, r19
    11de:	93 81       	ldd	r25, Z+3	; 0x03
    11e0:	80 2f       	mov	r24, r16
    11e2:	80 95       	com	r24
    11e4:	89 23       	and	r24, r25
    11e6:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    11e8:	6f 2d       	mov	r22, r15
    11ea:	ce 01       	movw	r24, r28
    11ec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    11f0:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    11f2:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    11f4:	11 f4       	brne	.+4      	; 0x11fa <_ZN7OneWire6searchEPhb+0xc6>
                rom_byte_number++;
    11f6:	e3 94       	inc	r14
                rom_byte_mask = 1;
    11f8:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    11fa:	87 e0       	ldi	r24, 0x07	; 7
    11fc:	8e 15       	cp	r24, r14
    11fe:	08 f0       	brcs	.+2      	; 0x1202 <_ZN7OneWire6searchEPhb+0xce>
    1200:	bf cf       	rjmp	.-130    	; 0x1180 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    1202:	11 34       	cpi	r17, 0x41	; 65
    1204:	08 f4       	brcc	.+2      	; 0x1208 <_ZN7OneWire6searchEPhb+0xd4>
    1206:	aa cf       	rjmp	.-172    	; 0x115c <_ZN7OneWire6searchEPhb+0x28>
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1208:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0) {
    120a:	b1 10       	cpse	r11, r1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = true;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <_ZN7OneWire6searchEPhb+0xe6>
    1218:	a1 cf       	rjmp	.-190    	; 0x115c <_ZN7OneWire6searchEPhb+0x28>
    121a:	de 01       	movw	r26, r28
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	f6 01       	movw	r30, r12
    1220:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1222:	8d 91       	ld	r24, X+
    1224:	81 93       	st	Z+, r24
    1226:	ca 17       	cp	r28, r26
    1228:	db 07       	cpc	r29, r27
    122a:	d9 f7       	brne	.-10     	; 0x1222 <_ZN7OneWire6searchEPhb+0xee>
    122c:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	bf 90       	pop	r11
    1240:	08 95       	ret

00001242 <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    1242:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    1244:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    1246:	61 50       	subi	r22, 0x01	; 1
    1248:	98 f0       	brcs	.+38     	; 0x1270 <_ZN7OneWire4crc8EPKhh+0x2e>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    124a:	2d 91       	ld	r18, X+
    124c:	98 2f       	mov	r25, r24
    124e:	92 27       	eor	r25, r18
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    1250:	e9 2f       	mov	r30, r25
    1252:	ef 70       	andi	r30, 0x0F	; 15
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	ee 56       	subi	r30, 0x6E	; 110
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	24 91       	lpm	r18, Z
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    125c:	92 95       	swap	r25
    125e:	9f 70       	andi	r25, 0x0F	; 15
    1260:	e9 2f       	mov	r30, r25
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	ee 55       	subi	r30, 0x5E	; 94
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	e4 91       	lpm	r30, Z
    126a:	82 2f       	mov	r24, r18
    126c:	8e 27       	eor	r24, r30
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    126e:	eb cf       	rjmp	.-42     	; 0x1246 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    1270:	08 95       	ret

00001272 <__subsf3>:
    1272:	50 58       	subi	r21, 0x80	; 128

00001274 <__addsf3>:
    1274:	bb 27       	eor	r27, r27
    1276:	aa 27       	eor	r26, r26
    1278:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__addsf3x>
    127c:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_round>
    1280:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_pscA>
    1284:	38 f0       	brcs	.+14     	; 0x1294 <__addsf3+0x20>
    1286:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_pscB>
    128a:	20 f0       	brcs	.+8      	; 0x1294 <__addsf3+0x20>
    128c:	39 f4       	brne	.+14     	; 0x129c <__addsf3+0x28>
    128e:	9f 3f       	cpi	r25, 0xFF	; 255
    1290:	19 f4       	brne	.+6      	; 0x1298 <__addsf3+0x24>
    1292:	26 f4       	brtc	.+8      	; 0x129c <__addsf3+0x28>
    1294:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>
    1298:	0e f4       	brtc	.+2      	; 0x129c <__addsf3+0x28>
    129a:	e0 95       	com	r30
    129c:	e7 fb       	bst	r30, 7
    129e:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>

000012a2 <__addsf3x>:
    12a2:	e9 2f       	mov	r30, r25
    12a4:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_split3>
    12a8:	58 f3       	brcs	.-42     	; 0x1280 <__addsf3+0xc>
    12aa:	ba 17       	cp	r27, r26
    12ac:	62 07       	cpc	r22, r18
    12ae:	73 07       	cpc	r23, r19
    12b0:	84 07       	cpc	r24, r20
    12b2:	95 07       	cpc	r25, r21
    12b4:	20 f0       	brcs	.+8      	; 0x12be <__addsf3x+0x1c>
    12b6:	79 f4       	brne	.+30     	; 0x12d6 <__addsf3x+0x34>
    12b8:	a6 f5       	brtc	.+104    	; 0x1322 <__addsf3x+0x80>
    12ba:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_zero>
    12be:	0e f4       	brtc	.+2      	; 0x12c2 <__addsf3x+0x20>
    12c0:	e0 95       	com	r30
    12c2:	0b 2e       	mov	r0, r27
    12c4:	ba 2f       	mov	r27, r26
    12c6:	a0 2d       	mov	r26, r0
    12c8:	0b 01       	movw	r0, r22
    12ca:	b9 01       	movw	r22, r18
    12cc:	90 01       	movw	r18, r0
    12ce:	0c 01       	movw	r0, r24
    12d0:	ca 01       	movw	r24, r20
    12d2:	a0 01       	movw	r20, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	ff 27       	eor	r31, r31
    12d8:	59 1b       	sub	r21, r25
    12da:	99 f0       	breq	.+38     	; 0x1302 <__addsf3x+0x60>
    12dc:	59 3f       	cpi	r21, 0xF9	; 249
    12de:	50 f4       	brcc	.+20     	; 0x12f4 <__addsf3x+0x52>
    12e0:	50 3e       	cpi	r21, 0xE0	; 224
    12e2:	68 f1       	brcs	.+90     	; 0x133e <__addsf3x+0x9c>
    12e4:	1a 16       	cp	r1, r26
    12e6:	f0 40       	sbci	r31, 0x00	; 0
    12e8:	a2 2f       	mov	r26, r18
    12ea:	23 2f       	mov	r18, r19
    12ec:	34 2f       	mov	r19, r20
    12ee:	44 27       	eor	r20, r20
    12f0:	58 5f       	subi	r21, 0xF8	; 248
    12f2:	f3 cf       	rjmp	.-26     	; 0x12da <__addsf3x+0x38>
    12f4:	46 95       	lsr	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	a7 95       	ror	r26
    12fc:	f0 40       	sbci	r31, 0x00	; 0
    12fe:	53 95       	inc	r21
    1300:	c9 f7       	brne	.-14     	; 0x12f4 <__addsf3x+0x52>
    1302:	7e f4       	brtc	.+30     	; 0x1322 <__addsf3x+0x80>
    1304:	1f 16       	cp	r1, r31
    1306:	ba 0b       	sbc	r27, r26
    1308:	62 0b       	sbc	r22, r18
    130a:	73 0b       	sbc	r23, r19
    130c:	84 0b       	sbc	r24, r20
    130e:	ba f0       	brmi	.+46     	; 0x133e <__addsf3x+0x9c>
    1310:	91 50       	subi	r25, 0x01	; 1
    1312:	a1 f0       	breq	.+40     	; 0x133c <__addsf3x+0x9a>
    1314:	ff 0f       	add	r31, r31
    1316:	bb 1f       	adc	r27, r27
    1318:	66 1f       	adc	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	c2 f7       	brpl	.-16     	; 0x1310 <__addsf3x+0x6e>
    1320:	0e c0       	rjmp	.+28     	; 0x133e <__addsf3x+0x9c>
    1322:	ba 0f       	add	r27, r26
    1324:	62 1f       	adc	r22, r18
    1326:	73 1f       	adc	r23, r19
    1328:	84 1f       	adc	r24, r20
    132a:	48 f4       	brcc	.+18     	; 0x133e <__addsf3x+0x9c>
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	b7 95       	ror	r27
    1334:	f7 95       	ror	r31
    1336:	9e 3f       	cpi	r25, 0xFE	; 254
    1338:	08 f0       	brcs	.+2      	; 0x133c <__addsf3x+0x9a>
    133a:	b0 cf       	rjmp	.-160    	; 0x129c <__addsf3+0x28>
    133c:	93 95       	inc	r25
    133e:	88 0f       	add	r24, r24
    1340:	08 f0       	brcs	.+2      	; 0x1344 <__addsf3x+0xa2>
    1342:	99 27       	eor	r25, r25
    1344:	ee 0f       	add	r30, r30
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	08 95       	ret

0000134c <__cmpsf2>:
    134c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_cmp>
    1350:	08 f4       	brcc	.+2      	; 0x1354 <__cmpsf2+0x8>
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	08 95       	ret

00001356 <__divsf3>:
    1356:	0e 94 bf 09 	call	0x137e	; 0x137e <__divsf3x>
    135a:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_round>
    135e:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_pscB>
    1362:	58 f0       	brcs	.+22     	; 0x137a <__divsf3+0x24>
    1364:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_pscA>
    1368:	40 f0       	brcs	.+16     	; 0x137a <__divsf3+0x24>
    136a:	29 f4       	brne	.+10     	; 0x1376 <__divsf3+0x20>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	29 f0       	breq	.+10     	; 0x137a <__divsf3+0x24>
    1370:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    1374:	51 11       	cpse	r21, r1
    1376:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_szero>
    137a:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>

0000137e <__divsf3x>:
    137e:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_split3>
    1382:	68 f3       	brcs	.-38     	; 0x135e <__divsf3+0x8>

00001384 <__divsf3_pse>:
    1384:	99 23       	and	r25, r25
    1386:	b1 f3       	breq	.-20     	; 0x1374 <__divsf3+0x1e>
    1388:	55 23       	and	r21, r21
    138a:	91 f3       	breq	.-28     	; 0x1370 <__divsf3+0x1a>
    138c:	95 1b       	sub	r25, r21
    138e:	55 0b       	sbc	r21, r21
    1390:	bb 27       	eor	r27, r27
    1392:	aa 27       	eor	r26, r26
    1394:	62 17       	cp	r22, r18
    1396:	73 07       	cpc	r23, r19
    1398:	84 07       	cpc	r24, r20
    139a:	38 f0       	brcs	.+14     	; 0x13aa <__divsf3_pse+0x26>
    139c:	9f 5f       	subi	r25, 0xFF	; 255
    139e:	5f 4f       	sbci	r21, 0xFF	; 255
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	44 1f       	adc	r20, r20
    13a6:	aa 1f       	adc	r26, r26
    13a8:	a9 f3       	breq	.-22     	; 0x1394 <__divsf3_pse+0x10>
    13aa:	35 d0       	rcall	.+106    	; 0x1416 <__divsf3_pse+0x92>
    13ac:	0e 2e       	mov	r0, r30
    13ae:	3a f0       	brmi	.+14     	; 0x13be <__divsf3_pse+0x3a>
    13b0:	e0 e8       	ldi	r30, 0x80	; 128
    13b2:	32 d0       	rcall	.+100    	; 0x1418 <__divsf3_pse+0x94>
    13b4:	91 50       	subi	r25, 0x01	; 1
    13b6:	50 40       	sbci	r21, 0x00	; 0
    13b8:	e6 95       	lsr	r30
    13ba:	00 1c       	adc	r0, r0
    13bc:	ca f7       	brpl	.-14     	; 0x13b0 <__divsf3_pse+0x2c>
    13be:	2b d0       	rcall	.+86     	; 0x1416 <__divsf3_pse+0x92>
    13c0:	fe 2f       	mov	r31, r30
    13c2:	29 d0       	rcall	.+82     	; 0x1416 <__divsf3_pse+0x92>
    13c4:	66 0f       	add	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	bb 1f       	adc	r27, r27
    13cc:	26 17       	cp	r18, r22
    13ce:	37 07       	cpc	r19, r23
    13d0:	48 07       	cpc	r20, r24
    13d2:	ab 07       	cpc	r26, r27
    13d4:	b0 e8       	ldi	r27, 0x80	; 128
    13d6:	09 f0       	breq	.+2      	; 0x13da <__divsf3_pse+0x56>
    13d8:	bb 0b       	sbc	r27, r27
    13da:	80 2d       	mov	r24, r0
    13dc:	bf 01       	movw	r22, r30
    13de:	ff 27       	eor	r31, r31
    13e0:	93 58       	subi	r25, 0x83	; 131
    13e2:	5f 4f       	sbci	r21, 0xFF	; 255
    13e4:	3a f0       	brmi	.+14     	; 0x13f4 <__divsf3_pse+0x70>
    13e6:	9e 3f       	cpi	r25, 0xFE	; 254
    13e8:	51 05       	cpc	r21, r1
    13ea:	78 f0       	brcs	.+30     	; 0x140a <__divsf3_pse+0x86>
    13ec:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    13f0:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_szero>
    13f4:	5f 3f       	cpi	r21, 0xFF	; 255
    13f6:	e4 f3       	brlt	.-8      	; 0x13f0 <__divsf3_pse+0x6c>
    13f8:	98 3e       	cpi	r25, 0xE8	; 232
    13fa:	d4 f3       	brlt	.-12     	; 0x13f0 <__divsf3_pse+0x6c>
    13fc:	86 95       	lsr	r24
    13fe:	77 95       	ror	r23
    1400:	67 95       	ror	r22
    1402:	b7 95       	ror	r27
    1404:	f7 95       	ror	r31
    1406:	9f 5f       	subi	r25, 0xFF	; 255
    1408:	c9 f7       	brne	.-14     	; 0x13fc <__divsf3_pse+0x78>
    140a:	88 0f       	add	r24, r24
    140c:	91 1d       	adc	r25, r1
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	97 f9       	bld	r25, 7
    1414:	08 95       	ret
    1416:	e1 e0       	ldi	r30, 0x01	; 1
    1418:	66 0f       	add	r22, r22
    141a:	77 1f       	adc	r23, r23
    141c:	88 1f       	adc	r24, r24
    141e:	bb 1f       	adc	r27, r27
    1420:	62 17       	cp	r22, r18
    1422:	73 07       	cpc	r23, r19
    1424:	84 07       	cpc	r24, r20
    1426:	ba 07       	cpc	r27, r26
    1428:	20 f0       	brcs	.+8      	; 0x1432 <__divsf3_pse+0xae>
    142a:	62 1b       	sub	r22, r18
    142c:	73 0b       	sbc	r23, r19
    142e:	84 0b       	sbc	r24, r20
    1430:	ba 0b       	sbc	r27, r26
    1432:	ee 1f       	adc	r30, r30
    1434:	88 f7       	brcc	.-30     	; 0x1418 <__divsf3_pse+0x94>
    1436:	e0 95       	com	r30
    1438:	08 95       	ret

0000143a <__floatunsisf>:
    143a:	e8 94       	clt
    143c:	09 c0       	rjmp	.+18     	; 0x1450 <__floatsisf+0x12>

0000143e <__floatsisf>:
    143e:	97 fb       	bst	r25, 7
    1440:	3e f4       	brtc	.+14     	; 0x1450 <__floatsisf+0x12>
    1442:	90 95       	com	r25
    1444:	80 95       	com	r24
    1446:	70 95       	com	r23
    1448:	61 95       	neg	r22
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	99 23       	and	r25, r25
    1452:	a9 f0       	breq	.+42     	; 0x147e <__floatsisf+0x40>
    1454:	f9 2f       	mov	r31, r25
    1456:	96 e9       	ldi	r25, 0x96	; 150
    1458:	bb 27       	eor	r27, r27
    145a:	93 95       	inc	r25
    145c:	f6 95       	lsr	r31
    145e:	87 95       	ror	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	b7 95       	ror	r27
    1466:	f1 11       	cpse	r31, r1
    1468:	f8 cf       	rjmp	.-16     	; 0x145a <__floatsisf+0x1c>
    146a:	fa f4       	brpl	.+62     	; 0x14aa <__floatsisf+0x6c>
    146c:	bb 0f       	add	r27, r27
    146e:	11 f4       	brne	.+4      	; 0x1474 <__floatsisf+0x36>
    1470:	60 ff       	sbrs	r22, 0
    1472:	1b c0       	rjmp	.+54     	; 0x14aa <__floatsisf+0x6c>
    1474:	6f 5f       	subi	r22, 0xFF	; 255
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	16 c0       	rjmp	.+44     	; 0x14aa <__floatsisf+0x6c>
    147e:	88 23       	and	r24, r24
    1480:	11 f0       	breq	.+4      	; 0x1486 <__floatsisf+0x48>
    1482:	96 e9       	ldi	r25, 0x96	; 150
    1484:	11 c0       	rjmp	.+34     	; 0x14a8 <__floatsisf+0x6a>
    1486:	77 23       	and	r23, r23
    1488:	21 f0       	breq	.+8      	; 0x1492 <__floatsisf+0x54>
    148a:	9e e8       	ldi	r25, 0x8E	; 142
    148c:	87 2f       	mov	r24, r23
    148e:	76 2f       	mov	r23, r22
    1490:	05 c0       	rjmp	.+10     	; 0x149c <__floatsisf+0x5e>
    1492:	66 23       	and	r22, r22
    1494:	71 f0       	breq	.+28     	; 0x14b2 <__floatsisf+0x74>
    1496:	96 e8       	ldi	r25, 0x86	; 134
    1498:	86 2f       	mov	r24, r22
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	2a f0       	brmi	.+10     	; 0x14aa <__floatsisf+0x6c>
    14a0:	9a 95       	dec	r25
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	88 1f       	adc	r24, r24
    14a8:	da f7       	brpl	.-10     	; 0x14a0 <__floatsisf+0x62>
    14aa:	88 0f       	add	r24, r24
    14ac:	96 95       	lsr	r25
    14ae:	87 95       	ror	r24
    14b0:	97 f9       	bld	r25, 7
    14b2:	08 95       	ret

000014b4 <__fp_cmp>:
    14b4:	99 0f       	add	r25, r25
    14b6:	00 08       	sbc	r0, r0
    14b8:	55 0f       	add	r21, r21
    14ba:	aa 0b       	sbc	r26, r26
    14bc:	e0 e8       	ldi	r30, 0x80	; 128
    14be:	fe ef       	ldi	r31, 0xFE	; 254
    14c0:	16 16       	cp	r1, r22
    14c2:	17 06       	cpc	r1, r23
    14c4:	e8 07       	cpc	r30, r24
    14c6:	f9 07       	cpc	r31, r25
    14c8:	c0 f0       	brcs	.+48     	; 0x14fa <__fp_cmp+0x46>
    14ca:	12 16       	cp	r1, r18
    14cc:	13 06       	cpc	r1, r19
    14ce:	e4 07       	cpc	r30, r20
    14d0:	f5 07       	cpc	r31, r21
    14d2:	98 f0       	brcs	.+38     	; 0x14fa <__fp_cmp+0x46>
    14d4:	62 1b       	sub	r22, r18
    14d6:	73 0b       	sbc	r23, r19
    14d8:	84 0b       	sbc	r24, r20
    14da:	95 0b       	sbc	r25, r21
    14dc:	39 f4       	brne	.+14     	; 0x14ec <__fp_cmp+0x38>
    14de:	0a 26       	eor	r0, r26
    14e0:	61 f0       	breq	.+24     	; 0x14fa <__fp_cmp+0x46>
    14e2:	23 2b       	or	r18, r19
    14e4:	24 2b       	or	r18, r20
    14e6:	25 2b       	or	r18, r21
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <__fp_cmp+0x3e>
    14ea:	08 95       	ret
    14ec:	0a 26       	eor	r0, r26
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <__fp_cmp+0x3e>
    14f0:	a1 40       	sbci	r26, 0x01	; 1
    14f2:	a6 95       	lsr	r26
    14f4:	8f ef       	ldi	r24, 0xFF	; 255
    14f6:	81 1d       	adc	r24, r1
    14f8:	81 1d       	adc	r24, r1
    14fa:	08 95       	ret

000014fc <__fp_inf>:
    14fc:	97 f9       	bld	r25, 7
    14fe:	9f 67       	ori	r25, 0x7F	; 127
    1500:	80 e8       	ldi	r24, 0x80	; 128
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	08 95       	ret

00001508 <__fp_nan>:
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	80 ec       	ldi	r24, 0xC0	; 192
    150c:	08 95       	ret

0000150e <__fp_pscA>:
    150e:	00 24       	eor	r0, r0
    1510:	0a 94       	dec	r0
    1512:	16 16       	cp	r1, r22
    1514:	17 06       	cpc	r1, r23
    1516:	18 06       	cpc	r1, r24
    1518:	09 06       	cpc	r0, r25
    151a:	08 95       	ret

0000151c <__fp_pscB>:
    151c:	00 24       	eor	r0, r0
    151e:	0a 94       	dec	r0
    1520:	12 16       	cp	r1, r18
    1522:	13 06       	cpc	r1, r19
    1524:	14 06       	cpc	r1, r20
    1526:	05 06       	cpc	r0, r21
    1528:	08 95       	ret

0000152a <__fp_round>:
    152a:	09 2e       	mov	r0, r25
    152c:	03 94       	inc	r0
    152e:	00 0c       	add	r0, r0
    1530:	11 f4       	brne	.+4      	; 0x1536 <__fp_round+0xc>
    1532:	88 23       	and	r24, r24
    1534:	52 f0       	brmi	.+20     	; 0x154a <__fp_round+0x20>
    1536:	bb 0f       	add	r27, r27
    1538:	40 f4       	brcc	.+16     	; 0x154a <__fp_round+0x20>
    153a:	bf 2b       	or	r27, r31
    153c:	11 f4       	brne	.+4      	; 0x1542 <__fp_round+0x18>
    153e:	60 ff       	sbrs	r22, 0
    1540:	04 c0       	rjmp	.+8      	; 0x154a <__fp_round+0x20>
    1542:	6f 5f       	subi	r22, 0xFF	; 255
    1544:	7f 4f       	sbci	r23, 0xFF	; 255
    1546:	8f 4f       	sbci	r24, 0xFF	; 255
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	08 95       	ret

0000154c <__fp_split3>:
    154c:	57 fd       	sbrc	r21, 7
    154e:	90 58       	subi	r25, 0x80	; 128
    1550:	44 0f       	add	r20, r20
    1552:	55 1f       	adc	r21, r21
    1554:	59 f0       	breq	.+22     	; 0x156c <__fp_splitA+0x10>
    1556:	5f 3f       	cpi	r21, 0xFF	; 255
    1558:	71 f0       	breq	.+28     	; 0x1576 <__fp_splitA+0x1a>
    155a:	47 95       	ror	r20

0000155c <__fp_splitA>:
    155c:	88 0f       	add	r24, r24
    155e:	97 fb       	bst	r25, 7
    1560:	99 1f       	adc	r25, r25
    1562:	61 f0       	breq	.+24     	; 0x157c <__fp_splitA+0x20>
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	79 f0       	breq	.+30     	; 0x1586 <__fp_splitA+0x2a>
    1568:	87 95       	ror	r24
    156a:	08 95       	ret
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	55 1f       	adc	r21, r21
    1574:	f2 cf       	rjmp	.-28     	; 0x155a <__fp_split3+0xe>
    1576:	46 95       	lsr	r20
    1578:	f1 df       	rcall	.-30     	; 0x155c <__fp_splitA>
    157a:	08 c0       	rjmp	.+16     	; 0x158c <__fp_splitA+0x30>
    157c:	16 16       	cp	r1, r22
    157e:	17 06       	cpc	r1, r23
    1580:	18 06       	cpc	r1, r24
    1582:	99 1f       	adc	r25, r25
    1584:	f1 cf       	rjmp	.-30     	; 0x1568 <__fp_splitA+0xc>
    1586:	86 95       	lsr	r24
    1588:	71 05       	cpc	r23, r1
    158a:	61 05       	cpc	r22, r1
    158c:	08 94       	sec
    158e:	08 95       	ret

00001590 <__fp_zero>:
    1590:	e8 94       	clt

00001592 <__fp_szero>:
    1592:	bb 27       	eor	r27, r27
    1594:	66 27       	eor	r22, r22
    1596:	77 27       	eor	r23, r23
    1598:	cb 01       	movw	r24, r22
    159a:	97 f9       	bld	r25, 7
    159c:	08 95       	ret

0000159e <__gesf2>:
    159e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_cmp>
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <__gesf2+0x8>
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	08 95       	ret

000015a8 <__mulsf3>:
    15a8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__mulsf3x>
    15ac:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__fp_round>
    15b0:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_pscA>
    15b4:	38 f0       	brcs	.+14     	; 0x15c4 <__mulsf3+0x1c>
    15b6:	0e 94 8e 0a 	call	0x151c	; 0x151c <__fp_pscB>
    15ba:	20 f0       	brcs	.+8      	; 0x15c4 <__mulsf3+0x1c>
    15bc:	95 23       	and	r25, r21
    15be:	11 f0       	breq	.+4      	; 0x15c4 <__mulsf3+0x1c>
    15c0:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    15c4:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_nan>
    15c8:	11 24       	eor	r1, r1
    15ca:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_szero>

000015ce <__mulsf3x>:
    15ce:	0e 94 a6 0a 	call	0x154c	; 0x154c <__fp_split3>
    15d2:	70 f3       	brcs	.-36     	; 0x15b0 <__mulsf3+0x8>

000015d4 <__mulsf3_pse>:
    15d4:	95 9f       	mul	r25, r21
    15d6:	c1 f3       	breq	.-16     	; 0x15c8 <__mulsf3+0x20>
    15d8:	95 0f       	add	r25, r21
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	55 1f       	adc	r21, r21
    15de:	62 9f       	mul	r22, r18
    15e0:	f0 01       	movw	r30, r0
    15e2:	72 9f       	mul	r23, r18
    15e4:	bb 27       	eor	r27, r27
    15e6:	f0 0d       	add	r31, r0
    15e8:	b1 1d       	adc	r27, r1
    15ea:	63 9f       	mul	r22, r19
    15ec:	aa 27       	eor	r26, r26
    15ee:	f0 0d       	add	r31, r0
    15f0:	b1 1d       	adc	r27, r1
    15f2:	aa 1f       	adc	r26, r26
    15f4:	64 9f       	mul	r22, r20
    15f6:	66 27       	eor	r22, r22
    15f8:	b0 0d       	add	r27, r0
    15fa:	a1 1d       	adc	r26, r1
    15fc:	66 1f       	adc	r22, r22
    15fe:	82 9f       	mul	r24, r18
    1600:	22 27       	eor	r18, r18
    1602:	b0 0d       	add	r27, r0
    1604:	a1 1d       	adc	r26, r1
    1606:	62 1f       	adc	r22, r18
    1608:	73 9f       	mul	r23, r19
    160a:	b0 0d       	add	r27, r0
    160c:	a1 1d       	adc	r26, r1
    160e:	62 1f       	adc	r22, r18
    1610:	83 9f       	mul	r24, r19
    1612:	a0 0d       	add	r26, r0
    1614:	61 1d       	adc	r22, r1
    1616:	22 1f       	adc	r18, r18
    1618:	74 9f       	mul	r23, r20
    161a:	33 27       	eor	r19, r19
    161c:	a0 0d       	add	r26, r0
    161e:	61 1d       	adc	r22, r1
    1620:	23 1f       	adc	r18, r19
    1622:	84 9f       	mul	r24, r20
    1624:	60 0d       	add	r22, r0
    1626:	21 1d       	adc	r18, r1
    1628:	82 2f       	mov	r24, r18
    162a:	76 2f       	mov	r23, r22
    162c:	6a 2f       	mov	r22, r26
    162e:	11 24       	eor	r1, r1
    1630:	9f 57       	subi	r25, 0x7F	; 127
    1632:	50 40       	sbci	r21, 0x00	; 0
    1634:	9a f0       	brmi	.+38     	; 0x165c <__mulsf3_pse+0x88>
    1636:	f1 f0       	breq	.+60     	; 0x1674 <__mulsf3_pse+0xa0>
    1638:	88 23       	and	r24, r24
    163a:	4a f0       	brmi	.+18     	; 0x164e <__mulsf3_pse+0x7a>
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	bb 1f       	adc	r27, r27
    1642:	66 1f       	adc	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	91 50       	subi	r25, 0x01	; 1
    164a:	50 40       	sbci	r21, 0x00	; 0
    164c:	a9 f7       	brne	.-22     	; 0x1638 <__mulsf3_pse+0x64>
    164e:	9e 3f       	cpi	r25, 0xFE	; 254
    1650:	51 05       	cpc	r21, r1
    1652:	80 f0       	brcs	.+32     	; 0x1674 <__mulsf3_pse+0xa0>
    1654:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__fp_inf>
    1658:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__fp_szero>
    165c:	5f 3f       	cpi	r21, 0xFF	; 255
    165e:	e4 f3       	brlt	.-8      	; 0x1658 <__mulsf3_pse+0x84>
    1660:	98 3e       	cpi	r25, 0xE8	; 232
    1662:	d4 f3       	brlt	.-12     	; 0x1658 <__mulsf3_pse+0x84>
    1664:	86 95       	lsr	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b7 95       	ror	r27
    166c:	f7 95       	ror	r31
    166e:	e7 95       	ror	r30
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	c1 f7       	brne	.-16     	; 0x1664 <__mulsf3_pse+0x90>
    1674:	fe 2b       	or	r31, r30
    1676:	88 0f       	add	r24, r24
    1678:	91 1d       	adc	r25, r1
    167a:	96 95       	lsr	r25
    167c:	87 95       	ror	r24
    167e:	97 f9       	bld	r25, 7
    1680:	08 95       	ret

00001682 <_ZN14HardwareSerial9availableEv>:
    1682:	fc 01       	movw	r30, r24
    1684:	91 8d       	ldd	r25, Z+25	; 0x19
    1686:	22 8d       	ldd	r18, Z+26	; 0x1a
    1688:	89 2f       	mov	r24, r25
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	80 5c       	subi	r24, 0xC0	; 192
    168e:	9f 4f       	sbci	r25, 0xFF	; 255
    1690:	82 1b       	sub	r24, r18
    1692:	91 09       	sbc	r25, r1
    1694:	8f 73       	andi	r24, 0x3F	; 63
    1696:	99 27       	eor	r25, r25
    1698:	08 95       	ret

0000169a <_ZN14HardwareSerial4peekEv>:
    169a:	fc 01       	movw	r30, r24
    169c:	91 8d       	ldd	r25, Z+25	; 0x19
    169e:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a0:	98 17       	cp	r25, r24
    16a2:	31 f0       	breq	.+12     	; 0x16b0 <_ZN14HardwareSerial4peekEv+0x16>
    16a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a6:	e8 0f       	add	r30, r24
    16a8:	f1 1d       	adc	r31, r1
    16aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	08 95       	ret
    16b0:	8f ef       	ldi	r24, 0xFF	; 255
    16b2:	9f ef       	ldi	r25, 0xFF	; 255
    16b4:	08 95       	ret

000016b6 <_ZN14HardwareSerial4readEv>:
    16b6:	fc 01       	movw	r30, r24
    16b8:	91 8d       	ldd	r25, Z+25	; 0x19
    16ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    16bc:	98 17       	cp	r25, r24
    16be:	61 f0       	breq	.+24     	; 0x16d8 <_ZN14HardwareSerial4readEv+0x22>
    16c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16c2:	df 01       	movw	r26, r30
    16c4:	a8 0f       	add	r26, r24
    16c6:	b1 1d       	adc	r27, r1
    16c8:	5d 96       	adiw	r26, 0x1d	; 29
    16ca:	8c 91       	ld	r24, X
    16cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    16ce:	9f 5f       	subi	r25, 0xFF	; 255
    16d0:	9f 73       	andi	r25, 0x3F	; 63
    16d2:	92 8f       	std	Z+26, r25	; 0x1a
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	08 95       	ret
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	08 95       	ret

000016de <_ZN14HardwareSerial17availableForWriteEv>:
    16de:	fc 01       	movw	r30, r24
    16e0:	53 8d       	ldd	r21, Z+27	; 0x1b
    16e2:	44 8d       	ldd	r20, Z+28	; 0x1c
    16e4:	25 2f       	mov	r18, r21
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	84 2f       	mov	r24, r20
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	82 1b       	sub	r24, r18
    16ee:	93 0b       	sbc	r25, r19
    16f0:	54 17       	cp	r21, r20
    16f2:	10 f0       	brcs	.+4      	; 0x16f8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    16f4:	cf 96       	adiw	r24, 0x3f	; 63
    16f6:	08 95       	ret
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	08 95       	ret

000016fc <_Z14serialEventRunv>:
    16fc:	8a ed       	ldi	r24, 0xDA	; 218
    16fe:	9c e0       	ldi	r25, 0x0C	; 12
    1700:	89 2b       	or	r24, r25
    1702:	49 f0       	breq	.+18     	; 0x1716 <_Z14serialEventRunv+0x1a>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	89 2b       	or	r24, r25
    170a:	29 f0       	breq	.+10     	; 0x1716 <_Z14serialEventRunv+0x1a>
    170c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_Z17Serial0_availablev>
    1710:	81 11       	cpse	r24, r1
    1712:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1716:	08 95       	ret

00001718 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    1718:	fc 01       	movw	r30, r24
    171a:	84 8d       	ldd	r24, Z+28	; 0x1c
    171c:	df 01       	movw	r26, r30
    171e:	a8 0f       	add	r26, r24
    1720:	b1 1d       	adc	r27, r1
    1722:	a3 5a       	subi	r26, 0xA3	; 163
    1724:	bf 4f       	sbci	r27, 0xFF	; 255
    1726:	2c 91       	ld	r18, X
    1728:	84 8d       	ldd	r24, Z+28	; 0x1c
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	8f 73       	andi	r24, 0x3F	; 63
    1730:	99 27       	eor	r25, r25
    1732:	84 8f       	std	Z+28, r24	; 0x1c
    1734:	a6 89       	ldd	r26, Z+22	; 0x16
    1736:	b7 89       	ldd	r27, Z+23	; 0x17
    1738:	2c 93       	st	X, r18
    173a:	a0 89       	ldd	r26, Z+16	; 0x10
    173c:	b1 89       	ldd	r27, Z+17	; 0x11
    173e:	8c 91       	ld	r24, X
    1740:	83 70       	andi	r24, 0x03	; 3
    1742:	80 64       	ori	r24, 0x40	; 64
    1744:	8c 93       	st	X, r24
    1746:	93 8d       	ldd	r25, Z+27	; 0x1b
    1748:	84 8d       	ldd	r24, Z+28	; 0x1c
    174a:	98 13       	cpse	r25, r24
    174c:	06 c0       	rjmp	.+12     	; 0x175a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    174e:	02 88       	ldd	r0, Z+18	; 0x12
    1750:	f3 89       	ldd	r31, Z+19	; 0x13
    1752:	e0 2d       	mov	r30, r0
    1754:	80 81       	ld	r24, Z
    1756:	8f 7d       	andi	r24, 0xDF	; 223
    1758:	80 83       	st	Z, r24
    175a:	08 95       	ret

0000175c <_ZN14HardwareSerial5writeEh>:
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	88 8f       	std	Y+24, r24	; 0x18
    176e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1770:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1772:	98 13       	cpse	r25, r24
    1774:	05 c0       	rjmp	.+10     	; 0x1780 <_ZN14HardwareSerial5writeEh+0x24>
    1776:	e8 89       	ldd	r30, Y+16	; 0x10
    1778:	f9 89       	ldd	r31, Y+17	; 0x11
    177a:	80 81       	ld	r24, Z
    177c:	85 fd       	sbrc	r24, 5
    177e:	26 c0       	rjmp	.+76     	; 0x17cc <_ZN14HardwareSerial5writeEh+0x70>
    1780:	f6 2e       	mov	r15, r22
    1782:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	0f 5f       	subi	r16, 0xFF	; 255
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	0f 73       	andi	r16, 0x3F	; 63
    178c:	11 27       	eor	r17, r17
    178e:	e0 2e       	mov	r14, r16
    1790:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1792:	e8 12       	cpse	r14, r24
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <_ZN14HardwareSerial5writeEh+0x52>
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	07 fc       	sbrc	r0, 7
    179a:	fa cf       	rjmp	.-12     	; 0x1790 <_ZN14HardwareSerial5writeEh+0x34>
    179c:	e8 89       	ldd	r30, Y+16	; 0x10
    179e:	f9 89       	ldd	r31, Y+17	; 0x11
    17a0:	80 81       	ld	r24, Z
    17a2:	85 ff       	sbrs	r24, 5
    17a4:	f5 cf       	rjmp	.-22     	; 0x1790 <_ZN14HardwareSerial5writeEh+0x34>
    17a6:	ce 01       	movw	r24, r28
    17a8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    17ac:	f1 cf       	rjmp	.-30     	; 0x1790 <_ZN14HardwareSerial5writeEh+0x34>
    17ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b0:	fe 01       	movw	r30, r28
    17b2:	e8 0f       	add	r30, r24
    17b4:	f1 1d       	adc	r31, r1
    17b6:	e3 5a       	subi	r30, 0xA3	; 163
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	f0 82       	st	Z, r15
    17bc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17be:	f8 94       	cli
    17c0:	0b 8f       	std	Y+27, r16	; 0x1b
    17c2:	ea 89       	ldd	r30, Y+18	; 0x12
    17c4:	fb 89       	ldd	r31, Y+19	; 0x13
    17c6:	80 81       	ld	r24, Z
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	0a c0       	rjmp	.+20     	; 0x17e0 <_ZN14HardwareSerial5writeEh+0x84>
    17cc:	9f b7       	in	r25, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	ee 89       	ldd	r30, Y+22	; 0x16
    17d2:	ff 89       	ldd	r31, Y+23	; 0x17
    17d4:	60 83       	st	Z, r22
    17d6:	e8 89       	ldd	r30, Y+16	; 0x10
    17d8:	f9 89       	ldd	r31, Y+17	; 0x11
    17da:	80 81       	ld	r24, Z
    17dc:	83 70       	andi	r24, 0x03	; 3
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    17e2:	9f bf       	out	0x3f, r25	; 63
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	08 95       	ret

000017f6 <_ZN14HardwareSerial5flushEv>:
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	ec 01       	movw	r28, r24
    17fc:	88 8d       	ldd	r24, Y+24	; 0x18
    17fe:	88 23       	and	r24, r24
    1800:	c9 f0       	breq	.+50     	; 0x1834 <_ZN14HardwareSerial5flushEv+0x3e>
    1802:	ea 89       	ldd	r30, Y+18	; 0x12
    1804:	fb 89       	ldd	r31, Y+19	; 0x13
    1806:	80 81       	ld	r24, Z
    1808:	85 fd       	sbrc	r24, 5
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <_ZN14HardwareSerial5flushEv+0x20>
    180c:	a8 89       	ldd	r26, Y+16	; 0x10
    180e:	b9 89       	ldd	r27, Y+17	; 0x11
    1810:	8c 91       	ld	r24, X
    1812:	86 fd       	sbrc	r24, 6
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <_ZN14HardwareSerial5flushEv+0x3e>
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	07 fc       	sbrc	r0, 7
    181a:	f5 cf       	rjmp	.-22     	; 0x1806 <_ZN14HardwareSerial5flushEv+0x10>
    181c:	80 81       	ld	r24, Z
    181e:	85 ff       	sbrs	r24, 5
    1820:	f2 cf       	rjmp	.-28     	; 0x1806 <_ZN14HardwareSerial5flushEv+0x10>
    1822:	a8 89       	ldd	r26, Y+16	; 0x10
    1824:	b9 89       	ldd	r27, Y+17	; 0x11
    1826:	8c 91       	ld	r24, X
    1828:	85 ff       	sbrs	r24, 5
    182a:	ed cf       	rjmp	.-38     	; 0x1806 <_ZN14HardwareSerial5flushEv+0x10>
    182c:	ce 01       	movw	r24, r28
    182e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1832:	e7 cf       	rjmp	.-50     	; 0x1802 <_ZN14HardwareSerial5flushEv+0xc>
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <_ZN14HardwareSerial5beginEmh>:
    183a:	cf 92       	push	r12
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ec 01       	movw	r28, r24
    184a:	6a 01       	movw	r12, r20
    184c:	7b 01       	movw	r14, r22
    184e:	12 2f       	mov	r17, r18
    1850:	e8 89       	ldd	r30, Y+16	; 0x10
    1852:	f9 89       	ldd	r31, Y+17	; 0x11
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	80 83       	st	Z, r24
    1858:	41 15       	cp	r20, r1
    185a:	51 4e       	sbci	r21, 0xE1	; 225
    185c:	61 05       	cpc	r22, r1
    185e:	71 05       	cpc	r23, r1
    1860:	b1 f0       	breq	.+44     	; 0x188e <_ZN14HardwareSerial5beginEmh+0x54>
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	79 e0       	ldi	r23, 0x09	; 9
    1866:	8d e3       	ldi	r24, 0x3D	; 61
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a7 01       	movw	r20, r14
    186c:	96 01       	movw	r18, r12
    186e:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <__udivmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	a1 09       	sbc	r26, r1
    187a:	b1 09       	sbc	r27, r1
    187c:	b6 95       	lsr	r27
    187e:	a7 95       	ror	r26
    1880:	97 95       	ror	r25
    1882:	87 95       	ror	r24
    1884:	9c 01       	movw	r18, r24
    1886:	21 15       	cp	r18, r1
    1888:	80 e1       	ldi	r24, 0x10	; 16
    188a:	38 07       	cpc	r19, r24
    188c:	a8 f0       	brcs	.+42     	; 0x18b8 <_ZN14HardwareSerial5beginEmh+0x7e>
    188e:	e8 89       	ldd	r30, Y+16	; 0x10
    1890:	f9 89       	ldd	r31, Y+17	; 0x11
    1892:	10 82       	st	Z, r1
    1894:	60 e8       	ldi	r22, 0x80	; 128
    1896:	74 e8       	ldi	r23, 0x84	; 132
    1898:	8e e1       	ldi	r24, 0x1E	; 30
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a7 01       	movw	r20, r14
    189e:	96 01       	movw	r18, r12
    18a0:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <__udivmodsi4>
    18a4:	da 01       	movw	r26, r20
    18a6:	c9 01       	movw	r24, r18
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	a1 09       	sbc	r26, r1
    18ac:	b1 09       	sbc	r27, r1
    18ae:	b6 95       	lsr	r27
    18b0:	a7 95       	ror	r26
    18b2:	97 95       	ror	r25
    18b4:	87 95       	ror	r24
    18b6:	9c 01       	movw	r18, r24
    18b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    18ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    18bc:	30 83       	st	Z, r19
    18be:	ee 85       	ldd	r30, Y+14	; 0x0e
    18c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    18c2:	20 83       	st	Z, r18
    18c4:	18 8e       	std	Y+24, r1	; 0x18
    18c6:	ec 89       	ldd	r30, Y+20	; 0x14
    18c8:	fd 89       	ldd	r31, Y+21	; 0x15
    18ca:	10 83       	st	Z, r17
    18cc:	ea 89       	ldd	r30, Y+18	; 0x12
    18ce:	fb 89       	ldd	r31, Y+19	; 0x13
    18d0:	80 81       	ld	r24, Z
    18d2:	80 61       	ori	r24, 0x10	; 16
    18d4:	80 83       	st	Z, r24
    18d6:	ea 89       	ldd	r30, Y+18	; 0x12
    18d8:	fb 89       	ldd	r31, Y+19	; 0x13
    18da:	80 81       	ld	r24, Z
    18dc:	88 60       	ori	r24, 0x08	; 8
    18de:	80 83       	st	Z, r24
    18e0:	ea 89       	ldd	r30, Y+18	; 0x12
    18e2:	fb 89       	ldd	r31, Y+19	; 0x13
    18e4:	80 81       	ld	r24, Z
    18e6:	80 68       	ori	r24, 0x80	; 128
    18e8:	80 83       	st	Z, r24
    18ea:	ea 89       	ldd	r30, Y+18	; 0x12
    18ec:	fb 89       	ldd	r31, Y+19	; 0x13
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7d       	andi	r24, 0xDF	; 223
    18f2:	80 83       	st	Z, r24
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	08 95       	ret

00001904 <__vector_18>:
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	2f 93       	push	r18
    1910:	8f 93       	push	r24
    1912:	9f 93       	push	r25
    1914:	ef 93       	push	r30
    1916:	ff 93       	push	r31
    1918:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <Serial+0x10>
    191c:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <Serial+0x11>
    1920:	80 81       	ld	r24, Z
    1922:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <Serial+0x16>
    1926:	f0 91 8e 03 	lds	r31, 0x038E	; 0x80038e <Serial+0x17>
    192a:	82 fd       	sbrc	r24, 2
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <__vector_18+0x4e>
    192e:	90 81       	ld	r25, Z
    1930:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Serial+0x19>
    1934:	8f 5f       	subi	r24, 0xFF	; 255
    1936:	8f 73       	andi	r24, 0x3F	; 63
    1938:	20 91 91 03 	lds	r18, 0x0391	; 0x800391 <Serial+0x1a>
    193c:	82 17       	cp	r24, r18
    193e:	51 f0       	breq	.+20     	; 0x1954 <__vector_18+0x50>
    1940:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <Serial+0x19>
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	e9 58       	subi	r30, 0x89	; 137
    1948:	fc 4f       	sbci	r31, 0xFC	; 252
    194a:	95 8f       	std	Z+29, r25	; 0x1d
    194c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Serial+0x19>
    1950:	01 c0       	rjmp	.+2      	; 0x1954 <__vector_18+0x50>
    1952:	80 81       	ld	r24, Z
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	2f 91       	pop	r18
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_19>:
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	87 e7       	ldi	r24, 0x77	; 119
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <_Z17Serial0_availablev>:
    19b4:	87 e7       	ldi	r24, 0x77	; 119
    19b6:	93 e0       	ldi	r25, 0x03	; 3
    19b8:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN14HardwareSerial9availableEv>
    19bc:	21 e0       	ldi	r18, 0x01	; 1
    19be:	89 2b       	or	r24, r25
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <_Z17Serial0_availablev+0x10>
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	82 2f       	mov	r24, r18
    19c6:	08 95       	ret

000019c8 <_GLOBAL__sub_I___vector_18>:
    19c8:	e7 e7       	ldi	r30, 0x77	; 119
    19ca:	f3 e0       	ldi	r31, 0x03	; 3
    19cc:	13 82       	std	Z+3, r1	; 0x03
    19ce:	12 82       	std	Z+2, r1	; 0x02
    19d0:	88 ee       	ldi	r24, 0xE8	; 232
    19d2:	93 e0       	ldi	r25, 0x03	; 3
    19d4:	a0 e0       	ldi	r26, 0x00	; 0
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	84 83       	std	Z+4, r24	; 0x04
    19da:	95 83       	std	Z+5, r25	; 0x05
    19dc:	a6 83       	std	Z+6, r26	; 0x06
    19de:	b7 83       	std	Z+7, r27	; 0x07
    19e0:	8c e3       	ldi	r24, 0x3C	; 60
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
    19e8:	85 ec       	ldi	r24, 0xC5	; 197
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	95 87       	std	Z+13, r25	; 0x0d
    19ee:	84 87       	std	Z+12, r24	; 0x0c
    19f0:	84 ec       	ldi	r24, 0xC4	; 196
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	97 87       	std	Z+15, r25	; 0x0f
    19f6:	86 87       	std	Z+14, r24	; 0x0e
    19f8:	80 ec       	ldi	r24, 0xC0	; 192
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	91 8b       	std	Z+17, r25	; 0x11
    19fe:	80 8b       	std	Z+16, r24	; 0x10
    1a00:	81 ec       	ldi	r24, 0xC1	; 193
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	93 8b       	std	Z+19, r25	; 0x13
    1a06:	82 8b       	std	Z+18, r24	; 0x12
    1a08:	82 ec       	ldi	r24, 0xC2	; 194
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	95 8b       	std	Z+21, r25	; 0x15
    1a0e:	84 8b       	std	Z+20, r24	; 0x14
    1a10:	86 ec       	ldi	r24, 0xC6	; 198
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	97 8b       	std	Z+23, r25	; 0x17
    1a16:	86 8b       	std	Z+22, r24	; 0x16
    1a18:	11 8e       	std	Z+25, r1	; 0x19
    1a1a:	12 8e       	std	Z+26, r1	; 0x1a
    1a1c:	13 8e       	std	Z+27, r1	; 0x1b
    1a1e:	14 8e       	std	Z+28, r1	; 0x1c
    1a20:	08 95       	ret

00001a22 <main>:
    1a22:	0e 94 19 10 	call	0x2032	; 0x2032 <init>
    1a26:	0e 94 bf 1c 	call	0x397e	; 0x397e <initVariant>
    1a2a:	0e 94 64 05 	call	0xac8	; 0xac8 <setup>
    1a2e:	ce e7       	ldi	r28, 0x7E	; 126
    1a30:	db e0       	ldi	r29, 0x0B	; 11
    1a32:	0e 94 c6 05 	call	0xb8c	; 0xb8c <loop>
    1a36:	20 97       	sbiw	r28, 0x00	; 0
    1a38:	e1 f3       	breq	.-8      	; 0x1a32 <main+0x10>
    1a3a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <_Z14serialEventRunv>
    1a3e:	f9 cf       	rjmp	.-14     	; 0x1a32 <main+0x10>

00001a40 <_ZN5Print5writeEPKhj>:
    1a40:	cf 92       	push	r12
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	6c 01       	movw	r12, r24
    1a52:	7a 01       	movw	r14, r20
    1a54:	8b 01       	movw	r16, r22
    1a56:	c0 e0       	ldi	r28, 0x00	; 0
    1a58:	d0 e0       	ldi	r29, 0x00	; 0
    1a5a:	ce 15       	cp	r28, r14
    1a5c:	df 05       	cpc	r29, r15
    1a5e:	81 f0       	breq	.+32     	; 0x1a80 <_ZN5Print5writeEPKhj+0x40>
    1a60:	d8 01       	movw	r26, r16
    1a62:	6d 91       	ld	r22, X+
    1a64:	8d 01       	movw	r16, r26
    1a66:	d6 01       	movw	r26, r12
    1a68:	ed 91       	ld	r30, X+
    1a6a:	fc 91       	ld	r31, X
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	f0 81       	ld	r31, Z
    1a70:	e0 2d       	mov	r30, r0
    1a72:	c6 01       	movw	r24, r12
    1a74:	09 95       	icall
    1a76:	89 2b       	or	r24, r25
    1a78:	11 f0       	breq	.+4      	; 0x1a7e <_ZN5Print5writeEPKhj+0x3e>
    1a7a:	21 96       	adiw	r28, 0x01	; 1
    1a7c:	ee cf       	rjmp	.-36     	; 0x1a5a <_ZN5Print5writeEPKhj+0x1a>
    1a7e:	7e 01       	movw	r14, r28
    1a80:	c7 01       	movw	r24, r14
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	df 90       	pop	r13
    1a90:	cf 90       	pop	r12
    1a92:	08 95       	ret

00001a94 <_ZN5Print5writeEPKc>:
    1a94:	61 15       	cp	r22, r1
    1a96:	71 05       	cpc	r23, r1
    1a98:	79 f0       	breq	.+30     	; 0x1ab8 <_ZN5Print5writeEPKc+0x24>
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	00 20       	and	r0, r0
    1aa0:	e9 f7       	brne	.-6      	; 0x1a9c <_ZN5Print5writeEPKc+0x8>
    1aa2:	31 97       	sbiw	r30, 0x01	; 1
    1aa4:	af 01       	movw	r20, r30
    1aa6:	46 1b       	sub	r20, r22
    1aa8:	57 0b       	sbc	r21, r23
    1aaa:	dc 01       	movw	r26, r24
    1aac:	ed 91       	ld	r30, X+
    1aae:	fc 91       	ld	r31, X
    1ab0:	02 80       	ldd	r0, Z+2	; 0x02
    1ab2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	09 94       	ijmp
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	08 95       	ret

00001abe <_ZN5Print5printEPK19__FlashStringHelper>:
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	8c 01       	movw	r16, r24
    1acc:	7b 01       	movw	r14, r22
    1ace:	c0 e0       	ldi	r28, 0x00	; 0
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	ec 0f       	add	r30, r28
    1ad6:	fd 1f       	adc	r31, r29
    1ad8:	64 91       	lpm	r22, Z
    1ada:	66 23       	and	r22, r22
    1adc:	61 f0       	breq	.+24     	; 0x1af6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1ade:	d8 01       	movw	r26, r16
    1ae0:	ed 91       	ld	r30, X+
    1ae2:	fc 91       	ld	r31, X
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	f0 81       	ld	r31, Z
    1ae8:	e0 2d       	mov	r30, r0
    1aea:	c8 01       	movw	r24, r16
    1aec:	09 95       	icall
    1aee:	89 2b       	or	r24, r25
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1af2:	21 96       	adiw	r28, 0x01	; 1
    1af4:	ee cf       	rjmp	.-36     	; 0x1ad2 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1af6:	ce 01       	movw	r24, r28
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <_ZN5Print5printEPKc>:
    1b06:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN5Print5writeEPKc>

00001b0a <_ZN5Print5printEc>:
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	ed 91       	ld	r30, X+
    1b0e:	fc 91       	ld	r31, X
    1b10:	01 90       	ld	r0, Z+
    1b12:	f0 81       	ld	r31, Z
    1b14:	e0 2d       	mov	r30, r0
    1b16:	09 94       	ijmp

00001b18 <_ZN5Print7printlnEv>:
    1b18:	6a e4       	ldi	r22, 0x4A	; 74
    1b1a:	72 e0       	ldi	r23, 0x02	; 2
    1b1c:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN5Print5writeEPKc>

00001b20 <_ZN5Print7printlnEPKc>:
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
    1b2a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN5Print5writeEPKc>
    1b2e:	8c 01       	movw	r16, r24
    1b30:	ce 01       	movw	r24, r28
    1b32:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN5Print7printlnEv>
    1b36:	80 0f       	add	r24, r16
    1b38:	91 1f       	adc	r25, r17
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <_ZN5Print11printNumberEmh>:
    1b44:	8f 92       	push	r8
    1b46:	9f 92       	push	r9
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	a1 97       	sbiw	r28, 0x21	; 33
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	7c 01       	movw	r14, r24
    1b6a:	fa 01       	movw	r30, r20
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	19 a2       	std	Y+33, r1	; 0x21
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	08 f4       	brcc	.+2      	; 0x1b76 <_ZN5Print11printNumberEmh+0x32>
    1b74:	2a e0       	ldi	r18, 0x0A	; 10
    1b76:	8e 01       	movw	r16, r28
    1b78:	0f 5d       	subi	r16, 0xDF	; 223
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7c:	82 2e       	mov	r8, r18
    1b7e:	91 2c       	mov	r9, r1
    1b80:	a1 2c       	mov	r10, r1
    1b82:	b1 2c       	mov	r11, r1
    1b84:	bf 01       	movw	r22, r30
    1b86:	a5 01       	movw	r20, r10
    1b88:	94 01       	movw	r18, r8
    1b8a:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <__udivmodsi4>
    1b8e:	f9 01       	movw	r30, r18
    1b90:	ca 01       	movw	r24, r20
    1b92:	01 50       	subi	r16, 0x01	; 1
    1b94:	11 09       	sbc	r17, r1
    1b96:	6a 30       	cpi	r22, 0x0A	; 10
    1b98:	10 f4       	brcc	.+4      	; 0x1b9e <_ZN5Print11printNumberEmh+0x5a>
    1b9a:	60 5d       	subi	r22, 0xD0	; 208
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <_ZN5Print11printNumberEmh+0x5c>
    1b9e:	69 5c       	subi	r22, 0xC9	; 201
    1ba0:	d8 01       	movw	r26, r16
    1ba2:	6c 93       	st	X, r22
    1ba4:	23 2b       	or	r18, r19
    1ba6:	24 2b       	or	r18, r20
    1ba8:	25 2b       	or	r18, r21
    1baa:	61 f7       	brne	.-40     	; 0x1b84 <_ZN5Print11printNumberEmh+0x40>
    1bac:	b8 01       	movw	r22, r16
    1bae:	c7 01       	movw	r24, r14
    1bb0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <_ZN5Print5writeEPKc>
    1bb4:	a1 96       	adiw	r28, 0x21	; 33
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	bf 90       	pop	r11
    1bce:	af 90       	pop	r10
    1bd0:	9f 90       	pop	r9
    1bd2:	8f 90       	pop	r8
    1bd4:	08 95       	ret

00001bd6 <_ZN5Print5printEmi>:
    1bd6:	21 15       	cp	r18, r1
    1bd8:	31 05       	cpc	r19, r1
    1bda:	41 f4       	brne	.+16     	; 0x1bec <_ZN5Print5printEmi+0x16>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	ed 91       	ld	r30, X+
    1be0:	fc 91       	ld	r31, X
    1be2:	01 90       	ld	r0, Z+
    1be4:	f0 81       	ld	r31, Z
    1be6:	e0 2d       	mov	r30, r0
    1be8:	64 2f       	mov	r22, r20
    1bea:	09 94       	ijmp
    1bec:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>

00001bf0 <_ZN5Print5printEhi>:
    1bf0:	9a 01       	movw	r18, r20
    1bf2:	46 2f       	mov	r20, r22
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <_ZN5Print5printEmi>

00001bfe <_ZN5Print5printEji>:
    1bfe:	9a 01       	movw	r18, r20
    1c00:	ab 01       	movw	r20, r22
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <_ZN5Print5printEmi>

00001c0a <_ZN5Print10printFloatEdh>:
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	8c 01       	movw	r16, r24
    1c26:	6a 01       	movw	r12, r20
    1c28:	7b 01       	movw	r14, r22
    1c2a:	72 2e       	mov	r7, r18
    1c2c:	9a 01       	movw	r18, r20
    1c2e:	ab 01       	movw	r20, r22
    1c30:	c7 01       	movw	r24, r14
    1c32:	b6 01       	movw	r22, r12
    1c34:	0e 94 b8 21 	call	0x4370	; 0x4370 <__unordsf2>
    1c38:	88 23       	and	r24, r24
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <_ZN5Print10printFloatEdh+0x38>
    1c3c:	6d e4       	ldi	r22, 0x4D	; 77
    1c3e:	72 e0       	ldi	r23, 0x02	; 2
    1c40:	27 c0       	rjmp	.+78     	; 0x1c90 <_ZN5Print10printFloatEdh+0x86>
    1c42:	46 01       	movw	r8, r12
    1c44:	57 01       	movw	r10, r14
    1c46:	e8 94       	clt
    1c48:	b7 f8       	bld	r11, 7
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	3f ef       	ldi	r19, 0xFF	; 255
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	5f e7       	ldi	r21, 0x7F	; 127
    1c52:	c5 01       	movw	r24, r10
    1c54:	b4 01       	movw	r22, r8
    1c56:	0e 94 b8 21 	call	0x4370	; 0x4370 <__unordsf2>
    1c5a:	81 11       	cpse	r24, r1
    1c5c:	0d c0       	rjmp	.+26     	; 0x1c78 <_ZN5Print10printFloatEdh+0x6e>
    1c5e:	2f ef       	ldi	r18, 0xFF	; 255
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	5f e7       	ldi	r21, 0x7F	; 127
    1c66:	c5 01       	movw	r24, r10
    1c68:	b4 01       	movw	r22, r8
    1c6a:	0e 94 a6 09 	call	0x134c	; 0x134c <__cmpsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	1c f4       	brge	.+6      	; 0x1c78 <_ZN5Print10printFloatEdh+0x6e>
    1c72:	61 e5       	ldi	r22, 0x51	; 81
    1c74:	72 e0       	ldi	r23, 0x02	; 2
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <_ZN5Print10printFloatEdh+0x86>
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	5f e4       	ldi	r21, 0x4F	; 79
    1c80:	c7 01       	movw	r24, r14
    1c82:	b6 01       	movw	r22, r12
    1c84:	0e 94 cf 0a 	call	0x159e	; 0x159e <__gesf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	94 f4       	brge	.+36     	; 0x1cb0 <_ZN5Print10printFloatEdh+0xa6>
    1c8c:	65 e5       	ldi	r22, 0x55	; 85
    1c8e:	72 e0       	ldi	r23, 0x02	; 2
    1c90:	c8 01       	movw	r24, r16
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	7f 90       	pop	r7
    1cac:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <_ZN5Print5writeEPKc>
    1cb0:	2f ef       	ldi	r18, 0xFF	; 255
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	5f ec       	ldi	r21, 0xCF	; 207
    1cb8:	c7 01       	movw	r24, r14
    1cba:	b6 01       	movw	r22, r12
    1cbc:	0e 94 a6 09 	call	0x134c	; 0x134c <__cmpsf2>
    1cc0:	87 fd       	sbrc	r24, 7
    1cc2:	e4 cf       	rjmp	.-56     	; 0x1c8c <_ZN5Print10printFloatEdh+0x82>
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	a9 01       	movw	r20, r18
    1cca:	c7 01       	movw	r24, r14
    1ccc:	b6 01       	movw	r22, r12
    1cce:	0e 94 a6 09 	call	0x134c	; 0x134c <__cmpsf2>
    1cd2:	87 ff       	sbrs	r24, 7
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <_ZN5Print10printFloatEdh+0xe0>
    1cd6:	6d e2       	ldi	r22, 0x2D	; 45
    1cd8:	c8 01       	movw	r24, r16
    1cda:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZN5Print5printEc>
    1cde:	ec 01       	movw	r28, r24
    1ce0:	f7 fa       	bst	r15, 7
    1ce2:	f0 94       	com	r15
    1ce4:	f7 f8       	bld	r15, 7
    1ce6:	f0 94       	com	r15
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <_ZN5Print10printFloatEdh+0xe4>
    1cea:	c0 e0       	ldi	r28, 0x00	; 0
    1cec:	d0 e0       	ldi	r29, 0x00	; 0
    1cee:	b1 2c       	mov	r11, r1
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	9f e3       	ldi	r25, 0x3F	; 63
    1cf8:	7b 14       	cp	r7, r11
    1cfa:	41 f0       	breq	.+16     	; 0x1d0c <_ZN5Print10printFloatEdh+0x102>
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3>
    1d08:	b3 94       	inc	r11
    1d0a:	f6 cf       	rjmp	.-20     	; 0x1cf8 <_ZN5Print10printFloatEdh+0xee>
    1d0c:	a7 01       	movw	r20, r14
    1d0e:	96 01       	movw	r18, r12
    1d10:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3>
    1d14:	6b 01       	movw	r12, r22
    1d16:	7c 01       	movw	r14, r24
    1d18:	0e 94 89 21 	call	0x4312	; 0x4312 <__fixunssfsi>
    1d1c:	4b 01       	movw	r8, r22
    1d1e:	5c 01       	movw	r10, r24
    1d20:	2a e0       	ldi	r18, 0x0A	; 10
    1d22:	ab 01       	movw	r20, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	c8 01       	movw	r24, r16
    1d28:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <_ZN5Print11printNumberEmh>
    1d2c:	c8 0f       	add	r28, r24
    1d2e:	d9 1f       	adc	r29, r25
    1d30:	77 20       	and	r7, r7
    1d32:	b9 f1       	breq	.+110    	; 0x1da2 <_ZN5Print10printFloatEdh+0x198>
    1d34:	c5 01       	movw	r24, r10
    1d36:	b4 01       	movw	r22, r8
    1d38:	0e 94 1d 0a 	call	0x143a	; 0x143a <__floatunsisf>
    1d3c:	9b 01       	movw	r18, r22
    1d3e:	ac 01       	movw	r20, r24
    1d40:	c7 01       	movw	r24, r14
    1d42:	b6 01       	movw	r22, r12
    1d44:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
    1d48:	6b 01       	movw	r12, r22
    1d4a:	7c 01       	movw	r14, r24
    1d4c:	6e e2       	ldi	r22, 0x2E	; 46
    1d4e:	c8 01       	movw	r24, r16
    1d50:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZN5Print5printEc>
    1d54:	c8 0f       	add	r28, r24
    1d56:	d9 1f       	adc	r29, r25
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	c7 01       	movw	r24, r14
    1d62:	b6 01       	movw	r22, r12
    1d64:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__mulsf3>
    1d68:	4b 01       	movw	r8, r22
    1d6a:	5c 01       	movw	r10, r24
    1d6c:	0e 94 89 21 	call	0x4312	; 0x4312 <__fixunssfsi>
    1d70:	6b 01       	movw	r12, r22
    1d72:	7c 01       	movw	r14, r24
    1d74:	4a e0       	ldi	r20, 0x0A	; 10
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	c8 01       	movw	r24, r16
    1d7a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN5Print5printEji>
    1d7e:	c8 0f       	add	r28, r24
    1d80:	d9 1f       	adc	r29, r25
    1d82:	b6 01       	movw	r22, r12
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 1d 0a 	call	0x143a	; 0x143a <__floatunsisf>
    1d8c:	9b 01       	movw	r18, r22
    1d8e:	ac 01       	movw	r20, r24
    1d90:	c5 01       	movw	r24, r10
    1d92:	b4 01       	movw	r22, r8
    1d94:	0e 94 39 09 	call	0x1272	; 0x1272 <__subsf3>
    1d98:	6b 01       	movw	r12, r22
    1d9a:	7c 01       	movw	r14, r24
    1d9c:	7a 94       	dec	r7
    1d9e:	71 10       	cpse	r7, r1
    1da0:	db cf       	rjmp	.-74     	; 0x1d58 <_ZN5Print10printFloatEdh+0x14e>
    1da2:	ce 01       	movw	r24, r28
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	08 95       	ret

00001dc0 <_ZN5Print5printEdi>:
    1dc0:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <_ZN5Print10printFloatEdh>

00001dc4 <_ZN5Print7printlnEdi>:
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	ec 01       	movw	r28, r24
    1dce:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <_ZN5Print10printFloatEdh>
    1dd2:	8c 01       	movw	r16, r24
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_ZN5Print7printlnEv>
    1dda:	80 0f       	add	r24, r16
    1ddc:	91 1f       	adc	r25, r17
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <nothing>:
    1de8:	08 95       	ret

00001dea <attachInterrupt>:
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	e8 f4       	brcc	.+58     	; 0x1e28 <attachInterrupt+0x3e>
    1dee:	e8 2f       	mov	r30, r24
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	ee 0f       	add	r30, r30
    1df4:	ff 1f       	adc	r31, r31
    1df6:	e4 5e       	subi	r30, 0xE4	; 228
    1df8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dfa:	71 83       	std	Z+1, r23	; 0x01
    1dfc:	60 83       	st	Z, r22
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	41 f0       	breq	.+16     	; 0x1e12 <attachInterrupt+0x28>
    1e02:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1e06:	8c 7f       	andi	r24, 0xFC	; 252
    1e08:	48 2b       	or	r20, r24
    1e0a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1e0e:	e8 9a       	sbi	0x1d, 0	; 29
    1e10:	08 95       	ret
    1e12:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1e16:	83 7f       	andi	r24, 0xF3	; 243
    1e18:	44 0f       	add	r20, r20
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	44 0f       	add	r20, r20
    1e1e:	55 1f       	adc	r21, r21
    1e20:	48 2b       	or	r20, r24
    1e22:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1e26:	e9 9a       	sbi	0x1d, 1	; 29
    1e28:	08 95       	ret

00001e2a <__vector_1>:
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
    1e4c:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <intFunc>
    1e50:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <intFunc+0x1>
    1e54:	09 95       	icall
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <__vector_2>:
    1e78:	1f 92       	push	r1
    1e7a:	0f 92       	push	r0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	0f 92       	push	r0
    1e80:	11 24       	eor	r1, r1
    1e82:	2f 93       	push	r18
    1e84:	3f 93       	push	r19
    1e86:	4f 93       	push	r20
    1e88:	5f 93       	push	r21
    1e8a:	6f 93       	push	r22
    1e8c:	7f 93       	push	r23
    1e8e:	8f 93       	push	r24
    1e90:	9f 93       	push	r25
    1e92:	af 93       	push	r26
    1e94:	bf 93       	push	r27
    1e96:	ef 93       	push	r30
    1e98:	ff 93       	push	r31
    1e9a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <intFunc+0x2>
    1e9e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <intFunc+0x3>
    1ea2:	09 95       	icall
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_16>:
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	af 93       	push	r26
    1eda:	bf 93       	push	r27
    1edc:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <timer0_millis>
    1ee0:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <timer0_millis+0x1>
    1ee4:	a0 91 17 04 	lds	r26, 0x0417	; 0x800417 <timer0_millis+0x2>
    1ee8:	b0 91 18 04 	lds	r27, 0x0418	; 0x800418 <timer0_millis+0x3>
    1eec:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <timer0_fract>
    1ef0:	23 e0       	ldi	r18, 0x03	; 3
    1ef2:	23 0f       	add	r18, r19
    1ef4:	2d 37       	cpi	r18, 0x7D	; 125
    1ef6:	20 f4       	brcc	.+8      	; 0x1f00 <__vector_16+0x3a>
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	a1 1d       	adc	r26, r1
    1efc:	b1 1d       	adc	r27, r1
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <__vector_16+0x44>
    1f00:	26 e8       	ldi	r18, 0x86	; 134
    1f02:	23 0f       	add	r18, r19
    1f04:	02 96       	adiw	r24, 0x02	; 2
    1f06:	a1 1d       	adc	r26, r1
    1f08:	b1 1d       	adc	r27, r1
    1f0a:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <timer0_fract>
    1f0e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <timer0_millis>
    1f12:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <timer0_millis+0x1>
    1f16:	a0 93 17 04 	sts	0x0417, r26	; 0x800417 <timer0_millis+0x2>
    1f1a:	b0 93 18 04 	sts	0x0418, r27	; 0x800418 <timer0_millis+0x3>
    1f1e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_overflow_count>
    1f22:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_overflow_count+0x1>
    1f26:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_overflow_count+0x2>
    1f2a:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_overflow_count+0x3>
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	a1 1d       	adc	r26, r1
    1f32:	b1 1d       	adc	r27, r1
    1f34:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <timer0_overflow_count>
    1f38:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <timer0_overflow_count+0x1>
    1f3c:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <timer0_overflow_count+0x2>
    1f40:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <timer0_overflow_count+0x3>
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	3f 91       	pop	r19
    1f4e:	2f 91       	pop	r18
    1f50:	0f 90       	pop	r0
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	0f 90       	pop	r0
    1f56:	1f 90       	pop	r1
    1f58:	18 95       	reti

00001f5a <micros>:
    1f5a:	3f b7       	in	r19, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_overflow_count>
    1f62:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_overflow_count+0x1>
    1f66:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_overflow_count+0x2>
    1f6a:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_overflow_count+0x3>
    1f6e:	26 b5       	in	r18, 0x26	; 38
    1f70:	a8 9b       	sbis	0x15, 0	; 21
    1f72:	05 c0       	rjmp	.+10     	; 0x1f7e <micros+0x24>
    1f74:	2f 3f       	cpi	r18, 0xFF	; 255
    1f76:	19 f0       	breq	.+6      	; 0x1f7e <micros+0x24>
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	3f bf       	out	0x3f, r19	; 63
    1f80:	ba 2f       	mov	r27, r26
    1f82:	a9 2f       	mov	r26, r25
    1f84:	98 2f       	mov	r25, r24
    1f86:	88 27       	eor	r24, r24
    1f88:	82 0f       	add	r24, r18
    1f8a:	91 1d       	adc	r25, r1
    1f8c:	a1 1d       	adc	r26, r1
    1f8e:	b1 1d       	adc	r27, r1
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	42 e0       	ldi	r20, 0x02	; 2
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	88 1f       	adc	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	4a 95       	dec	r20
    1fa0:	d1 f7       	brne	.-12     	; 0x1f96 <micros+0x3c>
    1fa2:	08 95       	ret

00001fa4 <delay>:
    1fa4:	8f 92       	push	r8
    1fa6:	9f 92       	push	r9
    1fa8:	af 92       	push	r10
    1faa:	bf 92       	push	r11
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	6b 01       	movw	r12, r22
    1fb6:	7c 01       	movw	r14, r24
    1fb8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <micros>
    1fbc:	4b 01       	movw	r8, r22
    1fbe:	5c 01       	movw	r10, r24
    1fc0:	c1 14       	cp	r12, r1
    1fc2:	d1 04       	cpc	r13, r1
    1fc4:	e1 04       	cpc	r14, r1
    1fc6:	f1 04       	cpc	r15, r1
    1fc8:	01 f1       	breq	.+64     	; 0x200a <delay+0x66>
    1fca:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <yield>
    1fce:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <micros>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	88 19       	sub	r24, r8
    1fd8:	99 09       	sbc	r25, r9
    1fda:	aa 09       	sbc	r26, r10
    1fdc:	bb 09       	sbc	r27, r11
    1fde:	88 3e       	cpi	r24, 0xE8	; 232
    1fe0:	93 40       	sbci	r25, 0x03	; 3
    1fe2:	a1 05       	cpc	r26, r1
    1fe4:	b1 05       	cpc	r27, r1
    1fe6:	60 f3       	brcs	.-40     	; 0x1fc0 <delay+0x1c>
    1fe8:	21 e0       	ldi	r18, 0x01	; 1
    1fea:	c2 1a       	sub	r12, r18
    1fec:	d1 08       	sbc	r13, r1
    1fee:	e1 08       	sbc	r14, r1
    1ff0:	f1 08       	sbc	r15, r1
    1ff2:	88 ee       	ldi	r24, 0xE8	; 232
    1ff4:	88 0e       	add	r8, r24
    1ff6:	83 e0       	ldi	r24, 0x03	; 3
    1ff8:	98 1e       	adc	r9, r24
    1ffa:	a1 1c       	adc	r10, r1
    1ffc:	b1 1c       	adc	r11, r1
    1ffe:	c1 14       	cp	r12, r1
    2000:	d1 04       	cpc	r13, r1
    2002:	e1 04       	cpc	r14, r1
    2004:	f1 04       	cpc	r15, r1
    2006:	19 f7       	brne	.-58     	; 0x1fce <delay+0x2a>
    2008:	db cf       	rjmp	.-74     	; 0x1fc0 <delay+0x1c>
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	08 95       	ret

0000201c <delayMicroseconds>:
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	91 05       	cpc	r25, r1
    2020:	38 f0       	brcs	.+14     	; 0x2030 <delayMicroseconds+0x14>
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	05 97       	sbiw	r24, 0x05	; 5
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <delayMicroseconds+0x10>
    2030:	08 95       	ret

00002032 <init>:
    2032:	78 94       	sei
    2034:	84 b5       	in	r24, 0x24	; 36
    2036:	82 60       	ori	r24, 0x02	; 2
    2038:	84 bd       	out	0x24, r24	; 36
    203a:	84 b5       	in	r24, 0x24	; 36
    203c:	81 60       	ori	r24, 0x01	; 1
    203e:	84 bd       	out	0x24, r24	; 36
    2040:	85 b5       	in	r24, 0x25	; 37
    2042:	82 60       	ori	r24, 0x02	; 2
    2044:	85 bd       	out	0x25, r24	; 37
    2046:	85 b5       	in	r24, 0x25	; 37
    2048:	81 60       	ori	r24, 0x01	; 1
    204a:	85 bd       	out	0x25, r24	; 37
    204c:	ee e6       	ldi	r30, 0x6E	; 110
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	81 60       	ori	r24, 0x01	; 1
    2054:	80 83       	st	Z, r24
    2056:	e1 e8       	ldi	r30, 0x81	; 129
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	10 82       	st	Z, r1
    205c:	80 81       	ld	r24, Z
    205e:	82 60       	ori	r24, 0x02	; 2
    2060:	80 83       	st	Z, r24
    2062:	80 81       	ld	r24, Z
    2064:	81 60       	ori	r24, 0x01	; 1
    2066:	80 83       	st	Z, r24
    2068:	e0 e8       	ldi	r30, 0x80	; 128
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	81 60       	ori	r24, 0x01	; 1
    2070:	80 83       	st	Z, r24
    2072:	e1 eb       	ldi	r30, 0xB1	; 177
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	84 60       	ori	r24, 0x04	; 4
    207a:	80 83       	st	Z, r24
    207c:	e0 eb       	ldi	r30, 0xB0	; 176
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	81 60       	ori	r24, 0x01	; 1
    2084:	80 83       	st	Z, r24
    2086:	ea e7       	ldi	r30, 0x7A	; 122
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	84 60       	ori	r24, 0x04	; 4
    208e:	80 83       	st	Z, r24
    2090:	80 81       	ld	r24, Z
    2092:	82 60       	ori	r24, 0x02	; 2
    2094:	80 83       	st	Z, r24
    2096:	80 81       	ld	r24, Z
    2098:	81 60       	ori	r24, 0x01	; 1
    209a:	80 83       	st	Z, r24
    209c:	80 81       	ld	r24, Z
    209e:	80 68       	ori	r24, 0x80	; 128
    20a0:	80 83       	st	Z, r24
    20a2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    20a6:	08 95       	ret

000020a8 <analogRead>:
    20a8:	8e 30       	cpi	r24, 0x0E	; 14
    20aa:	08 f0       	brcs	.+2      	; 0x20ae <analogRead+0x6>
    20ac:	8e 50       	subi	r24, 0x0E	; 14
    20ae:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <analog_reference>
    20b2:	90 e4       	ldi	r25, 0x40	; 64
    20b4:	29 9f       	mul	r18, r25
    20b6:	90 01       	movw	r18, r0
    20b8:	11 24       	eor	r1, r1
    20ba:	87 70       	andi	r24, 0x07	; 7
    20bc:	82 2b       	or	r24, r18
    20be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    20c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    20c6:	80 64       	ori	r24, 0x40	; 64
    20c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    20cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    20d0:	86 fd       	sbrc	r24, 6
    20d2:	fc cf       	rjmp	.-8      	; 0x20cc <analogRead+0x24>
    20d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    20d8:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	92 2b       	or	r25, r18
    20e0:	08 95       	ret

000020e2 <analogWrite>:
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	18 2f       	mov	r17, r24
    20ea:	eb 01       	movw	r28, r22
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <pinMode>
    20f2:	20 97       	sbiw	r28, 0x00	; 0
    20f4:	11 f4       	brne	.+4      	; 0x20fa <analogWrite+0x18>
    20f6:	60 e0       	ldi	r22, 0x00	; 0
    20f8:	04 c0       	rjmp	.+8      	; 0x2102 <analogWrite+0x20>
    20fa:	cf 3f       	cpi	r28, 0xFF	; 255
    20fc:	d1 05       	cpc	r29, r1
    20fe:	39 f4       	brne	.+14     	; 0x210e <analogWrite+0x2c>
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	81 2f       	mov	r24, r17
    2104:	df 91       	pop	r29
    2106:	cf 91       	pop	r28
    2108:	1f 91       	pop	r17
    210a:	0c 94 35 11 	jmp	0x226a	; 0x226a <digitalWrite>
    210e:	e1 2f       	mov	r30, r17
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	ee 54       	subi	r30, 0x4E	; 78
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	e4 91       	lpm	r30, Z
    2118:	e3 30       	cpi	r30, 0x03	; 3
    211a:	f9 f0       	breq	.+62     	; 0x215a <analogWrite+0x78>
    211c:	48 f4       	brcc	.+18     	; 0x2130 <analogWrite+0x4e>
    211e:	e1 30       	cpi	r30, 0x01	; 1
    2120:	b9 f0       	breq	.+46     	; 0x2150 <analogWrite+0x6e>
    2122:	e2 30       	cpi	r30, 0x02	; 2
    2124:	a1 f5       	brne	.+104    	; 0x218e <analogWrite+0xac>
    2126:	84 b5       	in	r24, 0x24	; 36
    2128:	80 62       	ori	r24, 0x20	; 32
    212a:	84 bd       	out	0x24, r24	; 36
    212c:	c8 bd       	out	0x28, r28	; 40
    212e:	34 c0       	rjmp	.+104    	; 0x2198 <analogWrite+0xb6>
    2130:	e7 30       	cpi	r30, 0x07	; 7
    2132:	e9 f0       	breq	.+58     	; 0x216e <analogWrite+0x8c>
    2134:	e8 30       	cpi	r30, 0x08	; 8
    2136:	19 f1       	breq	.+70     	; 0x217e <analogWrite+0x9c>
    2138:	e4 30       	cpi	r30, 0x04	; 4
    213a:	49 f5       	brne	.+82     	; 0x218e <analogWrite+0xac>
    213c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2146:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    214a:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    214e:	24 c0       	rjmp	.+72     	; 0x2198 <analogWrite+0xb6>
    2150:	84 b5       	in	r24, 0x24	; 36
    2152:	80 68       	ori	r24, 0x80	; 128
    2154:	84 bd       	out	0x24, r24	; 36
    2156:	c7 bd       	out	0x27, r28	; 39
    2158:	1f c0       	rjmp	.+62     	; 0x2198 <analogWrite+0xb6>
    215a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    215e:	80 68       	ori	r24, 0x80	; 128
    2160:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2164:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2168:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <analogWrite+0xb6>
    216e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2172:	80 68       	ori	r24, 0x80	; 128
    2174:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2178:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    217c:	0d c0       	rjmp	.+26     	; 0x2198 <analogWrite+0xb6>
    217e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2182:	80 62       	ori	r24, 0x20	; 32
    2184:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2188:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <analogWrite+0xb6>
    218e:	c0 38       	cpi	r28, 0x80	; 128
    2190:	d1 05       	cpc	r29, r1
    2192:	0c f0       	brlt	.+2      	; 0x2196 <analogWrite+0xb4>
    2194:	b5 cf       	rjmp	.-150    	; 0x2100 <analogWrite+0x1e>
    2196:	af cf       	rjmp	.-162    	; 0x20f6 <analogWrite+0x14>
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	08 95       	ret

000021a0 <turnOffPWM>:
    21a0:	83 30       	cpi	r24, 0x03	; 3
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <turnOffPWM+0x24>
    21a4:	28 f4       	brcc	.+10     	; 0x21b0 <turnOffPWM+0x10>
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	99 f0       	breq	.+38     	; 0x21d0 <turnOffPWM+0x30>
    21aa:	82 30       	cpi	r24, 0x02	; 2
    21ac:	a1 f0       	breq	.+40     	; 0x21d6 <turnOffPWM+0x36>
    21ae:	08 95       	ret
    21b0:	87 30       	cpi	r24, 0x07	; 7
    21b2:	a9 f0       	breq	.+42     	; 0x21de <turnOffPWM+0x3e>
    21b4:	88 30       	cpi	r24, 0x08	; 8
    21b6:	b9 f0       	breq	.+46     	; 0x21e6 <turnOffPWM+0x46>
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	d1 f4       	brne	.+52     	; 0x21f0 <turnOffPWM+0x50>
    21bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21c0:	8f 7d       	andi	r24, 0xDF	; 223
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <turnOffPWM+0x2a>
    21c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21c8:	8f 77       	andi	r24, 0x7F	; 127
    21ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21ce:	08 95       	ret
    21d0:	84 b5       	in	r24, 0x24	; 36
    21d2:	8f 77       	andi	r24, 0x7F	; 127
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <turnOffPWM+0x3a>
    21d6:	84 b5       	in	r24, 0x24	; 36
    21d8:	8f 7d       	andi	r24, 0xDF	; 223
    21da:	84 bd       	out	0x24, r24	; 36
    21dc:	08 95       	ret
    21de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    21e2:	8f 77       	andi	r24, 0x7F	; 127
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <turnOffPWM+0x4c>
    21e6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    21ea:	8f 7d       	andi	r24, 0xDF	; 223
    21ec:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    21f0:	08 95       	ret

000021f2 <pinMode>:
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	fc 01       	movw	r30, r24
    21fa:	ea 53       	subi	r30, 0x3A	; 58
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	24 91       	lpm	r18, Z
    2200:	fc 01       	movw	r30, r24
    2202:	e6 52       	subi	r30, 0x26	; 38
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	84 91       	lpm	r24, Z
    2208:	88 23       	and	r24, r24
    220a:	61 f1       	breq	.+88     	; 0x2264 <pinMode+0x72>
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	fc 01       	movw	r30, r24
    2214:	ee 5f       	subi	r30, 0xFE	; 254
    2216:	fe 4f       	sbci	r31, 0xFE	; 254
    2218:	c5 91       	lpm	r28, Z+
    221a:	d4 91       	lpm	r29, Z
    221c:	fc 01       	movw	r30, r24
    221e:	e8 50       	subi	r30, 0x08	; 8
    2220:	ff 4f       	sbci	r31, 0xFF	; 255
    2222:	a5 91       	lpm	r26, Z+
    2224:	b4 91       	lpm	r27, Z
    2226:	61 11       	cpse	r22, r1
    2228:	09 c0       	rjmp	.+18     	; 0x223c <pinMode+0x4a>
    222a:	9f b7       	in	r25, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	88 81       	ld	r24, Y
    2230:	20 95       	com	r18
    2232:	82 23       	and	r24, r18
    2234:	88 83       	st	Y, r24
    2236:	ec 91       	ld	r30, X
    2238:	2e 23       	and	r18, r30
    223a:	0b c0       	rjmp	.+22     	; 0x2252 <pinMode+0x60>
    223c:	62 30       	cpi	r22, 0x02	; 2
    223e:	61 f4       	brne	.+24     	; 0x2258 <pinMode+0x66>
    2240:	9f b7       	in	r25, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	88 81       	ld	r24, Y
    2246:	32 2f       	mov	r19, r18
    2248:	30 95       	com	r19
    224a:	83 23       	and	r24, r19
    224c:	88 83       	st	Y, r24
    224e:	ec 91       	ld	r30, X
    2250:	2e 2b       	or	r18, r30
    2252:	2c 93       	st	X, r18
    2254:	9f bf       	out	0x3f, r25	; 63
    2256:	06 c0       	rjmp	.+12     	; 0x2264 <pinMode+0x72>
    2258:	8f b7       	in	r24, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	e8 81       	ld	r30, Y
    225e:	2e 2b       	or	r18, r30
    2260:	28 83       	st	Y, r18
    2262:	8f bf       	out	0x3f, r24	; 63
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <digitalWrite>:
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	f9 01       	movw	r30, r18
    2276:	ee 54       	subi	r30, 0x4E	; 78
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	84 91       	lpm	r24, Z
    227c:	f9 01       	movw	r30, r18
    227e:	ea 53       	subi	r30, 0x3A	; 58
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	d4 91       	lpm	r29, Z
    2284:	f9 01       	movw	r30, r18
    2286:	e6 52       	subi	r30, 0x26	; 38
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	c4 91       	lpm	r28, Z
    228c:	cc 23       	and	r28, r28
    228e:	c1 f0       	breq	.+48     	; 0x22c0 <digitalWrite+0x56>
    2290:	16 2f       	mov	r17, r22
    2292:	81 11       	cpse	r24, r1
    2294:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <turnOffPWM>
    2298:	ec 2f       	mov	r30, r28
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	e8 50       	subi	r30, 0x08	; 8
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	a5 91       	lpm	r26, Z+
    22a6:	b4 91       	lpm	r27, Z
    22a8:	9f b7       	in	r25, 0x3f	; 63
    22aa:	f8 94       	cli
    22ac:	11 11       	cpse	r17, r1
    22ae:	04 c0       	rjmp	.+8      	; 0x22b8 <digitalWrite+0x4e>
    22b0:	8c 91       	ld	r24, X
    22b2:	d0 95       	com	r29
    22b4:	d8 23       	and	r29, r24
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <digitalWrite+0x52>
    22b8:	ec 91       	ld	r30, X
    22ba:	de 2b       	or	r29, r30
    22bc:	dc 93       	st	X, r29
    22be:	9f bf       	out	0x3f, r25	; 63
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	08 95       	ret

000022c8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	0f 92       	push	r0
    22ce:	fc 01       	movw	r30, r24
    22d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22d2:	0f 90       	pop	r0
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	91 11       	cpse	r25, r1
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	08 95       	ret

000022de <prvCopyDataToQueue>:
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    22e8:	04 2f       	mov	r16, r20
    22ea:	1a 8d       	ldd	r17, Y+26	; 0x1a
    22ec:	4c 8d       	ldd	r20, Y+28	; 0x1c
    22ee:	41 11       	cpse	r20, r1
    22f0:	0b c0       	rjmp	.+22     	; 0x2308 <prvCopyDataToQueue+0x2a>
    22f2:	88 81       	ld	r24, Y
    22f4:	99 81       	ldd	r25, Y+1	; 0x01
    22f6:	89 2b       	or	r24, r25
    22f8:	e9 f5       	brne	.+122    	; 0x2374 <prvCopyDataToQueue+0x96>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	0e 94 26 1a 	call	0x344c	; 0x344c <xTaskPriorityDisinherit>
    2302:	1d 82       	std	Y+5, r1	; 0x05
    2304:	1c 82       	std	Y+4, r1	; 0x04
    2306:	37 c0       	rjmp	.+110    	; 0x2376 <prvCopyDataToQueue+0x98>
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	01 11       	cpse	r16, r1
    230c:	15 c0       	rjmp	.+42     	; 0x2338 <prvCopyDataToQueue+0x5a>
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	9b 81       	ldd	r25, Y+3	; 0x03
    2312:	0e 94 67 23 	call	0x46ce	; 0x46ce <memcpy>
    2316:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	9b 81       	ldd	r25, Y+3	; 0x03
    231c:	82 0f       	add	r24, r18
    231e:	91 1d       	adc	r25, r1
    2320:	9b 83       	std	Y+3, r25	; 0x03
    2322:	8a 83       	std	Y+2, r24	; 0x02
    2324:	2c 81       	ldd	r18, Y+4	; 0x04
    2326:	3d 81       	ldd	r19, Y+5	; 0x05
    2328:	82 17       	cp	r24, r18
    232a:	93 07       	cpc	r25, r19
    232c:	18 f1       	brcs	.+70     	; 0x2374 <prvCopyDataToQueue+0x96>
    232e:	88 81       	ld	r24, Y
    2330:	99 81       	ldd	r25, Y+1	; 0x01
    2332:	9b 83       	std	Y+3, r25	; 0x03
    2334:	8a 83       	std	Y+2, r24	; 0x02
    2336:	1e c0       	rjmp	.+60     	; 0x2374 <prvCopyDataToQueue+0x96>
    2338:	8e 81       	ldd	r24, Y+6	; 0x06
    233a:	9f 81       	ldd	r25, Y+7	; 0x07
    233c:	0e 94 67 23 	call	0x46ce	; 0x46ce <memcpy>
    2340:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 95       	neg	r25
    2346:	81 95       	neg	r24
    2348:	91 09       	sbc	r25, r1
    234a:	2e 81       	ldd	r18, Y+6	; 0x06
    234c:	3f 81       	ldd	r19, Y+7	; 0x07
    234e:	28 0f       	add	r18, r24
    2350:	39 1f       	adc	r19, r25
    2352:	3f 83       	std	Y+7, r19	; 0x07
    2354:	2e 83       	std	Y+6, r18	; 0x06
    2356:	48 81       	ld	r20, Y
    2358:	59 81       	ldd	r21, Y+1	; 0x01
    235a:	24 17       	cp	r18, r20
    235c:	35 07       	cpc	r19, r21
    235e:	30 f4       	brcc	.+12     	; 0x236c <prvCopyDataToQueue+0x8e>
    2360:	2c 81       	ldd	r18, Y+4	; 0x04
    2362:	3d 81       	ldd	r19, Y+5	; 0x05
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	9f 83       	std	Y+7, r25	; 0x07
    236a:	8e 83       	std	Y+6, r24	; 0x06
    236c:	02 30       	cpi	r16, 0x02	; 2
    236e:	11 f4       	brne	.+4      	; 0x2374 <prvCopyDataToQueue+0x96>
    2370:	11 11       	cpse	r17, r1
    2372:	11 50       	subi	r17, 0x01	; 1
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	1f 5f       	subi	r17, 0xFF	; 255
    2378:	1a 8f       	std	Y+26, r17	; 0x1a
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <prvCopyDataFromQueue>:
    2384:	fc 01       	movw	r30, r24
    2386:	cb 01       	movw	r24, r22
    2388:	44 8d       	ldd	r20, Z+28	; 0x1c
    238a:	44 23       	and	r20, r20
    238c:	a1 f0       	breq	.+40     	; 0x23b6 <prvCopyDataFromQueue+0x32>
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	26 81       	ldd	r18, Z+6	; 0x06
    2392:	37 81       	ldd	r19, Z+7	; 0x07
    2394:	24 0f       	add	r18, r20
    2396:	35 1f       	adc	r19, r21
    2398:	37 83       	std	Z+7, r19	; 0x07
    239a:	26 83       	std	Z+6, r18	; 0x06
    239c:	64 81       	ldd	r22, Z+4	; 0x04
    239e:	75 81       	ldd	r23, Z+5	; 0x05
    23a0:	26 17       	cp	r18, r22
    23a2:	37 07       	cpc	r19, r23
    23a4:	20 f0       	brcs	.+8      	; 0x23ae <prvCopyDataFromQueue+0x2a>
    23a6:	20 81       	ld	r18, Z
    23a8:	31 81       	ldd	r19, Z+1	; 0x01
    23aa:	37 83       	std	Z+7, r19	; 0x07
    23ac:	26 83       	std	Z+6, r18	; 0x06
    23ae:	66 81       	ldd	r22, Z+6	; 0x06
    23b0:	77 81       	ldd	r23, Z+7	; 0x07
    23b2:	0c 94 67 23 	jmp	0x46ce	; 0x46ce <memcpy>
    23b6:	08 95       	ret

000023b8 <prvUnlockQueue>:
    23b8:	ef 92       	push	r14
    23ba:	ff 92       	push	r15
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	ec 01       	movw	r28, r24
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	0f 92       	push	r0
    23ca:	1e 8d       	ldd	r17, Y+30	; 0x1e
    23cc:	7c 01       	movw	r14, r24
    23ce:	81 e1       	ldi	r24, 0x11	; 17
    23d0:	e8 0e       	add	r14, r24
    23d2:	f1 1c       	adc	r15, r1
    23d4:	11 16       	cp	r1, r17
    23d6:	5c f4       	brge	.+22     	; 0x23ee <prvUnlockQueue+0x36>
    23d8:	89 89       	ldd	r24, Y+17	; 0x11
    23da:	88 23       	and	r24, r24
    23dc:	41 f0       	breq	.+16     	; 0x23ee <prvUnlockQueue+0x36>
    23de:	c7 01       	movw	r24, r14
    23e0:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    23e4:	81 11       	cpse	r24, r1
    23e6:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskMissedYield>
    23ea:	11 50       	subi	r17, 0x01	; 1
    23ec:	f3 cf       	rjmp	.-26     	; 0x23d4 <prvUnlockQueue+0x1c>
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	8e 8f       	std	Y+30, r24	; 0x1e
    23f2:	0f 90       	pop	r0
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	0f 92       	push	r0
    23fc:	1d 8d       	ldd	r17, Y+29	; 0x1d
    23fe:	7e 01       	movw	r14, r28
    2400:	88 e0       	ldi	r24, 0x08	; 8
    2402:	e8 0e       	add	r14, r24
    2404:	f1 1c       	adc	r15, r1
    2406:	11 16       	cp	r1, r17
    2408:	5c f4       	brge	.+22     	; 0x2420 <prvUnlockQueue+0x68>
    240a:	88 85       	ldd	r24, Y+8	; 0x08
    240c:	88 23       	and	r24, r24
    240e:	41 f0       	breq	.+16     	; 0x2420 <prvUnlockQueue+0x68>
    2410:	c7 01       	movw	r24, r14
    2412:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    2416:	81 11       	cpse	r24, r1
    2418:	0e 94 b1 19 	call	0x3362	; 0x3362 <vTaskMissedYield>
    241c:	11 50       	subi	r17, 0x01	; 1
    241e:	f3 cf       	rjmp	.-26     	; 0x2406 <prvUnlockQueue+0x4e>
    2420:	8f ef       	ldi	r24, 0xFF	; 255
    2422:	8d 8f       	std	Y+29, r24	; 0x1d
    2424:	0f 90       	pop	r0
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	08 95       	ret

00002434 <xQueueGenericReset>:
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	ec 01       	movw	r28, r24
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	0f 92       	push	r0
    2440:	48 81       	ld	r20, Y
    2442:	59 81       	ldd	r21, Y+1	; 0x01
    2444:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2446:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2448:	9a 01       	movw	r18, r20
    244a:	87 9f       	mul	r24, r23
    244c:	20 0d       	add	r18, r0
    244e:	31 1d       	adc	r19, r1
    2450:	11 24       	eor	r1, r1
    2452:	3d 83       	std	Y+5, r19	; 0x05
    2454:	2c 83       	std	Y+4, r18	; 0x04
    2456:	1a 8e       	std	Y+26, r1	; 0x1a
    2458:	5b 83       	std	Y+3, r21	; 0x03
    245a:	4a 83       	std	Y+2, r20	; 0x02
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	78 9f       	mul	r23, r24
    2462:	90 01       	movw	r18, r0
    2464:	79 9f       	mul	r23, r25
    2466:	30 0d       	add	r19, r0
    2468:	11 24       	eor	r1, r1
    246a:	ca 01       	movw	r24, r20
    246c:	82 0f       	add	r24, r18
    246e:	93 1f       	adc	r25, r19
    2470:	9f 83       	std	Y+7, r25	; 0x07
    2472:	8e 83       	std	Y+6, r24	; 0x06
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
    2478:	8e 8f       	std	Y+30, r24	; 0x1e
    247a:	61 11       	cpse	r22, r1
    247c:	0c c0       	rjmp	.+24     	; 0x2496 <xQueueGenericReset+0x62>
    247e:	88 85       	ldd	r24, Y+8	; 0x08
    2480:	88 23       	and	r24, r24
    2482:	89 f0       	breq	.+34     	; 0x24a6 <xQueueGenericReset+0x72>
    2484:	ce 01       	movw	r24, r28
    2486:	08 96       	adiw	r24, 0x08	; 8
    2488:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    248c:	88 23       	and	r24, r24
    248e:	59 f0       	breq	.+22     	; 0x24a6 <xQueueGenericReset+0x72>
    2490:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2494:	08 c0       	rjmp	.+16     	; 0x24a6 <xQueueGenericReset+0x72>
    2496:	ce 01       	movw	r24, r28
    2498:	08 96       	adiw	r24, 0x08	; 8
    249a:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    249e:	ce 01       	movw	r24, r28
    24a0:	41 96       	adiw	r24, 0x11	; 17
    24a2:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    24a6:	0f 90       	pop	r0
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <xQueueGenericCreate>:
    24b2:	0f 93       	push	r16
    24b4:	1f 93       	push	r17
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	08 2f       	mov	r16, r24
    24bc:	16 2f       	mov	r17, r22
    24be:	66 23       	and	r22, r22
    24c0:	21 f0       	breq	.+8      	; 0x24ca <xQueueGenericCreate+0x18>
    24c2:	86 9f       	mul	r24, r22
    24c4:	c0 01       	movw	r24, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <xQueueGenericCreate+0x1c>
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	4f 96       	adiw	r24, 0x1f	; 31
    24d0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <pvPortMalloc>
    24d4:	ec 01       	movw	r28, r24
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	71 f0       	breq	.+28     	; 0x24f6 <xQueueGenericCreate+0x44>
    24da:	11 11       	cpse	r17, r1
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <xQueueGenericCreate+0x32>
    24de:	99 83       	std	Y+1, r25	; 0x01
    24e0:	88 83       	st	Y, r24
    24e2:	03 c0       	rjmp	.+6      	; 0x24ea <xQueueGenericCreate+0x38>
    24e4:	4f 96       	adiw	r24, 0x1f	; 31
    24e6:	99 83       	std	Y+1, r25	; 0x01
    24e8:	88 83       	st	Y, r24
    24ea:	0b 8f       	std	Y+27, r16	; 0x1b
    24ec:	1c 8f       	std	Y+28, r17	; 0x1c
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	ce 01       	movw	r24, r28
    24f2:	0e 94 1a 12 	call	0x2434	; 0x2434 <xQueueGenericReset>
    24f6:	ce 01       	movw	r24, r28
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <xQueueGenericSend>:
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	00 d0       	rcall	.+0      	; 0x2516 <xQueueGenericSend+0x14>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <xQueueGenericSend+0x16>
    2518:	1f 92       	push	r1
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	8c 01       	movw	r16, r24
    2520:	6b 01       	movw	r12, r22
    2522:	5d 83       	std	Y+5, r21	; 0x05
    2524:	4c 83       	std	Y+4, r20	; 0x04
    2526:	f2 2e       	mov	r15, r18
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	58 01       	movw	r10, r16
    252c:	98 e0       	ldi	r25, 0x08	; 8
    252e:	a9 0e       	add	r10, r25
    2530:	b1 1c       	adc	r11, r1
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	0f 92       	push	r0
    2538:	f8 01       	movw	r30, r16
    253a:	22 8d       	ldd	r18, Z+26	; 0x1a
    253c:	93 8d       	ldd	r25, Z+27	; 0x1b
    253e:	29 17       	cp	r18, r25
    2540:	18 f0       	brcs	.+6      	; 0x2548 <xQueueGenericSend+0x46>
    2542:	f2 e0       	ldi	r31, 0x02	; 2
    2544:	ff 12       	cpse	r15, r31
    2546:	14 c0       	rjmp	.+40     	; 0x2570 <xQueueGenericSend+0x6e>
    2548:	4f 2d       	mov	r20, r15
    254a:	b6 01       	movw	r22, r12
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 6f 11 	call	0x22de	; 0x22de <prvCopyDataToQueue>
    2552:	f8 01       	movw	r30, r16
    2554:	91 89       	ldd	r25, Z+17	; 0x11
    2556:	99 23       	and	r25, r25
    2558:	21 f0       	breq	.+8      	; 0x2562 <xQueueGenericSend+0x60>
    255a:	c8 01       	movw	r24, r16
    255c:	41 96       	adiw	r24, 0x11	; 17
    255e:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    2562:	81 11       	cpse	r24, r1
    2564:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2568:	0f 90       	pop	r0
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	50 c0       	rjmp	.+160    	; 0x2610 <xQueueGenericSend+0x10e>
    2570:	2c 81       	ldd	r18, Y+4	; 0x04
    2572:	3d 81       	ldd	r19, Y+5	; 0x05
    2574:	23 2b       	or	r18, r19
    2576:	19 f4       	brne	.+6      	; 0x257e <xQueueGenericSend+0x7c>
    2578:	0f 90       	pop	r0
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	48 c0       	rjmp	.+144    	; 0x260e <xQueueGenericSend+0x10c>
    257e:	81 11       	cpse	r24, r1
    2580:	04 c0       	rjmp	.+8      	; 0x258a <xQueueGenericSend+0x88>
    2582:	ce 01       	movw	r24, r28
    2584:	01 96       	adiw	r24, 0x01	; 1
    2586:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vTaskInternalSetTimeOutState>
    258a:	0f 90       	pop	r0
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	0f 92       	push	r0
    2598:	f8 01       	movw	r30, r16
    259a:	85 8d       	ldd	r24, Z+29	; 0x1d
    259c:	8f 3f       	cpi	r24, 0xFF	; 255
    259e:	09 f4       	brne	.+2      	; 0x25a2 <xQueueGenericSend+0xa0>
    25a0:	15 8e       	std	Z+29, r1	; 0x1d
    25a2:	f8 01       	movw	r30, r16
    25a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    25a6:	8f 3f       	cpi	r24, 0xFF	; 255
    25a8:	09 f4       	brne	.+2      	; 0x25ac <xQueueGenericSend+0xaa>
    25aa:	16 8e       	std	Z+30, r1	; 0x1e
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	be 01       	movw	r22, r28
    25b2:	6c 5f       	subi	r22, 0xFC	; 252
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	01 96       	adiw	r24, 0x01	; 1
    25ba:	0e 94 7e 19 	call	0x32fc	; 0x32fc <xTaskCheckForTimeOut>
    25be:	81 11       	cpse	r24, r1
    25c0:	21 c0       	rjmp	.+66     	; 0x2604 <xQueueGenericSend+0x102>
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	0f 92       	push	r0
    25c8:	f8 01       	movw	r30, r16
    25ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    25cc:	83 8d       	ldd	r24, Z+27	; 0x1b
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	98 13       	cpse	r25, r24
    25d4:	11 c0       	rjmp	.+34     	; 0x25f8 <xQueueGenericSend+0xf6>
    25d6:	6c 81       	ldd	r22, Y+4	; 0x04
    25d8:	7d 81       	ldd	r23, Y+5	; 0x05
    25da:	c5 01       	movw	r24, r10
    25dc:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskPlaceOnEventList>
    25e0:	c8 01       	movw	r24, r16
    25e2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    25e6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    25ea:	88 23       	and	r24, r24
    25ec:	11 f0       	breq	.+4      	; 0x25f2 <xQueueGenericSend+0xf0>
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	a0 cf       	rjmp	.-192    	; 0x2532 <xQueueGenericSend+0x30>
    25f2:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    25f6:	fb cf       	rjmp	.-10     	; 0x25ee <xQueueGenericSend+0xec>
    25f8:	c8 01       	movw	r24, r16
    25fa:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    25fe:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    2602:	f5 cf       	rjmp	.-22     	; 0x25ee <xQueueGenericSend+0xec>
    2604:	c8 01       	movw	r24, r16
    2606:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    260a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	08 95       	ret

0000262e <xQueueGenericSendFromISR>:
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	ec 01       	movw	r28, r24
    263a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    263c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263e:	98 17       	cp	r25, r24
    2640:	10 f0       	brcs	.+4      	; 0x2646 <xQueueGenericSendFromISR+0x18>
    2642:	22 30       	cpi	r18, 0x02	; 2
    2644:	e1 f4       	brne	.+56     	; 0x267e <xQueueGenericSendFromISR+0x50>
    2646:	7a 01       	movw	r14, r20
    2648:	1e 8d       	ldd	r17, Y+30	; 0x1e
    264a:	42 2f       	mov	r20, r18
    264c:	ce 01       	movw	r24, r28
    264e:	0e 94 6f 11 	call	0x22de	; 0x22de <prvCopyDataToQueue>
    2652:	1f 3f       	cpi	r17, 0xFF	; 255
    2654:	81 f4       	brne	.+32     	; 0x2676 <xQueueGenericSendFromISR+0x48>
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	88 23       	and	r24, r24
    265a:	79 f0       	breq	.+30     	; 0x267a <xQueueGenericSendFromISR+0x4c>
    265c:	ce 01       	movw	r24, r28
    265e:	41 96       	adiw	r24, 0x11	; 17
    2660:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    2664:	88 23       	and	r24, r24
    2666:	49 f0       	breq	.+18     	; 0x267a <xQueueGenericSendFromISR+0x4c>
    2668:	e1 14       	cp	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	31 f0       	breq	.+12     	; 0x267a <xQueueGenericSendFromISR+0x4c>
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	f7 01       	movw	r30, r14
    2672:	80 83       	st	Z, r24
    2674:	05 c0       	rjmp	.+10     	; 0x2680 <xQueueGenericSendFromISR+0x52>
    2676:	1f 5f       	subi	r17, 0xFF	; 255
    2678:	1e 8f       	std	Y+30, r17	; 0x1e
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <xQueueGenericSendFromISR+0x52>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	1f 91       	pop	r17
    2686:	ff 90       	pop	r15
    2688:	ef 90       	pop	r14
    268a:	08 95       	ret

0000268c <xQueueReceive>:
    268c:	af 92       	push	r10
    268e:	bf 92       	push	r11
    2690:	cf 92       	push	r12
    2692:	df 92       	push	r13
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <xQueueReceive+0x14>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <xQueueReceive+0x16>
    26a2:	1f 92       	push	r1
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	8c 01       	movw	r16, r24
    26aa:	6b 01       	movw	r12, r22
    26ac:	5d 83       	std	Y+5, r21	; 0x05
    26ae:	4c 83       	std	Y+4, r20	; 0x04
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	58 01       	movw	r10, r16
    26b4:	91 e1       	ldi	r25, 0x11	; 17
    26b6:	a9 0e       	add	r10, r25
    26b8:	b1 1c       	adc	r11, r1
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	0f 92       	push	r0
    26c0:	f8 01       	movw	r30, r16
    26c2:	f2 8c       	ldd	r15, Z+26	; 0x1a
    26c4:	ff 20       	and	r15, r15
    26c6:	a9 f0       	breq	.+42     	; 0x26f2 <xQueueReceive+0x66>
    26c8:	b6 01       	movw	r22, r12
    26ca:	c8 01       	movw	r24, r16
    26cc:	0e 94 c2 11 	call	0x2384	; 0x2384 <prvCopyDataFromQueue>
    26d0:	fa 94       	dec	r15
    26d2:	f8 01       	movw	r30, r16
    26d4:	f2 8e       	std	Z+26, r15	; 0x1a
    26d6:	80 85       	ldd	r24, Z+8	; 0x08
    26d8:	88 23       	and	r24, r24
    26da:	39 f0       	breq	.+14     	; 0x26ea <xQueueReceive+0x5e>
    26dc:	c8 01       	movw	r24, r16
    26de:	08 96       	adiw	r24, 0x08	; 8
    26e0:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    26e4:	81 11       	cpse	r24, r1
    26e6:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	50 c0       	rjmp	.+160    	; 0x2792 <xQueueReceive+0x106>
    26f2:	2c 81       	ldd	r18, Y+4	; 0x04
    26f4:	3d 81       	ldd	r19, Y+5	; 0x05
    26f6:	23 2b       	or	r18, r19
    26f8:	19 f4       	brne	.+6      	; 0x2700 <xQueueReceive+0x74>
    26fa:	0f 90       	pop	r0
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	48 c0       	rjmp	.+144    	; 0x2790 <xQueueReceive+0x104>
    2700:	81 11       	cpse	r24, r1
    2702:	04 c0       	rjmp	.+8      	; 0x270c <xQueueReceive+0x80>
    2704:	ce 01       	movw	r24, r28
    2706:	01 96       	adiw	r24, 0x01	; 1
    2708:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vTaskInternalSetTimeOutState>
    270c:	0f 90       	pop	r0
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	0f 92       	push	r0
    271a:	f8 01       	movw	r30, r16
    271c:	85 8d       	ldd	r24, Z+29	; 0x1d
    271e:	8f 3f       	cpi	r24, 0xFF	; 255
    2720:	09 f4       	brne	.+2      	; 0x2724 <xQueueReceive+0x98>
    2722:	15 8e       	std	Z+29, r1	; 0x1d
    2724:	f8 01       	movw	r30, r16
    2726:	86 8d       	ldd	r24, Z+30	; 0x1e
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	09 f4       	brne	.+2      	; 0x272e <xQueueReceive+0xa2>
    272c:	16 8e       	std	Z+30, r1	; 0x1e
    272e:	0f 90       	pop	r0
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	be 01       	movw	r22, r28
    2734:	6c 5f       	subi	r22, 0xFC	; 252
    2736:	7f 4f       	sbci	r23, 0xFF	; 255
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <xTaskCheckForTimeOut>
    2740:	81 11       	cpse	r24, r1
    2742:	1c c0       	rjmp	.+56     	; 0x277c <xQueueReceive+0xf0>
    2744:	c8 01       	movw	r24, r16
    2746:	0e 94 64 11 	call	0x22c8	; 0x22c8 <prvIsQueueEmpty>
    274a:	88 23       	and	r24, r24
    274c:	89 f0       	breq	.+34     	; 0x2770 <xQueueReceive+0xe4>
    274e:	6c 81       	ldd	r22, Y+4	; 0x04
    2750:	7d 81       	ldd	r23, Y+5	; 0x05
    2752:	c5 01       	movw	r24, r10
    2754:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskPlaceOnEventList>
    2758:	c8 01       	movw	r24, r16
    275a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    275e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    2762:	88 23       	and	r24, r24
    2764:	11 f0       	breq	.+4      	; 0x276a <xQueueReceive+0xde>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	a8 cf       	rjmp	.-176    	; 0x26ba <xQueueReceive+0x2e>
    276a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    276e:	fb cf       	rjmp	.-10     	; 0x2766 <xQueueReceive+0xda>
    2770:	c8 01       	movw	r24, r16
    2772:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    2776:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    277a:	f5 cf       	rjmp	.-22     	; 0x2766 <xQueueReceive+0xda>
    277c:	c8 01       	movw	r24, r16
    277e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    2782:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    2786:	c8 01       	movw	r24, r16
    2788:	0e 94 64 11 	call	0x22c8	; 0x22c8 <prvIsQueueEmpty>
    278c:	88 23       	and	r24, r24
    278e:	59 f3       	breq	.-42     	; 0x2766 <xQueueReceive+0xda>
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	df 90       	pop	r13
    27a8:	cf 90       	pop	r12
    27aa:	bf 90       	pop	r11
    27ac:	af 90       	pop	r10
    27ae:	08 95       	ret

000027b0 <xQueueSemaphoreTake>:
    27b0:	cf 92       	push	r12
    27b2:	df 92       	push	r13
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <xQueueSemaphoreTake+0x10>
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <xQueueSemaphoreTake+0x12>
    27c2:	1f 92       	push	r1
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	8c 01       	movw	r16, r24
    27ca:	7d 83       	std	Y+5, r23	; 0x05
    27cc:	6c 83       	std	Y+4, r22	; 0x04
    27ce:	f1 2c       	mov	r15, r1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	68 01       	movw	r12, r16
    27d4:	81 e1       	ldi	r24, 0x11	; 17
    27d6:	c8 0e       	add	r12, r24
    27d8:	d1 1c       	adc	r13, r1
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	0f 92       	push	r0
    27e0:	d8 01       	movw	r26, r16
    27e2:	5a 96       	adiw	r26, 0x1a	; 26
    27e4:	8c 91       	ld	r24, X
    27e6:	5a 97       	sbiw	r26, 0x1a	; 26
    27e8:	88 23       	and	r24, r24
    27ea:	e9 f0       	breq	.+58     	; 0x2826 <xQueueSemaphoreTake+0x76>
    27ec:	81 50       	subi	r24, 0x01	; 1
    27ee:	5a 96       	adiw	r26, 0x1a	; 26
    27f0:	8c 93       	st	X, r24
    27f2:	5a 97       	sbiw	r26, 0x1a	; 26
    27f4:	8d 91       	ld	r24, X+
    27f6:	9c 91       	ld	r25, X
    27f8:	89 2b       	or	r24, r25
    27fa:	29 f4       	brne	.+10     	; 0x2806 <xQueueSemaphoreTake+0x56>
    27fc:	0e 94 a7 1a 	call	0x354e	; 0x354e <pvTaskIncrementMutexHeldCount>
    2800:	f8 01       	movw	r30, r16
    2802:	95 83       	std	Z+5, r25	; 0x05
    2804:	84 83       	std	Z+4, r24	; 0x04
    2806:	d8 01       	movw	r26, r16
    2808:	18 96       	adiw	r26, 0x08	; 8
    280a:	8c 91       	ld	r24, X
    280c:	88 23       	and	r24, r24
    280e:	39 f0       	breq	.+14     	; 0x281e <xQueueSemaphoreTake+0x6e>
    2810:	c8 01       	movw	r24, r16
    2812:	08 96       	adiw	r24, 0x08	; 8
    2814:	0e 94 33 19 	call	0x3266	; 0x3266 <xTaskRemoveFromEventList>
    2818:	81 11       	cpse	r24, r1
    281a:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    281e:	0f 90       	pop	r0
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	7a c0       	rjmp	.+244    	; 0x291a <xQueueSemaphoreTake+0x16a>
    2826:	2c 81       	ldd	r18, Y+4	; 0x04
    2828:	3d 81       	ldd	r19, Y+5	; 0x05
    282a:	23 2b       	or	r18, r19
    282c:	09 f4       	brne	.+2      	; 0x2830 <xQueueSemaphoreTake+0x80>
    282e:	72 c0       	rjmp	.+228    	; 0x2914 <xQueueSemaphoreTake+0x164>
    2830:	91 11       	cpse	r25, r1
    2832:	04 c0       	rjmp	.+8      	; 0x283c <xQueueSemaphoreTake+0x8c>
    2834:	ce 01       	movw	r24, r28
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vTaskInternalSetTimeOutState>
    283c:	0f 90       	pop	r0
    283e:	0f be       	out	0x3f, r0	; 63
    2840:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	0f 92       	push	r0
    284a:	f8 01       	movw	r30, r16
    284c:	85 8d       	ldd	r24, Z+29	; 0x1d
    284e:	8f 3f       	cpi	r24, 0xFF	; 255
    2850:	09 f4       	brne	.+2      	; 0x2854 <xQueueSemaphoreTake+0xa4>
    2852:	15 8e       	std	Z+29, r1	; 0x1d
    2854:	d8 01       	movw	r26, r16
    2856:	5e 96       	adiw	r26, 0x1e	; 30
    2858:	8c 91       	ld	r24, X
    285a:	5e 97       	sbiw	r26, 0x1e	; 30
    285c:	8f 3f       	cpi	r24, 0xFF	; 255
    285e:	11 f4       	brne	.+4      	; 0x2864 <xQueueSemaphoreTake+0xb4>
    2860:	5e 96       	adiw	r26, 0x1e	; 30
    2862:	1c 92       	st	X, r1
    2864:	0f 90       	pop	r0
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	be 01       	movw	r22, r28
    286a:	6c 5f       	subi	r22, 0xFC	; 252
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	ce 01       	movw	r24, r28
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	0e 94 7e 19 	call	0x32fc	; 0x32fc <xTaskCheckForTimeOut>
    2876:	81 11       	cpse	r24, r1
    2878:	2b c0       	rjmp	.+86     	; 0x28d0 <xQueueSemaphoreTake+0x120>
    287a:	c8 01       	movw	r24, r16
    287c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <prvIsQueueEmpty>
    2880:	88 23       	and	r24, r24
    2882:	01 f1       	breq	.+64     	; 0x28c4 <xQueueSemaphoreTake+0x114>
    2884:	f8 01       	movw	r30, r16
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	89 2b       	or	r24, r25
    288c:	51 f4       	brne	.+20     	; 0x28a2 <xQueueSemaphoreTake+0xf2>
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	0f 92       	push	r0
    2894:	84 81       	ldd	r24, Z+4	; 0x04
    2896:	95 81       	ldd	r25, Z+5	; 0x05
    2898:	0e 94 c3 19 	call	0x3386	; 0x3386 <xTaskPriorityInherit>
    289c:	f8 2e       	mov	r15, r24
    289e:	0f 90       	pop	r0
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	6c 81       	ldd	r22, Y+4	; 0x04
    28a4:	7d 81       	ldd	r23, Y+5	; 0x05
    28a6:	c6 01       	movw	r24, r12
    28a8:	0e 94 0a 19 	call	0x3214	; 0x3214 <vTaskPlaceOnEventList>
    28ac:	c8 01       	movw	r24, r16
    28ae:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    28b2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    28b6:	88 23       	and	r24, r24
    28b8:	11 f0       	breq	.+4      	; 0x28be <xQueueSemaphoreTake+0x10e>
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	8e cf       	rjmp	.-228    	; 0x27da <xQueueSemaphoreTake+0x2a>
    28be:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    28c2:	fb cf       	rjmp	.-10     	; 0x28ba <xQueueSemaphoreTake+0x10a>
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    28ca:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    28ce:	f5 cf       	rjmp	.-22     	; 0x28ba <xQueueSemaphoreTake+0x10a>
    28d0:	c8 01       	movw	r24, r16
    28d2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvUnlockQueue>
    28d6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    28da:	c8 01       	movw	r24, r16
    28dc:	0e 94 64 11 	call	0x22c8	; 0x22c8 <prvIsQueueEmpty>
    28e0:	88 23       	and	r24, r24
    28e2:	59 f3       	breq	.-42     	; 0x28ba <xQueueSemaphoreTake+0x10a>
    28e4:	ff 20       	and	r15, r15
    28e6:	c1 f0       	breq	.+48     	; 0x2918 <xQueueSemaphoreTake+0x168>
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	0f 92       	push	r0
    28ee:	f8 01       	movw	r30, r16
    28f0:	81 89       	ldd	r24, Z+17	; 0x11
    28f2:	88 23       	and	r24, r24
    28f4:	39 f0       	breq	.+14     	; 0x2904 <xQueueSemaphoreTake+0x154>
    28f6:	06 88       	ldd	r0, Z+22	; 0x16
    28f8:	f7 89       	ldd	r31, Z+23	; 0x17
    28fa:	e0 2d       	mov	r30, r0
    28fc:	80 81       	ld	r24, Z
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	68 1b       	sub	r22, r24
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <xQueueSemaphoreTake+0x156>
    2904:	60 e0       	ldi	r22, 0x00	; 0
    2906:	d8 01       	movw	r26, r16
    2908:	14 96       	adiw	r26, 0x04	; 4
    290a:	8d 91       	ld	r24, X+
    290c:	9c 91       	ld	r25, X
    290e:	15 97       	sbiw	r26, 0x05	; 5
    2910:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <vTaskPriorityDisinheritAfterTimeout>
    2914:	0f 90       	pop	r0
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
    2932:	08 95       	ret

00002934 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	0f 92       	push	r0
    2940:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2942:	8f 3f       	cpi	r24, 0xFF	; 255
    2944:	09 f4       	brne	.+2      	; 0x2948 <vQueueWaitForMessageRestricted+0x14>
    2946:	1d 8e       	std	Y+29, r1	; 0x1d
    2948:	8e 8d       	ldd	r24, Y+30	; 0x1e
    294a:	8f 3f       	cpi	r24, 0xFF	; 255
    294c:	09 f4       	brne	.+2      	; 0x2950 <vQueueWaitForMessageRestricted+0x1c>
    294e:	1e 8e       	std	Y+30, r1	; 0x1e
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2954:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2956:	81 11       	cpse	r24, r1
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    295a:	ce 01       	movw	r24, r28
    295c:	41 96       	adiw	r24, 0x11	; 17
    295e:	0e 94 1b 19 	call	0x3236	; 0x3236 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2962:	ce 01       	movw	r24, r28
    }
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2968:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <prvUnlockQueue>

0000296c <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    296c:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <pxDelayedTaskList>
    2970:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2974:	80 81       	ld	r24, Z
    2976:	81 11       	cpse	r24, r1
    2978:	03 c0       	rjmp	.+6      	; 0x2980 <prvResetNextTaskUnblockTime+0x14>
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	9f ef       	ldi	r25, 0xFF	; 255
    297e:	0c c0       	rjmp	.+24     	; 0x2998 <prvResetNextTaskUnblockTime+0x2c>
    2980:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <pxDelayedTaskList>
    2984:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2988:	05 80       	ldd	r0, Z+5	; 0x05
    298a:	f6 81       	ldd	r31, Z+6	; 0x06
    298c:	e0 2d       	mov	r30, r0
    298e:	06 80       	ldd	r0, Z+6	; 0x06
    2990:	f7 81       	ldd	r31, Z+7	; 0x07
    2992:	e0 2d       	mov	r30, r0
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <xNextTaskUnblockTime+0x1>
    299c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <xNextTaskUnblockTime>
    29a0:	08 95       	ret

000029a2 <prvAddCurrentTaskToDelayedList>:
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	ec 01       	movw	r28, r24
    29ae:	f6 2e       	mov	r15, r22
    29b0:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <xTickCount>
    29b4:	10 91 29 04 	lds	r17, 0x0429	; 0x800429 <xTickCount+0x1>
    29b8:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    29bc:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    29c0:	02 96       	adiw	r24, 0x02	; 2
    29c2:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    29c6:	cf 3f       	cpi	r28, 0xFF	; 255
    29c8:	8f ef       	ldi	r24, 0xFF	; 255
    29ca:	d8 07       	cpc	r29, r24
    29cc:	89 f4       	brne	.+34     	; 0x29f0 <prvAddCurrentTaskToDelayedList+0x4e>
    29ce:	ff 20       	and	r15, r15
    29d0:	79 f0       	breq	.+30     	; 0x29f0 <prvAddCurrentTaskToDelayedList+0x4e>
    29d2:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <pxCurrentTCB>
    29d6:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    29da:	6e 5f       	subi	r22, 0xFE	; 254
    29dc:	7f 4f       	sbci	r23, 0xFF	; 255
    29de:	8b e2       	ldi	r24, 0x2B	; 43
    29e0:	94 e0       	ldi	r25, 0x04	; 4
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	ff 90       	pop	r15
    29ec:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <vListInsertEnd>
    29f0:	c0 0f       	add	r28, r16
    29f2:	d1 1f       	adc	r29, r17
    29f4:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    29f8:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    29fc:	d3 83       	std	Z+3, r29	; 0x03
    29fe:	c2 83       	std	Z+2, r28	; 0x02
    2a00:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <pxCurrentTCB>
    2a04:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2a08:	c0 17       	cp	r28, r16
    2a0a:	d1 07       	cpc	r29, r17
    2a0c:	68 f4       	brcc	.+26     	; 0x2a28 <prvAddCurrentTaskToDelayedList+0x86>
    2a0e:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <pxOverflowDelayedTaskList>
    2a12:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <pxOverflowDelayedTaskList+0x1>
    2a16:	6e 5f       	subi	r22, 0xFE	; 254
    2a18:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	ff 90       	pop	r15
    2a24:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <vListInsert>
    2a28:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <pxDelayedTaskList>
    2a2c:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2a30:	6e 5f       	subi	r22, 0xFE	; 254
    2a32:	7f 4f       	sbci	r23, 0xFF	; 255
    2a34:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <vListInsert>
    2a38:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <xNextTaskUnblockTime>
    2a3c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <xNextTaskUnblockTime+0x1>
    2a40:	c8 17       	cp	r28, r24
    2a42:	d9 07       	cpc	r29, r25
    2a44:	20 f4       	brcc	.+8      	; 0x2a4e <prvAddCurrentTaskToDelayedList+0xac>
    2a46:	d0 93 21 04 	sts	0x0421, r29	; 0x800421 <xNextTaskUnblockTime+0x1>
    2a4a:	c0 93 20 04 	sts	0x0420, r28	; 0x800420 <xNextTaskUnblockTime>
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ff 90       	pop	r15
    2a58:	08 95       	ret

00002a5a <prvIdleTask>:
    2a5a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <uxDeletedTasksWaitingCleanUp>
    2a5e:	88 23       	and	r24, r24
    2a60:	09 f1       	breq	.+66     	; 0x2aa4 <prvIdleTask+0x4a>
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	0f 92       	push	r0
    2a68:	e0 91 3a 04 	lds	r30, 0x043A	; 0x80043a <xTasksWaitingTermination+0x5>
    2a6c:	f0 91 3b 04 	lds	r31, 0x043B	; 0x80043b <xTasksWaitingTermination+0x6>
    2a70:	c6 81       	ldd	r28, Z+6	; 0x06
    2a72:	d7 81       	ldd	r29, Z+7	; 0x07
    2a74:	ce 01       	movw	r24, r28
    2a76:	02 96       	adiw	r24, 0x02	; 2
    2a78:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2a7c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <uxCurrentNumberOfTasks>
    2a80:	81 50       	subi	r24, 0x01	; 1
    2a82:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <uxCurrentNumberOfTasks>
    2a86:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <uxDeletedTasksWaitingCleanUp>
    2a8a:	81 50       	subi	r24, 0x01	; 1
    2a8c:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <uxDeletedTasksWaitingCleanUp>
    2a90:	0f 90       	pop	r0
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	8f 89       	ldd	r24, Y+23	; 0x17
    2a96:	98 8d       	ldd	r25, Y+24	; 0x18
    2a98:	0e 94 76 1e 	call	0x3cec	; 0x3cec <vPortFree>
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	0e 94 76 1e 	call	0x3cec	; 0x3cec <vPortFree>
    2aa2:	db cf       	rjmp	.-74     	; 0x2a5a <prvIdleTask>
    2aa4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <pxReadyTasksLists>
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <prvIdleTask+0x56>
    2aac:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2ab0:	0e 94 c4 1c 	call	0x3988	; 0x3988 <vApplicationIdleHook>
    2ab4:	d2 cf       	rjmp	.-92     	; 0x2a5a <prvIdleTask>

00002ab6 <xTaskCreate>:
    2ab6:	5f 92       	push	r5
    2ab8:	6f 92       	push	r6
    2aba:	7f 92       	push	r7
    2abc:	8f 92       	push	r8
    2abe:	9f 92       	push	r9
    2ac0:	af 92       	push	r10
    2ac2:	bf 92       	push	r11
    2ac4:	cf 92       	push	r12
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	3c 01       	movw	r6, r24
    2ad6:	6b 01       	movw	r12, r22
    2ad8:	5a 01       	movw	r10, r20
    2ada:	49 01       	movw	r8, r18
    2adc:	50 2e       	mov	r5, r16
    2ade:	ca 01       	movw	r24, r20
    2ae0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <pvPortMalloc>
    2ae4:	8c 01       	movw	r16, r24
    2ae6:	89 2b       	or	r24, r25
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <xTaskCreate+0x36>
    2aea:	e0 c0       	rjmp	.+448    	; 0x2cac <xTaskCreate+0x1f6>
    2aec:	88 e2       	ldi	r24, 0x28	; 40
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <pvPortMalloc>
    2af4:	ec 01       	movw	r28, r24
    2af6:	89 2b       	or	r24, r25
    2af8:	c9 f0       	breq	.+50     	; 0x2b2c <xTaskCreate+0x76>
    2afa:	18 8f       	std	Y+24, r17	; 0x18
    2afc:	0f 8b       	std	Y+23, r16	; 0x17
    2afe:	a5 01       	movw	r20, r10
    2b00:	65 ea       	ldi	r22, 0xA5	; 165
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	c8 01       	movw	r24, r16
    2b06:	0e 94 70 23 	call	0x46e0	; 0x46e0 <memset>
    2b0a:	21 e0       	ldi	r18, 0x01	; 1
    2b0c:	a2 1a       	sub	r10, r18
    2b0e:	b1 08       	sbc	r11, r1
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	a8 0e       	add	r10, r24
    2b16:	b9 1e       	adc	r11, r25
    2b18:	c1 14       	cp	r12, r1
    2b1a:	d1 04       	cpc	r13, r1
    2b1c:	c9 f0       	breq	.+50     	; 0x2b50 <xTaskCreate+0x9a>
    2b1e:	be 01       	movw	r22, r28
    2b20:	67 5e       	subi	r22, 0xE7	; 231
    2b22:	7f 4f       	sbci	r23, 0xFF	; 255
    2b24:	f6 01       	movw	r30, r12
    2b26:	c6 01       	movw	r24, r12
    2b28:	08 96       	adiw	r24, 0x08	; 8
    2b2a:	07 c0       	rjmp	.+14     	; 0x2b3a <xTaskCreate+0x84>
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	0e 94 76 1e 	call	0x3cec	; 0x3cec <vPortFree>
    2b32:	bc c0       	rjmp	.+376    	; 0x2cac <xTaskCreate+0x1f6>
    2b34:	e8 17       	cp	r30, r24
    2b36:	f9 07       	cpc	r31, r25
    2b38:	49 f0       	breq	.+18     	; 0x2b4c <xTaskCreate+0x96>
    2b3a:	9f 01       	movw	r18, r30
    2b3c:	41 91       	ld	r20, Z+
    2b3e:	db 01       	movw	r26, r22
    2b40:	4d 93       	st	X+, r20
    2b42:	bd 01       	movw	r22, r26
    2b44:	d9 01       	movw	r26, r18
    2b46:	2c 91       	ld	r18, X
    2b48:	21 11       	cpse	r18, r1
    2b4a:	f4 cf       	rjmp	.-24     	; 0x2b34 <xTaskCreate+0x7e>
    2b4c:	18 a2       	std	Y+32, r1	; 0x20
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <xTaskCreate+0x9c>
    2b50:	19 8e       	std	Y+25, r1	; 0x19
    2b52:	05 2d       	mov	r16, r5
    2b54:	04 30       	cpi	r16, 0x04	; 4
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <xTaskCreate+0xa4>
    2b58:	03 e0       	ldi	r16, 0x03	; 3
    2b5a:	0e 8b       	std	Y+22, r16	; 0x16
    2b5c:	09 a3       	std	Y+33, r16	; 0x21
    2b5e:	1a a2       	std	Y+34, r1	; 0x22
    2b60:	6e 01       	movw	r12, r28
    2b62:	b2 e0       	ldi	r27, 0x02	; 2
    2b64:	cb 0e       	add	r12, r27
    2b66:	d1 1c       	adc	r13, r1
    2b68:	c6 01       	movw	r24, r12
    2b6a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <vListInitialiseItem>
    2b6e:	ce 01       	movw	r24, r28
    2b70:	0c 96       	adiw	r24, 0x0c	; 12
    2b72:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <vListInitialiseItem>
    2b76:	d9 87       	std	Y+9, r29	; 0x09
    2b78:	c8 87       	std	Y+8, r28	; 0x08
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	80 1b       	sub	r24, r16
    2b80:	91 09       	sbc	r25, r1
    2b82:	9d 87       	std	Y+13, r25	; 0x0d
    2b84:	8c 87       	std	Y+12, r24	; 0x0c
    2b86:	db 8b       	std	Y+19, r29	; 0x13
    2b88:	ca 8b       	std	Y+18, r28	; 0x12
    2b8a:	1b a2       	std	Y+35, r1	; 0x23
    2b8c:	1c a2       	std	Y+36, r1	; 0x24
    2b8e:	1d a2       	std	Y+37, r1	; 0x25
    2b90:	1e a2       	std	Y+38, r1	; 0x26
    2b92:	1f a2       	std	Y+39, r1	; 0x27
    2b94:	a4 01       	movw	r20, r8
    2b96:	b3 01       	movw	r22, r6
    2b98:	c5 01       	movw	r24, r10
    2b9a:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <pxPortInitialiseStack>
    2b9e:	99 83       	std	Y+1, r25	; 0x01
    2ba0:	88 83       	st	Y, r24
    2ba2:	e1 14       	cp	r14, r1
    2ba4:	f1 04       	cpc	r15, r1
    2ba6:	19 f0       	breq	.+6      	; 0x2bae <xTaskCreate+0xf8>
    2ba8:	f7 01       	movw	r30, r14
    2baa:	d1 83       	std	Z+1, r29	; 0x01
    2bac:	c0 83       	st	Z, r28
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	0f 92       	push	r0
    2bb4:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <uxCurrentNumberOfTasks>
    2bb8:	8f 5f       	subi	r24, 0xFF	; 255
    2bba:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <uxCurrentNumberOfTasks>
    2bbe:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    2bc2:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2bc6:	89 2b       	or	r24, r25
    2bc8:	d1 f5       	brne	.+116    	; 0x2c3e <xTaskCreate+0x188>
    2bca:	d0 93 82 04 	sts	0x0482, r29	; 0x800482 <pxCurrentTCB+0x1>
    2bce:	c0 93 81 04 	sts	0x0481, r28	; 0x800481 <pxCurrentTCB>
    2bd2:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <uxCurrentNumberOfTasks>
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <xTaskCreate+0x126>
    2bda:	41 c0       	rjmp	.+130    	; 0x2c5e <xTaskCreate+0x1a8>
    2bdc:	8d e5       	ldi	r24, 0x5D	; 93
    2bde:	94 e0       	ldi	r25, 0x04	; 4
    2be0:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2be4:	86 e6       	ldi	r24, 0x66	; 102
    2be6:	94 e0       	ldi	r25, 0x04	; 4
    2be8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2bec:	8f e6       	ldi	r24, 0x6F	; 111
    2bee:	94 e0       	ldi	r25, 0x04	; 4
    2bf0:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2bf4:	88 e7       	ldi	r24, 0x78	; 120
    2bf6:	94 e0       	ldi	r25, 0x04	; 4
    2bf8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2bfc:	84 e5       	ldi	r24, 0x54	; 84
    2bfe:	94 e0       	ldi	r25, 0x04	; 4
    2c00:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2c04:	8b e4       	ldi	r24, 0x4B	; 75
    2c06:	94 e0       	ldi	r25, 0x04	; 4
    2c08:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2c0c:	8e e3       	ldi	r24, 0x3E	; 62
    2c0e:	94 e0       	ldi	r25, 0x04	; 4
    2c10:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2c14:	85 e3       	ldi	r24, 0x35	; 53
    2c16:	94 e0       	ldi	r25, 0x04	; 4
    2c18:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2c1c:	8b e2       	ldi	r24, 0x2B	; 43
    2c1e:	94 e0       	ldi	r25, 0x04	; 4
    2c20:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    2c24:	84 e5       	ldi	r24, 0x54	; 84
    2c26:	94 e0       	ldi	r25, 0x04	; 4
    2c28:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <pxDelayedTaskList+0x1>
    2c2c:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <pxDelayedTaskList>
    2c30:	8b e4       	ldi	r24, 0x4B	; 75
    2c32:	94 e0       	ldi	r25, 0x04	; 4
    2c34:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <pxOverflowDelayedTaskList+0x1>
    2c38:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <pxOverflowDelayedTaskList>
    2c3c:	10 c0       	rjmp	.+32     	; 0x2c5e <xTaskCreate+0x1a8>
    2c3e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <xSchedulerRunning>
    2c42:	81 11       	cpse	r24, r1
    2c44:	0c c0       	rjmp	.+24     	; 0x2c5e <xTaskCreate+0x1a8>
    2c46:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2c4a:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2c4e:	96 89       	ldd	r25, Z+22	; 0x16
    2c50:	8e 89       	ldd	r24, Y+22	; 0x16
    2c52:	89 17       	cp	r24, r25
    2c54:	20 f0       	brcs	.+8      	; 0x2c5e <xTaskCreate+0x1a8>
    2c56:	d0 93 82 04 	sts	0x0482, r29	; 0x800482 <pxCurrentTCB+0x1>
    2c5a:	c0 93 81 04 	sts	0x0481, r28	; 0x800481 <pxCurrentTCB>
    2c5e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxTaskNumber>
    2c62:	8f 5f       	subi	r24, 0xFF	; 255
    2c64:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTaskNumber>
    2c68:	8e 89       	ldd	r24, Y+22	; 0x16
    2c6a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    2c6e:	98 17       	cp	r25, r24
    2c70:	10 f4       	brcc	.+4      	; 0x2c76 <xTaskCreate+0x1c0>
    2c72:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    2c76:	f9 e0       	ldi	r31, 0x09	; 9
    2c78:	8f 9f       	mul	r24, r31
    2c7a:	c0 01       	movw	r24, r0
    2c7c:	11 24       	eor	r1, r1
    2c7e:	b6 01       	movw	r22, r12
    2c80:	83 5a       	subi	r24, 0xA3	; 163
    2c82:	9b 4f       	sbci	r25, 0xFB	; 251
    2c84:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    2c88:	0f 90       	pop	r0
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <xSchedulerRunning>
    2c90:	88 23       	and	r24, r24
    2c92:	51 f0       	breq	.+20     	; 0x2ca8 <xTaskCreate+0x1f2>
    2c94:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2c98:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2c9c:	96 89       	ldd	r25, Z+22	; 0x16
    2c9e:	8e 89       	ldd	r24, Y+22	; 0x16
    2ca0:	98 17       	cp	r25, r24
    2ca2:	10 f4       	brcc	.+4      	; 0x2ca8 <xTaskCreate+0x1f2>
    2ca4:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <xTaskCreate+0x1f8>
    2cac:	8f ef       	ldi	r24, 0xFF	; 255
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	bf 90       	pop	r11
    2cc0:	af 90       	pop	r10
    2cc2:	9f 90       	pop	r9
    2cc4:	8f 90       	pop	r8
    2cc6:	7f 90       	pop	r7
    2cc8:	6f 90       	pop	r6
    2cca:	5f 90       	pop	r5
    2ccc:	08 95       	ret

00002cce <vTaskResume>:
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	20 91 81 04 	lds	r18, 0x0481	; 0x800481 <pxCurrentTCB>
    2cda:	30 91 82 04 	lds	r19, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2cde:	82 17       	cp	r24, r18
    2ce0:	93 07       	cpc	r25, r19
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <vTaskResume+0x18>
    2ce4:	38 c0       	rjmp	.+112    	; 0x2d56 <vTaskResume+0x88>
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <vTaskResume+0x1e>
    2cea:	35 c0       	rjmp	.+106    	; 0x2d56 <vTaskResume+0x88>
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	0f 92       	push	r0
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	22 85       	ldd	r18, Z+10	; 0x0a
    2cf6:	33 85       	ldd	r19, Z+11	; 0x0b
    2cf8:	2b 52       	subi	r18, 0x2B	; 43
    2cfa:	34 40       	sbci	r19, 0x04	; 4
    2cfc:	51 f5       	brne	.+84     	; 0x2d52 <vTaskResume+0x84>
    2cfe:	fc 01       	movw	r30, r24
    2d00:	24 89       	ldd	r18, Z+20	; 0x14
    2d02:	35 89       	ldd	r19, Z+21	; 0x15
    2d04:	f4 e0       	ldi	r31, 0x04	; 4
    2d06:	2e 33       	cpi	r18, 0x3E	; 62
    2d08:	3f 07       	cpc	r19, r31
    2d0a:	19 f1       	breq	.+70     	; 0x2d52 <vTaskResume+0x84>
    2d0c:	23 2b       	or	r18, r19
    2d0e:	09 f5       	brne	.+66     	; 0x2d52 <vTaskResume+0x84>
    2d10:	ec 01       	movw	r28, r24
    2d12:	8c 01       	movw	r16, r24
    2d14:	0e 5f       	subi	r16, 0xFE	; 254
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	c8 01       	movw	r24, r16
    2d1a:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2d1e:	8e 89       	ldd	r24, Y+22	; 0x16
    2d20:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    2d24:	98 17       	cp	r25, r24
    2d26:	10 f4       	brcc	.+4      	; 0x2d2c <vTaskResume+0x5e>
    2d28:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    2d2c:	29 e0       	ldi	r18, 0x09	; 9
    2d2e:	82 9f       	mul	r24, r18
    2d30:	c0 01       	movw	r24, r0
    2d32:	11 24       	eor	r1, r1
    2d34:	b8 01       	movw	r22, r16
    2d36:	83 5a       	subi	r24, 0xA3	; 163
    2d38:	9b 4f       	sbci	r25, 0xFB	; 251
    2d3a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    2d3e:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2d42:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2d46:	9e 89       	ldd	r25, Y+22	; 0x16
    2d48:	86 89       	ldd	r24, Z+22	; 0x16
    2d4a:	98 17       	cp	r25, r24
    2d4c:	10 f0       	brcs	.+4      	; 0x2d52 <vTaskResume+0x84>
    2d4e:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2d52:	0f 90       	pop	r0
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <vTaskStartScheduler>:
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	8e e1       	ldi	r24, 0x1E	; 30
    2d68:	e8 2e       	mov	r14, r24
    2d6a:	84 e0       	ldi	r24, 0x04	; 4
    2d6c:	f8 2e       	mov	r15, r24
    2d6e:	00 e0       	ldi	r16, 0x00	; 0
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 ec       	ldi	r20, 0xC0	; 192
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	69 e5       	ldi	r22, 0x59	; 89
    2d7a:	72 e0       	ldi	r23, 0x02	; 2
    2d7c:	8d e2       	ldi	r24, 0x2D	; 45
    2d7e:	95 e1       	ldi	r25, 0x15	; 21
    2d80:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	b1 f4       	brne	.+44     	; 0x2db4 <vTaskStartScheduler+0x54>
    2d88:	0e 94 0c 1b 	call	0x3618	; 0x3618 <xTimerCreateTimerTask>
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	91 f4       	brne	.+36     	; 0x2db4 <vTaskStartScheduler+0x54>
    2d90:	f8 94       	cli
    2d92:	2f ef       	ldi	r18, 0xFF	; 255
    2d94:	3f ef       	ldi	r19, 0xFF	; 255
    2d96:	30 93 21 04 	sts	0x0421, r19	; 0x800421 <xNextTaskUnblockTime+0x1>
    2d9a:	20 93 20 04 	sts	0x0420, r18	; 0x800420 <xNextTaskUnblockTime>
    2d9e:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <xSchedulerRunning>
    2da2:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <xTickCount+0x1>
    2da6:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <xTickCount>
    2daa:	0f 91       	pop	r16
    2dac:	ff 90       	pop	r15
    2dae:	ef 90       	pop	r14
    2db0:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <xPortStartScheduler>
    2db4:	0f 91       	pop	r16
    2db6:	ff 90       	pop	r15
    2db8:	ef 90       	pop	r14
    2dba:	08 95       	ret

00002dbc <vTaskSuspendAll>:
    2dbc:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <uxSchedulerSuspended>
    2dc6:	08 95       	ret

00002dc8 <xTaskGetTickCount>:
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	f8 94       	cli
    2dcc:	0f 92       	push	r0
    2dce:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <xTickCount>
    2dd2:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <xTickCount+0x1>
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	08 95       	ret

00002ddc <xTaskIncrementTick>:
    2ddc:	cf 92       	push	r12
    2dde:	df 92       	push	r13
    2de0:	ef 92       	push	r14
    2de2:	ff 92       	push	r15
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    2df0:	81 11       	cpse	r24, r1
    2df2:	8c c0       	rjmp	.+280    	; 0x2f0c <xTaskIncrementTick+0x130>
    2df4:	00 91 28 04 	lds	r16, 0x0428	; 0x800428 <xTickCount>
    2df8:	10 91 29 04 	lds	r17, 0x0429	; 0x800429 <xTickCount+0x1>
    2dfc:	0f 5f       	subi	r16, 0xFF	; 255
    2dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    2e00:	10 93 29 04 	sts	0x0429, r17	; 0x800429 <xTickCount+0x1>
    2e04:	00 93 28 04 	sts	0x0428, r16	; 0x800428 <xTickCount>
    2e08:	01 15       	cp	r16, r1
    2e0a:	11 05       	cpc	r17, r1
    2e0c:	b9 f4       	brne	.+46     	; 0x2e3c <xTaskIncrementTick+0x60>
    2e0e:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <pxDelayedTaskList>
    2e12:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2e16:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <pxOverflowDelayedTaskList>
    2e1a:	30 91 48 04 	lds	r19, 0x0448	; 0x800448 <pxOverflowDelayedTaskList+0x1>
    2e1e:	30 93 4a 04 	sts	0x044A, r19	; 0x80044a <pxDelayedTaskList+0x1>
    2e22:	20 93 49 04 	sts	0x0449, r18	; 0x800449 <pxDelayedTaskList>
    2e26:	90 93 48 04 	sts	0x0448, r25	; 0x800448 <pxOverflowDelayedTaskList+0x1>
    2e2a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <pxOverflowDelayedTaskList>
    2e2e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xNumOfOverflows>
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <xNumOfOverflows>
    2e38:	0e 94 b6 14 	call	0x296c	; 0x296c <prvResetNextTaskUnblockTime>
    2e3c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <xNextTaskUnblockTime>
    2e40:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <xNextTaskUnblockTime+0x1>
    2e44:	c0 e0       	ldi	r28, 0x00	; 0
    2e46:	08 17       	cp	r16, r24
    2e48:	19 07       	cpc	r17, r25
    2e4a:	08 f4       	brcc	.+2      	; 0x2e4e <xTaskIncrementTick+0x72>
    2e4c:	4f c0       	rjmp	.+158    	; 0x2eec <xTaskIncrementTick+0x110>
    2e4e:	d9 e0       	ldi	r29, 0x09	; 9
    2e50:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <pxDelayedTaskList>
    2e54:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2e58:	80 81       	ld	r24, Z
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <xTaskIncrementTick+0x88>
    2e5e:	8f ef       	ldi	r24, 0xFF	; 255
    2e60:	9f ef       	ldi	r25, 0xFF	; 255
    2e62:	11 c0       	rjmp	.+34     	; 0x2e86 <xTaskIncrementTick+0xaa>
    2e64:	e0 91 49 04 	lds	r30, 0x0449	; 0x800449 <pxDelayedTaskList>
    2e68:	f0 91 4a 04 	lds	r31, 0x044A	; 0x80044a <pxDelayedTaskList+0x1>
    2e6c:	05 80       	ldd	r0, Z+5	; 0x05
    2e6e:	f6 81       	ldd	r31, Z+6	; 0x06
    2e70:	e0 2d       	mov	r30, r0
    2e72:	e6 80       	ldd	r14, Z+6	; 0x06
    2e74:	f7 80       	ldd	r15, Z+7	; 0x07
    2e76:	d7 01       	movw	r26, r14
    2e78:	12 96       	adiw	r26, 0x02	; 2
    2e7a:	8d 91       	ld	r24, X+
    2e7c:	9c 91       	ld	r25, X
    2e7e:	13 97       	sbiw	r26, 0x03	; 3
    2e80:	08 17       	cp	r16, r24
    2e82:	19 07       	cpc	r17, r25
    2e84:	28 f4       	brcc	.+10     	; 0x2e90 <xTaskIncrementTick+0xb4>
    2e86:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <xNextTaskUnblockTime+0x1>
    2e8a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <xNextTaskUnblockTime>
    2e8e:	2e c0       	rjmp	.+92     	; 0x2eec <xTaskIncrementTick+0x110>
    2e90:	67 01       	movw	r12, r14
    2e92:	b2 e0       	ldi	r27, 0x02	; 2
    2e94:	cb 0e       	add	r12, r27
    2e96:	d1 1c       	adc	r13, r1
    2e98:	c6 01       	movw	r24, r12
    2e9a:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2e9e:	f7 01       	movw	r30, r14
    2ea0:	84 89       	ldd	r24, Z+20	; 0x14
    2ea2:	95 89       	ldd	r25, Z+21	; 0x15
    2ea4:	89 2b       	or	r24, r25
    2ea6:	21 f0       	breq	.+8      	; 0x2eb0 <xTaskIncrementTick+0xd4>
    2ea8:	c7 01       	movw	r24, r14
    2eaa:	0c 96       	adiw	r24, 0x0c	; 12
    2eac:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2eb0:	d7 01       	movw	r26, r14
    2eb2:	56 96       	adiw	r26, 0x16	; 22
    2eb4:	8c 91       	ld	r24, X
    2eb6:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    2eba:	98 17       	cp	r25, r24
    2ebc:	10 f4       	brcc	.+4      	; 0x2ec2 <xTaskIncrementTick+0xe6>
    2ebe:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    2ec2:	d8 9f       	mul	r29, r24
    2ec4:	c0 01       	movw	r24, r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	b6 01       	movw	r22, r12
    2eca:	83 5a       	subi	r24, 0xA3	; 163
    2ecc:	9b 4f       	sbci	r25, 0xFB	; 251
    2ece:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    2ed2:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2ed6:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2eda:	d7 01       	movw	r26, r14
    2edc:	56 96       	adiw	r26, 0x16	; 22
    2ede:	9c 91       	ld	r25, X
    2ee0:	86 89       	ldd	r24, Z+22	; 0x16
    2ee2:	98 17       	cp	r25, r24
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <xTaskIncrementTick+0x10c>
    2ee6:	b4 cf       	rjmp	.-152    	; 0x2e50 <xTaskIncrementTick+0x74>
    2ee8:	c1 e0       	ldi	r28, 0x01	; 1
    2eea:	b2 cf       	rjmp	.-156    	; 0x2e50 <xTaskIncrementTick+0x74>
    2eec:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2ef0:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2ef4:	e6 89       	ldd	r30, Z+22	; 0x16
    2ef6:	b9 e0       	ldi	r27, 0x09	; 9
    2ef8:	eb 9f       	mul	r30, r27
    2efa:	f0 01       	movw	r30, r0
    2efc:	11 24       	eor	r1, r1
    2efe:	e3 5a       	subi	r30, 0xA3	; 163
    2f00:	fb 4f       	sbci	r31, 0xFB	; 251
    2f02:	80 81       	ld	r24, Z
    2f04:	82 30       	cpi	r24, 0x02	; 2
    2f06:	40 f0       	brcs	.+16     	; 0x2f18 <xTaskIncrementTick+0x13c>
    2f08:	c1 e0       	ldi	r28, 0x01	; 1
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <xTaskIncrementTick+0x13c>
    2f0c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <uxPendedTicks>
    2f10:	8f 5f       	subi	r24, 0xFF	; 255
    2f12:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <uxPendedTicks>
    2f16:	c0 e0       	ldi	r28, 0x00	; 0
    2f18:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <xYieldPending>
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	c1 e0       	ldi	r28, 0x01	; 1
    2f20:	8c 2f       	mov	r24, r28
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	ff 90       	pop	r15
    2f2c:	ef 90       	pop	r14
    2f2e:	df 90       	pop	r13
    2f30:	cf 90       	pop	r12
    2f32:	08 95       	ret

00002f34 <xTaskResumeAll>:
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	0f 92       	push	r0
    2f46:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    2f4a:	81 50       	subi	r24, 0x01	; 1
    2f4c:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <uxSchedulerSuspended>
    2f50:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    2f54:	88 23       	and	r24, r24
    2f56:	11 f0       	breq	.+4      	; 0x2f5c <xTaskResumeAll+0x28>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	52 c0       	rjmp	.+164    	; 0x3000 <xTaskResumeAll+0xcc>
    2f5c:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <uxCurrentNumberOfTasks>
    2f60:	88 23       	and	r24, r24
    2f62:	d1 f3       	breq	.-12     	; 0x2f58 <xTaskResumeAll+0x24>
    2f64:	c0 e0       	ldi	r28, 0x00	; 0
    2f66:	d0 e0       	ldi	r29, 0x00	; 0
    2f68:	89 e0       	ldi	r24, 0x09	; 9
    2f6a:	f8 2e       	mov	r15, r24
    2f6c:	ee 24       	eor	r14, r14
    2f6e:	e3 94       	inc	r14
    2f70:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <xPendingReadyList>
    2f74:	88 23       	and	r24, r24
    2f76:	51 f1       	breq	.+84     	; 0x2fcc <xTaskResumeAll+0x98>
    2f78:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <xPendingReadyList+0x5>
    2f7c:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <xPendingReadyList+0x6>
    2f80:	c6 81       	ldd	r28, Z+6	; 0x06
    2f82:	d7 81       	ldd	r29, Z+7	; 0x07
    2f84:	ce 01       	movw	r24, r28
    2f86:	0c 96       	adiw	r24, 0x0c	; 12
    2f88:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2f8c:	8e 01       	movw	r16, r28
    2f8e:	0e 5f       	subi	r16, 0xFE	; 254
    2f90:	1f 4f       	sbci	r17, 0xFF	; 255
    2f92:	c8 01       	movw	r24, r16
    2f94:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    2f98:	8e 89       	ldd	r24, Y+22	; 0x16
    2f9a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    2f9e:	98 17       	cp	r25, r24
    2fa0:	10 f4       	brcc	.+4      	; 0x2fa6 <xTaskResumeAll+0x72>
    2fa2:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    2fa6:	f8 9e       	mul	r15, r24
    2fa8:	c0 01       	movw	r24, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	b8 01       	movw	r22, r16
    2fae:	83 5a       	subi	r24, 0xA3	; 163
    2fb0:	9b 4f       	sbci	r25, 0xFB	; 251
    2fb2:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    2fb6:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    2fba:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    2fbe:	9e 89       	ldd	r25, Y+22	; 0x16
    2fc0:	86 89       	ldd	r24, Z+22	; 0x16
    2fc2:	98 17       	cp	r25, r24
    2fc4:	a8 f2       	brcs	.-86     	; 0x2f70 <xTaskResumeAll+0x3c>
    2fc6:	e0 92 24 04 	sts	0x0424, r14	; 0x800424 <xYieldPending>
    2fca:	d2 cf       	rjmp	.-92     	; 0x2f70 <xTaskResumeAll+0x3c>
    2fcc:	cd 2b       	or	r28, r29
    2fce:	11 f0       	breq	.+4      	; 0x2fd4 <xTaskResumeAll+0xa0>
    2fd0:	0e 94 b6 14 	call	0x296c	; 0x296c <prvResetNextTaskUnblockTime>
    2fd4:	c0 91 25 04 	lds	r28, 0x0425	; 0x800425 <uxPendedTicks>
    2fd8:	cc 23       	and	r28, r28
    2fda:	51 f0       	breq	.+20     	; 0x2ff0 <xTaskResumeAll+0xbc>
    2fdc:	d1 e0       	ldi	r29, 0x01	; 1
    2fde:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <xTaskIncrementTick>
    2fe2:	81 11       	cpse	r24, r1
    2fe4:	d0 93 24 04 	sts	0x0424, r29	; 0x800424 <xYieldPending>
    2fe8:	c1 50       	subi	r28, 0x01	; 1
    2fea:	c9 f7       	brne	.-14     	; 0x2fde <xTaskResumeAll+0xaa>
    2fec:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <uxPendedTicks>
    2ff0:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <xYieldPending>
    2ff4:	88 23       	and	r24, r24
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <xTaskResumeAll+0xc6>
    2ff8:	af cf       	rjmp	.-162    	; 0x2f58 <xTaskResumeAll+0x24>
    2ffa:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	0f 90       	pop	r0
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	df 91       	pop	r29
    3006:	cf 91       	pop	r28
    3008:	1f 91       	pop	r17
    300a:	0f 91       	pop	r16
    300c:	ff 90       	pop	r15
    300e:	ef 90       	pop	r14
    3010:	08 95       	ret

00003012 <vTaskDelayUntil>:
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	8c 01       	movw	r16, r24
    301c:	eb 01       	movw	r28, r22
    301e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    3022:	40 91 28 04 	lds	r20, 0x0428	; 0x800428 <xTickCount>
    3026:	50 91 29 04 	lds	r21, 0x0429	; 0x800429 <xTickCount+0x1>
    302a:	f8 01       	movw	r30, r16
    302c:	20 81       	ld	r18, Z
    302e:	31 81       	ldd	r19, Z+1	; 0x01
    3030:	c9 01       	movw	r24, r18
    3032:	8c 0f       	add	r24, r28
    3034:	9d 1f       	adc	r25, r29
    3036:	42 17       	cp	r20, r18
    3038:	53 07       	cpc	r21, r19
    303a:	20 f4       	brcc	.+8      	; 0x3044 <vTaskDelayUntil+0x32>
    303c:	82 17       	cp	r24, r18
    303e:	93 07       	cpc	r25, r19
    3040:	40 f4       	brcc	.+16     	; 0x3052 <vTaskDelayUntil+0x40>
    3042:	03 c0       	rjmp	.+6      	; 0x304a <vTaskDelayUntil+0x38>
    3044:	82 17       	cp	r24, r18
    3046:	93 07       	cpc	r25, r19
    3048:	30 f0       	brcs	.+12     	; 0x3056 <vTaskDelayUntil+0x44>
    304a:	21 e0       	ldi	r18, 0x01	; 1
    304c:	48 17       	cp	r20, r24
    304e:	59 07       	cpc	r21, r25
    3050:	18 f0       	brcs	.+6      	; 0x3058 <vTaskDelayUntil+0x46>
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	01 c0       	rjmp	.+2      	; 0x3058 <vTaskDelayUntil+0x46>
    3056:	21 e0       	ldi	r18, 0x01	; 1
    3058:	f8 01       	movw	r30, r16
    305a:	91 83       	std	Z+1, r25	; 0x01
    305c:	80 83       	st	Z, r24
    305e:	22 23       	and	r18, r18
    3060:	29 f0       	breq	.+10     	; 0x306c <vTaskDelayUntil+0x5a>
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	84 1b       	sub	r24, r20
    3066:	95 0b       	sbc	r25, r21
    3068:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <prvAddCurrentTaskToDelayedList>
    306c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    3070:	81 11       	cpse	r24, r1
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <vTaskDelayUntil+0x66>
    3074:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	08 95       	ret

00003082 <vTaskDelay>:
    3082:	cf 93       	push	r28
    3084:	df 93       	push	r29
    3086:	ec 01       	movw	r28, r24
    3088:	89 2b       	or	r24, r25
    308a:	19 f4       	brne	.+6      	; 0x3092 <vTaskDelay+0x10>
    308c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    3090:	0a c0       	rjmp	.+20     	; 0x30a6 <vTaskDelay+0x24>
    3092:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	ce 01       	movw	r24, r28
    309a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <prvAddCurrentTaskToDelayedList>
    309e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    30a2:	88 23       	and	r24, r24
    30a4:	99 f3       	breq	.-26     	; 0x308c <vTaskDelay+0xa>
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	08 95       	ret

000030ac <vTaskSwitchContext>:
    30ac:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    30b0:	88 23       	and	r24, r24
    30b2:	21 f0       	breq	.+8      	; 0x30bc <vTaskSwitchContext+0x10>
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <xYieldPending>
    30ba:	08 95       	ret
    30bc:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <xYieldPending>
    30c0:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    30c4:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    30c8:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    30cc:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    30d0:	2d 91       	ld	r18, X+
    30d2:	3c 91       	ld	r19, X
    30d4:	87 89       	ldd	r24, Z+23	; 0x17
    30d6:	90 8d       	ldd	r25, Z+24	; 0x18
    30d8:	82 17       	cp	r24, r18
    30da:	93 07       	cpc	r25, r19
    30dc:	60 f0       	brcs	.+24     	; 0x30f6 <vTaskSwitchContext+0x4a>
    30de:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <pxCurrentTCB>
    30e2:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    30e6:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    30ea:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    30ee:	67 5e       	subi	r22, 0xE7	; 231
    30f0:	7f 4f       	sbci	r23, 0xFF	; 255
    30f2:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <vApplicationStackOverflowHook>
    30f6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxTopReadyPriority>
    30fa:	69 e0       	ldi	r22, 0x09	; 9
    30fc:	48 2f       	mov	r20, r24
    30fe:	50 e0       	ldi	r21, 0x00	; 0
    3100:	64 9f       	mul	r22, r20
    3102:	90 01       	movw	r18, r0
    3104:	65 9f       	mul	r22, r21
    3106:	30 0d       	add	r19, r0
    3108:	11 24       	eor	r1, r1
    310a:	f9 01       	movw	r30, r18
    310c:	e3 5a       	subi	r30, 0xA3	; 163
    310e:	fb 4f       	sbci	r31, 0xFB	; 251
    3110:	90 81       	ld	r25, Z
    3112:	91 11       	cpse	r25, r1
    3114:	02 c0       	rjmp	.+4      	; 0x311a <vTaskSwitchContext+0x6e>
    3116:	81 50       	subi	r24, 0x01	; 1
    3118:	f1 cf       	rjmp	.-30     	; 0x30fc <vTaskSwitchContext+0x50>
    311a:	a1 81       	ldd	r26, Z+1	; 0x01
    311c:	b2 81       	ldd	r27, Z+2	; 0x02
    311e:	12 96       	adiw	r26, 0x02	; 2
    3120:	0d 90       	ld	r0, X+
    3122:	bc 91       	ld	r27, X
    3124:	a0 2d       	mov	r26, r0
    3126:	b2 83       	std	Z+2, r27	; 0x02
    3128:	a1 83       	std	Z+1, r26	; 0x01
    312a:	20 5a       	subi	r18, 0xA0	; 160
    312c:	3b 4f       	sbci	r19, 0xFB	; 251
    312e:	a2 17       	cp	r26, r18
    3130:	b3 07       	cpc	r27, r19
    3132:	31 f4       	brne	.+12     	; 0x3140 <vTaskSwitchContext+0x94>
    3134:	12 96       	adiw	r26, 0x02	; 2
    3136:	2d 91       	ld	r18, X+
    3138:	3c 91       	ld	r19, X
    313a:	13 97       	sbiw	r26, 0x03	; 3
    313c:	32 83       	std	Z+2, r19	; 0x02
    313e:	21 83       	std	Z+1, r18	; 0x01
    3140:	99 e0       	ldi	r25, 0x09	; 9
    3142:	94 9f       	mul	r25, r20
    3144:	f0 01       	movw	r30, r0
    3146:	95 9f       	mul	r25, r21
    3148:	f0 0d       	add	r31, r0
    314a:	11 24       	eor	r1, r1
    314c:	e3 5a       	subi	r30, 0xA3	; 163
    314e:	fb 4f       	sbci	r31, 0xFB	; 251
    3150:	01 80       	ldd	r0, Z+1	; 0x01
    3152:	f2 81       	ldd	r31, Z+2	; 0x02
    3154:	e0 2d       	mov	r30, r0
    3156:	26 81       	ldd	r18, Z+6	; 0x06
    3158:	37 81       	ldd	r19, Z+7	; 0x07
    315a:	30 93 82 04 	sts	0x0482, r19	; 0x800482 <pxCurrentTCB+0x1>
    315e:	20 93 81 04 	sts	0x0481, r18	; 0x800481 <pxCurrentTCB>
    3162:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    3166:	08 95       	ret

00003168 <vTaskSuspend>:
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	ec 01       	movw	r28, r24
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	0f 92       	push	r0
    3178:	89 2b       	or	r24, r25
    317a:	21 f4       	brne	.+8      	; 0x3184 <vTaskSuspend+0x1c>
    317c:	c0 91 81 04 	lds	r28, 0x0481	; 0x800481 <pxCurrentTCB>
    3180:	d0 91 82 04 	lds	r29, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3184:	8e 01       	movw	r16, r28
    3186:	0e 5f       	subi	r16, 0xFE	; 254
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	c8 01       	movw	r24, r16
    318c:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    3190:	8c 89       	ldd	r24, Y+20	; 0x14
    3192:	9d 89       	ldd	r25, Y+21	; 0x15
    3194:	89 2b       	or	r24, r25
    3196:	21 f0       	breq	.+8      	; 0x31a0 <vTaskSuspend+0x38>
    3198:	ce 01       	movw	r24, r28
    319a:	0c 96       	adiw	r24, 0x0c	; 12
    319c:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    31a0:	b8 01       	movw	r22, r16
    31a2:	8b e2       	ldi	r24, 0x2B	; 43
    31a4:	94 e0       	ldi	r25, 0x04	; 4
    31a6:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    31aa:	8f a1       	ldd	r24, Y+39	; 0x27
    31ac:	81 30       	cpi	r24, 0x01	; 1
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <vTaskSuspend+0x4a>
    31b0:	1f a2       	std	Y+39, r1	; 0x27
    31b2:	0f 90       	pop	r0
    31b4:	0f be       	out	0x3f, r0	; 63
    31b6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <xSchedulerRunning>
    31ba:	88 23       	and	r24, r24
    31bc:	39 f0       	breq	.+14     	; 0x31cc <vTaskSuspend+0x64>
    31be:	0f b6       	in	r0, 0x3f	; 63
    31c0:	f8 94       	cli
    31c2:	0f 92       	push	r0
    31c4:	0e 94 b6 14 	call	0x296c	; 0x296c <prvResetNextTaskUnblockTime>
    31c8:	0f 90       	pop	r0
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    31d0:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    31d4:	c8 17       	cp	r28, r24
    31d6:	d9 07       	cpc	r29, r25
    31d8:	c1 f4       	brne	.+48     	; 0x320a <vTaskSuspend+0xa2>
    31da:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <xSchedulerRunning>
    31de:	88 23       	and	r24, r24
    31e0:	19 f0       	breq	.+6      	; 0x31e8 <vTaskSuspend+0x80>
    31e2:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    31e6:	11 c0       	rjmp	.+34     	; 0x320a <vTaskSuspend+0xa2>
    31e8:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <xSuspendedTaskList>
    31ec:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <uxCurrentNumberOfTasks>
    31f0:	98 13       	cpse	r25, r24
    31f2:	05 c0       	rjmp	.+10     	; 0x31fe <vTaskSuspend+0x96>
    31f4:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <pxCurrentTCB+0x1>
    31f8:	10 92 81 04 	sts	0x0481, r1	; 0x800481 <pxCurrentTCB>
    31fc:	06 c0       	rjmp	.+12     	; 0x320a <vTaskSuspend+0xa2>
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	1f 91       	pop	r17
    3204:	0f 91       	pop	r16
    3206:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <vTaskSwitchContext>
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	08 95       	ret

00003214 <vTaskPlaceOnEventList>:
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
    3218:	eb 01       	movw	r28, r22
    321a:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <pxCurrentTCB>
    321e:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3222:	64 5f       	subi	r22, 0xF4	; 244
    3224:	7f 4f       	sbci	r23, 0xFF	; 255
    3226:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <vListInsert>
    322a:	61 e0       	ldi	r22, 0x01	; 1
    322c:	ce 01       	movw	r24, r28
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <prvAddCurrentTaskToDelayedList>

00003236 <vTaskPlaceOnEventListRestricted>:
    3236:	1f 93       	push	r17
    3238:	cf 93       	push	r28
    323a:	df 93       	push	r29
    323c:	eb 01       	movw	r28, r22
    323e:	14 2f       	mov	r17, r20
    3240:	60 91 81 04 	lds	r22, 0x0481	; 0x800481 <pxCurrentTCB>
    3244:	70 91 82 04 	lds	r23, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3248:	64 5f       	subi	r22, 0xF4	; 244
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    3250:	11 23       	and	r17, r17
    3252:	11 f0       	breq	.+4      	; 0x3258 <vTaskPlaceOnEventListRestricted+0x22>
    3254:	cf ef       	ldi	r28, 0xFF	; 255
    3256:	df ef       	ldi	r29, 0xFF	; 255
    3258:	61 2f       	mov	r22, r17
    325a:	ce 01       	movw	r24, r28
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <prvAddCurrentTaskToDelayedList>

00003266 <xTaskRemoveFromEventList>:
    3266:	0f 93       	push	r16
    3268:	1f 93       	push	r17
    326a:	cf 93       	push	r28
    326c:	df 93       	push	r29
    326e:	dc 01       	movw	r26, r24
    3270:	15 96       	adiw	r26, 0x05	; 5
    3272:	ed 91       	ld	r30, X+
    3274:	fc 91       	ld	r31, X
    3276:	16 97       	sbiw	r26, 0x06	; 6
    3278:	c6 81       	ldd	r28, Z+6	; 0x06
    327a:	d7 81       	ldd	r29, Z+7	; 0x07
    327c:	8e 01       	movw	r16, r28
    327e:	04 5f       	subi	r16, 0xF4	; 244
    3280:	1f 4f       	sbci	r17, 0xFF	; 255
    3282:	c8 01       	movw	r24, r16
    3284:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    3288:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    328c:	81 11       	cpse	r24, r1
    328e:	14 c0       	rjmp	.+40     	; 0x32b8 <xTaskRemoveFromEventList+0x52>
    3290:	0a 50       	subi	r16, 0x0A	; 10
    3292:	11 09       	sbc	r17, r1
    3294:	c8 01       	movw	r24, r16
    3296:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    329a:	8e 89       	ldd	r24, Y+22	; 0x16
    329c:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    32a0:	98 17       	cp	r25, r24
    32a2:	10 f4       	brcc	.+4      	; 0x32a8 <xTaskRemoveFromEventList+0x42>
    32a4:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    32a8:	b9 e0       	ldi	r27, 0x09	; 9
    32aa:	8b 9f       	mul	r24, r27
    32ac:	c0 01       	movw	r24, r0
    32ae:	11 24       	eor	r1, r1
    32b0:	b8 01       	movw	r22, r16
    32b2:	83 5a       	subi	r24, 0xA3	; 163
    32b4:	9b 4f       	sbci	r25, 0xFB	; 251
    32b6:	03 c0       	rjmp	.+6      	; 0x32be <xTaskRemoveFromEventList+0x58>
    32b8:	b8 01       	movw	r22, r16
    32ba:	8e e3       	ldi	r24, 0x3E	; 62
    32bc:	94 e0       	ldi	r25, 0x04	; 4
    32be:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    32c2:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    32c6:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    32ca:	9e 89       	ldd	r25, Y+22	; 0x16
    32cc:	86 89       	ldd	r24, Z+22	; 0x16
    32ce:	89 17       	cp	r24, r25
    32d0:	20 f4       	brcc	.+8      	; 0x32da <xTaskRemoveFromEventList+0x74>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <xYieldPending>
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <xTaskRemoveFromEventList+0x76>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	08 95       	ret

000032e6 <vTaskInternalSetTimeOutState>:
    32e6:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <xNumOfOverflows>
    32ea:	fc 01       	movw	r30, r24
    32ec:	20 83       	st	Z, r18
    32ee:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <xTickCount>
    32f2:	30 91 29 04 	lds	r19, 0x0429	; 0x800429 <xTickCount+0x1>
    32f6:	32 83       	std	Z+2, r19	; 0x02
    32f8:	21 83       	std	Z+1, r18	; 0x01
    32fa:	08 95       	ret

000032fc <xTaskCheckForTimeOut>:
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	0f 92       	push	r0
    3306:	40 91 28 04 	lds	r20, 0x0428	; 0x800428 <xTickCount>
    330a:	50 91 29 04 	lds	r21, 0x0429	; 0x800429 <xTickCount+0x1>
    330e:	db 01       	movw	r26, r22
    3310:	2d 91       	ld	r18, X+
    3312:	3c 91       	ld	r19, X
    3314:	2f 3f       	cpi	r18, 0xFF	; 255
    3316:	bf ef       	ldi	r27, 0xFF	; 255
    3318:	3b 07       	cpc	r19, r27
    331a:	d9 f0       	breq	.+54     	; 0x3352 <xTaskCheckForTimeOut+0x56>
    331c:	ec 01       	movw	r28, r24
    331e:	e9 81       	ldd	r30, Y+1	; 0x01
    3320:	fa 81       	ldd	r31, Y+2	; 0x02
    3322:	a0 91 23 04 	lds	r26, 0x0423	; 0x800423 <xNumOfOverflows>
    3326:	b8 81       	ld	r27, Y
    3328:	ba 17       	cp	r27, r26
    332a:	19 f0       	breq	.+6      	; 0x3332 <xTaskCheckForTimeOut+0x36>
    332c:	4e 17       	cp	r20, r30
    332e:	5f 07       	cpc	r21, r31
    3330:	90 f4       	brcc	.+36     	; 0x3356 <xTaskCheckForTimeOut+0x5a>
    3332:	4e 1b       	sub	r20, r30
    3334:	5f 0b       	sbc	r21, r31
    3336:	fb 01       	movw	r30, r22
    3338:	42 17       	cp	r20, r18
    333a:	53 07       	cpc	r21, r19
    333c:	38 f4       	brcc	.+14     	; 0x334c <xTaskCheckForTimeOut+0x50>
    333e:	24 1b       	sub	r18, r20
    3340:	35 0b       	sbc	r19, r21
    3342:	31 83       	std	Z+1, r19	; 0x01
    3344:	20 83       	st	Z, r18
    3346:	0e 94 73 19 	call	0x32e6	; 0x32e6 <vTaskInternalSetTimeOutState>
    334a:	03 c0       	rjmp	.+6      	; 0x3352 <xTaskCheckForTimeOut+0x56>
    334c:	11 82       	std	Z+1, r1	; 0x01
    334e:	10 82       	st	Z, r1
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <xTaskCheckForTimeOut+0x5a>
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <xTaskCheckForTimeOut+0x5c>
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	0f 90       	pop	r0
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <vTaskMissedYield>:
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <xYieldPending>
    3368:	08 95       	ret

0000336a <xTaskGetSchedulerState>:
    336a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <xSchedulerRunning>
    336e:	88 23       	and	r24, r24
    3370:	31 f0       	breq	.+12     	; 0x337e <xTaskGetSchedulerState+0x14>
    3372:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxSchedulerSuspended>
    3376:	88 23       	and	r24, r24
    3378:	21 f0       	breq	.+8      	; 0x3382 <xTaskGetSchedulerState+0x18>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	08 95       	ret
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	08 95       	ret
    3382:	82 e0       	ldi	r24, 0x02	; 2
    3384:	08 95       	ret

00003386 <xTaskPriorityInherit>:
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	fc 01       	movw	r30, r24
    3390:	89 2b       	or	r24, r25
    3392:	09 f4       	brne	.+2      	; 0x3396 <xTaskPriorityInherit+0x10>
    3394:	55 c0       	rjmp	.+170    	; 0x3440 <xTaskPriorityInherit+0xba>
    3396:	86 89       	ldd	r24, Z+22	; 0x16
    3398:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    339c:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    33a0:	56 96       	adiw	r26, 0x16	; 22
    33a2:	9c 91       	ld	r25, X
    33a4:	89 17       	cp	r24, r25
    33a6:	08 f0       	brcs	.+2      	; 0x33aa <xTaskPriorityInherit+0x24>
    33a8:	41 c0       	rjmp	.+130    	; 0x342c <xTaskPriorityInherit+0xa6>
    33aa:	24 85       	ldd	r18, Z+12	; 0x0c
    33ac:	35 85       	ldd	r19, Z+13	; 0x0d
    33ae:	37 fd       	sbrc	r19, 7
    33b0:	0c c0       	rjmp	.+24     	; 0x33ca <xTaskPriorityInherit+0x44>
    33b2:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    33b6:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    33ba:	56 96       	adiw	r26, 0x16	; 22
    33bc:	9c 91       	ld	r25, X
    33be:	24 e0       	ldi	r18, 0x04	; 4
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	29 1b       	sub	r18, r25
    33c4:	31 09       	sbc	r19, r1
    33c6:	35 87       	std	Z+13, r19	; 0x0d
    33c8:	24 87       	std	Z+12, r18	; 0x0c
    33ca:	29 e0       	ldi	r18, 0x09	; 9
    33cc:	82 9f       	mul	r24, r18
    33ce:	c0 01       	movw	r24, r0
    33d0:	11 24       	eor	r1, r1
    33d2:	83 5a       	subi	r24, 0xA3	; 163
    33d4:	9b 4f       	sbci	r25, 0xFB	; 251
    33d6:	22 85       	ldd	r18, Z+10	; 0x0a
    33d8:	33 85       	ldd	r19, Z+11	; 0x0b
    33da:	28 17       	cp	r18, r24
    33dc:	39 07       	cpc	r19, r25
    33de:	e9 f4       	brne	.+58     	; 0x341a <xTaskPriorityInherit+0x94>
    33e0:	8f 01       	movw	r16, r30
    33e2:	ef 01       	movw	r28, r30
    33e4:	22 96       	adiw	r28, 0x02	; 2
    33e6:	ce 01       	movw	r24, r28
    33e8:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    33ec:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    33f0:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    33f4:	86 89       	ldd	r24, Z+22	; 0x16
    33f6:	f8 01       	movw	r30, r16
    33f8:	86 8b       	std	Z+22, r24	; 0x16
    33fa:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    33fe:	98 17       	cp	r25, r24
    3400:	10 f4       	brcc	.+4      	; 0x3406 <xTaskPriorityInherit+0x80>
    3402:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    3406:	f9 e0       	ldi	r31, 0x09	; 9
    3408:	8f 9f       	mul	r24, r31
    340a:	c0 01       	movw	r24, r0
    340c:	11 24       	eor	r1, r1
    340e:	be 01       	movw	r22, r28
    3410:	83 5a       	subi	r24, 0xA3	; 163
    3412:	9b 4f       	sbci	r25, 0xFB	; 251
    3414:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    3418:	07 c0       	rjmp	.+14     	; 0x3428 <xTaskPriorityInherit+0xa2>
    341a:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    341e:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3422:	56 96       	adiw	r26, 0x16	; 22
    3424:	8c 91       	ld	r24, X
    3426:	86 8b       	std	Z+22, r24	; 0x16
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	0b c0       	rjmp	.+22     	; 0x3442 <xTaskPriorityInherit+0xbc>
    342c:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    3430:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	21 a1       	ldd	r18, Z+33	; 0x21
    3438:	56 96       	adiw	r26, 0x16	; 22
    343a:	9c 91       	ld	r25, X
    343c:	29 17       	cp	r18, r25
    343e:	08 f0       	brcs	.+2      	; 0x3442 <xTaskPriorityInherit+0xbc>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	df 91       	pop	r29
    3444:	cf 91       	pop	r28
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <xTaskPriorityDisinherit>:
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	fc 01       	movw	r30, r24
    3456:	89 2b       	or	r24, r25
    3458:	11 f4       	brne	.+4      	; 0x345e <xTaskPriorityDisinherit+0x12>
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	2c c0       	rjmp	.+88     	; 0x34b6 <xTaskPriorityDisinherit+0x6a>
    345e:	82 a1       	ldd	r24, Z+34	; 0x22
    3460:	81 50       	subi	r24, 0x01	; 1
    3462:	82 a3       	std	Z+34, r24	; 0x22
    3464:	26 89       	ldd	r18, Z+22	; 0x16
    3466:	91 a1       	ldd	r25, Z+33	; 0x21
    3468:	29 17       	cp	r18, r25
    346a:	b9 f3       	breq	.-18     	; 0x345a <xTaskPriorityDisinherit+0xe>
    346c:	81 11       	cpse	r24, r1
    346e:	f5 cf       	rjmp	.-22     	; 0x345a <xTaskPriorityDisinherit+0xe>
    3470:	ef 01       	movw	r28, r30
    3472:	8f 01       	movw	r16, r30
    3474:	0e 5f       	subi	r16, 0xFE	; 254
    3476:	1f 4f       	sbci	r17, 0xFF	; 255
    3478:	c8 01       	movw	r24, r16
    347a:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    347e:	89 a1       	ldd	r24, Y+33	; 0x21
    3480:	8e 8b       	std	Y+22, r24	; 0x16
    3482:	48 2f       	mov	r20, r24
    3484:	50 e0       	ldi	r21, 0x00	; 0
    3486:	24 e0       	ldi	r18, 0x04	; 4
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	24 1b       	sub	r18, r20
    348c:	35 0b       	sbc	r19, r21
    348e:	3d 87       	std	Y+13, r19	; 0x0d
    3490:	2c 87       	std	Y+12, r18	; 0x0c
    3492:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    3496:	98 17       	cp	r25, r24
    3498:	10 f4       	brcc	.+4      	; 0x349e <xTaskPriorityDisinherit+0x52>
    349a:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    349e:	29 e0       	ldi	r18, 0x09	; 9
    34a0:	24 9f       	mul	r18, r20
    34a2:	c0 01       	movw	r24, r0
    34a4:	25 9f       	mul	r18, r21
    34a6:	90 0d       	add	r25, r0
    34a8:	11 24       	eor	r1, r1
    34aa:	b8 01       	movw	r22, r16
    34ac:	83 5a       	subi	r24, 0xA3	; 163
    34ae:	9b 4f       	sbci	r25, 0xFB	; 251
    34b0:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <vListInsertEnd>
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	08 95       	ret

000034c0 <vTaskPriorityDisinheritAfterTimeout>:
    34c0:	0f 93       	push	r16
    34c2:	1f 93       	push	r17
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	fc 01       	movw	r30, r24
    34ca:	89 2b       	or	r24, r25
    34cc:	d9 f1       	breq	.+118    	; 0x3544 <vTaskPriorityDisinheritAfterTimeout+0x84>
    34ce:	91 a1       	ldd	r25, Z+33	; 0x21
    34d0:	96 17       	cp	r25, r22
    34d2:	08 f4       	brcc	.+2      	; 0x34d6 <vTaskPriorityDisinheritAfterTimeout+0x16>
    34d4:	96 2f       	mov	r25, r22
    34d6:	86 89       	ldd	r24, Z+22	; 0x16
    34d8:	89 17       	cp	r24, r25
    34da:	a1 f1       	breq	.+104    	; 0x3544 <vTaskPriorityDisinheritAfterTimeout+0x84>
    34dc:	22 a1       	ldd	r18, Z+34	; 0x22
    34de:	21 30       	cpi	r18, 0x01	; 1
    34e0:	89 f5       	brne	.+98     	; 0x3544 <vTaskPriorityDisinheritAfterTimeout+0x84>
    34e2:	96 8b       	std	Z+22, r25	; 0x16
    34e4:	24 85       	ldd	r18, Z+12	; 0x0c
    34e6:	35 85       	ldd	r19, Z+13	; 0x0d
    34e8:	37 fd       	sbrc	r19, 7
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
    34ec:	24 e0       	ldi	r18, 0x04	; 4
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	29 1b       	sub	r18, r25
    34f2:	31 09       	sbc	r19, r1
    34f4:	35 87       	std	Z+13, r19	; 0x0d
    34f6:	24 87       	std	Z+12, r18	; 0x0c
    34f8:	29 e0       	ldi	r18, 0x09	; 9
    34fa:	82 9f       	mul	r24, r18
    34fc:	c0 01       	movw	r24, r0
    34fe:	11 24       	eor	r1, r1
    3500:	83 5a       	subi	r24, 0xA3	; 163
    3502:	9b 4f       	sbci	r25, 0xFB	; 251
    3504:	22 85       	ldd	r18, Z+10	; 0x0a
    3506:	33 85       	ldd	r19, Z+11	; 0x0b
    3508:	28 17       	cp	r18, r24
    350a:	39 07       	cpc	r19, r25
    350c:	d9 f4       	brne	.+54     	; 0x3544 <vTaskPriorityDisinheritAfterTimeout+0x84>
    350e:	ef 01       	movw	r28, r30
    3510:	8f 01       	movw	r16, r30
    3512:	0e 5f       	subi	r16, 0xFE	; 254
    3514:	1f 4f       	sbci	r17, 0xFF	; 255
    3516:	c8 01       	movw	r24, r16
    3518:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    351c:	8e 89       	ldd	r24, Y+22	; 0x16
    351e:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <uxTopReadyPriority>
    3522:	98 17       	cp	r25, r24
    3524:	10 f4       	brcc	.+4      	; 0x352a <vTaskPriorityDisinheritAfterTimeout+0x6a>
    3526:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxTopReadyPriority>
    352a:	29 e0       	ldi	r18, 0x09	; 9
    352c:	82 9f       	mul	r24, r18
    352e:	c0 01       	movw	r24, r0
    3530:	11 24       	eor	r1, r1
    3532:	b8 01       	movw	r22, r16
    3534:	83 5a       	subi	r24, 0xA3	; 163
    3536:	9b 4f       	sbci	r25, 0xFB	; 251
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	1f 91       	pop	r17
    353e:	0f 91       	pop	r16
    3540:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <vListInsertEnd>
    3544:	df 91       	pop	r29
    3546:	cf 91       	pop	r28
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    354e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    3552:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3556:	89 2b       	or	r24, r25
    3558:	39 f0       	breq	.+14     	; 0x3568 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    355a:	e0 91 81 04 	lds	r30, 0x0481	; 0x800481 <pxCurrentTCB>
    355e:	f0 91 82 04 	lds	r31, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3562:	82 a1       	ldd	r24, Z+34	; 0x22
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    3568:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <pxCurrentTCB>
    356c:	90 91 82 04 	lds	r25, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    }
    3570:	08 95       	ret

00003572 <prvCheckForValidListAndQueue>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	0f 92       	push	r0
    3578:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <xTimerQueue>
    357c:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <xTimerQueue+0x1>
    3580:	89 2b       	or	r24, r25
    3582:	e9 f4       	brne	.+58     	; 0x35be <prvCheckForValidListAndQueue+0x4c>
    3584:	86 e9       	ldi	r24, 0x96	; 150
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    358c:	8d e8       	ldi	r24, 0x8D	; 141
    358e:	94 e0       	ldi	r25, 0x04	; 4
    3590:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vListInitialise>
    3594:	86 e9       	ldi	r24, 0x96	; 150
    3596:	94 e0       	ldi	r25, 0x04	; 4
    3598:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <pxCurrentTimerList+0x1>
    359c:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <pxCurrentTimerList>
    35a0:	8d e8       	ldi	r24, 0x8D	; 141
    35a2:	94 e0       	ldi	r25, 0x04	; 4
    35a4:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <pxOverflowTimerList+0x1>
    35a8:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <pxOverflowTimerList>
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	65 e0       	ldi	r22, 0x05	; 5
    35b0:	8a e0       	ldi	r24, 0x0A	; 10
    35b2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <xQueueGenericCreate>
    35b6:	90 93 88 04 	sts	0x0488, r25	; 0x800488 <xTimerQueue+0x1>
    35ba:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <xTimerQueue>
    35be:	0f 90       	pop	r0
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	08 95       	ret

000035c4 <prvInsertTimerInActiveList>:
    35c4:	fc 01       	movw	r30, r24
    35c6:	73 83       	std	Z+3, r23	; 0x03
    35c8:	62 83       	std	Z+2, r22	; 0x02
    35ca:	91 87       	std	Z+9, r25	; 0x09
    35cc:	80 87       	std	Z+8, r24	; 0x08
    35ce:	46 17       	cp	r20, r22
    35d0:	57 07       	cpc	r21, r23
    35d2:	78 f0       	brcs	.+30     	; 0x35f2 <prvInsertTimerInActiveList+0x2e>
    35d4:	42 1b       	sub	r20, r18
    35d6:	53 0b       	sbc	r21, r19
    35d8:	84 85       	ldd	r24, Z+12	; 0x0c
    35da:	95 85       	ldd	r25, Z+13	; 0x0d
    35dc:	48 17       	cp	r20, r24
    35de:	59 07       	cpc	r21, r25
    35e0:	c8 f4       	brcc	.+50     	; 0x3614 <prvInsertTimerInActiveList+0x50>
    35e2:	bf 01       	movw	r22, r30
    35e4:	6e 5f       	subi	r22, 0xFE	; 254
    35e6:	7f 4f       	sbci	r23, 0xFF	; 255
    35e8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <pxOverflowTimerList>
    35ec:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <pxOverflowTimerList+0x1>
    35f0:	0d c0       	rjmp	.+26     	; 0x360c <prvInsertTimerInActiveList+0x48>
    35f2:	42 17       	cp	r20, r18
    35f4:	53 07       	cpc	r21, r19
    35f6:	18 f4       	brcc	.+6      	; 0x35fe <prvInsertTimerInActiveList+0x3a>
    35f8:	62 17       	cp	r22, r18
    35fa:	73 07       	cpc	r23, r19
    35fc:	58 f4       	brcc	.+22     	; 0x3614 <prvInsertTimerInActiveList+0x50>
    35fe:	bf 01       	movw	r22, r30
    3600:	6e 5f       	subi	r22, 0xFE	; 254
    3602:	7f 4f       	sbci	r23, 0xFF	; 255
    3604:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <pxCurrentTimerList>
    3608:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <pxCurrentTimerList+0x1>
    360c:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <vListInsert>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	08 95       	ret
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	08 95       	ret

00003618 <xTimerCreateTimerTask>:
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <prvCheckForValidListAndQueue>
    3622:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <xTimerQueue>
    3626:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <xTimerQueue+0x1>
    362a:	89 2b       	or	r24, r25
    362c:	81 f0       	breq	.+32     	; 0x364e <xTimerCreateTimerTask+0x36>
    362e:	85 e8       	ldi	r24, 0x85	; 133
    3630:	e8 2e       	mov	r14, r24
    3632:	84 e0       	ldi	r24, 0x04	; 4
    3634:	f8 2e       	mov	r15, r24
    3636:	03 e0       	ldi	r16, 0x03	; 3
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	45 e5       	ldi	r20, 0x55	; 85
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	6e e5       	ldi	r22, 0x5E	; 94
    3642:	72 e0       	ldi	r23, 0x02	; 2
    3644:	8c eb       	ldi	r24, 0xBC	; 188
    3646:	9b e1       	ldi	r25, 0x1B	; 27
    3648:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <xTaskCreate>
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <xTimerCreateTimerTask+0x38>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	0f 91       	pop	r16
    3652:	ff 90       	pop	r15
    3654:	ef 90       	pop	r14
    3656:	08 95       	ret

00003658 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	cf 93       	push	r28
    365e:	df 93       	push	r29
    3660:	00 d0       	rcall	.+0      	; 0x3662 <xTimerGenericCommand+0xa>
    3662:	00 d0       	rcall	.+0      	; 0x3664 <xTimerGenericCommand+0xc>
    3664:	1f 92       	push	r1
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    366a:	a0 91 87 04 	lds	r26, 0x0487	; 0x800487 <xTimerQueue>
    366e:	b0 91 88 04 	lds	r27, 0x0488	; 0x800488 <xTimerQueue+0x1>
    3672:	10 97       	sbiw	r26, 0x00	; 0
    3674:	29 f1       	breq	.+74     	; 0x36c0 <xTimerGenericCommand+0x68>
    3676:	f9 01       	movw	r30, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    3678:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    367a:	5b 83       	std	Y+3, r21	; 0x03
    367c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    367e:	9d 83       	std	Y+5, r25	; 0x05
    3680:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3682:	66 30       	cpi	r22, 0x06	; 6
    3684:	a4 f4       	brge	.+40     	; 0x36ae <xTimerGenericCommand+0x56>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3686:	0e 94 b5 19 	call	0x336a	; 0x336a <xTaskGetSchedulerState>
    368a:	e0 91 87 04 	lds	r30, 0x0487	; 0x800487 <xTimerQueue>
    368e:	f0 91 88 04 	lds	r31, 0x0488	; 0x800488 <xTimerQueue+0x1>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3692:	20 e0       	ldi	r18, 0x00	; 0
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
        xMessage.u.xTimerParameters.pxTimer = xTimer;

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3694:	82 30       	cpi	r24, 0x02	; 2
    3696:	11 f4       	brne	.+4      	; 0x369c <xTimerGenericCommand+0x44>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3698:	a8 01       	movw	r20, r16
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <xTimerGenericCommand+0x48>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	be 01       	movw	r22, r28
    36a2:	6f 5f       	subi	r22, 0xFF	; 255
    36a4:	7f 4f       	sbci	r23, 0xFF	; 255
    36a6:	cf 01       	movw	r24, r30
    36a8:	0e 94 81 12 	call	0x2502	; 0x2502 <xQueueGenericSend>
    36ac:	0a c0       	rjmp	.+20     	; 0x36c2 <xTimerGenericCommand+0x6a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	af 01       	movw	r20, r30
    36b2:	be 01       	movw	r22, r28
    36b4:	6f 5f       	subi	r22, 0xFF	; 255
    36b6:	7f 4f       	sbci	r23, 0xFF	; 255
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 17 13 	call	0x262e	; 0x262e <xQueueGenericSendFromISR>
    36be:	01 c0       	rjmp	.+2      	; 0x36c2 <xTimerGenericCommand+0x6a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	08 95       	ret

000036d6 <prvSwitchTimerLists>:
    }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	cf 93       	push	r28
    36e0:	df 93       	push	r29

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    36e2:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <pxCurrentTimerList>
    36e6:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <pxCurrentTimerList+0x1>
    36ea:	80 81       	ld	r24, Z
    36ec:	88 23       	and	r24, r24
    36ee:	89 f1       	breq	.+98     	; 0x3752 <prvSwitchTimerLists+0x7c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    36f0:	05 80       	ldd	r0, Z+5	; 0x05
    36f2:	f6 81       	ldd	r31, Z+6	; 0x06
    36f4:	e0 2d       	mov	r30, r0
    36f6:	e0 80       	ld	r14, Z
    36f8:	f1 80       	ldd	r15, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    36fa:	c6 81       	ldd	r28, Z+6	; 0x06
    36fc:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    36fe:	8e 01       	movw	r16, r28
    3700:	0e 5f       	subi	r16, 0xFE	; 254
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	c8 01       	movw	r24, r16
    3706:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    370a:	e8 89       	ldd	r30, Y+16	; 0x10
    370c:	f9 89       	ldd	r31, Y+17	; 0x11
    370e:	ce 01       	movw	r24, r28
    3710:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3712:	8a 89       	ldd	r24, Y+18	; 0x12
    3714:	82 ff       	sbrs	r24, 2
    3716:	e5 cf       	rjmp	.-54     	; 0x36e2 <prvSwitchTimerLists+0xc>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3718:	8c 85       	ldd	r24, Y+12	; 0x0c
    371a:	9d 85       	ldd	r25, Y+13	; 0x0d
    371c:	8e 0d       	add	r24, r14
    371e:	9f 1d       	adc	r25, r15
            if( xReloadTime > xNextExpireTime )
    3720:	e8 16       	cp	r14, r24
    3722:	f9 06       	cpc	r15, r25
    3724:	60 f4       	brcc	.+24     	; 0x373e <prvSwitchTimerLists+0x68>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3726:	9b 83       	std	Y+3, r25	; 0x03
    3728:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    372a:	d9 87       	std	Y+9, r29	; 0x09
    372c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    372e:	b8 01       	movw	r22, r16
    3730:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <pxCurrentTimerList>
    3734:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <pxCurrentTimerList+0x1>
    3738:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <vListInsert>
    373c:	d2 cf       	rjmp	.-92     	; 0x36e2 <prvSwitchTimerLists+0xc>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    373e:	00 e0       	ldi	r16, 0x00	; 0
    3740:	10 e0       	ldi	r17, 0x00	; 0
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	a7 01       	movw	r20, r14
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	ce 01       	movw	r24, r28
    374c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTimerGenericCommand>
    3750:	c8 cf       	rjmp	.-112    	; 0x36e2 <prvSwitchTimerLists+0xc>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3752:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <pxOverflowTimerList>
    3756:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <pxOverflowTimerList+0x1>
    375a:	90 93 8c 04 	sts	0x048C, r25	; 0x80048c <pxCurrentTimerList+0x1>
    375e:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3762:	f0 93 8a 04 	sts	0x048A, r31	; 0x80048a <pxOverflowTimerList+0x1>
    3766:	e0 93 89 04 	sts	0x0489, r30	; 0x800489 <pxOverflowTimerList>
}
    376a:	df 91       	pop	r29
    376c:	cf 91       	pop	r28
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	ff 90       	pop	r15
    3774:	ef 90       	pop	r14
    3776:	08 95       	ret

00003778 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    3778:	cf 93       	push	r28
    377a:	df 93       	push	r29
    377c:	00 d0       	rcall	.+0      	; 0x377e <prvTimerTask+0x6>
    377e:	00 d0       	rcall	.+0      	; 0x3780 <prvTimerTask+0x8>
    3780:	1f 92       	push	r1
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3786:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <pxCurrentTimerList>
    378a:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <pxCurrentTimerList+0x1>
    378e:	d0 80       	ld	r13, Z
    if( *pxListWasEmpty == pdFALSE )
    3790:	dd 20       	and	r13, r13
    3792:	31 f0       	breq	.+12     	; 0x37a0 <prvTimerTask+0x28>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3794:	05 80       	ldd	r0, Z+5	; 0x05
    3796:	f6 81       	ldd	r31, Z+6	; 0x06
    3798:	e0 2d       	mov	r30, r0
    379a:	e0 80       	ld	r14, Z
    379c:	f1 80       	ldd	r15, Z+1	; 0x01
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <prvTimerTask+0x2c>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    37a0:	e1 2c       	mov	r14, r1
    37a2:	f1 2c       	mov	r15, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    37a4:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    37a8:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
    37ac:	8c 01       	movw	r16, r24

    if( xTimeNow < xLastTime )
    37ae:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <xLastTime.2412>
    37b2:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <xLastTime.2412+0x1>
    37b6:	08 17       	cp	r16, r24
    37b8:	19 07       	cpc	r17, r25
    37ba:	20 f4       	brcc	.+8      	; 0x37c4 <prvTimerTask+0x4c>
    {
        prvSwitchTimerLists();
    37bc:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	01 c0       	rjmp	.+2      	; 0x37c6 <prvTimerTask+0x4e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    }

    xLastTime = xTimeNow;
    37c6:	10 93 84 04 	sts	0x0484, r17	; 0x800484 <xLastTime.2412+0x1>
    37ca:	00 93 83 04 	sts	0x0483, r16	; 0x800483 <xLastTime.2412>
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
    37ce:	81 11       	cpse	r24, r1
    37d0:	55 c0       	rjmp	.+170    	; 0x387c <prvTimerTask+0x104>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    37d2:	dd 20       	and	r13, r13
    37d4:	d9 f1       	breq	.+118    	; 0x384c <prvTimerTask+0xd4>
    37d6:	0e 15       	cp	r16, r14
    37d8:	1f 05       	cpc	r17, r15
    37da:	08 f4       	brcc	.+2      	; 0x37de <prvTimerTask+0x66>
    37dc:	3e c0       	rjmp	.+124    	; 0x385a <prvTimerTask+0xe2>
            {
                ( void ) xTaskResumeAll();
    37de:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    37e2:	e0 91 8b 04 	lds	r30, 0x048B	; 0x80048b <pxCurrentTimerList>
    37e6:	f0 91 8c 04 	lds	r31, 0x048C	; 0x80048c <pxCurrentTimerList+0x1>
    37ea:	05 80       	ldd	r0, Z+5	; 0x05
    37ec:	f6 81       	ldd	r31, Z+6	; 0x06
    37ee:	e0 2d       	mov	r30, r0
    37f0:	c6 80       	ldd	r12, Z+6	; 0x06
    37f2:	d7 80       	ldd	r13, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    37f4:	c6 01       	movw	r24, r12
    37f6:	02 96       	adiw	r24, 0x02	; 2
    37f8:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    37fc:	d6 01       	movw	r26, r12
    37fe:	52 96       	adiw	r26, 0x12	; 18
    3800:	8c 91       	ld	r24, X
    3802:	52 97       	sbiw	r26, 0x12	; 18
    3804:	82 ff       	sbrs	r24, 2
    3806:	17 c0       	rjmp	.+46     	; 0x3836 <prvTimerTask+0xbe>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3808:	1c 96       	adiw	r26, 0x0c	; 12
    380a:	6d 91       	ld	r22, X+
    380c:	7c 91       	ld	r23, X
    380e:	1d 97       	sbiw	r26, 0x0d	; 13
    3810:	6e 0d       	add	r22, r14
    3812:	7f 1d       	adc	r23, r15
    3814:	97 01       	movw	r18, r14
    3816:	a8 01       	movw	r20, r16
    3818:	c6 01       	movw	r24, r12
    381a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
    381e:	88 23       	and	r24, r24
    3820:	69 f0       	breq	.+26     	; 0x383c <prvTimerTask+0xc4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3822:	00 e0       	ldi	r16, 0x00	; 0
    3824:	10 e0       	ldi	r17, 0x00	; 0
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	a7 01       	movw	r20, r14
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	c6 01       	movw	r24, r12
    3830:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTimerGenericCommand>
    3834:	03 c0       	rjmp	.+6      	; 0x383c <prvTimerTask+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3836:	8e 7f       	andi	r24, 0xFE	; 254
    3838:	f6 01       	movw	r30, r12
    383a:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    383c:	d6 01       	movw	r26, r12
    383e:	50 96       	adiw	r26, 0x10	; 16
    3840:	ed 91       	ld	r30, X+
    3842:	fc 91       	ld	r31, X
    3844:	51 97       	sbiw	r26, 0x11	; 17
    3846:	c6 01       	movw	r24, r12
    3848:	09 95       	icall
    384a:	1e c0       	rjmp	.+60     	; 0x3888 <prvTimerTask+0x110>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    384c:	e0 91 89 04 	lds	r30, 0x0489	; 0x800489 <pxOverflowTimerList>
    3850:	f0 91 8a 04 	lds	r31, 0x048A	; 0x80048a <pxOverflowTimerList+0x1>
    3854:	80 81       	ld	r24, Z
    3856:	41 e0       	ldi	r20, 0x01	; 1
    3858:	81 11       	cpse	r24, r1
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    385a:	40 e0       	ldi	r20, 0x00	; 0
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    385c:	b7 01       	movw	r22, r14
    385e:	60 1b       	sub	r22, r16
    3860:	71 0b       	sbc	r23, r17
    3862:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <xTimerQueue>
    3866:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <xTimerQueue+0x1>
    386a:	0e 94 9a 14 	call	0x2934	; 0x2934 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    386e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    3872:	81 11       	cpse	r24, r1
    3874:	09 c0       	rjmp	.+18     	; 0x3888 <prvTimerTask+0x110>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3876:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <vPortYield>
    387a:	06 c0       	rjmp	.+12     	; 0x3888 <prvTimerTask+0x110>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    387c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>
    3880:	03 c0       	rjmp	.+6      	; 0x3888 <prvTimerTask+0x110>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3882:	89 81       	ldd	r24, Y+1	; 0x01
    3884:	87 ff       	sbrs	r24, 7
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <prvTimerTask+0x12c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	be 01       	movw	r22, r28
    388e:	6f 5f       	subi	r22, 0xFF	; 255
    3890:	7f 4f       	sbci	r23, 0xFF	; 255
    3892:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <xTimerQueue>
    3896:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <xTimerQueue+0x1>
    389a:	0e 94 46 13 	call	0x268c	; 0x268c <xQueueReceive>
    389e:	81 11       	cpse	r24, r1
    38a0:	f0 cf       	rjmp	.-32     	; 0x3882 <prvTimerTask+0x10a>
    38a2:	71 cf       	rjmp	.-286    	; 0x3786 <prvTimerTask+0xe>
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    38a4:	ec 80       	ldd	r14, Y+4	; 0x04
    38a6:	fd 80       	ldd	r15, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    38a8:	f7 01       	movw	r30, r14
    38aa:	82 85       	ldd	r24, Z+10	; 0x0a
    38ac:	93 85       	ldd	r25, Z+11	; 0x0b
    38ae:	89 2b       	or	r24, r25
    38b0:	21 f0       	breq	.+8      	; 0x38ba <prvTimerTask+0x142>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    38b2:	c7 01       	movw	r24, r14
    38b4:	02 96       	adiw	r24, 0x02	; 2
    38b6:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    38ba:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <xTaskGetTickCount>
    38be:	6c 01       	movw	r12, r24

    if( xTimeNow < xLastTime )
    38c0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <xLastTime.2412>
    38c4:	90 91 84 04 	lds	r25, 0x0484	; 0x800484 <xLastTime.2412+0x1>
    38c8:	c8 16       	cp	r12, r24
    38ca:	d9 06       	cpc	r13, r25
    38cc:	10 f4       	brcc	.+4      	; 0x38d2 <prvTimerTask+0x15a>
    {
        prvSwitchTimerLists();
    38ce:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <prvSwitchTimerLists>
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    }

    xLastTime = xTimeNow;
    38d2:	d0 92 84 04 	sts	0x0484, r13	; 0x800484 <xLastTime.2412+0x1>
    38d6:	c0 92 83 04 	sts	0x0483, r12	; 0x800483 <xLastTime.2412>
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            switch( xMessage.xMessageID )
    38da:	e9 81       	ldd	r30, Y+1	; 0x01
    38dc:	0e 2e       	mov	r0, r30
    38de:	00 0c       	add	r0, r0
    38e0:	ff 0b       	sbc	r31, r31
    38e2:	ea 30       	cpi	r30, 0x0A	; 10
    38e4:	f1 05       	cpc	r31, r1
    38e6:	80 f6       	brcc	.-96     	; 0x3888 <prvTimerTask+0x110>
    38e8:	ec 5c       	subi	r30, 0xCC	; 204
    38ea:	ff 4f       	sbci	r31, 0xFF	; 255
    38ec:	d7 01       	movw	r26, r14
    38ee:	52 96       	adiw	r26, 0x12	; 18
    38f0:	8c 91       	ld	r24, X
    38f2:	0c 94 12 22 	jmp	0x4424	; 0x4424 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    38f6:	81 60       	ori	r24, 0x01	; 1
    38f8:	f7 01       	movw	r30, r14
    38fa:	82 8b       	std	Z+18, r24	; 0x12
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    38fc:	2a 81       	ldd	r18, Y+2	; 0x02
    38fe:	3b 81       	ldd	r19, Y+3	; 0x03
    3900:	64 85       	ldd	r22, Z+12	; 0x0c
    3902:	75 85       	ldd	r23, Z+13	; 0x0d
    3904:	62 0f       	add	r22, r18
    3906:	73 1f       	adc	r23, r19
    3908:	a6 01       	movw	r20, r12
    390a:	c7 01       	movw	r24, r14
    390c:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
    3910:	88 23       	and	r24, r24
    3912:	09 f4       	brne	.+2      	; 0x3916 <prvTimerTask+0x19e>
    3914:	b9 cf       	rjmp	.-142    	; 0x3888 <prvTimerTask+0x110>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3916:	d7 01       	movw	r26, r14
    3918:	50 96       	adiw	r26, 0x10	; 16
    391a:	ed 91       	ld	r30, X+
    391c:	fc 91       	ld	r31, X
    391e:	51 97       	sbiw	r26, 0x11	; 17
    3920:	c7 01       	movw	r24, r14
    3922:	09 95       	icall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3924:	f7 01       	movw	r30, r14
    3926:	82 89       	ldd	r24, Z+18	; 0x12
    3928:	82 ff       	sbrs	r24, 2
    392a:	ae cf       	rjmp	.-164    	; 0x3888 <prvTimerTask+0x110>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    392c:	4a 81       	ldd	r20, Y+2	; 0x02
    392e:	5b 81       	ldd	r21, Y+3	; 0x03
    3930:	84 85       	ldd	r24, Z+12	; 0x0c
    3932:	95 85       	ldd	r25, Z+13	; 0x0d
    3934:	48 0f       	add	r20, r24
    3936:	59 1f       	adc	r21, r25
    3938:	00 e0       	ldi	r16, 0x00	; 0
    393a:	10 e0       	ldi	r17, 0x00	; 0
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	60 e0       	ldi	r22, 0x00	; 0
    3942:	c7 01       	movw	r24, r14
    3944:	0e 94 2c 1b 	call	0x3658	; 0x3658 <xTimerGenericCommand>
    3948:	9f cf       	rjmp	.-194    	; 0x3888 <prvTimerTask+0x110>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    394a:	81 60       	ori	r24, 0x01	; 1
    394c:	f7 01       	movw	r30, r14
    394e:	82 8b       	std	Z+18, r24	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3950:	6a 81       	ldd	r22, Y+2	; 0x02
    3952:	7b 81       	ldd	r23, Y+3	; 0x03
    3954:	75 87       	std	Z+13, r23	; 0x0d
    3956:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3958:	6c 0d       	add	r22, r12
    395a:	7d 1d       	adc	r23, r13
    395c:	96 01       	movw	r18, r12
    395e:	a6 01       	movw	r20, r12
    3960:	c7 01       	movw	r24, r14
    3962:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <prvInsertTimerInActiveList>
    3966:	90 cf       	rjmp	.-224    	; 0x3888 <prvTimerTask+0x110>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3968:	81 fd       	sbrc	r24, 1
    396a:	04 c0       	rjmp	.+8      	; 0x3974 <prvTimerTask+0x1fc>
                        {
                            vPortFree( pxTimer );
    396c:	c7 01       	movw	r24, r14
    396e:	0e 94 76 1e 	call	0x3cec	; 0x3cec <vPortFree>
    3972:	8a cf       	rjmp	.-236    	; 0x3888 <prvTimerTask+0x110>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3974:	8e 7f       	andi	r24, 0xFE	; 254
    3976:	d7 01       	movw	r26, r14
    3978:	52 96       	adiw	r26, 0x12	; 18
    397a:	8c 93       	st	X, r24
    397c:	85 cf       	rjmp	.-246    	; 0x3888 <prvTimerTask+0x110>

0000397e <initVariant>:
{
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    397e:	0e 94 64 05 	call	0xac8	; 0xac8 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    3982:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vTaskStartScheduler>
    3986:	08 95       	ret

00003988 <vApplicationIdleHook>:
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    loop();        // the normal Arduino loop() function is run here.
    3988:	0e 94 c6 05 	call	0xb8c	; 0xb8c <loop>
    if (serialEventRun) serialEventRun();
    398c:	8e e7       	ldi	r24, 0x7E	; 126
    398e:	9b e0       	ldi	r25, 0x0B	; 11
    3990:	89 2b       	or	r24, r25
    3992:	11 f0       	breq	.+4      	; 0x3998 <vApplicationIdleHook+0x10>
    3994:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <_Z14serialEventRunv>
    3998:	08 95       	ret

0000399a <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    399a:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    399c:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    399e:	2f ef       	ldi	r18, 0xFF	; 255
    39a0:	80 e7       	ldi	r24, 0x70	; 112
    39a2:	92 e0       	ldi	r25, 0x02	; 2
    39a4:	21 50       	subi	r18, 0x01	; 1
    39a6:	80 40       	sbci	r24, 0x00	; 0
    39a8:	90 40       	sbci	r25, 0x00	; 0
    39aa:	e1 f7       	brne	.-8      	; 0x39a4 <vApplicationMallocFailedHook+0xa>
    39ac:	00 c0       	rjmp	.+0      	; 0x39ae <vApplicationMallocFailedHook+0x14>
    39ae:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED fast blink.
    39b0:	1d 9a       	sbi	0x03, 5	; 3
    39b2:	f5 cf       	rjmp	.-22     	; 0x399e <vApplicationMallocFailedHook+0x4>

000039b4 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    39b4:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    39b6:	2d 9a       	sbi	0x05, 5	; 5
    39b8:	2f ef       	ldi	r18, 0xFF	; 255
    39ba:	87 ea       	ldi	r24, 0xA7	; 167
    39bc:	91 e6       	ldi	r25, 0x61	; 97
    39be:	21 50       	subi	r18, 0x01	; 1
    39c0:	80 40       	sbci	r24, 0x00	; 0
    39c2:	90 40       	sbci	r25, 0x00	; 0
    39c4:	e1 f7       	brne	.-8      	; 0x39be <vApplicationStackOverflowHook+0xa>
    39c6:	00 c0       	rjmp	.+0      	; 0x39c8 <vApplicationStackOverflowHook+0x14>
    39c8:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED slow blink.
    39ca:	1d 9a       	sbi	0x03, 5	; 3
    39cc:	f5 cf       	rjmp	.-22     	; 0x39b8 <vApplicationStackOverflowHook+0x4>

000039ce <_ZN9MD_TCS23010initialiseEv>:
  }
  FreqCount.end();      // stop
  DUMP("VALUE ", FreqCount.read());

  return(FreqCount.read() * _readDiv);
}
    39ce:	0f 93       	push	r16
    39d0:	1f 93       	push	r17
    39d2:	fc 01       	movw	r30, r24
    39d4:	8f ef       	ldi	r24, 0xFF	; 255
    39d6:	80 83       	st	Z, r24
    39d8:	81 83       	std	Z+1, r24	; 0x01
    39da:	82 83       	std	Z+2, r24	; 0x02
    39dc:	83 83       	std	Z+3, r24	; 0x03
    39de:	84 83       	std	Z+4, r24	; 0x04
    39e0:	8a e0       	ldi	r24, 0x0A	; 10
    39e2:	85 83       	std	Z+5, r24	; 0x05
    39e4:	16 82       	std	Z+6, r1	; 0x06
    39e6:	df 01       	movw	r26, r30
    39e8:	17 96       	adiw	r26, 0x07	; 7
    39ea:	73 96       	adiw	r30, 0x13	; 19
    39ec:	00 e7       	ldi	r16, 0x70	; 112
    39ee:	17 e1       	ldi	r17, 0x17	; 23
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	48 ed       	ldi	r20, 0xD8	; 216
    39f6:	56 ed       	ldi	r21, 0xD6	; 214
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	0d 93       	st	X+, r16
    39fe:	1d 93       	st	X+, r17
    3a00:	2d 93       	st	X+, r18
    3a02:	3d 93       	st	X+, r19
    3a04:	18 96       	adiw	r26, 0x08	; 8
    3a06:	4d 93       	st	X+, r20
    3a08:	5d 93       	st	X+, r21
    3a0a:	6d 93       	st	X+, r22
    3a0c:	7c 93       	st	X, r23
    3a0e:	1b 97       	sbiw	r26, 0x0b	; 11
    3a10:	ae 17       	cp	r26, r30
    3a12:	bf 07       	cpc	r27, r31
    3a14:	99 f7       	brne	.-26     	; 0x39fc <_ZN9MD_TCS23010initialiseEv+0x2e>
    3a16:	1f 91       	pop	r17
    3a18:	0f 91       	pop	r16
    3a1a:	08 95       	ret

00003a1c <_ZN9MD_TCS230C1Ehhh>:
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	ec 01       	movw	r28, r24
    3a28:	f6 2e       	mov	r15, r22
    3a2a:	04 2f       	mov	r16, r20
    3a2c:	12 2f       	mov	r17, r18
    3a2e:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <_ZN9MD_TCS23010initialiseEv>
    3a32:	fb 82       	std	Y+3, r15	; 0x03
    3a34:	0c 83       	std	Y+4, r16	; 0x04
    3a36:	18 83       	st	Y, r17
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	08 95       	ret

00003a44 <_ZN9MD_TCS230D1Ev>:
    3a44:	08 95       	ret

00003a46 <_ZN9MD_TCS2309setFilterEh>:
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	ec 01       	movw	r28, r24
    3a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a50:	e9 f0       	breq	.+58     	; 0x3a8c <_ZN9MD_TCS2309setFilterEh+0x46>
    3a52:	9c 81       	ldd	r25, Y+4	; 0x04
    3a54:	9f 3f       	cpi	r25, 0xFF	; 255
    3a56:	d1 f0       	breq	.+52     	; 0x3a8c <_ZN9MD_TCS2309setFilterEh+0x46>
    3a58:	61 30       	cpi	r22, 0x01	; 1
    3a5a:	49 f0       	breq	.+18     	; 0x3a6e <_ZN9MD_TCS2309setFilterEh+0x28>
    3a5c:	30 f0       	brcs	.+12     	; 0x3a6a <_ZN9MD_TCS2309setFilterEh+0x24>
    3a5e:	62 30       	cpi	r22, 0x02	; 2
    3a60:	41 f0       	breq	.+16     	; 0x3a72 <_ZN9MD_TCS2309setFilterEh+0x2c>
    3a62:	63 30       	cpi	r22, 0x03	; 3
    3a64:	99 f4       	brne	.+38     	; 0x3a8c <_ZN9MD_TCS2309setFilterEh+0x46>
    3a66:	61 e0       	ldi	r22, 0x01	; 1
    3a68:	09 c0       	rjmp	.+18     	; 0x3a7c <_ZN9MD_TCS2309setFilterEh+0x36>
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	07 c0       	rjmp	.+14     	; 0x3a7c <_ZN9MD_TCS2309setFilterEh+0x36>
    3a6e:	61 e0       	ldi	r22, 0x01	; 1
    3a70:	01 c0       	rjmp	.+2      	; 0x3a74 <_ZN9MD_TCS2309setFilterEh+0x2e>
    3a72:	60 e0       	ldi	r22, 0x00	; 0
    3a74:	0e 94 35 11 	call	0x226a	; 0x226a <digitalWrite>
    3a78:	61 e0       	ldi	r22, 0x01	; 1
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <_ZN9MD_TCS2309setFilterEh+0x3c>
    3a7c:	0e 94 35 11 	call	0x226a	; 0x226a <digitalWrite>
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	8c 81       	ldd	r24, Y+4	; 0x04
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	0c 94 35 11 	jmp	0x226a	; 0x226a <digitalWrite>
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	08 95       	ret

00003a92 <_ZN9MD_TCS23013setFrequency2Eh>:
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	ec 01       	movw	r28, r24
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9c:	e9 f0       	breq	.+58     	; 0x3ad8 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3a9e:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa0:	9f 3f       	cpi	r25, 0xFF	; 255
    3aa2:	d1 f0       	breq	.+52     	; 0x3ad8 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3aa4:	61 30       	cpi	r22, 0x01	; 1
    3aa6:	49 f0       	breq	.+18     	; 0x3aba <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3aa8:	30 f0       	brcs	.+12     	; 0x3ab6 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3aaa:	62 30       	cpi	r22, 0x02	; 2
    3aac:	41 f0       	breq	.+16     	; 0x3abe <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    3aae:	63 30       	cpi	r22, 0x03	; 3
    3ab0:	99 f4       	brne	.+38     	; 0x3ad8 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3ab2:	60 e0       	ldi	r22, 0x00	; 0
    3ab4:	09 c0       	rjmp	.+18     	; 0x3ac8 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3ab6:	61 e0       	ldi	r22, 0x01	; 1
    3ab8:	03 c0       	rjmp	.+6      	; 0x3ac0 <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	05 c0       	rjmp	.+10     	; 0x3ac8 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3abe:	60 e0       	ldi	r22, 0x00	; 0
    3ac0:	0e 94 35 11 	call	0x226a	; 0x226a <digitalWrite>
    3ac4:	61 e0       	ldi	r22, 0x01	; 1
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    3ac8:	0e 94 35 11 	call	0x226a	; 0x226a <digitalWrite>
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	0c 94 35 11 	jmp	0x226a	; 0x226a <digitalWrite>
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	08 95       	ret

00003ade <_ZN9MD_TCS2309setEnableEb>:
    3ade:	fc 01       	movw	r30, r24
    3ae0:	20 81       	ld	r18, Z
    3ae2:	2f 3f       	cpi	r18, 0xFF	; 255
    3ae4:	29 f0       	breq	.+10     	; 0x3af0 <_ZN9MD_TCS2309setEnableEb+0x12>
    3ae6:	91 e0       	ldi	r25, 0x01	; 1
    3ae8:	69 27       	eor	r22, r25
    3aea:	82 2f       	mov	r24, r18
    3aec:	0c 94 35 11 	jmp	0x226a	; 0x226a <digitalWrite>
    3af0:	66 23       	and	r22, r22
    3af2:	19 f0       	breq	.+6      	; 0x3afa <_ZN9MD_TCS2309setEnableEb+0x1c>
    3af4:	fc 01       	movw	r30, r24
    3af6:	66 81       	ldd	r22, Z+6	; 0x06
    3af8:	01 c0       	rjmp	.+2      	; 0x3afc <_ZN9MD_TCS2309setEnableEb+0x1e>
    3afa:	63 e0       	ldi	r22, 0x03	; 3
    3afc:	0c 94 49 1d 	jmp	0x3a92	; 0x3a92 <_ZN9MD_TCS23013setFrequency2Eh>

00003b00 <_ZN9MD_TCS2306getRGBEP9colorData>:
    3b00:	dc 01       	movw	r26, r24
    3b02:	fb 01       	movw	r30, r22
    3b04:	30 97       	sbiw	r30, 0x00	; 0
    3b06:	59 f0       	breq	.+22     	; 0x3b1e <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    3b08:	9b 96       	adiw	r26, 0x2b	; 43
    3b0a:	8c 91       	ld	r24, X
    3b0c:	9b 97       	sbiw	r26, 0x2b	; 43
    3b0e:	80 83       	st	Z, r24
    3b10:	9c 96       	adiw	r26, 0x2c	; 44
    3b12:	8c 91       	ld	r24, X
    3b14:	9c 97       	sbiw	r26, 0x2c	; 44
    3b16:	81 83       	std	Z+1, r24	; 0x01
    3b18:	9d 96       	adiw	r26, 0x2d	; 45
    3b1a:	8c 91       	ld	r24, X
    3b1c:	82 83       	std	Z+2, r24	; 0x02
    3b1e:	08 95       	ret

00003b20 <_ZN9MD_TCS23017RGBTransformationEv>:
  return(s);
}

void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
    3b20:	4f 92       	push	r4
    3b22:	5f 92       	push	r5
    3b24:	6f 92       	push	r6
    3b26:	7f 92       	push	r7
    3b28:	8f 92       	push	r8
    3b2a:	9f 92       	push	r9
    3b2c:	af 92       	push	r10
    3b2e:	bf 92       	push	r11
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	0f 93       	push	r16
    3b38:	1f 93       	push	r17
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	8c 01       	movw	r16, r24
    3b40:	09 5f       	subi	r16, 0xF9	; 249
    3b42:	1f 4f       	sbci	r17, 0xFF	; 255
    3b44:	ec 01       	movw	r28, r24
    3b46:	7c 01       	movw	r14, r24
    3b48:	83 e1       	ldi	r24, 0x13	; 19
    3b4a:	e8 0e       	add	r14, r24
    3b4c:	f1 1c       	adc	r15, r1
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    x /= (_Fw.value[i] - _Fd.value[i]);

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    3b4e:	dd 24       	eor	r13, r13
    3b50:	da 94       	dec	r13
    3b52:	f8 01       	movw	r30, r16
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
  {
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    3b54:	d8 01       	movw	r26, r16
    3b56:	8d 90       	ld	r8, X+
    3b58:	9d 90       	ld	r9, X+
    3b5a:	ad 90       	ld	r10, X+
    3b5c:	bd 90       	ld	r11, X+
    3b5e:	8d 01       	movw	r16, r26
    3b60:	80 8d       	ldd	r24, Z+24	; 0x18
    3b62:	91 8d       	ldd	r25, Z+25	; 0x19
    3b64:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3b66:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3b68:	9c 01       	movw	r18, r24
    3b6a:	ad 01       	movw	r20, r26
    3b6c:	28 19       	sub	r18, r8
    3b6e:	39 09       	sbc	r19, r9
    3b70:	4a 09       	sbc	r20, r10
    3b72:	5b 09       	sbc	r21, r11
    3b74:	af ef       	ldi	r26, 0xFF	; 255
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	0e 94 18 22 	call	0x4430	; 0x4430 <__muluhisi3>
    x /= (_Fw.value[i] - _Fd.value[i]);
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	40 84       	ldd	r4, Z+8	; 0x08
    3b80:	51 84       	ldd	r5, Z+9	; 0x09
    3b82:	62 84       	ldd	r6, Z+10	; 0x0a
    3b84:	73 84       	ldd	r7, Z+11	; 0x0b
    3b86:	a3 01       	movw	r20, r6
    3b88:	92 01       	movw	r18, r4
    3b8a:	28 19       	sub	r18, r8
    3b8c:	39 09       	sbc	r19, r9
    3b8e:	4a 09       	sbc	r20, r10
    3b90:	5b 09       	sbc	r21, r11
    3b92:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <__divmodsi4>

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    3b96:	57 ff       	sbrs	r21, 7
    3b98:	02 c0       	rjmp	.+4      	; 0x3b9e <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    3b9a:	1b a6       	std	Y+43, r1	; 0x2b
    3b9c:	09 c0       	rjmp	.+18     	; 0x3bb0 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else if (x > 255) _rgb.value[i] = 255;
    3b9e:	2f 3f       	cpi	r18, 0xFF	; 255
    3ba0:	31 05       	cpc	r19, r1
    3ba2:	41 05       	cpc	r20, r1
    3ba4:	51 05       	cpc	r21, r1
    3ba6:	19 f0       	breq	.+6      	; 0x3bae <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3ba8:	14 f0       	brlt	.+4      	; 0x3bae <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3baa:	db a6       	std	Y+43, r13	; 0x2b
    3bac:	01 c0       	rjmp	.+2      	; 0x3bb0 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else _rgb.value[i] = x;
    3bae:	2b a7       	std	Y+43, r18	; 0x2b
    3bb0:	21 96       	adiw	r28, 0x01	; 1
void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
    3bb2:	0e 15       	cp	r16, r14
    3bb4:	1f 05       	cpc	r17, r15
    3bb6:	69 f6       	brne	.-102    	; 0x3b52 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    else _rgb.value[i] = x;
  }
}
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	bf 90       	pop	r11
    3bc8:	af 90       	pop	r10
    3bca:	9f 90       	pop	r9
    3bcc:	8f 90       	pop	r8
    3bce:	7f 90       	pop	r7
    3bd0:	6f 90       	pop	r6
    3bd2:	5f 90       	pop	r5
    3bd4:	4f 90       	pop	r4
    3bd6:	08 95       	ret

00003bd8 <_ZN9MD_TCS2307readFSMEh>:
  return(_readState == 0);
}

uint8_t MD_TCS230::readFSM(uint8_t s)
// Finite State Machine to read a value (internal function)
{
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	8c 01       	movw	r16, r24
    3be2:	c6 2f       	mov	r28, r22
  static const uint8_t seq[] = { TCS230_RGB_R, TCS230_RGB_G, TCS230_RGB_B };
  static uint8_t       currCol;  // index for seq above

  switch(s)
    3be4:	61 30       	cpi	r22, 0x01	; 1
    3be6:	49 f0       	breq	.+18     	; 0x3bfa <_ZN9MD_TCS2307readFSMEh+0x22>
    3be8:	18 f0       	brcs	.+6      	; 0x3bf0 <_ZN9MD_TCS2307readFSMEh+0x18>
    3bea:	62 30       	cpi	r22, 0x02	; 2
    3bec:	d9 f0       	breq	.+54     	; 0x3c24 <_ZN9MD_TCS2307readFSMEh+0x4c>
    3bee:	4c c0       	rjmp	.+152    	; 0x3c88 <_ZN9MD_TCS2307readFSMEh+0xb0>
  {
  case 0: // enable the hardware for reading
    DUMPS("\n0");
    currCol = 0;  // RGB_R but we don't care
    3bf0:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <_ZZN9MD_TCS2307readFSMEhE7currCol>
    setEnable(true);
    3bf4:	61 e0       	ldi	r22, 0x01	; 1
    3bf6:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <_ZN9MD_TCS2309setEnableEb>
    s++;
    // fall through to the next state

  case 1: // select a filter and start a reading
    DUMPS("\n1");
    setFilter(seq[currCol]);
    3bfa:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	ea 59       	subi	r30, 0x9A	; 154
    3c02:	fd 4f       	sbci	r31, 0xFD	; 253
    3c04:	60 81       	ld	r22, Z
    3c06:	c8 01       	movw	r24, r16
    3c08:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_ZN9MD_TCS2309setFilterEh>
    FreqCount.begin(1000/_readDiv);
    3c0c:	f8 01       	movw	r30, r16
    3c0e:	65 81       	ldd	r22, Z+5	; 0x05
    3c10:	70 e0       	ldi	r23, 0x00	; 0
    3c12:	88 ee       	ldi	r24, 0xE8	; 232
    3c14:	93 e0       	ldi	r25, 0x03	; 3
    3c16:	0e 94 bd 21 	call	0x437a	; 0x437a <__divmodhi4>
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	0e 94 73 20 	call	0x40e6	; 0x40e6 <_ZN14FreqCountClass5beginEj>
    s++;
    3c20:	c2 e0       	ldi	r28, 0x02	; 2
    break;
    3c22:	32 c0       	rjmp	.+100    	; 0x3c88 <_ZN9MD_TCS2307readFSMEh+0xb0>

  case 2: // see if a value is available
    DUMPS("2");
    if (FreqCount.available())
    3c24:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <_ZN14FreqCountClass9availableEv>
    3c28:	88 23       	and	r24, r24
    3c2a:	71 f1       	breq	.+92     	; 0x3c88 <_ZN9MD_TCS2307readFSMEh+0xb0>
    {
      DUMP(" VALUE ", FreqCount.read());
      // read the value and save it 
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;
    3c2c:	e0 91 9f 04 	lds	r30, 0x049F	; 0x80049f <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	8e 0f       	add	r24, r30
    3c34:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	ea 59       	subi	r30, 0x9A	; 154
    3c3c:	fd 4f       	sbci	r31, 0xFD	; 253
    3c3e:	c0 81       	ld	r28, Z
    3c40:	d0 e0       	ldi	r29, 0x00	; 0
    3c42:	0e 94 ee 20 	call	0x41dc	; 0x41dc <_ZN14FreqCountClass4readEv>
    3c46:	9b 01       	movw	r18, r22
    3c48:	ac 01       	movw	r20, r24
    3c4a:	cc 0f       	add	r28, r28
    3c4c:	dd 1f       	adc	r29, r29
    3c4e:	cc 0f       	add	r28, r28
    3c50:	dd 1f       	adc	r29, r29
    3c52:	c0 0f       	add	r28, r16
    3c54:	d1 1f       	adc	r29, r17
    3c56:	f8 01       	movw	r30, r16
    3c58:	a5 81       	ldd	r26, Z+5	; 0x05
    3c5a:	b0 e0       	ldi	r27, 0x00	; 0
    3c5c:	0e 94 18 22 	call	0x4430	; 0x4430 <__muluhisi3>
    3c60:	6f 8f       	std	Y+31, r22	; 0x1f
    3c62:	78 a3       	std	Y+32, r23	; 0x20
    3c64:	89 a3       	std	Y+33, r24	; 0x21
    3c66:	9a a3       	std	Y+34, r25	; 0x22

      if (currCol < RGB_SIZE)
    3c68:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3c6c:	83 30       	cpi	r24, 0x03	; 3
    3c6e:	58 f0       	brcs	.+22     	; 0x3c86 <_ZN9MD_TCS2307readFSMEh+0xae>
        s--;
      }
      else
      {
        // end this reading session
        FreqCount.end();
    3c70:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <_ZN14FreqCountClass3endEv>
        setEnable(false);
    3c74:	60 e0       	ldi	r22, 0x00	; 0
    3c76:	c8 01       	movw	r24, r16
    3c78:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <_ZN9MD_TCS2309setEnableEb>
        RGBTransformation();
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <_ZN9MD_TCS23017RGBTransformationEv>
        s = 0;
    3c82:	c0 e0       	ldi	r28, 0x00	; 0
    3c84:	01 c0       	rjmp	.+2      	; 0x3c88 <_ZN9MD_TCS2307readFSMEh+0xb0>
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;

      if (currCol < RGB_SIZE)
      {
        // loop around again on next call to available()
        s--;
    3c86:	c1 e0       	ldi	r28, 0x01	; 1
    }
    break;
  }

  return(s);
}
    3c88:	8c 2f       	mov	r24, r28
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	08 95       	ret

00003c94 <_ZN9MD_TCS2304readEv>:
  return(FreqCount.read() * _readDiv);
}

void MD_TCS230::read(void)
// initiate the finite state machine for reading a value
{
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	ec 01       	movw	r28, r24
  _readState = readFSM(0);
    3c9a:	60 e0       	ldi	r22, 0x00	; 0
    3c9c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN9MD_TCS2307readFSMEh>
    3ca0:	8e a7       	std	Y+46, r24	; 0x2e
}
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	08 95       	ret

00003ca8 <_ZN9MD_TCS2309availableEv>:

bool MD_TCS230::available(void)
// check if a value is ready. Called repeatedly until it is!
{
    3ca8:	cf 93       	push	r28
    3caa:	df 93       	push	r29
    3cac:	ec 01       	movw	r28, r24
  _readState = readFSM(_readState);
    3cae:	6e a5       	ldd	r22, Y+46	; 0x2e
    3cb0:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <_ZN9MD_TCS2307readFSMEh>
    3cb4:	98 2f       	mov	r25, r24
    3cb6:	8e a7       	std	Y+46, r24	; 0x2e

  return(_readState == 0);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	91 11       	cpse	r25, r1
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
}
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	08 95       	ret

00003cc4 <yield>:
    3cc4:	08 95       	ret

00003cc6 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    3ccc:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    3cd0:	ce 01       	movw	r24, r28
    3cd2:	0e 94 46 22 	call	0x448c	; 0x448c <malloc>
    3cd6:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    3cd8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    3cdc:	20 97       	sbiw	r28, 0x00	; 0
    3cde:	11 f4       	brne	.+4      	; 0x3ce4 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    3ce0:	0e 94 cd 1c 	call	0x399a	; 0x399a <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	08 95       	ret

00003cec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3cec:	cf 93       	push	r28
    3cee:	df 93       	push	r29
    if( pv )
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	51 f0       	breq	.+20     	; 0x3d08 <vPortFree+0x1c>
    3cf4:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    3cf6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <vTaskSuspendAll>
        {
            free( pv );
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	0e 94 de 22 	call	0x45bc	; 0x45bc <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    3d00:	df 91       	pop	r29
    3d02:	cf 91       	pop	r28
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    3d04:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <xTaskResumeAll>
    }
}
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	08 95       	ret

00003d0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    3d0e:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3d10:	03 96       	adiw	r24, 0x03	; 3
    3d12:	92 83       	std	Z+2, r25	; 0x02
    3d14:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    3d16:	2f ef       	ldi	r18, 0xFF	; 255
    3d18:	3f ef       	ldi	r19, 0xFF	; 255
    3d1a:	34 83       	std	Z+4, r19	; 0x04
    3d1c:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3d1e:	96 83       	std	Z+6, r25	; 0x06
    3d20:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    3d22:	90 87       	std	Z+8, r25	; 0x08
    3d24:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    3d26:	10 82       	st	Z, r1
    3d28:	08 95       	ret

00003d2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	11 86       	std	Z+9, r1	; 0x09
    3d2e:	10 86       	std	Z+8, r1	; 0x08
    3d30:	08 95       	ret

00003d32 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	9c 01       	movw	r18, r24
    3d38:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	11 96       	adiw	r26, 0x01	; 1
    3d3e:	cd 91       	ld	r28, X+
    3d40:	dc 91       	ld	r29, X
    3d42:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    3d44:	d3 83       	std	Z+3, r29	; 0x03
    3d46:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3d48:	8c 81       	ldd	r24, Y+4	; 0x04
    3d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d4c:	95 83       	std	Z+5, r25	; 0x05
    3d4e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    3d50:	8c 81       	ldd	r24, Y+4	; 0x04
    3d52:	9d 81       	ldd	r25, Y+5	; 0x05
    3d54:	dc 01       	movw	r26, r24
    3d56:	13 96       	adiw	r26, 0x03	; 3
    3d58:	7c 93       	st	X, r23
    3d5a:	6e 93       	st	-X, r22
    3d5c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    3d5e:	7d 83       	std	Y+5, r23	; 0x05
    3d60:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    3d62:	31 87       	std	Z+9, r19	; 0x09
    3d64:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    3d66:	f9 01       	movw	r30, r18
    3d68:	80 81       	ld	r24, Z
    3d6a:	8f 5f       	subi	r24, 0xFF	; 255
    3d6c:	80 83       	st	Z, r24
}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	08 95       	ret

00003d74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    3d74:	0f 93       	push	r16
    3d76:	1f 93       	push	r17
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	8c 01       	movw	r16, r24
    3d7e:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    3d84:	8f 3f       	cpi	r24, 0xFF	; 255
    3d86:	2f ef       	ldi	r18, 0xFF	; 255
    3d88:	92 07       	cpc	r25, r18
    3d8a:	21 f4       	brne	.+8      	; 0x3d94 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    3d8c:	e8 01       	movw	r28, r16
    3d8e:	af 81       	ldd	r26, Y+7	; 0x07
    3d90:	b8 85       	ldd	r27, Y+8	; 0x08
    3d92:	0e c0       	rjmp	.+28     	; 0x3db0 <vListInsert+0x3c>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    3d94:	d8 01       	movw	r26, r16
    3d96:	13 96       	adiw	r26, 0x03	; 3
    3d98:	12 96       	adiw	r26, 0x02	; 2
    3d9a:	2d 91       	ld	r18, X+
    3d9c:	3c 91       	ld	r19, X
    3d9e:	13 97       	sbiw	r26, 0x03	; 3
    3da0:	e9 01       	movw	r28, r18
    3da2:	48 81       	ld	r20, Y
    3da4:	59 81       	ldd	r21, Y+1	; 0x01
    3da6:	84 17       	cp	r24, r20
    3da8:	95 07       	cpc	r25, r21
    3daa:	10 f0       	brcs	.+4      	; 0x3db0 <vListInsert+0x3c>
    3dac:	d9 01       	movw	r26, r18
    3dae:	f4 cf       	rjmp	.-24     	; 0x3d98 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    3db0:	12 96       	adiw	r26, 0x02	; 2
    3db2:	8d 91       	ld	r24, X+
    3db4:	9c 91       	ld	r25, X
    3db6:	13 97       	sbiw	r26, 0x03	; 3
    3db8:	93 83       	std	Z+3, r25	; 0x03
    3dba:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3dbc:	ec 01       	movw	r28, r24
    3dbe:	fd 83       	std	Y+5, r31	; 0x05
    3dc0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    3dc2:	b5 83       	std	Z+5, r27	; 0x05
    3dc4:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    3dc6:	13 96       	adiw	r26, 0x03	; 3
    3dc8:	fc 93       	st	X, r31
    3dca:	ee 93       	st	-X, r30
    3dcc:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    3dce:	11 87       	std	Z+9, r17	; 0x09
    3dd0:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	80 81       	ld	r24, Z
    3dd6:	8f 5f       	subi	r24, 0xFF	; 255
    3dd8:	80 83       	st	Z, r24
}
    3dda:	df 91       	pop	r29
    3ddc:	cf 91       	pop	r28
    3dde:	1f 91       	pop	r17
    3de0:	0f 91       	pop	r16
    3de2:	08 95       	ret

00003de4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    3dea:	a0 85       	ldd	r26, Z+8	; 0x08
    3dec:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	24 81       	ldd	r18, Z+4	; 0x04
    3df4:	35 81       	ldd	r19, Z+5	; 0x05
    3df6:	ec 01       	movw	r28, r24
    3df8:	3d 83       	std	Y+5, r19	; 0x05
    3dfa:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3dfc:	c4 81       	ldd	r28, Z+4	; 0x04
    3dfe:	d5 81       	ldd	r29, Z+5	; 0x05
    3e00:	9b 83       	std	Y+3, r25	; 0x03
    3e02:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    3e04:	11 96       	adiw	r26, 0x01	; 1
    3e06:	8d 91       	ld	r24, X+
    3e08:	9c 91       	ld	r25, X
    3e0a:	12 97       	sbiw	r26, 0x02	; 2
    3e0c:	e8 17       	cp	r30, r24
    3e0e:	f9 07       	cpc	r31, r25
    3e10:	21 f4       	brne	.+8      	; 0x3e1a <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    3e12:	12 96       	adiw	r26, 0x02	; 2
    3e14:	dc 93       	st	X, r29
    3e16:	ce 93       	st	-X, r28
    3e18:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    3e1a:	11 86       	std	Z+9, r1	; 0x09
    3e1c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    3e1e:	8c 91       	ld	r24, X
    3e20:	81 50       	subi	r24, 0x01	; 1
    3e22:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    3e24:	8c 91       	ld	r24, X
}
    3e26:	df 91       	pop	r29
    3e28:	cf 91       	pop	r28
    3e2a:	08 95       	ret

00003e2c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3e2c:	31 e1       	ldi	r19, 0x11	; 17
    3e2e:	fc 01       	movw	r30, r24
    3e30:	30 83       	st	Z, r19
    3e32:	31 97       	sbiw	r30, 0x01	; 1
    3e34:	22 e2       	ldi	r18, 0x22	; 34
    3e36:	20 83       	st	Z, r18
    3e38:	31 97       	sbiw	r30, 0x01	; 1
    3e3a:	a3 e3       	ldi	r26, 0x33	; 51
    3e3c:	a0 83       	st	Z, r26
    3e3e:	31 97       	sbiw	r30, 0x01	; 1
    3e40:	60 83       	st	Z, r22
    3e42:	31 97       	sbiw	r30, 0x01	; 1
    3e44:	70 83       	st	Z, r23
    3e46:	31 97       	sbiw	r30, 0x01	; 1
    3e48:	10 82       	st	Z, r1
    3e4a:	31 97       	sbiw	r30, 0x01	; 1
    3e4c:	60 e8       	ldi	r22, 0x80	; 128
    3e4e:	60 83       	st	Z, r22
    3e50:	31 97       	sbiw	r30, 0x01	; 1
    3e52:	10 82       	st	Z, r1
    3e54:	31 97       	sbiw	r30, 0x01	; 1
    3e56:	62 e0       	ldi	r22, 0x02	; 2
    3e58:	60 83       	st	Z, r22
    3e5a:	31 97       	sbiw	r30, 0x01	; 1
    3e5c:	63 e0       	ldi	r22, 0x03	; 3
    3e5e:	60 83       	st	Z, r22
    3e60:	31 97       	sbiw	r30, 0x01	; 1
    3e62:	64 e0       	ldi	r22, 0x04	; 4
    3e64:	60 83       	st	Z, r22
    3e66:	31 97       	sbiw	r30, 0x01	; 1
    3e68:	65 e0       	ldi	r22, 0x05	; 5
    3e6a:	60 83       	st	Z, r22
    3e6c:	31 97       	sbiw	r30, 0x01	; 1
    3e6e:	66 e0       	ldi	r22, 0x06	; 6
    3e70:	60 83       	st	Z, r22
    3e72:	31 97       	sbiw	r30, 0x01	; 1
    3e74:	67 e0       	ldi	r22, 0x07	; 7
    3e76:	60 83       	st	Z, r22
    3e78:	31 97       	sbiw	r30, 0x01	; 1
    3e7a:	68 e0       	ldi	r22, 0x08	; 8
    3e7c:	60 83       	st	Z, r22
    3e7e:	31 97       	sbiw	r30, 0x01	; 1
    3e80:	69 e0       	ldi	r22, 0x09	; 9
    3e82:	60 83       	st	Z, r22
    3e84:	31 97       	sbiw	r30, 0x01	; 1
    3e86:	60 e1       	ldi	r22, 0x10	; 16
    3e88:	60 83       	st	Z, r22
    3e8a:	31 97       	sbiw	r30, 0x01	; 1
    3e8c:	30 83       	st	Z, r19
    3e8e:	31 97       	sbiw	r30, 0x01	; 1
    3e90:	32 e1       	ldi	r19, 0x12	; 18
    3e92:	30 83       	st	Z, r19
    3e94:	31 97       	sbiw	r30, 0x01	; 1
    3e96:	33 e1       	ldi	r19, 0x13	; 19
    3e98:	30 83       	st	Z, r19
    3e9a:	31 97       	sbiw	r30, 0x01	; 1
    3e9c:	34 e1       	ldi	r19, 0x14	; 20
    3e9e:	30 83       	st	Z, r19
    3ea0:	31 97       	sbiw	r30, 0x01	; 1
    3ea2:	35 e1       	ldi	r19, 0x15	; 21
    3ea4:	30 83       	st	Z, r19
    3ea6:	31 97       	sbiw	r30, 0x01	; 1
    3ea8:	36 e1       	ldi	r19, 0x16	; 22
    3eaa:	30 83       	st	Z, r19
    3eac:	31 97       	sbiw	r30, 0x01	; 1
    3eae:	37 e1       	ldi	r19, 0x17	; 23
    3eb0:	30 83       	st	Z, r19
    3eb2:	31 97       	sbiw	r30, 0x01	; 1
    3eb4:	38 e1       	ldi	r19, 0x18	; 24
    3eb6:	30 83       	st	Z, r19
    3eb8:	31 97       	sbiw	r30, 0x01	; 1
    3eba:	39 e1       	ldi	r19, 0x19	; 25
    3ebc:	30 83       	st	Z, r19
    3ebe:	31 97       	sbiw	r30, 0x01	; 1
    3ec0:	30 e2       	ldi	r19, 0x20	; 32
    3ec2:	30 83       	st	Z, r19
    3ec4:	31 97       	sbiw	r30, 0x01	; 1
    3ec6:	31 e2       	ldi	r19, 0x21	; 33
    3ec8:	30 83       	st	Z, r19
    3eca:	31 97       	sbiw	r30, 0x01	; 1
    3ecc:	20 83       	st	Z, r18
    3ece:	31 97       	sbiw	r30, 0x01	; 1
    3ed0:	23 e2       	ldi	r18, 0x23	; 35
    3ed2:	20 83       	st	Z, r18
    3ed4:	31 97       	sbiw	r30, 0x01	; 1
    3ed6:	40 83       	st	Z, r20
    3ed8:	31 97       	sbiw	r30, 0x01	; 1
    3eda:	50 83       	st	Z, r21
    3edc:	31 97       	sbiw	r30, 0x01	; 1
    3ede:	26 e2       	ldi	r18, 0x26	; 38
    3ee0:	20 83       	st	Z, r18
    3ee2:	31 97       	sbiw	r30, 0x01	; 1
    3ee4:	27 e2       	ldi	r18, 0x27	; 39
    3ee6:	20 83       	st	Z, r18
    3ee8:	31 97       	sbiw	r30, 0x01	; 1
    3eea:	28 e2       	ldi	r18, 0x28	; 40
    3eec:	20 83       	st	Z, r18
    3eee:	31 97       	sbiw	r30, 0x01	; 1
    3ef0:	29 e2       	ldi	r18, 0x29	; 41
    3ef2:	20 83       	st	Z, r18
    3ef4:	31 97       	sbiw	r30, 0x01	; 1
    3ef6:	20 e3       	ldi	r18, 0x30	; 48
    3ef8:	20 83       	st	Z, r18
    3efa:	31 97       	sbiw	r30, 0x01	; 1
    3efc:	21 e3       	ldi	r18, 0x31	; 49
    3efe:	20 83       	st	Z, r18
    3f00:	86 97       	sbiw	r24, 0x26	; 38
    3f02:	08 95       	ret

00003f04 <xPortStartScheduler>:
    3f04:	a8 95       	wdr
    3f06:	90 ec       	ldi	r25, 0xC0	; 192
    3f08:	88 e1       	ldi	r24, 0x18	; 24
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	a8 95       	wdr
    3f10:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    3f1a:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    3f1e:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3f22:	cd 91       	ld	r28, X+
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	dd 91       	ld	r29, X+
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	ff 91       	pop	r31
    3f2c:	ef 91       	pop	r30
    3f2e:	df 91       	pop	r29
    3f30:	cf 91       	pop	r28
    3f32:	bf 91       	pop	r27
    3f34:	af 91       	pop	r26
    3f36:	9f 91       	pop	r25
    3f38:	8f 91       	pop	r24
    3f3a:	7f 91       	pop	r23
    3f3c:	6f 91       	pop	r22
    3f3e:	5f 91       	pop	r21
    3f40:	4f 91       	pop	r20
    3f42:	3f 91       	pop	r19
    3f44:	2f 91       	pop	r18
    3f46:	1f 91       	pop	r17
    3f48:	0f 91       	pop	r16
    3f4a:	ff 90       	pop	r15
    3f4c:	ef 90       	pop	r14
    3f4e:	df 90       	pop	r13
    3f50:	cf 90       	pop	r12
    3f52:	bf 90       	pop	r11
    3f54:	af 90       	pop	r10
    3f56:	9f 90       	pop	r9
    3f58:	8f 90       	pop	r8
    3f5a:	7f 90       	pop	r7
    3f5c:	6f 90       	pop	r6
    3f5e:	5f 90       	pop	r5
    3f60:	4f 90       	pop	r4
    3f62:	3f 90       	pop	r3
    3f64:	2f 90       	pop	r2
    3f66:	1f 90       	pop	r1
    3f68:	0f 90       	pop	r0
    3f6a:	0f be       	out	0x3f, r0	; 63
    3f6c:	0f 90       	pop	r0
    3f6e:	08 95       	ret
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	08 95       	ret

00003f74 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    3f74:	0f 92       	push	r0
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	f8 94       	cli
    3f7a:	0f 92       	push	r0
    3f7c:	1f 92       	push	r1
    3f7e:	11 24       	eor	r1, r1
    3f80:	2f 92       	push	r2
    3f82:	3f 92       	push	r3
    3f84:	4f 92       	push	r4
    3f86:	5f 92       	push	r5
    3f88:	6f 92       	push	r6
    3f8a:	7f 92       	push	r7
    3f8c:	8f 92       	push	r8
    3f8e:	9f 92       	push	r9
    3f90:	af 92       	push	r10
    3f92:	bf 92       	push	r11
    3f94:	cf 92       	push	r12
    3f96:	df 92       	push	r13
    3f98:	ef 92       	push	r14
    3f9a:	ff 92       	push	r15
    3f9c:	0f 93       	push	r16
    3f9e:	1f 93       	push	r17
    3fa0:	2f 93       	push	r18
    3fa2:	3f 93       	push	r19
    3fa4:	4f 93       	push	r20
    3fa6:	5f 93       	push	r21
    3fa8:	6f 93       	push	r22
    3faa:	7f 93       	push	r23
    3fac:	8f 93       	push	r24
    3fae:	9f 93       	push	r25
    3fb0:	af 93       	push	r26
    3fb2:	bf 93       	push	r27
    3fb4:	cf 93       	push	r28
    3fb6:	df 93       	push	r29
    3fb8:	ef 93       	push	r30
    3fba:	ff 93       	push	r31
    3fbc:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    3fc0:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3fc4:	0d b6       	in	r0, 0x3d	; 61
    3fc6:	0d 92       	st	X+, r0
    3fc8:	0e b6       	in	r0, 0x3e	; 62
    3fca:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    3fcc:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    3fd0:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    3fd4:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    3fd8:	cd 91       	ld	r28, X+
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	dd 91       	ld	r29, X+
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	ff 91       	pop	r31
    3fe2:	ef 91       	pop	r30
    3fe4:	df 91       	pop	r29
    3fe6:	cf 91       	pop	r28
    3fe8:	bf 91       	pop	r27
    3fea:	af 91       	pop	r26
    3fec:	9f 91       	pop	r25
    3fee:	8f 91       	pop	r24
    3ff0:	7f 91       	pop	r23
    3ff2:	6f 91       	pop	r22
    3ff4:	5f 91       	pop	r21
    3ff6:	4f 91       	pop	r20
    3ff8:	3f 91       	pop	r19
    3ffa:	2f 91       	pop	r18
    3ffc:	1f 91       	pop	r17
    3ffe:	0f 91       	pop	r16
    4000:	ff 90       	pop	r15
    4002:	ef 90       	pop	r14
    4004:	df 90       	pop	r13
    4006:	cf 90       	pop	r12
    4008:	bf 90       	pop	r11
    400a:	af 90       	pop	r10
    400c:	9f 90       	pop	r9
    400e:	8f 90       	pop	r8
    4010:	7f 90       	pop	r7
    4012:	6f 90       	pop	r6
    4014:	5f 90       	pop	r5
    4016:	4f 90       	pop	r4
    4018:	3f 90       	pop	r3
    401a:	2f 90       	pop	r2
    401c:	1f 90       	pop	r1
    401e:	0f 90       	pop	r0
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    4024:	08 95       	ret

00004026 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    4026:	0f 92       	push	r0
    4028:	0f b6       	in	r0, 0x3f	; 63
    402a:	f8 94       	cli
    402c:	0f 92       	push	r0
    402e:	1f 92       	push	r1
    4030:	11 24       	eor	r1, r1
    4032:	2f 92       	push	r2
    4034:	3f 92       	push	r3
    4036:	4f 92       	push	r4
    4038:	5f 92       	push	r5
    403a:	6f 92       	push	r6
    403c:	7f 92       	push	r7
    403e:	8f 92       	push	r8
    4040:	9f 92       	push	r9
    4042:	af 92       	push	r10
    4044:	bf 92       	push	r11
    4046:	cf 92       	push	r12
    4048:	df 92       	push	r13
    404a:	ef 92       	push	r14
    404c:	ff 92       	push	r15
    404e:	0f 93       	push	r16
    4050:	1f 93       	push	r17
    4052:	2f 93       	push	r18
    4054:	3f 93       	push	r19
    4056:	4f 93       	push	r20
    4058:	5f 93       	push	r21
    405a:	6f 93       	push	r22
    405c:	7f 93       	push	r23
    405e:	8f 93       	push	r24
    4060:	9f 93       	push	r25
    4062:	af 93       	push	r26
    4064:	bf 93       	push	r27
    4066:	cf 93       	push	r28
    4068:	df 93       	push	r29
    406a:	ef 93       	push	r30
    406c:	ff 93       	push	r31
    406e:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    4072:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    4076:	0d b6       	in	r0, 0x3d	; 61
    4078:	0d 92       	st	X+, r0
    407a:	0e b6       	in	r0, 0x3e	; 62
    407c:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    407e:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    4080:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <xTaskIncrementTick>
    4084:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    4086:	0e 94 56 18 	call	0x30ac	; 0x30ac <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    408a:	a0 91 81 04 	lds	r26, 0x0481	; 0x800481 <pxCurrentTCB>
    408e:	b0 91 82 04 	lds	r27, 0x0482	; 0x800482 <pxCurrentTCB+0x1>
    4092:	cd 91       	ld	r28, X+
    4094:	cd bf       	out	0x3d, r28	; 61
    4096:	dd 91       	ld	r29, X+
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	ff 91       	pop	r31
    409c:	ef 91       	pop	r30
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	bf 91       	pop	r27
    40a4:	af 91       	pop	r26
    40a6:	9f 91       	pop	r25
    40a8:	8f 91       	pop	r24
    40aa:	7f 91       	pop	r23
    40ac:	6f 91       	pop	r22
    40ae:	5f 91       	pop	r21
    40b0:	4f 91       	pop	r20
    40b2:	3f 91       	pop	r19
    40b4:	2f 91       	pop	r18
    40b6:	1f 91       	pop	r17
    40b8:	0f 91       	pop	r16
    40ba:	ff 90       	pop	r15
    40bc:	ef 90       	pop	r14
    40be:	df 90       	pop	r13
    40c0:	cf 90       	pop	r12
    40c2:	bf 90       	pop	r11
    40c4:	af 90       	pop	r10
    40c6:	9f 90       	pop	r9
    40c8:	8f 90       	pop	r8
    40ca:	7f 90       	pop	r7
    40cc:	6f 90       	pop	r6
    40ce:	5f 90       	pop	r5
    40d0:	4f 90       	pop	r4
    40d2:	3f 90       	pop	r3
    40d4:	2f 90       	pop	r2
    40d6:	1f 90       	pop	r1
    40d8:	0f 90       	pop	r0
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    40de:	08 95       	ret

000040e0 <__vector_6>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    40e0:	0e 94 13 20 	call	0x4026	; 0x4026 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    40e4:	18 95       	reti

000040e6 <_ZN14FreqCountClass5beginEj>:
static uint16_t gate_index;


void FreqCountClass::begin(uint16_t msec)
{
	if (msec < 1) return;
    40e6:	00 97       	sbiw	r24, 0x00	; 0
    40e8:	09 f4       	brne	.+2      	; 0x40ec <_ZN14FreqCountClass5beginEj+0x6>
    40ea:	74 c0       	rjmp	.+232    	; 0x41d4 <L_130_loop+0xc>
	gate_index = 0;
    40ec:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL10gate_index+0x1>
    40f0:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZL10gate_index>
	count_msw = 0;
    40f4:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <_ZL9count_msw+0x1>
    40f8:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZL9count_msw>
	count_prev = 0;
    40fc:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10count_prev>
    4100:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL10count_prev+0x1>
    4104:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZL10count_prev+0x2>
    4108:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <_ZL10count_prev+0x3>
	count_ready = 0;
    410c:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZL11count_ready>

static uint8_t saveTCCR1A, saveTCCR1B;

static inline void counter_init(void)
{
	saveTCCR1A = TCCR1A;
    4110:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4114:	20 93 b3 04 	sts	0x04B3, r18	; 0x8004b3 <_ZL10saveTCCR1A>
	saveTCCR1B = TCCR1B;
    4118:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    411c:	20 93 b2 04 	sts	0x04B2, r18	; 0x8004b2 <_ZL10saveTCCR1B>
	TCCR1B = 0;
    4120:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1A = 0;
    4124:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCNT1 = 0;
    4128:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    412c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIFR1 = (1<<TOV1);
    4130:	21 e0       	ldi	r18, 0x01	; 1
    4132:	26 bb       	out	0x16, r18	; 22
	TIMSK1 = 0;
    4134:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

static inline uint16_t timer_init(uint16_t msec)
{
	uint16_t gate_len;

	saveTCCR2A = TCCR2A;
    4138:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    413c:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <_ZL10saveTCCR2A>
	saveTCCR2B = TCCR2B;
    4140:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    4144:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <_ZL10saveTCCR2B>
	TCCR2B = 0;
    4148:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCCR2A = (1<<WGM21);
    414c:	22 e0       	ldi	r18, 0x02	; 2
    414e:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	if ((msec & 7) == 0) {
    4152:	9c 01       	movw	r18, r24
    4154:	27 70       	andi	r18, 0x07	; 7
    4156:	33 27       	eor	r19, r19
    4158:	23 2b       	or	r18, r19
    415a:	51 f4       	brne	.+20     	; 0x4170 <_ZN14FreqCountClass5beginEj+0x8a>
		gate_len = msec >> 3;
    415c:	43 e0       	ldi	r20, 0x03	; 3
    415e:	96 95       	lsr	r25
    4160:	87 95       	ror	r24
    4162:	4a 95       	dec	r20
    4164:	e1 f7       	brne	.-8      	; 0x415e <_ZN14FreqCountClass5beginEj+0x78>
		OCR2A = TIMER2_OCR2A_8MS_VAL;
    4166:	2c e7       	ldi	r18, 0x7C	; 124
    4168:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_8MS_VAL;
    416c:	27 e0       	ldi	r18, 0x07	; 7
    416e:	18 c0       	rjmp	.+48     	; 0x41a0 <_ZN14FreqCountClass5beginEj+0xba>
	} else if ((msec & 3) == 0) {
    4170:	9c 01       	movw	r18, r24
    4172:	23 70       	andi	r18, 0x03	; 3
    4174:	33 27       	eor	r19, r19
    4176:	23 2b       	or	r18, r19
    4178:	31 f4       	brne	.+12     	; 0x4186 <_ZN14FreqCountClass5beginEj+0xa0>
		gate_len = msec >> 2;
    417a:	96 95       	lsr	r25
    417c:	87 95       	ror	r24
    417e:	96 95       	lsr	r25
    4180:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_4MS_VAL;
    4182:	29 ef       	ldi	r18, 0xF9	; 249
    4184:	05 c0       	rjmp	.+10     	; 0x4190 <_ZN14FreqCountClass5beginEj+0xaa>
		startTCCR2B = TIMER2_TCCR2B_4MS_VAL;
	} else if ((msec & 1) == 0) {
    4186:	80 fd       	sbrc	r24, 0
    4188:	07 c0       	rjmp	.+14     	; 0x4198 <_ZN14FreqCountClass5beginEj+0xb2>
		gate_len = msec >> 1;
    418a:	96 95       	lsr	r25
    418c:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_2MS_VAL;
    418e:	2c e7       	ldi	r18, 0x7C	; 124
    4190:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_2MS_VAL;
    4194:	26 e0       	ldi	r18, 0x06	; 6
    4196:	04 c0       	rjmp	.+8      	; 0x41a0 <_ZN14FreqCountClass5beginEj+0xba>
	} else {
		gate_len = msec;
		OCR2A = TIMER2_OCR2A_1MS_VAL;
    4198:	2c e7       	ldi	r18, 0x7C	; 124
    419a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_1MS_VAL;
    419e:	25 e0       	ldi	r18, 0x05	; 5
    41a0:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <_ZL11startTCCR2B>
	}
	TIFR2 = (1<<OCF2A);
    41a4:	22 e0       	ldi	r18, 0x02	; 2
    41a6:	27 bb       	out	0x17, r18	; 23
	TCNT2 = 0;
    41a8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	counter_init();
	gate_length = timer_init(msec);
    41ac:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <_ZL11gate_length+0x1>
    41b0:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <_ZL11gate_length>
	uint8_t status = SREG;
    41b4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    41b6:	f8 94       	cli
	return gate_len;
}

static inline void timer_start(void)
{
	GTCCR = (1<<PSRASY);
    41b8:	23 bd       	out	0x23, r18	; 35
	TCCR2B = startTCCR2B;
    41ba:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZL11startTCCR2B>
    41be:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = (1<<OCIE2A);
    41c2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		"L_%=_loop:"
		"subi   %0, 1"		"\n\t"
		"brne   L_%=_loop"	"\n\t"
		: "+d" (cycles_times_3)
		: "0" (cycles_times_3)
	);
    41c6:	8b e0       	ldi	r24, 0x0B	; 11

000041c8 <L_130_loop>:
    41c8:	81 50       	subi	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <L_130_loop>
	TIMSK1 = 0;
}

static inline void counter_start(void)
{
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
    41cc:	87 e0       	ldi	r24, 0x07	; 7
    41ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	timer_start();
	timer_isr_latency_delay();
	counter_start();
	SREG = status;
    41d2:	9f bf       	out	0x3f, r25	; 63
    41d4:	08 95       	ret

000041d6 <_ZN14FreqCountClass9availableEv>:
}

uint8_t FreqCountClass::available(void)
{
	return count_ready;
    41d6:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZL11count_ready>
}
    41da:	08 95       	ret

000041dc <_ZN14FreqCountClass4readEv>:
uint32_t FreqCountClass::read(void)
{
	uint32_t count;
	uint8_t status;

	status = SREG;
    41dc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    41de:	f8 94       	cli
	count = count_output;
    41e0:	60 91 a5 04 	lds	r22, 0x04A5	; 0x8004a5 <_ZL12count_output>
    41e4:	70 91 a6 04 	lds	r23, 0x04A6	; 0x8004a6 <_ZL12count_output+0x1>
    41e8:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <_ZL12count_output+0x2>
    41ec:	90 91 a8 04 	lds	r25, 0x04A8	; 0x8004a8 <_ZL12count_output+0x3>
	count_ready = 0;
    41f0:	10 92 a4 04 	sts	0x04A4, r1	; 0x8004a4 <_ZL11count_ready>
	SREG = status;
    41f4:	2f bf       	out	0x3f, r18	; 63
	return count;
}
    41f6:	08 95       	ret

000041f8 <_ZN14FreqCountClass3endEv>:
	TIMSK2 = (1<<OCIE2A);
}

static inline void timer_shutdown(void)
{
	TCCR2B = 0;
    41f8:	e1 eb       	ldi	r30, 0xB1	; 177
    41fa:	f0 e0       	ldi	r31, 0x00	; 0
    41fc:	10 82       	st	Z, r1
	TIMSK2 = 0;
    41fe:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCCR2A = saveTCCR2A;
    4202:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <_ZL10saveTCCR2A>
    4206:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = saveTCCR2B;
    420a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZL10saveTCCR2B>
    420e:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
}

static inline void counter_shutdown(void)
{
	TCCR1B = 0;
    4210:	e1 e8       	ldi	r30, 0x81	; 129
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	10 82       	st	Z, r1
	TCCR1A = saveTCCR1A;
    4216:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <_ZL10saveTCCR1A>
    421a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = saveTCCR1B;
    421e:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <_ZL10saveTCCR1B>
    4222:	80 83       	st	Z, r24
    4224:	08 95       	ret

00004226 <__vector_7>:
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
{
    4226:	1f 92       	push	r1
    4228:	0f 92       	push	r0
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	0f 92       	push	r0
    422e:	11 24       	eor	r1, r1
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	2f 93       	push	r18
    4236:	3f 93       	push	r19
    4238:	4f 93       	push	r20
    423a:	5f 93       	push	r21
    423c:	6f 93       	push	r22
    423e:	7f 93       	push	r23
    4240:	8f 93       	push	r24
    4242:	9f 93       	push	r25
    4244:	af 93       	push	r26
    4246:	bf 93       	push	r27
}

static inline uint16_t counter_read(void)
{
	return TCNT1;
    4248:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    424c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
    4250:	b0 9b       	sbis	0x16, 0	; 22
    4252:	0b c0       	rjmp	.+22     	; 0x426a <__vector_7+0x44>
	return TIFR1 & (1<<TOV1);
}

static inline void counter_overflow_reset(void)
{
	TIFR1 = (1<<TOV1);
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	86 bb       	out	0x16, r24	; 22
		counter_overflow_reset();
		count_msw++;
    4258:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL9count_msw>
    425c:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <_ZL9count_msw+0x1>
    4260:	01 96       	adiw	r24, 0x01	; 1
    4262:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <_ZL9count_msw+0x1>
    4266:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_ZL9count_msw>
	}
	index = gate_index + 1;
    426a:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <_ZL10gate_index>
    426e:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <_ZL10gate_index+0x1>
    4272:	01 96       	adiw	r24, 0x01	; 1
	length = gate_length;
	if (index >= length) {
    4274:	40 91 a2 04 	lds	r20, 0x04A2	; 0x8004a2 <_ZL11gate_length>
    4278:	50 91 a3 04 	lds	r21, 0x04A3	; 0x8004a3 <_ZL11gate_length+0x1>
    427c:	84 17       	cp	r24, r20
    427e:	95 07       	cpc	r25, r21
    4280:	98 f1       	brcs	.+102    	; 0x42e8 <__vector_7+0xc2>
		gate_index = 0;
    4282:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL10gate_index+0x1>
    4286:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <_ZL10gate_index>
		count = ((uint32_t)count_msw << 16) + count_lsw;
    428a:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL9count_msw>
    428e:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <_ZL9count_msw+0x1>
    4292:	a0 e0       	ldi	r26, 0x00	; 0
    4294:	b0 e0       	ldi	r27, 0x00	; 0
    4296:	dc 01       	movw	r26, r24
    4298:	99 27       	eor	r25, r25
    429a:	88 27       	eor	r24, r24
    429c:	82 0f       	add	r24, r18
    429e:	93 1f       	adc	r25, r19
    42a0:	a1 1d       	adc	r26, r1
    42a2:	b1 1d       	adc	r27, r1
		count_output = count - count_prev;
    42a4:	40 91 a9 04 	lds	r20, 0x04A9	; 0x8004a9 <_ZL10count_prev>
    42a8:	50 91 aa 04 	lds	r21, 0x04AA	; 0x8004aa <_ZL10count_prev+0x1>
    42ac:	60 91 ab 04 	lds	r22, 0x04AB	; 0x8004ab <_ZL10count_prev+0x2>
    42b0:	70 91 ac 04 	lds	r23, 0x04AC	; 0x8004ac <_ZL10count_prev+0x3>
    42b4:	8c 01       	movw	r16, r24
    42b6:	9d 01       	movw	r18, r26
    42b8:	04 1b       	sub	r16, r20
    42ba:	15 0b       	sbc	r17, r21
    42bc:	26 0b       	sbc	r18, r22
    42be:	37 0b       	sbc	r19, r23
    42c0:	00 93 a5 04 	sts	0x04A5, r16	; 0x8004a5 <_ZL12count_output>
    42c4:	10 93 a6 04 	sts	0x04A6, r17	; 0x8004a6 <_ZL12count_output+0x1>
    42c8:	20 93 a7 04 	sts	0x04A7, r18	; 0x8004a7 <_ZL12count_output+0x2>
    42cc:	30 93 a8 04 	sts	0x04A8, r19	; 0x8004a8 <_ZL12count_output+0x3>
		count_prev = count;
    42d0:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZL10count_prev>
    42d4:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <_ZL10count_prev+0x1>
    42d8:	a0 93 ab 04 	sts	0x04AB, r26	; 0x8004ab <_ZL10count_prev+0x2>
    42dc:	b0 93 ac 04 	sts	0x04AC, r27	; 0x8004ac <_ZL10count_prev+0x3>
		count_ready = 1;
    42e0:	81 e0       	ldi	r24, 0x01	; 1
    42e2:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_ZL11count_ready>
    42e6:	04 c0       	rjmp	.+8      	; 0x42f0 <__vector_7+0xca>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
    42e8:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <_ZL10gate_index+0x1>
    42ec:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <_ZL10gate_index>
	}
}
    42f0:	bf 91       	pop	r27
    42f2:	af 91       	pop	r26
    42f4:	9f 91       	pop	r25
    42f6:	8f 91       	pop	r24
    42f8:	7f 91       	pop	r23
    42fa:	6f 91       	pop	r22
    42fc:	5f 91       	pop	r21
    42fe:	4f 91       	pop	r20
    4300:	3f 91       	pop	r19
    4302:	2f 91       	pop	r18
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	0f 90       	pop	r0
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	0f 90       	pop	r0
    430e:	1f 90       	pop	r1
    4310:	18 95       	reti

00004312 <__fixunssfsi>:
    4312:	0e 94 ae 0a 	call	0x155c	; 0x155c <__fp_splitA>
    4316:	88 f0       	brcs	.+34     	; 0x433a <__fixunssfsi+0x28>
    4318:	9f 57       	subi	r25, 0x7F	; 127
    431a:	98 f0       	brcs	.+38     	; 0x4342 <__fixunssfsi+0x30>
    431c:	b9 2f       	mov	r27, r25
    431e:	99 27       	eor	r25, r25
    4320:	b7 51       	subi	r27, 0x17	; 23
    4322:	b0 f0       	brcs	.+44     	; 0x4350 <__fixunssfsi+0x3e>
    4324:	e1 f0       	breq	.+56     	; 0x435e <__fixunssfsi+0x4c>
    4326:	66 0f       	add	r22, r22
    4328:	77 1f       	adc	r23, r23
    432a:	88 1f       	adc	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	1a f0       	brmi	.+6      	; 0x4336 <__fixunssfsi+0x24>
    4330:	ba 95       	dec	r27
    4332:	c9 f7       	brne	.-14     	; 0x4326 <__fixunssfsi+0x14>
    4334:	14 c0       	rjmp	.+40     	; 0x435e <__fixunssfsi+0x4c>
    4336:	b1 30       	cpi	r27, 0x01	; 1
    4338:	91 f0       	breq	.+36     	; 0x435e <__fixunssfsi+0x4c>
    433a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__fp_zero>
    433e:	b1 e0       	ldi	r27, 0x01	; 1
    4340:	08 95       	ret
    4342:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_zero>
    4346:	67 2f       	mov	r22, r23
    4348:	78 2f       	mov	r23, r24
    434a:	88 27       	eor	r24, r24
    434c:	b8 5f       	subi	r27, 0xF8	; 248
    434e:	39 f0       	breq	.+14     	; 0x435e <__fixunssfsi+0x4c>
    4350:	b9 3f       	cpi	r27, 0xF9	; 249
    4352:	cc f3       	brlt	.-14     	; 0x4346 <__fixunssfsi+0x34>
    4354:	86 95       	lsr	r24
    4356:	77 95       	ror	r23
    4358:	67 95       	ror	r22
    435a:	b3 95       	inc	r27
    435c:	d9 f7       	brne	.-10     	; 0x4354 <__fixunssfsi+0x42>
    435e:	3e f4       	brtc	.+14     	; 0x436e <__fixunssfsi+0x5c>
    4360:	90 95       	com	r25
    4362:	80 95       	com	r24
    4364:	70 95       	com	r23
    4366:	61 95       	neg	r22
    4368:	7f 4f       	sbci	r23, 0xFF	; 255
    436a:	8f 4f       	sbci	r24, 0xFF	; 255
    436c:	9f 4f       	sbci	r25, 0xFF	; 255
    436e:	08 95       	ret

00004370 <__unordsf2>:
    4370:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fp_cmp>
    4374:	88 0b       	sbc	r24, r24
    4376:	99 0b       	sbc	r25, r25
    4378:	08 95       	ret

0000437a <__divmodhi4>:
    437a:	97 fb       	bst	r25, 7
    437c:	07 2e       	mov	r0, r23
    437e:	16 f4       	brtc	.+4      	; 0x4384 <__divmodhi4+0xa>
    4380:	00 94       	com	r0
    4382:	07 d0       	rcall	.+14     	; 0x4392 <__divmodhi4_neg1>
    4384:	77 fd       	sbrc	r23, 7
    4386:	09 d0       	rcall	.+18     	; 0x439a <__divmodhi4_neg2>
    4388:	0e 94 23 22 	call	0x4446	; 0x4446 <__udivmodhi4>
    438c:	07 fc       	sbrc	r0, 7
    438e:	05 d0       	rcall	.+10     	; 0x439a <__divmodhi4_neg2>
    4390:	3e f4       	brtc	.+14     	; 0x43a0 <__divmodhi4_exit>

00004392 <__divmodhi4_neg1>:
    4392:	90 95       	com	r25
    4394:	81 95       	neg	r24
    4396:	9f 4f       	sbci	r25, 0xFF	; 255
    4398:	08 95       	ret

0000439a <__divmodhi4_neg2>:
    439a:	70 95       	com	r23
    439c:	61 95       	neg	r22
    439e:	7f 4f       	sbci	r23, 0xFF	; 255

000043a0 <__divmodhi4_exit>:
    43a0:	08 95       	ret

000043a2 <__udivmodsi4>:
    43a2:	a1 e2       	ldi	r26, 0x21	; 33
    43a4:	1a 2e       	mov	r1, r26
    43a6:	aa 1b       	sub	r26, r26
    43a8:	bb 1b       	sub	r27, r27
    43aa:	fd 01       	movw	r30, r26
    43ac:	0d c0       	rjmp	.+26     	; 0x43c8 <__udivmodsi4_ep>

000043ae <__udivmodsi4_loop>:
    43ae:	aa 1f       	adc	r26, r26
    43b0:	bb 1f       	adc	r27, r27
    43b2:	ee 1f       	adc	r30, r30
    43b4:	ff 1f       	adc	r31, r31
    43b6:	a2 17       	cp	r26, r18
    43b8:	b3 07       	cpc	r27, r19
    43ba:	e4 07       	cpc	r30, r20
    43bc:	f5 07       	cpc	r31, r21
    43be:	20 f0       	brcs	.+8      	; 0x43c8 <__udivmodsi4_ep>
    43c0:	a2 1b       	sub	r26, r18
    43c2:	b3 0b       	sbc	r27, r19
    43c4:	e4 0b       	sbc	r30, r20
    43c6:	f5 0b       	sbc	r31, r21

000043c8 <__udivmodsi4_ep>:
    43c8:	66 1f       	adc	r22, r22
    43ca:	77 1f       	adc	r23, r23
    43cc:	88 1f       	adc	r24, r24
    43ce:	99 1f       	adc	r25, r25
    43d0:	1a 94       	dec	r1
    43d2:	69 f7       	brne	.-38     	; 0x43ae <__udivmodsi4_loop>
    43d4:	60 95       	com	r22
    43d6:	70 95       	com	r23
    43d8:	80 95       	com	r24
    43da:	90 95       	com	r25
    43dc:	9b 01       	movw	r18, r22
    43de:	ac 01       	movw	r20, r24
    43e0:	bd 01       	movw	r22, r26
    43e2:	cf 01       	movw	r24, r30
    43e4:	08 95       	ret

000043e6 <__divmodsi4>:
    43e6:	05 2e       	mov	r0, r21
    43e8:	97 fb       	bst	r25, 7
    43ea:	1e f4       	brtc	.+6      	; 0x43f2 <__divmodsi4+0xc>
    43ec:	00 94       	com	r0
    43ee:	0e 94 0a 22 	call	0x4414	; 0x4414 <__negsi2>
    43f2:	57 fd       	sbrc	r21, 7
    43f4:	07 d0       	rcall	.+14     	; 0x4404 <__divmodsi4_neg2>
    43f6:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <__udivmodsi4>
    43fa:	07 fc       	sbrc	r0, 7
    43fc:	03 d0       	rcall	.+6      	; 0x4404 <__divmodsi4_neg2>
    43fe:	4e f4       	brtc	.+18     	; 0x4412 <__divmodsi4_exit>
    4400:	0c 94 0a 22 	jmp	0x4414	; 0x4414 <__negsi2>

00004404 <__divmodsi4_neg2>:
    4404:	50 95       	com	r21
    4406:	40 95       	com	r20
    4408:	30 95       	com	r19
    440a:	21 95       	neg	r18
    440c:	3f 4f       	sbci	r19, 0xFF	; 255
    440e:	4f 4f       	sbci	r20, 0xFF	; 255
    4410:	5f 4f       	sbci	r21, 0xFF	; 255

00004412 <__divmodsi4_exit>:
    4412:	08 95       	ret

00004414 <__negsi2>:
    4414:	90 95       	com	r25
    4416:	80 95       	com	r24
    4418:	70 95       	com	r23
    441a:	61 95       	neg	r22
    441c:	7f 4f       	sbci	r23, 0xFF	; 255
    441e:	8f 4f       	sbci	r24, 0xFF	; 255
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	08 95       	ret

00004424 <__tablejump2__>:
    4424:	ee 0f       	add	r30, r30
    4426:	ff 1f       	adc	r31, r31
    4428:	05 90       	lpm	r0, Z+
    442a:	f4 91       	lpm	r31, Z
    442c:	e0 2d       	mov	r30, r0
    442e:	09 94       	ijmp

00004430 <__muluhisi3>:
    4430:	0e 94 37 22 	call	0x446e	; 0x446e <__umulhisi3>
    4434:	a5 9f       	mul	r26, r21
    4436:	90 0d       	add	r25, r0
    4438:	b4 9f       	mul	r27, r20
    443a:	90 0d       	add	r25, r0
    443c:	a4 9f       	mul	r26, r20
    443e:	80 0d       	add	r24, r0
    4440:	91 1d       	adc	r25, r1
    4442:	11 24       	eor	r1, r1
    4444:	08 95       	ret

00004446 <__udivmodhi4>:
    4446:	aa 1b       	sub	r26, r26
    4448:	bb 1b       	sub	r27, r27
    444a:	51 e1       	ldi	r21, 0x11	; 17
    444c:	07 c0       	rjmp	.+14     	; 0x445c <__udivmodhi4_ep>

0000444e <__udivmodhi4_loop>:
    444e:	aa 1f       	adc	r26, r26
    4450:	bb 1f       	adc	r27, r27
    4452:	a6 17       	cp	r26, r22
    4454:	b7 07       	cpc	r27, r23
    4456:	10 f0       	brcs	.+4      	; 0x445c <__udivmodhi4_ep>
    4458:	a6 1b       	sub	r26, r22
    445a:	b7 0b       	sbc	r27, r23

0000445c <__udivmodhi4_ep>:
    445c:	88 1f       	adc	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	5a 95       	dec	r21
    4462:	a9 f7       	brne	.-22     	; 0x444e <__udivmodhi4_loop>
    4464:	80 95       	com	r24
    4466:	90 95       	com	r25
    4468:	bc 01       	movw	r22, r24
    446a:	cd 01       	movw	r24, r26
    446c:	08 95       	ret

0000446e <__umulhisi3>:
    446e:	a2 9f       	mul	r26, r18
    4470:	b0 01       	movw	r22, r0
    4472:	b3 9f       	mul	r27, r19
    4474:	c0 01       	movw	r24, r0
    4476:	a3 9f       	mul	r26, r19
    4478:	70 0d       	add	r23, r0
    447a:	81 1d       	adc	r24, r1
    447c:	11 24       	eor	r1, r1
    447e:	91 1d       	adc	r25, r1
    4480:	b2 9f       	mul	r27, r18
    4482:	70 0d       	add	r23, r0
    4484:	81 1d       	adc	r24, r1
    4486:	11 24       	eor	r1, r1
    4488:	91 1d       	adc	r25, r1
    448a:	08 95       	ret

0000448c <malloc>:
    448c:	0f 93       	push	r16
    448e:	1f 93       	push	r17
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	82 30       	cpi	r24, 0x02	; 2
    4496:	91 05       	cpc	r25, r1
    4498:	10 f4       	brcc	.+4      	; 0x449e <malloc+0x12>
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	e0 91 b6 04 	lds	r30, 0x04B6	; 0x8004b6 <__flp>
    44a2:	f0 91 b7 04 	lds	r31, 0x04B7	; 0x8004b7 <__flp+0x1>
    44a6:	20 e0       	ldi	r18, 0x00	; 0
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	a0 e0       	ldi	r26, 0x00	; 0
    44ac:	b0 e0       	ldi	r27, 0x00	; 0
    44ae:	30 97       	sbiw	r30, 0x00	; 0
    44b0:	19 f1       	breq	.+70     	; 0x44f8 <malloc+0x6c>
    44b2:	40 81       	ld	r20, Z
    44b4:	51 81       	ldd	r21, Z+1	; 0x01
    44b6:	02 81       	ldd	r16, Z+2	; 0x02
    44b8:	13 81       	ldd	r17, Z+3	; 0x03
    44ba:	48 17       	cp	r20, r24
    44bc:	59 07       	cpc	r21, r25
    44be:	c8 f0       	brcs	.+50     	; 0x44f2 <malloc+0x66>
    44c0:	84 17       	cp	r24, r20
    44c2:	95 07       	cpc	r25, r21
    44c4:	69 f4       	brne	.+26     	; 0x44e0 <malloc+0x54>
    44c6:	10 97       	sbiw	r26, 0x00	; 0
    44c8:	31 f0       	breq	.+12     	; 0x44d6 <malloc+0x4a>
    44ca:	12 96       	adiw	r26, 0x02	; 2
    44cc:	0c 93       	st	X, r16
    44ce:	12 97       	sbiw	r26, 0x02	; 2
    44d0:	13 96       	adiw	r26, 0x03	; 3
    44d2:	1c 93       	st	X, r17
    44d4:	27 c0       	rjmp	.+78     	; 0x4524 <malloc+0x98>
    44d6:	00 93 b6 04 	sts	0x04B6, r16	; 0x8004b6 <__flp>
    44da:	10 93 b7 04 	sts	0x04B7, r17	; 0x8004b7 <__flp+0x1>
    44de:	22 c0       	rjmp	.+68     	; 0x4524 <malloc+0x98>
    44e0:	21 15       	cp	r18, r1
    44e2:	31 05       	cpc	r19, r1
    44e4:	19 f0       	breq	.+6      	; 0x44ec <malloc+0x60>
    44e6:	42 17       	cp	r20, r18
    44e8:	53 07       	cpc	r21, r19
    44ea:	18 f4       	brcc	.+6      	; 0x44f2 <malloc+0x66>
    44ec:	9a 01       	movw	r18, r20
    44ee:	bd 01       	movw	r22, r26
    44f0:	ef 01       	movw	r28, r30
    44f2:	df 01       	movw	r26, r30
    44f4:	f8 01       	movw	r30, r16
    44f6:	db cf       	rjmp	.-74     	; 0x44ae <malloc+0x22>
    44f8:	21 15       	cp	r18, r1
    44fa:	31 05       	cpc	r19, r1
    44fc:	f9 f0       	breq	.+62     	; 0x453c <malloc+0xb0>
    44fe:	28 1b       	sub	r18, r24
    4500:	39 0b       	sbc	r19, r25
    4502:	24 30       	cpi	r18, 0x04	; 4
    4504:	31 05       	cpc	r19, r1
    4506:	80 f4       	brcc	.+32     	; 0x4528 <malloc+0x9c>
    4508:	8a 81       	ldd	r24, Y+2	; 0x02
    450a:	9b 81       	ldd	r25, Y+3	; 0x03
    450c:	61 15       	cp	r22, r1
    450e:	71 05       	cpc	r23, r1
    4510:	21 f0       	breq	.+8      	; 0x451a <malloc+0x8e>
    4512:	fb 01       	movw	r30, r22
    4514:	93 83       	std	Z+3, r25	; 0x03
    4516:	82 83       	std	Z+2, r24	; 0x02
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <malloc+0x96>
    451a:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <__flp+0x1>
    451e:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <__flp>
    4522:	fe 01       	movw	r30, r28
    4524:	32 96       	adiw	r30, 0x02	; 2
    4526:	44 c0       	rjmp	.+136    	; 0x45b0 <malloc+0x124>
    4528:	fe 01       	movw	r30, r28
    452a:	e2 0f       	add	r30, r18
    452c:	f3 1f       	adc	r31, r19
    452e:	81 93       	st	Z+, r24
    4530:	91 93       	st	Z+, r25
    4532:	22 50       	subi	r18, 0x02	; 2
    4534:	31 09       	sbc	r19, r1
    4536:	39 83       	std	Y+1, r19	; 0x01
    4538:	28 83       	st	Y, r18
    453a:	3a c0       	rjmp	.+116    	; 0x45b0 <malloc+0x124>
    453c:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <__brkval>
    4540:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <__brkval+0x1>
    4544:	23 2b       	or	r18, r19
    4546:	41 f4       	brne	.+16     	; 0x4558 <malloc+0xcc>
    4548:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    454c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4550:	30 93 b5 04 	sts	0x04B5, r19	; 0x8004b5 <__brkval+0x1>
    4554:	20 93 b4 04 	sts	0x04B4, r18	; 0x8004b4 <__brkval>
    4558:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    455c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4560:	21 15       	cp	r18, r1
    4562:	31 05       	cpc	r19, r1
    4564:	41 f4       	brne	.+16     	; 0x4576 <malloc+0xea>
    4566:	2d b7       	in	r18, 0x3d	; 61
    4568:	3e b7       	in	r19, 0x3e	; 62
    456a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    456e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4572:	24 1b       	sub	r18, r20
    4574:	35 0b       	sbc	r19, r21
    4576:	e0 91 b4 04 	lds	r30, 0x04B4	; 0x8004b4 <__brkval>
    457a:	f0 91 b5 04 	lds	r31, 0x04B5	; 0x8004b5 <__brkval+0x1>
    457e:	e2 17       	cp	r30, r18
    4580:	f3 07       	cpc	r31, r19
    4582:	a0 f4       	brcc	.+40     	; 0x45ac <malloc+0x120>
    4584:	2e 1b       	sub	r18, r30
    4586:	3f 0b       	sbc	r19, r31
    4588:	28 17       	cp	r18, r24
    458a:	39 07       	cpc	r19, r25
    458c:	78 f0       	brcs	.+30     	; 0x45ac <malloc+0x120>
    458e:	ac 01       	movw	r20, r24
    4590:	4e 5f       	subi	r20, 0xFE	; 254
    4592:	5f 4f       	sbci	r21, 0xFF	; 255
    4594:	24 17       	cp	r18, r20
    4596:	35 07       	cpc	r19, r21
    4598:	48 f0       	brcs	.+18     	; 0x45ac <malloc+0x120>
    459a:	4e 0f       	add	r20, r30
    459c:	5f 1f       	adc	r21, r31
    459e:	50 93 b5 04 	sts	0x04B5, r21	; 0x8004b5 <__brkval+0x1>
    45a2:	40 93 b4 04 	sts	0x04B4, r20	; 0x8004b4 <__brkval>
    45a6:	81 93       	st	Z+, r24
    45a8:	91 93       	st	Z+, r25
    45aa:	02 c0       	rjmp	.+4      	; 0x45b0 <malloc+0x124>
    45ac:	e0 e0       	ldi	r30, 0x00	; 0
    45ae:	f0 e0       	ldi	r31, 0x00	; 0
    45b0:	cf 01       	movw	r24, r30
    45b2:	df 91       	pop	r29
    45b4:	cf 91       	pop	r28
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	08 95       	ret

000045bc <free>:
    45bc:	cf 93       	push	r28
    45be:	df 93       	push	r29
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	09 f4       	brne	.+2      	; 0x45c6 <free+0xa>
    45c4:	81 c0       	rjmp	.+258    	; 0x46c8 <free+0x10c>
    45c6:	fc 01       	movw	r30, r24
    45c8:	32 97       	sbiw	r30, 0x02	; 2
    45ca:	13 82       	std	Z+3, r1	; 0x03
    45cc:	12 82       	std	Z+2, r1	; 0x02
    45ce:	a0 91 b6 04 	lds	r26, 0x04B6	; 0x8004b6 <__flp>
    45d2:	b0 91 b7 04 	lds	r27, 0x04B7	; 0x8004b7 <__flp+0x1>
    45d6:	10 97       	sbiw	r26, 0x00	; 0
    45d8:	81 f4       	brne	.+32     	; 0x45fa <free+0x3e>
    45da:	20 81       	ld	r18, Z
    45dc:	31 81       	ldd	r19, Z+1	; 0x01
    45de:	82 0f       	add	r24, r18
    45e0:	93 1f       	adc	r25, r19
    45e2:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <__brkval>
    45e6:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <__brkval+0x1>
    45ea:	28 17       	cp	r18, r24
    45ec:	39 07       	cpc	r19, r25
    45ee:	51 f5       	brne	.+84     	; 0x4644 <free+0x88>
    45f0:	f0 93 b5 04 	sts	0x04B5, r31	; 0x8004b5 <__brkval+0x1>
    45f4:	e0 93 b4 04 	sts	0x04B4, r30	; 0x8004b4 <__brkval>
    45f8:	67 c0       	rjmp	.+206    	; 0x46c8 <free+0x10c>
    45fa:	ed 01       	movw	r28, r26
    45fc:	20 e0       	ldi	r18, 0x00	; 0
    45fe:	30 e0       	ldi	r19, 0x00	; 0
    4600:	ce 17       	cp	r28, r30
    4602:	df 07       	cpc	r29, r31
    4604:	40 f4       	brcc	.+16     	; 0x4616 <free+0x5a>
    4606:	4a 81       	ldd	r20, Y+2	; 0x02
    4608:	5b 81       	ldd	r21, Y+3	; 0x03
    460a:	9e 01       	movw	r18, r28
    460c:	41 15       	cp	r20, r1
    460e:	51 05       	cpc	r21, r1
    4610:	f1 f0       	breq	.+60     	; 0x464e <free+0x92>
    4612:	ea 01       	movw	r28, r20
    4614:	f5 cf       	rjmp	.-22     	; 0x4600 <free+0x44>
    4616:	d3 83       	std	Z+3, r29	; 0x03
    4618:	c2 83       	std	Z+2, r28	; 0x02
    461a:	40 81       	ld	r20, Z
    461c:	51 81       	ldd	r21, Z+1	; 0x01
    461e:	84 0f       	add	r24, r20
    4620:	95 1f       	adc	r25, r21
    4622:	c8 17       	cp	r28, r24
    4624:	d9 07       	cpc	r29, r25
    4626:	59 f4       	brne	.+22     	; 0x463e <free+0x82>
    4628:	88 81       	ld	r24, Y
    462a:	99 81       	ldd	r25, Y+1	; 0x01
    462c:	84 0f       	add	r24, r20
    462e:	95 1f       	adc	r25, r21
    4630:	02 96       	adiw	r24, 0x02	; 2
    4632:	91 83       	std	Z+1, r25	; 0x01
    4634:	80 83       	st	Z, r24
    4636:	8a 81       	ldd	r24, Y+2	; 0x02
    4638:	9b 81       	ldd	r25, Y+3	; 0x03
    463a:	93 83       	std	Z+3, r25	; 0x03
    463c:	82 83       	std	Z+2, r24	; 0x02
    463e:	21 15       	cp	r18, r1
    4640:	31 05       	cpc	r19, r1
    4642:	29 f4       	brne	.+10     	; 0x464e <free+0x92>
    4644:	f0 93 b7 04 	sts	0x04B7, r31	; 0x8004b7 <__flp+0x1>
    4648:	e0 93 b6 04 	sts	0x04B6, r30	; 0x8004b6 <__flp>
    464c:	3d c0       	rjmp	.+122    	; 0x46c8 <free+0x10c>
    464e:	e9 01       	movw	r28, r18
    4650:	fb 83       	std	Y+3, r31	; 0x03
    4652:	ea 83       	std	Y+2, r30	; 0x02
    4654:	49 91       	ld	r20, Y+
    4656:	59 91       	ld	r21, Y+
    4658:	c4 0f       	add	r28, r20
    465a:	d5 1f       	adc	r29, r21
    465c:	ec 17       	cp	r30, r28
    465e:	fd 07       	cpc	r31, r29
    4660:	61 f4       	brne	.+24     	; 0x467a <free+0xbe>
    4662:	80 81       	ld	r24, Z
    4664:	91 81       	ldd	r25, Z+1	; 0x01
    4666:	84 0f       	add	r24, r20
    4668:	95 1f       	adc	r25, r21
    466a:	02 96       	adiw	r24, 0x02	; 2
    466c:	e9 01       	movw	r28, r18
    466e:	99 83       	std	Y+1, r25	; 0x01
    4670:	88 83       	st	Y, r24
    4672:	82 81       	ldd	r24, Z+2	; 0x02
    4674:	93 81       	ldd	r25, Z+3	; 0x03
    4676:	9b 83       	std	Y+3, r25	; 0x03
    4678:	8a 83       	std	Y+2, r24	; 0x02
    467a:	e0 e0       	ldi	r30, 0x00	; 0
    467c:	f0 e0       	ldi	r31, 0x00	; 0
    467e:	12 96       	adiw	r26, 0x02	; 2
    4680:	8d 91       	ld	r24, X+
    4682:	9c 91       	ld	r25, X
    4684:	13 97       	sbiw	r26, 0x03	; 3
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	19 f0       	breq	.+6      	; 0x4690 <free+0xd4>
    468a:	fd 01       	movw	r30, r26
    468c:	dc 01       	movw	r26, r24
    468e:	f7 cf       	rjmp	.-18     	; 0x467e <free+0xc2>
    4690:	8d 91       	ld	r24, X+
    4692:	9c 91       	ld	r25, X
    4694:	11 97       	sbiw	r26, 0x01	; 1
    4696:	9d 01       	movw	r18, r26
    4698:	2e 5f       	subi	r18, 0xFE	; 254
    469a:	3f 4f       	sbci	r19, 0xFF	; 255
    469c:	82 0f       	add	r24, r18
    469e:	93 1f       	adc	r25, r19
    46a0:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <__brkval>
    46a4:	30 91 b5 04 	lds	r19, 0x04B5	; 0x8004b5 <__brkval+0x1>
    46a8:	28 17       	cp	r18, r24
    46aa:	39 07       	cpc	r19, r25
    46ac:	69 f4       	brne	.+26     	; 0x46c8 <free+0x10c>
    46ae:	30 97       	sbiw	r30, 0x00	; 0
    46b0:	29 f4       	brne	.+10     	; 0x46bc <free+0x100>
    46b2:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <__flp+0x1>
    46b6:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <__flp>
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <free+0x104>
    46bc:	13 82       	std	Z+3, r1	; 0x03
    46be:	12 82       	std	Z+2, r1	; 0x02
    46c0:	b0 93 b5 04 	sts	0x04B5, r27	; 0x8004b5 <__brkval+0x1>
    46c4:	a0 93 b4 04 	sts	0x04B4, r26	; 0x8004b4 <__brkval>
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	08 95       	ret

000046ce <memcpy>:
    46ce:	fb 01       	movw	r30, r22
    46d0:	dc 01       	movw	r26, r24
    46d2:	02 c0       	rjmp	.+4      	; 0x46d8 <memcpy+0xa>
    46d4:	01 90       	ld	r0, Z+
    46d6:	0d 92       	st	X+, r0
    46d8:	41 50       	subi	r20, 0x01	; 1
    46da:	50 40       	sbci	r21, 0x00	; 0
    46dc:	d8 f7       	brcc	.-10     	; 0x46d4 <memcpy+0x6>
    46de:	08 95       	ret

000046e0 <memset>:
    46e0:	dc 01       	movw	r26, r24
    46e2:	01 c0       	rjmp	.+2      	; 0x46e6 <memset+0x6>
    46e4:	6d 93       	st	X+, r22
    46e6:	41 50       	subi	r20, 0x01	; 1
    46e8:	50 40       	sbci	r21, 0x00	; 0
    46ea:	e0 f7       	brcc	.-8      	; 0x46e4 <memset+0x4>
    46ec:	08 95       	ret

000046ee <eeprom_read_byte>:
    46ee:	f9 99       	sbic	0x1f, 1	; 31
    46f0:	fe cf       	rjmp	.-4      	; 0x46ee <eeprom_read_byte>
    46f2:	92 bd       	out	0x22, r25	; 34
    46f4:	81 bd       	out	0x21, r24	; 33
    46f6:	f8 9a       	sbi	0x1f, 0	; 31
    46f8:	99 27       	eor	r25, r25
    46fa:	80 b5       	in	r24, 0x20	; 32
    46fc:	08 95       	ret

000046fe <eeprom_write_byte>:
    46fe:	26 2f       	mov	r18, r22

00004700 <eeprom_write_r18>:
    4700:	f9 99       	sbic	0x1f, 1	; 31
    4702:	fe cf       	rjmp	.-4      	; 0x4700 <eeprom_write_r18>
    4704:	1f ba       	out	0x1f, r1	; 31
    4706:	92 bd       	out	0x22, r25	; 34
    4708:	81 bd       	out	0x21, r24	; 33
    470a:	20 bd       	out	0x20, r18	; 32
    470c:	0f b6       	in	r0, 0x3f	; 63
    470e:	f8 94       	cli
    4710:	fa 9a       	sbi	0x1f, 2	; 31
    4712:	f9 9a       	sbi	0x1f, 1	; 31
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	01 96       	adiw	r24, 0x01	; 1
    4718:	08 95       	ret

0000471a <__do_global_dtors>:
    471a:	10 e0       	ldi	r17, 0x00	; 0
    471c:	c8 e8       	ldi	r28, 0x88	; 136
    471e:	d0 e0       	ldi	r29, 0x00	; 0
    4720:	04 c0       	rjmp	.+8      	; 0x472a <__do_global_dtors+0x10>
    4722:	fe 01       	movw	r30, r28
    4724:	0e 94 12 22 	call	0x4424	; 0x4424 <__tablejump2__>
    4728:	21 96       	adiw	r28, 0x01	; 1
    472a:	c9 38       	cpi	r28, 0x89	; 137
    472c:	d1 07       	cpc	r29, r17
    472e:	c9 f7       	brne	.-14     	; 0x4722 <__do_global_dtors+0x8>
    4730:	f8 94       	cli

00004732 <__stop_program>:
    4732:	ff cf       	rjmp	.-2      	; 0x4732 <__stop_program>
