
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000120  00800100  00003aca  00003b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c0  00800220  00800220  00003c7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009b8  00000000  00000000  00003cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013ba9  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ec6  00000000  00000000  00018251  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006956  00000000  00000000  0001c117  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d2c  00000000  00000000  00022a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a92  00000000  00000000  0002479c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b248  00000000  00000000  0002922e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  00034476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__dtors_end>
       4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
       c:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_3>
      10:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_3>
      14:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__vector_3>
      18:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_6>
      1c:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__vector_7>
      20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      40:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__vector_16>
      44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      48:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__vector_18>
      4c:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_19>
      50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
      68:	9a 10       	cpse	r9, r10
      6a:	9a 10       	cpse	r9, r10
      6c:	9a 10       	cpse	r9, r10
      6e:	d9 10       	cpse	r13, r9
      70:	c4 10       	cpse	r12, r4
      72:	d3 10       	cpse	r13, r3
      74:	9a 10       	cpse	r9, r10
      76:	9a 10       	cpse	r9, r10
      78:	d9 10       	cpse	r13, r9
      7a:	c4 10       	cpse	r12, r4

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a2:	00 00 00 00                                         ....

000000a6 <digital_pin_to_bit_mask_PGM>:
      a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b6:	04 08 10 20                                         ... 

000000ba <digital_pin_to_port_PGM>:
      ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ca:	03 03 03 03                                         ....

000000ce <port_to_input_PGM>:
      ce:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d8 <port_to_output_PGM>:
      d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e2 <port_to_mode_PGM>:
      e2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ec <__ctors_start>:
      ec:	29 04       	cpc	r2, r9
      ee:	34 04       	cpc	r3, r4
      f0:	8e 05       	cpc	r24, r14
      f2:	47 17       	cp	r20, r23

000000f4 <__ctors_end>:
      f4:	30 04       	cpc	r3, r0
      f6:	95 05       	cpc	r25, r5

000000f8 <__dtors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	d8 e0       	ldi	r29, 0x08	; 8
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	ea ec       	ldi	r30, 0xCA	; 202
     10c:	fa e3       	ldi	r31, 0x3A	; 58
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 32       	cpi	r26, 0x20	; 32
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	24 e0       	ldi	r18, 0x04	; 4
     11c:	a0 e2       	ldi	r26, 0x20	; 32
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a0 3e       	cpi	r26, 0xE0	; 224
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>

0000012a <__do_global_ctors>:
     12a:	10 e0       	ldi	r17, 0x00	; 0
     12c:	ca e7       	ldi	r28, 0x7A	; 122
     12e:	d0 e0       	ldi	r29, 0x00	; 0
     130:	04 c0       	rjmp	.+8      	; 0x13a <__do_global_ctors+0x10>
     132:	21 97       	sbiw	r28, 0x01	; 1
     134:	fe 01       	movw	r30, r28
     136:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__tablejump2__>
     13a:	c6 37       	cpi	r28, 0x76	; 118
     13c:	d1 07       	cpc	r29, r17
     13e:	c9 f7       	brne	.-14     	; 0x132 <__do_global_ctors+0x8>
     140:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <main>
     144:	0c 94 58 1d 	jmp	0x3ab0	; 0x3ab0 <__do_global_dtors>

00000148 <__bad_interrupt>:
     148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <_Z7setupCSv>:

MD_TCS230  CS(S2, S3, OE);

// add possible color strip values to specific arrays
void setupCS()
{
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	2a 97       	sbiw	r28, 0x0a	; 10
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
	CS.begin();
     164:	80 e2       	ldi	r24, 0x20	; 32
     166:	92 e0       	ldi	r25, 0x02	; 2
     168:	0e 94 9f 11 	call	0x233e	; 0x233e <_ZN9MD_TCS2305beginEv>
	
	int index = 0;
	Color c;
	c.ppm = 0.0;
	c.p = {64, 62, 90};
     16c:	86 e0       	ldi	r24, 0x06	; 6
     16e:	e3 e3       	ldi	r30, 0x33	; 51
     170:	f1 e0       	ldi	r31, 0x01	; 1
     172:	de 01       	movw	r26, r28
     174:	15 96       	adiw	r26, 0x05	; 5
     176:	01 90       	ld	r0, Z+
     178:	0d 92       	st	X+, r0
     17a:	8a 95       	dec	r24
     17c:	e1 f7       	brne	.-8      	; 0x176 <_Z7setupCSv+0x2a>
	Ammonia[index] = c;
     17e:	19 82       	std	Y+1, r1	; 0x01
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	1b 82       	std	Y+3, r1	; 0x03
     184:	1c 82       	std	Y+4, r1	; 0x04
     186:	8a e0       	ldi	r24, 0x0A	; 10
     188:	fe 01       	movw	r30, r28
     18a:	31 96       	adiw	r30, 0x01	; 1
     18c:	ac ee       	ldi	r26, 0xEC	; 236
     18e:	b2 e0       	ldi	r27, 0x02	; 2
     190:	01 90       	ld	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	8a 95       	dec	r24
     196:	e1 f7       	brne	.-8      	; 0x190 <_Z7setupCSv+0x44>

	c.ppm = 0.0;
	c.p = {74, 77, 120};
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	e9 e3       	ldi	r30, 0x39	; 57
     19c:	f1 e0       	ldi	r31, 0x01	; 1
     19e:	de 01       	movw	r26, r28
     1a0:	15 96       	adiw	r26, 0x05	; 5
     1a2:	01 90       	ld	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	8a 95       	dec	r24
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <_Z7setupCSv+0x56>
	Nitrite[index] = c;
     1aa:	8a e0       	ldi	r24, 0x0A	; 10
     1ac:	fe 01       	movw	r30, r28
     1ae:	31 96       	adiw	r30, 0x01	; 1
     1b0:	a6 ea       	ldi	r26, 0xA6	; 166
     1b2:	b2 e0       	ldi	r27, 0x02	; 2
     1b4:	01 90       	ld	r0, Z+
     1b6:	0d 92       	st	X+, r0
     1b8:	8a 95       	dec	r24
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <_Z7setupCSv+0x68>

	c.ppm = 0.0;
	c.p = {71, 74, 123};
     1bc:	86 e0       	ldi	r24, 0x06	; 6
     1be:	ef e3       	ldi	r30, 0x3F	; 63
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	de 01       	movw	r26, r28
     1c4:	15 96       	adiw	r26, 0x05	; 5
     1c6:	01 90       	ld	r0, Z+
     1c8:	0d 92       	st	X+, r0
     1ca:	8a 95       	dec	r24
     1cc:	e1 f7       	brne	.-8      	; 0x1c6 <_Z7setupCSv+0x7a>
	Nitrate[index] = c;
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	fe 01       	movw	r30, r28
     1d2:	31 96       	adiw	r30, 0x01	; 1
     1d4:	a0 e6       	ldi	r26, 0x60	; 96
     1d6:	b2 e0       	ldi	r27, 0x02	; 2
     1d8:	01 90       	ld	r0, Z+
     1da:	0d 92       	st	X+, r0
     1dc:	8a 95       	dec	r24
     1de:	e1 f7       	brne	.-8      	; 0x1d8 <_Z7setupCSv+0x8c>

	++index;

	c.ppm = 0.5;
	c.p = {61, 62, 91};
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	e5 e4       	ldi	r30, 0x45	; 69
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	de 01       	movw	r26, r28
     1e8:	15 96       	adiw	r26, 0x05	; 5
     1ea:	01 90       	ld	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	8a 95       	dec	r24
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <_Z7setupCSv+0x9e>
	Ammonia[index] = c;
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	7f e3       	ldi	r23, 0x3F	; 63
     1fa:	49 83       	std	Y+1, r20	; 0x01
     1fc:	5a 83       	std	Y+2, r21	; 0x02
     1fe:	6b 83       	std	Y+3, r22	; 0x03
     200:	7c 83       	std	Y+4, r23	; 0x04
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	fe 01       	movw	r30, r28
     206:	31 96       	adiw	r30, 0x01	; 1
     208:	a6 ef       	ldi	r26, 0xF6	; 246
     20a:	b2 e0       	ldi	r27, 0x02	; 2
     20c:	01 90       	ld	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	8a 95       	dec	r24
     212:	e1 f7       	brne	.-8      	; 0x20c <_Z7setupCSv+0xc0>

	c.ppm = 0.15;
	c.p = {71, 74, 123};
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	ef e3       	ldi	r30, 0x3F	; 63
     218:	f1 e0       	ldi	r31, 0x01	; 1
     21a:	de 01       	movw	r26, r28
     21c:	15 96       	adiw	r26, 0x05	; 5
     21e:	01 90       	ld	r0, Z+
     220:	0d 92       	st	X+, r0
     222:	8a 95       	dec	r24
     224:	e1 f7       	brne	.-8      	; 0x21e <_Z7setupCSv+0xd2>
	Nitrite[index] = c;
     226:	8a e9       	ldi	r24, 0x9A	; 154
     228:	99 e9       	ldi	r25, 0x99	; 153
     22a:	a9 e1       	ldi	r26, 0x19	; 25
     22c:	be e3       	ldi	r27, 0x3E	; 62
     22e:	89 83       	std	Y+1, r24	; 0x01
     230:	9a 83       	std	Y+2, r25	; 0x02
     232:	ab 83       	std	Y+3, r26	; 0x03
     234:	bc 83       	std	Y+4, r27	; 0x04
     236:	8a e0       	ldi	r24, 0x0A	; 10
     238:	fe 01       	movw	r30, r28
     23a:	31 96       	adiw	r30, 0x01	; 1
     23c:	a0 eb       	ldi	r26, 0xB0	; 176
     23e:	b2 e0       	ldi	r27, 0x02	; 2
     240:	01 90       	ld	r0, Z+
     242:	0d 92       	st	X+, r0
     244:	8a 95       	dec	r24
     246:	e1 f7       	brne	.-8      	; 0x240 <_Z7setupCSv+0xf4>

	c.ppm = 0.5;
	c.p = {60, 60, 101};
     248:	86 e0       	ldi	r24, 0x06	; 6
     24a:	eb e4       	ldi	r30, 0x4B	; 75
     24c:	f1 e0       	ldi	r31, 0x01	; 1
     24e:	de 01       	movw	r26, r28
     250:	15 96       	adiw	r26, 0x05	; 5
     252:	01 90       	ld	r0, Z+
     254:	0d 92       	st	X+, r0
     256:	8a 95       	dec	r24
     258:	e1 f7       	brne	.-8      	; 0x252 <_Z7setupCSv+0x106>
	Nitrate[index] = c;
     25a:	49 83       	std	Y+1, r20	; 0x01
     25c:	5a 83       	std	Y+2, r21	; 0x02
     25e:	6b 83       	std	Y+3, r22	; 0x03
     260:	7c 83       	std	Y+4, r23	; 0x04
     262:	8a e0       	ldi	r24, 0x0A	; 10
     264:	fe 01       	movw	r30, r28
     266:	31 96       	adiw	r30, 0x01	; 1
     268:	aa e6       	ldi	r26, 0x6A	; 106
     26a:	b2 e0       	ldi	r27, 0x02	; 2
     26c:	01 90       	ld	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	8a 95       	dec	r24
     272:	e1 f7       	brne	.-8      	; 0x26c <_Z7setupCSv+0x120>

	++index;

	c.ppm = 1.0;
	c.p = {50, 63, 90};
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	e1 e5       	ldi	r30, 0x51	; 81
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	de 01       	movw	r26, r28
     27c:	15 96       	adiw	r26, 0x05	; 5
     27e:	01 90       	ld	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	8a 95       	dec	r24
     284:	e1 f7       	brne	.-8      	; 0x27e <_Z7setupCSv+0x132>
	Ammonia[index] = c;
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 e8       	ldi	r22, 0x80	; 128
     28c:	7f e3       	ldi	r23, 0x3F	; 63
     28e:	49 83       	std	Y+1, r20	; 0x01
     290:	5a 83       	std	Y+2, r21	; 0x02
     292:	6b 83       	std	Y+3, r22	; 0x03
     294:	7c 83       	std	Y+4, r23	; 0x04
     296:	8a e0       	ldi	r24, 0x0A	; 10
     298:	fe 01       	movw	r30, r28
     29a:	31 96       	adiw	r30, 0x01	; 1
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	b3 e0       	ldi	r27, 0x03	; 3
     2a0:	01 90       	ld	r0, Z+
     2a2:	0d 92       	st	X+, r0
     2a4:	8a 95       	dec	r24
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <_Z7setupCSv+0x154>

	c.ppm = 0.3;
	c.p = {64, 67, 114};
     2a8:	86 e0       	ldi	r24, 0x06	; 6
     2aa:	e7 e5       	ldi	r30, 0x57	; 87
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
     2ae:	de 01       	movw	r26, r28
     2b0:	15 96       	adiw	r26, 0x05	; 5
     2b2:	01 90       	ld	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	8a 95       	dec	r24
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <_Z7setupCSv+0x166>
	Nitrite[index] = c;
     2ba:	8a e9       	ldi	r24, 0x9A	; 154
     2bc:	99 e9       	ldi	r25, 0x99	; 153
     2be:	a9 e9       	ldi	r26, 0x99	; 153
     2c0:	be e3       	ldi	r27, 0x3E	; 62
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	ab 83       	std	Y+3, r26	; 0x03
     2c8:	bc 83       	std	Y+4, r27	; 0x04
     2ca:	8a e0       	ldi	r24, 0x0A	; 10
     2cc:	fe 01       	movw	r30, r28
     2ce:	31 96       	adiw	r30, 0x01	; 1
     2d0:	aa eb       	ldi	r26, 0xBA	; 186
     2d2:	b2 e0       	ldi	r27, 0x02	; 2
     2d4:	01 90       	ld	r0, Z+
     2d6:	0d 92       	st	X+, r0
     2d8:	8a 95       	dec	r24
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <_Z7setupCSv+0x188>

	c.ppm = 2.0;
	c.p = {68, 65, 114};
     2dc:	86 e0       	ldi	r24, 0x06	; 6
     2de:	ed e5       	ldi	r30, 0x5D	; 93
     2e0:	f1 e0       	ldi	r31, 0x01	; 1
     2e2:	de 01       	movw	r26, r28
     2e4:	15 96       	adiw	r26, 0x05	; 5
     2e6:	01 90       	ld	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	8a 95       	dec	r24
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <_Z7setupCSv+0x19a>
	Nitrate[index] = c;
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b0 e4       	ldi	r27, 0x40	; 64
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	9a 83       	std	Y+2, r25	; 0x02
     2fa:	ab 83       	std	Y+3, r26	; 0x03
     2fc:	bc 83       	std	Y+4, r27	; 0x04
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	fe 01       	movw	r30, r28
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	a4 e7       	ldi	r26, 0x74	; 116
     306:	b2 e0       	ldi	r27, 0x02	; 2
     308:	01 90       	ld	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	8a 95       	dec	r24
     30e:	e1 f7       	brne	.-8      	; 0x308 <_Z7setupCSv+0x1bc>

	++index;

	c.ppm = 3.0;
	c.p = {52, 60, 90};
     310:	86 e0       	ldi	r24, 0x06	; 6
     312:	e3 e6       	ldi	r30, 0x63	; 99
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	de 01       	movw	r26, r28
     318:	15 96       	adiw	r26, 0x05	; 5
     31a:	01 90       	ld	r0, Z+
     31c:	0d 92       	st	X+, r0
     31e:	8a 95       	dec	r24
     320:	e1 f7       	brne	.-8      	; 0x31a <_Z7setupCSv+0x1ce>
	Ammonia[index] = c;
     322:	00 e0       	ldi	r16, 0x00	; 0
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	20 e4       	ldi	r18, 0x40	; 64
     328:	30 e4       	ldi	r19, 0x40	; 64
     32a:	09 83       	std	Y+1, r16	; 0x01
     32c:	1a 83       	std	Y+2, r17	; 0x02
     32e:	2b 83       	std	Y+3, r18	; 0x03
     330:	3c 83       	std	Y+4, r19	; 0x04
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	fe 01       	movw	r30, r28
     336:	31 96       	adiw	r30, 0x01	; 1
     338:	aa e0       	ldi	r26, 0x0A	; 10
     33a:	b3 e0       	ldi	r27, 0x03	; 3
     33c:	01 90       	ld	r0, Z+
     33e:	0d 92       	st	X+, r0
     340:	8a 95       	dec	r24
     342:	e1 f7       	brne	.-8      	; 0x33c <_Z7setupCSv+0x1f0>

	c.ppm = 1.0;
	c.p = {52, 52, 94};
     344:	86 e0       	ldi	r24, 0x06	; 6
     346:	e9 e6       	ldi	r30, 0x69	; 105
     348:	f1 e0       	ldi	r31, 0x01	; 1
     34a:	de 01       	movw	r26, r28
     34c:	15 96       	adiw	r26, 0x05	; 5
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	8a 95       	dec	r24
     354:	e1 f7       	brne	.-8      	; 0x34e <_Z7setupCSv+0x202>
	Nitrite[index] = c;
     356:	49 83       	std	Y+1, r20	; 0x01
     358:	5a 83       	std	Y+2, r21	; 0x02
     35a:	6b 83       	std	Y+3, r22	; 0x03
     35c:	7c 83       	std	Y+4, r23	; 0x04
     35e:	8a e0       	ldi	r24, 0x0A	; 10
     360:	fe 01       	movw	r30, r28
     362:	31 96       	adiw	r30, 0x01	; 1
     364:	a4 ec       	ldi	r26, 0xC4	; 196
     366:	b2 e0       	ldi	r27, 0x02	; 2
     368:	01 90       	ld	r0, Z+
     36a:	0d 92       	st	X+, r0
     36c:	8a 95       	dec	r24
     36e:	e1 f7       	brne	.-8      	; 0x368 <_Z7setupCSv+0x21c>

	c.ppm = 5.0;
	c.p = {58, 53, 96};
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	ef e6       	ldi	r30, 0x6F	; 111
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	de 01       	movw	r26, r28
     378:	15 96       	adiw	r26, 0x05	; 5
     37a:	01 90       	ld	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	8a 95       	dec	r24
     380:	e1 f7       	brne	.-8      	; 0x37a <_Z7setupCSv+0x22e>
	Nitrate[index] = c;
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	a0 ea       	ldi	r26, 0xA0	; 160
     388:	b0 e4       	ldi	r27, 0x40	; 64
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	9a 83       	std	Y+2, r25	; 0x02
     38e:	ab 83       	std	Y+3, r26	; 0x03
     390:	bc 83       	std	Y+4, r27	; 0x04
     392:	8a e0       	ldi	r24, 0x0A	; 10
     394:	fe 01       	movw	r30, r28
     396:	31 96       	adiw	r30, 0x01	; 1
     398:	ae e7       	ldi	r26, 0x7E	; 126
     39a:	b2 e0       	ldi	r27, 0x02	; 2
     39c:	01 90       	ld	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	8a 95       	dec	r24
     3a2:	e1 f7       	brne	.-8      	; 0x39c <_Z7setupCSv+0x250>

	++index;

	c.ppm = 6.0;
	c.p = {48, 54, 86};
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	e5 e7       	ldi	r30, 0x75	; 117
     3a8:	f1 e0       	ldi	r31, 0x01	; 1
     3aa:	de 01       	movw	r26, r28
     3ac:	15 96       	adiw	r26, 0x05	; 5
     3ae:	01 90       	ld	r0, Z+
     3b0:	0d 92       	st	X+, r0
     3b2:	8a 95       	dec	r24
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <_Z7setupCSv+0x262>
	Ammonia[index] = c;
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 ec       	ldi	r26, 0xC0	; 192
     3bc:	b0 e4       	ldi	r27, 0x40	; 64
     3be:	89 83       	std	Y+1, r24	; 0x01
     3c0:	9a 83       	std	Y+2, r25	; 0x02
     3c2:	ab 83       	std	Y+3, r26	; 0x03
     3c4:	bc 83       	std	Y+4, r27	; 0x04
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	fe 01       	movw	r30, r28
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	a4 e1       	ldi	r26, 0x14	; 20
     3ce:	b3 e0       	ldi	r27, 0x03	; 3
     3d0:	01 90       	ld	r0, Z+
     3d2:	0d 92       	st	X+, r0
     3d4:	8a 95       	dec	r24
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <_Z7setupCSv+0x284>

	c.ppm = 1.5;
	c.p = {49, 48, 88};
     3d8:	86 e0       	ldi	r24, 0x06	; 6
     3da:	eb e7       	ldi	r30, 0x7B	; 123
     3dc:	f1 e0       	ldi	r31, 0x01	; 1
     3de:	de 01       	movw	r26, r28
     3e0:	15 96       	adiw	r26, 0x05	; 5
     3e2:	01 90       	ld	r0, Z+
     3e4:	0d 92       	st	X+, r0
     3e6:	8a 95       	dec	r24
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <_Z7setupCSv+0x296>
	Nitrite[index] = c;
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	a0 ec       	ldi	r26, 0xC0	; 192
     3f0:	bf e3       	ldi	r27, 0x3F	; 63
     3f2:	89 83       	std	Y+1, r24	; 0x01
     3f4:	9a 83       	std	Y+2, r25	; 0x02
     3f6:	ab 83       	std	Y+3, r26	; 0x03
     3f8:	bc 83       	std	Y+4, r27	; 0x04
     3fa:	8a e0       	ldi	r24, 0x0A	; 10
     3fc:	fe 01       	movw	r30, r28
     3fe:	31 96       	adiw	r30, 0x01	; 1
     400:	ae ec       	ldi	r26, 0xCE	; 206
     402:	b2 e0       	ldi	r27, 0x02	; 2
     404:	01 90       	ld	r0, Z+
     406:	0d 92       	st	X+, r0
     408:	8a 95       	dec	r24
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

	c.ppm = 10.0;
	c.p = {49, 48, 88};
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	eb e7       	ldi	r30, 0x7B	; 123
     410:	f1 e0       	ldi	r31, 0x01	; 1
     412:	de 01       	movw	r26, r28
     414:	15 96       	adiw	r26, 0x05	; 5
     416:	01 90       	ld	r0, Z+
     418:	0d 92       	st	X+, r0
     41a:	8a 95       	dec	r24
     41c:	e1 f7       	brne	.-8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	Nitrate[index] = c;
     41e:	40 e0       	ldi	r20, 0x00	; 0
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	60 e2       	ldi	r22, 0x20	; 32
     424:	71 e4       	ldi	r23, 0x41	; 65
     426:	49 83       	std	Y+1, r20	; 0x01
     428:	5a 83       	std	Y+2, r21	; 0x02
     42a:	6b 83       	std	Y+3, r22	; 0x03
     42c:	7c 83       	std	Y+4, r23	; 0x04
     42e:	8a e0       	ldi	r24, 0x0A	; 10
     430:	fe 01       	movw	r30, r28
     432:	31 96       	adiw	r30, 0x01	; 1
     434:	a8 e8       	ldi	r26, 0x88	; 136
     436:	b2 e0       	ldi	r27, 0x02	; 2
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	8a 95       	dec	r24
     43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>

	++index;

	c.ppm = 3.0;
	c.p = {54, 46, 88};
     440:	86 e0       	ldi	r24, 0x06	; 6
     442:	e1 e8       	ldi	r30, 0x81	; 129
     444:	f1 e0       	ldi	r31, 0x01	; 1
     446:	de 01       	movw	r26, r28
     448:	15 96       	adiw	r26, 0x05	; 5
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	8a 95       	dec	r24
     450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
	Nitrite[index] = c;
     452:	09 83       	std	Y+1, r16	; 0x01
     454:	1a 83       	std	Y+2, r17	; 0x02
     456:	2b 83       	std	Y+3, r18	; 0x03
     458:	3c 83       	std	Y+4, r19	; 0x04
     45a:	8a e0       	ldi	r24, 0x0A	; 10
     45c:	fe 01       	movw	r30, r28
     45e:	31 96       	adiw	r30, 0x01	; 1
     460:	a8 ed       	ldi	r26, 0xD8	; 216
     462:	b2 e0       	ldi	r27, 0x02	; 2
     464:	01 90       	ld	r0, Z+
     466:	0d 92       	st	X+, r0
     468:	8a 95       	dec	r24
     46a:	e1 f7       	brne	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

	c.ppm = 20.0;
	c.p = {50, 44, 86};
     46c:	86 e0       	ldi	r24, 0x06	; 6
     46e:	e7 e8       	ldi	r30, 0x87	; 135
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	de 01       	movw	r26, r28
     474:	15 96       	adiw	r26, 0x05	; 5
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	Nitrate[index] = c;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	a0 ea       	ldi	r26, 0xA0	; 160
     484:	b1 e4       	ldi	r27, 0x41	; 65
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	ab 83       	std	Y+3, r26	; 0x03
     48c:	bc 83       	std	Y+4, r27	; 0x04
     48e:	8a e0       	ldi	r24, 0x0A	; 10
     490:	fe 01       	movw	r30, r28
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	a2 e9       	ldi	r26, 0x92	; 146
     496:	b2 e0       	ldi	r27, 0x02	; 2
     498:	01 90       	ld	r0, Z+
     49a:	0d 92       	st	X+, r0
     49c:	8a 95       	dec	r24
     49e:	e1 f7       	brne	.-8      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>

	++index;

	c.ppm = 10.0;
	c.p = {52, 42, 82};
     4a0:	86 e0       	ldi	r24, 0x06	; 6
     4a2:	ed e8       	ldi	r30, 0x8D	; 141
     4a4:	f1 e0       	ldi	r31, 0x01	; 1
     4a6:	de 01       	movw	r26, r28
     4a8:	15 96       	adiw	r26, 0x05	; 5
     4aa:	01 90       	ld	r0, Z+
     4ac:	0d 92       	st	X+, r0
     4ae:	8a 95       	dec	r24
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
	Nitrite[index] = c;
     4b2:	49 83       	std	Y+1, r20	; 0x01
     4b4:	5a 83       	std	Y+2, r21	; 0x02
     4b6:	6b 83       	std	Y+3, r22	; 0x03
     4b8:	7c 83       	std	Y+4, r23	; 0x04
     4ba:	8a e0       	ldi	r24, 0x0A	; 10
     4bc:	fe 01       	movw	r30, r28
     4be:	31 96       	adiw	r30, 0x01	; 1
     4c0:	a2 ee       	ldi	r26, 0xE2	; 226
     4c2:	b2 e0       	ldi	r27, 0x02	; 2
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>

	c.ppm = 50.0;
	c.p = {47, 43, 82};
     4cc:	86 e0       	ldi	r24, 0x06	; 6
     4ce:	e3 e9       	ldi	r30, 0x93	; 147
     4d0:	f1 e0       	ldi	r31, 0x01	; 1
     4d2:	de 01       	movw	r26, r28
     4d4:	15 96       	adiw	r26, 0x05	; 5
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	8a 95       	dec	r24
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
	Nitrate[index] = c;
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a8 e4       	ldi	r26, 0x48	; 72
     4e4:	b2 e4       	ldi	r27, 0x42	; 66
     4e6:	89 83       	std	Y+1, r24	; 0x01
     4e8:	9a 83       	std	Y+2, r25	; 0x02
     4ea:	ab 83       	std	Y+3, r26	; 0x03
     4ec:	bc 83       	std	Y+4, r27	; 0x04
     4ee:	8a e0       	ldi	r24, 0x0A	; 10
     4f0:	fe 01       	movw	r30, r28
     4f2:	31 96       	adiw	r30, 0x01	; 1
     4f4:	ac e9       	ldi	r26, 0x9C	; 156
     4f6:	b2 e0       	ldi	r27, 0x02	; 2
     4f8:	01 90       	ld	r0, Z+
     4fa:	0d 92       	st	X+, r0
     4fc:	8a 95       	dec	r24
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
}
     500:	2a 96       	adiw	r28, 0x0a	; 10
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	08 95       	ret

00000516 <_Z9SameColorv>:


bool SameColor()
{
	Serial.print("c: ");
     516:	69 e9       	ldi	r22, 0x99	; 153
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	82 e2       	ldi	r24, 0x22	; 34
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(c.p.R);
     522:	60 91 57 02 	lds	r22, 0x0257	; 0x800257 <c+0x4>
     526:	70 91 58 02 	lds	r23, 0x0258	; 0x800258 <c+0x5>
     52a:	4a e0       	ldi	r20, 0x0A	; 10
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	82 e2       	ldi	r24, 0x22	; 34
     530:	94 e0       	ldi	r25, 0x04	; 4
     532:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN5Print5printEii>
	Serial.print(" ");
     536:	6b e9       	ldi	r22, 0x9B	; 155
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	82 e2       	ldi	r24, 0x22	; 34
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(c.p.G);
     542:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <c+0x6>
     546:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <c+0x7>
     54a:	4a e0       	ldi	r20, 0x0A	; 10
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	82 e2       	ldi	r24, 0x22	; 34
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN5Print5printEii>
	Serial.print(" ");
     556:	6b e9       	ldi	r22, 0x9B	; 155
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	82 e2       	ldi	r24, 0x22	; 34
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(c.p.B);
     562:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <c+0x8>
     566:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <c+0x9>
     56a:	4a e0       	ldi	r20, 0x0A	; 10
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	82 e2       	ldi	r24, 0x22	; 34
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 a7 18 	call	0x314e	; 0x314e <_ZN5Print5printEii>
	Serial.print("read_in: ");
     576:	6d e9       	ldi	r22, 0x9D	; 157
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	82 e2       	ldi	r24, 0x22	; 34
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(redScanned);
     582:	4a e0       	ldi	r20, 0x0A	; 10
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <redScanned>
     58a:	82 e2       	ldi	r24, 0x22	; 34
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN5Print5printEhi>
	Serial.print(" ");
     592:	6b e9       	ldi	r22, 0x9B	; 155
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	82 e2       	ldi	r24, 0x22	; 34
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(greenScanned);
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <greenScanned>
     5a6:	82 e2       	ldi	r24, 0x22	; 34
     5a8:	94 e0       	ldi	r25, 0x04	; 4
     5aa:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN5Print5printEhi>
	Serial.print(" ");
     5ae:	6b e9       	ldi	r22, 0x9B	; 155
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	82 e2       	ldi	r24, 0x22	; 34
     5b4:	94 e0       	ldi	r25, 0x04	; 4
     5b6:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <_ZN5Print5printEPKc>
	Serial.print(blueScanned);
     5ba:	4a e0       	ldi	r20, 0x0A	; 10
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <blueScanned>
     5c2:	82 e2       	ldi	r24, 0x22	; 34
     5c4:	94 e0       	ldi	r25, 0x04	; 4
     5c6:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN5Print5printEhi>
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
     5ca:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <redScanned>
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <c+0x4>
     5d4:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <c+0x5>
     5d8:	ac 01       	movw	r20, r24
     5da:	45 50       	subi	r20, 0x05	; 5
     5dc:	51 09       	sbc	r21, r1
     5de:	24 17       	cp	r18, r20
     5e0:	35 07       	cpc	r19, r21
     5e2:	74 f1       	brlt	.+92     	; 0x640 <_Z9SameColorv+0x12a>
     5e4:	05 96       	adiw	r24, 0x05	; 5
     5e6:	82 17       	cp	r24, r18
     5e8:	93 07       	cpc	r25, r19
     5ea:	54 f1       	brlt	.+84     	; 0x640 <_Z9SameColorv+0x12a>
	return false;
	if (greenScanned < (c.p.G - TOLERANCE) || greenScanned > (c.p.G + TOLERANCE))
     5ec:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <greenScanned>
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <c+0x6>
     5f6:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <c+0x7>
     5fa:	ac 01       	movw	r20, r24
     5fc:	45 50       	subi	r20, 0x05	; 5
     5fe:	51 09       	sbc	r21, r1
     600:	24 17       	cp	r18, r20
     602:	35 07       	cpc	r19, r21
     604:	ec f0       	brlt	.+58     	; 0x640 <_Z9SameColorv+0x12a>
     606:	05 96       	adiw	r24, 0x05	; 5
     608:	82 17       	cp	r24, r18
     60a:	93 07       	cpc	r25, r19
     60c:	cc f0       	brlt	.+50     	; 0x640 <_Z9SameColorv+0x12a>
	return false;
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
     60e:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <blueScanned>
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <c+0x8>
     618:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <c+0x9>
     61c:	ac 01       	movw	r20, r24
     61e:	45 50       	subi	r20, 0x05	; 5
     620:	51 09       	sbc	r21, r1
     622:	24 17       	cp	r18, r20
     624:	35 07       	cpc	r19, r21
     626:	64 f0       	brlt	.+24     	; 0x640 <_Z9SameColorv+0x12a>
     628:	05 96       	adiw	r24, 0x05	; 5
     62a:	82 17       	cp	r24, r18
     62c:	93 07       	cpc	r25, r19
     62e:	44 f0       	brlt	.+16     	; 0x640 <_Z9SameColorv+0x12a>
	return false;
	
	Serial.print(F("\nFound Matching Color"));
     630:	6c e7       	ldi	r22, 0x7C	; 124
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	82 e2       	ldi	r24, 0x22	; 34
     636:	94 e0       	ldi	r25, 0x04	; 4
     638:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <_ZN5Print5printEPK19__FlashStringHelper>
	return true;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	08 95       	ret
	Serial.print(greenScanned);
	Serial.print(" ");
	Serial.print(blueScanned);
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
	return false;
     640:	80 e0       	ldi	r24, 0x00	; 0
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
	return false;
	
	Serial.print(F("\nFound Matching Color"));
	return true;
}
     642:	08 95       	ret

00000644 <_Z9FindMatchv>:

double FindMatch()
{
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
	switch(typeToRead)
     64c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <typeToRead>
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	09 f4       	brne	.+2      	; 0x656 <_Z9FindMatchv+0x12>
     654:	44 c0       	rjmp	.+136    	; 0x6de <_Z9FindMatchv+0x9a>
     656:	40 f0       	brcs	.+16     	; 0x668 <_Z9FindMatchv+0x24>
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	09 f0       	breq	.+2      	; 0x65e <_Z9FindMatchv+0x1a>
     65c:	68 c0       	rjmp	.+208    	; 0x72e <_Z9FindMatchv+0xea>
     65e:	06 ea       	ldi	r16, 0xA6	; 166
     660:	12 e0       	ldi	r17, 0x02	; 2
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	26 c0       	rjmp	.+76     	; 0x6b4 <_Z9FindMatchv+0x70>
     668:	0c ee       	ldi	r16, 0xEC	; 236
     66a:	12 e0       	ldi	r17, 0x02	; 2
     66c:	c0 e0       	ldi	r28, 0x00	; 0
     66e:	d0 e0       	ldi	r29, 0x00	; 0
		case AMMONIA:
		{
			// find matching ammonia value
			for(int i = 0; i < MAX_AMMONIA_COLORS; ++i)
			{
				c = Ammonia[i];
     670:	8a e0       	ldi	r24, 0x0A	; 10
     672:	f8 01       	movw	r30, r16
     674:	a3 e5       	ldi	r26, 0x53	; 83
     676:	b2 e0       	ldi	r27, 0x02	; 2
     678:	01 90       	ld	r0, Z+
     67a:	0d 92       	st	X+, r0
     67c:	8a 95       	dec	r24
     67e:	e1 f7       	brne	.-8      	; 0x678 <_Z9FindMatchv+0x34>
				if(SameColor())
     680:	0e 94 8b 02 	call	0x516	; 0x516 <_Z9SameColorv>
     684:	88 23       	and	r24, r24
     686:	49 f0       	breq	.+18     	; 0x69a <_Z9FindMatchv+0x56>
				return Ammonia[i].ppm;
     688:	8a e0       	ldi	r24, 0x0A	; 10
     68a:	8c 9f       	mul	r24, r28
     68c:	f0 01       	movw	r30, r0
     68e:	8d 9f       	mul	r24, r29
     690:	f0 0d       	add	r31, r0
     692:	11 24       	eor	r1, r1
     694:	e4 51       	subi	r30, 0x14	; 20
     696:	fd 4f       	sbci	r31, 0xFD	; 253
     698:	3a c0       	rjmp	.+116    	; 0x70e <_Z9FindMatchv+0xca>
	switch(typeToRead)
	{
		case AMMONIA:
		{
			// find matching ammonia value
			for(int i = 0; i < MAX_AMMONIA_COLORS; ++i)
     69a:	21 96       	adiw	r28, 0x01	; 1
     69c:	06 5f       	subi	r16, 0xF6	; 246
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	c5 30       	cpi	r28, 0x05	; 5
     6a2:	d1 05       	cpc	r29, r1
     6a4:	29 f7       	brne	.-54     	; 0x670 <_Z9FindMatchv+0x2c>
     6a6:	3e c0       	rjmp	.+124    	; 0x724 <_Z9FindMatchv+0xe0>
			break;
		}
		case NITRITE:
		{
			// find matching nitrite value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
     6a8:	21 96       	adiw	r28, 0x01	; 1
     6aa:	06 5f       	subi	r16, 0xF6	; 246
     6ac:	1f 4f       	sbci	r17, 0xFF	; 255
     6ae:	c7 30       	cpi	r28, 0x07	; 7
     6b0:	d1 05       	cpc	r29, r1
     6b2:	c1 f1       	breq	.+112    	; 0x724 <_Z9FindMatchv+0xe0>
			{
				c = Nitrite[i];
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	f8 01       	movw	r30, r16
     6b8:	a3 e5       	ldi	r26, 0x53	; 83
     6ba:	b2 e0       	ldi	r27, 0x02	; 2
     6bc:	01 90       	ld	r0, Z+
     6be:	0d 92       	st	X+, r0
     6c0:	8a 95       	dec	r24
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <_Z9FindMatchv+0x78>
				if(SameColor())
     6c4:	0e 94 8b 02 	call	0x516	; 0x516 <_Z9SameColorv>
     6c8:	88 23       	and	r24, r24
     6ca:	71 f3       	breq	.-36     	; 0x6a8 <_Z9FindMatchv+0x64>
				return Nitrite[i].ppm;
     6cc:	8a e0       	ldi	r24, 0x0A	; 10
     6ce:	8c 9f       	mul	r24, r28
     6d0:	f0 01       	movw	r30, r0
     6d2:	8d 9f       	mul	r24, r29
     6d4:	f0 0d       	add	r31, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	ea 55       	subi	r30, 0x5A	; 90
     6da:	fd 4f       	sbci	r31, 0xFD	; 253
     6dc:	18 c0       	rjmp	.+48     	; 0x70e <_Z9FindMatchv+0xca>
     6de:	00 e6       	ldi	r16, 0x60	; 96
     6e0:	12 e0       	ldi	r17, 0x02	; 2
	return true;
}

double FindMatch()
{
	switch(typeToRead)
     6e2:	c0 e0       	ldi	r28, 0x00	; 0
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
		case NITRATE:
		{
			// find matching nitrate value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
			{
				c = Nitrate[i];
     6e6:	8a e0       	ldi	r24, 0x0A	; 10
     6e8:	f8 01       	movw	r30, r16
     6ea:	a3 e5       	ldi	r26, 0x53	; 83
     6ec:	b2 e0       	ldi	r27, 0x02	; 2
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	8a 95       	dec	r24
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <_Z9FindMatchv+0xaa>
				if(SameColor())
     6f6:	0e 94 8b 02 	call	0x516	; 0x516 <_Z9SameColorv>
     6fa:	88 23       	and	r24, r24
     6fc:	69 f0       	breq	.+26     	; 0x718 <_Z9FindMatchv+0xd4>
				return Nitrate[i].ppm;
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	8c 9f       	mul	r24, r28
     702:	f0 01       	movw	r30, r0
     704:	8d 9f       	mul	r24, r29
     706:	f0 0d       	add	r31, r0
     708:	11 24       	eor	r1, r1
     70a:	e0 5a       	subi	r30, 0xA0	; 160
     70c:	fd 4f       	sbci	r31, 0xFD	; 253
     70e:	30 81       	ld	r19, Z
     710:	21 81       	ldd	r18, Z+1	; 0x01
     712:	92 81       	ldd	r25, Z+2	; 0x02
     714:	83 81       	ldd	r24, Z+3	; 0x03
     716:	0a c0       	rjmp	.+20     	; 0x72c <_Z9FindMatchv+0xe8>
			break;
		}
		case NITRATE:
		{
			// find matching nitrate value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
     718:	21 96       	adiw	r28, 0x01	; 1
     71a:	06 5f       	subi	r16, 0xF6	; 246
     71c:	1f 4f       	sbci	r17, 0xFF	; 255
     71e:	c7 30       	cpi	r28, 0x07	; 7
     720:	d1 05       	cpc	r29, r1
     722:	09 f7       	brne	.-62     	; 0x6e6 <_Z9FindMatchv+0xa2>
			{
				c = Ammonia[i];
				if(SameColor())
				return Ammonia[i].ppm;
			}
			return -1;
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	90 e8       	ldi	r25, 0x80	; 128
     72a:	8f eb       	ldi	r24, 0xBF	; 191
     72c:	ac 01       	movw	r20, r24
			}
			return -1;
			break;
		}
	}
}
     72e:	63 2f       	mov	r22, r19
     730:	72 2f       	mov	r23, r18
     732:	85 2f       	mov	r24, r21
     734:	94 2f       	mov	r25, r20
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <_Z9ScanColor8ReadType>:

long ScanColor(ReadType r)
{
	typeToRead = r;
     740:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <typeToRead>
	CS.read();
     744:	80 e2       	ldi	r24, 0x20	; 32
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN9MD_TCS2304readEv>
	while(CS.available() == 0);  // wait for read to complete
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	92 e0       	ldi	r25, 0x02	; 2
     750:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN9MD_TCS2309availableEv>
     754:	88 23       	and	r24, r24
     756:	d1 f3       	breq	.-12     	; 0x74c <_Z9ScanColor8ReadType+0xc>
	CS.getRGB(&rgb);
     758:	6d e5       	ldi	r22, 0x5D	; 93
     75a:	72 e0       	ldi	r23, 0x02	; 2
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     764:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <rgb+0x1>
     768:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     76c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <rgb>
     770:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     774:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <rgb+0x2>
     778:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <blueScanned>
	// look for match
	Serial.println("RGB");
     77c:	67 ea       	ldi	r22, 0xA7	; 167
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	82 e2       	ldi	r24, 0x22	; 34
     782:	94 e0       	ldi	r25, 0x04	; 4
     784:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_ZN5Print7printlnEPKc>
	Serial.println(redScanned);
     788:	4a e0       	ldi	r20, 0x0A	; 10
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <redScanned>
     790:	82 e2       	ldi	r24, 0x22	; 34
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print7printlnEhi>
	Serial.println(greenScanned);
     798:	4a e0       	ldi	r20, 0x0A	; 10
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <greenScanned>
     7a0:	82 e2       	ldi	r24, 0x22	; 34
     7a2:	94 e0       	ldi	r25, 0x04	; 4
     7a4:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print7printlnEhi>
	Serial.println(blueScanned);
     7a8:	4a e0       	ldi	r20, 0x0A	; 10
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <blueScanned>
     7b0:	82 e2       	ldi	r24, 0x22	; 34
     7b2:	94 e0       	ldi	r25, 0x04	; 4
     7b4:	0e 94 4d 18 	call	0x309a	; 0x309a <_ZN5Print7printlnEhi>
	return FindMatch();
     7b8:	0e 94 22 03 	call	0x644	; 0x644 <_Z9FindMatchv>
     7bc:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__fixsfsi>
}
     7c0:	08 95       	ret

000007c2 <_Z13findTestStrip8ReadType>:

bool findTestStrip(ReadType r)
{
     7c2:	cf 93       	push	r28
	typeToRead = r;
     7c4:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <typeToRead>
	// Scan for color
	CS.read();
     7c8:	80 e2       	ldi	r24, 0x20	; 32
     7ca:	92 e0       	ldi	r25, 0x02	; 2
     7cc:	0e 94 94 12 	call	0x2528	; 0x2528 <_ZN9MD_TCS2304readEv>
	while (CS.available() == 0);
     7d0:	80 e2       	ldi	r24, 0x20	; 32
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 9e 12 	call	0x253c	; 0x253c <_ZN9MD_TCS2309availableEv>
     7d8:	88 23       	and	r24, r24
     7da:	d1 f3       	breq	.-12     	; 0x7d0 <_Z13findTestStrip8ReadType+0xe>
	CS.getRGB(&rgb);
     7dc:	6d e5       	ldi	r22, 0x5D	; 93
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	80 e2       	ldi	r24, 0x20	; 32
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 ca 11 	call	0x2394	; 0x2394 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     7e8:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <rgb+0x1>
     7ec:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     7f0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <rgb>
     7f4:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     7f8:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <rgb+0x2>
     7fc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <blueScanned>
	// look for match against black
	c = EmptyTestBox;
     800:	8a e0       	ldi	r24, 0x0A	; 10
     802:	e0 e1       	ldi	r30, 0x10	; 16
     804:	f1 e0       	ldi	r31, 0x01	; 1
     806:	a3 e5       	ldi	r26, 0x53	; 83
     808:	b2 e0       	ldi	r27, 0x02	; 2
     80a:	01 90       	ld	r0, Z+
     80c:	0d 92       	st	X+, r0
     80e:	8a 95       	dec	r24
     810:	e1 f7       	brne	.-8      	; 0x80a <_Z13findTestStrip8ReadType+0x48>
	bool foundEmptyBox = SameColor();
     812:	0e 94 8b 02 	call	0x516	; 0x516 <_Z9SameColorv>
	c = WhiteTestStrip;
     816:	9a e0       	ldi	r25, 0x0A	; 10
     818:	e6 e0       	ldi	r30, 0x06	; 6
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	a3 e5       	ldi	r26, 0x53	; 83
     81e:	b2 e0       	ldi	r27, 0x02	; 2
     820:	01 90       	ld	r0, Z+
     822:	0d 92       	st	X+, r0
     824:	9a 95       	dec	r25
     826:	e1 f7       	brne	.-8      	; 0x820 <_Z13findTestStrip8ReadType+0x5e>
	foundEmptyBox =  foundEmptyBox || SameColor();
     828:	81 11       	cpse	r24, r1
     82a:	05 c0       	rjmp	.+10     	; 0x836 <_Z13findTestStrip8ReadType+0x74>
     82c:	0e 94 8b 02 	call	0x516	; 0x516 <_Z9SameColorv>
     830:	c8 2f       	mov	r28, r24
     832:	88 23       	and	r24, r24
     834:	59 f0       	breq	.+22     	; 0x84c <_Z13findTestStrip8ReadType+0x8a>
	return foundEmptyBox && (FindMatch() == -1);
     836:	0e 94 22 03 	call	0x644	; 0x644 <_Z9FindMatchv>
     83a:	c1 e0       	ldi	r28, 0x01	; 1
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e8       	ldi	r20, 0x80	; 128
     842:	5f eb       	ldi	r21, 0xBF	; 191
     844:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__cmpsf2>
     848:	81 11       	cpse	r24, r1
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	8c 2f       	mov	r24, r28
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <_GLOBAL__sub_I_Ammonia>:
uint8_t redScanned;
uint8_t blueScanned;

ReadType typeToRead;

MD_TCS230  CS(S2, S3, OE);
     852:	28 e0       	ldi	r18, 0x08	; 8
     854:	4d e0       	ldi	r20, 0x0D	; 13
     856:	6c e0       	ldi	r22, 0x0C	; 12
     858:	80 e2       	ldi	r24, 0x20	; 32
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0c 94 2d 11 	jmp	0x225a	; 0x225a <_ZN9MD_TCS230C1Ehhh>

00000860 <_GLOBAL__sub_D_Ammonia>:
     860:	80 e2       	ldi	r24, 0x20	; 32
     862:	92 e0       	ldi	r25, 0x02	; 2
     864:	0c 94 41 11 	jmp	0x2282	; 0x2282 <_ZN9MD_TCS230D1Ev>

00000868 <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     868:	66 e0       	ldi	r22, 0x06	; 6
     86a:	8e e1       	ldi	r24, 0x1E	; 30
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_ZN7OneWire5beginEh>

00000872 <_ZN5Print5writeEPKc>:
void TaskPHandTemperature(void *pvParameters)
{
  (void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
     872:	61 15       	cp	r22, r1
     874:	71 05       	cpc	r23, r1
     876:	79 f0       	breq	.+30     	; 0x896 <_ZN5Print5writeEPKc+0x24>
     878:	fb 01       	movw	r30, r22
     87a:	01 90       	ld	r0, Z+
     87c:	00 20       	and	r0, r0
     87e:	e9 f7       	brne	.-6      	; 0x87a <_ZN5Print5writeEPKc+0x8>
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	af 01       	movw	r20, r30
     884:	46 1b       	sub	r20, r22
     886:	57 0b       	sbc	r21, r23
     888:	dc 01       	movw	r26, r24
     88a:	ed 91       	ld	r30, X+
     88c:	fc 91       	ld	r31, X
     88e:	02 80       	ldd	r0, Z+2	; 0x02
     890:	f3 81       	ldd	r31, Z+3	; 0x03
     892:	e0 2d       	mov	r30, r0
     894:	09 94       	ijmp
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	08 95       	ret

0000089c <_Z6setLED8LEDColor>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <_Z6setLED8LEDColor+0x6>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <_Z6setLED8LEDColor+0x8>
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <_Z6setLED8LEDColor+0xa>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	49 83       	std	Y+1, r20	; 0x01
     8ac:	5a 83       	std	Y+2, r21	; 0x02
     8ae:	6b 83       	std	Y+3, r22	; 0x03
     8b0:	7c 83       	std	Y+4, r23	; 0x04
     8b2:	8d 83       	std	Y+5, r24	; 0x05
     8b4:	9e 83       	std	Y+6, r25	; 0x06
     8b6:	69 81       	ldd	r22, Y+1	; 0x01
     8b8:	7a 81       	ldd	r23, Y+2	; 0x02
     8ba:	8f e0       	ldi	r24, 0x0F	; 15
     8bc:	0e 94 94 19 	call	0x3328	; 0x3328 <analogWrite>
     8c0:	6b 81       	ldd	r22, Y+3	; 0x03
     8c2:	7c 81       	ldd	r23, Y+4	; 0x04
     8c4:	80 e1       	ldi	r24, 0x10	; 16
     8c6:	0e 94 94 19 	call	0x3328	; 0x3328 <analogWrite>
     8ca:	6d 81       	ldd	r22, Y+5	; 0x05
     8cc:	7e 81       	ldd	r23, Y+6	; 0x06
     8ce:	81 e1       	ldi	r24, 0x11	; 17
     8d0:	26 96       	adiw	r28, 0x06	; 6
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	0c 94 94 19 	jmp	0x3328	; 0x3328 <analogWrite>

000008e4 <_Z15TaskColorSensorPv>:
     8e4:	0e 94 4d 0c 	call	0x189a	; 0x189a <xTaskGetTickCount>
     8e8:	c4 e6       	ldi	r28, 0x64	; 100
     8ea:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <White>
     8ee:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <White+0x1>
     8f2:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <White+0x2>
     8f6:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <White+0x3>
     8fa:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <White+0x4>
     8fe:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <White+0x5>
     902:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     906:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <colorToRead>
     90a:	8e 34       	cpi	r24, 0x4E	; 78
     90c:	61 f1       	breq	.+88     	; 0x966 <__stack+0x67>
     90e:	8e 36       	cpi	r24, 0x6E	; 110
     910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
     912:	4f c0       	rjmp	.+158    	; 0x9b2 <__stack+0xb3>
     914:	81 34       	cpi	r24, 0x41	; 65
     916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x1b>
     918:	7f c0       	rjmp	.+254    	; 0xa18 <__stack+0x119>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z13findTestStrip8ReadType>
     920:	81 11       	cpse	r24, r1
     922:	fb cf       	rjmp	.-10     	; 0x91a <__stack+0x1b>
     924:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <Red>
     928:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <Red+0x1>
     92c:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <Red+0x2>
     930:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <Red+0x3>
     934:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Red+0x4>
     938:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Red+0x5>
     93c:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     940:	68 ee       	ldi	r22, 0xE8	; 232
     942:	73 e0       	ldi	r23, 0x03	; 3
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 1d 19 	call	0x323a	; 0x323a <delay>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 a0 03 	call	0x740	; 0x740 <_Z9ScanColor8ReadType>
     952:	c6 9f       	mul	r28, r22
     954:	90 01       	movw	r18, r0
     956:	c7 9f       	mul	r28, r23
     958:	30 0d       	add	r19, r0
     95a:	11 24       	eor	r1, r1
     95c:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <ammoniaValue+0x1>
     960:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <ammoniaValue>
     964:	59 c0       	rjmp	.+178    	; 0xa18 <__stack+0x119>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z13findTestStrip8ReadType>
     96c:	81 11       	cpse	r24, r1
     96e:	fb cf       	rjmp	.-10     	; 0x966 <__stack+0x67>
     970:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <Blue>
     974:	50 91 22 01 	lds	r21, 0x0122	; 0x800122 <Blue+0x1>
     978:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <Blue+0x2>
     97c:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <Blue+0x3>
     980:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Blue+0x4>
     984:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <Blue+0x5>
     988:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     98c:	68 ee       	ldi	r22, 0xE8	; 232
     98e:	73 e0       	ldi	r23, 0x03	; 3
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 1d 19 	call	0x323a	; 0x323a <delay>
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 a0 03 	call	0x740	; 0x740 <_Z9ScanColor8ReadType>
     99e:	c6 9f       	mul	r28, r22
     9a0:	90 01       	movw	r18, r0
     9a2:	c7 9f       	mul	r28, r23
     9a4:	30 0d       	add	r19, r0
     9a6:	11 24       	eor	r1, r1
     9a8:	30 93 50 03 	sts	0x0350, r19	; 0x800350 <nitriteValue+0x1>
     9ac:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <nitriteValue>
     9b0:	33 c0       	rjmp	.+102    	; 0xa18 <__stack+0x119>
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_Z13findTestStrip8ReadType>
     9b8:	81 11       	cpse	r24, r1
     9ba:	fb cf       	rjmp	.-10     	; 0x9b2 <__stack+0xb3>
     9bc:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <Green>
     9c0:	50 91 28 01 	lds	r21, 0x0128	; 0x800128 <Green+0x1>
     9c4:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <Green+0x2>
     9c8:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <Green+0x3>
     9cc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Green+0x4>
     9d0:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <Green+0x5>
     9d4:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     9d8:	68 ee       	ldi	r22, 0xE8	; 232
     9da:	73 e0       	ldi	r23, 0x03	; 3
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 1d 19 	call	0x323a	; 0x323a <delay>
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 a0 03 	call	0x740	; 0x740 <_Z9ScanColor8ReadType>
     9ea:	c6 9f       	mul	r28, r22
     9ec:	90 01       	movw	r18, r0
     9ee:	c7 9f       	mul	r28, r23
     9f0:	30 0d       	add	r19, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	30 93 52 03 	sts	0x0352, r19	; 0x800352 <nitrateValue+0x1>
     9f8:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <nitrateValue>
     9fc:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <Off>
     a00:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <Off+0x1>
     a04:	60 91 57 03 	lds	r22, 0x0357	; 0x800357 <Off+0x2>
     a08:	70 91 58 03 	lds	r23, 0x0358	; 0x800358 <Off+0x3>
     a0c:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <Off+0x4>
     a10:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <Off+0x5>
     a14:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     a18:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <Off>
     a1c:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <Off+0x1>
     a20:	60 91 57 03 	lds	r22, 0x0357	; 0x800357 <Off+0x2>
     a24:	70 91 58 03 	lds	r23, 0x0358	; 0x800358 <Off+0x3>
     a28:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <Off+0x4>
     a2c:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <Off+0x5>
     a30:	0e 94 4e 04 	call	0x89c	; 0x89c <_Z6setLED8LEDColor>
     a34:	88 eb       	ldi	r24, 0xB8	; 184
     a36:	9b e0       	ldi	r25, 0x0B	; 11
     a38:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <vTaskDelay>
     a3c:	56 cf       	rjmp	.-340    	; 0x8ea <_Z15TaskColorSensorPv+0x6>

00000a3e <_Z8setupLEDv>:
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	8f e0       	ldi	r24, 0x0F	; 15
     a42:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	80 e1       	ldi	r24, 0x10	; 16
     a4a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	81 e1       	ldi	r24, 0x11	; 17
     a52:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
     a56:	40 91 55 03 	lds	r20, 0x0355	; 0x800355 <Off>
     a5a:	50 91 56 03 	lds	r21, 0x0356	; 0x800356 <Off+0x1>
     a5e:	60 91 57 03 	lds	r22, 0x0357	; 0x800357 <Off+0x2>
     a62:	70 91 58 03 	lds	r23, 0x0358	; 0x800358 <Off+0x3>
     a66:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <Off+0x4>
     a6a:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <Off+0x5>
     a6e:	0c 94 4e 04 	jmp	0x89c	; 0x89c <_Z6setLED8LEDColor>

00000a72 <setup>:
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	52 ec       	ldi	r21, 0xC2	; 194
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	8c e2       	ldi	r24, 0x2C	; 44
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	0e 94 8e 14 	call	0x291c	; 0x291c <_ZN14SoftwareSerial5beginEl>
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	8a e0       	ldi	r24, 0x0A	; 10
     a8c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	84 e0       	ldi	r24, 0x04	; 4
     a9c:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
     aa0:	26 e0       	ldi	r18, 0x06	; 6
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	52 ec       	ldi	r21, 0xC2	; 194
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	82 e2       	ldi	r24, 0x22	; 34
     aac:	94 e0       	ldi	r25, 0x04	; 4
     aae:	0e 94 80 16 	call	0x2d00	; 0x2d00 <_ZN14HardwareSerial5beginEmh>
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
     aba:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z7setupCSv>
     abe:	0e 94 1f 05 	call	0xa3e	; 0xa3e <_Z8setupLEDv>
     ac2:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <xSerialSemaphoreColorSensor>
     ac6:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <xSerialSemaphoreColorSensor+0x1>
     aca:	89 2b       	or	r24, r25
     acc:	91 f4       	brne	.+36     	; 0xaf2 <setup+0x80>
     ace:	43 e0       	ldi	r20, 0x03	; 3
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericCreate>
     ad8:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <xSerialSemaphoreColorSensor+0x1>
     adc:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <xSerialSemaphoreColorSensor>
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	39 f0       	breq	.+14     	; 0xaf2 <setup+0x80>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	0e 94 f5 08 	call	0x11ea	; 0x11ea <xQueueGenericSend>
     af2:	8b e4       	ldi	r24, 0x4B	; 75
     af4:	e8 2e       	mov	r14, r24
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	f8 2e       	mov	r15, r24
     afa:	02 e0       	ldi	r16, 0x02	; 2
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e8       	ldi	r20, 0x80	; 128
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	6b ea       	ldi	r22, 0xAB	; 171
     b06:	71 e0       	ldi	r23, 0x01	; 1
     b08:	82 e7       	ldi	r24, 0x72	; 114
     b0a:	94 e0       	ldi	r25, 0x04	; 4
     b0c:	0e 94 0d 0b 	call	0x161a	; 0x161a <xTaskCreate>
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <vTaskStartScheduler>

00000b1a <loop>:
     b1a:	08 95       	ret

00000b1c <_GLOBAL__sub_I_Red>:
SemaphoreHandle_t xSerialSemaphoreColorSensor;

TaskHandle_t xColorSensor;
TaskHandle_t xPHandTemperature;

SoftwareSerial serial(rxPin, txPin);
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	43 e0       	ldi	r20, 0x03	; 3
     b20:	62 e0       	ldi	r22, 0x02	; 2
     b22:	8c e2       	ldi	r24, 0x2C	; 44
     b24:	93 e0       	ldi	r25, 0x03	; 3
     b26:	0c 94 63 14 	jmp	0x28c6	; 0x28c6 <_ZN14SoftwareSerialC1Ehhb>

00000b2a <_GLOBAL__sub_D_Red>:
     b2a:	8c e2       	ldi	r24, 0x2C	; 44
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <_ZN14SoftwareSerialD1Ev>

00000b32 <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
     b32:	fc 01       	movw	r30, r24
  // reset the search state
  LastDiscrepancy = 0;
     b34:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = false;
     b36:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
     b38:	14 86       	std	Z+12, r1	; 0x0c
     b3a:	dc 01       	movw	r26, r24
     b3c:	1b 96       	adiw	r26, 0x0b	; 11
     b3e:	33 96       	adiw	r30, 0x03	; 3
  for(int i = 7; ; i--) {
    ROM_NO[i] = 0;
     b40:	1e 92       	st	-X, r1
    if ( i == 0) break;
     b42:	ae 17       	cp	r26, r30
     b44:	bf 07       	cpc	r27, r31
     b46:	e1 f7       	brne	.-8      	; 0xb40 <_ZN7OneWire12reset_searchEv+0xe>
  }
}
     b48:	08 95       	ret

00000b4a <_ZN7OneWire5beginEh>:
#include "OneWire.h"
#include "OneWire_direct_gpio.h"


void OneWire::begin(uint8_t pin)
{
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	ec 01       	movw	r28, r24
     b52:	16 2f       	mov	r17, r22
	pinMode(pin, INPUT);
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	81 2f       	mov	r24, r17
     b58:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
     b5c:	61 2f       	mov	r22, r17
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	fb 01       	movw	r30, r22
     b62:	ea 55       	subi	r30, 0x5A	; 90
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	e4 91       	lpm	r30, Z
     b68:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
     b6a:	fb 01       	movw	r30, r22
     b6c:	e6 54       	subi	r30, 0x46	; 70
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	e4 91       	lpm	r30, Z
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e2 53       	subi	r30, 0x32	; 50
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	85 91       	lpm	r24, Z+
     b7e:	94 91       	lpm	r25, Z
     b80:	9a 83       	std	Y+2, r25	; 0x02
     b82:	89 83       	std	Y+1, r24	; 0x01
#if ONEWIRE_SEARCH
	reset_search();
     b84:	ce 01       	movw	r24, r28
#endif
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
{
	pinMode(pin, INPUT);
	bitmask = PIN_TO_BITMASK(pin);
	baseReg = PIN_TO_BASEREG(pin);
#if ONEWIRE_SEARCH
	reset_search();
     b8c:	0c 94 99 05 	jmp	0xb32	; 0xb32 <_ZN7OneWire12reset_searchEv>

00000b90 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     b96:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 27 1c 	call	0x384e	; 0x384e <malloc>
     ba0:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     ba2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     ba6:	20 97       	sbiw	r28, 0x00	; 0
     ba8:	11 f4       	brne	.+4      	; 0xbae <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     baa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     bae:	ce 01       	movw	r24, r28
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
    if( pv )
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	51 f0       	breq	.+20     	; 0xbd2 <vPortFree+0x1c>
     bbe:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     bc0:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
        {
            free( pv );
     bc4:	ce 01       	movw	r24, r28
     bc6:	0e 94 bf 1c 	call	0x397e	; 0x397e <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     bce:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <xTaskResumeAll>
    }
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     bd8:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bda:	03 96       	adiw	r24, 0x03	; 3
     bdc:	92 83       	std	Z+2, r25	; 0x02
     bde:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     be0:	2f ef       	ldi	r18, 0xFF	; 255
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	34 83       	std	Z+4, r19	; 0x04
     be6:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     be8:	96 83       	std	Z+6, r25	; 0x06
     bea:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bec:	90 87       	std	Z+8, r25	; 0x08
     bee:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     bf0:	10 82       	st	Z, r1
     bf2:	08 95       	ret

00000bf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     bf4:	fc 01       	movw	r30, r24
     bf6:	11 86       	std	Z+9, r1	; 0x09
     bf8:	10 86       	std	Z+8, r1	; 0x08
     bfa:	08 95       	ret

00000bfc <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	9c 01       	movw	r18, r24
     c02:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     c04:	dc 01       	movw	r26, r24
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	cd 91       	ld	r28, X+
     c0a:	dc 91       	ld	r29, X
     c0c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     c0e:	d3 83       	std	Z+3, r29	; 0x03
     c10:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	9d 81       	ldd	r25, Y+5	; 0x05
     c16:	95 83       	std	Z+5, r25	; 0x05
     c18:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	dc 01       	movw	r26, r24
     c20:	13 96       	adiw	r26, 0x03	; 3
     c22:	7c 93       	st	X, r23
     c24:	6e 93       	st	-X, r22
     c26:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     c28:	7d 83       	std	Y+5, r23	; 0x05
     c2a:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     c2c:	31 87       	std	Z+9, r19	; 0x09
     c2e:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     c30:	f9 01       	movw	r30, r18
     c32:	80 81       	ld	r24, Z
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 83       	st	Z, r24
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	8c 01       	movw	r16, r24
     c48:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     c4e:	8f 3f       	cpi	r24, 0xFF	; 255
     c50:	2f ef       	ldi	r18, 0xFF	; 255
     c52:	92 07       	cpc	r25, r18
     c54:	21 f4       	brne	.+8      	; 0xc5e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     c56:	e8 01       	movw	r28, r16
     c58:	af 81       	ldd	r26, Y+7	; 0x07
     c5a:	b8 85       	ldd	r27, Y+8	; 0x08
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <vListInsert+0x3c>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     c5e:	d8 01       	movw	r26, r16
     c60:	13 96       	adiw	r26, 0x03	; 3
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	2d 91       	ld	r18, X+
     c66:	3c 91       	ld	r19, X
     c68:	13 97       	sbiw	r26, 0x03	; 3
     c6a:	e9 01       	movw	r28, r18
     c6c:	48 81       	ld	r20, Y
     c6e:	59 81       	ldd	r21, Y+1	; 0x01
     c70:	84 17       	cp	r24, r20
     c72:	95 07       	cpc	r25, r21
     c74:	10 f0       	brcs	.+4      	; 0xc7a <vListInsert+0x3c>
     c76:	d9 01       	movw	r26, r18
     c78:	f4 cf       	rjmp	.-24     	; 0xc62 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	13 97       	sbiw	r26, 0x03	; 3
     c82:	93 83       	std	Z+3, r25	; 0x03
     c84:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c86:	ec 01       	movw	r28, r24
     c88:	fd 83       	std	Y+5, r31	; 0x05
     c8a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     c8c:	b5 83       	std	Z+5, r27	; 0x05
     c8e:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     c90:	13 96       	adiw	r26, 0x03	; 3
     c92:	fc 93       	st	X, r31
     c94:	ee 93       	st	-X, r30
     c96:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     c98:	11 87       	std	Z+9, r17	; 0x09
     c9a:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
     c9c:	f8 01       	movw	r30, r16
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 83       	st	Z, r24
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     cb4:	a0 85       	ldd	r26, Z+8	; 0x08
     cb6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	24 81       	ldd	r18, Z+4	; 0x04
     cbe:	35 81       	ldd	r19, Z+5	; 0x05
     cc0:	ec 01       	movw	r28, r24
     cc2:	3d 83       	std	Y+5, r19	; 0x05
     cc4:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     cc6:	c4 81       	ldd	r28, Z+4	; 0x04
     cc8:	d5 81       	ldd	r29, Z+5	; 0x05
     cca:	9b 83       	std	Y+3, r25	; 0x03
     ccc:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	8d 91       	ld	r24, X+
     cd2:	9c 91       	ld	r25, X
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	e8 17       	cp	r30, r24
     cd8:	f9 07       	cpc	r31, r25
     cda:	21 f4       	brne	.+8      	; 0xce4 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     cdc:	12 96       	adiw	r26, 0x02	; 2
     cde:	dc 93       	st	X, r29
     ce0:	ce 93       	st	-X, r28
     ce2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     ce4:	11 86       	std	Z+9, r1	; 0x09
     ce6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     ce8:	8c 91       	ld	r24, X
     cea:	81 50       	subi	r24, 0x01	; 1
     cec:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     cee:	8c 91       	ld	r24, X
}
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     cf6:	31 e1       	ldi	r19, 0x11	; 17
     cf8:	fc 01       	movw	r30, r24
     cfa:	30 83       	st	Z, r19
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	22 e2       	ldi	r18, 0x22	; 34
     d00:	20 83       	st	Z, r18
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	a3 e3       	ldi	r26, 0x33	; 51
     d06:	a0 83       	st	Z, r26
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	60 83       	st	Z, r22
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	70 83       	st	Z, r23
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	10 82       	st	Z, r1
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	60 e8       	ldi	r22, 0x80	; 128
     d18:	60 83       	st	Z, r22
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	10 82       	st	Z, r1
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	60 83       	st	Z, r22
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	63 e0       	ldi	r22, 0x03	; 3
     d28:	60 83       	st	Z, r22
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	64 e0       	ldi	r22, 0x04	; 4
     d2e:	60 83       	st	Z, r22
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	65 e0       	ldi	r22, 0x05	; 5
     d34:	60 83       	st	Z, r22
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	66 e0       	ldi	r22, 0x06	; 6
     d3a:	60 83       	st	Z, r22
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	60 83       	st	Z, r22
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	68 e0       	ldi	r22, 0x08	; 8
     d46:	60 83       	st	Z, r22
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	69 e0       	ldi	r22, 0x09	; 9
     d4c:	60 83       	st	Z, r22
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	60 e1       	ldi	r22, 0x10	; 16
     d52:	60 83       	st	Z, r22
     d54:	31 97       	sbiw	r30, 0x01	; 1
     d56:	30 83       	st	Z, r19
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	32 e1       	ldi	r19, 0x12	; 18
     d5c:	30 83       	st	Z, r19
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	33 e1       	ldi	r19, 0x13	; 19
     d62:	30 83       	st	Z, r19
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	34 e1       	ldi	r19, 0x14	; 20
     d68:	30 83       	st	Z, r19
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	35 e1       	ldi	r19, 0x15	; 21
     d6e:	30 83       	st	Z, r19
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	36 e1       	ldi	r19, 0x16	; 22
     d74:	30 83       	st	Z, r19
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	37 e1       	ldi	r19, 0x17	; 23
     d7a:	30 83       	st	Z, r19
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	38 e1       	ldi	r19, 0x18	; 24
     d80:	30 83       	st	Z, r19
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	39 e1       	ldi	r19, 0x19	; 25
     d86:	30 83       	st	Z, r19
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	30 e2       	ldi	r19, 0x20	; 32
     d8c:	30 83       	st	Z, r19
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	31 e2       	ldi	r19, 0x21	; 33
     d92:	30 83       	st	Z, r19
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	20 83       	st	Z, r18
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	23 e2       	ldi	r18, 0x23	; 35
     d9c:	20 83       	st	Z, r18
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	40 83       	st	Z, r20
     da2:	31 97       	sbiw	r30, 0x01	; 1
     da4:	50 83       	st	Z, r21
     da6:	31 97       	sbiw	r30, 0x01	; 1
     da8:	26 e2       	ldi	r18, 0x26	; 38
     daa:	20 83       	st	Z, r18
     dac:	31 97       	sbiw	r30, 0x01	; 1
     dae:	27 e2       	ldi	r18, 0x27	; 39
     db0:	20 83       	st	Z, r18
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	28 e2       	ldi	r18, 0x28	; 40
     db6:	20 83       	st	Z, r18
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	29 e2       	ldi	r18, 0x29	; 41
     dbc:	20 83       	st	Z, r18
     dbe:	31 97       	sbiw	r30, 0x01	; 1
     dc0:	20 e3       	ldi	r18, 0x30	; 48
     dc2:	20 83       	st	Z, r18
     dc4:	31 97       	sbiw	r30, 0x01	; 1
     dc6:	21 e3       	ldi	r18, 0x31	; 49
     dc8:	20 83       	st	Z, r18
     dca:	86 97       	sbiw	r24, 0x26	; 38
     dcc:	08 95       	ret

00000dce <xPortStartScheduler>:
     dce:	a8 95       	wdr
     dd0:	90 ec       	ldi	r25, 0xC0	; 192
     dd2:	88 e1       	ldi	r24, 0x18	; 24
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	a8 95       	wdr
     dda:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
     de4:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
     de8:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
     dec:	cd 91       	ld	r28, X+
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	dd 91       	ld	r29, X+
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	ff 91       	pop	r31
     df6:	ef 91       	pop	r30
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	7f 90       	pop	r7
     e26:	6f 90       	pop	r6
     e28:	5f 90       	pop	r5
     e2a:	4f 90       	pop	r4
     e2c:	3f 90       	pop	r3
     e2e:	2f 90       	pop	r2
     e30:	1f 90       	pop	r1
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	08 95       	ret
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	08 95       	ret

00000e3e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	0f 92       	push	r0
     e46:	1f 92       	push	r1
     e48:	11 24       	eor	r1, r1
     e4a:	2f 92       	push	r2
     e4c:	3f 92       	push	r3
     e4e:	4f 92       	push	r4
     e50:	5f 92       	push	r5
     e52:	6f 92       	push	r6
     e54:	7f 92       	push	r7
     e56:	8f 92       	push	r8
     e58:	9f 92       	push	r9
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
     e8a:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
     e8e:	0d b6       	in	r0, 0x3d	; 61
     e90:	0d 92       	st	X+, r0
     e92:	0e b6       	in	r0, 0x3e	; 62
     e94:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     e96:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     e9a:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
     e9e:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
     ea2:	cd 91       	ld	r28, X+
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	dd 91       	ld	r29, X+
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	bf 90       	pop	r11
     ed4:	af 90       	pop	r10
     ed6:	9f 90       	pop	r9
     ed8:	8f 90       	pop	r8
     eda:	7f 90       	pop	r7
     edc:	6f 90       	pop	r6
     ede:	5f 90       	pop	r5
     ee0:	4f 90       	pop	r4
     ee2:	3f 90       	pop	r3
     ee4:	2f 90       	pop	r2
     ee6:	1f 90       	pop	r1
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     eee:	08 95       	ret

00000ef0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     ef0:	0f 92       	push	r0
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	0f 92       	push	r0
     ef8:	1f 92       	push	r1
     efa:	11 24       	eor	r1, r1
     efc:	2f 92       	push	r2
     efe:	3f 92       	push	r3
     f00:	4f 92       	push	r4
     f02:	5f 92       	push	r5
     f04:	6f 92       	push	r6
     f06:	7f 92       	push	r7
     f08:	8f 92       	push	r8
     f0a:	9f 92       	push	r9
     f0c:	af 92       	push	r10
     f0e:	bf 92       	push	r11
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	2f 93       	push	r18
     f1e:	3f 93       	push	r19
     f20:	4f 93       	push	r20
     f22:	5f 93       	push	r21
     f24:	6f 93       	push	r22
     f26:	7f 93       	push	r23
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
     f2c:	af 93       	push	r26
     f2e:	bf 93       	push	r27
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
     f3c:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
     f40:	0d b6       	in	r0, 0x3d	; 61
     f42:	0d 92       	st	X+, r0
     f44:	0e b6       	in	r0, 0x3e	; 62
     f46:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     f48:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     f4a:	0e 94 57 0c 	call	0x18ae	; 0x18ae <xTaskIncrementTick>
     f4e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     f50:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     f54:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
     f58:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
     f5c:	cd 91       	ld	r28, X+
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	dd 91       	ld	r29, X+
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	1f 91       	pop	r17
     f82:	0f 91       	pop	r16
     f84:	ff 90       	pop	r15
     f86:	ef 90       	pop	r14
     f88:	df 90       	pop	r13
     f8a:	cf 90       	pop	r12
     f8c:	bf 90       	pop	r11
     f8e:	af 90       	pop	r10
     f90:	9f 90       	pop	r9
     f92:	8f 90       	pop	r8
     f94:	7f 90       	pop	r7
     f96:	6f 90       	pop	r6
     f98:	5f 90       	pop	r5
     f9a:	4f 90       	pop	r4
     f9c:	3f 90       	pop	r3
     f9e:	2f 90       	pop	r2
     fa0:	1f 90       	pop	r1
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     fa8:	08 95       	ret

00000faa <__vector_6>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     faa:	0e 94 78 07 	call	0xef0	; 0xef0 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     fae:	18 95       	reti

00000fb0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	0f 92       	push	r0
     fb6:	fc 01       	movw	r30, r24
     fb8:	92 8d       	ldd	r25, Z+26	; 0x1a
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	91 11       	cpse	r25, r1
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	08 95       	ret

00000fc6 <prvCopyDataToQueue>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ec 01       	movw	r28, r24
     fd0:	04 2f       	mov	r16, r20
     fd2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     fd4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     fd6:	41 11       	cpse	r20, r1
     fd8:	0b c0       	rjmp	.+22     	; 0xff0 <prvCopyDataToQueue+0x2a>
     fda:	88 81       	ld	r24, Y
     fdc:	99 81       	ldd	r25, Y+1	; 0x01
     fde:	89 2b       	or	r24, r25
     fe0:	e9 f5       	brne	.+122    	; 0x105c <prvCopyDataToQueue+0x96>
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <xTaskPriorityDisinherit>
     fea:	1d 82       	std	Y+5, r1	; 0x05
     fec:	1c 82       	std	Y+4, r1	; 0x04
     fee:	37 c0       	rjmp	.+110    	; 0x105e <prvCopyDataToQueue+0x98>
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	01 11       	cpse	r16, r1
     ff4:	15 c0       	rjmp	.+42     	; 0x1020 <prvCopyDataToQueue+0x5a>
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <memcpy>
     ffe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	82 0f       	add	r24, r18
    1006:	91 1d       	adc	r25, r1
    1008:	9b 83       	std	Y+3, r25	; 0x03
    100a:	8a 83       	std	Y+2, r24	; 0x02
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	82 17       	cp	r24, r18
    1012:	93 07       	cpc	r25, r19
    1014:	18 f1       	brcs	.+70     	; 0x105c <prvCopyDataToQueue+0x96>
    1016:	88 81       	ld	r24, Y
    1018:	99 81       	ldd	r25, Y+1	; 0x01
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	1e c0       	rjmp	.+60     	; 0x105c <prvCopyDataToQueue+0x96>
    1020:	8e 81       	ldd	r24, Y+6	; 0x06
    1022:	9f 81       	ldd	r25, Y+7	; 0x07
    1024:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <memcpy>
    1028:	8c 8d       	ldd	r24, Y+28	; 0x1c
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	91 95       	neg	r25
    102e:	81 95       	neg	r24
    1030:	91 09       	sbc	r25, r1
    1032:	2e 81       	ldd	r18, Y+6	; 0x06
    1034:	3f 81       	ldd	r19, Y+7	; 0x07
    1036:	28 0f       	add	r18, r24
    1038:	39 1f       	adc	r19, r25
    103a:	3f 83       	std	Y+7, r19	; 0x07
    103c:	2e 83       	std	Y+6, r18	; 0x06
    103e:	48 81       	ld	r20, Y
    1040:	59 81       	ldd	r21, Y+1	; 0x01
    1042:	24 17       	cp	r18, r20
    1044:	35 07       	cpc	r19, r21
    1046:	30 f4       	brcc	.+12     	; 0x1054 <prvCopyDataToQueue+0x8e>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	9f 83       	std	Y+7, r25	; 0x07
    1052:	8e 83       	std	Y+6, r24	; 0x06
    1054:	02 30       	cpi	r16, 0x02	; 2
    1056:	11 f4       	brne	.+4      	; 0x105c <prvCopyDataToQueue+0x96>
    1058:	11 11       	cpse	r17, r1
    105a:	11 50       	subi	r17, 0x01	; 1
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	1f 5f       	subi	r17, 0xFF	; 255
    1060:	1a 8f       	std	Y+26, r17	; 0x1a
    1062:	df 91       	pop	r29
    1064:	cf 91       	pop	r28
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	08 95       	ret

0000106c <prvCopyDataFromQueue>:
    106c:	fc 01       	movw	r30, r24
    106e:	cb 01       	movw	r24, r22
    1070:	44 8d       	ldd	r20, Z+28	; 0x1c
    1072:	44 23       	and	r20, r20
    1074:	a1 f0       	breq	.+40     	; 0x109e <prvCopyDataFromQueue+0x32>
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	26 81       	ldd	r18, Z+6	; 0x06
    107a:	37 81       	ldd	r19, Z+7	; 0x07
    107c:	24 0f       	add	r18, r20
    107e:	35 1f       	adc	r19, r21
    1080:	37 83       	std	Z+7, r19	; 0x07
    1082:	26 83       	std	Z+6, r18	; 0x06
    1084:	64 81       	ldd	r22, Z+4	; 0x04
    1086:	75 81       	ldd	r23, Z+5	; 0x05
    1088:	26 17       	cp	r18, r22
    108a:	37 07       	cpc	r19, r23
    108c:	20 f0       	brcs	.+8      	; 0x1096 <prvCopyDataFromQueue+0x2a>
    108e:	20 81       	ld	r18, Z
    1090:	31 81       	ldd	r19, Z+1	; 0x01
    1092:	37 83       	std	Z+7, r19	; 0x07
    1094:	26 83       	std	Z+6, r18	; 0x06
    1096:	66 81       	ldd	r22, Z+6	; 0x06
    1098:	77 81       	ldd	r23, Z+7	; 0x07
    109a:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <memcpy>
    109e:	08 95       	ret

000010a0 <prvUnlockQueue>:
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	0f 92       	push	r0
    10b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    10b4:	7c 01       	movw	r14, r24
    10b6:	81 e1       	ldi	r24, 0x11	; 17
    10b8:	e8 0e       	add	r14, r24
    10ba:	f1 1c       	adc	r15, r1
    10bc:	11 16       	cp	r1, r17
    10be:	5c f4       	brge	.+22     	; 0x10d6 <prvUnlockQueue+0x36>
    10c0:	89 89       	ldd	r24, Y+17	; 0x11
    10c2:	88 23       	and	r24, r24
    10c4:	41 f0       	breq	.+16     	; 0x10d6 <prvUnlockQueue+0x36>
    10c6:	c7 01       	movw	r24, r14
    10c8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    10cc:	81 11       	cpse	r24, r1
    10ce:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <vTaskMissedYield>
    10d2:	11 50       	subi	r17, 0x01	; 1
    10d4:	f3 cf       	rjmp	.-26     	; 0x10bc <prvUnlockQueue+0x1c>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	8e 8f       	std	Y+30, r24	; 0x1e
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	0f 92       	push	r0
    10e4:	1d 8d       	ldd	r17, Y+29	; 0x1d
    10e6:	7e 01       	movw	r14, r28
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	e8 0e       	add	r14, r24
    10ec:	f1 1c       	adc	r15, r1
    10ee:	11 16       	cp	r1, r17
    10f0:	5c f4       	brge	.+22     	; 0x1108 <prvUnlockQueue+0x68>
    10f2:	88 85       	ldd	r24, Y+8	; 0x08
    10f4:	88 23       	and	r24, r24
    10f6:	41 f0       	breq	.+16     	; 0x1108 <prvUnlockQueue+0x68>
    10f8:	c7 01       	movw	r24, r14
    10fa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    10fe:	81 11       	cpse	r24, r1
    1100:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <vTaskMissedYield>
    1104:	11 50       	subi	r17, 0x01	; 1
    1106:	f3 cf       	rjmp	.-26     	; 0x10ee <prvUnlockQueue+0x4e>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	8d 8f       	std	Y+29, r24	; 0x1d
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	08 95       	ret

0000111c <xQueueGenericReset>:
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	48 81       	ld	r20, Y
    112a:	59 81       	ldd	r21, Y+1	; 0x01
    112c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1130:	9a 01       	movw	r18, r20
    1132:	87 9f       	mul	r24, r23
    1134:	20 0d       	add	r18, r0
    1136:	31 1d       	adc	r19, r1
    1138:	11 24       	eor	r1, r1
    113a:	3d 83       	std	Y+5, r19	; 0x05
    113c:	2c 83       	std	Y+4, r18	; 0x04
    113e:	1a 8e       	std	Y+26, r1	; 0x1a
    1140:	5b 83       	std	Y+3, r21	; 0x03
    1142:	4a 83       	std	Y+2, r20	; 0x02
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	78 9f       	mul	r23, r24
    114a:	90 01       	movw	r18, r0
    114c:	79 9f       	mul	r23, r25
    114e:	30 0d       	add	r19, r0
    1150:	11 24       	eor	r1, r1
    1152:	ca 01       	movw	r24, r20
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	9f 83       	std	Y+7, r25	; 0x07
    115a:	8e 83       	std	Y+6, r24	; 0x06
    115c:	8f ef       	ldi	r24, 0xFF	; 255
    115e:	8d 8f       	std	Y+29, r24	; 0x1d
    1160:	8e 8f       	std	Y+30, r24	; 0x1e
    1162:	61 11       	cpse	r22, r1
    1164:	0c c0       	rjmp	.+24     	; 0x117e <xQueueGenericReset+0x62>
    1166:	88 85       	ldd	r24, Y+8	; 0x08
    1168:	88 23       	and	r24, r24
    116a:	89 f0       	breq	.+34     	; 0x118e <xQueueGenericReset+0x72>
    116c:	ce 01       	movw	r24, r28
    116e:	08 96       	adiw	r24, 0x08	; 8
    1170:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    1174:	88 23       	and	r24, r24
    1176:	59 f0       	breq	.+22     	; 0x118e <xQueueGenericReset+0x72>
    1178:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    117c:	08 c0       	rjmp	.+16     	; 0x118e <xQueueGenericReset+0x72>
    117e:	ce 01       	movw	r24, r28
    1180:	08 96       	adiw	r24, 0x08	; 8
    1182:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1186:	ce 01       	movw	r24, r28
    1188:	41 96       	adiw	r24, 0x11	; 17
    118a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <xQueueGenericCreate>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	08 2f       	mov	r16, r24
    11a4:	16 2f       	mov	r17, r22
    11a6:	66 23       	and	r22, r22
    11a8:	21 f0       	breq	.+8      	; 0x11b2 <xQueueGenericCreate+0x18>
    11aa:	86 9f       	mul	r24, r22
    11ac:	c0 01       	movw	r24, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <xQueueGenericCreate+0x1c>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	4f 96       	adiw	r24, 0x1f	; 31
    11b8:	0e 94 c8 05 	call	0xb90	; 0xb90 <pvPortMalloc>
    11bc:	ec 01       	movw	r28, r24
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	71 f0       	breq	.+28     	; 0x11de <xQueueGenericCreate+0x44>
    11c2:	11 11       	cpse	r17, r1
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <xQueueGenericCreate+0x32>
    11c6:	99 83       	std	Y+1, r25	; 0x01
    11c8:	88 83       	st	Y, r24
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <xQueueGenericCreate+0x38>
    11cc:	4f 96       	adiw	r24, 0x1f	; 31
    11ce:	99 83       	std	Y+1, r25	; 0x01
    11d0:	88 83       	st	Y, r24
    11d2:	0b 8f       	std	Y+27, r16	; 0x1b
    11d4:	1c 8f       	std	Y+28, r17	; 0x1c
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	ce 01       	movw	r24, r28
    11da:	0e 94 8e 08 	call	0x111c	; 0x111c <xQueueGenericReset>
    11de:	ce 01       	movw	r24, r28
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <xQueueGenericSend>:
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <xQueueGenericSend+0x14>
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <xQueueGenericSend+0x16>
    1200:	1f 92       	push	r1
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8c 01       	movw	r16, r24
    1208:	6b 01       	movw	r12, r22
    120a:	5d 83       	std	Y+5, r21	; 0x05
    120c:	4c 83       	std	Y+4, r20	; 0x04
    120e:	f2 2e       	mov	r15, r18
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	58 01       	movw	r10, r16
    1214:	98 e0       	ldi	r25, 0x08	; 8
    1216:	a9 0e       	add	r10, r25
    1218:	b1 1c       	adc	r11, r1
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	0f 92       	push	r0
    1220:	f8 01       	movw	r30, r16
    1222:	22 8d       	ldd	r18, Z+26	; 0x1a
    1224:	93 8d       	ldd	r25, Z+27	; 0x1b
    1226:	29 17       	cp	r18, r25
    1228:	18 f0       	brcs	.+6      	; 0x1230 <xQueueGenericSend+0x46>
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	ff 12       	cpse	r15, r31
    122e:	14 c0       	rjmp	.+40     	; 0x1258 <xQueueGenericSend+0x6e>
    1230:	4f 2d       	mov	r20, r15
    1232:	b6 01       	movw	r22, r12
    1234:	c8 01       	movw	r24, r16
    1236:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <prvCopyDataToQueue>
    123a:	f8 01       	movw	r30, r16
    123c:	91 89       	ldd	r25, Z+17	; 0x11
    123e:	99 23       	and	r25, r25
    1240:	21 f0       	breq	.+8      	; 0x124a <xQueueGenericSend+0x60>
    1242:	c8 01       	movw	r24, r16
    1244:	41 96       	adiw	r24, 0x11	; 17
    1246:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    124a:	81 11       	cpse	r24, r1
    124c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	50 c0       	rjmp	.+160    	; 0x12f8 <xQueueGenericSend+0x10e>
    1258:	2c 81       	ldd	r18, Y+4	; 0x04
    125a:	3d 81       	ldd	r19, Y+5	; 0x05
    125c:	23 2b       	or	r18, r19
    125e:	19 f4       	brne	.+6      	; 0x1266 <xQueueGenericSend+0x7c>
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	48 c0       	rjmp	.+144    	; 0x12f6 <xQueueGenericSend+0x10c>
    1266:	81 11       	cpse	r24, r1
    1268:	04 c0       	rjmp	.+8      	; 0x1272 <xQueueGenericSend+0x88>
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <vTaskInternalSetTimeOutState>
    1272:	0f 90       	pop	r0
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	0f 92       	push	r0
    1280:	f8 01       	movw	r30, r16
    1282:	85 8d       	ldd	r24, Z+29	; 0x1d
    1284:	8f 3f       	cpi	r24, 0xFF	; 255
    1286:	09 f4       	brne	.+2      	; 0x128a <xQueueGenericSend+0xa0>
    1288:	15 8e       	std	Z+29, r1	; 0x1d
    128a:	f8 01       	movw	r30, r16
    128c:	86 8d       	ldd	r24, Z+30	; 0x1e
    128e:	8f 3f       	cpi	r24, 0xFF	; 255
    1290:	09 f4       	brne	.+2      	; 0x1294 <xQueueGenericSend+0xaa>
    1292:	16 8e       	std	Z+30, r1	; 0x1e
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	be 01       	movw	r22, r28
    129a:	6c 5f       	subi	r22, 0xFC	; 252
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	ce 01       	movw	r24, r28
    12a0:	01 96       	adiw	r24, 0x01	; 1
    12a2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xTaskCheckForTimeOut>
    12a6:	81 11       	cpse	r24, r1
    12a8:	21 c0       	rjmp	.+66     	; 0x12ec <xQueueGenericSend+0x102>
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	0f 92       	push	r0
    12b0:	f8 01       	movw	r30, r16
    12b2:	92 8d       	ldd	r25, Z+26	; 0x1a
    12b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	98 13       	cpse	r25, r24
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <xQueueGenericSend+0xf6>
    12be:	6c 81       	ldd	r22, Y+4	; 0x04
    12c0:	7d 81       	ldd	r23, Y+5	; 0x05
    12c2:	c5 01       	movw	r24, r10
    12c4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <vTaskPlaceOnEventList>
    12c8:	c8 01       	movw	r24, r16
    12ca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    12ce:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    12d2:	88 23       	and	r24, r24
    12d4:	11 f0       	breq	.+4      	; 0x12da <xQueueGenericSend+0xf0>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	a0 cf       	rjmp	.-192    	; 0x121a <xQueueGenericSend+0x30>
    12da:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    12de:	fb cf       	rjmp	.-10     	; 0x12d6 <xQueueGenericSend+0xec>
    12e0:	c8 01       	movw	r24, r16
    12e2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    12e6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    12ea:	f5 cf       	rjmp	.-22     	; 0x12d6 <xQueueGenericSend+0xec>
    12ec:	c8 01       	movw	r24, r16
    12ee:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    12f2:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	df 90       	pop	r13
    130e:	cf 90       	pop	r12
    1310:	bf 90       	pop	r11
    1312:	af 90       	pop	r10
    1314:	08 95       	ret

00001316 <xQueueGenericSendFromISR>:
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	ec 01       	movw	r28, r24
    1322:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1326:	98 17       	cp	r25, r24
    1328:	10 f0       	brcs	.+4      	; 0x132e <xQueueGenericSendFromISR+0x18>
    132a:	22 30       	cpi	r18, 0x02	; 2
    132c:	e1 f4       	brne	.+56     	; 0x1366 <xQueueGenericSendFromISR+0x50>
    132e:	7a 01       	movw	r14, r20
    1330:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1332:	42 2f       	mov	r20, r18
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <prvCopyDataToQueue>
    133a:	1f 3f       	cpi	r17, 0xFF	; 255
    133c:	81 f4       	brne	.+32     	; 0x135e <xQueueGenericSendFromISR+0x48>
    133e:	89 89       	ldd	r24, Y+17	; 0x11
    1340:	88 23       	and	r24, r24
    1342:	79 f0       	breq	.+30     	; 0x1362 <xQueueGenericSendFromISR+0x4c>
    1344:	ce 01       	movw	r24, r28
    1346:	41 96       	adiw	r24, 0x11	; 17
    1348:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    134c:	88 23       	and	r24, r24
    134e:	49 f0       	breq	.+18     	; 0x1362 <xQueueGenericSendFromISR+0x4c>
    1350:	e1 14       	cp	r14, r1
    1352:	f1 04       	cpc	r15, r1
    1354:	31 f0       	breq	.+12     	; 0x1362 <xQueueGenericSendFromISR+0x4c>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	f7 01       	movw	r30, r14
    135a:	80 83       	st	Z, r24
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <xQueueGenericSendFromISR+0x52>
    135e:	1f 5f       	subi	r17, 0xFF	; 255
    1360:	1e 8f       	std	Y+30, r17	; 0x1e
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <xQueueGenericSendFromISR+0x52>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	08 95       	ret

00001374 <xQueueReceive>:
    1374:	af 92       	push	r10
    1376:	bf 92       	push	r11
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 d0       	rcall	.+0      	; 0x1388 <xQueueReceive+0x14>
    1388:	00 d0       	rcall	.+0      	; 0x138a <xQueueReceive+0x16>
    138a:	1f 92       	push	r1
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	8c 01       	movw	r16, r24
    1392:	6b 01       	movw	r12, r22
    1394:	5d 83       	std	Y+5, r21	; 0x05
    1396:	4c 83       	std	Y+4, r20	; 0x04
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	58 01       	movw	r10, r16
    139c:	91 e1       	ldi	r25, 0x11	; 17
    139e:	a9 0e       	add	r10, r25
    13a0:	b1 1c       	adc	r11, r1
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	0f 92       	push	r0
    13a8:	f8 01       	movw	r30, r16
    13aa:	f2 8c       	ldd	r15, Z+26	; 0x1a
    13ac:	ff 20       	and	r15, r15
    13ae:	a9 f0       	breq	.+42     	; 0x13da <xQueueReceive+0x66>
    13b0:	b6 01       	movw	r22, r12
    13b2:	c8 01       	movw	r24, r16
    13b4:	0e 94 36 08 	call	0x106c	; 0x106c <prvCopyDataFromQueue>
    13b8:	fa 94       	dec	r15
    13ba:	f8 01       	movw	r30, r16
    13bc:	f2 8e       	std	Z+26, r15	; 0x1a
    13be:	80 85       	ldd	r24, Z+8	; 0x08
    13c0:	88 23       	and	r24, r24
    13c2:	39 f0       	breq	.+14     	; 0x13d2 <xQueueReceive+0x5e>
    13c4:	c8 01       	movw	r24, r16
    13c6:	08 96       	adiw	r24, 0x08	; 8
    13c8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <xTaskRemoveFromEventList>
    13cc:	81 11       	cpse	r24, r1
    13ce:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    13d2:	0f 90       	pop	r0
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	50 c0       	rjmp	.+160    	; 0x147a <xQueueReceive+0x106>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	23 2b       	or	r18, r19
    13e0:	19 f4       	brne	.+6      	; 0x13e8 <xQueueReceive+0x74>
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	48 c0       	rjmp	.+144    	; 0x1478 <xQueueReceive+0x104>
    13e8:	81 11       	cpse	r24, r1
    13ea:	04 c0       	rjmp	.+8      	; 0x13f4 <xQueueReceive+0x80>
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <vTaskInternalSetTimeOutState>
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	0f 92       	push	r0
    1402:	f8 01       	movw	r30, r16
    1404:	85 8d       	ldd	r24, Z+29	; 0x1d
    1406:	8f 3f       	cpi	r24, 0xFF	; 255
    1408:	09 f4       	brne	.+2      	; 0x140c <xQueueReceive+0x98>
    140a:	15 8e       	std	Z+29, r1	; 0x1d
    140c:	f8 01       	movw	r30, r16
    140e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1410:	8f 3f       	cpi	r24, 0xFF	; 255
    1412:	09 f4       	brne	.+2      	; 0x1416 <xQueueReceive+0xa2>
    1414:	16 8e       	std	Z+30, r1	; 0x1e
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	be 01       	movw	r22, r28
    141c:	6c 5f       	subi	r22, 0xFC	; 252
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <xTaskCheckForTimeOut>
    1428:	81 11       	cpse	r24, r1
    142a:	1c c0       	rjmp	.+56     	; 0x1464 <xQueueReceive+0xf0>
    142c:	c8 01       	movw	r24, r16
    142e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <prvIsQueueEmpty>
    1432:	88 23       	and	r24, r24
    1434:	89 f0       	breq	.+34     	; 0x1458 <xQueueReceive+0xe4>
    1436:	6c 81       	ldd	r22, Y+4	; 0x04
    1438:	7d 81       	ldd	r23, Y+5	; 0x05
    143a:	c5 01       	movw	r24, r10
    143c:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <vTaskPlaceOnEventList>
    1440:	c8 01       	movw	r24, r16
    1442:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    1446:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    144a:	88 23       	and	r24, r24
    144c:	11 f0       	breq	.+4      	; 0x1452 <xQueueReceive+0xde>
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	a8 cf       	rjmp	.-176    	; 0x13a2 <xQueueReceive+0x2e>
    1452:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    1456:	fb cf       	rjmp	.-10     	; 0x144e <xQueueReceive+0xda>
    1458:	c8 01       	movw	r24, r16
    145a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    145e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    1462:	f5 cf       	rjmp	.-22     	; 0x144e <xQueueReceive+0xda>
    1464:	c8 01       	movw	r24, r16
    1466:	0e 94 50 08 	call	0x10a0	; 0x10a0 <prvUnlockQueue>
    146a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    146e:	c8 01       	movw	r24, r16
    1470:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <prvIsQueueEmpty>
    1474:	88 23       	and	r24, r24
    1476:	59 f3       	breq	.-42     	; 0x144e <xQueueReceive+0xda>
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	08 95       	ret

00001498 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	0f 92       	push	r0
    14a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a6:	8f 3f       	cpi	r24, 0xFF	; 255
    14a8:	09 f4       	brne	.+2      	; 0x14ac <vQueueWaitForMessageRestricted+0x14>
    14aa:	1d 8e       	std	Y+29, r1	; 0x1d
    14ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14ae:	8f 3f       	cpi	r24, 0xFF	; 255
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <vQueueWaitForMessageRestricted+0x1c>
    14b2:	1e 8e       	std	Y+30, r1	; 0x1e
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    14b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14ba:	81 11       	cpse	r24, r1
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    14be:	ce 01       	movw	r24, r28
    14c0:	41 96       	adiw	r24, 0x11	; 17
    14c2:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    14c6:	ce 01       	movw	r24, r28
    }
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    14cc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <prvUnlockQueue>

000014d0 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    14d0:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <pxDelayedTaskList>
    14d4:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    14d8:	80 81       	ld	r24, Z
    14da:	81 11       	cpse	r24, r1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <prvResetNextTaskUnblockTime+0x14>
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	0c c0       	rjmp	.+24     	; 0x14fc <prvResetNextTaskUnblockTime+0x2c>
    14e4:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <pxDelayedTaskList>
    14e8:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    14ec:	05 80       	ldd	r0, Z+5	; 0x05
    14ee:	f6 81       	ldd	r31, Z+6	; 0x06
    14f0:	e0 2d       	mov	r30, r0
    14f2:	06 80       	ldd	r0, Z+6	; 0x06
    14f4:	f7 81       	ldd	r31, Z+7	; 0x07
    14f6:	e0 2d       	mov	r30, r0
    14f8:	82 81       	ldd	r24, Z+2	; 0x02
    14fa:	93 81       	ldd	r25, Z+3	; 0x03
    14fc:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <xNextTaskUnblockTime+0x1>
    1500:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <xNextTaskUnblockTime>
    1504:	08 95       	ret

00001506 <prvAddCurrentTaskToDelayedList>:
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	ec 01       	movw	r28, r24
    1512:	f6 2e       	mov	r15, r22
    1514:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <xTickCount>
    1518:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <xTickCount+0x1>
    151c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1520:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1524:	02 96       	adiw	r24, 0x02	; 2
    1526:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    152a:	cf 3f       	cpi	r28, 0xFF	; 255
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	d8 07       	cpc	r29, r24
    1530:	89 f4       	brne	.+34     	; 0x1554 <prvAddCurrentTaskToDelayedList+0x4e>
    1532:	ff 20       	and	r15, r15
    1534:	79 f0       	breq	.+30     	; 0x1554 <prvAddCurrentTaskToDelayedList+0x4e>
    1536:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <pxCurrentTCB>
    153a:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    153e:	6e 5f       	subi	r22, 0xFE	; 254
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	89 e6       	ldi	r24, 0x69	; 105
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <vListInsertEnd>
    1554:	c0 0f       	add	r28, r16
    1556:	d1 1f       	adc	r29, r17
    1558:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    155c:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1560:	d3 83       	std	Z+3, r29	; 0x03
    1562:	c2 83       	std	Z+2, r28	; 0x02
    1564:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1568:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    156c:	c0 17       	cp	r28, r16
    156e:	d1 07       	cpc	r29, r17
    1570:	68 f4       	brcc	.+26     	; 0x158c <prvAddCurrentTaskToDelayedList+0x86>
    1572:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <pxOverflowDelayedTaskList>
    1576:	90 91 86 03 	lds	r25, 0x0386	; 0x800386 <pxOverflowDelayedTaskList+0x1>
    157a:	6e 5f       	subi	r22, 0xFE	; 254
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <vListInsert>
    158c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <pxDelayedTaskList>
    1590:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    1594:	6e 5f       	subi	r22, 0xFE	; 254
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vListInsert>
    159c:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <xNextTaskUnblockTime>
    15a0:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <xNextTaskUnblockTime+0x1>
    15a4:	c8 17       	cp	r28, r24
    15a6:	d9 07       	cpc	r29, r25
    15a8:	20 f4       	brcc	.+8      	; 0x15b2 <prvAddCurrentTaskToDelayedList+0xac>
    15aa:	d0 93 5f 03 	sts	0x035F, r29	; 0x80035f <xNextTaskUnblockTime+0x1>
    15ae:	c0 93 5e 03 	sts	0x035E, r28	; 0x80035e <xNextTaskUnblockTime>
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	08 95       	ret

000015be <prvIdleTask>:
    15be:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <uxDeletedTasksWaitingCleanUp>
    15c2:	88 23       	and	r24, r24
    15c4:	09 f1       	breq	.+66     	; 0x1608 <prvIdleTask+0x4a>
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	0f 92       	push	r0
    15cc:	e0 91 78 03 	lds	r30, 0x0378	; 0x800378 <xTasksWaitingTermination+0x5>
    15d0:	f0 91 79 03 	lds	r31, 0x0379	; 0x800379 <xTasksWaitingTermination+0x6>
    15d4:	c6 81       	ldd	r28, Z+6	; 0x06
    15d6:	d7 81       	ldd	r29, Z+7	; 0x07
    15d8:	ce 01       	movw	r24, r28
    15da:	02 96       	adiw	r24, 0x02	; 2
    15dc:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    15e0:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <uxCurrentNumberOfTasks>
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <uxCurrentNumberOfTasks>
    15ea:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <uxDeletedTasksWaitingCleanUp>
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <uxDeletedTasksWaitingCleanUp>
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 8d       	ldd	r25, Y+24	; 0x18
    15fc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <vPortFree>
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 db 05 	call	0xbb6	; 0xbb6 <vPortFree>
    1606:	db cf       	rjmp	.-74     	; 0x15be <prvIdleTask>
    1608:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <pxReadyTasksLists>
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	10 f0       	brcs	.+4      	; 0x1614 <prvIdleTask+0x56>
    1610:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    1614:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <vApplicationIdleHook>
    1618:	d2 cf       	rjmp	.-92     	; 0x15be <prvIdleTask>

0000161a <xTaskCreate>:
    161a:	5f 92       	push	r5
    161c:	6f 92       	push	r6
    161e:	7f 92       	push	r7
    1620:	8f 92       	push	r8
    1622:	9f 92       	push	r9
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	3c 01       	movw	r6, r24
    163a:	6b 01       	movw	r12, r22
    163c:	5a 01       	movw	r10, r20
    163e:	49 01       	movw	r8, r18
    1640:	50 2e       	mov	r5, r16
    1642:	ca 01       	movw	r24, r20
    1644:	0e 94 c8 05 	call	0xb90	; 0xb90 <pvPortMalloc>
    1648:	8c 01       	movw	r16, r24
    164a:	89 2b       	or	r24, r25
    164c:	09 f4       	brne	.+2      	; 0x1650 <xTaskCreate+0x36>
    164e:	e0 c0       	rjmp	.+448    	; 0x1810 <xTaskCreate+0x1f6>
    1650:	88 e2       	ldi	r24, 0x28	; 40
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 c8 05 	call	0xb90	; 0xb90 <pvPortMalloc>
    1658:	ec 01       	movw	r28, r24
    165a:	89 2b       	or	r24, r25
    165c:	c9 f0       	breq	.+50     	; 0x1690 <xTaskCreate+0x76>
    165e:	18 8f       	std	Y+24, r17	; 0x18
    1660:	0f 8b       	std	Y+23, r16	; 0x17
    1662:	a5 01       	movw	r20, r10
    1664:	65 ea       	ldi	r22, 0xA5	; 165
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <memset>
    166e:	21 e0       	ldi	r18, 0x01	; 1
    1670:	a2 1a       	sub	r10, r18
    1672:	b1 08       	sbc	r11, r1
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	a8 0e       	add	r10, r24
    167a:	b9 1e       	adc	r11, r25
    167c:	c1 14       	cp	r12, r1
    167e:	d1 04       	cpc	r13, r1
    1680:	c9 f0       	breq	.+50     	; 0x16b4 <xTaskCreate+0x9a>
    1682:	be 01       	movw	r22, r28
    1684:	67 5e       	subi	r22, 0xE7	; 231
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	f6 01       	movw	r30, r12
    168a:	c6 01       	movw	r24, r12
    168c:	08 96       	adiw	r24, 0x08	; 8
    168e:	07 c0       	rjmp	.+14     	; 0x169e <xTaskCreate+0x84>
    1690:	c8 01       	movw	r24, r16
    1692:	0e 94 db 05 	call	0xbb6	; 0xbb6 <vPortFree>
    1696:	bc c0       	rjmp	.+376    	; 0x1810 <xTaskCreate+0x1f6>
    1698:	e8 17       	cp	r30, r24
    169a:	f9 07       	cpc	r31, r25
    169c:	49 f0       	breq	.+18     	; 0x16b0 <xTaskCreate+0x96>
    169e:	9f 01       	movw	r18, r30
    16a0:	41 91       	ld	r20, Z+
    16a2:	db 01       	movw	r26, r22
    16a4:	4d 93       	st	X+, r20
    16a6:	bd 01       	movw	r22, r26
    16a8:	d9 01       	movw	r26, r18
    16aa:	2c 91       	ld	r18, X
    16ac:	21 11       	cpse	r18, r1
    16ae:	f4 cf       	rjmp	.-24     	; 0x1698 <xTaskCreate+0x7e>
    16b0:	18 a2       	std	Y+32, r1	; 0x20
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <xTaskCreate+0x9c>
    16b4:	19 8e       	std	Y+25, r1	; 0x19
    16b6:	05 2d       	mov	r16, r5
    16b8:	04 30       	cpi	r16, 0x04	; 4
    16ba:	08 f0       	brcs	.+2      	; 0x16be <xTaskCreate+0xa4>
    16bc:	03 e0       	ldi	r16, 0x03	; 3
    16be:	0e 8b       	std	Y+22, r16	; 0x16
    16c0:	09 a3       	std	Y+33, r16	; 0x21
    16c2:	1a a2       	std	Y+34, r1	; 0x22
    16c4:	6e 01       	movw	r12, r28
    16c6:	b2 e0       	ldi	r27, 0x02	; 2
    16c8:	cb 0e       	add	r12, r27
    16ca:	d1 1c       	adc	r13, r1
    16cc:	c6 01       	movw	r24, r12
    16ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vListInitialiseItem>
    16d2:	ce 01       	movw	r24, r28
    16d4:	0c 96       	adiw	r24, 0x0c	; 12
    16d6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <vListInitialiseItem>
    16da:	d9 87       	std	Y+9, r29	; 0x09
    16dc:	c8 87       	std	Y+8, r28	; 0x08
    16de:	84 e0       	ldi	r24, 0x04	; 4
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	80 1b       	sub	r24, r16
    16e4:	91 09       	sbc	r25, r1
    16e6:	9d 87       	std	Y+13, r25	; 0x0d
    16e8:	8c 87       	std	Y+12, r24	; 0x0c
    16ea:	db 8b       	std	Y+19, r29	; 0x13
    16ec:	ca 8b       	std	Y+18, r28	; 0x12
    16ee:	1b a2       	std	Y+35, r1	; 0x23
    16f0:	1c a2       	std	Y+36, r1	; 0x24
    16f2:	1d a2       	std	Y+37, r1	; 0x25
    16f4:	1e a2       	std	Y+38, r1	; 0x26
    16f6:	1f a2       	std	Y+39, r1	; 0x27
    16f8:	a4 01       	movw	r20, r8
    16fa:	b3 01       	movw	r22, r6
    16fc:	c5 01       	movw	r24, r10
    16fe:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <pxPortInitialiseStack>
    1702:	99 83       	std	Y+1, r25	; 0x01
    1704:	88 83       	st	Y, r24
    1706:	e1 14       	cp	r14, r1
    1708:	f1 04       	cpc	r15, r1
    170a:	19 f0       	breq	.+6      	; 0x1712 <xTaskCreate+0xf8>
    170c:	f7 01       	movw	r30, r14
    170e:	d1 83       	std	Z+1, r29	; 0x01
    1710:	c0 83       	st	Z, r28
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	0f 92       	push	r0
    1718:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <uxCurrentNumberOfTasks>
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <uxCurrentNumberOfTasks>
    1722:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1726:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    172a:	89 2b       	or	r24, r25
    172c:	d1 f5       	brne	.+116    	; 0x17a2 <xTaskCreate+0x188>
    172e:	d0 93 c0 03 	sts	0x03C0, r29	; 0x8003c0 <pxCurrentTCB+0x1>
    1732:	c0 93 bf 03 	sts	0x03BF, r28	; 0x8003bf <pxCurrentTCB>
    1736:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <uxCurrentNumberOfTasks>
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	09 f0       	breq	.+2      	; 0x1740 <xTaskCreate+0x126>
    173e:	41 c0       	rjmp	.+130    	; 0x17c2 <xTaskCreate+0x1a8>
    1740:	8b e9       	ldi	r24, 0x9B	; 155
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1748:	84 ea       	ldi	r24, 0xA4	; 164
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1750:	8d ea       	ldi	r24, 0xAD	; 173
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1758:	86 eb       	ldi	r24, 0xB6	; 182
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1760:	82 e9       	ldi	r24, 0x92	; 146
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1768:	89 e8       	ldi	r24, 0x89	; 137
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1770:	8c e7       	ldi	r24, 0x7C	; 124
    1772:	93 e0       	ldi	r25, 0x03	; 3
    1774:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1778:	83 e7       	ldi	r24, 0x73	; 115
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1780:	89 e6       	ldi	r24, 0x69	; 105
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1788:	82 e9       	ldi	r24, 0x92	; 146
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <pxDelayedTaskList+0x1>
    1790:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <pxDelayedTaskList>
    1794:	89 e8       	ldi	r24, 0x89	; 137
    1796:	93 e0       	ldi	r25, 0x03	; 3
    1798:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <pxOverflowDelayedTaskList+0x1>
    179c:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <pxOverflowDelayedTaskList>
    17a0:	10 c0       	rjmp	.+32     	; 0x17c2 <xTaskCreate+0x1a8>
    17a2:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <xSchedulerRunning>
    17a6:	81 11       	cpse	r24, r1
    17a8:	0c c0       	rjmp	.+24     	; 0x17c2 <xTaskCreate+0x1a8>
    17aa:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    17ae:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    17b2:	96 89       	ldd	r25, Z+22	; 0x16
    17b4:	8e 89       	ldd	r24, Y+22	; 0x16
    17b6:	89 17       	cp	r24, r25
    17b8:	20 f0       	brcs	.+8      	; 0x17c2 <xTaskCreate+0x1a8>
    17ba:	d0 93 c0 03 	sts	0x03C0, r29	; 0x8003c0 <pxCurrentTCB+0x1>
    17be:	c0 93 bf 03 	sts	0x03BF, r28	; 0x8003bf <pxCurrentTCB>
    17c2:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <uxTaskNumber>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <uxTaskNumber>
    17cc:	8e 89       	ldd	r24, Y+22	; 0x16
    17ce:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <uxTopReadyPriority>
    17d2:	98 17       	cp	r25, r24
    17d4:	10 f4       	brcc	.+4      	; 0x17da <xTaskCreate+0x1c0>
    17d6:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    17da:	f9 e0       	ldi	r31, 0x09	; 9
    17dc:	8f 9f       	mul	r24, r31
    17de:	c0 01       	movw	r24, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	b6 01       	movw	r22, r12
    17e4:	85 56       	subi	r24, 0x65	; 101
    17e6:	9c 4f       	sbci	r25, 0xFC	; 252
    17e8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
    17ec:	0f 90       	pop	r0
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <xSchedulerRunning>
    17f4:	88 23       	and	r24, r24
    17f6:	51 f0       	breq	.+20     	; 0x180c <xTaskCreate+0x1f2>
    17f8:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    17fc:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1800:	96 89       	ldd	r25, Z+22	; 0x16
    1802:	8e 89       	ldd	r24, Y+22	; 0x16
    1804:	98 17       	cp	r25, r24
    1806:	10 f4       	brcc	.+4      	; 0x180c <xTaskCreate+0x1f2>
    1808:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <xTaskCreate+0x1f8>
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	9f 90       	pop	r9
    1828:	8f 90       	pop	r8
    182a:	7f 90       	pop	r7
    182c:	6f 90       	pop	r6
    182e:	5f 90       	pop	r5
    1830:	08 95       	ret

00001832 <vTaskStartScheduler>:
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	8c e5       	ldi	r24, 0x5C	; 92
    183a:	e8 2e       	mov	r14, r24
    183c:	83 e0       	ldi	r24, 0x03	; 3
    183e:	f8 2e       	mov	r15, r24
    1840:	00 e0       	ldi	r16, 0x00	; 0
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 ec       	ldi	r20, 0xC0	; 192
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	6c ed       	ldi	r22, 0xDC	; 220
    184c:	71 e0       	ldi	r23, 0x01	; 1
    184e:	8f ed       	ldi	r24, 0xDF	; 223
    1850:	9a e0       	ldi	r25, 0x0A	; 10
    1852:	0e 94 0d 0b 	call	0x161a	; 0x161a <xTaskCreate>
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	b1 f4       	brne	.+44     	; 0x1886 <vTaskStartScheduler+0x54>
    185a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <xTimerCreateTimerTask>
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	91 f4       	brne	.+36     	; 0x1886 <vTaskStartScheduler+0x54>
    1862:	f8 94       	cli
    1864:	2f ef       	ldi	r18, 0xFF	; 255
    1866:	3f ef       	ldi	r19, 0xFF	; 255
    1868:	30 93 5f 03 	sts	0x035F, r19	; 0x80035f <xNextTaskUnblockTime+0x1>
    186c:	20 93 5e 03 	sts	0x035E, r18	; 0x80035e <xNextTaskUnblockTime>
    1870:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <xSchedulerRunning>
    1874:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <xTickCount+0x1>
    1878:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <xTickCount>
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	0c 94 e7 06 	jmp	0xdce	; 0xdce <xPortStartScheduler>
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	08 95       	ret

0000188e <vTaskSuspendAll>:
    188e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <uxSchedulerSuspended>
    1898:	08 95       	ret

0000189a <xTaskGetTickCount>:
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	0f 92       	push	r0
    18a0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <xTickCount>
    18a4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <xTickCount+0x1>
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	08 95       	ret

000018ae <xTaskIncrementTick>:
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	ef 92       	push	r14
    18b4:	ff 92       	push	r15
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    18c2:	81 11       	cpse	r24, r1
    18c4:	8c c0       	rjmp	.+280    	; 0x19de <xTaskIncrementTick+0x130>
    18c6:	00 91 66 03 	lds	r16, 0x0366	; 0x800366 <xTickCount>
    18ca:	10 91 67 03 	lds	r17, 0x0367	; 0x800367 <xTickCount+0x1>
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	10 93 67 03 	sts	0x0367, r17	; 0x800367 <xTickCount+0x1>
    18d6:	00 93 66 03 	sts	0x0366, r16	; 0x800366 <xTickCount>
    18da:	01 15       	cp	r16, r1
    18dc:	11 05       	cpc	r17, r1
    18de:	b9 f4       	brne	.+46     	; 0x190e <xTaskIncrementTick+0x60>
    18e0:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <pxDelayedTaskList>
    18e4:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    18e8:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <pxOverflowDelayedTaskList>
    18ec:	30 91 86 03 	lds	r19, 0x0386	; 0x800386 <pxOverflowDelayedTaskList+0x1>
    18f0:	30 93 88 03 	sts	0x0388, r19	; 0x800388 <pxDelayedTaskList+0x1>
    18f4:	20 93 87 03 	sts	0x0387, r18	; 0x800387 <pxDelayedTaskList>
    18f8:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <pxOverflowDelayedTaskList+0x1>
    18fc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <pxOverflowDelayedTaskList>
    1900:	80 91 61 03 	lds	r24, 0x0361	; 0x800361 <xNumOfOverflows>
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <xNumOfOverflows>
    190a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <prvResetNextTaskUnblockTime>
    190e:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <xNextTaskUnblockTime>
    1912:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <xNextTaskUnblockTime+0x1>
    1916:	c0 e0       	ldi	r28, 0x00	; 0
    1918:	08 17       	cp	r16, r24
    191a:	19 07       	cpc	r17, r25
    191c:	08 f4       	brcc	.+2      	; 0x1920 <xTaskIncrementTick+0x72>
    191e:	4f c0       	rjmp	.+158    	; 0x19be <xTaskIncrementTick+0x110>
    1920:	d9 e0       	ldi	r29, 0x09	; 9
    1922:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <pxDelayedTaskList>
    1926:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    192a:	80 81       	ld	r24, Z
    192c:	81 11       	cpse	r24, r1
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <xTaskIncrementTick+0x88>
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	9f ef       	ldi	r25, 0xFF	; 255
    1934:	11 c0       	rjmp	.+34     	; 0x1958 <xTaskIncrementTick+0xaa>
    1936:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <pxDelayedTaskList>
    193a:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <pxDelayedTaskList+0x1>
    193e:	05 80       	ldd	r0, Z+5	; 0x05
    1940:	f6 81       	ldd	r31, Z+6	; 0x06
    1942:	e0 2d       	mov	r30, r0
    1944:	e6 80       	ldd	r14, Z+6	; 0x06
    1946:	f7 80       	ldd	r15, Z+7	; 0x07
    1948:	d7 01       	movw	r26, r14
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	8d 91       	ld	r24, X+
    194e:	9c 91       	ld	r25, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	08 17       	cp	r16, r24
    1954:	19 07       	cpc	r17, r25
    1956:	28 f4       	brcc	.+10     	; 0x1962 <xTaskIncrementTick+0xb4>
    1958:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <xNextTaskUnblockTime+0x1>
    195c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <xNextTaskUnblockTime>
    1960:	2e c0       	rjmp	.+92     	; 0x19be <xTaskIncrementTick+0x110>
    1962:	67 01       	movw	r12, r14
    1964:	b2 e0       	ldi	r27, 0x02	; 2
    1966:	cb 0e       	add	r12, r27
    1968:	d1 1c       	adc	r13, r1
    196a:	c6 01       	movw	r24, r12
    196c:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1970:	f7 01       	movw	r30, r14
    1972:	84 89       	ldd	r24, Z+20	; 0x14
    1974:	95 89       	ldd	r25, Z+21	; 0x15
    1976:	89 2b       	or	r24, r25
    1978:	21 f0       	breq	.+8      	; 0x1982 <xTaskIncrementTick+0xd4>
    197a:	c7 01       	movw	r24, r14
    197c:	0c 96       	adiw	r24, 0x0c	; 12
    197e:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1982:	d7 01       	movw	r26, r14
    1984:	56 96       	adiw	r26, 0x16	; 22
    1986:	8c 91       	ld	r24, X
    1988:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <uxTopReadyPriority>
    198c:	98 17       	cp	r25, r24
    198e:	10 f4       	brcc	.+4      	; 0x1994 <xTaskIncrementTick+0xe6>
    1990:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    1994:	d8 9f       	mul	r29, r24
    1996:	c0 01       	movw	r24, r0
    1998:	11 24       	eor	r1, r1
    199a:	b6 01       	movw	r22, r12
    199c:	85 56       	subi	r24, 0x65	; 101
    199e:	9c 4f       	sbci	r25, 0xFC	; 252
    19a0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
    19a4:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    19a8:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    19ac:	d7 01       	movw	r26, r14
    19ae:	56 96       	adiw	r26, 0x16	; 22
    19b0:	9c 91       	ld	r25, X
    19b2:	86 89       	ldd	r24, Z+22	; 0x16
    19b4:	98 17       	cp	r25, r24
    19b6:	08 f4       	brcc	.+2      	; 0x19ba <xTaskIncrementTick+0x10c>
    19b8:	b4 cf       	rjmp	.-152    	; 0x1922 <xTaskIncrementTick+0x74>
    19ba:	c1 e0       	ldi	r28, 0x01	; 1
    19bc:	b2 cf       	rjmp	.-156    	; 0x1922 <xTaskIncrementTick+0x74>
    19be:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    19c2:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    19c6:	e6 89       	ldd	r30, Z+22	; 0x16
    19c8:	b9 e0       	ldi	r27, 0x09	; 9
    19ca:	eb 9f       	mul	r30, r27
    19cc:	f0 01       	movw	r30, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	e5 56       	subi	r30, 0x65	; 101
    19d2:	fc 4f       	sbci	r31, 0xFC	; 252
    19d4:	80 81       	ld	r24, Z
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	40 f0       	brcs	.+16     	; 0x19ea <xTaskIncrementTick+0x13c>
    19da:	c1 e0       	ldi	r28, 0x01	; 1
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <xTaskIncrementTick+0x13c>
    19de:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <uxPendedTicks>
    19e2:	8f 5f       	subi	r24, 0xFF	; 255
    19e4:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <uxPendedTicks>
    19e8:	c0 e0       	ldi	r28, 0x00	; 0
    19ea:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <xYieldPending>
    19ee:	81 11       	cpse	r24, r1
    19f0:	c1 e0       	ldi	r28, 0x01	; 1
    19f2:	8c 2f       	mov	r24, r28
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	08 95       	ret

00001a06 <xTaskResumeAll>:
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	0f 92       	push	r0
    1a18:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1a1c:	81 50       	subi	r24, 0x01	; 1
    1a1e:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <uxSchedulerSuspended>
    1a22:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1a26:	88 23       	and	r24, r24
    1a28:	11 f0       	breq	.+4      	; 0x1a2e <xTaskResumeAll+0x28>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	52 c0       	rjmp	.+164    	; 0x1ad2 <xTaskResumeAll+0xcc>
    1a2e:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <uxCurrentNumberOfTasks>
    1a32:	88 23       	and	r24, r24
    1a34:	d1 f3       	breq	.-12     	; 0x1a2a <xTaskResumeAll+0x24>
    1a36:	c0 e0       	ldi	r28, 0x00	; 0
    1a38:	d0 e0       	ldi	r29, 0x00	; 0
    1a3a:	89 e0       	ldi	r24, 0x09	; 9
    1a3c:	f8 2e       	mov	r15, r24
    1a3e:	ee 24       	eor	r14, r14
    1a40:	e3 94       	inc	r14
    1a42:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <xPendingReadyList>
    1a46:	88 23       	and	r24, r24
    1a48:	51 f1       	breq	.+84     	; 0x1a9e <xTaskResumeAll+0x98>
    1a4a:	e0 91 81 03 	lds	r30, 0x0381	; 0x800381 <xPendingReadyList+0x5>
    1a4e:	f0 91 82 03 	lds	r31, 0x0382	; 0x800382 <xPendingReadyList+0x6>
    1a52:	c6 81       	ldd	r28, Z+6	; 0x06
    1a54:	d7 81       	ldd	r29, Z+7	; 0x07
    1a56:	ce 01       	movw	r24, r28
    1a58:	0c 96       	adiw	r24, 0x0c	; 12
    1a5a:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1a5e:	8e 01       	movw	r16, r28
    1a60:	0e 5f       	subi	r16, 0xFE	; 254
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	c8 01       	movw	r24, r16
    1a66:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1a6a:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6c:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <uxTopReadyPriority>
    1a70:	98 17       	cp	r25, r24
    1a72:	10 f4       	brcc	.+4      	; 0x1a78 <xTaskResumeAll+0x72>
    1a74:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    1a78:	f8 9e       	mul	r15, r24
    1a7a:	c0 01       	movw	r24, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	b8 01       	movw	r22, r16
    1a80:	85 56       	subi	r24, 0x65	; 101
    1a82:	9c 4f       	sbci	r25, 0xFC	; 252
    1a84:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
    1a88:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1a8c:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1a90:	9e 89       	ldd	r25, Y+22	; 0x16
    1a92:	86 89       	ldd	r24, Z+22	; 0x16
    1a94:	98 17       	cp	r25, r24
    1a96:	a8 f2       	brcs	.-86     	; 0x1a42 <xTaskResumeAll+0x3c>
    1a98:	e0 92 62 03 	sts	0x0362, r14	; 0x800362 <xYieldPending>
    1a9c:	d2 cf       	rjmp	.-92     	; 0x1a42 <xTaskResumeAll+0x3c>
    1a9e:	cd 2b       	or	r28, r29
    1aa0:	11 f0       	breq	.+4      	; 0x1aa6 <xTaskResumeAll+0xa0>
    1aa2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <prvResetNextTaskUnblockTime>
    1aa6:	c0 91 63 03 	lds	r28, 0x0363	; 0x800363 <uxPendedTicks>
    1aaa:	cc 23       	and	r28, r28
    1aac:	51 f0       	breq	.+20     	; 0x1ac2 <xTaskResumeAll+0xbc>
    1aae:	d1 e0       	ldi	r29, 0x01	; 1
    1ab0:	0e 94 57 0c 	call	0x18ae	; 0x18ae <xTaskIncrementTick>
    1ab4:	81 11       	cpse	r24, r1
    1ab6:	d0 93 62 03 	sts	0x0362, r29	; 0x800362 <xYieldPending>
    1aba:	c1 50       	subi	r28, 0x01	; 1
    1abc:	c9 f7       	brne	.-14     	; 0x1ab0 <xTaskResumeAll+0xaa>
    1abe:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <uxPendedTicks>
    1ac2:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <xYieldPending>
    1ac6:	88 23       	and	r24, r24
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xTaskResumeAll+0xc6>
    1aca:	af cf       	rjmp	.-162    	; 0x1a2a <xTaskResumeAll+0x24>
    1acc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	08 95       	ret

00001ae4 <vTaskDelay>:
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	89 2b       	or	r24, r25
    1aec:	19 f4       	brne	.+6      	; 0x1af4 <vTaskDelay+0x10>
    1aee:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    1af2:	0a c0       	rjmp	.+20     	; 0x1b08 <vTaskDelay+0x24>
    1af4:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
    1af8:	60 e0       	ldi	r22, 0x00	; 0
    1afa:	ce 01       	movw	r24, r28
    1afc:	0e 94 83 0a 	call	0x1506	; 0x1506 <prvAddCurrentTaskToDelayedList>
    1b00:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    1b04:	88 23       	and	r24, r24
    1b06:	99 f3       	breq	.-26     	; 0x1aee <vTaskDelay+0xa>
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <vTaskSwitchContext>:
    1b0e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1b12:	88 23       	and	r24, r24
    1b14:	21 f0       	breq	.+8      	; 0x1b1e <vTaskSwitchContext+0x10>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <xYieldPending>
    1b1c:	08 95       	ret
    1b1e:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <xYieldPending>
    1b22:	a0 91 bf 03 	lds	r26, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1b26:	b0 91 c0 03 	lds	r27, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1b2a:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1b2e:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1b32:	2d 91       	ld	r18, X+
    1b34:	3c 91       	ld	r19, X
    1b36:	87 89       	ldd	r24, Z+23	; 0x17
    1b38:	90 8d       	ldd	r25, Z+24	; 0x18
    1b3a:	82 17       	cp	r24, r18
    1b3c:	93 07       	cpc	r25, r19
    1b3e:	60 f0       	brcs	.+24     	; 0x1b58 <vTaskSwitchContext+0x4a>
    1b40:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1b44:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1b48:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1b4c:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1b50:	67 5e       	subi	r22, 0xE7	; 231
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <vApplicationStackOverflowHook>
    1b58:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <uxTopReadyPriority>
    1b5c:	69 e0       	ldi	r22, 0x09	; 9
    1b5e:	48 2f       	mov	r20, r24
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	64 9f       	mul	r22, r20
    1b64:	90 01       	movw	r18, r0
    1b66:	65 9f       	mul	r22, r21
    1b68:	30 0d       	add	r19, r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	e5 56       	subi	r30, 0x65	; 101
    1b70:	fc 4f       	sbci	r31, 0xFC	; 252
    1b72:	90 81       	ld	r25, Z
    1b74:	91 11       	cpse	r25, r1
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <vTaskSwitchContext+0x6e>
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	f1 cf       	rjmp	.-30     	; 0x1b5e <vTaskSwitchContext+0x50>
    1b7c:	a1 81       	ldd	r26, Z+1	; 0x01
    1b7e:	b2 81       	ldd	r27, Z+2	; 0x02
    1b80:	12 96       	adiw	r26, 0x02	; 2
    1b82:	0d 90       	ld	r0, X+
    1b84:	bc 91       	ld	r27, X
    1b86:	a0 2d       	mov	r26, r0
    1b88:	b2 83       	std	Z+2, r27	; 0x02
    1b8a:	a1 83       	std	Z+1, r26	; 0x01
    1b8c:	22 56       	subi	r18, 0x62	; 98
    1b8e:	3c 4f       	sbci	r19, 0xFC	; 252
    1b90:	a2 17       	cp	r26, r18
    1b92:	b3 07       	cpc	r27, r19
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <vTaskSwitchContext+0x94>
    1b96:	12 96       	adiw	r26, 0x02	; 2
    1b98:	2d 91       	ld	r18, X+
    1b9a:	3c 91       	ld	r19, X
    1b9c:	13 97       	sbiw	r26, 0x03	; 3
    1b9e:	32 83       	std	Z+2, r19	; 0x02
    1ba0:	21 83       	std	Z+1, r18	; 0x01
    1ba2:	99 e0       	ldi	r25, 0x09	; 9
    1ba4:	94 9f       	mul	r25, r20
    1ba6:	f0 01       	movw	r30, r0
    1ba8:	95 9f       	mul	r25, r21
    1baa:	f0 0d       	add	r31, r0
    1bac:	11 24       	eor	r1, r1
    1bae:	e5 56       	subi	r30, 0x65	; 101
    1bb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1bb2:	01 80       	ldd	r0, Z+1	; 0x01
    1bb4:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb6:	e0 2d       	mov	r30, r0
    1bb8:	26 81       	ldd	r18, Z+6	; 0x06
    1bba:	37 81       	ldd	r19, Z+7	; 0x07
    1bbc:	30 93 c0 03 	sts	0x03C0, r19	; 0x8003c0 <pxCurrentTCB+0x1>
    1bc0:	20 93 bf 03 	sts	0x03BF, r18	; 0x8003bf <pxCurrentTCB>
    1bc4:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    1bc8:	08 95       	ret

00001bca <vTaskPlaceOnEventList>:
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	eb 01       	movw	r28, r22
    1bd0:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1bd4:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1bd8:	64 5f       	subi	r22, 0xF4	; 244
    1bda:	7f 4f       	sbci	r23, 0xFF	; 255
    1bdc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vListInsert>
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	ce 01       	movw	r24, r28
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <prvAddCurrentTaskToDelayedList>

00001bec <vTaskPlaceOnEventListRestricted>:
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	eb 01       	movw	r28, r22
    1bf4:	14 2f       	mov	r17, r20
    1bf6:	60 91 bf 03 	lds	r22, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1bfa:	70 91 c0 03 	lds	r23, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1bfe:	64 5f       	subi	r22, 0xF4	; 244
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
    1c06:	11 23       	and	r17, r17
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <vTaskPlaceOnEventListRestricted+0x22>
    1c0a:	cf ef       	ldi	r28, 0xFF	; 255
    1c0c:	df ef       	ldi	r29, 0xFF	; 255
    1c0e:	61 2f       	mov	r22, r17
    1c10:	ce 01       	movw	r24, r28
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <prvAddCurrentTaskToDelayedList>

00001c1c <xTaskRemoveFromEventList>:
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	dc 01       	movw	r26, r24
    1c26:	15 96       	adiw	r26, 0x05	; 5
    1c28:	ed 91       	ld	r30, X+
    1c2a:	fc 91       	ld	r31, X
    1c2c:	16 97       	sbiw	r26, 0x06	; 6
    1c2e:	c6 81       	ldd	r28, Z+6	; 0x06
    1c30:	d7 81       	ldd	r29, Z+7	; 0x07
    1c32:	8e 01       	movw	r16, r28
    1c34:	04 5f       	subi	r16, 0xF4	; 244
    1c36:	1f 4f       	sbci	r17, 0xFF	; 255
    1c38:	c8 01       	movw	r24, r16
    1c3a:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1c3e:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1c42:	81 11       	cpse	r24, r1
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <xTaskRemoveFromEventList+0x52>
    1c46:	0a 50       	subi	r16, 0x0A	; 10
    1c48:	11 09       	sbc	r17, r1
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    1c50:	8e 89       	ldd	r24, Y+22	; 0x16
    1c52:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <uxTopReadyPriority>
    1c56:	98 17       	cp	r25, r24
    1c58:	10 f4       	brcc	.+4      	; 0x1c5e <xTaskRemoveFromEventList+0x42>
    1c5a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    1c5e:	b9 e0       	ldi	r27, 0x09	; 9
    1c60:	8b 9f       	mul	r24, r27
    1c62:	c0 01       	movw	r24, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	b8 01       	movw	r22, r16
    1c68:	85 56       	subi	r24, 0x65	; 101
    1c6a:	9c 4f       	sbci	r25, 0xFC	; 252
    1c6c:	03 c0       	rjmp	.+6      	; 0x1c74 <xTaskRemoveFromEventList+0x58>
    1c6e:	b8 01       	movw	r22, r16
    1c70:	8c e7       	ldi	r24, 0x7C	; 124
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
    1c78:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <pxCurrentTCB>
    1c7c:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <pxCurrentTCB+0x1>
    1c80:	9e 89       	ldd	r25, Y+22	; 0x16
    1c82:	86 89       	ldd	r24, Z+22	; 0x16
    1c84:	89 17       	cp	r24, r25
    1c86:	20 f4       	brcc	.+8      	; 0x1c90 <xTaskRemoveFromEventList+0x74>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <xYieldPending>
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <xTaskRemoveFromEventList+0x76>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

00001c9c <vTaskInternalSetTimeOutState>:
    1c9c:	20 91 61 03 	lds	r18, 0x0361	; 0x800361 <xNumOfOverflows>
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	20 83       	st	Z, r18
    1ca4:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <xTickCount>
    1ca8:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <xTickCount+0x1>
    1cac:	32 83       	std	Z+2, r19	; 0x02
    1cae:	21 83       	std	Z+1, r18	; 0x01
    1cb0:	08 95       	ret

00001cb2 <xTaskCheckForTimeOut>:
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	0f 92       	push	r0
    1cbc:	40 91 66 03 	lds	r20, 0x0366	; 0x800366 <xTickCount>
    1cc0:	50 91 67 03 	lds	r21, 0x0367	; 0x800367 <xTickCount+0x1>
    1cc4:	db 01       	movw	r26, r22
    1cc6:	2d 91       	ld	r18, X+
    1cc8:	3c 91       	ld	r19, X
    1cca:	2f 3f       	cpi	r18, 0xFF	; 255
    1ccc:	bf ef       	ldi	r27, 0xFF	; 255
    1cce:	3b 07       	cpc	r19, r27
    1cd0:	d9 f0       	breq	.+54     	; 0x1d08 <xTaskCheckForTimeOut+0x56>
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd8:	a0 91 61 03 	lds	r26, 0x0361	; 0x800361 <xNumOfOverflows>
    1cdc:	b8 81       	ld	r27, Y
    1cde:	ba 17       	cp	r27, r26
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <xTaskCheckForTimeOut+0x36>
    1ce2:	4e 17       	cp	r20, r30
    1ce4:	5f 07       	cpc	r21, r31
    1ce6:	90 f4       	brcc	.+36     	; 0x1d0c <xTaskCheckForTimeOut+0x5a>
    1ce8:	4e 1b       	sub	r20, r30
    1cea:	5f 0b       	sbc	r21, r31
    1cec:	fb 01       	movw	r30, r22
    1cee:	42 17       	cp	r20, r18
    1cf0:	53 07       	cpc	r21, r19
    1cf2:	38 f4       	brcc	.+14     	; 0x1d02 <xTaskCheckForTimeOut+0x50>
    1cf4:	24 1b       	sub	r18, r20
    1cf6:	35 0b       	sbc	r19, r21
    1cf8:	31 83       	std	Z+1, r19	; 0x01
    1cfa:	20 83       	st	Z, r18
    1cfc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <vTaskInternalSetTimeOutState>
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <xTaskCheckForTimeOut+0x56>
    1d02:	11 82       	std	Z+1, r1	; 0x01
    1d04:	10 82       	st	Z, r1
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <xTaskCheckForTimeOut+0x5a>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <xTaskCheckForTimeOut+0x5c>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <vTaskMissedYield>:
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <xYieldPending>
    1d1e:	08 95       	ret

00001d20 <xTaskGetSchedulerState>:
    1d20:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <xSchedulerRunning>
    1d24:	88 23       	and	r24, r24
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <xTaskGetSchedulerState+0x14>
    1d28:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <uxSchedulerSuspended>
    1d2c:	88 23       	and	r24, r24
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <xTaskGetSchedulerState+0x18>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	08 95       	ret
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	08 95       	ret
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	08 95       	ret

00001d3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	cf 93       	push	r28
    1d42:	df 93       	push	r29
    1d44:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1d46:	89 2b       	or	r24, r25
    1d48:	11 f4       	brne	.+4      	; 0x1d4e <xTaskPriorityDisinherit+0x12>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	2c c0       	rjmp	.+88     	; 0x1da6 <xTaskPriorityDisinherit+0x6a>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1d4e:	82 a1       	ldd	r24, Z+34	; 0x22
    1d50:	81 50       	subi	r24, 0x01	; 1
    1d52:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1d54:	26 89       	ldd	r18, Z+22	; 0x16
    1d56:	91 a1       	ldd	r25, Z+33	; 0x21
    1d58:	29 17       	cp	r18, r25
    1d5a:	b9 f3       	breq	.-18     	; 0x1d4a <xTaskPriorityDisinherit+0xe>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	f5 cf       	rjmp	.-22     	; 0x1d4a <xTaskPriorityDisinherit+0xe>
    1d60:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1d62:	8f 01       	movw	r16, r30
    1d64:	0e 5f       	subi	r16, 0xFE	; 254
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	c8 01       	movw	r24, r16
    1d6a:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d70:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d72:	48 2f       	mov	r20, r24
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	24 e0       	ldi	r18, 0x04	; 4
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	24 1b       	sub	r18, r20
    1d7c:	35 0b       	sbc	r19, r21
    1d7e:	3d 87       	std	Y+13, r19	; 0x0d
    1d80:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    1d82:	90 91 65 03 	lds	r25, 0x0365	; 0x800365 <uxTopReadyPriority>
    1d86:	98 17       	cp	r25, r24
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <xTaskPriorityDisinherit+0x52>
    1d8a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <uxTopReadyPriority>
    1d8e:	29 e0       	ldi	r18, 0x09	; 9
    1d90:	24 9f       	mul	r18, r20
    1d92:	c0 01       	movw	r24, r0
    1d94:	25 9f       	mul	r18, r21
    1d96:	90 0d       	add	r25, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	b8 01       	movw	r22, r16
    1d9c:	85 56       	subi	r24, 0x65	; 101
    1d9e:	9c 4f       	sbci	r25, 0xFC	; 252
    1da0:	0e 94 fe 05 	call	0xbfc	; 0xbfc <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <prvCheckForValidListAndQueue>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	0f 92       	push	r0
    1db6:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <xTimerQueue>
    1dba:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
    1dbe:	89 2b       	or	r24, r25
    1dc0:	e9 f4       	brne	.+58     	; 0x1dfc <prvCheckForValidListAndQueue+0x4c>
    1dc2:	84 ed       	ldi	r24, 0xD4	; 212
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1dca:	8b ec       	ldi	r24, 0xCB	; 203
    1dcc:	93 e0       	ldi	r25, 0x03	; 3
    1dce:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <vListInitialise>
    1dd2:	84 ed       	ldi	r24, 0xD4	; 212
    1dd4:	93 e0       	ldi	r25, 0x03	; 3
    1dd6:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <pxCurrentTimerList+0x1>
    1dda:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <pxCurrentTimerList>
    1dde:	8b ec       	ldi	r24, 0xCB	; 203
    1de0:	93 e0       	ldi	r25, 0x03	; 3
    1de2:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <pxOverflowTimerList+0x1>
    1de6:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <pxOverflowTimerList>
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	8a e0       	ldi	r24, 0x0A	; 10
    1df0:	0e 94 cd 08 	call	0x119a	; 0x119a <xQueueGenericCreate>
    1df4:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <xTimerQueue+0x1>
    1df8:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <xTimerQueue>
    1dfc:	0f 90       	pop	r0
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	08 95       	ret

00001e02 <prvInsertTimerInActiveList>:
    1e02:	fc 01       	movw	r30, r24
    1e04:	73 83       	std	Z+3, r23	; 0x03
    1e06:	62 83       	std	Z+2, r22	; 0x02
    1e08:	91 87       	std	Z+9, r25	; 0x09
    1e0a:	80 87       	std	Z+8, r24	; 0x08
    1e0c:	46 17       	cp	r20, r22
    1e0e:	57 07       	cpc	r21, r23
    1e10:	78 f0       	brcs	.+30     	; 0x1e30 <prvInsertTimerInActiveList+0x2e>
    1e12:	42 1b       	sub	r20, r18
    1e14:	53 0b       	sbc	r21, r19
    1e16:	84 85       	ldd	r24, Z+12	; 0x0c
    1e18:	95 85       	ldd	r25, Z+13	; 0x0d
    1e1a:	48 17       	cp	r20, r24
    1e1c:	59 07       	cpc	r21, r25
    1e1e:	c8 f4       	brcc	.+50     	; 0x1e52 <prvInsertTimerInActiveList+0x50>
    1e20:	bf 01       	movw	r22, r30
    1e22:	6e 5f       	subi	r22, 0xFE	; 254
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <pxOverflowTimerList>
    1e2a:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <pxOverflowTimerList+0x1>
    1e2e:	0d c0       	rjmp	.+26     	; 0x1e4a <prvInsertTimerInActiveList+0x48>
    1e30:	42 17       	cp	r20, r18
    1e32:	53 07       	cpc	r21, r19
    1e34:	18 f4       	brcc	.+6      	; 0x1e3c <prvInsertTimerInActiveList+0x3a>
    1e36:	62 17       	cp	r22, r18
    1e38:	73 07       	cpc	r23, r19
    1e3a:	58 f4       	brcc	.+22     	; 0x1e52 <prvInsertTimerInActiveList+0x50>
    1e3c:	bf 01       	movw	r22, r30
    1e3e:	6e 5f       	subi	r22, 0xFE	; 254
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <pxCurrentTimerList>
    1e46:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <pxCurrentTimerList+0x1>
    1e4a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vListInsert>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	08 95       	ret
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	08 95       	ret

00001e56 <xTimerCreateTimerTask>:
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <prvCheckForValidListAndQueue>
    1e60:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <xTimerQueue>
    1e64:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
    1e68:	89 2b       	or	r24, r25
    1e6a:	81 f0       	breq	.+32     	; 0x1e8c <xTimerCreateTimerTask+0x36>
    1e6c:	83 ec       	ldi	r24, 0xC3	; 195
    1e6e:	e8 2e       	mov	r14, r24
    1e70:	83 e0       	ldi	r24, 0x03	; 3
    1e72:	f8 2e       	mov	r15, r24
    1e74:	03 e0       	ldi	r16, 0x03	; 3
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	45 e5       	ldi	r20, 0x55	; 85
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	61 ee       	ldi	r22, 0xE1	; 225
    1e80:	71 e0       	ldi	r23, 0x01	; 1
    1e82:	8b ed       	ldi	r24, 0xDB	; 219
    1e84:	9f e0       	ldi	r25, 0x0F	; 15
    1e86:	0e 94 0d 0b 	call	0x161a	; 0x161a <xTaskCreate>
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <xTimerCreateTimerTask+0x38>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	08 95       	ret

00001e96 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <xTimerGenericCommand+0xa>
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <xTimerGenericCommand+0xc>
    1ea2:	1f 92       	push	r1
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    1ea8:	a0 91 c5 03 	lds	r26, 0x03C5	; 0x8003c5 <xTimerQueue>
    1eac:	b0 91 c6 03 	lds	r27, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
    1eb0:	10 97       	sbiw	r26, 0x00	; 0
    1eb2:	29 f1       	breq	.+74     	; 0x1efe <xTimerGenericCommand+0x68>
    1eb4:	f9 01       	movw	r30, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    1eb6:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1eb8:	5b 83       	std	Y+3, r21	; 0x03
    1eba:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    1ebc:	9d 83       	std	Y+5, r25	; 0x05
    1ebe:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1ec0:	66 30       	cpi	r22, 0x06	; 6
    1ec2:	a4 f4       	brge	.+40     	; 0x1eec <xTimerGenericCommand+0x56>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1ec4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <xTaskGetSchedulerState>
    1ec8:	e0 91 c5 03 	lds	r30, 0x03C5	; 0x8003c5 <xTimerQueue>
    1ecc:	f0 91 c6 03 	lds	r31, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
        xMessage.u.xTimerParameters.pxTimer = xTimer;

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1ed2:	82 30       	cpi	r24, 0x02	; 2
    1ed4:	11 f4       	brne	.+4      	; 0x1eda <xTimerGenericCommand+0x44>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1ed6:	a8 01       	movw	r20, r16
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <xTimerGenericCommand+0x48>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	be 01       	movw	r22, r28
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	cf 01       	movw	r24, r30
    1ee6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <xQueueGenericSend>
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <xTimerGenericCommand+0x6a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	af 01       	movw	r20, r30
    1ef0:	be 01       	movw	r22, r28
    1ef2:	6f 5f       	subi	r22, 0xFF	; 255
    1ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 8b 09 	call	0x1316	; 0x1316 <xQueueGenericSendFromISR>
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <xTimerGenericCommand+0x6a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	df 91       	pop	r29
    1f0c:	cf 91       	pop	r28
    1f0e:	1f 91       	pop	r17
    1f10:	0f 91       	pop	r16
    1f12:	08 95       	ret

00001f14 <prvSwitchTimerLists>:
    }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1f20:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxCurrentTimerList>
    1f24:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxCurrentTimerList+0x1>
    1f28:	80 81       	ld	r24, Z
    1f2a:	88 23       	and	r24, r24
    1f2c:	89 f1       	breq	.+98     	; 0x1f90 <prvSwitchTimerLists+0x7c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1f2e:	05 80       	ldd	r0, Z+5	; 0x05
    1f30:	f6 81       	ldd	r31, Z+6	; 0x06
    1f32:	e0 2d       	mov	r30, r0
    1f34:	e0 80       	ld	r14, Z
    1f36:	f1 80       	ldd	r15, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1f38:	c6 81       	ldd	r28, Z+6	; 0x06
    1f3a:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	0e 5f       	subi	r16, 0xFE	; 254
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	c8 01       	movw	r24, r16
    1f44:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1f48:	e8 89       	ldd	r30, Y+16	; 0x10
    1f4a:	f9 89       	ldd	r31, Y+17	; 0x11
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1f50:	8a 89       	ldd	r24, Y+18	; 0x12
    1f52:	82 ff       	sbrs	r24, 2
    1f54:	e5 cf       	rjmp	.-54     	; 0x1f20 <prvSwitchTimerLists+0xc>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1f56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f58:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f5a:	8e 0d       	add	r24, r14
    1f5c:	9f 1d       	adc	r25, r15
            if( xReloadTime > xNextExpireTime )
    1f5e:	e8 16       	cp	r14, r24
    1f60:	f9 06       	cpc	r15, r25
    1f62:	60 f4       	brcc	.+24     	; 0x1f7c <prvSwitchTimerLists+0x68>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1f64:	9b 83       	std	Y+3, r25	; 0x03
    1f66:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1f68:	d9 87       	std	Y+9, r29	; 0x09
    1f6a:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1f6c:	b8 01       	movw	r22, r16
    1f6e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <pxCurrentTimerList>
    1f72:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <pxCurrentTimerList+0x1>
    1f76:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vListInsert>
    1f7a:	d2 cf       	rjmp	.-92     	; 0x1f20 <prvSwitchTimerLists+0xc>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1f7c:	00 e0       	ldi	r16, 0x00	; 0
    1f7e:	10 e0       	ldi	r17, 0x00	; 0
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	a7 01       	movw	r20, r14
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	ce 01       	movw	r24, r28
    1f8a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <xTimerGenericCommand>
    1f8e:	c8 cf       	rjmp	.-112    	; 0x1f20 <prvSwitchTimerLists+0xc>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1f90:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <pxOverflowTimerList>
    1f94:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <pxOverflowTimerList+0x1>
    1f98:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <pxCurrentTimerList+0x1>
    1f9c:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1fa0:	f0 93 c8 03 	sts	0x03C8, r31	; 0x8003c8 <pxOverflowTimerList+0x1>
    1fa4:	e0 93 c7 03 	sts	0x03C7, r30	; 0x8003c7 <pxOverflowTimerList>
}
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	ff 90       	pop	r15
    1fb2:	ef 90       	pop	r14
    1fb4:	08 95       	ret

00001fb6 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <prvTimerTask+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <prvTimerTask+0x8>
    1fbe:	1f 92       	push	r1
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    1fc4:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxCurrentTimerList>
    1fc8:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxCurrentTimerList+0x1>
    1fcc:	d0 80       	ld	r13, Z
    if( *pxListWasEmpty == pdFALSE )
    1fce:	dd 20       	and	r13, r13
    1fd0:	31 f0       	breq	.+12     	; 0x1fde <prvTimerTask+0x28>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1fd2:	05 80       	ldd	r0, Z+5	; 0x05
    1fd4:	f6 81       	ldd	r31, Z+6	; 0x06
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	e0 80       	ld	r14, Z
    1fda:	f1 80       	ldd	r15, Z+1	; 0x01
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <prvTimerTask+0x2c>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    1fde:	e1 2c       	mov	r14, r1
    1fe0:	f1 2c       	mov	r15, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    1fe2:	0e 94 47 0c 	call	0x188e	; 0x188e <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1fe6:	0e 94 4d 0c 	call	0x189a	; 0x189a <xTaskGetTickCount>
    1fea:	8c 01       	movw	r16, r24

    if( xTimeNow < xLastTime )
    1fec:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <xLastTime.2412>
    1ff0:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <xLastTime.2412+0x1>
    1ff4:	08 17       	cp	r16, r24
    1ff6:	19 07       	cpc	r17, r25
    1ff8:	20 f4       	brcc	.+8      	; 0x2002 <prvTimerTask+0x4c>
    {
        prvSwitchTimerLists();
    1ffa:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <prvTimerTask+0x4e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2002:	80 e0       	ldi	r24, 0x00	; 0
    }

    xLastTime = xTimeNow;
    2004:	10 93 c2 03 	sts	0x03C2, r17	; 0x8003c2 <xLastTime.2412+0x1>
    2008:	00 93 c1 03 	sts	0x03C1, r16	; 0x8003c1 <xLastTime.2412>
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
    200c:	81 11       	cpse	r24, r1
    200e:	55 c0       	rjmp	.+170    	; 0x20ba <prvTimerTask+0x104>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2010:	dd 20       	and	r13, r13
    2012:	d9 f1       	breq	.+118    	; 0x208a <prvTimerTask+0xd4>
    2014:	0e 15       	cp	r16, r14
    2016:	1f 05       	cpc	r17, r15
    2018:	08 f4       	brcc	.+2      	; 0x201c <prvTimerTask+0x66>
    201a:	3e c0       	rjmp	.+124    	; 0x2098 <prvTimerTask+0xe2>
            {
                ( void ) xTaskResumeAll();
    201c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2020:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxCurrentTimerList>
    2024:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxCurrentTimerList+0x1>
    2028:	05 80       	ldd	r0, Z+5	; 0x05
    202a:	f6 81       	ldd	r31, Z+6	; 0x06
    202c:	e0 2d       	mov	r30, r0
    202e:	c6 80       	ldd	r12, Z+6	; 0x06
    2030:	d7 80       	ldd	r13, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2032:	c6 01       	movw	r24, r12
    2034:	02 96       	adiw	r24, 0x02	; 2
    2036:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    203a:	d6 01       	movw	r26, r12
    203c:	52 96       	adiw	r26, 0x12	; 18
    203e:	8c 91       	ld	r24, X
    2040:	52 97       	sbiw	r26, 0x12	; 18
    2042:	82 ff       	sbrs	r24, 2
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <prvTimerTask+0xbe>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2046:	1c 96       	adiw	r26, 0x0c	; 12
    2048:	6d 91       	ld	r22, X+
    204a:	7c 91       	ld	r23, X
    204c:	1d 97       	sbiw	r26, 0x0d	; 13
    204e:	6e 0d       	add	r22, r14
    2050:	7f 1d       	adc	r23, r15
    2052:	97 01       	movw	r18, r14
    2054:	a8 01       	movw	r20, r16
    2056:	c6 01       	movw	r24, r12
    2058:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <prvInsertTimerInActiveList>
    205c:	88 23       	and	r24, r24
    205e:	69 f0       	breq	.+26     	; 0x207a <prvTimerTask+0xc4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2060:	00 e0       	ldi	r16, 0x00	; 0
    2062:	10 e0       	ldi	r17, 0x00	; 0
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	a7 01       	movw	r20, r14
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	c6 01       	movw	r24, r12
    206e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <xTimerGenericCommand>
    2072:	03 c0       	rjmp	.+6      	; 0x207a <prvTimerTask+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	f6 01       	movw	r30, r12
    2078:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    207a:	d6 01       	movw	r26, r12
    207c:	50 96       	adiw	r26, 0x10	; 16
    207e:	ed 91       	ld	r30, X+
    2080:	fc 91       	ld	r31, X
    2082:	51 97       	sbiw	r26, 0x11	; 17
    2084:	c6 01       	movw	r24, r12
    2086:	09 95       	icall
    2088:	1e c0       	rjmp	.+60     	; 0x20c6 <prvTimerTask+0x110>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    208a:	e0 91 c7 03 	lds	r30, 0x03C7	; 0x8003c7 <pxOverflowTimerList>
    208e:	f0 91 c8 03 	lds	r31, 0x03C8	; 0x8003c8 <pxOverflowTimerList+0x1>
    2092:	80 81       	ld	r24, Z
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	81 11       	cpse	r24, r1
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2098:	40 e0       	ldi	r20, 0x00	; 0
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    209a:	b7 01       	movw	r22, r14
    209c:	60 1b       	sub	r22, r16
    209e:	71 0b       	sbc	r23, r17
    20a0:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <xTimerQueue>
    20a4:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
    20a8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    20ac:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    20b0:	81 11       	cpse	r24, r1
    20b2:	09 c0       	rjmp	.+18     	; 0x20c6 <prvTimerTask+0x110>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    20b4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vPortYield>
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <prvTimerTask+0x110>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    20ba:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <xTaskResumeAll>
    20be:	03 c0       	rjmp	.+6      	; 0x20c6 <prvTimerTask+0x110>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	87 ff       	sbrs	r24, 7
    20c4:	0e c0       	rjmp	.+28     	; 0x20e2 <prvTimerTask+0x12c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	be 01       	movw	r22, r28
    20cc:	6f 5f       	subi	r22, 0xFF	; 255
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <xTimerQueue>
    20d4:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <xTimerQueue+0x1>
    20d8:	0e 94 ba 09 	call	0x1374	; 0x1374 <xQueueReceive>
    20dc:	81 11       	cpse	r24, r1
    20de:	f0 cf       	rjmp	.-32     	; 0x20c0 <prvTimerTask+0x10a>
    20e0:	71 cf       	rjmp	.-286    	; 0x1fc4 <prvTimerTask+0xe>
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    20e2:	ec 80       	ldd	r14, Y+4	; 0x04
    20e4:	fd 80       	ldd	r15, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    20e6:	f7 01       	movw	r30, r14
    20e8:	82 85       	ldd	r24, Z+10	; 0x0a
    20ea:	93 85       	ldd	r25, Z+11	; 0x0b
    20ec:	89 2b       	or	r24, r25
    20ee:	21 f0       	breq	.+8      	; 0x20f8 <prvTimerTask+0x142>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    20f0:	c7 01       	movw	r24, r14
    20f2:	02 96       	adiw	r24, 0x02	; 2
    20f4:	0e 94 57 06 	call	0xcae	; 0xcae <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    20f8:	0e 94 4d 0c 	call	0x189a	; 0x189a <xTaskGetTickCount>
    20fc:	6c 01       	movw	r12, r24

    if( xTimeNow < xLastTime )
    20fe:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <xLastTime.2412>
    2102:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <xLastTime.2412+0x1>
    2106:	c8 16       	cp	r12, r24
    2108:	d9 06       	cpc	r13, r25
    210a:	10 f4       	brcc	.+4      	; 0x2110 <prvTimerTask+0x15a>
    {
        prvSwitchTimerLists();
    210c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <prvSwitchTimerLists>
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    }

    xLastTime = xTimeNow;
    2110:	d0 92 c2 03 	sts	0x03C2, r13	; 0x8003c2 <xLastTime.2412+0x1>
    2114:	c0 92 c1 03 	sts	0x03C1, r12	; 0x8003c1 <xLastTime.2412>
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            switch( xMessage.xMessageID )
    2118:	e9 81       	ldd	r30, Y+1	; 0x01
    211a:	0e 2e       	mov	r0, r30
    211c:	00 0c       	add	r0, r0
    211e:	ff 0b       	sbc	r31, r31
    2120:	ea 30       	cpi	r30, 0x0A	; 10
    2122:	f1 05       	cpc	r31, r1
    2124:	80 f6       	brcc	.-96     	; 0x20c6 <prvTimerTask+0x110>
    2126:	ec 5c       	subi	r30, 0xCC	; 204
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	d7 01       	movw	r26, r14
    212c:	52 96       	adiw	r26, 0x12	; 18
    212e:	8c 91       	ld	r24, X
    2130:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2134:	81 60       	ori	r24, 0x01	; 1
    2136:	f7 01       	movw	r30, r14
    2138:	82 8b       	std	Z+18, r24	; 0x12
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    213a:	2a 81       	ldd	r18, Y+2	; 0x02
    213c:	3b 81       	ldd	r19, Y+3	; 0x03
    213e:	64 85       	ldd	r22, Z+12	; 0x0c
    2140:	75 85       	ldd	r23, Z+13	; 0x0d
    2142:	62 0f       	add	r22, r18
    2144:	73 1f       	adc	r23, r19
    2146:	a6 01       	movw	r20, r12
    2148:	c7 01       	movw	r24, r14
    214a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <prvInsertTimerInActiveList>
    214e:	88 23       	and	r24, r24
    2150:	09 f4       	brne	.+2      	; 0x2154 <prvTimerTask+0x19e>
    2152:	b9 cf       	rjmp	.-142    	; 0x20c6 <prvTimerTask+0x110>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2154:	d7 01       	movw	r26, r14
    2156:	50 96       	adiw	r26, 0x10	; 16
    2158:	ed 91       	ld	r30, X+
    215a:	fc 91       	ld	r31, X
    215c:	51 97       	sbiw	r26, 0x11	; 17
    215e:	c7 01       	movw	r24, r14
    2160:	09 95       	icall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2162:	f7 01       	movw	r30, r14
    2164:	82 89       	ldd	r24, Z+18	; 0x12
    2166:	82 ff       	sbrs	r24, 2
    2168:	ae cf       	rjmp	.-164    	; 0x20c6 <prvTimerTask+0x110>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    216a:	4a 81       	ldd	r20, Y+2	; 0x02
    216c:	5b 81       	ldd	r21, Y+3	; 0x03
    216e:	84 85       	ldd	r24, Z+12	; 0x0c
    2170:	95 85       	ldd	r25, Z+13	; 0x0d
    2172:	48 0f       	add	r20, r24
    2174:	59 1f       	adc	r21, r25
    2176:	00 e0       	ldi	r16, 0x00	; 0
    2178:	10 e0       	ldi	r17, 0x00	; 0
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	c7 01       	movw	r24, r14
    2182:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <xTimerGenericCommand>
    2186:	9f cf       	rjmp	.-194    	; 0x20c6 <prvTimerTask+0x110>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2188:	81 60       	ori	r24, 0x01	; 1
    218a:	f7 01       	movw	r30, r14
    218c:	82 8b       	std	Z+18, r24	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    218e:	6a 81       	ldd	r22, Y+2	; 0x02
    2190:	7b 81       	ldd	r23, Y+3	; 0x03
    2192:	75 87       	std	Z+13, r23	; 0x0d
    2194:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2196:	6c 0d       	add	r22, r12
    2198:	7d 1d       	adc	r23, r13
    219a:	96 01       	movw	r18, r12
    219c:	a6 01       	movw	r20, r12
    219e:	c7 01       	movw	r24, r14
    21a0:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <prvInsertTimerInActiveList>
    21a4:	90 cf       	rjmp	.-224    	; 0x20c6 <prvTimerTask+0x110>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    21a6:	81 fd       	sbrc	r24, 1
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <prvTimerTask+0x1fc>
                        {
                            vPortFree( pxTimer );
    21aa:	c7 01       	movw	r24, r14
    21ac:	0e 94 db 05 	call	0xbb6	; 0xbb6 <vPortFree>
    21b0:	8a cf       	rjmp	.-236    	; 0x20c6 <prvTimerTask+0x110>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    21b2:	8e 7f       	andi	r24, 0xFE	; 254
    21b4:	d7 01       	movw	r26, r14
    21b6:	52 96       	adiw	r26, 0x12	; 18
    21b8:	8c 93       	st	X, r24
    21ba:	85 cf       	rjmp	.-246    	; 0x20c6 <prvTimerTask+0x110>

000021bc <initVariant>:
{
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    21bc:	0e 94 39 05 	call	0xa72	; 0xa72 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    21c0:	0e 94 19 0c 	call	0x1832	; 0x1832 <vTaskStartScheduler>
    21c4:	08 95       	ret

000021c6 <vApplicationIdleHook>:
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    loop();        // the normal Arduino loop() function is run here.
    21c6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <loop>
    if (serialEventRun) serialEventRun();
    21ca:	81 ee       	ldi	r24, 0xE1	; 225
    21cc:	95 e1       	ldi	r25, 0x15	; 21
    21ce:	89 2b       	or	r24, r25
    21d0:	11 f0       	breq	.+4      	; 0x21d6 <vApplicationIdleHook+0x10>
    21d2:	0c 94 e1 15 	jmp	0x2bc2	; 0x2bc2 <_Z14serialEventRunv>
    21d6:	08 95       	ret

000021d8 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    21d8:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    21da:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21dc:	2f ef       	ldi	r18, 0xFF	; 255
    21de:	80 e7       	ldi	r24, 0x70	; 112
    21e0:	92 e0       	ldi	r25, 0x02	; 2
    21e2:	21 50       	subi	r18, 0x01	; 1
    21e4:	80 40       	sbci	r24, 0x00	; 0
    21e6:	90 40       	sbci	r25, 0x00	; 0
    21e8:	e1 f7       	brne	.-8      	; 0x21e2 <vApplicationMallocFailedHook+0xa>
    21ea:	00 c0       	rjmp	.+0      	; 0x21ec <vApplicationMallocFailedHook+0x14>
    21ec:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED fast blink.
    21ee:	1d 9a       	sbi	0x03, 5	; 3
    21f0:	f5 cf       	rjmp	.-22     	; 0x21dc <vApplicationMallocFailedHook+0x4>

000021f2 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    21f2:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    21f4:	2d 9a       	sbi	0x05, 5	; 5
    21f6:	2f ef       	ldi	r18, 0xFF	; 255
    21f8:	87 ea       	ldi	r24, 0xA7	; 167
    21fa:	91 e6       	ldi	r25, 0x61	; 97
    21fc:	21 50       	subi	r18, 0x01	; 1
    21fe:	80 40       	sbci	r24, 0x00	; 0
    2200:	90 40       	sbci	r25, 0x00	; 0
    2202:	e1 f7       	brne	.-8      	; 0x21fc <vApplicationStackOverflowHook+0xa>
    2204:	00 c0       	rjmp	.+0      	; 0x2206 <vApplicationStackOverflowHook+0x14>
    2206:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED slow blink.
    2208:	1d 9a       	sbi	0x03, 5	; 3
    220a:	f5 cf       	rjmp	.-22     	; 0x21f6 <vApplicationStackOverflowHook+0x4>

0000220c <_ZN9MD_TCS23010initialiseEv>:
  }
  FreqCount.end();      // stop
  DUMP("VALUE ", FreqCount.read());

  return(FreqCount.read() * _readDiv);
}
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	fc 01       	movw	r30, r24
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	80 83       	st	Z, r24
    2216:	81 83       	std	Z+1, r24	; 0x01
    2218:	82 83       	std	Z+2, r24	; 0x02
    221a:	83 83       	std	Z+3, r24	; 0x03
    221c:	84 83       	std	Z+4, r24	; 0x04
    221e:	8a e0       	ldi	r24, 0x0A	; 10
    2220:	85 83       	std	Z+5, r24	; 0x05
    2222:	16 82       	std	Z+6, r1	; 0x06
    2224:	df 01       	movw	r26, r30
    2226:	17 96       	adiw	r26, 0x07	; 7
    2228:	73 96       	adiw	r30, 0x13	; 19
    222a:	00 e7       	ldi	r16, 0x70	; 112
    222c:	17 e1       	ldi	r17, 0x17	; 23
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	48 ed       	ldi	r20, 0xD8	; 216
    2234:	56 ed       	ldi	r21, 0xD6	; 214
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	0d 93       	st	X+, r16
    223c:	1d 93       	st	X+, r17
    223e:	2d 93       	st	X+, r18
    2240:	3d 93       	st	X+, r19
    2242:	18 96       	adiw	r26, 0x08	; 8
    2244:	4d 93       	st	X+, r20
    2246:	5d 93       	st	X+, r21
    2248:	6d 93       	st	X+, r22
    224a:	7c 93       	st	X, r23
    224c:	1b 97       	sbiw	r26, 0x0b	; 11
    224e:	ae 17       	cp	r26, r30
    2250:	bf 07       	cpc	r27, r31
    2252:	99 f7       	brne	.-26     	; 0x223a <_ZN9MD_TCS23010initialiseEv+0x2e>
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret

0000225a <_ZN9MD_TCS230C1Ehhh>:
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
    2266:	f6 2e       	mov	r15, r22
    2268:	04 2f       	mov	r16, r20
    226a:	12 2f       	mov	r17, r18
    226c:	0e 94 06 11 	call	0x220c	; 0x220c <_ZN9MD_TCS23010initialiseEv>
    2270:	fb 82       	std	Y+3, r15	; 0x03
    2272:	0c 83       	std	Y+4, r16	; 0x04
    2274:	18 83       	st	Y, r17
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	08 95       	ret

00002282 <_ZN9MD_TCS230D1Ev>:
    2282:	08 95       	ret

00002284 <_ZN9MD_TCS2309setFilterEh>:
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	ec 01       	movw	r28, r24
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	8f 3f       	cpi	r24, 0xFF	; 255
    228e:	e9 f0       	breq	.+58     	; 0x22ca <_ZN9MD_TCS2309setFilterEh+0x46>
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	9f 3f       	cpi	r25, 0xFF	; 255
    2294:	d1 f0       	breq	.+52     	; 0x22ca <_ZN9MD_TCS2309setFilterEh+0x46>
    2296:	61 30       	cpi	r22, 0x01	; 1
    2298:	49 f0       	breq	.+18     	; 0x22ac <_ZN9MD_TCS2309setFilterEh+0x28>
    229a:	30 f0       	brcs	.+12     	; 0x22a8 <_ZN9MD_TCS2309setFilterEh+0x24>
    229c:	62 30       	cpi	r22, 0x02	; 2
    229e:	41 f0       	breq	.+16     	; 0x22b0 <_ZN9MD_TCS2309setFilterEh+0x2c>
    22a0:	63 30       	cpi	r22, 0x03	; 3
    22a2:	99 f4       	brne	.+38     	; 0x22ca <_ZN9MD_TCS2309setFilterEh+0x46>
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <_ZN9MD_TCS2309setFilterEh+0x36>
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <_ZN9MD_TCS2309setFilterEh+0x36>
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <_ZN9MD_TCS2309setFilterEh+0x2e>
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <_ZN9MD_TCS2309setFilterEh+0x3c>
    22ba:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <digitalWrite>
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	08 95       	ret

000022d0 <_ZN9MD_TCS23013setFrequency2Eh>:
    22d0:	cf 93       	push	r28
    22d2:	df 93       	push	r29
    22d4:	ec 01       	movw	r28, r24
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	8f 3f       	cpi	r24, 0xFF	; 255
    22da:	e9 f0       	breq	.+58     	; 0x2316 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    22dc:	9a 81       	ldd	r25, Y+2	; 0x02
    22de:	9f 3f       	cpi	r25, 0xFF	; 255
    22e0:	d1 f0       	breq	.+52     	; 0x2316 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    22e2:	61 30       	cpi	r22, 0x01	; 1
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    22e6:	30 f0       	brcs	.+12     	; 0x22f4 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    22e8:	62 30       	cpi	r22, 0x02	; 2
    22ea:	41 f0       	breq	.+16     	; 0x22fc <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    22ec:	63 30       	cpi	r22, 0x03	; 3
    22ee:	99 f4       	brne	.+38     	; 0x2316 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    22f0:	60 e0       	ldi	r22, 0x00	; 0
    22f2:	09 c0       	rjmp	.+18     	; 0x2306 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    22f4:	61 e0       	ldi	r22, 0x01	; 1
    22f6:	03 c0       	rjmp	.+6      	; 0x22fe <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	05 c0       	rjmp	.+10     	; 0x2306 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    2302:	61 e0       	ldi	r22, 0x01	; 1
    2304:	03 c0       	rjmp	.+6      	; 0x230c <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    2306:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <digitalWrite>
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	08 95       	ret

0000231c <_ZN9MD_TCS2309setEnableEb>:
    231c:	fc 01       	movw	r30, r24
    231e:	20 81       	ld	r18, Z
    2320:	2f 3f       	cpi	r18, 0xFF	; 255
    2322:	29 f0       	breq	.+10     	; 0x232e <_ZN9MD_TCS2309setEnableEb+0x12>
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	69 27       	eor	r22, r25
    2328:	82 2f       	mov	r24, r18
    232a:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <digitalWrite>
    232e:	66 23       	and	r22, r22
    2330:	19 f0       	breq	.+6      	; 0x2338 <_ZN9MD_TCS2309setEnableEb+0x1c>
    2332:	fc 01       	movw	r30, r24
    2334:	66 81       	ldd	r22, Z+6	; 0x06
    2336:	01 c0       	rjmp	.+2      	; 0x233a <_ZN9MD_TCS2309setEnableEb+0x1e>
    2338:	63 e0       	ldi	r22, 0x03	; 3
    233a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <_ZN9MD_TCS23013setFrequency2Eh>

0000233e <_ZN9MD_TCS2305beginEv>:
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	ec 01       	movw	r28, r24
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	8f 3f       	cpi	r24, 0xFF	; 255
    2348:	19 f0       	breq	.+6      	; 0x2350 <_ZN9MD_TCS2305beginEv+0x12>
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	8f 3f       	cpi	r24, 0xFF	; 255
    2354:	19 f0       	breq	.+6      	; 0x235c <_ZN9MD_TCS2305beginEv+0x1e>
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	8f 3f       	cpi	r24, 0xFF	; 255
    2360:	19 f0       	breq	.+6      	; 0x2368 <_ZN9MD_TCS2305beginEv+0x2a>
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	8f 3f       	cpi	r24, 0xFF	; 255
    236c:	19 f0       	breq	.+6      	; 0x2374 <_ZN9MD_TCS2305beginEv+0x36>
    236e:	61 e0       	ldi	r22, 0x01	; 1
    2370:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2374:	88 81       	ld	r24, Y
    2376:	8f 3f       	cpi	r24, 0xFF	; 255
    2378:	19 f0       	breq	.+6      	; 0x2380 <_ZN9MD_TCS2305beginEv+0x42>
    237a:	61 e0       	ldi	r22, 0x01	; 1
    237c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2380:	60 e0       	ldi	r22, 0x00	; 0
    2382:	ce 01       	movw	r24, r28
    2384:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN9MD_TCS2309setEnableEb>
    2388:	6e 81       	ldd	r22, Y+6	; 0x06
    238a:	ce 01       	movw	r24, r28
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <_ZN9MD_TCS23013setFrequency2Eh>

00002394 <_ZN9MD_TCS2306getRGBEP9colorData>:
    2394:	dc 01       	movw	r26, r24
    2396:	fb 01       	movw	r30, r22
    2398:	30 97       	sbiw	r30, 0x00	; 0
    239a:	59 f0       	breq	.+22     	; 0x23b2 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    239c:	9b 96       	adiw	r26, 0x2b	; 43
    239e:	8c 91       	ld	r24, X
    23a0:	9b 97       	sbiw	r26, 0x2b	; 43
    23a2:	80 83       	st	Z, r24
    23a4:	9c 96       	adiw	r26, 0x2c	; 44
    23a6:	8c 91       	ld	r24, X
    23a8:	9c 97       	sbiw	r26, 0x2c	; 44
    23aa:	81 83       	std	Z+1, r24	; 0x01
    23ac:	9d 96       	adiw	r26, 0x2d	; 45
    23ae:	8c 91       	ld	r24, X
    23b0:	82 83       	std	Z+2, r24	; 0x02
    23b2:	08 95       	ret

000023b4 <_ZN9MD_TCS23017RGBTransformationEv>:
  return(s);
}

void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
    23b4:	4f 92       	push	r4
    23b6:	5f 92       	push	r5
    23b8:	6f 92       	push	r6
    23ba:	7f 92       	push	r7
    23bc:	8f 92       	push	r8
    23be:	9f 92       	push	r9
    23c0:	af 92       	push	r10
    23c2:	bf 92       	push	r11
    23c4:	df 92       	push	r13
    23c6:	ef 92       	push	r14
    23c8:	ff 92       	push	r15
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	8c 01       	movw	r16, r24
    23d4:	09 5f       	subi	r16, 0xF9	; 249
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	ec 01       	movw	r28, r24
    23da:	7c 01       	movw	r14, r24
    23dc:	83 e1       	ldi	r24, 0x13	; 19
    23de:	e8 0e       	add	r14, r24
    23e0:	f1 1c       	adc	r15, r1
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    x /= (_Fw.value[i] - _Fd.value[i]);

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    23e2:	dd 24       	eor	r13, r13
    23e4:	da 94       	dec	r13
    23e6:	f8 01       	movw	r30, r16
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
  {
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    23e8:	d8 01       	movw	r26, r16
    23ea:	8d 90       	ld	r8, X+
    23ec:	9d 90       	ld	r9, X+
    23ee:	ad 90       	ld	r10, X+
    23f0:	bd 90       	ld	r11, X+
    23f2:	8d 01       	movw	r16, r26
    23f4:	80 8d       	ldd	r24, Z+24	; 0x18
    23f6:	91 8d       	ldd	r25, Z+25	; 0x19
    23f8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23fa:	b3 8d       	ldd	r27, Z+27	; 0x1b
    23fc:	9c 01       	movw	r18, r24
    23fe:	ad 01       	movw	r20, r26
    2400:	28 19       	sub	r18, r8
    2402:	39 09       	sbc	r19, r9
    2404:	4a 09       	sbc	r20, r10
    2406:	5b 09       	sbc	r21, r11
    2408:	af ef       	ldi	r26, 0xFF	; 255
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__muluhisi3>
    x /= (_Fw.value[i] - _Fd.value[i]);
    2410:	f8 01       	movw	r30, r16
    2412:	40 84       	ldd	r4, Z+8	; 0x08
    2414:	51 84       	ldd	r5, Z+9	; 0x09
    2416:	62 84       	ldd	r6, Z+10	; 0x0a
    2418:	73 84       	ldd	r7, Z+11	; 0x0b
    241a:	a3 01       	movw	r20, r6
    241c:	92 01       	movw	r18, r4
    241e:	28 19       	sub	r18, r8
    2420:	39 09       	sbc	r19, r9
    2422:	4a 09       	sbc	r20, r10
    2424:	5b 09       	sbc	r21, r11
    2426:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divmodsi4>

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    242a:	57 ff       	sbrs	r21, 7
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    242e:	1b a6       	std	Y+43, r1	; 0x2b
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else if (x > 255) _rgb.value[i] = 255;
    2432:	2f 3f       	cpi	r18, 0xFF	; 255
    2434:	31 05       	cpc	r19, r1
    2436:	41 05       	cpc	r20, r1
    2438:	51 05       	cpc	r21, r1
    243a:	19 f0       	breq	.+6      	; 0x2442 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    243c:	14 f0       	brlt	.+4      	; 0x2442 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    243e:	db a6       	std	Y+43, r13	; 0x2b
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else _rgb.value[i] = x;
    2442:	2b a7       	std	Y+43, r18	; 0x2b
    2444:	21 96       	adiw	r28, 0x01	; 1
void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
    2446:	0e 15       	cp	r16, r14
    2448:	1f 05       	cpc	r17, r15
    244a:	69 f6       	brne	.-102    	; 0x23e6 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    else _rgb.value[i] = x;
  }
}
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	1f 91       	pop	r17
    2452:	0f 91       	pop	r16
    2454:	ff 90       	pop	r15
    2456:	ef 90       	pop	r14
    2458:	df 90       	pop	r13
    245a:	bf 90       	pop	r11
    245c:	af 90       	pop	r10
    245e:	9f 90       	pop	r9
    2460:	8f 90       	pop	r8
    2462:	7f 90       	pop	r7
    2464:	6f 90       	pop	r6
    2466:	5f 90       	pop	r5
    2468:	4f 90       	pop	r4
    246a:	08 95       	ret

0000246c <_ZN9MD_TCS2307readFSMEh>:
  return(_readState == 0);
}

uint8_t MD_TCS230::readFSM(uint8_t s)
// Finite State Machine to read a value (internal function)
{
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	8c 01       	movw	r16, r24
    2476:	c6 2f       	mov	r28, r22
  static const uint8_t seq[] = { TCS230_RGB_R, TCS230_RGB_G, TCS230_RGB_B };
  static uint8_t       currCol;  // index for seq above

  switch(s)
    2478:	61 30       	cpi	r22, 0x01	; 1
    247a:	49 f0       	breq	.+18     	; 0x248e <_ZN9MD_TCS2307readFSMEh+0x22>
    247c:	18 f0       	brcs	.+6      	; 0x2484 <_ZN9MD_TCS2307readFSMEh+0x18>
    247e:	62 30       	cpi	r22, 0x02	; 2
    2480:	d9 f0       	breq	.+54     	; 0x24b8 <_ZN9MD_TCS2307readFSMEh+0x4c>
    2482:	4c c0       	rjmp	.+152    	; 0x251c <_ZN9MD_TCS2307readFSMEh+0xb0>
  {
  case 0: // enable the hardware for reading
    DUMPS("\n0");
    currCol = 0;  // RGB_R but we don't care
    2484:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <_ZZN9MD_TCS2307readFSMEhE7currCol>
    setEnable(true);
    2488:	61 e0       	ldi	r22, 0x01	; 1
    248a:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN9MD_TCS2309setEnableEb>
    s++;
    // fall through to the next state

  case 1: // select a filter and start a reading
    DUMPS("\n1");
    setFilter(seq[currCol]);
    248e:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	e7 51       	subi	r30, 0x17	; 23
    2496:	fe 4f       	sbci	r31, 0xFE	; 254
    2498:	60 81       	ld	r22, Z
    249a:	c8 01       	movw	r24, r16
    249c:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN9MD_TCS2309setFilterEh>
    FreqCount.begin(1000/_readDiv);
    24a0:	f8 01       	movw	r30, r16
    24a2:	65 81       	ldd	r22, Z+5	; 0x05
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	88 ee       	ldi	r24, 0xE8	; 232
    24a8:	93 e0       	ldi	r25, 0x03	; 3
    24aa:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divmodhi4>
    24ae:	cb 01       	movw	r24, r22
    24b0:	0e 94 87 1a 	call	0x350e	; 0x350e <_ZN14FreqCountClass5beginEj>
    s++;
    24b4:	c2 e0       	ldi	r28, 0x02	; 2
    break;
    24b6:	32 c0       	rjmp	.+100    	; 0x251c <_ZN9MD_TCS2307readFSMEh+0xb0>

  case 2: // see if a value is available
    DUMPS("2");
    if (FreqCount.available())
    24b8:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <_ZN14FreqCountClass9availableEv>
    24bc:	88 23       	and	r24, r24
    24be:	71 f1       	breq	.+92     	; 0x251c <_ZN9MD_TCS2307readFSMEh+0xb0>
    {
      DUMP(" VALUE ", FreqCount.read());
      // read the value and save it 
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;
    24c0:	e0 91 dd 03 	lds	r30, 0x03DD	; 0x8003dd <_ZZN9MD_TCS2307readFSMEhE7currCol>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	8e 0f       	add	r24, r30
    24c8:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <_ZZN9MD_TCS2307readFSMEhE7currCol>
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	e7 51       	subi	r30, 0x17	; 23
    24d0:	fe 4f       	sbci	r31, 0xFE	; 254
    24d2:	c0 81       	ld	r28, Z
    24d4:	d0 e0       	ldi	r29, 0x00	; 0
    24d6:	0e 94 02 1b 	call	0x3604	; 0x3604 <_ZN14FreqCountClass4readEv>
    24da:	9b 01       	movw	r18, r22
    24dc:	ac 01       	movw	r20, r24
    24de:	cc 0f       	add	r28, r28
    24e0:	dd 1f       	adc	r29, r29
    24e2:	cc 0f       	add	r28, r28
    24e4:	dd 1f       	adc	r29, r29
    24e6:	c0 0f       	add	r28, r16
    24e8:	d1 1f       	adc	r29, r17
    24ea:	f8 01       	movw	r30, r16
    24ec:	a5 81       	ldd	r26, Z+5	; 0x05
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__muluhisi3>
    24f4:	6f 8f       	std	Y+31, r22	; 0x1f
    24f6:	78 a3       	std	Y+32, r23	; 0x20
    24f8:	89 a3       	std	Y+33, r24	; 0x21
    24fa:	9a a3       	std	Y+34, r25	; 0x22

      if (currCol < RGB_SIZE)
    24fc:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2500:	83 30       	cpi	r24, 0x03	; 3
    2502:	58 f0       	brcs	.+22     	; 0x251a <_ZN9MD_TCS2307readFSMEh+0xae>
        s--;
      }
      else
      {
        // end this reading session
        FreqCount.end();
    2504:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN14FreqCountClass3endEv>
        setEnable(false);
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	c8 01       	movw	r24, r16
    250c:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN9MD_TCS2309setEnableEb>
        RGBTransformation();
    2510:	c8 01       	movw	r24, r16
    2512:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_ZN9MD_TCS23017RGBTransformationEv>
        s = 0;
    2516:	c0 e0       	ldi	r28, 0x00	; 0
    2518:	01 c0       	rjmp	.+2      	; 0x251c <_ZN9MD_TCS2307readFSMEh+0xb0>
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;

      if (currCol < RGB_SIZE)
      {
        // loop around again on next call to available()
        s--;
    251a:	c1 e0       	ldi	r28, 0x01	; 1
    }
    break;
  }

  return(s);
}
    251c:	8c 2f       	mov	r24, r28
    251e:	df 91       	pop	r29
    2520:	cf 91       	pop	r28
    2522:	1f 91       	pop	r17
    2524:	0f 91       	pop	r16
    2526:	08 95       	ret

00002528 <_ZN9MD_TCS2304readEv>:
  return(FreqCount.read() * _readDiv);
}

void MD_TCS230::read(void)
// initiate the finite state machine for reading a value
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	ec 01       	movw	r28, r24
  _readState = readFSM(0);
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN9MD_TCS2307readFSMEh>
    2534:	8e a7       	std	Y+46, r24	; 0x2e
}
    2536:	df 91       	pop	r29
    2538:	cf 91       	pop	r28
    253a:	08 95       	ret

0000253c <_ZN9MD_TCS2309availableEv>:

bool MD_TCS230::available(void)
// check if a value is ready. Called repeatedly until it is!
{
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	ec 01       	movw	r28, r24
  _readState = readFSM(_readState);
    2542:	6e a5       	ldd	r22, Y+46	; 0x2e
    2544:	0e 94 36 12 	call	0x246c	; 0x246c <_ZN9MD_TCS2307readFSMEh>
    2548:	98 2f       	mov	r25, r24
    254a:	8e a7       	std	Y+46, r24	; 0x2e

  return(_readState == 0);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	91 11       	cpse	r25, r1
    2550:	80 e0       	ldi	r24, 0x00	; 0
}
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	08 95       	ret

0000255e <_ZN14SoftwareSerial4readEv>:
    255e:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    2562:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    2566:	28 17       	cp	r18, r24
    2568:	39 07       	cpc	r19, r25
    256a:	b9 f4       	brne	.+46     	; 0x259a <_ZN14SoftwareSerial4readEv+0x3c>
    256c:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2570:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2574:	98 17       	cp	r25, r24
    2576:	89 f0       	breq	.+34     	; 0x259a <_ZN14SoftwareSerial4readEv+0x3c>
    2578:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	e0 52       	subi	r30, 0x20	; 32
    2580:	fc 4f       	sbci	r31, 0xFC	; 252
    2582:	80 81       	ld	r24, Z
    2584:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	2f 5f       	subi	r18, 0xFF	; 255
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	2f 73       	andi	r18, 0x3F	; 63
    2590:	33 27       	eor	r19, r19
    2592:	20 93 de 03 	sts	0x03DE, r18	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	08 95       	ret
    259a:	8f ef       	ldi	r24, 0xFF	; 255
    259c:	9f ef       	ldi	r25, 0xFF	; 255
    259e:	08 95       	ret

000025a0 <_ZN14SoftwareSerial5writeEh>:
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	dc 01       	movw	r26, r24
    25a8:	5c 96       	adiw	r26, 0x1c	; 28
    25aa:	8d 91       	ld	r24, X+
    25ac:	9c 91       	ld	r25, X
    25ae:	5d 97       	sbiw	r26, 0x1d	; 29
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	39 f4       	brne	.+14     	; 0x25c2 <_ZN14SoftwareSerial5writeEh+0x22>
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	13 96       	adiw	r26, 0x03	; 3
    25ba:	3c 93       	st	X, r19
    25bc:	2e 93       	st	-X, r18
    25be:	12 97       	sbiw	r26, 0x02	; 2
    25c0:	3b c0       	rjmp	.+118    	; 0x2638 <_ZN14SoftwareSerial5writeEh+0x98>
    25c2:	51 96       	adiw	r26, 0x11	; 17
    25c4:	ed 91       	ld	r30, X+
    25c6:	fc 91       	ld	r31, X
    25c8:	52 97       	sbiw	r26, 0x12	; 18
    25ca:	50 96       	adiw	r26, 0x10	; 16
    25cc:	2c 91       	ld	r18, X
    25ce:	50 97       	sbiw	r26, 0x10	; 16
    25d0:	32 2f       	mov	r19, r18
    25d2:	30 95       	com	r19
    25d4:	1f b7       	in	r17, 0x3f	; 63
    25d6:	5e 96       	adiw	r26, 0x1e	; 30
    25d8:	4c 91       	ld	r20, X
    25da:	5e 97       	sbiw	r26, 0x1e	; 30
    25dc:	74 2f       	mov	r23, r20
    25de:	72 70       	andi	r23, 0x02	; 2
    25e0:	41 fd       	sbrc	r20, 1
    25e2:	60 95       	com	r22
    25e4:	f8 94       	cli
    25e6:	40 81       	ld	r20, Z
    25e8:	77 23       	and	r23, r23
    25ea:	11 f0       	breq	.+4      	; 0x25f0 <_ZN14SoftwareSerial5writeEh+0x50>
    25ec:	42 2b       	or	r20, r18
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <_ZN14SoftwareSerial5writeEh+0x52>
    25f0:	43 23       	and	r20, r19
    25f2:	40 83       	st	Z, r20
    25f4:	ec 01       	movw	r28, r24
    25f6:	21 97       	sbiw	r28, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <_ZN14SoftwareSerial5writeEh+0x56>
    25fa:	48 e0       	ldi	r20, 0x08	; 8
    25fc:	50 81       	ld	r21, Z
    25fe:	60 ff       	sbrs	r22, 0
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <_ZN14SoftwareSerial5writeEh+0x66>
    2602:	52 2b       	or	r21, r18
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <_ZN14SoftwareSerial5writeEh+0x68>
    2606:	53 23       	and	r21, r19
    2608:	50 83       	st	Z, r21
    260a:	ec 01       	movw	r28, r24
    260c:	21 97       	sbiw	r28, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <_ZN14SoftwareSerial5writeEh+0x6c>
    2610:	66 95       	lsr	r22
    2612:	41 50       	subi	r20, 0x01	; 1
    2614:	99 f7       	brne	.-26     	; 0x25fc <_ZN14SoftwareSerial5writeEh+0x5c>
    2616:	80 81       	ld	r24, Z
    2618:	77 23       	and	r23, r23
    261a:	19 f0       	breq	.+6      	; 0x2622 <_ZN14SoftwareSerial5writeEh+0x82>
    261c:	83 23       	and	r24, r19
    261e:	80 83       	st	Z, r24
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <_ZN14SoftwareSerial5writeEh+0x86>
    2622:	28 2b       	or	r18, r24
    2624:	20 83       	st	Z, r18
    2626:	1f bf       	out	0x3f, r17	; 63
    2628:	5c 96       	adiw	r26, 0x1c	; 28
    262a:	8d 91       	ld	r24, X+
    262c:	9c 91       	ld	r25, X
    262e:	5d 97       	sbiw	r26, 0x1d	; 29
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <_ZN14SoftwareSerial5writeEh+0x90>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	08 95       	ret

00002640 <_ZN14SoftwareSerial5flushEv>:
    2640:	08 95       	ret

00002642 <_ZN14SoftwareSerial4peekEv>:
    2642:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    2646:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    264a:	28 17       	cp	r18, r24
    264c:	39 07       	cpc	r19, r25
    264e:	71 f4       	brne	.+28     	; 0x266c <_ZN14SoftwareSerial4peekEv+0x2a>
    2650:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2654:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2658:	98 17       	cp	r25, r24
    265a:	41 f0       	breq	.+16     	; 0x266c <_ZN14SoftwareSerial4peekEv+0x2a>
    265c:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	e0 52       	subi	r30, 0x20	; 32
    2664:	fc 4f       	sbci	r31, 0xFC	; 252
    2666:	80 81       	ld	r24, Z
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	08 95       	ret
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	9f ef       	ldi	r25, 0xFF	; 255
    2670:	08 95       	ret

00002672 <_ZN14SoftwareSerial9availableEv>:
    2672:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    2676:	30 91 21 04 	lds	r19, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    267a:	28 17       	cp	r18, r24
    267c:	39 07       	cpc	r19, r25
    267e:	71 f4       	brne	.+28     	; 0x269c <_ZN14SoftwareSerial9availableEv+0x2a>
    2680:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2684:	20 91 de 03 	lds	r18, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	80 5c       	subi	r24, 0xC0	; 192
    268c:	9f 4f       	sbci	r25, 0xFF	; 255
    268e:	82 1b       	sub	r24, r18
    2690:	91 09       	sbc	r25, r1
    2692:	60 e4       	ldi	r22, 0x40	; 64
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	0e 94 9e 1b 	call	0x373c	; 0x373c <__divmodhi4>
    269a:	08 95       	ret
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	08 95       	ret

000026a2 <_ZN14SoftwareSerial13stopListeningEv>:
    26a2:	e0 91 20 04 	lds	r30, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    26a6:	f0 91 21 04 	lds	r31, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    26aa:	e8 17       	cp	r30, r24
    26ac:	f9 07       	cpc	r31, r25
    26ae:	69 f4       	brne	.+26     	; 0x26ca <_ZN14SoftwareSerial13stopListeningEv+0x28>
    26b0:	a3 89       	ldd	r26, Z+19	; 0x13
    26b2:	b4 89       	ldd	r27, Z+20	; 0x14
    26b4:	9c 91       	ld	r25, X
    26b6:	85 89       	ldd	r24, Z+21	; 0x15
    26b8:	80 95       	com	r24
    26ba:	89 23       	and	r24, r25
    26bc:	8c 93       	st	X, r24
    26be:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    26c2:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	08 95       	ret
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	08 95       	ret

000026ce <_ZN14SoftwareSerial6listenEv>:
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	ec 01       	movw	r28, r24
    26d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26d8:	89 2b       	or	r24, r25
    26da:	f1 f0       	breq	.+60     	; 0x2718 <_ZN14SoftwareSerial6listenEv+0x4a>
    26dc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    26e0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    26e4:	c8 17       	cp	r28, r24
    26e6:	d9 07       	cpc	r29, r25
    26e8:	b9 f0       	breq	.+46     	; 0x2718 <_ZN14SoftwareSerial6listenEv+0x4a>
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	11 f0       	breq	.+4      	; 0x26f2 <_ZN14SoftwareSerial6listenEv+0x24>
    26ee:	0e 94 51 13 	call	0x26a2	; 0x26a2 <_ZN14SoftwareSerial13stopListeningEv>
    26f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f4:	8e 7f       	andi	r24, 0xFE	; 254
    26f6:	8e 8f       	std	Y+30, r24	; 0x1e
    26f8:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    26fc:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    2700:	d0 93 21 04 	sts	0x0421, r29	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    2704:	c0 93 20 04 	sts	0x0420, r28	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    2708:	eb 89       	ldd	r30, Y+19	; 0x13
    270a:	fc 89       	ldd	r31, Y+20	; 0x14
    270c:	90 81       	ld	r25, Z
    270e:	8d 89       	ldd	r24, Y+21	; 0x15
    2710:	89 2b       	or	r24, r25
    2712:	80 83       	st	Z, r24
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	01 c0       	rjmp	.+2      	; 0x271a <_ZN14SoftwareSerial6listenEv+0x4c>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <__vector_3>:
    2720:	1f 92       	push	r1
    2722:	0f 92       	push	r0
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	0f 92       	push	r0
    2728:	11 24       	eor	r1, r1
    272a:	2f 93       	push	r18
    272c:	3f 93       	push	r19
    272e:	4f 93       	push	r20
    2730:	5f 93       	push	r21
    2732:	6f 93       	push	r22
    2734:	7f 93       	push	r23
    2736:	8f 93       	push	r24
    2738:	9f 93       	push	r25
    273a:	af 93       	push	r26
    273c:	bf 93       	push	r27
    273e:	ef 93       	push	r30
    2740:	ff 93       	push	r31
    2742:	e0 91 20 04 	lds	r30, 0x0420	; 0x800420 <_ZN14SoftwareSerial13active_objectE>
    2746:	f0 91 21 04 	lds	r31, 0x0421	; 0x800421 <_ZN14SoftwareSerial13active_objectE+0x1>
    274a:	30 97       	sbiw	r30, 0x00	; 0
    274c:	09 f4       	brne	.+2      	; 0x2750 <__vector_3+0x30>
    274e:	51 c0       	rjmp	.+162    	; 0x27f2 <__vector_3+0xd2>
    2750:	96 8d       	ldd	r25, Z+30	; 0x1e
    2752:	a6 85       	ldd	r26, Z+14	; 0x0e
    2754:	b7 85       	ldd	r27, Z+15	; 0x0f
    2756:	85 85       	ldd	r24, Z+13	; 0x0d
    2758:	91 ff       	sbrs	r25, 1
    275a:	04 c0       	rjmp	.+8      	; 0x2764 <__vector_3+0x44>
    275c:	9c 91       	ld	r25, X
    275e:	89 23       	and	r24, r25
    2760:	29 f4       	brne	.+10     	; 0x276c <__vector_3+0x4c>
    2762:	47 c0       	rjmp	.+142    	; 0x27f2 <__vector_3+0xd2>
    2764:	9c 91       	ld	r25, X
    2766:	89 23       	and	r24, r25
    2768:	09 f0       	breq	.+2      	; 0x276c <__vector_3+0x4c>
    276a:	43 c0       	rjmp	.+134    	; 0x27f2 <__vector_3+0xd2>
    276c:	a3 89       	ldd	r26, Z+19	; 0x13
    276e:	b4 89       	ldd	r27, Z+20	; 0x14
    2770:	9c 91       	ld	r25, X
    2772:	85 89       	ldd	r24, Z+21	; 0x15
    2774:	80 95       	com	r24
    2776:	89 23       	and	r24, r25
    2778:	8c 93       	st	X, r24
    277a:	86 89       	ldd	r24, Z+22	; 0x16
    277c:	97 89       	ldd	r25, Z+23	; 0x17
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <__vector_3+0x5e>
    2782:	60 8d       	ldd	r22, Z+24	; 0x18
    2784:	71 8d       	ldd	r23, Z+25	; 0x19
    2786:	a6 85       	ldd	r26, Z+14	; 0x0e
    2788:	b7 85       	ldd	r27, Z+15	; 0x0f
    278a:	55 85       	ldd	r21, Z+13	; 0x0d
    278c:	38 e0       	ldi	r19, 0x08	; 8
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	cb 01       	movw	r24, r22
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <__vector_3+0x72>
    2796:	82 2f       	mov	r24, r18
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	95 95       	asr	r25
    279c:	87 95       	ror	r24
    279e:	28 2f       	mov	r18, r24
    27a0:	4c 91       	ld	r20, X
    27a2:	45 23       	and	r20, r21
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <__vector_3+0x88>
    27a6:	20 68       	ori	r18, 0x80	; 128
    27a8:	31 50       	subi	r19, 0x01	; 1
    27aa:	91 f7       	brne	.-28     	; 0x2790 <__vector_3+0x70>
    27ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    27ae:	81 fd       	sbrc	r24, 1
    27b0:	20 95       	com	r18
    27b2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	8f 73       	andi	r24, 0x3F	; 63
    27bc:	99 27       	eor	r25, r25
    27be:	30 91 de 03 	lds	r19, 0x03DE	; 0x8003de <_ZN14SoftwareSerial20_receive_buffer_headE>
    27c2:	38 17       	cp	r19, r24
    27c4:	49 f0       	breq	.+18     	; 0x27d8 <__vector_3+0xb8>
    27c6:	a0 91 df 03 	lds	r26, 0x03DF	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	a0 52       	subi	r26, 0x20	; 32
    27ce:	bc 4f       	sbci	r27, 0xFC	; 252
    27d0:	2c 93       	st	X, r18
    27d2:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <_ZN14SoftwareSerial20_receive_buffer_tailE>
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <__vector_3+0xbe>
    27d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    27da:	81 60       	ori	r24, 0x01	; 1
    27dc:	86 8f       	std	Z+30, r24	; 0x1e
    27de:	82 8d       	ldd	r24, Z+26	; 0x1a
    27e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <__vector_3+0xc2>
    27e6:	a3 89       	ldd	r26, Z+19	; 0x13
    27e8:	b4 89       	ldd	r27, Z+20	; 0x14
    27ea:	9c 91       	ld	r25, X
    27ec:	85 89       	ldd	r24, Z+21	; 0x15
    27ee:	89 2b       	or	r24, r25
    27f0:	8c 93       	st	X, r24
    27f2:	ff 91       	pop	r31
    27f4:	ef 91       	pop	r30
    27f6:	bf 91       	pop	r27
    27f8:	af 91       	pop	r26
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	7f 91       	pop	r23
    2800:	6f 91       	pop	r22
    2802:	5f 91       	pop	r21
    2804:	4f 91       	pop	r20
    2806:	3f 91       	pop	r19
    2808:	2f 91       	pop	r18
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <_ZN14SoftwareSerialD1Ev>:
    2814:	20 ef       	ldi	r18, 0xF0	; 240
    2816:	31 e0       	ldi	r19, 0x01	; 1
    2818:	fc 01       	movw	r30, r24
    281a:	31 83       	std	Z+1, r19	; 0x01
    281c:	20 83       	st	Z, r18
    281e:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <_ZN14SoftwareSerial13stopListeningEv>

00002822 <_ZN14SoftwareSerial5setTXEh>:
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
    282a:	16 2f       	mov	r17, r22
    282c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    282e:	66 95       	lsr	r22
    2830:	61 70       	andi	r22, 0x01	; 1
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	68 27       	eor	r22, r24
    2836:	81 2f       	mov	r24, r17
    2838:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    283c:	61 e0       	ldi	r22, 0x01	; 1
    283e:	81 2f       	mov	r24, r17
    2840:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2844:	81 2f       	mov	r24, r17
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	fc 01       	movw	r30, r24
    284a:	ea 55       	subi	r30, 0x5A	; 90
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	e4 91       	lpm	r30, Z
    2850:	e8 8b       	std	Y+16, r30	; 0x10
    2852:	fc 01       	movw	r30, r24
    2854:	e6 54       	subi	r30, 0x46	; 70
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	e4 91       	lpm	r30, Z
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	ee 0f       	add	r30, r30
    285e:	ff 1f       	adc	r31, r31
    2860:	e8 52       	subi	r30, 0x28	; 40
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	85 91       	lpm	r24, Z+
    2866:	94 91       	lpm	r25, Z
    2868:	9a 8b       	std	Y+18, r25	; 0x12
    286a:	89 8b       	std	Y+17, r24	; 0x11
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    2870:	1f 91       	pop	r17
    2872:	08 95       	ret

00002874 <_ZN14SoftwareSerial5setRXEh>:
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    287c:	16 2f       	mov	r17, r22
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	81 2f       	mov	r24, r17
    2882:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
    2886:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2888:	81 fd       	sbrc	r24, 1
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <_ZN14SoftwareSerial5setRXEh+0x20>
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	81 2f       	mov	r24, r17
    2890:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <digitalWrite>
    2894:	1c 87       	std	Y+12, r17	; 0x0c
    2896:	81 2f       	mov	r24, r17
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	fc 01       	movw	r30, r24
    289c:	ea 55       	subi	r30, 0x5A	; 90
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	e4 91       	lpm	r30, Z
    28a2:	ed 87       	std	Y+13, r30	; 0x0d
    28a4:	fc 01       	movw	r30, r24
    28a6:	e6 54       	subi	r30, 0x46	; 70
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	e4 91       	lpm	r30, Z
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	e2 53       	subi	r30, 0x32	; 50
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	85 91       	lpm	r24, Z+
    28b8:	94 91       	lpm	r25, Z
    28ba:	9f 87       	std	Y+15, r25	; 0x0f
    28bc:	8e 87       	std	Y+14, r24	; 0x0e
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	1f 91       	pop	r17
    28c4:	08 95       	ret

000028c6 <_ZN14SoftwareSerialC1Ehhb>:
    28c6:	1f 93       	push	r17
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	ec 01       	movw	r28, r24
    28ce:	16 2f       	mov	r17, r22
    28d0:	1b 82       	std	Y+3, r1	; 0x03
    28d2:	1a 82       	std	Y+2, r1	; 0x02
    28d4:	88 ee       	ldi	r24, 0xE8	; 232
    28d6:	93 e0       	ldi	r25, 0x03	; 3
    28d8:	a0 e0       	ldi	r26, 0x00	; 0
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	8c 83       	std	Y+4, r24	; 0x04
    28de:	9d 83       	std	Y+5, r25	; 0x05
    28e0:	ae 83       	std	Y+6, r26	; 0x06
    28e2:	bf 83       	std	Y+7, r27	; 0x07
    28e4:	80 ef       	ldi	r24, 0xF0	; 240
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	99 83       	std	Y+1, r25	; 0x01
    28ea:	88 83       	st	Y, r24
    28ec:	1f 8a       	std	Y+23, r1	; 0x17
    28ee:	1e 8a       	std	Y+22, r1	; 0x16
    28f0:	19 8e       	std	Y+25, r1	; 0x19
    28f2:	18 8e       	std	Y+24, r1	; 0x18
    28f4:	1b 8e       	std	Y+27, r1	; 0x1b
    28f6:	1a 8e       	std	Y+26, r1	; 0x1a
    28f8:	1d 8e       	std	Y+29, r1	; 0x1d
    28fa:	1c 8e       	std	Y+28, r1	; 0x1c
    28fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28fe:	8e 7f       	andi	r24, 0xFE	; 254
    2900:	20 fb       	bst	r18, 0
    2902:	81 f9       	bld	r24, 1
    2904:	8e 8f       	std	Y+30, r24	; 0x1e
    2906:	64 2f       	mov	r22, r20
    2908:	ce 01       	movw	r24, r28
    290a:	0e 94 11 14 	call	0x2822	; 0x2822 <_ZN14SoftwareSerial5setTXEh>
    290e:	61 2f       	mov	r22, r17
    2910:	ce 01       	movw	r24, r28
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <_ZN14SoftwareSerial5setRXEh>

0000291c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	ec 01       	movw	r28, r24
    2922:	9a 01       	movw	r18, r20
    2924:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    2926:	1b 8e       	std	Y+27, r1	; 0x1b
    2928:	1a 8e       	std	Y+26, r1	; 0x1a
    292a:	19 8e       	std	Y+25, r1	; 0x19
    292c:	18 8e       	std	Y+24, r1	; 0x18
    292e:	1f 8a       	std	Y+23, r1	; 0x17
    2930:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	79 e0       	ldi	r23, 0x09	; 9
    2936:	8d e3       	ldi	r24, 0x3D	; 61
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__divmodsi4>
    293e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2940:	24 30       	cpi	r18, 0x04	; 4
    2942:	31 05       	cpc	r19, r1
    2944:	18 f0       	brcs	.+6      	; 0x294c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    2946:	c9 01       	movw	r24, r18
    2948:	03 97       	sbiw	r24, 0x03	; 3
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    2950:	9d 8f       	std	Y+29, r25	; 0x1d
    2952:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    2954:	6c 85       	ldd	r22, Y+12	; 0x0c
    2956:	66 31       	cpi	r22, 0x16	; 22
    2958:	08 f0       	brcs	.+2      	; 0x295c <_ZN14SoftwareSerial5beginEl+0x40>
    295a:	69 c0       	rjmp	.+210    	; 0x2a2e <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    295c:	c9 01       	movw	r24, r18
    295e:	96 95       	lsr	r25
    2960:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2962:	84 31       	cpi	r24, 0x14	; 20
    2964:	91 05       	cpc	r25, r1
    2966:	10 f0       	brcs	.+4      	; 0x296c <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    2968:	43 97       	sbiw	r24, 0x13	; 19
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    2970:	9f 8b       	std	Y+23, r25	; 0x17
    2972:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2974:	36 97       	sbiw	r30, 0x06	; 6
    2976:	18 f0       	brcs	.+6      	; 0x297e <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    2978:	c9 01       	movw	r24, r18
    297a:	05 97       	sbiw	r24, 0x05	; 5
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    2982:	99 8f       	std	Y+25, r25	; 0x19
    2984:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    2986:	c9 01       	movw	r24, r18
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	28 0f       	add	r18, r24
    298e:	39 1f       	adc	r19, r25
    2990:	36 95       	lsr	r19
    2992:	27 95       	ror	r18
    2994:	36 95       	lsr	r19
    2996:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    2998:	2d 30       	cpi	r18, 0x0D	; 13
    299a:	31 05       	cpc	r19, r1
    299c:	18 f0       	brcs	.+6      	; 0x29a4 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    299e:	2c 50       	subi	r18, 0x0C	; 12
    29a0:	31 09       	sbc	r19, r1
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    29a4:	21 e0       	ldi	r18, 0x01	; 1
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    29a8:	3b 8f       	std	Y+27, r19	; 0x1b
    29aa:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    29ac:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    29b0:	68 30       	cpi	r22, 0x08	; 8
    29b2:	50 f0       	brcs	.+20     	; 0x29c8 <_ZN14SoftwareSerial5beginEl+0xac>
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	6e 30       	cpi	r22, 0x0E	; 14
    29b8:	08 f4       	brcc	.+2      	; 0x29bc <_ZN14SoftwareSerial5beginEl+0xa0>
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <_ZN14SoftwareSerial5beginEl+0xa6>
    29c0:	88 0f       	add	r24, r24
    29c2:	2a 95       	dec	r18
    29c4:	ea f7       	brpl	.-6      	; 0x29c0 <_ZN14SoftwareSerial5beginEl+0xa4>
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <_ZN14SoftwareSerial5beginEl+0xae>
    29c8:	84 e0       	ldi	r24, 0x04	; 4
    29ca:	89 2b       	or	r24, r25
    29cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    29d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d2:	98 30       	cpi	r25, 0x08	; 8
    29d4:	38 f0       	brcs	.+14     	; 0x29e4 <_ZN14SoftwareSerial5beginEl+0xc8>
    29d6:	9e 30       	cpi	r25, 0x0E	; 14
    29d8:	40 f0       	brcs	.+16     	; 0x29ea <_ZN14SoftwareSerial5beginEl+0xce>
    29da:	96 31       	cpi	r25, 0x16	; 22
    29dc:	48 f0       	brcs	.+18     	; 0x29f0 <_ZN14SoftwareSerial5beginEl+0xd4>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <_ZN14SoftwareSerial5beginEl+0xd8>
    29e4:	2d e6       	ldi	r18, 0x6D	; 109
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <_ZN14SoftwareSerial5beginEl+0xd8>
    29ea:	2b e6       	ldi	r18, 0x6B	; 107
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <_ZN14SoftwareSerial5beginEl+0xd8>
    29f0:	2c e6       	ldi	r18, 0x6C	; 108
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	3c 8b       	std	Y+20, r19	; 0x14
    29f6:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    29f8:	98 30       	cpi	r25, 0x08	; 8
    29fa:	30 f4       	brcc	.+12     	; 0x2a08 <_ZN14SoftwareSerial5beginEl+0xec>
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	01 c0       	rjmp	.+2      	; 0x2a02 <_ZN14SoftwareSerial5beginEl+0xe6>
    2a00:	88 0f       	add	r24, r24
    2a02:	9a 95       	dec	r25
    2a04:	ea f7       	brpl	.-6      	; 0x2a00 <_ZN14SoftwareSerial5beginEl+0xe4>
    2a06:	0e c0       	rjmp	.+28     	; 0x2a24 <_ZN14SoftwareSerial5beginEl+0x108>
    2a08:	29 2f       	mov	r18, r25
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	9e 30       	cpi	r25, 0x0E	; 14
    2a0e:	18 f4       	brcc	.+6      	; 0x2a16 <_ZN14SoftwareSerial5beginEl+0xfa>
    2a10:	28 50       	subi	r18, 0x08	; 8
    2a12:	31 09       	sbc	r19, r1
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <_ZN14SoftwareSerial5beginEl+0xfe>
    2a16:	2e 50       	subi	r18, 0x0E	; 14
    2a18:	31 09       	sbc	r19, r1
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	01 c0       	rjmp	.+2      	; 0x2a20 <_ZN14SoftwareSerial5beginEl+0x104>
    2a1e:	88 0f       	add	r24, r24
    2a20:	2a 95       	dec	r18
    2a22:	ea f7       	brpl	.-6      	; 0x2a1e <_ZN14SoftwareSerial5beginEl+0x102>
    2a24:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    2a26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a28:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2a2e:	ce 01       	movw	r24, r28
}
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    2a34:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <_ZN14SoftwareSerial6listenEv>

00002a38 <__cmpsf2>:
    2a38:	0e 94 57 15 	call	0x2aae	; 0x2aae <__fp_cmp>
    2a3c:	08 f4       	brcc	.+2      	; 0x2a40 <__cmpsf2+0x8>
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	08 95       	ret

00002a42 <__fixsfsi>:
    2a42:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixunssfsi>
    2a46:	68 94       	set
    2a48:	b1 11       	cpse	r27, r1
    2a4a:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__fp_szero>
    2a4e:	08 95       	ret

00002a50 <__fixunssfsi>:
    2a50:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fp_splitA>
    2a54:	88 f0       	brcs	.+34     	; 0x2a78 <__fixunssfsi+0x28>
    2a56:	9f 57       	subi	r25, 0x7F	; 127
    2a58:	98 f0       	brcs	.+38     	; 0x2a80 <__fixunssfsi+0x30>
    2a5a:	b9 2f       	mov	r27, r25
    2a5c:	99 27       	eor	r25, r25
    2a5e:	b7 51       	subi	r27, 0x17	; 23
    2a60:	b0 f0       	brcs	.+44     	; 0x2a8e <__fixunssfsi+0x3e>
    2a62:	e1 f0       	breq	.+56     	; 0x2a9c <__fixunssfsi+0x4c>
    2a64:	66 0f       	add	r22, r22
    2a66:	77 1f       	adc	r23, r23
    2a68:	88 1f       	adc	r24, r24
    2a6a:	99 1f       	adc	r25, r25
    2a6c:	1a f0       	brmi	.+6      	; 0x2a74 <__fixunssfsi+0x24>
    2a6e:	ba 95       	dec	r27
    2a70:	c9 f7       	brne	.-14     	; 0x2a64 <__fixunssfsi+0x14>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <__fixunssfsi+0x4c>
    2a74:	b1 30       	cpi	r27, 0x01	; 1
    2a76:	91 f0       	breq	.+36     	; 0x2a9c <__fixunssfsi+0x4c>
    2a78:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <__fp_zero>
    2a7c:	b1 e0       	ldi	r27, 0x01	; 1
    2a7e:	08 95       	ret
    2a80:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <__fp_zero>
    2a84:	67 2f       	mov	r22, r23
    2a86:	78 2f       	mov	r23, r24
    2a88:	88 27       	eor	r24, r24
    2a8a:	b8 5f       	subi	r27, 0xF8	; 248
    2a8c:	39 f0       	breq	.+14     	; 0x2a9c <__fixunssfsi+0x4c>
    2a8e:	b9 3f       	cpi	r27, 0xF9	; 249
    2a90:	cc f3       	brlt	.-14     	; 0x2a84 <__fixunssfsi+0x34>
    2a92:	86 95       	lsr	r24
    2a94:	77 95       	ror	r23
    2a96:	67 95       	ror	r22
    2a98:	b3 95       	inc	r27
    2a9a:	d9 f7       	brne	.-10     	; 0x2a92 <__fixunssfsi+0x42>
    2a9c:	3e f4       	brtc	.+14     	; 0x2aac <__fixunssfsi+0x5c>
    2a9e:	90 95       	com	r25
    2aa0:	80 95       	com	r24
    2aa2:	70 95       	com	r23
    2aa4:	61 95       	neg	r22
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	08 95       	ret

00002aae <__fp_cmp>:
    2aae:	99 0f       	add	r25, r25
    2ab0:	00 08       	sbc	r0, r0
    2ab2:	55 0f       	add	r21, r21
    2ab4:	aa 0b       	sbc	r26, r26
    2ab6:	e0 e8       	ldi	r30, 0x80	; 128
    2ab8:	fe ef       	ldi	r31, 0xFE	; 254
    2aba:	16 16       	cp	r1, r22
    2abc:	17 06       	cpc	r1, r23
    2abe:	e8 07       	cpc	r30, r24
    2ac0:	f9 07       	cpc	r31, r25
    2ac2:	c0 f0       	brcs	.+48     	; 0x2af4 <__fp_cmp+0x46>
    2ac4:	12 16       	cp	r1, r18
    2ac6:	13 06       	cpc	r1, r19
    2ac8:	e4 07       	cpc	r30, r20
    2aca:	f5 07       	cpc	r31, r21
    2acc:	98 f0       	brcs	.+38     	; 0x2af4 <__fp_cmp+0x46>
    2ace:	62 1b       	sub	r22, r18
    2ad0:	73 0b       	sbc	r23, r19
    2ad2:	84 0b       	sbc	r24, r20
    2ad4:	95 0b       	sbc	r25, r21
    2ad6:	39 f4       	brne	.+14     	; 0x2ae6 <__fp_cmp+0x38>
    2ad8:	0a 26       	eor	r0, r26
    2ada:	61 f0       	breq	.+24     	; 0x2af4 <__fp_cmp+0x46>
    2adc:	23 2b       	or	r18, r19
    2ade:	24 2b       	or	r18, r20
    2ae0:	25 2b       	or	r18, r21
    2ae2:	21 f4       	brne	.+8      	; 0x2aec <__fp_cmp+0x3e>
    2ae4:	08 95       	ret
    2ae6:	0a 26       	eor	r0, r26
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <__fp_cmp+0x3e>
    2aea:	a1 40       	sbci	r26, 0x01	; 1
    2aec:	a6 95       	lsr	r26
    2aee:	8f ef       	ldi	r24, 0xFF	; 255
    2af0:	81 1d       	adc	r24, r1
    2af2:	81 1d       	adc	r24, r1
    2af4:	08 95       	ret

00002af6 <__fp_split3>:
    2af6:	57 fd       	sbrc	r21, 7
    2af8:	90 58       	subi	r25, 0x80	; 128
    2afa:	44 0f       	add	r20, r20
    2afc:	55 1f       	adc	r21, r21
    2afe:	59 f0       	breq	.+22     	; 0x2b16 <__fp_splitA+0x10>
    2b00:	5f 3f       	cpi	r21, 0xFF	; 255
    2b02:	71 f0       	breq	.+28     	; 0x2b20 <__fp_splitA+0x1a>
    2b04:	47 95       	ror	r20

00002b06 <__fp_splitA>:
    2b06:	88 0f       	add	r24, r24
    2b08:	97 fb       	bst	r25, 7
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	61 f0       	breq	.+24     	; 0x2b26 <__fp_splitA+0x20>
    2b0e:	9f 3f       	cpi	r25, 0xFF	; 255
    2b10:	79 f0       	breq	.+30     	; 0x2b30 <__fp_splitA+0x2a>
    2b12:	87 95       	ror	r24
    2b14:	08 95       	ret
    2b16:	12 16       	cp	r1, r18
    2b18:	13 06       	cpc	r1, r19
    2b1a:	14 06       	cpc	r1, r20
    2b1c:	55 1f       	adc	r21, r21
    2b1e:	f2 cf       	rjmp	.-28     	; 0x2b04 <__fp_split3+0xe>
    2b20:	46 95       	lsr	r20
    2b22:	f1 df       	rcall	.-30     	; 0x2b06 <__fp_splitA>
    2b24:	08 c0       	rjmp	.+16     	; 0x2b36 <__fp_splitA+0x30>
    2b26:	16 16       	cp	r1, r22
    2b28:	17 06       	cpc	r1, r23
    2b2a:	18 06       	cpc	r1, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	f1 cf       	rjmp	.-30     	; 0x2b12 <__fp_splitA+0xc>
    2b30:	86 95       	lsr	r24
    2b32:	71 05       	cpc	r23, r1
    2b34:	61 05       	cpc	r22, r1
    2b36:	08 94       	sec
    2b38:	08 95       	ret

00002b3a <__fp_zero>:
    2b3a:	e8 94       	clt

00002b3c <__fp_szero>:
    2b3c:	bb 27       	eor	r27, r27
    2b3e:	66 27       	eor	r22, r22
    2b40:	77 27       	eor	r23, r23
    2b42:	cb 01       	movw	r24, r22
    2b44:	97 f9       	bld	r25, 7
    2b46:	08 95       	ret

00002b48 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2b48:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2b4a:	91 8d       	ldd	r25, Z+25	; 0x19
    2b4c:	22 8d       	ldd	r18, Z+26	; 0x1a
    2b4e:	89 2f       	mov	r24, r25
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	80 5c       	subi	r24, 0xC0	; 192
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	82 1b       	sub	r24, r18
    2b58:	91 09       	sbc	r25, r1
}
    2b5a:	8f 73       	andi	r24, 0x3F	; 63
    2b5c:	99 27       	eor	r25, r25
    2b5e:	08 95       	ret

00002b60 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    2b60:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b62:	91 8d       	ldd	r25, Z+25	; 0x19
    2b64:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b66:	98 17       	cp	r25, r24
    2b68:	31 f0       	breq	.+12     	; 0x2b76 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2b6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b6c:	e8 0f       	add	r30, r24
    2b6e:	f1 1d       	adc	r31, r1
    2b70:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b7a:	08 95       	ret

00002b7c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    2b7c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b7e:	91 8d       	ldd	r25, Z+25	; 0x19
    2b80:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b82:	98 17       	cp	r25, r24
    2b84:	61 f0       	breq	.+24     	; 0x2b9e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2b86:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b88:	df 01       	movw	r26, r30
    2b8a:	a8 0f       	add	r26, r24
    2b8c:	b1 1d       	adc	r27, r1
    2b8e:	5d 96       	adiw	r26, 0x1d	; 29
    2b90:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2b92:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b94:	9f 5f       	subi	r25, 0xFF	; 255
    2b96:	9f 73       	andi	r25, 0x3F	; 63
    2b98:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2ba2:	08 95       	ret

00002ba4 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    2ba8:	44 8d       	ldd	r20, Z+28	; 0x1c
    2baa:	25 2f       	mov	r18, r21
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	84 2f       	mov	r24, r20
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2bb2:	82 1b       	sub	r24, r18
    2bb4:	93 0b       	sbc	r25, r19
    2bb6:	54 17       	cp	r21, r20
    2bb8:	10 f0       	brcs	.+4      	; 0x2bbe <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2bba:	cf 96       	adiw	r24, 0x3f	; 63
    2bbc:	08 95       	ret
  return tail - head - 1;
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
}
    2bc0:	08 95       	ret

00002bc2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2bc2:	8d e3       	ldi	r24, 0x3D	; 61
    2bc4:	97 e1       	ldi	r25, 0x17	; 23
    2bc6:	89 2b       	or	r24, r25
    2bc8:	49 f0       	breq	.+18     	; 0x2bdc <_Z14serialEventRunv+0x1a>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	89 2b       	or	r24, r25
    2bd0:	29 f0       	breq	.+10     	; 0x2bdc <_Z14serialEventRunv+0x1a>
    2bd2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_Z17Serial0_availablev>
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2bdc:	08 95       	ret

00002bde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2bde:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2be0:	84 8d       	ldd	r24, Z+28	; 0x1c
    2be2:	df 01       	movw	r26, r30
    2be4:	a8 0f       	add	r26, r24
    2be6:	b1 1d       	adc	r27, r1
    2be8:	a3 5a       	subi	r26, 0xA3	; 163
    2bea:	bf 4f       	sbci	r27, 0xFF	; 255
    2bec:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2bee:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	8f 73       	andi	r24, 0x3F	; 63
    2bf6:	99 27       	eor	r25, r25
    2bf8:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2bfa:	a6 89       	ldd	r26, Z+22	; 0x16
    2bfc:	b7 89       	ldd	r27, Z+23	; 0x17
    2bfe:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2c00:	a0 89       	ldd	r26, Z+16	; 0x10
    2c02:	b1 89       	ldd	r27, Z+17	; 0x11
    2c04:	8c 91       	ld	r24, X
    2c06:	83 70       	andi	r24, 0x03	; 3
    2c08:	80 64       	ori	r24, 0x40	; 64
    2c0a:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2c0c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c10:	98 13       	cpse	r25, r24
    2c12:	06 c0       	rjmp	.+12     	; 0x2c20 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2c14:	02 88       	ldd	r0, Z+18	; 0x12
    2c16:	f3 89       	ldd	r31, Z+19	; 0x13
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	8f 7d       	andi	r24, 0xDF	; 223
    2c1e:	80 83       	st	Z, r24
    2c20:	08 95       	ret

00002c22 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2c22:	ef 92       	push	r14
    2c24:	ff 92       	push	r15
    2c26:	0f 93       	push	r16
    2c28:	1f 93       	push	r17
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	ec 01       	movw	r28, r24
  _written = true;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2c34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c36:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c38:	98 13       	cpse	r25, r24
    2c3a:	05 c0       	rjmp	.+10     	; 0x2c46 <_ZN14HardwareSerial5writeEh+0x24>
    2c3c:	e8 89       	ldd	r30, Y+16	; 0x10
    2c3e:	f9 89       	ldd	r31, Y+17	; 0x11
    2c40:	80 81       	ld	r24, Z
    2c42:	85 fd       	sbrc	r24, 5
    2c44:	26 c0       	rjmp	.+76     	; 0x2c92 <_ZN14HardwareSerial5writeEh+0x70>
    2c46:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2c48:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c4a:	10 e0       	ldi	r17, 0x00	; 0
    2c4c:	0f 5f       	subi	r16, 0xFF	; 255
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	0f 73       	andi	r16, 0x3F	; 63
    2c52:	11 27       	eor	r17, r17
    2c54:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2c56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c58:	e8 12       	cpse	r14, r24
    2c5a:	0c c0       	rjmp	.+24     	; 0x2c74 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	07 fc       	sbrc	r0, 7
    2c60:	fa cf       	rjmp	.-12     	; 0x2c56 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2c62:	e8 89       	ldd	r30, Y+16	; 0x10
    2c64:	f9 89       	ldd	r31, Y+17	; 0x11
    2c66:	80 81       	ld	r24, Z
    2c68:	85 ff       	sbrs	r24, 5
    2c6a:	f5 cf       	rjmp	.-22     	; 0x2c56 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2c72:	f1 cf       	rjmp	.-30     	; 0x2c56 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2c74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c76:	fe 01       	movw	r30, r28
    2c78:	e8 0f       	add	r30, r24
    2c7a:	f1 1d       	adc	r31, r1
    2c7c:	e3 5a       	subi	r30, 0xA3	; 163
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2c82:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c84:	f8 94       	cli
    _tx_buffer_head = i;
    2c86:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    2c88:	ea 89       	ldd	r30, Y+18	; 0x12
    2c8a:	fb 89       	ldd	r31, Y+19	; 0x13
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 62       	ori	r24, 0x20	; 32
    2c90:	0a c0       	rjmp	.+20     	; 0x2ca6 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2c92:	9f b7       	in	r25, 0x3f	; 63
    2c94:	f8 94       	cli
      *_udr = c;
    2c96:	ee 89       	ldd	r30, Y+22	; 0x16
    2c98:	ff 89       	ldd	r31, Y+23	; 0x17
    2c9a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2c9c:	e8 89       	ldd	r30, Y+16	; 0x10
    2c9e:	f9 89       	ldd	r31, Y+17	; 0x11
    2ca0:	80 81       	ld	r24, Z
    2ca2:	83 70       	andi	r24, 0x03	; 3
    2ca4:	80 64       	ori	r24, 0x40	; 64
    2ca6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ca8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	08 95       	ret

00002cbc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2cc2:	88 8d       	ldd	r24, Y+24	; 0x18
    2cc4:	88 23       	and	r24, r24
    2cc6:	c9 f0       	breq	.+50     	; 0x2cfa <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2cc8:	ea 89       	ldd	r30, Y+18	; 0x12
    2cca:	fb 89       	ldd	r31, Y+19	; 0x13
    2ccc:	80 81       	ld	r24, Z
    2cce:	85 fd       	sbrc	r24, 5
    2cd0:	05 c0       	rjmp	.+10     	; 0x2cdc <_ZN14HardwareSerial5flushEv+0x20>
    2cd2:	a8 89       	ldd	r26, Y+16	; 0x10
    2cd4:	b9 89       	ldd	r27, Y+17	; 0x11
    2cd6:	8c 91       	ld	r24, X
    2cd8:	86 fd       	sbrc	r24, 6
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	07 fc       	sbrc	r0, 7
    2ce0:	f5 cf       	rjmp	.-22     	; 0x2ccc <_ZN14HardwareSerial5flushEv+0x10>
    2ce2:	80 81       	ld	r24, Z
    2ce4:	85 ff       	sbrs	r24, 5
    2ce6:	f2 cf       	rjmp	.-28     	; 0x2ccc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2ce8:	a8 89       	ldd	r26, Y+16	; 0x10
    2cea:	b9 89       	ldd	r27, Y+17	; 0x11
    2cec:	8c 91       	ld	r24, X
    2cee:	85 ff       	sbrs	r24, 5
    2cf0:	ed cf       	rjmp	.-38     	; 0x2ccc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2cf8:	e7 cf       	rjmp	.-50     	; 0x2cc8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2d00:	cf 92       	push	r12
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	1f 93       	push	r17
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	ec 01       	movw	r28, r24
    2d10:	6a 01       	movw	r12, r20
    2d12:	7b 01       	movw	r14, r22
    2d14:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2d16:	e8 89       	ldd	r30, Y+16	; 0x10
    2d18:	f9 89       	ldd	r31, Y+17	; 0x11
    2d1a:	82 e0       	ldi	r24, 0x02	; 2
    2d1c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d1e:	41 15       	cp	r20, r1
    2d20:	51 4e       	sbci	r21, 0xE1	; 225
    2d22:	61 05       	cpc	r22, r1
    2d24:	71 05       	cpc	r23, r1
    2d26:	b1 f0       	breq	.+44     	; 0x2d54 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	79 e0       	ldi	r23, 0x09	; 9
    2d2c:	8d e3       	ldi	r24, 0x3D	; 61
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a7 01       	movw	r20, r14
    2d32:	96 01       	movw	r18, r12
    2d34:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__udivmodsi4>
    2d38:	da 01       	movw	r26, r20
    2d3a:	c9 01       	movw	r24, r18
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	a1 09       	sbc	r26, r1
    2d40:	b1 09       	sbc	r27, r1
    2d42:	b6 95       	lsr	r27
    2d44:	a7 95       	ror	r26
    2d46:	97 95       	ror	r25
    2d48:	87 95       	ror	r24
    2d4a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2d4c:	21 15       	cp	r18, r1
    2d4e:	80 e1       	ldi	r24, 0x10	; 16
    2d50:	38 07       	cpc	r19, r24
    2d52:	a8 f0       	brcs	.+42     	; 0x2d7e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    2d54:	e8 89       	ldd	r30, Y+16	; 0x10
    2d56:	f9 89       	ldd	r31, Y+17	; 0x11
    2d58:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2d5a:	60 e8       	ldi	r22, 0x80	; 128
    2d5c:	74 e8       	ldi	r23, 0x84	; 132
    2d5e:	8e e1       	ldi	r24, 0x1E	; 30
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	a7 01       	movw	r20, r14
    2d64:	96 01       	movw	r18, r12
    2d66:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__udivmodsi4>
    2d6a:	da 01       	movw	r26, r20
    2d6c:	c9 01       	movw	r24, r18
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	a1 09       	sbc	r26, r1
    2d72:	b1 09       	sbc	r27, r1
    2d74:	b6 95       	lsr	r27
    2d76:	a7 95       	ror	r26
    2d78:	97 95       	ror	r25
    2d7a:	87 95       	ror	r24
    2d7c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d80:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d82:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2d84:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d86:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d88:	20 83       	st	Z, r18

  _written = false;
    2d8a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2d8c:	ec 89       	ldd	r30, Y+20	; 0x14
    2d8e:	fd 89       	ldd	r31, Y+21	; 0x15
    2d90:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    2d92:	ea 89       	ldd	r30, Y+18	; 0x12
    2d94:	fb 89       	ldd	r31, Y+19	; 0x13
    2d96:	80 81       	ld	r24, Z
    2d98:	80 61       	ori	r24, 0x10	; 16
    2d9a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    2d9c:	ea 89       	ldd	r30, Y+18	; 0x12
    2d9e:	fb 89       	ldd	r31, Y+19	; 0x13
    2da0:	80 81       	ld	r24, Z
    2da2:	88 60       	ori	r24, 0x08	; 8
    2da4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    2da6:	ea 89       	ldd	r30, Y+18	; 0x12
    2da8:	fb 89       	ldd	r31, Y+19	; 0x13
    2daa:	80 81       	ld	r24, Z
    2dac:	80 68       	ori	r24, 0x80	; 128
    2dae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2db0:	ea 89       	ldd	r30, Y+18	; 0x12
    2db2:	fb 89       	ldd	r31, Y+19	; 0x13
    2db4:	80 81       	ld	r24, Z
    2db6:	8f 7d       	andi	r24, 0xDF	; 223
    2db8:	80 83       	st	Z, r24
}
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	08 95       	ret

00002dca <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2dca:	1f 92       	push	r1
    2dcc:	0f 92       	push	r0
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	0f 92       	push	r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	2f 93       	push	r18
    2dd6:	8f 93       	push	r24
    2dd8:	9f 93       	push	r25
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2dde:	e0 91 32 04 	lds	r30, 0x0432	; 0x800432 <Serial+0x10>
    2de2:	f0 91 33 04 	lds	r31, 0x0433	; 0x800433 <Serial+0x11>
    2de6:	80 81       	ld	r24, Z
    2de8:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <Serial+0x16>
    2dec:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <Serial+0x17>
    2df0:	82 fd       	sbrc	r24, 2
    2df2:	12 c0       	rjmp	.+36     	; 0x2e18 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2df4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2df6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <Serial+0x19>
    2dfa:	8f 5f       	subi	r24, 0xFF	; 255
    2dfc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2dfe:	20 91 3c 04 	lds	r18, 0x043C	; 0x80043c <Serial+0x1a>
    2e02:	82 17       	cp	r24, r18
    2e04:	51 f0       	breq	.+20     	; 0x2e1a <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    2e06:	e0 91 3b 04 	lds	r30, 0x043B	; 0x80043b <Serial+0x19>
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	ee 5d       	subi	r30, 0xDE	; 222
    2e0e:	fb 4f       	sbci	r31, 0xFB	; 251
    2e10:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2e12:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <Serial+0x19>
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2e18:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2e1a:	ff 91       	pop	r31
    2e1c:	ef 91       	pop	r30
    2e1e:	9f 91       	pop	r25
    2e20:	8f 91       	pop	r24
    2e22:	2f 91       	pop	r18
    2e24:	0f 90       	pop	r0
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	0f 90       	pop	r0
    2e2a:	1f 90       	pop	r1
    2e2c:	18 95       	reti

00002e2e <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	11 24       	eor	r1, r1
    2e38:	2f 93       	push	r18
    2e3a:	3f 93       	push	r19
    2e3c:	4f 93       	push	r20
    2e3e:	5f 93       	push	r21
    2e40:	6f 93       	push	r22
    2e42:	7f 93       	push	r23
    2e44:	8f 93       	push	r24
    2e46:	9f 93       	push	r25
    2e48:	af 93       	push	r26
    2e4a:	bf 93       	push	r27
    2e4c:	ef 93       	push	r30
    2e4e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    2e50:	82 e2       	ldi	r24, 0x22	; 34
    2e52:	94 e0       	ldi	r25, 0x04	; 4
    2e54:	0e 94 ef 15 	call	0x2bde	; 0x2bde <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    2e58:	ff 91       	pop	r31
    2e5a:	ef 91       	pop	r30
    2e5c:	bf 91       	pop	r27
    2e5e:	af 91       	pop	r26
    2e60:	9f 91       	pop	r25
    2e62:	8f 91       	pop	r24
    2e64:	7f 91       	pop	r23
    2e66:	6f 91       	pop	r22
    2e68:	5f 91       	pop	r21
    2e6a:	4f 91       	pop	r20
    2e6c:	3f 91       	pop	r19
    2e6e:	2f 91       	pop	r18
    2e70:	0f 90       	pop	r0
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	0f 90       	pop	r0
    2e76:	1f 90       	pop	r1
    2e78:	18 95       	reti

00002e7a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e7a:	82 e2       	ldi	r24, 0x22	; 34
    2e7c:	94 e0       	ldi	r25, 0x04	; 4
    2e7e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <_ZN14HardwareSerial9availableEv>
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	89 2b       	or	r24, r25
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <_Z17Serial0_availablev+0x10>
    2e88:	20 e0       	ldi	r18, 0x00	; 0
}
    2e8a:	82 2f       	mov	r24, r18
    2e8c:	08 95       	ret

00002e8e <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2e8e:	e2 e2       	ldi	r30, 0x22	; 34
    2e90:	f4 e0       	ldi	r31, 0x04	; 4
    2e92:	13 82       	std	Z+3, r1	; 0x03
    2e94:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2e96:	88 ee       	ldi	r24, 0xE8	; 232
    2e98:	93 e0       	ldi	r25, 0x03	; 3
    2e9a:	a0 e0       	ldi	r26, 0x00	; 0
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	84 83       	std	Z+4, r24	; 0x04
    2ea0:	95 83       	std	Z+5, r25	; 0x05
    2ea2:	a6 83       	std	Z+6, r26	; 0x06
    2ea4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	92 e0       	ldi	r25, 0x02	; 2
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	85 ec       	ldi	r24, 0xC5	; 197
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	95 87       	std	Z+13, r25	; 0x0d
    2eb4:	84 87       	std	Z+12, r24	; 0x0c
    2eb6:	84 ec       	ldi	r24, 0xC4	; 196
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	97 87       	std	Z+15, r25	; 0x0f
    2ebc:	86 87       	std	Z+14, r24	; 0x0e
    2ebe:	80 ec       	ldi	r24, 0xC0	; 192
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	91 8b       	std	Z+17, r25	; 0x11
    2ec4:	80 8b       	std	Z+16, r24	; 0x10
    2ec6:	81 ec       	ldi	r24, 0xC1	; 193
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	93 8b       	std	Z+19, r25	; 0x13
    2ecc:	82 8b       	std	Z+18, r24	; 0x12
    2ece:	82 ec       	ldi	r24, 0xC2	; 194
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	95 8b       	std	Z+21, r25	; 0x15
    2ed4:	84 8b       	std	Z+20, r24	; 0x14
    2ed6:	86 ec       	ldi	r24, 0xC6	; 198
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	97 8b       	std	Z+23, r25	; 0x17
    2edc:	86 8b       	std	Z+22, r24	; 0x16
    2ede:	11 8e       	std	Z+25, r1	; 0x19
    2ee0:	12 8e       	std	Z+26, r1	; 0x1a
    2ee2:	13 8e       	std	Z+27, r1	; 0x1b
    2ee4:	14 8e       	std	Z+28, r1	; 0x1c
    2ee6:	08 95       	ret

00002ee8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2ee8:	0e 94 59 19 	call	0x32b2	; 0x32b2 <init>

	initVariant();
    2eec:	0e 94 de 10 	call	0x21bc	; 0x21bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2ef0:	0e 94 39 05 	call	0xa72	; 0xa72 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2ef4:	c1 ee       	ldi	r28, 0xE1	; 225
    2ef6:	d5 e1       	ldi	r29, 0x15	; 21
#endif
	
	setup();
    
	for (;;) {
		loop();
    2ef8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <loop>
		if (serialEventRun) serialEventRun();
    2efc:	20 97       	sbiw	r28, 0x00	; 0
    2efe:	e1 f3       	breq	.-8      	; 0x2ef8 <main+0x10>
    2f00:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <_Z14serialEventRunv>
    2f04:	f9 cf       	rjmp	.-14     	; 0x2ef8 <main+0x10>

00002f06 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	6c 01       	movw	r12, r24
    2f18:	7a 01       	movw	r14, r20
    2f1a:	8b 01       	movw	r16, r22
    2f1c:	c0 e0       	ldi	r28, 0x00	; 0
    2f1e:	d0 e0       	ldi	r29, 0x00	; 0
    2f20:	ce 15       	cp	r28, r14
    2f22:	df 05       	cpc	r29, r15
    2f24:	81 f0       	breq	.+32     	; 0x2f46 <_ZN5Print5writeEPKhj+0x40>
    2f26:	d8 01       	movw	r26, r16
    2f28:	6d 91       	ld	r22, X+
    2f2a:	8d 01       	movw	r16, r26
    2f2c:	d6 01       	movw	r26, r12
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	01 90       	ld	r0, Z+
    2f34:	f0 81       	ld	r31, Z
    2f36:	e0 2d       	mov	r30, r0
    2f38:	c6 01       	movw	r24, r12
    2f3a:	09 95       	icall
    2f3c:	89 2b       	or	r24, r25
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <_ZN5Print5writeEPKhj+0x3e>
    2f40:	21 96       	adiw	r28, 0x01	; 1
    2f42:	ee cf       	rjmp	.-36     	; 0x2f20 <_ZN5Print5writeEPKhj+0x1a>
    2f44:	7e 01       	movw	r14, r28
    2f46:	c7 01       	movw	r24, r14
    2f48:	df 91       	pop	r29
    2f4a:	cf 91       	pop	r28
    2f4c:	1f 91       	pop	r17
    2f4e:	0f 91       	pop	r16
    2f50:	ff 90       	pop	r15
    2f52:	ef 90       	pop	r14
    2f54:	df 90       	pop	r13
    2f56:	cf 90       	pop	r12
    2f58:	08 95       	ret

00002f5a <_ZN5Print5printEPK19__FlashStringHelper>:
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	8c 01       	movw	r16, r24
    2f68:	7b 01       	movw	r14, r22
    2f6a:	c0 e0       	ldi	r28, 0x00	; 0
    2f6c:	d0 e0       	ldi	r29, 0x00	; 0
    2f6e:	f7 01       	movw	r30, r14
    2f70:	ec 0f       	add	r30, r28
    2f72:	fd 1f       	adc	r31, r29
    2f74:	64 91       	lpm	r22, Z
    2f76:	66 23       	and	r22, r22
    2f78:	61 f0       	breq	.+24     	; 0x2f92 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2f7a:	d8 01       	movw	r26, r16
    2f7c:	ed 91       	ld	r30, X+
    2f7e:	fc 91       	ld	r31, X
    2f80:	01 90       	ld	r0, Z+
    2f82:	f0 81       	ld	r31, Z
    2f84:	e0 2d       	mov	r30, r0
    2f86:	c8 01       	movw	r24, r16
    2f88:	09 95       	icall
    2f8a:	89 2b       	or	r24, r25
    2f8c:	11 f0       	breq	.+4      	; 0x2f92 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    2f8e:	21 96       	adiw	r28, 0x01	; 1
    2f90:	ee cf       	rjmp	.-36     	; 0x2f6e <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    2f92:	ce 01       	movw	r24, r28
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	08 95       	ret

00002fa2 <_ZN5Print5printEPKc>:
    2fa2:	0c 94 39 04 	jmp	0x872	; 0x872 <_ZN5Print5writeEPKc>

00002fa6 <_ZN5Print5printEc>:
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	ed 91       	ld	r30, X+
    2faa:	fc 91       	ld	r31, X
    2fac:	01 90       	ld	r0, Z+
    2fae:	f0 81       	ld	r31, Z
    2fb0:	e0 2d       	mov	r30, r0
    2fb2:	09 94       	ijmp

00002fb4 <_ZN5Print7printlnEv>:
    2fb4:	60 e1       	ldi	r22, 0x10	; 16
    2fb6:	72 e0       	ldi	r23, 0x02	; 2
    2fb8:	0c 94 39 04 	jmp	0x872	; 0x872 <_ZN5Print5writeEPKc>

00002fbc <_ZN5Print7printlnEPKc>:
    2fbc:	0f 93       	push	r16
    2fbe:	1f 93       	push	r17
    2fc0:	cf 93       	push	r28
    2fc2:	df 93       	push	r29
    2fc4:	ec 01       	movw	r28, r24
    2fc6:	0e 94 39 04 	call	0x872	; 0x872 <_ZN5Print5writeEPKc>
    2fca:	8c 01       	movw	r16, r24
    2fcc:	ce 01       	movw	r24, r28
    2fce:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEv>
    2fd2:	80 0f       	add	r24, r16
    2fd4:	91 1f       	adc	r25, r17
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	08 95       	ret

00002fe0 <_ZN5Print11printNumberEmh>:
    2fe0:	8f 92       	push	r8
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	a1 97       	sbiw	r28, 0x21	; 33
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	7c 01       	movw	r14, r24
    3006:	fa 01       	movw	r30, r20
    3008:	cb 01       	movw	r24, r22
    300a:	19 a2       	std	Y+33, r1	; 0x21
    300c:	22 30       	cpi	r18, 0x02	; 2
    300e:	08 f4       	brcc	.+2      	; 0x3012 <_ZN5Print11printNumberEmh+0x32>
    3010:	2a e0       	ldi	r18, 0x0A	; 10
    3012:	8e 01       	movw	r16, r28
    3014:	0f 5d       	subi	r16, 0xDF	; 223
    3016:	1f 4f       	sbci	r17, 0xFF	; 255
    3018:	82 2e       	mov	r8, r18
    301a:	91 2c       	mov	r9, r1
    301c:	a1 2c       	mov	r10, r1
    301e:	b1 2c       	mov	r11, r1
    3020:	bf 01       	movw	r22, r30
    3022:	a5 01       	movw	r20, r10
    3024:	94 01       	movw	r18, r8
    3026:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__udivmodsi4>
    302a:	f9 01       	movw	r30, r18
    302c:	ca 01       	movw	r24, r20
    302e:	01 50       	subi	r16, 0x01	; 1
    3030:	11 09       	sbc	r17, r1
    3032:	6a 30       	cpi	r22, 0x0A	; 10
    3034:	10 f4       	brcc	.+4      	; 0x303a <_ZN5Print11printNumberEmh+0x5a>
    3036:	60 5d       	subi	r22, 0xD0	; 208
    3038:	01 c0       	rjmp	.+2      	; 0x303c <_ZN5Print11printNumberEmh+0x5c>
    303a:	69 5c       	subi	r22, 0xC9	; 201
    303c:	d8 01       	movw	r26, r16
    303e:	6c 93       	st	X, r22
    3040:	23 2b       	or	r18, r19
    3042:	24 2b       	or	r18, r20
    3044:	25 2b       	or	r18, r21
    3046:	61 f7       	brne	.-40     	; 0x3020 <_ZN5Print11printNumberEmh+0x40>
    3048:	b8 01       	movw	r22, r16
    304a:	c7 01       	movw	r24, r14
    304c:	0e 94 39 04 	call	0x872	; 0x872 <_ZN5Print5writeEPKc>
    3050:	a1 96       	adiw	r28, 0x21	; 33
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	ff 90       	pop	r15
    3066:	ef 90       	pop	r14
    3068:	bf 90       	pop	r11
    306a:	af 90       	pop	r10
    306c:	9f 90       	pop	r9
    306e:	8f 90       	pop	r8
    3070:	08 95       	ret

00003072 <_ZN5Print5printEmi>:
    3072:	21 15       	cp	r18, r1
    3074:	31 05       	cpc	r19, r1
    3076:	41 f4       	brne	.+16     	; 0x3088 <_ZN5Print5printEmi+0x16>
    3078:	dc 01       	movw	r26, r24
    307a:	ed 91       	ld	r30, X+
    307c:	fc 91       	ld	r31, X
    307e:	01 90       	ld	r0, Z+
    3080:	f0 81       	ld	r31, Z
    3082:	e0 2d       	mov	r30, r0
    3084:	64 2f       	mov	r22, r20
    3086:	09 94       	ijmp
    3088:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <_ZN5Print11printNumberEmh>

0000308c <_ZN5Print5printEhi>:
    308c:	9a 01       	movw	r18, r20
    308e:	46 2f       	mov	r20, r22
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	0c 94 39 18 	jmp	0x3072	; 0x3072 <_ZN5Print5printEmi>

0000309a <_ZN5Print7printlnEhi>:
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	cf 93       	push	r28
    30a0:	df 93       	push	r29
    30a2:	ec 01       	movw	r28, r24
    30a4:	0e 94 46 18 	call	0x308c	; 0x308c <_ZN5Print5printEhi>
    30a8:	8c 01       	movw	r16, r24
    30aa:	ce 01       	movw	r24, r28
    30ac:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <_ZN5Print7printlnEv>
    30b0:	80 0f       	add	r24, r16
    30b2:	91 1f       	adc	r25, r17
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	08 95       	ret

000030be <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
  if (base == 0) {
    30ce:	21 15       	cp	r18, r1
    30d0:	31 05       	cpc	r19, r1
    30d2:	81 f4       	brne	.+32     	; 0x30f4 <_ZN5Print5printEli+0x36>
    return write(n);
    30d4:	dc 01       	movw	r26, r24
    30d6:	ed 91       	ld	r30, X+
    30d8:	fc 91       	ld	r31, X
    30da:	01 90       	ld	r0, Z+
    30dc:	f0 81       	ld	r31, Z
    30de:	e0 2d       	mov	r30, r0
    30e0:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	ff 90       	pop	r15
    30ec:	ef 90       	pop	r14
    30ee:	df 90       	pop	r13
    30f0:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    30f2:	09 94       	ijmp
  } else if (base == 10) {
    30f4:	2a 30       	cpi	r18, 0x0A	; 10
    30f6:	31 05       	cpc	r19, r1
    30f8:	01 f5       	brne	.+64     	; 0x313a <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    30fa:	77 ff       	sbrs	r23, 7
    30fc:	1d c0       	rjmp	.+58     	; 0x3138 <_ZN5Print5printEli+0x7a>
    30fe:	6a 01       	movw	r12, r20
    3100:	7b 01       	movw	r14, r22
    3102:	ec 01       	movw	r28, r24
      int t = print('-');
    3104:	6d e2       	ldi	r22, 0x2D	; 45
    3106:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <_ZN5Print5printEc>
    310a:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    310c:	44 27       	eor	r20, r20
    310e:	55 27       	eor	r21, r21
    3110:	ba 01       	movw	r22, r20
    3112:	4c 19       	sub	r20, r12
    3114:	5d 09       	sbc	r21, r13
    3116:	6e 09       	sbc	r22, r14
    3118:	7f 09       	sbc	r23, r15
    311a:	2a e0       	ldi	r18, 0x0A	; 10
    311c:	ce 01       	movw	r24, r28
    311e:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <_ZN5Print11printNumberEmh>
    3122:	80 0f       	add	r24, r16
    3124:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3138:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	ff 90       	pop	r15
    3144:	ef 90       	pop	r14
    3146:	df 90       	pop	r13
    3148:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    314a:	0c 94 f0 17 	jmp	0x2fe0	; 0x2fe0 <_ZN5Print11printNumberEmh>

0000314e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    314e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3150:	ab 01       	movw	r20, r22
    3152:	77 0f       	add	r23, r23
    3154:	66 0b       	sbc	r22, r22
    3156:	77 0b       	sbc	r23, r23
    3158:	0c 94 5f 18 	jmp	0x30be	; 0x30be <_ZN5Print5printEli>

0000315c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    315c:	1f 92       	push	r1
    315e:	0f 92       	push	r0
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	0f 92       	push	r0
    3164:	11 24       	eor	r1, r1
    3166:	2f 93       	push	r18
    3168:	3f 93       	push	r19
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <timer0_millis>
    3176:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <timer0_millis+0x1>
    317a:	a0 91 c2 04 	lds	r26, 0x04C2	; 0x8004c2 <timer0_millis+0x2>
    317e:	b0 91 c3 04 	lds	r27, 0x04C3	; 0x8004c3 <timer0_millis+0x3>
    3182:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <timer0_fract>
    3186:	23 e0       	ldi	r18, 0x03	; 3
    3188:	23 0f       	add	r18, r19
    318a:	2d 37       	cpi	r18, 0x7D	; 125
    318c:	20 f4       	brcc	.+8      	; 0x3196 <__vector_16+0x3a>
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	a1 1d       	adc	r26, r1
    3192:	b1 1d       	adc	r27, r1
    3194:	05 c0       	rjmp	.+10     	; 0x31a0 <__vector_16+0x44>
    3196:	26 e8       	ldi	r18, 0x86	; 134
    3198:	23 0f       	add	r18, r19
    319a:	02 96       	adiw	r24, 0x02	; 2
    319c:	a1 1d       	adc	r26, r1
    319e:	b1 1d       	adc	r27, r1
    31a0:	20 93 bf 04 	sts	0x04BF, r18	; 0x8004bf <timer0_fract>
    31a4:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <timer0_millis>
    31a8:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <timer0_millis+0x1>
    31ac:	a0 93 c2 04 	sts	0x04C2, r26	; 0x8004c2 <timer0_millis+0x2>
    31b0:	b0 93 c3 04 	sts	0x04C3, r27	; 0x8004c3 <timer0_millis+0x3>
    31b4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <timer0_overflow_count>
    31b8:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x1>
    31bc:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <timer0_overflow_count+0x2>
    31c0:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <timer0_overflow_count+0x3>
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	a1 1d       	adc	r26, r1
    31c8:	b1 1d       	adc	r27, r1
    31ca:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <timer0_overflow_count>
    31ce:	90 93 c5 04 	sts	0x04C5, r25	; 0x8004c5 <timer0_overflow_count+0x1>
    31d2:	a0 93 c6 04 	sts	0x04C6, r26	; 0x8004c6 <timer0_overflow_count+0x2>
    31d6:	b0 93 c7 04 	sts	0x04C7, r27	; 0x8004c7 <timer0_overflow_count+0x3>
    31da:	bf 91       	pop	r27
    31dc:	af 91       	pop	r26
    31de:	9f 91       	pop	r25
    31e0:	8f 91       	pop	r24
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	0f 90       	pop	r0
    31ec:	1f 90       	pop	r1
    31ee:	18 95       	reti

000031f0 <micros>:
    31f0:	3f b7       	in	r19, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <timer0_overflow_count>
    31f8:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <timer0_overflow_count+0x1>
    31fc:	a0 91 c6 04 	lds	r26, 0x04C6	; 0x8004c6 <timer0_overflow_count+0x2>
    3200:	b0 91 c7 04 	lds	r27, 0x04C7	; 0x8004c7 <timer0_overflow_count+0x3>
    3204:	26 b5       	in	r18, 0x26	; 38
    3206:	a8 9b       	sbis	0x15, 0	; 21
    3208:	05 c0       	rjmp	.+10     	; 0x3214 <micros+0x24>
    320a:	2f 3f       	cpi	r18, 0xFF	; 255
    320c:	19 f0       	breq	.+6      	; 0x3214 <micros+0x24>
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	a1 1d       	adc	r26, r1
    3212:	b1 1d       	adc	r27, r1
    3214:	3f bf       	out	0x3f, r19	; 63
    3216:	ba 2f       	mov	r27, r26
    3218:	a9 2f       	mov	r26, r25
    321a:	98 2f       	mov	r25, r24
    321c:	88 27       	eor	r24, r24
    321e:	82 0f       	add	r24, r18
    3220:	91 1d       	adc	r25, r1
    3222:	a1 1d       	adc	r26, r1
    3224:	b1 1d       	adc	r27, r1
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	42 e0       	ldi	r20, 0x02	; 2
    322c:	66 0f       	add	r22, r22
    322e:	77 1f       	adc	r23, r23
    3230:	88 1f       	adc	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	4a 95       	dec	r20
    3236:	d1 f7       	brne	.-12     	; 0x322c <micros+0x3c>
    3238:	08 95       	ret

0000323a <delay>:
    323a:	8f 92       	push	r8
    323c:	9f 92       	push	r9
    323e:	af 92       	push	r10
    3240:	bf 92       	push	r11
    3242:	cf 92       	push	r12
    3244:	df 92       	push	r13
    3246:	ef 92       	push	r14
    3248:	ff 92       	push	r15
    324a:	6b 01       	movw	r12, r22
    324c:	7c 01       	movw	r14, r24
    324e:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <micros>
    3252:	4b 01       	movw	r8, r22
    3254:	5c 01       	movw	r10, r24
    3256:	c1 14       	cp	r12, r1
    3258:	d1 04       	cpc	r13, r1
    325a:	e1 04       	cpc	r14, r1
    325c:	f1 04       	cpc	r15, r1
    325e:	01 f1       	breq	.+64     	; 0x32a0 <delay+0x66>
    3260:	0e 94 9d 1b 	call	0x373a	; 0x373a <yield>
    3264:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <micros>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	88 19       	sub	r24, r8
    326e:	99 09       	sbc	r25, r9
    3270:	aa 09       	sbc	r26, r10
    3272:	bb 09       	sbc	r27, r11
    3274:	88 3e       	cpi	r24, 0xE8	; 232
    3276:	93 40       	sbci	r25, 0x03	; 3
    3278:	a1 05       	cpc	r26, r1
    327a:	b1 05       	cpc	r27, r1
    327c:	60 f3       	brcs	.-40     	; 0x3256 <delay+0x1c>
    327e:	21 e0       	ldi	r18, 0x01	; 1
    3280:	c2 1a       	sub	r12, r18
    3282:	d1 08       	sbc	r13, r1
    3284:	e1 08       	sbc	r14, r1
    3286:	f1 08       	sbc	r15, r1
    3288:	88 ee       	ldi	r24, 0xE8	; 232
    328a:	88 0e       	add	r8, r24
    328c:	83 e0       	ldi	r24, 0x03	; 3
    328e:	98 1e       	adc	r9, r24
    3290:	a1 1c       	adc	r10, r1
    3292:	b1 1c       	adc	r11, r1
    3294:	c1 14       	cp	r12, r1
    3296:	d1 04       	cpc	r13, r1
    3298:	e1 04       	cpc	r14, r1
    329a:	f1 04       	cpc	r15, r1
    329c:	19 f7       	brne	.-58     	; 0x3264 <delay+0x2a>
    329e:	db cf       	rjmp	.-74     	; 0x3256 <delay+0x1c>
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	bf 90       	pop	r11
    32aa:	af 90       	pop	r10
    32ac:	9f 90       	pop	r9
    32ae:	8f 90       	pop	r8
    32b0:	08 95       	ret

000032b2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    32b2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    32b4:	84 b5       	in	r24, 0x24	; 36
    32b6:	82 60       	ori	r24, 0x02	; 2
    32b8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    32ba:	84 b5       	in	r24, 0x24	; 36
    32bc:	81 60       	ori	r24, 0x01	; 1
    32be:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    32c0:	85 b5       	in	r24, 0x25	; 37
    32c2:	82 60       	ori	r24, 0x02	; 2
    32c4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    32c6:	85 b5       	in	r24, 0x25	; 37
    32c8:	81 60       	ori	r24, 0x01	; 1
    32ca:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    32cc:	ee e6       	ldi	r30, 0x6E	; 110
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	81 60       	ori	r24, 0x01	; 1
    32d4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    32d6:	e1 e8       	ldi	r30, 0x81	; 129
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    32dc:	80 81       	ld	r24, Z
    32de:	82 60       	ori	r24, 0x02	; 2
    32e0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    32e2:	80 81       	ld	r24, Z
    32e4:	81 60       	ori	r24, 0x01	; 1
    32e6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    32e8:	e0 e8       	ldi	r30, 0x80	; 128
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	81 60       	ori	r24, 0x01	; 1
    32f0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    32f2:	e1 eb       	ldi	r30, 0xB1	; 177
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	84 60       	ori	r24, 0x04	; 4
    32fa:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    32fc:	e0 eb       	ldi	r30, 0xB0	; 176
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	81 60       	ori	r24, 0x01	; 1
    3304:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3306:	ea e7       	ldi	r30, 0x7A	; 122
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	80 81       	ld	r24, Z
    330c:	84 60       	ori	r24, 0x04	; 4
    330e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3310:	80 81       	ld	r24, Z
    3312:	82 60       	ori	r24, 0x02	; 2
    3314:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3316:	80 81       	ld	r24, Z
    3318:	81 60       	ori	r24, 0x01	; 1
    331a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    331c:	80 81       	ld	r24, Z
    331e:	80 68       	ori	r24, 0x80	; 128
    3320:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3322:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    3326:	08 95       	ret

00003328 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	18 2f       	mov	r17, r24
    3330:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    3332:	61 e0       	ldi	r22, 0x01	; 1
    3334:	0e 94 1c 1a 	call	0x3438	; 0x3438 <pinMode>
	if (val == 0)
    3338:	20 97       	sbiw	r28, 0x00	; 0
    333a:	11 f4       	brne	.+4      	; 0x3340 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	04 c0       	rjmp	.+8      	; 0x3348 <analogWrite+0x20>
	}
	else if (val == 255)
    3340:	cf 3f       	cpi	r28, 0xFF	; 255
    3342:	d1 05       	cpc	r29, r1
    3344:	39 f4       	brne	.+14     	; 0x3354 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    3346:	61 e0       	ldi	r22, 0x01	; 1
    3348:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    3350:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    3354:	e1 2f       	mov	r30, r17
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	ee 56       	subi	r30, 0x6E	; 110
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	e4 91       	lpm	r30, Z
    335e:	e3 30       	cpi	r30, 0x03	; 3
    3360:	f9 f0       	breq	.+62     	; 0x33a0 <analogWrite+0x78>
    3362:	48 f4       	brcc	.+18     	; 0x3376 <analogWrite+0x4e>
    3364:	e1 30       	cpi	r30, 0x01	; 1
    3366:	b9 f0       	breq	.+46     	; 0x3396 <analogWrite+0x6e>
    3368:	e2 30       	cpi	r30, 0x02	; 2
    336a:	a1 f5       	brne	.+104    	; 0x33d4 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    336c:	84 b5       	in	r24, 0x24	; 36
    336e:	80 62       	ori	r24, 0x20	; 32
    3370:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    3372:	c8 bd       	out	0x28, r28	; 40
				break;
    3374:	34 c0       	rjmp	.+104    	; 0x33de <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    3376:	e7 30       	cpi	r30, 0x07	; 7
    3378:	e9 f0       	breq	.+58     	; 0x33b4 <analogWrite+0x8c>
    337a:	e8 30       	cpi	r30, 0x08	; 8
    337c:	19 f1       	breq	.+70     	; 0x33c4 <analogWrite+0x9c>
    337e:	e4 30       	cpi	r30, 0x04	; 4
    3380:	49 f5       	brne	.+82     	; 0x33d4 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    3382:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3386:	80 62       	ori	r24, 0x20	; 32
    3388:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    338c:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    3390:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    3394:	24 c0       	rjmp	.+72     	; 0x33de <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    3396:	84 b5       	in	r24, 0x24	; 36
    3398:	80 68       	ori	r24, 0x80	; 128
    339a:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    339c:	c7 bd       	out	0x27, r28	; 39
				break;
    339e:	1f c0       	rjmp	.+62     	; 0x33de <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    33a0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    33a4:	80 68       	ori	r24, 0x80	; 128
    33a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    33aa:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    33ae:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    33b2:	15 c0       	rjmp	.+42     	; 0x33de <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    33b4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    33b8:	80 68       	ori	r24, 0x80	; 128
    33ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    33be:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    33c2:	0d c0       	rjmp	.+26     	; 0x33de <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    33c4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    33c8:	80 62       	ori	r24, 0x20	; 32
    33ca:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    33ce:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    33d2:	05 c0       	rjmp	.+10     	; 0x33de <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    33d4:	c0 38       	cpi	r28, 0x80	; 128
    33d6:	d1 05       	cpc	r29, r1
    33d8:	0c f0       	brlt	.+2      	; 0x33dc <analogWrite+0xb4>
    33da:	b5 cf       	rjmp	.-150    	; 0x3346 <analogWrite+0x1e>
    33dc:	af cf       	rjmp	.-162    	; 0x333c <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	08 95       	ret

000033e6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    33e6:	83 30       	cpi	r24, 0x03	; 3
    33e8:	81 f0       	breq	.+32     	; 0x340a <turnOffPWM+0x24>
    33ea:	28 f4       	brcc	.+10     	; 0x33f6 <turnOffPWM+0x10>
    33ec:	81 30       	cpi	r24, 0x01	; 1
    33ee:	99 f0       	breq	.+38     	; 0x3416 <turnOffPWM+0x30>
    33f0:	82 30       	cpi	r24, 0x02	; 2
    33f2:	a1 f0       	breq	.+40     	; 0x341c <turnOffPWM+0x36>
    33f4:	08 95       	ret
    33f6:	87 30       	cpi	r24, 0x07	; 7
    33f8:	a9 f0       	breq	.+42     	; 0x3424 <turnOffPWM+0x3e>
    33fa:	88 30       	cpi	r24, 0x08	; 8
    33fc:	b9 f0       	breq	.+46     	; 0x342c <turnOffPWM+0x46>
    33fe:	84 30       	cpi	r24, 0x04	; 4
    3400:	d1 f4       	brne	.+52     	; 0x3436 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3402:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3406:	8f 7d       	andi	r24, 0xDF	; 223
    3408:	03 c0       	rjmp	.+6      	; 0x3410 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    340a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    340e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3410:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    3414:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3416:	84 b5       	in	r24, 0x24	; 36
    3418:	8f 77       	andi	r24, 0x7F	; 127
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    341c:	84 b5       	in	r24, 0x24	; 36
    341e:	8f 7d       	andi	r24, 0xDF	; 223
    3420:	84 bd       	out	0x24, r24	; 36
    3422:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3424:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3428:	8f 77       	andi	r24, 0x7F	; 127
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    342c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3430:	8f 7d       	andi	r24, 0xDF	; 223
    3432:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3436:	08 95       	ret

00003438 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	fc 01       	movw	r30, r24
    3440:	ea 55       	subi	r30, 0x5A	; 90
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    3446:	fc 01       	movw	r30, r24
    3448:	e6 54       	subi	r30, 0x46	; 70
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    344e:	88 23       	and	r24, r24
    3450:	61 f1       	breq	.+88     	; 0x34aa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	fc 01       	movw	r30, r24
    345a:	ee 51       	subi	r30, 0x1E	; 30
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	c5 91       	lpm	r28, Z+
    3460:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    3462:	fc 01       	movw	r30, r24
    3464:	e8 52       	subi	r30, 0x28	; 40
    3466:	ff 4f       	sbci	r31, 0xFF	; 255
    3468:	a5 91       	lpm	r26, Z+
    346a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    346c:	61 11       	cpse	r22, r1
    346e:	09 c0       	rjmp	.+18     	; 0x3482 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    3470:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3472:	f8 94       	cli
		*reg &= ~bit;
    3474:	88 81       	ld	r24, Y
    3476:	20 95       	com	r18
    3478:	82 23       	and	r24, r18
    347a:	88 83       	st	Y, r24
		*out &= ~bit;
    347c:	ec 91       	ld	r30, X
    347e:	2e 23       	and	r18, r30
    3480:	0b c0       	rjmp	.+22     	; 0x3498 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3482:	62 30       	cpi	r22, 0x02	; 2
    3484:	61 f4       	brne	.+24     	; 0x349e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3486:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3488:	f8 94       	cli
		*reg &= ~bit;
    348a:	88 81       	ld	r24, Y
    348c:	32 2f       	mov	r19, r18
    348e:	30 95       	com	r19
    3490:	83 23       	and	r24, r19
    3492:	88 83       	st	Y, r24
		*out |= bit;
    3494:	ec 91       	ld	r30, X
    3496:	2e 2b       	or	r18, r30
    3498:	2c 93       	st	X, r18
		SREG = oldSREG;
    349a:	9f bf       	out	0x3f, r25	; 63
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    349e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    34a0:	f8 94       	cli
		*reg |= bit;
    34a2:	e8 81       	ld	r30, Y
    34a4:	2e 2b       	or	r18, r30
    34a6:	28 83       	st	Y, r18
		SREG = oldSREG;
    34a8:	8f bf       	out	0x3f, r24	; 63
	}
}
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	08 95       	ret

000034b0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    34b0:	1f 93       	push	r17
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	f9 01       	movw	r30, r18
    34bc:	ee 56       	subi	r30, 0x6E	; 110
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    34c2:	f9 01       	movw	r30, r18
    34c4:	ea 55       	subi	r30, 0x5A	; 90
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    34ca:	f9 01       	movw	r30, r18
    34cc:	e6 54       	subi	r30, 0x46	; 70
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34d2:	cc 23       	and	r28, r28
    34d4:	c1 f0       	breq	.+48     	; 0x3506 <digitalWrite+0x56>
    34d6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34d8:	81 11       	cpse	r24, r1
    34da:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <turnOffPWM>

	out = portOutputRegister(port);
    34de:	ec 2f       	mov	r30, r28
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	e8 52       	subi	r30, 0x28	; 40
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	a5 91       	lpm	r26, Z+
    34ec:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    34ee:	9f b7       	in	r25, 0x3f	; 63
	cli();
    34f0:	f8 94       	cli

	if (val == LOW) {
    34f2:	11 11       	cpse	r17, r1
    34f4:	04 c0       	rjmp	.+8      	; 0x34fe <digitalWrite+0x4e>
		*out &= ~bit;
    34f6:	8c 91       	ld	r24, X
    34f8:	d0 95       	com	r29
    34fa:	d8 23       	and	r29, r24
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <digitalWrite+0x52>
	} else {
		*out |= bit;
    34fe:	ec 91       	ld	r30, X
    3500:	de 2b       	or	r29, r30
    3502:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3504:	9f bf       	out	0x3f, r25	; 63
}
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	08 95       	ret

0000350e <_ZN14FreqCountClass5beginEj>:
static uint16_t gate_index;


void FreqCountClass::begin(uint16_t msec)
{
	if (msec < 1) return;
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	09 f4       	brne	.+2      	; 0x3514 <_ZN14FreqCountClass5beginEj+0x6>
    3512:	74 c0       	rjmp	.+232    	; 0x35fc <L_130_loop+0xc>
	gate_index = 0;
    3514:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZL10gate_index+0x1>
    3518:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <_ZL10gate_index>
	count_msw = 0;
    351c:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <_ZL9count_msw+0x1>
    3520:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZL9count_msw>
	count_prev = 0;
    3524:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <_ZL10count_prev>
    3528:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <_ZL10count_prev+0x1>
    352c:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <_ZL10count_prev+0x2>
    3530:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZL10count_prev+0x3>
	count_ready = 0;
    3534:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZL11count_ready>

static uint8_t saveTCCR1A, saveTCCR1B;

static inline void counter_init(void)
{
	saveTCCR1A = TCCR1A;
    3538:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    353c:	20 93 db 04 	sts	0x04DB, r18	; 0x8004db <_ZL10saveTCCR1A>
	saveTCCR1B = TCCR1B;
    3540:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    3544:	20 93 da 04 	sts	0x04DA, r18	; 0x8004da <_ZL10saveTCCR1B>
	TCCR1B = 0;
    3548:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1A = 0;
    354c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCNT1 = 0;
    3550:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    3554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIFR1 = (1<<TOV1);
    3558:	21 e0       	ldi	r18, 0x01	; 1
    355a:	26 bb       	out	0x16, r18	; 22
	TIMSK1 = 0;
    355c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

static inline uint16_t timer_init(uint16_t msec)
{
	uint16_t gate_len;

	saveTCCR2A = TCCR2A;
    3560:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    3564:	20 93 d9 04 	sts	0x04D9, r18	; 0x8004d9 <_ZL10saveTCCR2A>
	saveTCCR2B = TCCR2B;
    3568:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    356c:	20 93 d8 04 	sts	0x04D8, r18	; 0x8004d8 <_ZL10saveTCCR2B>
	TCCR2B = 0;
    3570:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCCR2A = (1<<WGM21);
    3574:	22 e0       	ldi	r18, 0x02	; 2
    3576:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	if ((msec & 7) == 0) {
    357a:	9c 01       	movw	r18, r24
    357c:	27 70       	andi	r18, 0x07	; 7
    357e:	33 27       	eor	r19, r19
    3580:	23 2b       	or	r18, r19
    3582:	51 f4       	brne	.+20     	; 0x3598 <_ZN14FreqCountClass5beginEj+0x8a>
		gate_len = msec >> 3;
    3584:	43 e0       	ldi	r20, 0x03	; 3
    3586:	96 95       	lsr	r25
    3588:	87 95       	ror	r24
    358a:	4a 95       	dec	r20
    358c:	e1 f7       	brne	.-8      	; 0x3586 <_ZN14FreqCountClass5beginEj+0x78>
		OCR2A = TIMER2_OCR2A_8MS_VAL;
    358e:	2c e7       	ldi	r18, 0x7C	; 124
    3590:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_8MS_VAL;
    3594:	27 e0       	ldi	r18, 0x07	; 7
    3596:	18 c0       	rjmp	.+48     	; 0x35c8 <_ZN14FreqCountClass5beginEj+0xba>
	} else if ((msec & 3) == 0) {
    3598:	9c 01       	movw	r18, r24
    359a:	23 70       	andi	r18, 0x03	; 3
    359c:	33 27       	eor	r19, r19
    359e:	23 2b       	or	r18, r19
    35a0:	31 f4       	brne	.+12     	; 0x35ae <_ZN14FreqCountClass5beginEj+0xa0>
		gate_len = msec >> 2;
    35a2:	96 95       	lsr	r25
    35a4:	87 95       	ror	r24
    35a6:	96 95       	lsr	r25
    35a8:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_4MS_VAL;
    35aa:	29 ef       	ldi	r18, 0xF9	; 249
    35ac:	05 c0       	rjmp	.+10     	; 0x35b8 <_ZN14FreqCountClass5beginEj+0xaa>
		startTCCR2B = TIMER2_TCCR2B_4MS_VAL;
	} else if ((msec & 1) == 0) {
    35ae:	80 fd       	sbrc	r24, 0
    35b0:	07 c0       	rjmp	.+14     	; 0x35c0 <_ZN14FreqCountClass5beginEj+0xb2>
		gate_len = msec >> 1;
    35b2:	96 95       	lsr	r25
    35b4:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_2MS_VAL;
    35b6:	2c e7       	ldi	r18, 0x7C	; 124
    35b8:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_2MS_VAL;
    35bc:	26 e0       	ldi	r18, 0x06	; 6
    35be:	04 c0       	rjmp	.+8      	; 0x35c8 <_ZN14FreqCountClass5beginEj+0xba>
	} else {
		gate_len = msec;
		OCR2A = TIMER2_OCR2A_1MS_VAL;
    35c0:	2c e7       	ldi	r18, 0x7C	; 124
    35c2:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_1MS_VAL;
    35c6:	25 e0       	ldi	r18, 0x05	; 5
    35c8:	20 93 d7 04 	sts	0x04D7, r18	; 0x8004d7 <_ZL11startTCCR2B>
	}
	TIFR2 = (1<<OCF2A);
    35cc:	22 e0       	ldi	r18, 0x02	; 2
    35ce:	27 bb       	out	0x17, r18	; 23
	TCNT2 = 0;
    35d0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	counter_init();
	gate_length = timer_init(msec);
    35d4:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <_ZL11gate_length+0x1>
    35d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <_ZL11gate_length>
	uint8_t status = SREG;
    35dc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    35de:	f8 94       	cli
	return gate_len;
}

static inline void timer_start(void)
{
	GTCCR = (1<<PSRASY);
    35e0:	23 bd       	out	0x23, r18	; 35
	TCCR2B = startTCCR2B;
    35e2:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <_ZL11startTCCR2B>
    35e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = (1<<OCIE2A);
    35ea:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		"L_%=_loop:"
		"subi   %0, 1"		"\n\t"
		"brne   L_%=_loop"	"\n\t"
		: "+d" (cycles_times_3)
		: "0" (cycles_times_3)
	);
    35ee:	8b e0       	ldi	r24, 0x0B	; 11

000035f0 <L_130_loop>:
    35f0:	81 50       	subi	r24, 0x01	; 1
    35f2:	f1 f7       	brne	.-4      	; 0x35f0 <L_130_loop>
	TIMSK1 = 0;
}

static inline void counter_start(void)
{
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
    35f4:	87 e0       	ldi	r24, 0x07	; 7
    35f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	timer_start();
	timer_isr_latency_delay();
	counter_start();
	SREG = status;
    35fa:	9f bf       	out	0x3f, r25	; 63
    35fc:	08 95       	ret

000035fe <_ZN14FreqCountClass9availableEv>:
}

uint8_t FreqCountClass::available(void)
{
	return count_ready;
    35fe:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <_ZL11count_ready>
}
    3602:	08 95       	ret

00003604 <_ZN14FreqCountClass4readEv>:
uint32_t FreqCountClass::read(void)
{
	uint32_t count;
	uint8_t status;

	status = SREG;
    3604:	2f b7       	in	r18, 0x3f	; 63
	cli();
    3606:	f8 94       	cli
	count = count_output;
    3608:	60 91 cd 04 	lds	r22, 0x04CD	; 0x8004cd <_ZL12count_output>
    360c:	70 91 ce 04 	lds	r23, 0x04CE	; 0x8004ce <_ZL12count_output+0x1>
    3610:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <_ZL12count_output+0x2>
    3614:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <_ZL12count_output+0x3>
	count_ready = 0;
    3618:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <_ZL11count_ready>
	SREG = status;
    361c:	2f bf       	out	0x3f, r18	; 63
	return count;
}
    361e:	08 95       	ret

00003620 <_ZN14FreqCountClass3endEv>:
	TIMSK2 = (1<<OCIE2A);
}

static inline void timer_shutdown(void)
{
	TCCR2B = 0;
    3620:	e1 eb       	ldi	r30, 0xB1	; 177
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	10 82       	st	Z, r1
	TIMSK2 = 0;
    3626:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCCR2A = saveTCCR2A;
    362a:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <_ZL10saveTCCR2A>
    362e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = saveTCCR2B;
    3632:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <_ZL10saveTCCR2B>
    3636:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
}

static inline void counter_shutdown(void)
{
	TCCR1B = 0;
    3638:	e1 e8       	ldi	r30, 0x81	; 129
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	10 82       	st	Z, r1
	TCCR1A = saveTCCR1A;
    363e:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <_ZL10saveTCCR1A>
    3642:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = saveTCCR1B;
    3646:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <_ZL10saveTCCR1B>
    364a:	80 83       	st	Z, r24
    364c:	08 95       	ret

0000364e <__vector_7>:
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
{
    364e:	1f 92       	push	r1
    3650:	0f 92       	push	r0
    3652:	0f b6       	in	r0, 0x3f	; 63
    3654:	0f 92       	push	r0
    3656:	11 24       	eor	r1, r1
    3658:	0f 93       	push	r16
    365a:	1f 93       	push	r17
    365c:	2f 93       	push	r18
    365e:	3f 93       	push	r19
    3660:	4f 93       	push	r20
    3662:	5f 93       	push	r21
    3664:	6f 93       	push	r22
    3666:	7f 93       	push	r23
    3668:	8f 93       	push	r24
    366a:	9f 93       	push	r25
    366c:	af 93       	push	r26
    366e:	bf 93       	push	r27
}

static inline uint16_t counter_read(void)
{
	return TCNT1;
    3670:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    3674:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
    3678:	b0 9b       	sbis	0x16, 0	; 22
    367a:	0b c0       	rjmp	.+22     	; 0x3692 <__vector_7+0x44>
	return TIFR1 & (1<<TOV1);
}

static inline void counter_overflow_reset(void)
{
	TIFR1 = (1<<TOV1);
    367c:	81 e0       	ldi	r24, 0x01	; 1
    367e:	86 bb       	out	0x16, r24	; 22
		counter_overflow_reset();
		count_msw++;
    3680:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZL9count_msw>
    3684:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <_ZL9count_msw+0x1>
    3688:	01 96       	adiw	r24, 0x01	; 1
    368a:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <_ZL9count_msw+0x1>
    368e:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <_ZL9count_msw>
	}
	index = gate_index + 1;
    3692:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <_ZL10gate_index>
    3696:	90 91 c9 04 	lds	r25, 0x04C9	; 0x8004c9 <_ZL10gate_index+0x1>
    369a:	01 96       	adiw	r24, 0x01	; 1
	length = gate_length;
	if (index >= length) {
    369c:	40 91 ca 04 	lds	r20, 0x04CA	; 0x8004ca <_ZL11gate_length>
    36a0:	50 91 cb 04 	lds	r21, 0x04CB	; 0x8004cb <_ZL11gate_length+0x1>
    36a4:	84 17       	cp	r24, r20
    36a6:	95 07       	cpc	r25, r21
    36a8:	98 f1       	brcs	.+102    	; 0x3710 <__vector_7+0xc2>
		gate_index = 0;
    36aa:	10 92 c9 04 	sts	0x04C9, r1	; 0x8004c9 <_ZL10gate_index+0x1>
    36ae:	10 92 c8 04 	sts	0x04C8, r1	; 0x8004c8 <_ZL10gate_index>
		count = ((uint32_t)count_msw << 16) + count_lsw;
    36b2:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <_ZL9count_msw>
    36b6:	90 91 d6 04 	lds	r25, 0x04D6	; 0x8004d6 <_ZL9count_msw+0x1>
    36ba:	a0 e0       	ldi	r26, 0x00	; 0
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	dc 01       	movw	r26, r24
    36c0:	99 27       	eor	r25, r25
    36c2:	88 27       	eor	r24, r24
    36c4:	82 0f       	add	r24, r18
    36c6:	93 1f       	adc	r25, r19
    36c8:	a1 1d       	adc	r26, r1
    36ca:	b1 1d       	adc	r27, r1
		count_output = count - count_prev;
    36cc:	40 91 d1 04 	lds	r20, 0x04D1	; 0x8004d1 <_ZL10count_prev>
    36d0:	50 91 d2 04 	lds	r21, 0x04D2	; 0x8004d2 <_ZL10count_prev+0x1>
    36d4:	60 91 d3 04 	lds	r22, 0x04D3	; 0x8004d3 <_ZL10count_prev+0x2>
    36d8:	70 91 d4 04 	lds	r23, 0x04D4	; 0x8004d4 <_ZL10count_prev+0x3>
    36dc:	8c 01       	movw	r16, r24
    36de:	9d 01       	movw	r18, r26
    36e0:	04 1b       	sub	r16, r20
    36e2:	15 0b       	sbc	r17, r21
    36e4:	26 0b       	sbc	r18, r22
    36e6:	37 0b       	sbc	r19, r23
    36e8:	00 93 cd 04 	sts	0x04CD, r16	; 0x8004cd <_ZL12count_output>
    36ec:	10 93 ce 04 	sts	0x04CE, r17	; 0x8004ce <_ZL12count_output+0x1>
    36f0:	20 93 cf 04 	sts	0x04CF, r18	; 0x8004cf <_ZL12count_output+0x2>
    36f4:	30 93 d0 04 	sts	0x04D0, r19	; 0x8004d0 <_ZL12count_output+0x3>
		count_prev = count;
    36f8:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZL10count_prev>
    36fc:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <_ZL10count_prev+0x1>
    3700:	a0 93 d3 04 	sts	0x04D3, r26	; 0x8004d3 <_ZL10count_prev+0x2>
    3704:	b0 93 d4 04 	sts	0x04D4, r27	; 0x8004d4 <_ZL10count_prev+0x3>
		count_ready = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <_ZL11count_ready>
    370e:	04 c0       	rjmp	.+8      	; 0x3718 <__vector_7+0xca>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
    3710:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <_ZL10gate_index+0x1>
    3714:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <_ZL10gate_index>
	}
}
    3718:	bf 91       	pop	r27
    371a:	af 91       	pop	r26
    371c:	9f 91       	pop	r25
    371e:	8f 91       	pop	r24
    3720:	7f 91       	pop	r23
    3722:	6f 91       	pop	r22
    3724:	5f 91       	pop	r21
    3726:	4f 91       	pop	r20
    3728:	3f 91       	pop	r19
    372a:	2f 91       	pop	r18
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    3730:	0f 90       	pop	r0
    3732:	0f be       	out	0x3f, r0	; 63
    3734:	0f 90       	pop	r0
    3736:	1f 90       	pop	r1
    3738:	18 95       	reti

0000373a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    373a:	08 95       	ret

0000373c <__divmodhi4>:
    373c:	97 fb       	bst	r25, 7
    373e:	07 2e       	mov	r0, r23
    3740:	16 f4       	brtc	.+4      	; 0x3746 <__divmodhi4+0xa>
    3742:	00 94       	com	r0
    3744:	07 d0       	rcall	.+14     	; 0x3754 <__divmodhi4_neg1>
    3746:	77 fd       	sbrc	r23, 7
    3748:	09 d0       	rcall	.+18     	; 0x375c <__divmodhi4_neg2>
    374a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__udivmodhi4>
    374e:	07 fc       	sbrc	r0, 7
    3750:	05 d0       	rcall	.+10     	; 0x375c <__divmodhi4_neg2>
    3752:	3e f4       	brtc	.+14     	; 0x3762 <__divmodhi4_exit>

00003754 <__divmodhi4_neg1>:
    3754:	90 95       	com	r25
    3756:	81 95       	neg	r24
    3758:	9f 4f       	sbci	r25, 0xFF	; 255
    375a:	08 95       	ret

0000375c <__divmodhi4_neg2>:
    375c:	70 95       	com	r23
    375e:	61 95       	neg	r22
    3760:	7f 4f       	sbci	r23, 0xFF	; 255

00003762 <__divmodhi4_exit>:
    3762:	08 95       	ret

00003764 <__udivmodsi4>:
    3764:	a1 e2       	ldi	r26, 0x21	; 33
    3766:	1a 2e       	mov	r1, r26
    3768:	aa 1b       	sub	r26, r26
    376a:	bb 1b       	sub	r27, r27
    376c:	fd 01       	movw	r30, r26
    376e:	0d c0       	rjmp	.+26     	; 0x378a <__udivmodsi4_ep>

00003770 <__udivmodsi4_loop>:
    3770:	aa 1f       	adc	r26, r26
    3772:	bb 1f       	adc	r27, r27
    3774:	ee 1f       	adc	r30, r30
    3776:	ff 1f       	adc	r31, r31
    3778:	a2 17       	cp	r26, r18
    377a:	b3 07       	cpc	r27, r19
    377c:	e4 07       	cpc	r30, r20
    377e:	f5 07       	cpc	r31, r21
    3780:	20 f0       	brcs	.+8      	; 0x378a <__udivmodsi4_ep>
    3782:	a2 1b       	sub	r26, r18
    3784:	b3 0b       	sbc	r27, r19
    3786:	e4 0b       	sbc	r30, r20
    3788:	f5 0b       	sbc	r31, r21

0000378a <__udivmodsi4_ep>:
    378a:	66 1f       	adc	r22, r22
    378c:	77 1f       	adc	r23, r23
    378e:	88 1f       	adc	r24, r24
    3790:	99 1f       	adc	r25, r25
    3792:	1a 94       	dec	r1
    3794:	69 f7       	brne	.-38     	; 0x3770 <__udivmodsi4_loop>
    3796:	60 95       	com	r22
    3798:	70 95       	com	r23
    379a:	80 95       	com	r24
    379c:	90 95       	com	r25
    379e:	9b 01       	movw	r18, r22
    37a0:	ac 01       	movw	r20, r24
    37a2:	bd 01       	movw	r22, r26
    37a4:	cf 01       	movw	r24, r30
    37a6:	08 95       	ret

000037a8 <__divmodsi4>:
    37a8:	05 2e       	mov	r0, r21
    37aa:	97 fb       	bst	r25, 7
    37ac:	1e f4       	brtc	.+6      	; 0x37b4 <__divmodsi4+0xc>
    37ae:	00 94       	com	r0
    37b0:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__negsi2>
    37b4:	57 fd       	sbrc	r21, 7
    37b6:	07 d0       	rcall	.+14     	; 0x37c6 <__divmodsi4_neg2>
    37b8:	0e 94 b2 1b 	call	0x3764	; 0x3764 <__udivmodsi4>
    37bc:	07 fc       	sbrc	r0, 7
    37be:	03 d0       	rcall	.+6      	; 0x37c6 <__divmodsi4_neg2>
    37c0:	4e f4       	brtc	.+18     	; 0x37d4 <__divmodsi4_exit>
    37c2:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__negsi2>

000037c6 <__divmodsi4_neg2>:
    37c6:	50 95       	com	r21
    37c8:	40 95       	com	r20
    37ca:	30 95       	com	r19
    37cc:	21 95       	neg	r18
    37ce:	3f 4f       	sbci	r19, 0xFF	; 255
    37d0:	4f 4f       	sbci	r20, 0xFF	; 255
    37d2:	5f 4f       	sbci	r21, 0xFF	; 255

000037d4 <__divmodsi4_exit>:
    37d4:	08 95       	ret

000037d6 <__negsi2>:
    37d6:	90 95       	com	r25
    37d8:	80 95       	com	r24
    37da:	70 95       	com	r23
    37dc:	61 95       	neg	r22
    37de:	7f 4f       	sbci	r23, 0xFF	; 255
    37e0:	8f 4f       	sbci	r24, 0xFF	; 255
    37e2:	9f 4f       	sbci	r25, 0xFF	; 255
    37e4:	08 95       	ret

000037e6 <__tablejump2__>:
    37e6:	ee 0f       	add	r30, r30
    37e8:	ff 1f       	adc	r31, r31
    37ea:	05 90       	lpm	r0, Z+
    37ec:	f4 91       	lpm	r31, Z
    37ee:	e0 2d       	mov	r30, r0
    37f0:	09 94       	ijmp

000037f2 <__muluhisi3>:
    37f2:	0e 94 18 1c 	call	0x3830	; 0x3830 <__umulhisi3>
    37f6:	a5 9f       	mul	r26, r21
    37f8:	90 0d       	add	r25, r0
    37fa:	b4 9f       	mul	r27, r20
    37fc:	90 0d       	add	r25, r0
    37fe:	a4 9f       	mul	r26, r20
    3800:	80 0d       	add	r24, r0
    3802:	91 1d       	adc	r25, r1
    3804:	11 24       	eor	r1, r1
    3806:	08 95       	ret

00003808 <__udivmodhi4>:
    3808:	aa 1b       	sub	r26, r26
    380a:	bb 1b       	sub	r27, r27
    380c:	51 e1       	ldi	r21, 0x11	; 17
    380e:	07 c0       	rjmp	.+14     	; 0x381e <__udivmodhi4_ep>

00003810 <__udivmodhi4_loop>:
    3810:	aa 1f       	adc	r26, r26
    3812:	bb 1f       	adc	r27, r27
    3814:	a6 17       	cp	r26, r22
    3816:	b7 07       	cpc	r27, r23
    3818:	10 f0       	brcs	.+4      	; 0x381e <__udivmodhi4_ep>
    381a:	a6 1b       	sub	r26, r22
    381c:	b7 0b       	sbc	r27, r23

0000381e <__udivmodhi4_ep>:
    381e:	88 1f       	adc	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	5a 95       	dec	r21
    3824:	a9 f7       	brne	.-22     	; 0x3810 <__udivmodhi4_loop>
    3826:	80 95       	com	r24
    3828:	90 95       	com	r25
    382a:	bc 01       	movw	r22, r24
    382c:	cd 01       	movw	r24, r26
    382e:	08 95       	ret

00003830 <__umulhisi3>:
    3830:	a2 9f       	mul	r26, r18
    3832:	b0 01       	movw	r22, r0
    3834:	b3 9f       	mul	r27, r19
    3836:	c0 01       	movw	r24, r0
    3838:	a3 9f       	mul	r26, r19
    383a:	70 0d       	add	r23, r0
    383c:	81 1d       	adc	r24, r1
    383e:	11 24       	eor	r1, r1
    3840:	91 1d       	adc	r25, r1
    3842:	b2 9f       	mul	r27, r18
    3844:	70 0d       	add	r23, r0
    3846:	81 1d       	adc	r24, r1
    3848:	11 24       	eor	r1, r1
    384a:	91 1d       	adc	r25, r1
    384c:	08 95       	ret

0000384e <malloc>:
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	82 30       	cpi	r24, 0x02	; 2
    3858:	91 05       	cpc	r25, r1
    385a:	10 f4       	brcc	.+4      	; 0x3860 <malloc+0x12>
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <__flp>
    3864:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <__flp+0x1>
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	a0 e0       	ldi	r26, 0x00	; 0
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	30 97       	sbiw	r30, 0x00	; 0
    3872:	19 f1       	breq	.+70     	; 0x38ba <malloc+0x6c>
    3874:	40 81       	ld	r20, Z
    3876:	51 81       	ldd	r21, Z+1	; 0x01
    3878:	02 81       	ldd	r16, Z+2	; 0x02
    387a:	13 81       	ldd	r17, Z+3	; 0x03
    387c:	48 17       	cp	r20, r24
    387e:	59 07       	cpc	r21, r25
    3880:	c8 f0       	brcs	.+50     	; 0x38b4 <malloc+0x66>
    3882:	84 17       	cp	r24, r20
    3884:	95 07       	cpc	r25, r21
    3886:	69 f4       	brne	.+26     	; 0x38a2 <malloc+0x54>
    3888:	10 97       	sbiw	r26, 0x00	; 0
    388a:	31 f0       	breq	.+12     	; 0x3898 <malloc+0x4a>
    388c:	12 96       	adiw	r26, 0x02	; 2
    388e:	0c 93       	st	X, r16
    3890:	12 97       	sbiw	r26, 0x02	; 2
    3892:	13 96       	adiw	r26, 0x03	; 3
    3894:	1c 93       	st	X, r17
    3896:	27 c0       	rjmp	.+78     	; 0x38e6 <malloc+0x98>
    3898:	00 93 de 04 	sts	0x04DE, r16	; 0x8004de <__flp>
    389c:	10 93 df 04 	sts	0x04DF, r17	; 0x8004df <__flp+0x1>
    38a0:	22 c0       	rjmp	.+68     	; 0x38e6 <malloc+0x98>
    38a2:	21 15       	cp	r18, r1
    38a4:	31 05       	cpc	r19, r1
    38a6:	19 f0       	breq	.+6      	; 0x38ae <malloc+0x60>
    38a8:	42 17       	cp	r20, r18
    38aa:	53 07       	cpc	r21, r19
    38ac:	18 f4       	brcc	.+6      	; 0x38b4 <malloc+0x66>
    38ae:	9a 01       	movw	r18, r20
    38b0:	bd 01       	movw	r22, r26
    38b2:	ef 01       	movw	r28, r30
    38b4:	df 01       	movw	r26, r30
    38b6:	f8 01       	movw	r30, r16
    38b8:	db cf       	rjmp	.-74     	; 0x3870 <malloc+0x22>
    38ba:	21 15       	cp	r18, r1
    38bc:	31 05       	cpc	r19, r1
    38be:	f9 f0       	breq	.+62     	; 0x38fe <malloc+0xb0>
    38c0:	28 1b       	sub	r18, r24
    38c2:	39 0b       	sbc	r19, r25
    38c4:	24 30       	cpi	r18, 0x04	; 4
    38c6:	31 05       	cpc	r19, r1
    38c8:	80 f4       	brcc	.+32     	; 0x38ea <malloc+0x9c>
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	9b 81       	ldd	r25, Y+3	; 0x03
    38ce:	61 15       	cp	r22, r1
    38d0:	71 05       	cpc	r23, r1
    38d2:	21 f0       	breq	.+8      	; 0x38dc <malloc+0x8e>
    38d4:	fb 01       	movw	r30, r22
    38d6:	93 83       	std	Z+3, r25	; 0x03
    38d8:	82 83       	std	Z+2, r24	; 0x02
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <malloc+0x96>
    38dc:	90 93 df 04 	sts	0x04DF, r25	; 0x8004df <__flp+0x1>
    38e0:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <__flp>
    38e4:	fe 01       	movw	r30, r28
    38e6:	32 96       	adiw	r30, 0x02	; 2
    38e8:	44 c0       	rjmp	.+136    	; 0x3972 <malloc+0x124>
    38ea:	fe 01       	movw	r30, r28
    38ec:	e2 0f       	add	r30, r18
    38ee:	f3 1f       	adc	r31, r19
    38f0:	81 93       	st	Z+, r24
    38f2:	91 93       	st	Z+, r25
    38f4:	22 50       	subi	r18, 0x02	; 2
    38f6:	31 09       	sbc	r19, r1
    38f8:	39 83       	std	Y+1, r19	; 0x01
    38fa:	28 83       	st	Y, r18
    38fc:	3a c0       	rjmp	.+116    	; 0x3972 <malloc+0x124>
    38fe:	20 91 dc 04 	lds	r18, 0x04DC	; 0x8004dc <__brkval>
    3902:	30 91 dd 04 	lds	r19, 0x04DD	; 0x8004dd <__brkval+0x1>
    3906:	23 2b       	or	r18, r19
    3908:	41 f4       	brne	.+16     	; 0x391a <malloc+0xcc>
    390a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    390e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3912:	30 93 dd 04 	sts	0x04DD, r19	; 0x8004dd <__brkval+0x1>
    3916:	20 93 dc 04 	sts	0x04DC, r18	; 0x8004dc <__brkval>
    391a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    391e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3922:	21 15       	cp	r18, r1
    3924:	31 05       	cpc	r19, r1
    3926:	41 f4       	brne	.+16     	; 0x3938 <malloc+0xea>
    3928:	2d b7       	in	r18, 0x3d	; 61
    392a:	3e b7       	in	r19, 0x3e	; 62
    392c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3930:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3934:	24 1b       	sub	r18, r20
    3936:	35 0b       	sbc	r19, r21
    3938:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <__brkval>
    393c:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <__brkval+0x1>
    3940:	e2 17       	cp	r30, r18
    3942:	f3 07       	cpc	r31, r19
    3944:	a0 f4       	brcc	.+40     	; 0x396e <malloc+0x120>
    3946:	2e 1b       	sub	r18, r30
    3948:	3f 0b       	sbc	r19, r31
    394a:	28 17       	cp	r18, r24
    394c:	39 07       	cpc	r19, r25
    394e:	78 f0       	brcs	.+30     	; 0x396e <malloc+0x120>
    3950:	ac 01       	movw	r20, r24
    3952:	4e 5f       	subi	r20, 0xFE	; 254
    3954:	5f 4f       	sbci	r21, 0xFF	; 255
    3956:	24 17       	cp	r18, r20
    3958:	35 07       	cpc	r19, r21
    395a:	48 f0       	brcs	.+18     	; 0x396e <malloc+0x120>
    395c:	4e 0f       	add	r20, r30
    395e:	5f 1f       	adc	r21, r31
    3960:	50 93 dd 04 	sts	0x04DD, r21	; 0x8004dd <__brkval+0x1>
    3964:	40 93 dc 04 	sts	0x04DC, r20	; 0x8004dc <__brkval>
    3968:	81 93       	st	Z+, r24
    396a:	91 93       	st	Z+, r25
    396c:	02 c0       	rjmp	.+4      	; 0x3972 <malloc+0x124>
    396e:	e0 e0       	ldi	r30, 0x00	; 0
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	cf 01       	movw	r24, r30
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <free>:
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	09 f4       	brne	.+2      	; 0x3988 <free+0xa>
    3986:	81 c0       	rjmp	.+258    	; 0x3a8a <free+0x10c>
    3988:	fc 01       	movw	r30, r24
    398a:	32 97       	sbiw	r30, 0x02	; 2
    398c:	13 82       	std	Z+3, r1	; 0x03
    398e:	12 82       	std	Z+2, r1	; 0x02
    3990:	a0 91 de 04 	lds	r26, 0x04DE	; 0x8004de <__flp>
    3994:	b0 91 df 04 	lds	r27, 0x04DF	; 0x8004df <__flp+0x1>
    3998:	10 97       	sbiw	r26, 0x00	; 0
    399a:	81 f4       	brne	.+32     	; 0x39bc <free+0x3e>
    399c:	20 81       	ld	r18, Z
    399e:	31 81       	ldd	r19, Z+1	; 0x01
    39a0:	82 0f       	add	r24, r18
    39a2:	93 1f       	adc	r25, r19
    39a4:	20 91 dc 04 	lds	r18, 0x04DC	; 0x8004dc <__brkval>
    39a8:	30 91 dd 04 	lds	r19, 0x04DD	; 0x8004dd <__brkval+0x1>
    39ac:	28 17       	cp	r18, r24
    39ae:	39 07       	cpc	r19, r25
    39b0:	51 f5       	brne	.+84     	; 0x3a06 <free+0x88>
    39b2:	f0 93 dd 04 	sts	0x04DD, r31	; 0x8004dd <__brkval+0x1>
    39b6:	e0 93 dc 04 	sts	0x04DC, r30	; 0x8004dc <__brkval>
    39ba:	67 c0       	rjmp	.+206    	; 0x3a8a <free+0x10c>
    39bc:	ed 01       	movw	r28, r26
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	ce 17       	cp	r28, r30
    39c4:	df 07       	cpc	r29, r31
    39c6:	40 f4       	brcc	.+16     	; 0x39d8 <free+0x5a>
    39c8:	4a 81       	ldd	r20, Y+2	; 0x02
    39ca:	5b 81       	ldd	r21, Y+3	; 0x03
    39cc:	9e 01       	movw	r18, r28
    39ce:	41 15       	cp	r20, r1
    39d0:	51 05       	cpc	r21, r1
    39d2:	f1 f0       	breq	.+60     	; 0x3a10 <free+0x92>
    39d4:	ea 01       	movw	r28, r20
    39d6:	f5 cf       	rjmp	.-22     	; 0x39c2 <free+0x44>
    39d8:	d3 83       	std	Z+3, r29	; 0x03
    39da:	c2 83       	std	Z+2, r28	; 0x02
    39dc:	40 81       	ld	r20, Z
    39de:	51 81       	ldd	r21, Z+1	; 0x01
    39e0:	84 0f       	add	r24, r20
    39e2:	95 1f       	adc	r25, r21
    39e4:	c8 17       	cp	r28, r24
    39e6:	d9 07       	cpc	r29, r25
    39e8:	59 f4       	brne	.+22     	; 0x3a00 <free+0x82>
    39ea:	88 81       	ld	r24, Y
    39ec:	99 81       	ldd	r25, Y+1	; 0x01
    39ee:	84 0f       	add	r24, r20
    39f0:	95 1f       	adc	r25, r21
    39f2:	02 96       	adiw	r24, 0x02	; 2
    39f4:	91 83       	std	Z+1, r25	; 0x01
    39f6:	80 83       	st	Z, r24
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	9b 81       	ldd	r25, Y+3	; 0x03
    39fc:	93 83       	std	Z+3, r25	; 0x03
    39fe:	82 83       	std	Z+2, r24	; 0x02
    3a00:	21 15       	cp	r18, r1
    3a02:	31 05       	cpc	r19, r1
    3a04:	29 f4       	brne	.+10     	; 0x3a10 <free+0x92>
    3a06:	f0 93 df 04 	sts	0x04DF, r31	; 0x8004df <__flp+0x1>
    3a0a:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <__flp>
    3a0e:	3d c0       	rjmp	.+122    	; 0x3a8a <free+0x10c>
    3a10:	e9 01       	movw	r28, r18
    3a12:	fb 83       	std	Y+3, r31	; 0x03
    3a14:	ea 83       	std	Y+2, r30	; 0x02
    3a16:	49 91       	ld	r20, Y+
    3a18:	59 91       	ld	r21, Y+
    3a1a:	c4 0f       	add	r28, r20
    3a1c:	d5 1f       	adc	r29, r21
    3a1e:	ec 17       	cp	r30, r28
    3a20:	fd 07       	cpc	r31, r29
    3a22:	61 f4       	brne	.+24     	; 0x3a3c <free+0xbe>
    3a24:	80 81       	ld	r24, Z
    3a26:	91 81       	ldd	r25, Z+1	; 0x01
    3a28:	84 0f       	add	r24, r20
    3a2a:	95 1f       	adc	r25, r21
    3a2c:	02 96       	adiw	r24, 0x02	; 2
    3a2e:	e9 01       	movw	r28, r18
    3a30:	99 83       	std	Y+1, r25	; 0x01
    3a32:	88 83       	st	Y, r24
    3a34:	82 81       	ldd	r24, Z+2	; 0x02
    3a36:	93 81       	ldd	r25, Z+3	; 0x03
    3a38:	9b 83       	std	Y+3, r25	; 0x03
    3a3a:	8a 83       	std	Y+2, r24	; 0x02
    3a3c:	e0 e0       	ldi	r30, 0x00	; 0
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	12 96       	adiw	r26, 0x02	; 2
    3a42:	8d 91       	ld	r24, X+
    3a44:	9c 91       	ld	r25, X
    3a46:	13 97       	sbiw	r26, 0x03	; 3
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	19 f0       	breq	.+6      	; 0x3a52 <free+0xd4>
    3a4c:	fd 01       	movw	r30, r26
    3a4e:	dc 01       	movw	r26, r24
    3a50:	f7 cf       	rjmp	.-18     	; 0x3a40 <free+0xc2>
    3a52:	8d 91       	ld	r24, X+
    3a54:	9c 91       	ld	r25, X
    3a56:	11 97       	sbiw	r26, 0x01	; 1
    3a58:	9d 01       	movw	r18, r26
    3a5a:	2e 5f       	subi	r18, 0xFE	; 254
    3a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5e:	82 0f       	add	r24, r18
    3a60:	93 1f       	adc	r25, r19
    3a62:	20 91 dc 04 	lds	r18, 0x04DC	; 0x8004dc <__brkval>
    3a66:	30 91 dd 04 	lds	r19, 0x04DD	; 0x8004dd <__brkval+0x1>
    3a6a:	28 17       	cp	r18, r24
    3a6c:	39 07       	cpc	r19, r25
    3a6e:	69 f4       	brne	.+26     	; 0x3a8a <free+0x10c>
    3a70:	30 97       	sbiw	r30, 0x00	; 0
    3a72:	29 f4       	brne	.+10     	; 0x3a7e <free+0x100>
    3a74:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <__flp+0x1>
    3a78:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <__flp>
    3a7c:	02 c0       	rjmp	.+4      	; 0x3a82 <free+0x104>
    3a7e:	13 82       	std	Z+3, r1	; 0x03
    3a80:	12 82       	std	Z+2, r1	; 0x02
    3a82:	b0 93 dd 04 	sts	0x04DD, r27	; 0x8004dd <__brkval+0x1>
    3a86:	a0 93 dc 04 	sts	0x04DC, r26	; 0x8004dc <__brkval>
    3a8a:	df 91       	pop	r29
    3a8c:	cf 91       	pop	r28
    3a8e:	08 95       	ret

00003a90 <memcpy>:
    3a90:	fb 01       	movw	r30, r22
    3a92:	dc 01       	movw	r26, r24
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <memcpy+0xa>
    3a96:	01 90       	ld	r0, Z+
    3a98:	0d 92       	st	X+, r0
    3a9a:	41 50       	subi	r20, 0x01	; 1
    3a9c:	50 40       	sbci	r21, 0x00	; 0
    3a9e:	d8 f7       	brcc	.-10     	; 0x3a96 <memcpy+0x6>
    3aa0:	08 95       	ret

00003aa2 <memset>:
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	01 c0       	rjmp	.+2      	; 0x3aa8 <memset+0x6>
    3aa6:	6d 93       	st	X+, r22
    3aa8:	41 50       	subi	r20, 0x01	; 1
    3aaa:	50 40       	sbci	r21, 0x00	; 0
    3aac:	e0 f7       	brcc	.-8      	; 0x3aa6 <memset+0x4>
    3aae:	08 95       	ret

00003ab0 <__do_global_dtors>:
    3ab0:	10 e0       	ldi	r17, 0x00	; 0
    3ab2:	ca e7       	ldi	r28, 0x7A	; 122
    3ab4:	d0 e0       	ldi	r29, 0x00	; 0
    3ab6:	04 c0       	rjmp	.+8      	; 0x3ac0 <__do_global_dtors+0x10>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__tablejump2__>
    3abe:	21 96       	adiw	r28, 0x01	; 1
    3ac0:	cc 37       	cpi	r28, 0x7C	; 124
    3ac2:	d1 07       	cpc	r29, r17
    3ac4:	c9 f7       	brne	.-14     	; 0x3ab8 <__do_global_dtors+0x8>
    3ac6:	f8 94       	cli

00003ac8 <__stop_program>:
    3ac8:	ff cf       	rjmp	.-2      	; 0x3ac8 <__stop_program>
