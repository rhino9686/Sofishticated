
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  000047f8  0000488c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000047f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  0080023c  0080023c  000049c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000049f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009d8  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013e37  00000000  00000000  00005410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fab  00000000  00000000  00019247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006a85  00000000  00000000  0001d1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d84  00000000  00000000  00023c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ad7  00000000  00000000  000259fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b349  00000000  00000000  0002a4d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000940  00000000  00000000  0003581c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__dtors_end>
       4:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
       c:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__vector_3>
      10:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__vector_3>
      14:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__vector_3>
      18:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_6>
      1c:	0c 94 be 21 	jmp	0x437c	; 0x437c <__vector_7>
      20:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      24:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      28:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      2c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      30:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      34:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      38:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      3c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      40:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__vector_16>
      44:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      48:	0c 94 54 1d 	jmp	0x3aa8	; 0x3aa8 <__vector_18>
      4c:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__vector_19>
      50:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      54:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      58:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      5c:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      60:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      64:	0c 94 b4 00 	jmp	0x168	; 0x168 <__bad_interrupt>
      68:	58 15       	cp	r21, r8
      6a:	58 15       	cp	r21, r8
      6c:	58 15       	cp	r21, r8
      6e:	97 15       	cp	r25, r7
      70:	82 15       	cp	r24, r2
      72:	91 15       	cp	r25, r1
      74:	58 15       	cp	r21, r8
      76:	58 15       	cp	r21, r8
      78:	97 15       	cp	r25, r7
      7a:	82 15       	cp	r24, r2

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <_ZL15dscrc2x16_table>:
      92:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      a2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000b2 <digital_pin_to_timer_PGM>:
      b2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c2:	00 00 00 00                                         ....

000000c6 <digital_pin_to_bit_mask_PGM>:
      c6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d6:	04 08 10 20                                         ... 

000000da <digital_pin_to_port_PGM>:
      da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ea:	03 03 03 03                                         ....

000000ee <port_to_input_PGM>:
      ee:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f8 <port_to_output_PGM>:
      f8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000102 <port_to_mode_PGM>:
     102:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010c <__ctors_start>:
     10c:	39 04       	cpc	r3, r9
     10e:	d1 04       	cpc	r13, r1
     110:	94 06       	cpc	r9, r20
     112:	b6 1d       	adc	r27, r6

00000114 <__ctors_end>:
     114:	40 04       	cpc	r4, r0
     116:	9b 06       	cpc	r9, r27

00000118 <__dtors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d8 e0       	ldi	r29, 0x08	; 8
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	12 e0       	ldi	r17, 0x02	; 2
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e8 ef       	ldi	r30, 0xF8	; 248
     12c:	f7 e4       	ldi	r31, 0x47	; 71
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	ac 33       	cpi	r26, 0x3C	; 60
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	25 e0       	ldi	r18, 0x05	; 5
     13c:	ac e3       	ldi	r26, 0x3C	; 60
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a4 30       	cpi	r26, 0x04	; 4
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>

0000014a <__do_global_ctors>:
     14a:	10 e0       	ldi	r17, 0x00	; 0
     14c:	ca e8       	ldi	r28, 0x8A	; 138
     14e:	d0 e0       	ldi	r29, 0x00	; 0
     150:	04 c0       	rjmp	.+8      	; 0x15a <__do_global_ctors+0x10>
     152:	21 97       	sbiw	r28, 0x01	; 1
     154:	fe 01       	movw	r30, r28
     156:	0e 94 8a 22 	call	0x4514	; 0x4514 <__tablejump2__>
     15a:	c6 38       	cpi	r28, 0x86	; 134
     15c:	d1 07       	cpc	r29, r17
     15e:	c9 f7       	brne	.-14     	; 0x152 <__do_global_ctors+0x8>
     160:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <main>
     164:	0c 94 ef 23 	jmp	0x47de	; 0x47de <__do_global_dtors>

00000168 <__bad_interrupt>:
     168:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016c <_Z7setupCSv>:

MD_TCS230  CS(S2, S3, OE);

// add possible color strip values to specific arrays
void setupCS()
{
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	2a 97       	sbiw	r28, 0x0a	; 10
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
	CS.begin();
     184:	8c e3       	ldi	r24, 0x3C	; 60
     186:	92 e0       	ldi	r25, 0x02	; 2
     188:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN9MD_TCS2305beginEv>
	
	int index = 0;
	Color c;
	c.ppm = 0.0;
	c.p = {64, 62, 90};
     18c:	86 e0       	ldi	r24, 0x06	; 6
     18e:	ee e3       	ldi	r30, 0x3E	; 62
     190:	f1 e0       	ldi	r31, 0x01	; 1
     192:	de 01       	movw	r26, r28
     194:	15 96       	adiw	r26, 0x05	; 5
     196:	01 90       	ld	r0, Z+
     198:	0d 92       	st	X+, r0
     19a:	8a 95       	dec	r24
     19c:	e1 f7       	brne	.-8      	; 0x196 <_Z7setupCSv+0x2a>
	Ammonia[index] = c;
     19e:	19 82       	std	Y+1, r1	; 0x01
     1a0:	1a 82       	std	Y+2, r1	; 0x02
     1a2:	1b 82       	std	Y+3, r1	; 0x03
     1a4:	1c 82       	std	Y+4, r1	; 0x04
     1a6:	8a e0       	ldi	r24, 0x0A	; 10
     1a8:	fe 01       	movw	r30, r28
     1aa:	31 96       	adiw	r30, 0x01	; 1
     1ac:	a8 e0       	ldi	r26, 0x08	; 8
     1ae:	b3 e0       	ldi	r27, 0x03	; 3
     1b0:	01 90       	ld	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	8a 95       	dec	r24
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <_Z7setupCSv+0x44>

	c.ppm = 0.0;
	c.p = {74, 77, 120};
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	e4 e4       	ldi	r30, 0x44	; 68
     1bc:	f1 e0       	ldi	r31, 0x01	; 1
     1be:	de 01       	movw	r26, r28
     1c0:	15 96       	adiw	r26, 0x05	; 5
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	8a 95       	dec	r24
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <_Z7setupCSv+0x56>
	Nitrite[index] = c;
     1ca:	8a e0       	ldi	r24, 0x0A	; 10
     1cc:	fe 01       	movw	r30, r28
     1ce:	31 96       	adiw	r30, 0x01	; 1
     1d0:	a2 ec       	ldi	r26, 0xC2	; 194
     1d2:	b2 e0       	ldi	r27, 0x02	; 2
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <_Z7setupCSv+0x68>

	c.ppm = 0.0;
	c.p = {71, 74, 123};
     1dc:	86 e0       	ldi	r24, 0x06	; 6
     1de:	ea e4       	ldi	r30, 0x4A	; 74
     1e0:	f1 e0       	ldi	r31, 0x01	; 1
     1e2:	de 01       	movw	r26, r28
     1e4:	15 96       	adiw	r26, 0x05	; 5
     1e6:	01 90       	ld	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	8a 95       	dec	r24
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <_Z7setupCSv+0x7a>
	Nitrate[index] = c;
     1ee:	8a e0       	ldi	r24, 0x0A	; 10
     1f0:	fe 01       	movw	r30, r28
     1f2:	31 96       	adiw	r30, 0x01	; 1
     1f4:	ac e7       	ldi	r26, 0x7C	; 124
     1f6:	b2 e0       	ldi	r27, 0x02	; 2
     1f8:	01 90       	ld	r0, Z+
     1fa:	0d 92       	st	X+, r0
     1fc:	8a 95       	dec	r24
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <_Z7setupCSv+0x8c>

	++index;

	c.ppm = 0.5;
	c.p = {61, 62, 91};
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	e0 e5       	ldi	r30, 0x50	; 80
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	de 01       	movw	r26, r28
     208:	15 96       	adiw	r26, 0x05	; 5
     20a:	01 90       	ld	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	8a 95       	dec	r24
     210:	e1 f7       	brne	.-8      	; 0x20a <_Z7setupCSv+0x9e>
	Ammonia[index] = c;
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7f e3       	ldi	r23, 0x3F	; 63
     21a:	49 83       	std	Y+1, r20	; 0x01
     21c:	5a 83       	std	Y+2, r21	; 0x02
     21e:	6b 83       	std	Y+3, r22	; 0x03
     220:	7c 83       	std	Y+4, r23	; 0x04
     222:	8a e0       	ldi	r24, 0x0A	; 10
     224:	fe 01       	movw	r30, r28
     226:	31 96       	adiw	r30, 0x01	; 1
     228:	a2 e1       	ldi	r26, 0x12	; 18
     22a:	b3 e0       	ldi	r27, 0x03	; 3
     22c:	01 90       	ld	r0, Z+
     22e:	0d 92       	st	X+, r0
     230:	8a 95       	dec	r24
     232:	e1 f7       	brne	.-8      	; 0x22c <_Z7setupCSv+0xc0>

	c.ppm = 0.15;
	c.p = {71, 74, 123};
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	ea e4       	ldi	r30, 0x4A	; 74
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	de 01       	movw	r26, r28
     23c:	15 96       	adiw	r26, 0x05	; 5
     23e:	01 90       	ld	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	8a 95       	dec	r24
     244:	e1 f7       	brne	.-8      	; 0x23e <_Z7setupCSv+0xd2>
	Nitrite[index] = c;
     246:	8a e9       	ldi	r24, 0x9A	; 154
     248:	99 e9       	ldi	r25, 0x99	; 153
     24a:	a9 e1       	ldi	r26, 0x19	; 25
     24c:	be e3       	ldi	r27, 0x3E	; 62
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	9a 83       	std	Y+2, r25	; 0x02
     252:	ab 83       	std	Y+3, r26	; 0x03
     254:	bc 83       	std	Y+4, r27	; 0x04
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	fe 01       	movw	r30, r28
     25a:	31 96       	adiw	r30, 0x01	; 1
     25c:	ac ec       	ldi	r26, 0xCC	; 204
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	8a 95       	dec	r24
     266:	e1 f7       	brne	.-8      	; 0x260 <_Z7setupCSv+0xf4>

	c.ppm = 0.5;
	c.p = {60, 60, 101};
     268:	86 e0       	ldi	r24, 0x06	; 6
     26a:	e6 e5       	ldi	r30, 0x56	; 86
     26c:	f1 e0       	ldi	r31, 0x01	; 1
     26e:	de 01       	movw	r26, r28
     270:	15 96       	adiw	r26, 0x05	; 5
     272:	01 90       	ld	r0, Z+
     274:	0d 92       	st	X+, r0
     276:	8a 95       	dec	r24
     278:	e1 f7       	brne	.-8      	; 0x272 <_Z7setupCSv+0x106>
	Nitrate[index] = c;
     27a:	49 83       	std	Y+1, r20	; 0x01
     27c:	5a 83       	std	Y+2, r21	; 0x02
     27e:	6b 83       	std	Y+3, r22	; 0x03
     280:	7c 83       	std	Y+4, r23	; 0x04
     282:	8a e0       	ldi	r24, 0x0A	; 10
     284:	fe 01       	movw	r30, r28
     286:	31 96       	adiw	r30, 0x01	; 1
     288:	a6 e8       	ldi	r26, 0x86	; 134
     28a:	b2 e0       	ldi	r27, 0x02	; 2
     28c:	01 90       	ld	r0, Z+
     28e:	0d 92       	st	X+, r0
     290:	8a 95       	dec	r24
     292:	e1 f7       	brne	.-8      	; 0x28c <_Z7setupCSv+0x120>

	++index;

	c.ppm = 1.0;
	c.p = {50, 63, 90};
     294:	86 e0       	ldi	r24, 0x06	; 6
     296:	ec e5       	ldi	r30, 0x5C	; 92
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	de 01       	movw	r26, r28
     29c:	15 96       	adiw	r26, 0x05	; 5
     29e:	01 90       	ld	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	8a 95       	dec	r24
     2a4:	e1 f7       	brne	.-8      	; 0x29e <_Z7setupCSv+0x132>
	Ammonia[index] = c;
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	60 e8       	ldi	r22, 0x80	; 128
     2ac:	7f e3       	ldi	r23, 0x3F	; 63
     2ae:	49 83       	std	Y+1, r20	; 0x01
     2b0:	5a 83       	std	Y+2, r21	; 0x02
     2b2:	6b 83       	std	Y+3, r22	; 0x03
     2b4:	7c 83       	std	Y+4, r23	; 0x04
     2b6:	8a e0       	ldi	r24, 0x0A	; 10
     2b8:	fe 01       	movw	r30, r28
     2ba:	31 96       	adiw	r30, 0x01	; 1
     2bc:	ac e1       	ldi	r26, 0x1C	; 28
     2be:	b3 e0       	ldi	r27, 0x03	; 3
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	8a 95       	dec	r24
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <_Z7setupCSv+0x154>

	c.ppm = 0.3;
	c.p = {64, 67, 114};
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	e2 e6       	ldi	r30, 0x62	; 98
     2cc:	f1 e0       	ldi	r31, 0x01	; 1
     2ce:	de 01       	movw	r26, r28
     2d0:	15 96       	adiw	r26, 0x05	; 5
     2d2:	01 90       	ld	r0, Z+
     2d4:	0d 92       	st	X+, r0
     2d6:	8a 95       	dec	r24
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <_Z7setupCSv+0x166>
	Nitrite[index] = c;
     2da:	8a e9       	ldi	r24, 0x9A	; 154
     2dc:	99 e9       	ldi	r25, 0x99	; 153
     2de:	a9 e9       	ldi	r26, 0x99	; 153
     2e0:	be e3       	ldi	r27, 0x3E	; 62
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	9a 83       	std	Y+2, r25	; 0x02
     2e6:	ab 83       	std	Y+3, r26	; 0x03
     2e8:	bc 83       	std	Y+4, r27	; 0x04
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	fe 01       	movw	r30, r28
     2ee:	31 96       	adiw	r30, 0x01	; 1
     2f0:	a6 ed       	ldi	r26, 0xD6	; 214
     2f2:	b2 e0       	ldi	r27, 0x02	; 2
     2f4:	01 90       	ld	r0, Z+
     2f6:	0d 92       	st	X+, r0
     2f8:	8a 95       	dec	r24
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <_Z7setupCSv+0x188>

	c.ppm = 2.0;
	c.p = {68, 65, 114};
     2fc:	86 e0       	ldi	r24, 0x06	; 6
     2fe:	e8 e6       	ldi	r30, 0x68	; 104
     300:	f1 e0       	ldi	r31, 0x01	; 1
     302:	de 01       	movw	r26, r28
     304:	15 96       	adiw	r26, 0x05	; 5
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	8a 95       	dec	r24
     30c:	e1 f7       	brne	.-8      	; 0x306 <_Z7setupCSv+0x19a>
	Nitrate[index] = c;
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	a0 e0       	ldi	r26, 0x00	; 0
     314:	b0 e4       	ldi	r27, 0x40	; 64
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	9a 83       	std	Y+2, r25	; 0x02
     31a:	ab 83       	std	Y+3, r26	; 0x03
     31c:	bc 83       	std	Y+4, r27	; 0x04
     31e:	8a e0       	ldi	r24, 0x0A	; 10
     320:	fe 01       	movw	r30, r28
     322:	31 96       	adiw	r30, 0x01	; 1
     324:	a0 e9       	ldi	r26, 0x90	; 144
     326:	b2 e0       	ldi	r27, 0x02	; 2
     328:	01 90       	ld	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	8a 95       	dec	r24
     32e:	e1 f7       	brne	.-8      	; 0x328 <_Z7setupCSv+0x1bc>

	++index;

	c.ppm = 3.0;
	c.p = {52, 60, 90};
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	ee e6       	ldi	r30, 0x6E	; 110
     334:	f1 e0       	ldi	r31, 0x01	; 1
     336:	de 01       	movw	r26, r28
     338:	15 96       	adiw	r26, 0x05	; 5
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	8a 95       	dec	r24
     340:	e1 f7       	brne	.-8      	; 0x33a <_Z7setupCSv+0x1ce>
	Ammonia[index] = c;
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	20 e4       	ldi	r18, 0x40	; 64
     348:	30 e4       	ldi	r19, 0x40	; 64
     34a:	09 83       	std	Y+1, r16	; 0x01
     34c:	1a 83       	std	Y+2, r17	; 0x02
     34e:	2b 83       	std	Y+3, r18	; 0x03
     350:	3c 83       	std	Y+4, r19	; 0x04
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	fe 01       	movw	r30, r28
     356:	31 96       	adiw	r30, 0x01	; 1
     358:	a6 e2       	ldi	r26, 0x26	; 38
     35a:	b3 e0       	ldi	r27, 0x03	; 3
     35c:	01 90       	ld	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	8a 95       	dec	r24
     362:	e1 f7       	brne	.-8      	; 0x35c <_Z7setupCSv+0x1f0>

	c.ppm = 1.0;
	c.p = {52, 52, 94};
     364:	86 e0       	ldi	r24, 0x06	; 6
     366:	e4 e7       	ldi	r30, 0x74	; 116
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	de 01       	movw	r26, r28
     36c:	15 96       	adiw	r26, 0x05	; 5
     36e:	01 90       	ld	r0, Z+
     370:	0d 92       	st	X+, r0
     372:	8a 95       	dec	r24
     374:	e1 f7       	brne	.-8      	; 0x36e <_Z7setupCSv+0x202>
	Nitrite[index] = c;
     376:	49 83       	std	Y+1, r20	; 0x01
     378:	5a 83       	std	Y+2, r21	; 0x02
     37a:	6b 83       	std	Y+3, r22	; 0x03
     37c:	7c 83       	std	Y+4, r23	; 0x04
     37e:	8a e0       	ldi	r24, 0x0A	; 10
     380:	fe 01       	movw	r30, r28
     382:	31 96       	adiw	r30, 0x01	; 1
     384:	a0 ee       	ldi	r26, 0xE0	; 224
     386:	b2 e0       	ldi	r27, 0x02	; 2
     388:	01 90       	ld	r0, Z+
     38a:	0d 92       	st	X+, r0
     38c:	8a 95       	dec	r24
     38e:	e1 f7       	brne	.-8      	; 0x388 <_Z7setupCSv+0x21c>

	c.ppm = 5.0;
	c.p = {58, 53, 96};
     390:	86 e0       	ldi	r24, 0x06	; 6
     392:	ea e7       	ldi	r30, 0x7A	; 122
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	de 01       	movw	r26, r28
     398:	15 96       	adiw	r26, 0x05	; 5
     39a:	01 90       	ld	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	8a 95       	dec	r24
     3a0:	e1 f7       	brne	.-8      	; 0x39a <_Z7setupCSv+0x22e>
	Nitrate[index] = c;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 ea       	ldi	r26, 0xA0	; 160
     3a8:	b0 e4       	ldi	r27, 0x40	; 64
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	ab 83       	std	Y+3, r26	; 0x03
     3b0:	bc 83       	std	Y+4, r27	; 0x04
     3b2:	8a e0       	ldi	r24, 0x0A	; 10
     3b4:	fe 01       	movw	r30, r28
     3b6:	31 96       	adiw	r30, 0x01	; 1
     3b8:	aa e9       	ldi	r26, 0x9A	; 154
     3ba:	b2 e0       	ldi	r27, 0x02	; 2
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <_Z7setupCSv+0x250>

	++index;

	c.ppm = 6.0;
	c.p = {48, 54, 86};
     3c4:	86 e0       	ldi	r24, 0x06	; 6
     3c6:	e0 e8       	ldi	r30, 0x80	; 128
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	de 01       	movw	r26, r28
     3cc:	15 96       	adiw	r26, 0x05	; 5
     3ce:	01 90       	ld	r0, Z+
     3d0:	0d 92       	st	X+, r0
     3d2:	8a 95       	dec	r24
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <_Z7setupCSv+0x262>
	Ammonia[index] = c;
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	a0 ec       	ldi	r26, 0xC0	; 192
     3dc:	b0 e4       	ldi	r27, 0x40	; 64
     3de:	89 83       	std	Y+1, r24	; 0x01
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	ab 83       	std	Y+3, r26	; 0x03
     3e4:	bc 83       	std	Y+4, r27	; 0x04
     3e6:	8a e0       	ldi	r24, 0x0A	; 10
     3e8:	fe 01       	movw	r30, r28
     3ea:	31 96       	adiw	r30, 0x01	; 1
     3ec:	a0 e3       	ldi	r26, 0x30	; 48
     3ee:	b3 e0       	ldi	r27, 0x03	; 3
     3f0:	01 90       	ld	r0, Z+
     3f2:	0d 92       	st	X+, r0
     3f4:	8a 95       	dec	r24
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <_Z7setupCSv+0x284>

	c.ppm = 1.5;
	c.p = {49, 48, 88};
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	e6 e8       	ldi	r30, 0x86	; 134
     3fc:	f1 e0       	ldi	r31, 0x01	; 1
     3fe:	de 01       	movw	r26, r28
     400:	15 96       	adiw	r26, 0x05	; 5
     402:	01 90       	ld	r0, Z+
     404:	0d 92       	st	X+, r0
     406:	8a 95       	dec	r24
     408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	Nitrite[index] = c;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a0 ec       	ldi	r26, 0xC0	; 192
     410:	bf e3       	ldi	r27, 0x3F	; 63
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	ab 83       	std	Y+3, r26	; 0x03
     418:	bc 83       	std	Y+4, r27	; 0x04
     41a:	8a e0       	ldi	r24, 0x0A	; 10
     41c:	fe 01       	movw	r30, r28
     41e:	31 96       	adiw	r30, 0x01	; 1
     420:	aa ee       	ldi	r26, 0xEA	; 234
     422:	b2 e0       	ldi	r27, 0x02	; 2
     424:	01 90       	ld	r0, Z+
     426:	0d 92       	st	X+, r0
     428:	8a 95       	dec	r24
     42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

	c.ppm = 10.0;
	c.p = {49, 48, 88};
     42c:	86 e0       	ldi	r24, 0x06	; 6
     42e:	e6 e8       	ldi	r30, 0x86	; 134
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	de 01       	movw	r26, r28
     434:	15 96       	adiw	r26, 0x05	; 5
     436:	01 90       	ld	r0, Z+
     438:	0d 92       	st	X+, r0
     43a:	8a 95       	dec	r24
     43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	Nitrate[index] = c;
     43e:	40 e0       	ldi	r20, 0x00	; 0
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e2       	ldi	r22, 0x20	; 32
     444:	71 e4       	ldi	r23, 0x41	; 65
     446:	49 83       	std	Y+1, r20	; 0x01
     448:	5a 83       	std	Y+2, r21	; 0x02
     44a:	6b 83       	std	Y+3, r22	; 0x03
     44c:	7c 83       	std	Y+4, r23	; 0x04
     44e:	8a e0       	ldi	r24, 0x0A	; 10
     450:	fe 01       	movw	r30, r28
     452:	31 96       	adiw	r30, 0x01	; 1
     454:	a4 ea       	ldi	r26, 0xA4	; 164
     456:	b2 e0       	ldi	r27, 0x02	; 2
     458:	01 90       	ld	r0, Z+
     45a:	0d 92       	st	X+, r0
     45c:	8a 95       	dec	r24
     45e:	e1 f7       	brne	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

	++index;

	c.ppm = 3.0;
	c.p = {54, 46, 88};
     460:	86 e0       	ldi	r24, 0x06	; 6
     462:	ec e8       	ldi	r30, 0x8C	; 140
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	de 01       	movw	r26, r28
     468:	15 96       	adiw	r26, 0x05	; 5
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	8a 95       	dec	r24
     470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	Nitrite[index] = c;
     472:	09 83       	std	Y+1, r16	; 0x01
     474:	1a 83       	std	Y+2, r17	; 0x02
     476:	2b 83       	std	Y+3, r18	; 0x03
     478:	3c 83       	std	Y+4, r19	; 0x04
     47a:	8a e0       	ldi	r24, 0x0A	; 10
     47c:	fe 01       	movw	r30, r28
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	a4 ef       	ldi	r26, 0xF4	; 244
     482:	b2 e0       	ldi	r27, 0x02	; 2
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	8a 95       	dec	r24
     48a:	e1 f7       	brne	.-8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>

	c.ppm = 20.0;
	c.p = {50, 44, 86};
     48c:	86 e0       	ldi	r24, 0x06	; 6
     48e:	e2 e9       	ldi	r30, 0x92	; 146
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	de 01       	movw	r26, r28
     494:	15 96       	adiw	r26, 0x05	; 5
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	8a 95       	dec	r24
     49c:	e1 f7       	brne	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	Nitrate[index] = c;
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	a0 ea       	ldi	r26, 0xA0	; 160
     4a4:	b1 e4       	ldi	r27, 0x41	; 65
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	9a 83       	std	Y+2, r25	; 0x02
     4aa:	ab 83       	std	Y+3, r26	; 0x03
     4ac:	bc 83       	std	Y+4, r27	; 0x04
     4ae:	8a e0       	ldi	r24, 0x0A	; 10
     4b0:	fe 01       	movw	r30, r28
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	ae ea       	ldi	r26, 0xAE	; 174
     4b6:	b2 e0       	ldi	r27, 0x02	; 2
     4b8:	01 90       	ld	r0, Z+
     4ba:	0d 92       	st	X+, r0
     4bc:	8a 95       	dec	r24
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>

	++index;

	c.ppm = 10.0;
	c.p = {52, 42, 82};
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	e8 e9       	ldi	r30, 0x98	; 152
     4c4:	f1 e0       	ldi	r31, 0x01	; 1
     4c6:	de 01       	movw	r26, r28
     4c8:	15 96       	adiw	r26, 0x05	; 5
     4ca:	01 90       	ld	r0, Z+
     4cc:	0d 92       	st	X+, r0
     4ce:	8a 95       	dec	r24
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	Nitrite[index] = c;
     4d2:	49 83       	std	Y+1, r20	; 0x01
     4d4:	5a 83       	std	Y+2, r21	; 0x02
     4d6:	6b 83       	std	Y+3, r22	; 0x03
     4d8:	7c 83       	std	Y+4, r23	; 0x04
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	fe 01       	movw	r30, r28
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	ae ef       	ldi	r26, 0xFE	; 254
     4e2:	b2 e0       	ldi	r27, 0x02	; 2
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	8a 95       	dec	r24
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>

	c.ppm = 50.0;
	c.p = {47, 43, 82};
     4ec:	86 e0       	ldi	r24, 0x06	; 6
     4ee:	ee e9       	ldi	r30, 0x9E	; 158
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	de 01       	movw	r26, r28
     4f4:	15 96       	adiw	r26, 0x05	; 5
     4f6:	01 90       	ld	r0, Z+
     4f8:	0d 92       	st	X+, r0
     4fa:	8a 95       	dec	r24
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	Nitrate[index] = c;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	a8 e4       	ldi	r26, 0x48	; 72
     504:	b2 e4       	ldi	r27, 0x42	; 66
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	9a 83       	std	Y+2, r25	; 0x02
     50a:	ab 83       	std	Y+3, r26	; 0x03
     50c:	bc 83       	std	Y+4, r27	; 0x04
     50e:	8a e0       	ldi	r24, 0x0A	; 10
     510:	fe 01       	movw	r30, r28
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	a8 eb       	ldi	r26, 0xB8	; 184
     516:	b2 e0       	ldi	r27, 0x02	; 2
     518:	01 90       	ld	r0, Z+
     51a:	0d 92       	st	X+, r0
     51c:	8a 95       	dec	r24
     51e:	e1 f7       	brne	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
}
     520:	2a 96       	adiw	r28, 0x0a	; 10
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	08 95       	ret

00000536 <_Z9SameColorv>:


bool SameColor()
{
	Serial.print("c: ");
     536:	64 ea       	ldi	r22, 0xA4	; 164
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	86 e4       	ldi	r24, 0x46	; 70
     53c:	94 e0       	ldi	r25, 0x04	; 4
     53e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(c.p.R);
     542:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <c+0x4>
     546:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <c+0x5>
     54a:	4a e0       	ldi	r20, 0x0A	; 10
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	86 e4       	ldi	r24, 0x46	; 70
     550:	94 e0       	ldi	r25, 0x04	; 4
     552:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <_ZN5Print5printEii>
	Serial.print(" ");
     556:	66 ea       	ldi	r22, 0xA6	; 166
     558:	71 e0       	ldi	r23, 0x01	; 1
     55a:	86 e4       	ldi	r24, 0x46	; 70
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(c.p.G);
     562:	60 91 75 02 	lds	r22, 0x0275	; 0x800275 <c+0x6>
     566:	70 91 76 02 	lds	r23, 0x0276	; 0x800276 <c+0x7>
     56a:	4a e0       	ldi	r20, 0x0A	; 10
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	86 e4       	ldi	r24, 0x46	; 70
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <_ZN5Print5printEii>
	Serial.print(" ");
     576:	66 ea       	ldi	r22, 0xA6	; 166
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	86 e4       	ldi	r24, 0x46	; 70
     57c:	94 e0       	ldi	r25, 0x04	; 4
     57e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(c.p.B);
     582:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <c+0x8>
     586:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <c+0x9>
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	86 e4       	ldi	r24, 0x46	; 70
     590:	94 e0       	ldi	r25, 0x04	; 4
     592:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <_ZN5Print5printEii>
	Serial.print("read_in: ");
     596:	68 ea       	ldi	r22, 0xA8	; 168
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	86 e4       	ldi	r24, 0x46	; 70
     59c:	94 e0       	ldi	r25, 0x04	; 4
     59e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(redScanned);
     5a2:	4a e0       	ldi	r20, 0x0A	; 10
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <redScanned>
     5aa:	86 e4       	ldi	r24, 0x46	; 70
     5ac:	94 e0       	ldi	r25, 0x04	; 4
     5ae:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN5Print5printEhi>
	Serial.print(" ");
     5b2:	66 ea       	ldi	r22, 0xA6	; 166
     5b4:	71 e0       	ldi	r23, 0x01	; 1
     5b6:	86 e4       	ldi	r24, 0x46	; 70
     5b8:	94 e0       	ldi	r25, 0x04	; 4
     5ba:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(greenScanned);
     5be:	4a e0       	ldi	r20, 0x0A	; 10
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <greenScanned>
     5c6:	86 e4       	ldi	r24, 0x46	; 70
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN5Print5printEhi>
	Serial.print(" ");
     5ce:	66 ea       	ldi	r22, 0xA6	; 166
     5d0:	71 e0       	ldi	r23, 0x01	; 1
     5d2:	86 e4       	ldi	r24, 0x46	; 70
     5d4:	94 e0       	ldi	r25, 0x04	; 4
     5d6:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <_ZN5Print5printEPKc>
	Serial.print(blueScanned);
     5da:	4a e0       	ldi	r20, 0x0A	; 10
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <blueScanned>
     5e2:	86 e4       	ldi	r24, 0x46	; 70
     5e4:	94 e0       	ldi	r25, 0x04	; 4
     5e6:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN5Print5printEhi>
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
     5ea:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <redScanned>
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <c+0x4>
     5f4:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <c+0x5>
     5f8:	ac 01       	movw	r20, r24
     5fa:	45 50       	subi	r20, 0x05	; 5
     5fc:	51 09       	sbc	r21, r1
     5fe:	24 17       	cp	r18, r20
     600:	35 07       	cpc	r19, r21
     602:	74 f1       	brlt	.+92     	; 0x660 <_Z9SameColorv+0x12a>
     604:	05 96       	adiw	r24, 0x05	; 5
     606:	82 17       	cp	r24, r18
     608:	93 07       	cpc	r25, r19
     60a:	54 f1       	brlt	.+84     	; 0x660 <_Z9SameColorv+0x12a>
	return false;
	if (greenScanned < (c.p.G - TOLERANCE) || greenScanned > (c.p.G + TOLERANCE))
     60c:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <greenScanned>
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <c+0x6>
     616:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <c+0x7>
     61a:	ac 01       	movw	r20, r24
     61c:	45 50       	subi	r20, 0x05	; 5
     61e:	51 09       	sbc	r21, r1
     620:	24 17       	cp	r18, r20
     622:	35 07       	cpc	r19, r21
     624:	ec f0       	brlt	.+58     	; 0x660 <_Z9SameColorv+0x12a>
     626:	05 96       	adiw	r24, 0x05	; 5
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	cc f0       	brlt	.+50     	; 0x660 <_Z9SameColorv+0x12a>
	return false;
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
     62e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <blueScanned>
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <c+0x8>
     638:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <c+0x9>
     63c:	ac 01       	movw	r20, r24
     63e:	45 50       	subi	r20, 0x05	; 5
     640:	51 09       	sbc	r21, r1
     642:	24 17       	cp	r18, r20
     644:	35 07       	cpc	r19, r21
     646:	64 f0       	brlt	.+24     	; 0x660 <_Z9SameColorv+0x12a>
     648:	05 96       	adiw	r24, 0x05	; 5
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	44 f0       	brlt	.+16     	; 0x660 <_Z9SameColorv+0x12a>
	return false;
	
	Serial.print(F("\nFound Matching Color"));
     650:	6c e7       	ldi	r22, 0x7C	; 124
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	86 e4       	ldi	r24, 0x46	; 70
     656:	94 e0       	ldi	r25, 0x04	; 4
     658:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <_ZN5Print5printEPK19__FlashStringHelper>
	return true;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	08 95       	ret
	Serial.print(greenScanned);
	Serial.print(" ");
	Serial.print(blueScanned);
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
	return false;
     660:	80 e0       	ldi	r24, 0x00	; 0
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
	return false;
	
	Serial.print(F("\nFound Matching Color"));
	return true;
}
     662:	08 95       	ret

00000664 <_Z9FindMatchv>:

double FindMatch()
{
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	switch(typeToRead)
     66c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <typeToRead>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	09 f4       	brne	.+2      	; 0x676 <_Z9FindMatchv+0x12>
     674:	44 c0       	rjmp	.+136    	; 0x6fe <_Z9FindMatchv+0x9a>
     676:	40 f0       	brcs	.+16     	; 0x688 <_Z9FindMatchv+0x24>
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	09 f0       	breq	.+2      	; 0x67e <_Z9FindMatchv+0x1a>
     67c:	68 c0       	rjmp	.+208    	; 0x74e <_Z9FindMatchv+0xea>
     67e:	02 ec       	ldi	r16, 0xC2	; 194
     680:	12 e0       	ldi	r17, 0x02	; 2
     682:	c0 e0       	ldi	r28, 0x00	; 0
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	26 c0       	rjmp	.+76     	; 0x6d4 <_Z9FindMatchv+0x70>
     688:	08 e0       	ldi	r16, 0x08	; 8
     68a:	13 e0       	ldi	r17, 0x03	; 3
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	d0 e0       	ldi	r29, 0x00	; 0
		case AMMONIA:
		{
			// find matching ammonia value
			for(int i = 0; i < MAX_AMMONIA_COLORS; ++i)
			{
				c = Ammonia[i];
     690:	8a e0       	ldi	r24, 0x0A	; 10
     692:	f8 01       	movw	r30, r16
     694:	af e6       	ldi	r26, 0x6F	; 111
     696:	b2 e0       	ldi	r27, 0x02	; 2
     698:	01 90       	ld	r0, Z+
     69a:	0d 92       	st	X+, r0
     69c:	8a 95       	dec	r24
     69e:	e1 f7       	brne	.-8      	; 0x698 <_Z9FindMatchv+0x34>
				if(SameColor())
     6a0:	0e 94 9b 02 	call	0x536	; 0x536 <_Z9SameColorv>
     6a4:	88 23       	and	r24, r24
     6a6:	49 f0       	breq	.+18     	; 0x6ba <_Z9FindMatchv+0x56>
				return Ammonia[i].ppm;
     6a8:	8a e0       	ldi	r24, 0x0A	; 10
     6aa:	8c 9f       	mul	r24, r28
     6ac:	f0 01       	movw	r30, r0
     6ae:	8d 9f       	mul	r24, r29
     6b0:	f0 0d       	add	r31, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	e8 5f       	subi	r30, 0xF8	; 248
     6b6:	fc 4f       	sbci	r31, 0xFC	; 252
     6b8:	3a c0       	rjmp	.+116    	; 0x72e <_Z9FindMatchv+0xca>
	switch(typeToRead)
	{
		case AMMONIA:
		{
			// find matching ammonia value
			for(int i = 0; i < MAX_AMMONIA_COLORS; ++i)
     6ba:	21 96       	adiw	r28, 0x01	; 1
     6bc:	06 5f       	subi	r16, 0xF6	; 246
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	c5 30       	cpi	r28, 0x05	; 5
     6c2:	d1 05       	cpc	r29, r1
     6c4:	29 f7       	brne	.-54     	; 0x690 <_Z9FindMatchv+0x2c>
     6c6:	3e c0       	rjmp	.+124    	; 0x744 <_Z9FindMatchv+0xe0>
			break;
		}
		case NITRITE:
		{
			// find matching nitrite value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
     6c8:	21 96       	adiw	r28, 0x01	; 1
     6ca:	06 5f       	subi	r16, 0xF6	; 246
     6cc:	1f 4f       	sbci	r17, 0xFF	; 255
     6ce:	c7 30       	cpi	r28, 0x07	; 7
     6d0:	d1 05       	cpc	r29, r1
     6d2:	c1 f1       	breq	.+112    	; 0x744 <_Z9FindMatchv+0xe0>
			{
				c = Nitrite[i];
     6d4:	8a e0       	ldi	r24, 0x0A	; 10
     6d6:	f8 01       	movw	r30, r16
     6d8:	af e6       	ldi	r26, 0x6F	; 111
     6da:	b2 e0       	ldi	r27, 0x02	; 2
     6dc:	01 90       	ld	r0, Z+
     6de:	0d 92       	st	X+, r0
     6e0:	8a 95       	dec	r24
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <_Z9FindMatchv+0x78>
				if(SameColor())
     6e4:	0e 94 9b 02 	call	0x536	; 0x536 <_Z9SameColorv>
     6e8:	88 23       	and	r24, r24
     6ea:	71 f3       	breq	.-36     	; 0x6c8 <_Z9FindMatchv+0x64>
				return Nitrite[i].ppm;
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	8c 9f       	mul	r24, r28
     6f0:	f0 01       	movw	r30, r0
     6f2:	8d 9f       	mul	r24, r29
     6f4:	f0 0d       	add	r31, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	ee 53       	subi	r30, 0x3E	; 62
     6fa:	fd 4f       	sbci	r31, 0xFD	; 253
     6fc:	18 c0       	rjmp	.+48     	; 0x72e <_Z9FindMatchv+0xca>
     6fe:	0c e7       	ldi	r16, 0x7C	; 124
     700:	12 e0       	ldi	r17, 0x02	; 2
	return true;
}

double FindMatch()
{
	switch(typeToRead)
     702:	c0 e0       	ldi	r28, 0x00	; 0
     704:	d0 e0       	ldi	r29, 0x00	; 0
		case NITRATE:
		{
			// find matching nitrate value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
			{
				c = Nitrate[i];
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	f8 01       	movw	r30, r16
     70a:	af e6       	ldi	r26, 0x6F	; 111
     70c:	b2 e0       	ldi	r27, 0x02	; 2
     70e:	01 90       	ld	r0, Z+
     710:	0d 92       	st	X+, r0
     712:	8a 95       	dec	r24
     714:	e1 f7       	brne	.-8      	; 0x70e <_Z9FindMatchv+0xaa>
				if(SameColor())
     716:	0e 94 9b 02 	call	0x536	; 0x536 <_Z9SameColorv>
     71a:	88 23       	and	r24, r24
     71c:	69 f0       	breq	.+26     	; 0x738 <_Z9FindMatchv+0xd4>
				return Nitrate[i].ppm;
     71e:	8a e0       	ldi	r24, 0x0A	; 10
     720:	8c 9f       	mul	r24, r28
     722:	f0 01       	movw	r30, r0
     724:	8d 9f       	mul	r24, r29
     726:	f0 0d       	add	r31, r0
     728:	11 24       	eor	r1, r1
     72a:	e4 58       	subi	r30, 0x84	; 132
     72c:	fd 4f       	sbci	r31, 0xFD	; 253
     72e:	30 81       	ld	r19, Z
     730:	21 81       	ldd	r18, Z+1	; 0x01
     732:	92 81       	ldd	r25, Z+2	; 0x02
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	0a c0       	rjmp	.+20     	; 0x74c <_Z9FindMatchv+0xe8>
			break;
		}
		case NITRATE:
		{
			// find matching nitrate value
			for(int i = 0; i < MAX_NITRITE_NITRATE_COLORS; ++i)
     738:	21 96       	adiw	r28, 0x01	; 1
     73a:	06 5f       	subi	r16, 0xF6	; 246
     73c:	1f 4f       	sbci	r17, 0xFF	; 255
     73e:	c7 30       	cpi	r28, 0x07	; 7
     740:	d1 05       	cpc	r29, r1
     742:	09 f7       	brne	.-62     	; 0x706 <_Z9FindMatchv+0xa2>
			{
				c = Ammonia[i];
				if(SameColor())
				return Ammonia[i].ppm;
			}
			return -1;
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	90 e8       	ldi	r25, 0x80	; 128
     74a:	8f eb       	ldi	r24, 0xBF	; 191
     74c:	ac 01       	movw	r20, r24
			}
			return -1;
			break;
		}
	}
}
     74e:	63 2f       	mov	r22, r19
     750:	72 2f       	mov	r23, r18
     752:	85 2f       	mov	r24, r21
     754:	94 2f       	mov	r25, r20
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	08 95       	ret

00000760 <_Z9ScanColor8ReadType>:

long ScanColor(ReadType r)
{
	typeToRead = r;
     760:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <typeToRead>
	CS.read();
     764:	8c e3       	ldi	r24, 0x3C	; 60
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN9MD_TCS2304readEv>
	while(CS.available() == 0);  // wait for read to complete
     76c:	8c e3       	ldi	r24, 0x3C	; 60
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN9MD_TCS2309availableEv>
     774:	88 23       	and	r24, r24
     776:	d1 f3       	breq	.-12     	; 0x76c <_Z9ScanColor8ReadType+0xc>
	CS.getRGB(&rgb);
     778:	69 e7       	ldi	r22, 0x79	; 121
     77a:	72 e0       	ldi	r23, 0x02	; 2
     77c:	8c e3       	ldi	r24, 0x3C	; 60
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     784:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <rgb+0x1>
     788:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     78c:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <rgb>
     790:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     794:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <rgb+0x2>
     798:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <blueScanned>
	// look for match
	Serial.println("RGB");
     79c:	62 eb       	ldi	r22, 0xB2	; 178
     79e:	71 e0       	ldi	r23, 0x01	; 1
     7a0:	86 e4       	ldi	r24, 0x46	; 70
     7a2:	94 e0       	ldi	r25, 0x04	; 4
     7a4:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <_ZN5Print7printlnEPKc>
	Serial.println(redScanned);
     7a8:	4a e0       	ldi	r20, 0x0A	; 10
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <redScanned>
     7b0:	86 e4       	ldi	r24, 0x46	; 70
     7b2:	94 e0       	ldi	r25, 0x04	; 4
     7b4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN5Print7printlnEhi>
	Serial.println(greenScanned);
     7b8:	4a e0       	ldi	r20, 0x0A	; 10
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <greenScanned>
     7c0:	86 e4       	ldi	r24, 0x46	; 70
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN5Print7printlnEhi>
	Serial.println(blueScanned);
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <blueScanned>
     7d0:	86 e4       	ldi	r24, 0x46	; 70
     7d2:	94 e0       	ldi	r25, 0x04	; 4
     7d4:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <_ZN5Print7printlnEhi>
	return FindMatch();
     7d8:	0e 94 32 03 	call	0x664	; 0x664 <_Z9FindMatchv>
     7dc:	0e 94 be 1a 	call	0x357c	; 0x357c <__fixsfsi>
}
     7e0:	08 95       	ret

000007e2 <_Z13findTestStrip8ReadType>:

bool findTestStrip(ReadType r)
{
     7e2:	cf 93       	push	r28
	typeToRead = r;
     7e4:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <typeToRead>
	// Scan for color
	CS.read();
     7e8:	8c e3       	ldi	r24, 0x3C	; 60
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <_ZN9MD_TCS2304readEv>
	while (CS.available() == 0);
     7f0:	8c e3       	ldi	r24, 0x3C	; 60
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <_ZN9MD_TCS2309availableEv>
     7f8:	88 23       	and	r24, r24
     7fa:	d1 f3       	breq	.-12     	; 0x7f0 <_Z13findTestStrip8ReadType+0xe>
	CS.getRGB(&rgb);
     7fc:	69 e7       	ldi	r22, 0x79	; 121
     7fe:	72 e0       	ldi	r23, 0x02	; 2
     800:	8c e3       	ldi	r24, 0x3C	; 60
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 88 16 	call	0x2d10	; 0x2d10 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     808:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <rgb+0x1>
     80c:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     810:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <rgb>
     814:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     818:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <rgb+0x2>
     81c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <blueScanned>
	// look for match against black
	c = EmptyTestBox;
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	e0 e1       	ldi	r30, 0x10	; 16
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	af e6       	ldi	r26, 0x6F	; 111
     828:	b2 e0       	ldi	r27, 0x02	; 2
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <_Z13findTestStrip8ReadType+0x48>
	bool foundEmptyBox = SameColor();
     832:	0e 94 9b 02 	call	0x536	; 0x536 <_Z9SameColorv>
	c = WhiteTestStrip;
     836:	9a e0       	ldi	r25, 0x0A	; 10
     838:	e6 e0       	ldi	r30, 0x06	; 6
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	af e6       	ldi	r26, 0x6F	; 111
     83e:	b2 e0       	ldi	r27, 0x02	; 2
     840:	01 90       	ld	r0, Z+
     842:	0d 92       	st	X+, r0
     844:	9a 95       	dec	r25
     846:	e1 f7       	brne	.-8      	; 0x840 <_Z13findTestStrip8ReadType+0x5e>
	foundEmptyBox =  foundEmptyBox || SameColor();
     848:	81 11       	cpse	r24, r1
     84a:	05 c0       	rjmp	.+10     	; 0x856 <_Z13findTestStrip8ReadType+0x74>
     84c:	0e 94 9b 02 	call	0x536	; 0x536 <_Z9SameColorv>
     850:	c8 2f       	mov	r28, r24
     852:	88 23       	and	r24, r24
     854:	59 f0       	breq	.+22     	; 0x86c <_Z13findTestStrip8ReadType+0x8a>
	return foundEmptyBox && (FindMatch() == -1);
     856:	0e 94 32 03 	call	0x664	; 0x664 <_Z9FindMatchv>
     85a:	c1 e0       	ldi	r28, 0x01	; 1
     85c:	20 e0       	ldi	r18, 0x00	; 0
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	40 e8       	ldi	r20, 0x80	; 128
     862:	5f eb       	ldi	r21, 0xBF	; 191
     864:	0e 94 47 1a 	call	0x348e	; 0x348e <__cmpsf2>
     868:	81 11       	cpse	r24, r1
     86a:	c0 e0       	ldi	r28, 0x00	; 0
     86c:	8c 2f       	mov	r24, r28
     86e:	cf 91       	pop	r28
     870:	08 95       	ret

00000872 <_GLOBAL__sub_I_Ammonia>:
uint8_t redScanned;
uint8_t blueScanned;

ReadType typeToRead;

MD_TCS230  CS(S2, S3, OE);
     872:	28 e0       	ldi	r18, 0x08	; 8
     874:	4d e0       	ldi	r20, 0x0D	; 13
     876:	6c e0       	ldi	r22, 0x0C	; 12
     878:	8c e3       	ldi	r24, 0x3C	; 60
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	0c 94 eb 15 	jmp	0x2bd6	; 0x2bd6 <_ZN9MD_TCS230C1Ehhh>

00000880 <_GLOBAL__sub_D_Ammonia>:
     880:	8c e3       	ldi	r24, 0x3C	; 60
     882:	92 e0       	ldi	r25, 0x02	; 2
     884:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <_ZN9MD_TCS230D1Ev>

00000888 <_Z11measureTempv>:

#define TEMP_PIN 6

OneWire ds(TEMP_PIN); // Temp sensor on pin 6

float measureTemp() {
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	64 97       	sbiw	r28, 0x14	; 20
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
	byte i;
	byte data[12];
	byte addr[8];
	float celsius; //, fahrenheit;
	
	ds.reset_search();
     8a4:	8a e3       	ldi	r24, 0x3A	; 58
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	0e 94 ab 07 	call	0xf56	; 0xf56 <_ZN7OneWire12reset_searchEv>
	delay(250);
     8ac:	6a ef       	ldi	r22, 0xFA	; 250
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <delay>
	ds.search(addr);
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	be 01       	movw	r22, r28
     8bc:	63 5f       	subi	r22, 0xF3	; 243
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	8a e3       	ldi	r24, 0x3A	; 58
     8c2:	93 e0       	ldi	r25, 0x03	; 3
     8c4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_ZN7OneWire6searchEPhb>

	if (OneWire::crc8(addr, 7) != addr[7]) {
     8c8:	67 e0       	ldi	r22, 0x07	; 7
     8ca:	ce 01       	movw	r24, r28
     8cc:	0d 96       	adiw	r24, 0x0d	; 13
     8ce:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN7OneWire4crc8EPKhh>
     8d2:	9c 89       	ldd	r25, Y+20	; 0x14
     8d4:	89 13       	cpse	r24, r25
     8d6:	54 c0       	rjmp	.+168    	; 0x980 <__stack+0x81>
		return -1;
	}

	ds.reset();
     8d8:	8a e3       	ldi	r24, 0x3A	; 58
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN7OneWire5resetEv>
	ds.select(addr);
     8e0:	be 01       	movw	r22, r28
     8e2:	63 5f       	subi	r22, 0xF3	; 243
     8e4:	7f 4f       	sbci	r23, 0xFF	; 255
     8e6:	8a e3       	ldi	r24, 0x3A	; 58
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN7OneWire6selectEPKh>
	ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	64 e4       	ldi	r22, 0x44	; 68
     8f2:	8a e3       	ldi	r24, 0x3A	; 58
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire5writeEhh>
	
	delay(1000);     // maybe 750ms is enough, maybe not
     8fa:	68 ee       	ldi	r22, 0xE8	; 232
     8fc:	73 e0       	ldi	r23, 0x03	; 3
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <delay>
	
	ds.reset();
     906:	8a e3       	ldi	r24, 0x3A	; 58
     908:	93 e0       	ldi	r25, 0x03	; 3
     90a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN7OneWire5resetEv>
	ds.select(addr);
     90e:	be 01       	movw	r22, r28
     910:	63 5f       	subi	r22, 0xF3	; 243
     912:	7f 4f       	sbci	r23, 0xFF	; 255
     914:	8a e3       	ldi	r24, 0x3A	; 58
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 8c 07 	call	0xf18	; 0xf18 <_ZN7OneWire6selectEPKh>
	ds.write(0xBE);         // Read Scratchpad
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	6e eb       	ldi	r22, 0xBE	; 190
     920:	8a e3       	ldi	r24, 0x3A	; 58
     922:	93 e0       	ldi	r25, 0x03	; 3
     924:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire5writeEhh>
     928:	8e 01       	movw	r16, r28
     92a:	0f 5f       	subi	r16, 0xFF	; 255
     92c:	1f 4f       	sbci	r17, 0xFF	; 255
     92e:	7e 01       	movw	r14, r28
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	e8 0e       	add	r14, r24
     934:	f1 1c       	adc	r15, r1

	for ( i = 0; i < 9; i++) {           // we need 9 bytes
		data[i] = ds.read();
     936:	8a e3       	ldi	r24, 0x3A	; 58
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN7OneWire4readEv>
     93e:	f8 01       	movw	r30, r16
     940:	81 93       	st	Z+, r24
     942:	8f 01       	movw	r16, r30
	
	ds.reset();
	ds.select(addr);
	ds.write(0xBE);         // Read Scratchpad

	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     944:	ee 15       	cp	r30, r14
     946:	ff 05       	cpc	r31, r15
     948:	b1 f7       	brne	.-20     	; 0x936 <__stack+0x37>

	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
     94a:	69 81       	ldd	r22, Y+1	; 0x01
     94c:	7a 81       	ldd	r23, Y+2	; 0x02

	byte cfg = (data[4] & 0x60);
     94e:	8d 81       	ldd	r24, Y+5	; 0x05
     950:	80 76       	andi	r24, 0x60	; 96
	// at lower res, the low bits are undefined, so let's zero them
	if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
     952:	11 f4       	brne	.+4      	; 0x958 <__stack+0x59>
     954:	68 7f       	andi	r22, 0xF8	; 248
     956:	07 c0       	rjmp	.+14     	; 0x966 <__stack+0x67>
	else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
     958:	80 32       	cpi	r24, 0x20	; 32
     95a:	11 f4       	brne	.+4      	; 0x960 <__stack+0x61>
     95c:	6c 7f       	andi	r22, 0xFC	; 252
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
	else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
     960:	80 34       	cpi	r24, 0x40	; 64
     962:	09 f4       	brne	.+2      	; 0x966 <__stack+0x67>
     964:	6e 7f       	andi	r22, 0xFE	; 254
	
	celsius = (float)raw / 16.0;
     966:	07 2e       	mov	r0, r23
     968:	00 0c       	add	r0, r0
     96a:	88 0b       	sbc	r24, r24
     96c:	99 0b       	sbc	r25, r25
     96e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__floatsisf>
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	40 e8       	ldi	r20, 0x80	; 128
     978:	5d e3       	ldi	r21, 0x3D	; 61
     97a:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsf3>
	return celsius;
     97e:	04 c0       	rjmp	.+8      	; 0x988 <__stack+0x89>
	ds.reset_search();
	delay(250);
	ds.search(addr);

	if (OneWire::crc8(addr, 7) != addr[7]) {
		return -1;
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	9f eb       	ldi	r25, 0xBF	; 191
	else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
	else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
	
	celsius = (float)raw / 16.0;
	return celsius;
     988:	64 96       	adiw	r28, 0x14	; 20
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     9a2:	66 e0       	ldi	r22, 0x06	; 6
     9a4:	8a e3       	ldi	r24, 0x3A	; 58
     9a6:	93 e0       	ldi	r25, 0x03	; 3
     9a8:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <_ZN7OneWire5beginEh>

000009ac <_Z20TaskPHandTemperaturePv>:
}


// get pH and temp reading from sensors
void TaskPHandTemperature(void *pvParameters)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <_Z20TaskPHandTemperaturePv+0x6>
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
  (void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
     9b6:	0e 94 17 10 	call	0x202e	; 0x202e <xTaskGetTickCount>
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
	for (;;) // A Task shall never return or exit.
	{
		// Gets pH value
		phValue = calcPH() * 100;
     9be:	0e 94 79 08 	call	0x10f2	; 0x10f2 <_Z6calcPHv>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	48 ec       	ldi	r20, 0xC8	; 200
     9c8:	52 e4       	ldi	r21, 0x42	; 66
     9ca:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsf3>
     9ce:	0e 94 be 1a 	call	0x357c	; 0x357c <__fixsfsi>
     9d2:	60 93 75 03 	sts	0x0375, r22	; 0x800375 <phValue>
     9d6:	70 93 76 03 	sts	0x0376, r23	; 0x800376 <phValue+0x1>
     9da:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <phValue+0x2>
     9de:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <phValue+0x3>
		// Gets temperature value in Celsius
		tempValue = measureTemp() * 100;
     9e2:	0e 94 44 04 	call	0x888	; 0x888 <_Z11measureTempv>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	48 ec       	ldi	r20, 0xC8	; 200
     9ec:	52 e4       	ldi	r21, 0x42	; 66
     9ee:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsf3>
     9f2:	0e 94 be 1a 	call	0x357c	; 0x357c <__fixsfsi>
     9f6:	9b 01       	movw	r18, r22
     9f8:	70 93 74 03 	sts	0x0374, r23	; 0x800374 <tempValue+0x1>
     9fc:	60 93 73 03 	sts	0x0373, r22	; 0x800373 <tempValue>

		// RELAY LOGIC (switching on 0.5 C above and below temperature threshold)
		if (tempValue < (tempThreshold - 50)) {
     a00:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <tempThreshold>
     a04:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <tempThreshold+0x1>
     a08:	ac 01       	movw	r20, r24
     a0a:	42 53       	subi	r20, 0x32	; 50
     a0c:	51 09       	sbc	r21, r1
     a0e:	24 17       	cp	r18, r20
     a10:	35 07       	cpc	r19, r21
     a12:	14 f4       	brge	.+4      	; 0xa18 <_Z20TaskPHandTemperaturePv+0x6c>
			digitalWrite(relay, HIGH);
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	05 c0       	rjmp	.+10     	; 0xa22 <_Z20TaskPHandTemperaturePv+0x76>
		}
		else if (tempValue > (tempThreshold + 50)) {
     a18:	c2 96       	adiw	r24, 0x32	; 50
     a1a:	82 17       	cp	r24, r18
     a1c:	93 07       	cpc	r25, r19
     a1e:	24 f4       	brge	.+8      	; 0xa28 <_Z20TaskPHandTemperaturePv+0x7c>
			digitalWrite(relay, LOW);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
		}
    // check pH and temp every 5 min
    vTaskDelayUntil( &xLastWakeTime, 5000 / portTICK_PERIOD_MS );
     a28:	68 e3       	ldi	r22, 0x38	; 56
     a2a:	71 e0       	ldi	r23, 0x01	; 1
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	0e 94 3c 11 	call	0x2278	; 0x2278 <vTaskDelayUntil>
void TaskPHandTemperature(void *pvParameters)
{
  (void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
     a34:	c4 cf       	rjmp	.-120    	; 0x9be <_Z20TaskPHandTemperaturePv+0x12>

00000a36 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     a36:	61 15       	cp	r22, r1
     a38:	71 05       	cpc	r23, r1
     a3a:	79 f0       	breq	.+30     	; 0xa5a <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     a3c:	fb 01       	movw	r30, r22
     a3e:	01 90       	ld	r0, Z+
     a40:	00 20       	and	r0, r0
     a42:	e9 f7       	brne	.-6      	; 0xa3e <_ZN5Print5writeEPKc+0x8>
     a44:	31 97       	sbiw	r30, 0x01	; 1
     a46:	af 01       	movw	r20, r30
     a48:	46 1b       	sub	r20, r22
     a4a:	57 0b       	sbc	r21, r23
     a4c:	dc 01       	movw	r26, r24
     a4e:	ed 91       	ld	r30, X+
     a50:	fc 91       	ld	r31, X
     a52:	02 80       	ldd	r0, Z+2	; 0x02
     a54:	f3 81       	ldd	r31, Z+3	; 0x03
     a56:	e0 2d       	mov	r30, r0
     a58:	09 94       	ijmp
    }
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	08 95       	ret

00000a60 <_Z6setLED8LEDColor>:
LEDColor White = {255, 255, 255};
LEDColor Off = {0, 0, 0};


void setLED(LEDColor c)
{
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	00 d0       	rcall	.+0      	; 0xa66 <_Z6setLED8LEDColor+0x6>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <_Z6setLED8LEDColor+0x8>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <_Z6setLED8LEDColor+0xa>
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
     a6e:	49 83       	std	Y+1, r20	; 0x01
     a70:	5a 83       	std	Y+2, r21	; 0x02
     a72:	6b 83       	std	Y+3, r22	; 0x03
     a74:	7c 83       	std	Y+4, r23	; 0x04
     a76:	8d 83       	std	Y+5, r24	; 0x05
     a78:	9e 83       	std	Y+6, r25	; 0x06
	analogWrite(R_LED, c.r);
     a7a:	69 81       	ldd	r22, Y+1	; 0x01
     a7c:	7a 81       	ldd	r23, Y+2	; 0x02
     a7e:	8f e0       	ldi	r24, 0x0F	; 15
     a80:	0e 94 2b 20 	call	0x4056	; 0x4056 <analogWrite>
	analogWrite(G_LED, c.g);
     a84:	6b 81       	ldd	r22, Y+3	; 0x03
     a86:	7c 81       	ldd	r23, Y+4	; 0x04
     a88:	80 e1       	ldi	r24, 0x10	; 16
     a8a:	0e 94 2b 20 	call	0x4056	; 0x4056 <analogWrite>
	analogWrite(B_LED, c.b);
     a8e:	6d 81       	ldd	r22, Y+5	; 0x05
     a90:	7e 81       	ldd	r23, Y+6	; 0x06
     a92:	81 e1       	ldi	r24, 0x11	; 17
}
     a94:	26 96       	adiw	r28, 0x06	; 6
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28

void setLED(LEDColor c)
{
	analogWrite(R_LED, c.r);
	analogWrite(G_LED, c.g);
	analogWrite(B_LED, c.b);
     aa4:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <analogWrite>

00000aa8 <_Z15TaskColorSensorPv>:
// get Ammonia, Nitrite, and Nitrate reading from color sensor
void TaskColorSensor(void *pvParameters)
{
	(void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
     aa8:	0e 94 17 10 	call	0x202e	; 0x202e <xTaskGetTickCount>
				{
					while (findTestStrip(NITRITE));
					setLED(Blue);
					delay(1000);  // allow user to see LED and stop moving test strip
					
					nitriteValue = ScanColor(NITRITE) * 100;
     aac:	c4 e6       	ldi	r28, 0x64	; 100
	(void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
	{
		if ( xSemaphoreTake( xSerialSemaphoreColorSensor, ( TickType_t ) 100 ) == pdTRUE )
     aae:	64 e6       	ldi	r22, 0x64	; 100
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <xSerialSemaphoreColorSensor>
     ab6:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <xSerialSemaphoreColorSensor+0x1>
     aba:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <xQueueSemaphoreTake>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <_Z15TaskColorSensorPv+0x1c>
     ac2:	b0 c0       	rjmp	.+352    	; 0xc24 <_Z15TaskColorSensorPv+0x17c>
		{
			setLED(White);
     ac4:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <White>
     ac8:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <White+0x1>
     acc:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <White+0x2>
     ad0:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <White+0x3>
     ad4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <White+0x4>
     ad8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <White+0x5>
     adc:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
			switch (colorToRead)
     ae0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <colorToRead>
     ae4:	8e 34       	cpi	r24, 0x4E	; 78
     ae6:	61 f1       	breq	.+88     	; 0xb40 <_Z15TaskColorSensorPv+0x98>
     ae8:	8e 36       	cpi	r24, 0x6E	; 110
     aea:	09 f4       	brne	.+2      	; 0xaee <_Z15TaskColorSensorPv+0x46>
     aec:	4f c0       	rjmp	.+158    	; 0xb8c <_Z15TaskColorSensorPv+0xe4>
     aee:	81 34       	cpi	r24, 0x41	; 65
     af0:	09 f0       	breq	.+2      	; 0xaf4 <_Z15TaskColorSensorPv+0x4c>
     af2:	7f c0       	rjmp	.+254    	; 0xbf2 <_Z15TaskColorSensorPv+0x14a>
			{
				case 'A':
				{
					while (findTestStrip(AMMONIA));
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z13findTestStrip8ReadType>
     afa:	81 11       	cpse	r24, r1
     afc:	fb cf       	rjmp	.-10     	; 0xaf4 <_Z15TaskColorSensorPv+0x4c>
					setLED(Red);
     afe:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <Red>
     b02:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <Red+0x1>
     b06:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <Red+0x2>
     b0a:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <Red+0x3>
     b0e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Red+0x4>
     b12:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Red+0x5>
     b16:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
					delay(1000); // allow user to see LED and stop moving test strip
     b1a:	68 ee       	ldi	r22, 0xE8	; 232
     b1c:	73 e0       	ldi	r23, 0x03	; 3
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <delay>
					
					ammoniaValue = ScanColor(AMMONIA) * 100;
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 b0 03 	call	0x760	; 0x760 <_Z9ScanColor8ReadType>
     b2c:	c6 9f       	mul	r28, r22
     b2e:	90 01       	movw	r18, r0
     b30:	c7 9f       	mul	r28, r23
     b32:	30 0d       	add	r19, r0
     b34:	11 24       	eor	r1, r1
     b36:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <ammoniaValue+0x1>
     b3a:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <ammoniaValue>
					break;
     b3e:	59 c0       	rjmp	.+178    	; 0xbf2 <_Z15TaskColorSensorPv+0x14a>
				}
				case 'N':
				{
					while (findTestStrip(NITRITE));
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z13findTestStrip8ReadType>
     b46:	81 11       	cpse	r24, r1
     b48:	fb cf       	rjmp	.-10     	; 0xb40 <_Z15TaskColorSensorPv+0x98>
					setLED(Blue);
     b4a:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <Blue>
     b4e:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <Blue+0x1>
     b52:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <Blue+0x2>
     b56:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <Blue+0x3>
     b5a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <Blue+0x4>
     b5e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <Blue+0x5>
     b62:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
					delay(1000);  // allow user to see LED and stop moving test strip
     b66:	68 ee       	ldi	r22, 0xE8	; 232
     b68:	73 e0       	ldi	r23, 0x03	; 3
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <delay>
					
					nitriteValue = ScanColor(NITRITE) * 100;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	0e 94 b0 03 	call	0x760	; 0x760 <_Z9ScanColor8ReadType>
     b78:	c6 9f       	mul	r28, r22
     b7a:	90 01       	movw	r18, r0
     b7c:	c7 9f       	mul	r28, r23
     b7e:	30 0d       	add	r19, r0
     b80:	11 24       	eor	r1, r1
     b82:	30 93 6e 03 	sts	0x036E, r19	; 0x80036e <nitriteValue+0x1>
     b86:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <nitriteValue>
					break;
     b8a:	33 c0       	rjmp	.+102    	; 0xbf2 <_Z15TaskColorSensorPv+0x14a>
				}
				case 'n':
				{
					while (findTestStrip(NITRATE));
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z13findTestStrip8ReadType>
     b92:	81 11       	cpse	r24, r1
     b94:	fb cf       	rjmp	.-10     	; 0xb8c <_Z15TaskColorSensorPv+0xe4>
					setLED(Green);
     b96:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <Green>
     b9a:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <Green+0x1>
     b9e:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <Green+0x2>
     ba2:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <Green+0x3>
     ba6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Green+0x4>
     baa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Green+0x5>
     bae:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
					delay(1000); // allow user to see LED and stop moving test strip
     bb2:	68 ee       	ldi	r22, 0xE8	; 232
     bb4:	73 e0       	ldi	r23, 0x03	; 3
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <delay>

					nitrateValue = ScanColor(NITRATE) * 100;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 b0 03 	call	0x760	; 0x760 <_Z9ScanColor8ReadType>
     bc4:	c6 9f       	mul	r28, r22
     bc6:	90 01       	movw	r18, r0
     bc8:	c7 9f       	mul	r28, r23
     bca:	30 0d       	add	r19, r0
     bcc:	11 24       	eor	r1, r1
     bce:	30 93 70 03 	sts	0x0370, r19	; 0x800370 <nitrateValue+0x1>
     bd2:	20 93 6f 03 	sts	0x036F, r18	; 0x80036f <nitrateValue>
					
					setLED(Off);
     bd6:	40 91 79 03 	lds	r20, 0x0379	; 0x800379 <Off>
     bda:	50 91 7a 03 	lds	r21, 0x037A	; 0x80037a <Off+0x1>
     bde:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <Off+0x2>
     be2:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <Off+0x3>
     be6:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Off+0x4>
     bea:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Off+0x5>
     bee:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
					break;
				}
			}
			setLED(Off);	  
     bf2:	40 91 79 03 	lds	r20, 0x0379	; 0x800379 <Off>
     bf6:	50 91 7a 03 	lds	r21, 0x037A	; 0x80037a <Off+0x1>
     bfa:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <Off+0x2>
     bfe:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <Off+0x3>
     c02:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Off+0x4>
     c06:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Off+0x5>
     c0a:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z6setLED8LEDColor>
			xSemaphoreGive( xSerialSemaphoreColorSensor );
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <xSerialSemaphoreColorSensor>
     c1c:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <xSerialSemaphoreColorSensor+0x1>
     c20:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xQueueGenericSend>
		}
		vTaskDelay(1); // 1 tick delay between reads for stability*/
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 74 11 	call	0x22e8	; 0x22e8 <vTaskDelay>
void TaskColorSensor(void *pvParameters)
{
	(void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
     c2c:	40 cf       	rjmp	.-384    	; 0xaae <_Z15TaskColorSensorPv+0x6>

00000c2e <_Z8setupLEDv>:
}

void setupLED()
{
	pinMode(R_LED, OUTPUT);
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	8f e0       	ldi	r24, 0x0F	; 15
     c32:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	pinMode(G_LED, OUTPUT);
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	80 e1       	ldi	r24, 0x10	; 16
     c3a:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	pinMode(B_LED, OUTPUT);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	81 e1       	ldi	r24, 0x11	; 17
     c42:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	setLED(Off);
     c46:	40 91 79 03 	lds	r20, 0x0379	; 0x800379 <Off>
     c4a:	50 91 7a 03 	lds	r21, 0x037A	; 0x80037a <Off+0x1>
     c4e:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <Off+0x2>
     c52:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <Off+0x3>
     c56:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <Off+0x4>
     c5a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <Off+0x5>
     c5e:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_Z6setLED8LEDColor>

00000c62 <setup>:
TaskHandle_t xPHandTemperature;

SoftwareSerial serial(rxPin, txPin);

// the setup function runs once when you press reset or power the board
void setup() {  
     c62:	ef 92       	push	r14
     c64:	ff 92       	push	r15
     c66:	0f 93       	push	r16
	// initialize serial communication at 115200 bits per second:
	serial.begin(115200);
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	52 ec       	ldi	r21, 0xC2	; 194
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	88 e4       	ldi	r24, 0x48	; 72
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0e 94 4c 19 	call	0x3298	; 0x3298 <_ZN14SoftwareSerial5beginEl>
	pinMode(wifiRst, OUTPUT);
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	8a e0       	ldi	r24, 0x0A	; 10
     c7c:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	pinMode(relay, OUTPUT);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	digitalWrite(relay, HIGH);
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     c90:	26 e0       	ldi	r18, 0x06	; 6
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	52 ec       	ldi	r21, 0xC2	; 194
     c96:	61 e0       	ldi	r22, 0x01	; 1
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	86 e4       	ldi	r24, 0x46	; 70
     c9c:	94 e0       	ldi	r25, 0x04	; 4
     c9e:	0e 94 ef 1c 	call	0x39de	; 0x39de <_ZN14HardwareSerial5beginEmh>
	while (!serial) {
		; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
	}
  
	// drive Wifi Enable pin High
	digitalWrite(wifiRst, HIGH);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
	// load test strip color data and initialize indicator LED
	setupCS();
     caa:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z7setupCSv>
	setupLED();
     cae:	0e 94 17 06 	call	0xc2e	; 0xc2e <_Z8setupLEDv>
 
	// create interrupt to be triggered by Wifi module
	//attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
	
	if (xSerialSemaphoreColorSensor == NULL)
     cb2:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <xSerialSemaphoreColorSensor>
     cb6:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <xSerialSemaphoreColorSensor+0x1>
     cba:	89 2b       	or	r24, r25
     cbc:	91 f4       	brne	.+36     	; 0xce2 <setup+0x80>
	{
		vSemaphoreCreateBinary(xSerialSemaphoreColorSensor);		
     cbe:	43 e0       	ldi	r20, 0x03	; 3
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <xQueueGenericCreate>
     cc8:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <xSerialSemaphoreColorSensor+0x1>
     ccc:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <xSerialSemaphoreColorSensor>
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	39 f0       	breq	.+14     	; 0xce2 <setup+0x80>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xQueueGenericSend>
	TaskColorSensor
	,  (const portCHAR *)"ColorSensor"
	,  128
	,  NULL
	,  2
	,  &xColorSensor ); 
     ce2:	89 e6       	ldi	r24, 0x69	; 105
     ce4:	e8 2e       	mov	r14, r24
     ce6:	83 e0       	ldi	r24, 0x03	; 3
     ce8:	f8 2e       	mov	r15, r24
     cea:	02 e0       	ldi	r16, 0x02	; 2
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	66 eb       	ldi	r22, 0xB6	; 182
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	84 e5       	ldi	r24, 0x54	; 84
     cfa:	95 e0       	ldi	r25, 0x05	; 5
     cfc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskCreate>
	TaskPHandTemperature
	,  (const portCHAR *) "PHandTemperature"
	,  128
	,  NULL
	,  2
	,  &xPHandTemperature );
     d00:	97 e6       	ldi	r25, 0x67	; 103
     d02:	e9 2e       	mov	r14, r25
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	f9 2e       	mov	r15, r25
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e8       	ldi	r20, 0x80	; 128
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	62 ec       	ldi	r22, 0xC2	; 194
     d12:	71 e0       	ldi	r23, 0x01	; 1
     d14:	86 ed       	ldi	r24, 0xD6	; 214
     d16:	94 e0       	ldi	r25, 0x04	; 4
     d18:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskCreate>

	// Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
	vTaskStartScheduler();
}
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
	,  NULL
	,  2
	,  &xPHandTemperature );

	// Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
	vTaskStartScheduler();
     d22:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <vTaskStartScheduler>

00000d26 <loop>:
}

void loop()
{
     d26:	08 95       	ret

00000d28 <_GLOBAL__sub_I_Red>:
SemaphoreHandle_t xSerialSemaphoreColorSensor;

TaskHandle_t xColorSensor;
TaskHandle_t xPHandTemperature;

SoftwareSerial serial(rxPin, txPin);
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	43 e0       	ldi	r20, 0x03	; 3
     d2c:	62 e0       	ldi	r22, 0x02	; 2
     d2e:	88 e4       	ldi	r24, 0x48	; 72
     d30:	93 e0       	ldi	r25, 0x03	; 3
     d32:	0c 94 21 19 	jmp	0x3242	; 0x3242 <_ZN14SoftwareSerialC1Ehhb>

00000d36 <_GLOBAL__sub_D_Red>:
     d36:	88 e4       	ldi	r24, 0x48	; 72
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <_ZN14SoftwareSerialD1Ev>

00000d3e <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	fc 01       	movw	r30, r24
     d4a:	f0 80       	ld	r15, Z
     d4c:	c1 81       	ldd	r28, Z+1	; 0x01
     d4e:	d2 81       	ldd	r29, Z+2	; 0x02
     d50:	f8 94       	cli
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	0f 2d       	mov	r16, r15
     d56:	00 95       	com	r16
     d58:	80 23       	and	r24, r16
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	78 94       	sei
     d5e:	1d e7       	ldi	r17, 0x7D	; 125
     d60:	11 50       	subi	r17, 0x01	; 1
     d62:	29 f1       	breq	.+74     	; 0xdae <_ZN7OneWire5resetEv+0x70>
     d64:	82 e0       	ldi	r24, 0x02	; 2
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     d6c:	88 81       	ld	r24, Y
     d6e:	8f 21       	and	r24, r15
     d70:	b9 f3       	breq	.-18     	; 0xd60 <_ZN7OneWire5resetEv+0x22>
     d72:	f8 94       	cli
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	80 23       	and	r24, r16
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	8f 29       	or	r24, r15
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	78 94       	sei
     d82:	80 ee       	ldi	r24, 0xE0	; 224
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     d8a:	f8 94       	cli
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	08 23       	and	r16, r24
     d90:	09 83       	std	Y+1, r16	; 0x01
     d92:	86 e4       	ldi	r24, 0x46	; 70
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     d9a:	88 81       	ld	r24, Y
     d9c:	f8 22       	and	r15, r24
     d9e:	11 e0       	ldi	r17, 0x01	; 1
     da0:	09 f0       	breq	.+2      	; 0xda4 <_ZN7OneWire5resetEv+0x66>
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	78 94       	sei
     da6:	8a e9       	ldi	r24, 0x9A	; 154
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     dae:	81 2f       	mov	r24, r17
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	08 95       	ret

00000dbc <_ZN7OneWire9write_bitEh>:
     dbc:	1f 93       	push	r17
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	fc 01       	movw	r30, r24
     dc4:	10 81       	ld	r17, Z
     dc6:	c1 81       	ldd	r28, Z+1	; 0x01
     dc8:	d2 81       	ldd	r29, Z+2	; 0x02
     dca:	81 2f       	mov	r24, r17
     dcc:	80 95       	com	r24
     dce:	60 ff       	sbrs	r22, 0
     dd0:	12 c0       	rjmp	.+36     	; 0xdf6 <_ZN7OneWire9write_bitEh+0x3a>
     dd2:	f8 94       	cli
     dd4:	9a 81       	ldd	r25, Y+2	; 0x02
     dd6:	89 23       	and	r24, r25
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	81 2b       	or	r24, r17
     dde:	89 83       	std	Y+1, r24	; 0x01
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	18 2b       	or	r17, r24
     dec:	1a 83       	std	Y+2, r17	; 0x02
     dee:	78 94       	sei
     df0:	87 e3       	ldi	r24, 0x37	; 55
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	11 c0       	rjmp	.+34     	; 0xe18 <_ZN7OneWire9write_bitEh+0x5c>
     df6:	f8 94       	cli
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	89 23       	and	r24, r25
     dfc:	8a 83       	std	Y+2, r24	; 0x02
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	81 2b       	or	r24, r17
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	81 e4       	ldi	r24, 0x41	; 65
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	18 2b       	or	r17, r24
     e10:	1a 83       	std	Y+2, r17	; 0x02
     e12:	78 94       	sei
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <delayMicroseconds>

00000e22 <_ZN7OneWire8read_bitEv>:
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	fc 01       	movw	r30, r24
     e2c:	00 81       	ld	r16, Z
     e2e:	c1 81       	ldd	r28, Z+1	; 0x01
     e30:	d2 81       	ldd	r29, Z+2	; 0x02
     e32:	f8 94       	cli
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	80 2b       	or	r24, r16
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	10 2f       	mov	r17, r16
     e3e:	10 95       	com	r17
     e40:	81 23       	and	r24, r17
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	18 23       	and	r17, r24
     e50:	19 83       	std	Y+1, r17	; 0x01
     e52:	8a e0       	ldi	r24, 0x0A	; 10
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     e5a:	c8 81       	ld	r28, Y
     e5c:	78 94       	sei
     e5e:	85 e3       	ldi	r24, 0x35	; 53
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <delayMicroseconds>
     e66:	c0 23       	and	r28, r16
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <_ZN7OneWire8read_bitEv+0x4c>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <_ZN7OneWire5writeEhh>:
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ec 01       	movw	r28, r24
     e88:	d6 2e       	mov	r13, r22
     e8a:	e4 2e       	mov	r14, r20
     e8c:	08 e0       	ldi	r16, 0x08	; 8
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	ff 24       	eor	r15, r15
     e92:	f3 94       	inc	r15
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	8d 2d       	mov	r24, r13
     e98:	8f 21       	and	r24, r15
     e9a:	09 f4       	brne	.+2      	; 0xe9e <_ZN7OneWire5writeEhh+0x26>
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	ce 01       	movw	r24, r28
     ea0:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN7OneWire9write_bitEh>
     ea4:	ff 0c       	add	r15, r15
     ea6:	01 50       	subi	r16, 0x01	; 1
     ea8:	11 09       	sbc	r17, r1
     eaa:	a1 f7       	brne	.-24     	; 0xe94 <_ZN7OneWire5writeEhh+0x1c>
     eac:	e1 10       	cpse	r14, r1
     eae:	10 c0       	rjmp	.+32     	; 0xed0 <_ZN7OneWire5writeEhh+0x58>
     eb0:	f8 94       	cli
     eb2:	e9 81       	ldd	r30, Y+1	; 0x01
     eb4:	fa 81       	ldd	r31, Y+2	; 0x02
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	88 81       	ld	r24, Y
     eba:	80 95       	com	r24
     ebc:	89 23       	and	r24, r25
     ebe:	81 83       	std	Z+1, r24	; 0x01
     ec0:	e9 81       	ldd	r30, Y+1	; 0x01
     ec2:	fa 81       	ldd	r31, Y+2	; 0x02
     ec4:	92 81       	ldd	r25, Z+2	; 0x02
     ec6:	88 81       	ld	r24, Y
     ec8:	80 95       	com	r24
     eca:	89 23       	and	r24, r25
     ecc:	82 83       	std	Z+2, r24	; 0x02
     ece:	78 94       	sei
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	1f 91       	pop	r17
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	08 95       	ret

00000ee0 <_ZN7OneWire4readEv>:
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	7c 01       	movw	r14, r24
     eee:	08 e0       	ldi	r16, 0x08	; 8
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	c0 e0       	ldi	r28, 0x00	; 0
     ef4:	d1 e0       	ldi	r29, 0x01	; 1
     ef6:	c7 01       	movw	r24, r14
     ef8:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN7OneWire8read_bitEv>
     efc:	81 11       	cpse	r24, r1
     efe:	cd 2b       	or	r28, r29
     f00:	dd 0f       	add	r29, r29
     f02:	01 50       	subi	r16, 0x01	; 1
     f04:	11 09       	sbc	r17, r1
     f06:	b9 f7       	brne	.-18     	; 0xef6 <_ZN7OneWire4readEv+0x16>
     f08:	8c 2f       	mov	r24, r28
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	08 95       	ret

00000f18 <_ZN7OneWire6selectEPKh>:
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	8c 01       	movw	r16, r24
     f26:	7b 01       	movw	r14, r22
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	65 e5       	ldi	r22, 0x55	; 85
     f2c:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire5writeEhh>
     f30:	e7 01       	movw	r28, r14
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	e8 0e       	add	r14, r24
     f36:	f1 1c       	adc	r15, r1
     f38:	69 91       	ld	r22, Y+
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	c8 01       	movw	r24, r16
     f3e:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire5writeEhh>
     f42:	ce 15       	cp	r28, r14
     f44:	df 05       	cpc	r29, r15
     f46:	c1 f7       	brne	.-16     	; 0xf38 <_ZN7OneWire6selectEPKh+0x20>
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	08 95       	ret

00000f56 <_ZN7OneWire12reset_searchEv>:
     f56:	fc 01       	movw	r30, r24
     f58:	13 86       	std	Z+11, r1	; 0x0b
     f5a:	15 86       	std	Z+13, r1	; 0x0d
     f5c:	14 86       	std	Z+12, r1	; 0x0c
     f5e:	dc 01       	movw	r26, r24
     f60:	1b 96       	adiw	r26, 0x0b	; 11
     f62:	33 96       	adiw	r30, 0x03	; 3
     f64:	1e 92       	st	-X, r1
     f66:	ae 17       	cp	r26, r30
     f68:	bf 07       	cpc	r27, r31
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <_ZN7OneWire12reset_searchEv+0xe>
     f6c:	08 95       	ret

00000f6e <_ZN7OneWire5beginEh>:
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ec 01       	movw	r28, r24
     f76:	16 2f       	mov	r17, r22
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	81 2f       	mov	r24, r17
     f7c:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
     f80:	61 2f       	mov	r22, r17
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	fb 01       	movw	r30, r22
     f86:	ea 53       	subi	r30, 0x3A	; 58
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	e4 91       	lpm	r30, Z
     f8c:	e8 83       	st	Y, r30
     f8e:	fb 01       	movw	r30, r22
     f90:	e6 52       	subi	r30, 0x26	; 38
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	e4 91       	lpm	r30, Z
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	e2 51       	subi	r30, 0x12	; 18
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	85 91       	lpm	r24, Z+
     fa2:	94 91       	lpm	r25, Z
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	ce 01       	movw	r24, r28
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	1f 91       	pop	r17
     fb0:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <_ZN7OneWire12reset_searchEv>

00000fb4 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     fb4:	bf 92       	push	r11
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	ec 01       	movw	r28, r24
     fc8:	6b 01       	movw	r12, r22
     fca:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
     fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fce:	81 11       	cpse	r24, r1
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <_ZN7OneWire6searchEPhb+0x28>
      // 1-Wire reset
      if (!reset()) {
     fd2:	ce 01       	movw	r24, r28
     fd4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <_ZN7OneWire5resetEv>
     fd8:	81 11       	cpse	r24, r1
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <_ZN7OneWire6searchEPhb+0x32>
         // reset the search
         LastDiscrepancy = 0;
     fdc:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = false;
     fde:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
     fe0:	1c 86       	std	Y+12, r1	; 0x0c
         return false;
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	64 c0       	rjmp	.+200    	; 0x10ae <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
     fe6:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
     fe8:	11 23       	and	r17, r17
     fea:	11 f0       	breq	.+4      	; 0xff0 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
     fec:	60 ef       	ldi	r22, 0xF0	; 240
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
     ff0:	6c ee       	ldi	r22, 0xEC	; 236
     ff2:	ce 01       	movw	r24, r28
     ff4:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
     ff8:	01 e0       	ldi	r16, 0x01	; 1
     ffa:	e1 2c       	mov	r14, r1
     ffc:	b1 2c       	mov	r11, r1
     ffe:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1000:	ce 01       	movw	r24, r28
    1002:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN7OneWire8read_bitEv>
    1006:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    1008:	ce 01       	movw	r24, r28
    100a:	0e 94 11 07 	call	0xe22	; 0xe22 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	f9 12       	cpse	r15, r25
    1012:	03 c0       	rjmp	.+6      	; 0x101a <_ZN7OneWire6searchEPhb+0x66>
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	b1 f4       	brne	.+44     	; 0x1044 <_ZN7OneWire6searchEPhb+0x90>
    1018:	34 c0       	rjmp	.+104    	; 0x1082 <_ZN7OneWire6searchEPhb+0xce>
    101a:	2e 2d       	mov	r18, r14
    101c:	30 e0       	ldi	r19, 0x00	; 0
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    101e:	f8 12       	cpse	r15, r24
    1020:	1b c0       	rjmp	.+54     	; 0x1058 <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    1022:	8b 85       	ldd	r24, Y+11	; 0x0b
    1024:	18 17       	cp	r17, r24
    1026:	38 f4       	brcc	.+14     	; 0x1036 <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    1028:	fe 01       	movw	r30, r28
    102a:	e2 0f       	add	r30, r18
    102c:	f3 1f       	adc	r31, r19
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	80 23       	and	r24, r16
    1032:	41 f4       	brne	.+16     	; 0x1044 <_ZN7OneWire6searchEPhb+0x90>
    1034:	02 c0       	rjmp	.+4      	; 0x103a <_ZN7OneWire6searchEPhb+0x86>
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1036:	18 17       	cp	r17, r24
    1038:	29 f0       	breq	.+10     	; 0x1044 <_ZN7OneWire6searchEPhb+0x90>
    103a:	f1 2c       	mov	r15, r1
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    103c:	19 30       	cpi	r17, 0x09	; 9
    103e:	58 f4       	brcc	.+22     	; 0x1056 <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
    1040:	1c 87       	std	Y+12, r17	; 0x0c
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1044:	fe 01       	movw	r30, r28
    1046:	ee 0d       	add	r30, r14
    1048:	f1 1d       	adc	r31, r1
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	80 2b       	or	r24, r16
    104e:	83 83       	std	Z+3, r24	; 0x03
    1050:	ff 24       	eor	r15, r15
    1052:	f3 94       	inc	r15
    1054:	09 c0       	rjmp	.+18     	; 0x1068 <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    1056:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    1058:	fe 01       	movw	r30, r28
    105a:	e2 0f       	add	r30, r18
    105c:	f3 1f       	adc	r31, r19
    105e:	93 81       	ldd	r25, Z+3	; 0x03
    1060:	80 2f       	mov	r24, r16
    1062:	80 95       	com	r24
    1064:	89 23       	and	r24, r25
    1066:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    1068:	6f 2d       	mov	r22, r15
    106a:	ce 01       	movw	r24, r28
    106c:	0e 94 de 06 	call	0xdbc	; 0xdbc <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1070:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    1072:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    1074:	11 f4       	brne	.+4      	; 0x107a <_ZN7OneWire6searchEPhb+0xc6>
                rom_byte_number++;
    1076:	e3 94       	inc	r14
                rom_byte_mask = 1;
    1078:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    107a:	87 e0       	ldi	r24, 0x07	; 7
    107c:	8e 15       	cp	r24, r14
    107e:	08 f0       	brcs	.+2      	; 0x1082 <_ZN7OneWire6searchEPhb+0xce>
    1080:	bf cf       	rjmp	.-130    	; 0x1000 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    1082:	11 34       	cpi	r17, 0x41	; 65
    1084:	08 f4       	brcc	.+2      	; 0x1088 <_ZN7OneWire6searchEPhb+0xd4>
    1086:	aa cf       	rjmp	.-172    	; 0xfdc <_ZN7OneWire6searchEPhb+0x28>
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1088:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0) {
    108a:	b1 10       	cpse	r11, r1
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = true;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 23       	and	r24, r24
    1096:	09 f4       	brne	.+2      	; 0x109a <_ZN7OneWire6searchEPhb+0xe6>
    1098:	a1 cf       	rjmp	.-190    	; 0xfdc <_ZN7OneWire6searchEPhb+0x28>
    109a:	de 01       	movw	r26, r28
    109c:	13 96       	adiw	r26, 0x03	; 3
    109e:	f6 01       	movw	r30, r12
    10a0:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    10a2:	8d 91       	ld	r24, X+
    10a4:	81 93       	st	Z+, r24
    10a6:	ca 17       	cp	r28, r26
    10a8:	db 07       	cpc	r29, r27
    10aa:	d9 f7       	brne	.-10     	; 0x10a2 <_ZN7OneWire6searchEPhb+0xee>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	08 95       	ret

000010c2 <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    10c2:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    10c4:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    10c6:	61 50       	subi	r22, 0x01	; 1
    10c8:	98 f0       	brcs	.+38     	; 0x10f0 <_ZN7OneWire4crc8EPKhh+0x2e>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    10ca:	2d 91       	ld	r18, X+
    10cc:	98 2f       	mov	r25, r24
    10ce:	92 27       	eor	r25, r18
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    10d0:	e9 2f       	mov	r30, r25
    10d2:	ef 70       	andi	r30, 0x0F	; 15
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	ee 56       	subi	r30, 0x6E	; 110
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	24 91       	lpm	r18, Z
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    10dc:	92 95       	swap	r25
    10de:	9f 70       	andi	r25, 0x0F	; 15
    10e0:	e9 2f       	mov	r30, r25
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	ee 55       	subi	r30, 0x5E	; 94
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	e4 91       	lpm	r30, Z
    10ea:	82 2f       	mov	r24, r18
    10ec:	8e 27       	eor	r24, r30
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    10ee:	eb cf       	rjmp	.-42     	; 0x10c6 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    10f0:	08 95       	ret

000010f2 <_Z6calcPHv>:
float neutralVoltage = 404.0;
float acidVoltage = 166.0;


float calcPH()
{
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
	float voltage = analogRead(PH_PIN);
    1106:	8e e0       	ldi	r24, 0x0E	; 14
    1108:	0e 94 0e 20 	call	0x401c	; 0x401c <analogRead>
    110c:	ec 01       	movw	r28, r24
	float slope = (7.0 - 4.0) / (neutralVoltage - acidVoltage);
    110e:	80 90 39 01 	lds	r8, 0x0139	; 0x800139 <neutralVoltage>
    1112:	90 90 3a 01 	lds	r9, 0x013A	; 0x80013a <neutralVoltage+0x1>
    1116:	a0 90 3b 01 	lds	r10, 0x013B	; 0x80013b <neutralVoltage+0x2>
    111a:	b0 90 3c 01 	lds	r11, 0x013C	; 0x80013c <neutralVoltage+0x3>
    111e:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <acidVoltage>
    1122:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <acidVoltage+0x1>
    1126:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <acidVoltage+0x2>
    112a:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <acidVoltage+0x3>
    112e:	c5 01       	movw	r24, r10
    1130:	b4 01       	movw	r22, r8
    1132:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__subsf3>
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	80 e4       	ldi	r24, 0x40	; 64
    1140:	90 e4       	ldi	r25, 0x40	; 64
    1142:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__divsf3>
    1146:	6b 01       	movw	r12, r22
    1148:	7c 01       	movw	r14, r24
	float intercept = 7.0 - (slope * neutralVoltage);
	return (slope * voltage) + intercept;
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	c5 01       	movw	r24, r10
    1150:	b4 01       	movw	r22, r8
    1152:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsf3>
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	70 e0       	ldi	r23, 0x00	; 0
    115e:	80 ee       	ldi	r24, 0xE0	; 224
    1160:	90 e4       	ldi	r25, 0x40	; 64
    1162:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__subsf3>
    1166:	4b 01       	movw	r8, r22
    1168:	5c 01       	movw	r10, r24
    116a:	be 01       	movw	r22, r28
    116c:	dd 0f       	add	r29, r29
    116e:	88 0b       	sbc	r24, r24
    1170:	99 0b       	sbc	r25, r25
    1172:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__floatsisf>
    1176:	a7 01       	movw	r20, r14
    1178:	96 01       	movw	r18, r12
    117a:	0e 94 a6 1b 	call	0x374c	; 0x374c <__mulsf3>
    117e:	9b 01       	movw	r18, r22
    1180:	ac 01       	movw	r20, r24
    1182:	c5 01       	movw	r24, r10
    1184:	b4 01       	movw	r22, r8
    1186:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__addsf3>
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 90       	pop	r15
    1190:	ef 90       	pop	r14
    1192:	df 90       	pop	r13
    1194:	cf 90       	pop	r12
    1196:	bf 90       	pop	r11
    1198:	af 90       	pop	r10
    119a:	9f 90       	pop	r9
    119c:	8f 90       	pop	r8
    119e:	08 95       	ret

000011a0 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    11a6:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 be 22 	call	0x457c	; 0x457c <malloc>
    11b0:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    11b2:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    11b6:	20 97       	sbiw	r28, 0x00	; 0
    11b8:	11 f4       	brne	.+4      	; 0x11be <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    11ba:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    11be:	ce 01       	movw	r24, r28
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    if( pv )
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	51 f0       	breq	.+20     	; 0x11e2 <vPortFree+0x1c>
    11ce:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    11d0:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
        {
            free( pv );
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 56 23 	call	0x46ac	; 0x46ac <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    11de:	0c 94 cd 10 	jmp	0x219a	; 0x219a <xTaskResumeAll>
    }
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    11e8:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11ea:	03 96       	adiw	r24, 0x03	; 3
    11ec:	92 83       	std	Z+2, r25	; 0x02
    11ee:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    11f0:	2f ef       	ldi	r18, 0xFF	; 255
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	34 83       	std	Z+4, r19	; 0x04
    11f6:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11f8:	96 83       	std	Z+6, r25	; 0x06
    11fa:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11fc:	90 87       	std	Z+8, r25	; 0x08
    11fe:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1200:	10 82       	st	Z, r1
    1202:	08 95       	ret

00001204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1204:	fc 01       	movw	r30, r24
    1206:	11 86       	std	Z+9, r1	; 0x09
    1208:	10 86       	std	Z+8, r1	; 0x08
    120a:	08 95       	ret

0000120c <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	9c 01       	movw	r18, r24
    1212:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1214:	dc 01       	movw	r26, r24
    1216:	11 96       	adiw	r26, 0x01	; 1
    1218:	cd 91       	ld	r28, X+
    121a:	dc 91       	ld	r29, X
    121c:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    121e:	d3 83       	std	Z+3, r29	; 0x03
    1220:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	95 83       	std	Z+5, r25	; 0x05
    1228:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	dc 01       	movw	r26, r24
    1230:	13 96       	adiw	r26, 0x03	; 3
    1232:	7c 93       	st	X, r23
    1234:	6e 93       	st	-X, r22
    1236:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1238:	7d 83       	std	Y+5, r23	; 0x05
    123a:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    123c:	31 87       	std	Z+9, r19	; 0x09
    123e:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    1240:	f9 01       	movw	r30, r18
    1242:	80 81       	ld	r24, Z
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 83       	st	Z, r24
}
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	08 95       	ret

0000124e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	8c 01       	movw	r16, r24
    1258:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    125e:	8f 3f       	cpi	r24, 0xFF	; 255
    1260:	2f ef       	ldi	r18, 0xFF	; 255
    1262:	92 07       	cpc	r25, r18
    1264:	21 f4       	brne	.+8      	; 0x126e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1266:	e8 01       	movw	r28, r16
    1268:	af 81       	ldd	r26, Y+7	; 0x07
    126a:	b8 85       	ldd	r27, Y+8	; 0x08
    126c:	0e c0       	rjmp	.+28     	; 0x128a <vListInsert+0x3c>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    126e:	d8 01       	movw	r26, r16
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	2d 91       	ld	r18, X+
    1276:	3c 91       	ld	r19, X
    1278:	13 97       	sbiw	r26, 0x03	; 3
    127a:	e9 01       	movw	r28, r18
    127c:	48 81       	ld	r20, Y
    127e:	59 81       	ldd	r21, Y+1	; 0x01
    1280:	84 17       	cp	r24, r20
    1282:	95 07       	cpc	r25, r21
    1284:	10 f0       	brcs	.+4      	; 0x128a <vListInsert+0x3c>
    1286:	d9 01       	movw	r26, r18
    1288:	f4 cf       	rjmp	.-24     	; 0x1272 <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	8d 91       	ld	r24, X+
    128e:	9c 91       	ld	r25, X
    1290:	13 97       	sbiw	r26, 0x03	; 3
    1292:	93 83       	std	Z+3, r25	; 0x03
    1294:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1296:	ec 01       	movw	r28, r24
    1298:	fd 83       	std	Y+5, r31	; 0x05
    129a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    129c:	b5 83       	std	Z+5, r27	; 0x05
    129e:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    12a0:	13 96       	adiw	r26, 0x03	; 3
    12a2:	fc 93       	st	X, r31
    12a4:	ee 93       	st	-X, r30
    12a6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    12a8:	11 87       	std	Z+9, r17	; 0x09
    12aa:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	80 83       	st	Z, r24
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    12c4:	a0 85       	ldd	r26, Z+8	; 0x08
    12c6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	24 81       	ldd	r18, Z+4	; 0x04
    12ce:	35 81       	ldd	r19, Z+5	; 0x05
    12d0:	ec 01       	movw	r28, r24
    12d2:	3d 83       	std	Y+5, r19	; 0x05
    12d4:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    12d6:	c4 81       	ldd	r28, Z+4	; 0x04
    12d8:	d5 81       	ldd	r29, Z+5	; 0x05
    12da:	9b 83       	std	Y+3, r25	; 0x03
    12dc:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	8d 91       	ld	r24, X+
    12e2:	9c 91       	ld	r25, X
    12e4:	12 97       	sbiw	r26, 0x02	; 2
    12e6:	e8 17       	cp	r30, r24
    12e8:	f9 07       	cpc	r31, r25
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    12ec:	12 96       	adiw	r26, 0x02	; 2
    12ee:	dc 93       	st	X, r29
    12f0:	ce 93       	st	-X, r28
    12f2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    12f4:	11 86       	std	Z+9, r1	; 0x09
    12f6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    12f8:	8c 91       	ld	r24, X
    12fa:	81 50       	subi	r24, 0x01	; 1
    12fc:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    12fe:	8c 91       	ld	r24, X
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1306:	31 e1       	ldi	r19, 0x11	; 17
    1308:	fc 01       	movw	r30, r24
    130a:	30 83       	st	Z, r19
    130c:	31 97       	sbiw	r30, 0x01	; 1
    130e:	22 e2       	ldi	r18, 0x22	; 34
    1310:	20 83       	st	Z, r18
    1312:	31 97       	sbiw	r30, 0x01	; 1
    1314:	a3 e3       	ldi	r26, 0x33	; 51
    1316:	a0 83       	st	Z, r26
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	60 83       	st	Z, r22
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	70 83       	st	Z, r23
    1320:	31 97       	sbiw	r30, 0x01	; 1
    1322:	10 82       	st	Z, r1
    1324:	31 97       	sbiw	r30, 0x01	; 1
    1326:	60 e8       	ldi	r22, 0x80	; 128
    1328:	60 83       	st	Z, r22
    132a:	31 97       	sbiw	r30, 0x01	; 1
    132c:	10 82       	st	Z, r1
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	62 e0       	ldi	r22, 0x02	; 2
    1332:	60 83       	st	Z, r22
    1334:	31 97       	sbiw	r30, 0x01	; 1
    1336:	63 e0       	ldi	r22, 0x03	; 3
    1338:	60 83       	st	Z, r22
    133a:	31 97       	sbiw	r30, 0x01	; 1
    133c:	64 e0       	ldi	r22, 0x04	; 4
    133e:	60 83       	st	Z, r22
    1340:	31 97       	sbiw	r30, 0x01	; 1
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	60 83       	st	Z, r22
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	66 e0       	ldi	r22, 0x06	; 6
    134a:	60 83       	st	Z, r22
    134c:	31 97       	sbiw	r30, 0x01	; 1
    134e:	67 e0       	ldi	r22, 0x07	; 7
    1350:	60 83       	st	Z, r22
    1352:	31 97       	sbiw	r30, 0x01	; 1
    1354:	68 e0       	ldi	r22, 0x08	; 8
    1356:	60 83       	st	Z, r22
    1358:	31 97       	sbiw	r30, 0x01	; 1
    135a:	69 e0       	ldi	r22, 0x09	; 9
    135c:	60 83       	st	Z, r22
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	60 e1       	ldi	r22, 0x10	; 16
    1362:	60 83       	st	Z, r22
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	30 83       	st	Z, r19
    1368:	31 97       	sbiw	r30, 0x01	; 1
    136a:	32 e1       	ldi	r19, 0x12	; 18
    136c:	30 83       	st	Z, r19
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	33 e1       	ldi	r19, 0x13	; 19
    1372:	30 83       	st	Z, r19
    1374:	31 97       	sbiw	r30, 0x01	; 1
    1376:	34 e1       	ldi	r19, 0x14	; 20
    1378:	30 83       	st	Z, r19
    137a:	31 97       	sbiw	r30, 0x01	; 1
    137c:	35 e1       	ldi	r19, 0x15	; 21
    137e:	30 83       	st	Z, r19
    1380:	31 97       	sbiw	r30, 0x01	; 1
    1382:	36 e1       	ldi	r19, 0x16	; 22
    1384:	30 83       	st	Z, r19
    1386:	31 97       	sbiw	r30, 0x01	; 1
    1388:	37 e1       	ldi	r19, 0x17	; 23
    138a:	30 83       	st	Z, r19
    138c:	31 97       	sbiw	r30, 0x01	; 1
    138e:	38 e1       	ldi	r19, 0x18	; 24
    1390:	30 83       	st	Z, r19
    1392:	31 97       	sbiw	r30, 0x01	; 1
    1394:	39 e1       	ldi	r19, 0x19	; 25
    1396:	30 83       	st	Z, r19
    1398:	31 97       	sbiw	r30, 0x01	; 1
    139a:	30 e2       	ldi	r19, 0x20	; 32
    139c:	30 83       	st	Z, r19
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	31 e2       	ldi	r19, 0x21	; 33
    13a2:	30 83       	st	Z, r19
    13a4:	31 97       	sbiw	r30, 0x01	; 1
    13a6:	20 83       	st	Z, r18
    13a8:	31 97       	sbiw	r30, 0x01	; 1
    13aa:	23 e2       	ldi	r18, 0x23	; 35
    13ac:	20 83       	st	Z, r18
    13ae:	31 97       	sbiw	r30, 0x01	; 1
    13b0:	40 83       	st	Z, r20
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	50 83       	st	Z, r21
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	26 e2       	ldi	r18, 0x26	; 38
    13ba:	20 83       	st	Z, r18
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	27 e2       	ldi	r18, 0x27	; 39
    13c0:	20 83       	st	Z, r18
    13c2:	31 97       	sbiw	r30, 0x01	; 1
    13c4:	28 e2       	ldi	r18, 0x28	; 40
    13c6:	20 83       	st	Z, r18
    13c8:	31 97       	sbiw	r30, 0x01	; 1
    13ca:	29 e2       	ldi	r18, 0x29	; 41
    13cc:	20 83       	st	Z, r18
    13ce:	31 97       	sbiw	r30, 0x01	; 1
    13d0:	20 e3       	ldi	r18, 0x30	; 48
    13d2:	20 83       	st	Z, r18
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	21 e3       	ldi	r18, 0x31	; 49
    13d8:	20 83       	st	Z, r18
    13da:	86 97       	sbiw	r24, 0x26	; 38
    13dc:	08 95       	ret

000013de <xPortStartScheduler>:
    13de:	a8 95       	wdr
    13e0:	90 ec       	ldi	r25, 0xC0	; 192
    13e2:	88 e1       	ldi	r24, 0x18	; 24
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	a8 95       	wdr
    13ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    13f4:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    13f8:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    13fc:	cd 91       	ld	r28, X+
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	dd 91       	ld	r29, X+
    1402:	de bf       	out	0x3e, r29	; 62
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	bf 90       	pop	r11
    142e:	af 90       	pop	r10
    1430:	9f 90       	pop	r9
    1432:	8f 90       	pop	r8
    1434:	7f 90       	pop	r7
    1436:	6f 90       	pop	r6
    1438:	5f 90       	pop	r5
    143a:	4f 90       	pop	r4
    143c:	3f 90       	pop	r3
    143e:	2f 90       	pop	r2
    1440:	1f 90       	pop	r1
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	08 95       	ret
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret

0000144e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	1f 92       	push	r1
    1458:	11 24       	eor	r1, r1
    145a:	2f 92       	push	r2
    145c:	3f 92       	push	r3
    145e:	4f 92       	push	r4
    1460:	5f 92       	push	r5
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
    1496:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    149a:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    149e:	0d b6       	in	r0, 0x3d	; 61
    14a0:	0d 92       	st	X+, r0
    14a2:	0e b6       	in	r0, 0x3e	; 62
    14a4:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    14a6:	0e 94 89 11 	call	0x2312	; 0x2312 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    14aa:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    14ae:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    14b2:	cd 91       	ld	r28, X+
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	dd 91       	ld	r29, X+
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	ff 90       	pop	r15
    14dc:	ef 90       	pop	r14
    14de:	df 90       	pop	r13
    14e0:	cf 90       	pop	r12
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	9f 90       	pop	r9
    14e8:	8f 90       	pop	r8
    14ea:	7f 90       	pop	r7
    14ec:	6f 90       	pop	r6
    14ee:	5f 90       	pop	r5
    14f0:	4f 90       	pop	r4
    14f2:	3f 90       	pop	r3
    14f4:	2f 90       	pop	r2
    14f6:	1f 90       	pop	r1
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    14fe:	08 95       	ret

00001500 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	0f 92       	push	r0
    1508:	1f 92       	push	r1
    150a:	11 24       	eor	r1, r1
    150c:	2f 92       	push	r2
    150e:	3f 92       	push	r3
    1510:	4f 92       	push	r4
    1512:	5f 92       	push	r5
    1514:	6f 92       	push	r6
    1516:	7f 92       	push	r7
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	2f 93       	push	r18
    152e:	3f 93       	push	r19
    1530:	4f 93       	push	r20
    1532:	5f 93       	push	r21
    1534:	6f 93       	push	r22
    1536:	7f 93       	push	r23
    1538:	8f 93       	push	r24
    153a:	9f 93       	push	r25
    153c:	af 93       	push	r26
    153e:	bf 93       	push	r27
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    154c:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1550:	0d b6       	in	r0, 0x3d	; 61
    1552:	0d 92       	st	X+, r0
    1554:	0e b6       	in	r0, 0x3e	; 62
    1556:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    1558:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    155a:	0e 94 21 10 	call	0x2042	; 0x2042 <xTaskIncrementTick>
    155e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1560:	0e 94 89 11 	call	0x2312	; 0x2312 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    1564:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1568:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    156c:	cd 91       	ld	r28, X+
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	dd 91       	ld	r29, X+
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	ff 91       	pop	r31
    1576:	ef 91       	pop	r30
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	bf 91       	pop	r27
    157e:	af 91       	pop	r26
    1580:	9f 91       	pop	r25
    1582:	8f 91       	pop	r24
    1584:	7f 91       	pop	r23
    1586:	6f 91       	pop	r22
    1588:	5f 91       	pop	r21
    158a:	4f 91       	pop	r20
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	5f 90       	pop	r5
    15aa:	4f 90       	pop	r4
    15ac:	3f 90       	pop	r3
    15ae:	2f 90       	pop	r2
    15b0:	1f 90       	pop	r1
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    15b8:	08 95       	ret

000015ba <__vector_6>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    15ba:	0e 94 80 0a 	call	0x1500	; 0x1500 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    15be:	18 95       	reti

000015c0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	0f 92       	push	r0
    15c6:	fc 01       	movw	r30, r24
    15c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	91 11       	cpse	r25, r1
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	08 95       	ret

000015d6 <prvCopyDataToQueue>:
    15d6:	0f 93       	push	r16
    15d8:	1f 93       	push	r17
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	ec 01       	movw	r28, r24
    15e0:	04 2f       	mov	r16, r20
    15e2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    15e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    15e6:	41 11       	cpse	r20, r1
    15e8:	0b c0       	rjmp	.+22     	; 0x1600 <prvCopyDataToQueue+0x2a>
    15ea:	88 81       	ld	r24, Y
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	89 2b       	or	r24, r25
    15f0:	e9 f5       	brne	.+122    	; 0x166c <prvCopyDataToQueue+0x96>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	0e 94 03 13 	call	0x2606	; 0x2606 <xTaskPriorityDisinherit>
    15fa:	1d 82       	std	Y+5, r1	; 0x05
    15fc:	1c 82       	std	Y+4, r1	; 0x04
    15fe:	37 c0       	rjmp	.+110    	; 0x166e <prvCopyDataToQueue+0x98>
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	01 11       	cpse	r16, r1
    1604:	15 c0       	rjmp	.+42     	; 0x1630 <prvCopyDataToQueue+0x5a>
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	9b 81       	ldd	r25, Y+3	; 0x03
    160a:	0e 94 df 23 	call	0x47be	; 0x47be <memcpy>
    160e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	9b 81       	ldd	r25, Y+3	; 0x03
    1614:	82 0f       	add	r24, r18
    1616:	91 1d       	adc	r25, r1
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	2c 81       	ldd	r18, Y+4	; 0x04
    161e:	3d 81       	ldd	r19, Y+5	; 0x05
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	18 f1       	brcs	.+70     	; 0x166c <prvCopyDataToQueue+0x96>
    1626:	88 81       	ld	r24, Y
    1628:	99 81       	ldd	r25, Y+1	; 0x01
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	1e c0       	rjmp	.+60     	; 0x166c <prvCopyDataToQueue+0x96>
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	0e 94 df 23 	call	0x47be	; 0x47be <memcpy>
    1638:	8c 8d       	ldd	r24, Y+28	; 0x1c
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	91 95       	neg	r25
    163e:	81 95       	neg	r24
    1640:	91 09       	sbc	r25, r1
    1642:	2e 81       	ldd	r18, Y+6	; 0x06
    1644:	3f 81       	ldd	r19, Y+7	; 0x07
    1646:	28 0f       	add	r18, r24
    1648:	39 1f       	adc	r19, r25
    164a:	3f 83       	std	Y+7, r19	; 0x07
    164c:	2e 83       	std	Y+6, r18	; 0x06
    164e:	48 81       	ld	r20, Y
    1650:	59 81       	ldd	r21, Y+1	; 0x01
    1652:	24 17       	cp	r18, r20
    1654:	35 07       	cpc	r19, r21
    1656:	30 f4       	brcc	.+12     	; 0x1664 <prvCopyDataToQueue+0x8e>
    1658:	2c 81       	ldd	r18, Y+4	; 0x04
    165a:	3d 81       	ldd	r19, Y+5	; 0x05
    165c:	82 0f       	add	r24, r18
    165e:	93 1f       	adc	r25, r19
    1660:	9f 83       	std	Y+7, r25	; 0x07
    1662:	8e 83       	std	Y+6, r24	; 0x06
    1664:	02 30       	cpi	r16, 0x02	; 2
    1666:	11 f4       	brne	.+4      	; 0x166c <prvCopyDataToQueue+0x96>
    1668:	11 11       	cpse	r17, r1
    166a:	11 50       	subi	r17, 0x01	; 1
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	1f 5f       	subi	r17, 0xFF	; 255
    1670:	1a 8f       	std	Y+26, r17	; 0x1a
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <prvCopyDataFromQueue>:
    167c:	fc 01       	movw	r30, r24
    167e:	cb 01       	movw	r24, r22
    1680:	44 8d       	ldd	r20, Z+28	; 0x1c
    1682:	44 23       	and	r20, r20
    1684:	a1 f0       	breq	.+40     	; 0x16ae <prvCopyDataFromQueue+0x32>
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	26 81       	ldd	r18, Z+6	; 0x06
    168a:	37 81       	ldd	r19, Z+7	; 0x07
    168c:	24 0f       	add	r18, r20
    168e:	35 1f       	adc	r19, r21
    1690:	37 83       	std	Z+7, r19	; 0x07
    1692:	26 83       	std	Z+6, r18	; 0x06
    1694:	64 81       	ldd	r22, Z+4	; 0x04
    1696:	75 81       	ldd	r23, Z+5	; 0x05
    1698:	26 17       	cp	r18, r22
    169a:	37 07       	cpc	r19, r23
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <prvCopyDataFromQueue+0x2a>
    169e:	20 81       	ld	r18, Z
    16a0:	31 81       	ldd	r19, Z+1	; 0x01
    16a2:	37 83       	std	Z+7, r19	; 0x07
    16a4:	26 83       	std	Z+6, r18	; 0x06
    16a6:	66 81       	ldd	r22, Z+6	; 0x06
    16a8:	77 81       	ldd	r23, Z+7	; 0x07
    16aa:	0c 94 df 23 	jmp	0x47be	; 0x47be <memcpy>
    16ae:	08 95       	ret

000016b0 <prvUnlockQueue>:
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	0f 92       	push	r0
    16c2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    16c4:	7c 01       	movw	r14, r24
    16c6:	81 e1       	ldi	r24, 0x11	; 17
    16c8:	e8 0e       	add	r14, r24
    16ca:	f1 1c       	adc	r15, r1
    16cc:	11 16       	cp	r1, r17
    16ce:	5c f4       	brge	.+22     	; 0x16e6 <prvUnlockQueue+0x36>
    16d0:	89 89       	ldd	r24, Y+17	; 0x11
    16d2:	88 23       	and	r24, r24
    16d4:	41 f0       	breq	.+16     	; 0x16e6 <prvUnlockQueue+0x36>
    16d6:	c7 01       	movw	r24, r14
    16d8:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    16dc:	81 11       	cpse	r24, r1
    16de:	0e 94 8e 12 	call	0x251c	; 0x251c <vTaskMissedYield>
    16e2:	11 50       	subi	r17, 0x01	; 1
    16e4:	f3 cf       	rjmp	.-26     	; 0x16cc <prvUnlockQueue+0x1c>
    16e6:	8f ef       	ldi	r24, 0xFF	; 255
    16e8:	8e 8f       	std	Y+30, r24	; 0x1e
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	0f 92       	push	r0
    16f4:	1d 8d       	ldd	r17, Y+29	; 0x1d
    16f6:	7e 01       	movw	r14, r28
    16f8:	88 e0       	ldi	r24, 0x08	; 8
    16fa:	e8 0e       	add	r14, r24
    16fc:	f1 1c       	adc	r15, r1
    16fe:	11 16       	cp	r1, r17
    1700:	5c f4       	brge	.+22     	; 0x1718 <prvUnlockQueue+0x68>
    1702:	88 85       	ldd	r24, Y+8	; 0x08
    1704:	88 23       	and	r24, r24
    1706:	41 f0       	breq	.+16     	; 0x1718 <prvUnlockQueue+0x68>
    1708:	c7 01       	movw	r24, r14
    170a:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    170e:	81 11       	cpse	r24, r1
    1710:	0e 94 8e 12 	call	0x251c	; 0x251c <vTaskMissedYield>
    1714:	11 50       	subi	r17, 0x01	; 1
    1716:	f3 cf       	rjmp	.-26     	; 0x16fe <prvUnlockQueue+0x4e>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	8d 8f       	std	Y+29, r24	; 0x1d
    171c:	0f 90       	pop	r0
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	08 95       	ret

0000172c <xQueueGenericReset>:
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	ec 01       	movw	r28, r24
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	0f 92       	push	r0
    1738:	48 81       	ld	r20, Y
    173a:	59 81       	ldd	r21, Y+1	; 0x01
    173c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1740:	9a 01       	movw	r18, r20
    1742:	87 9f       	mul	r24, r23
    1744:	20 0d       	add	r18, r0
    1746:	31 1d       	adc	r19, r1
    1748:	11 24       	eor	r1, r1
    174a:	3d 83       	std	Y+5, r19	; 0x05
    174c:	2c 83       	std	Y+4, r18	; 0x04
    174e:	1a 8e       	std	Y+26, r1	; 0x1a
    1750:	5b 83       	std	Y+3, r21	; 0x03
    1752:	4a 83       	std	Y+2, r20	; 0x02
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	78 9f       	mul	r23, r24
    175a:	90 01       	movw	r18, r0
    175c:	79 9f       	mul	r23, r25
    175e:	30 0d       	add	r19, r0
    1760:	11 24       	eor	r1, r1
    1762:	ca 01       	movw	r24, r20
    1764:	82 0f       	add	r24, r18
    1766:	93 1f       	adc	r25, r19
    1768:	9f 83       	std	Y+7, r25	; 0x07
    176a:	8e 83       	std	Y+6, r24	; 0x06
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	8d 8f       	std	Y+29, r24	; 0x1d
    1770:	8e 8f       	std	Y+30, r24	; 0x1e
    1772:	61 11       	cpse	r22, r1
    1774:	0c c0       	rjmp	.+24     	; 0x178e <xQueueGenericReset+0x62>
    1776:	88 85       	ldd	r24, Y+8	; 0x08
    1778:	88 23       	and	r24, r24
    177a:	89 f0       	breq	.+34     	; 0x179e <xQueueGenericReset+0x72>
    177c:	ce 01       	movw	r24, r28
    177e:	08 96       	adiw	r24, 0x08	; 8
    1780:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    1784:	88 23       	and	r24, r24
    1786:	59 f0       	breq	.+22     	; 0x179e <xQueueGenericReset+0x72>
    1788:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    178c:	08 c0       	rjmp	.+16     	; 0x179e <xQueueGenericReset+0x72>
    178e:	ce 01       	movw	r24, r28
    1790:	08 96       	adiw	r24, 0x08	; 8
    1792:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1796:	ce 01       	movw	r24, r28
    1798:	41 96       	adiw	r24, 0x11	; 17
    179a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <xQueueGenericCreate>:
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	08 2f       	mov	r16, r24
    17b4:	16 2f       	mov	r17, r22
    17b6:	66 23       	and	r22, r22
    17b8:	21 f0       	breq	.+8      	; 0x17c2 <xQueueGenericCreate+0x18>
    17ba:	86 9f       	mul	r24, r22
    17bc:	c0 01       	movw	r24, r0
    17be:	11 24       	eor	r1, r1
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <xQueueGenericCreate+0x1c>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	4f 96       	adiw	r24, 0x1f	; 31
    17c8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <pvPortMalloc>
    17cc:	ec 01       	movw	r28, r24
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	71 f0       	breq	.+28     	; 0x17ee <xQueueGenericCreate+0x44>
    17d2:	11 11       	cpse	r17, r1
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <xQueueGenericCreate+0x32>
    17d6:	99 83       	std	Y+1, r25	; 0x01
    17d8:	88 83       	st	Y, r24
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <xQueueGenericCreate+0x38>
    17dc:	4f 96       	adiw	r24, 0x1f	; 31
    17de:	99 83       	std	Y+1, r25	; 0x01
    17e0:	88 83       	st	Y, r24
    17e2:	0b 8f       	std	Y+27, r16	; 0x1b
    17e4:	1c 8f       	std	Y+28, r17	; 0x1c
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	ce 01       	movw	r24, r28
    17ea:	0e 94 96 0b 	call	0x172c	; 0x172c <xQueueGenericReset>
    17ee:	ce 01       	movw	r24, r28
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <xQueueGenericSend>:
    17fa:	af 92       	push	r10
    17fc:	bf 92       	push	r11
    17fe:	cf 92       	push	r12
    1800:	df 92       	push	r13
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	00 d0       	rcall	.+0      	; 0x180e <xQueueGenericSend+0x14>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <xQueueGenericSend+0x16>
    1810:	1f 92       	push	r1
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8c 01       	movw	r16, r24
    1818:	6b 01       	movw	r12, r22
    181a:	5d 83       	std	Y+5, r21	; 0x05
    181c:	4c 83       	std	Y+4, r20	; 0x04
    181e:	f2 2e       	mov	r15, r18
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	58 01       	movw	r10, r16
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	a9 0e       	add	r10, r25
    1828:	b1 1c       	adc	r11, r1
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	0f 92       	push	r0
    1830:	f8 01       	movw	r30, r16
    1832:	22 8d       	ldd	r18, Z+26	; 0x1a
    1834:	93 8d       	ldd	r25, Z+27	; 0x1b
    1836:	29 17       	cp	r18, r25
    1838:	18 f0       	brcs	.+6      	; 0x1840 <xQueueGenericSend+0x46>
    183a:	f2 e0       	ldi	r31, 0x02	; 2
    183c:	ff 12       	cpse	r15, r31
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <xQueueGenericSend+0x6e>
    1840:	4f 2d       	mov	r20, r15
    1842:	b6 01       	movw	r22, r12
    1844:	c8 01       	movw	r24, r16
    1846:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <prvCopyDataToQueue>
    184a:	f8 01       	movw	r30, r16
    184c:	91 89       	ldd	r25, Z+17	; 0x11
    184e:	99 23       	and	r25, r25
    1850:	21 f0       	breq	.+8      	; 0x185a <xQueueGenericSend+0x60>
    1852:	c8 01       	movw	r24, r16
    1854:	41 96       	adiw	r24, 0x11	; 17
    1856:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    185a:	81 11       	cpse	r24, r1
    185c:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	50 c0       	rjmp	.+160    	; 0x1908 <xQueueGenericSend+0x10e>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	23 2b       	or	r18, r19
    186e:	19 f4       	brne	.+6      	; 0x1876 <xQueueGenericSend+0x7c>
    1870:	0f 90       	pop	r0
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	48 c0       	rjmp	.+144    	; 0x1906 <xQueueGenericSend+0x10c>
    1876:	81 11       	cpse	r24, r1
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <xQueueGenericSend+0x88>
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <vTaskInternalSetTimeOutState>
    1882:	0f 90       	pop	r0
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	0f 92       	push	r0
    1890:	f8 01       	movw	r30, r16
    1892:	85 8d       	ldd	r24, Z+29	; 0x1d
    1894:	8f 3f       	cpi	r24, 0xFF	; 255
    1896:	09 f4       	brne	.+2      	; 0x189a <xQueueGenericSend+0xa0>
    1898:	15 8e       	std	Z+29, r1	; 0x1d
    189a:	f8 01       	movw	r30, r16
    189c:	86 8d       	ldd	r24, Z+30	; 0x1e
    189e:	8f 3f       	cpi	r24, 0xFF	; 255
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <xQueueGenericSend+0xaa>
    18a2:	16 8e       	std	Z+30, r1	; 0x1e
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	be 01       	movw	r22, r28
    18aa:	6c 5f       	subi	r22, 0xFC	; 252
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255
    18ae:	ce 01       	movw	r24, r28
    18b0:	01 96       	adiw	r24, 0x01	; 1
    18b2:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <xTaskCheckForTimeOut>
    18b6:	81 11       	cpse	r24, r1
    18b8:	21 c0       	rjmp	.+66     	; 0x18fc <xQueueGenericSend+0x102>
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	0f 92       	push	r0
    18c0:	f8 01       	movw	r30, r16
    18c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    18c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	98 13       	cpse	r25, r24
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <xQueueGenericSend+0xf6>
    18ce:	6c 81       	ldd	r22, Y+4	; 0x04
    18d0:	7d 81       	ldd	r23, Y+5	; 0x05
    18d2:	c5 01       	movw	r24, r10
    18d4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <vTaskPlaceOnEventList>
    18d8:	c8 01       	movw	r24, r16
    18da:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    18de:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    18e2:	88 23       	and	r24, r24
    18e4:	11 f0       	breq	.+4      	; 0x18ea <xQueueGenericSend+0xf0>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	a0 cf       	rjmp	.-192    	; 0x182a <xQueueGenericSend+0x30>
    18ea:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    18ee:	fb cf       	rjmp	.-10     	; 0x18e6 <xQueueGenericSend+0xec>
    18f0:	c8 01       	movw	r24, r16
    18f2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    18f6:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <xQueueGenericSend+0xec>
    18fc:	c8 01       	movw	r24, r16
    18fe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1902:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	08 95       	ret

00001926 <xQueueGenericSendFromISR>:
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
    1932:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1934:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1936:	98 17       	cp	r25, r24
    1938:	10 f0       	brcs	.+4      	; 0x193e <xQueueGenericSendFromISR+0x18>
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	e1 f4       	brne	.+56     	; 0x1976 <xQueueGenericSendFromISR+0x50>
    193e:	7a 01       	movw	r14, r20
    1940:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1942:	42 2f       	mov	r20, r18
    1944:	ce 01       	movw	r24, r28
    1946:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <prvCopyDataToQueue>
    194a:	1f 3f       	cpi	r17, 0xFF	; 255
    194c:	81 f4       	brne	.+32     	; 0x196e <xQueueGenericSendFromISR+0x48>
    194e:	89 89       	ldd	r24, Y+17	; 0x11
    1950:	88 23       	and	r24, r24
    1952:	79 f0       	breq	.+30     	; 0x1972 <xQueueGenericSendFromISR+0x4c>
    1954:	ce 01       	movw	r24, r28
    1956:	41 96       	adiw	r24, 0x11	; 17
    1958:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    195c:	88 23       	and	r24, r24
    195e:	49 f0       	breq	.+18     	; 0x1972 <xQueueGenericSendFromISR+0x4c>
    1960:	e1 14       	cp	r14, r1
    1962:	f1 04       	cpc	r15, r1
    1964:	31 f0       	breq	.+12     	; 0x1972 <xQueueGenericSendFromISR+0x4c>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	f7 01       	movw	r30, r14
    196a:	80 83       	st	Z, r24
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <xQueueGenericSendFromISR+0x52>
    196e:	1f 5f       	subi	r17, 0xFF	; 255
    1970:	1e 8f       	std	Y+30, r17	; 0x1e
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <xQueueGenericSendFromISR+0x52>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	ff 90       	pop	r15
    1980:	ef 90       	pop	r14
    1982:	08 95       	ret

00001984 <xQueueReceive>:
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	00 d0       	rcall	.+0      	; 0x1998 <xQueueReceive+0x14>
    1998:	00 d0       	rcall	.+0      	; 0x199a <xQueueReceive+0x16>
    199a:	1f 92       	push	r1
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	8c 01       	movw	r16, r24
    19a2:	6b 01       	movw	r12, r22
    19a4:	5d 83       	std	Y+5, r21	; 0x05
    19a6:	4c 83       	std	Y+4, r20	; 0x04
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	58 01       	movw	r10, r16
    19ac:	91 e1       	ldi	r25, 0x11	; 17
    19ae:	a9 0e       	add	r10, r25
    19b0:	b1 1c       	adc	r11, r1
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	0f 92       	push	r0
    19b8:	f8 01       	movw	r30, r16
    19ba:	f2 8c       	ldd	r15, Z+26	; 0x1a
    19bc:	ff 20       	and	r15, r15
    19be:	a9 f0       	breq	.+42     	; 0x19ea <xQueueReceive+0x66>
    19c0:	b6 01       	movw	r22, r12
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 3e 0b 	call	0x167c	; 0x167c <prvCopyDataFromQueue>
    19c8:	fa 94       	dec	r15
    19ca:	f8 01       	movw	r30, r16
    19cc:	f2 8e       	std	Z+26, r15	; 0x1a
    19ce:	80 85       	ldd	r24, Z+8	; 0x08
    19d0:	88 23       	and	r24, r24
    19d2:	39 f0       	breq	.+14     	; 0x19e2 <xQueueReceive+0x5e>
    19d4:	c8 01       	movw	r24, r16
    19d6:	08 96       	adiw	r24, 0x08	; 8
    19d8:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    19dc:	81 11       	cpse	r24, r1
    19de:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    19e2:	0f 90       	pop	r0
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	50 c0       	rjmp	.+160    	; 0x1a8a <xQueueReceive+0x106>
    19ea:	2c 81       	ldd	r18, Y+4	; 0x04
    19ec:	3d 81       	ldd	r19, Y+5	; 0x05
    19ee:	23 2b       	or	r18, r19
    19f0:	19 f4       	brne	.+6      	; 0x19f8 <xQueueReceive+0x74>
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	48 c0       	rjmp	.+144    	; 0x1a88 <xQueueReceive+0x104>
    19f8:	81 11       	cpse	r24, r1
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <xQueueReceive+0x80>
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 50 12 	call	0x24a0	; 0x24a0 <vTaskInternalSetTimeOutState>
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	0f 92       	push	r0
    1a12:	f8 01       	movw	r30, r16
    1a14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a16:	8f 3f       	cpi	r24, 0xFF	; 255
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <xQueueReceive+0x98>
    1a1a:	15 8e       	std	Z+29, r1	; 0x1d
    1a1c:	f8 01       	movw	r30, r16
    1a1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a20:	8f 3f       	cpi	r24, 0xFF	; 255
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <xQueueReceive+0xa2>
    1a24:	16 8e       	std	Z+30, r1	; 0x1e
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	be 01       	movw	r22, r28
    1a2c:	6c 5f       	subi	r22, 0xFC	; 252
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	ce 01       	movw	r24, r28
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <xTaskCheckForTimeOut>
    1a38:	81 11       	cpse	r24, r1
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <xQueueReceive+0xf0>
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvIsQueueEmpty>
    1a42:	88 23       	and	r24, r24
    1a44:	89 f0       	breq	.+34     	; 0x1a68 <xQueueReceive+0xe4>
    1a46:	6c 81       	ldd	r22, Y+4	; 0x04
    1a48:	7d 81       	ldd	r23, Y+5	; 0x05
    1a4a:	c5 01       	movw	r24, r10
    1a4c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <vTaskPlaceOnEventList>
    1a50:	c8 01       	movw	r24, r16
    1a52:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1a56:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1a5a:	88 23       	and	r24, r24
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <xQueueReceive+0xde>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	a8 cf       	rjmp	.-176    	; 0x19b2 <xQueueReceive+0x2e>
    1a62:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1a66:	fb cf       	rjmp	.-10     	; 0x1a5e <xQueueReceive+0xda>
    1a68:	c8 01       	movw	r24, r16
    1a6a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1a6e:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1a72:	f5 cf       	rjmp	.-22     	; 0x1a5e <xQueueReceive+0xda>
    1a74:	c8 01       	movw	r24, r16
    1a76:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1a7a:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvIsQueueEmpty>
    1a84:	88 23       	and	r24, r24
    1a86:	59 f3       	breq	.-42     	; 0x1a5e <xQueueReceive+0xda>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	08 95       	ret

00001aa8 <xQueueSemaphoreTake>:
    1aa8:	cf 92       	push	r12
    1aaa:	df 92       	push	r13
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <xQueueSemaphoreTake+0x10>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <xQueueSemaphoreTake+0x12>
    1aba:	1f 92       	push	r1
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8c 01       	movw	r16, r24
    1ac2:	7d 83       	std	Y+5, r23	; 0x05
    1ac4:	6c 83       	std	Y+4, r22	; 0x04
    1ac6:	f1 2c       	mov	r15, r1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	68 01       	movw	r12, r16
    1acc:	81 e1       	ldi	r24, 0x11	; 17
    1ace:	c8 0e       	add	r12, r24
    1ad0:	d1 1c       	adc	r13, r1
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	0f 92       	push	r0
    1ad8:	d8 01       	movw	r26, r16
    1ada:	5a 96       	adiw	r26, 0x1a	; 26
    1adc:	8c 91       	ld	r24, X
    1ade:	5a 97       	sbiw	r26, 0x1a	; 26
    1ae0:	88 23       	and	r24, r24
    1ae2:	e9 f0       	breq	.+58     	; 0x1b1e <xQueueSemaphoreTake+0x76>
    1ae4:	81 50       	subi	r24, 0x01	; 1
    1ae6:	5a 96       	adiw	r26, 0x1a	; 26
    1ae8:	8c 93       	st	X, r24
    1aea:	5a 97       	sbiw	r26, 0x1a	; 26
    1aec:	8d 91       	ld	r24, X+
    1aee:	9c 91       	ld	r25, X
    1af0:	89 2b       	or	r24, r25
    1af2:	29 f4       	brne	.+10     	; 0x1afe <xQueueSemaphoreTake+0x56>
    1af4:	0e 94 84 13 	call	0x2708	; 0x2708 <pvTaskIncrementMutexHeldCount>
    1af8:	f8 01       	movw	r30, r16
    1afa:	95 83       	std	Z+5, r25	; 0x05
    1afc:	84 83       	std	Z+4, r24	; 0x04
    1afe:	d8 01       	movw	r26, r16
    1b00:	18 96       	adiw	r26, 0x08	; 8
    1b02:	8c 91       	ld	r24, X
    1b04:	88 23       	and	r24, r24
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <xQueueSemaphoreTake+0x6e>
    1b08:	c8 01       	movw	r24, r16
    1b0a:	08 96       	adiw	r24, 0x08	; 8
    1b0c:	0e 94 10 12 	call	0x2420	; 0x2420 <xTaskRemoveFromEventList>
    1b10:	81 11       	cpse	r24, r1
    1b12:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1b16:	0f 90       	pop	r0
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	7a c0       	rjmp	.+244    	; 0x1c12 <xQueueSemaphoreTake+0x16a>
    1b1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b20:	3d 81       	ldd	r19, Y+5	; 0x05
    1b22:	23 2b       	or	r18, r19
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <xQueueSemaphoreTake+0x80>
    1b26:	72 c0       	rjmp	.+228    	; 0x1c0c <xQueueSemaphoreTake+0x164>
    1b28:	91 11       	cpse	r25, r1
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <xQueueSemaphoreTake+0x8c>
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	01 96       	adiw	r24, 0x01	; 1
    1b30:	0e 94 50 12 	call	0x24a0	; 0x24a0 <vTaskInternalSetTimeOutState>
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	0f 92       	push	r0
    1b42:	f8 01       	movw	r30, r16
    1b44:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b46:	8f 3f       	cpi	r24, 0xFF	; 255
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <xQueueSemaphoreTake+0xa4>
    1b4a:	15 8e       	std	Z+29, r1	; 0x1d
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	5e 96       	adiw	r26, 0x1e	; 30
    1b50:	8c 91       	ld	r24, X
    1b52:	5e 97       	sbiw	r26, 0x1e	; 30
    1b54:	8f 3f       	cpi	r24, 0xFF	; 255
    1b56:	11 f4       	brne	.+4      	; 0x1b5c <xQueueSemaphoreTake+0xb4>
    1b58:	5e 96       	adiw	r26, 0x1e	; 30
    1b5a:	1c 92       	st	X, r1
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	be 01       	movw	r22, r28
    1b62:	6c 5f       	subi	r22, 0xFC	; 252
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <xTaskCheckForTimeOut>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	2b c0       	rjmp	.+86     	; 0x1bc8 <xQueueSemaphoreTake+0x120>
    1b72:	c8 01       	movw	r24, r16
    1b74:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvIsQueueEmpty>
    1b78:	88 23       	and	r24, r24
    1b7a:	01 f1       	breq	.+64     	; 0x1bbc <xQueueSemaphoreTake+0x114>
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	89 2b       	or	r24, r25
    1b84:	51 f4       	brne	.+20     	; 0x1b9a <xQueueSemaphoreTake+0xf2>
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	0f 92       	push	r0
    1b8c:	84 81       	ldd	r24, Z+4	; 0x04
    1b8e:	95 81       	ldd	r25, Z+5	; 0x05
    1b90:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskPriorityInherit>
    1b94:	f8 2e       	mov	r15, r24
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b9c:	7d 81       	ldd	r23, Y+5	; 0x05
    1b9e:	c6 01       	movw	r24, r12
    1ba0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <vTaskPlaceOnEventList>
    1ba4:	c8 01       	movw	r24, r16
    1ba6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1baa:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <xQueueSemaphoreTake+0x10e>
    1bb2:	91 e0       	ldi	r25, 0x01	; 1
    1bb4:	8e cf       	rjmp	.-228    	; 0x1ad2 <xQueueSemaphoreTake+0x2a>
    1bb6:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1bba:	fb cf       	rjmp	.-10     	; 0x1bb2 <xQueueSemaphoreTake+0x10a>
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1bc2:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1bc6:	f5 cf       	rjmp	.-22     	; 0x1bb2 <xQueueSemaphoreTake+0x10a>
    1bc8:	c8 01       	movw	r24, r16
    1bca:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <prvUnlockQueue>
    1bce:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    1bd2:	c8 01       	movw	r24, r16
    1bd4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvIsQueueEmpty>
    1bd8:	88 23       	and	r24, r24
    1bda:	59 f3       	breq	.-42     	; 0x1bb2 <xQueueSemaphoreTake+0x10a>
    1bdc:	ff 20       	and	r15, r15
    1bde:	c1 f0       	breq	.+48     	; 0x1c10 <xQueueSemaphoreTake+0x168>
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	0f 92       	push	r0
    1be6:	f8 01       	movw	r30, r16
    1be8:	81 89       	ldd	r24, Z+17	; 0x11
    1bea:	88 23       	and	r24, r24
    1bec:	39 f0       	breq	.+14     	; 0x1bfc <xQueueSemaphoreTake+0x154>
    1bee:	06 88       	ldd	r0, Z+22	; 0x16
    1bf0:	f7 89       	ldd	r31, Z+23	; 0x17
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	64 e0       	ldi	r22, 0x04	; 4
    1bf8:	68 1b       	sub	r22, r24
    1bfa:	01 c0       	rjmp	.+2      	; 0x1bfe <xQueueSemaphoreTake+0x156>
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	d8 01       	movw	r26, r16
    1c00:	14 96       	adiw	r26, 0x04	; 4
    1c02:	8d 91       	ld	r24, X+
    1c04:	9c 91       	ld	r25, X
    1c06:	15 97       	sbiw	r26, 0x05	; 5
    1c08:	0e 94 3d 13 	call	0x267a	; 0x267a <vTaskPriorityDisinheritAfterTimeout>
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	df 90       	pop	r13
    1c28:	cf 90       	pop	r12
    1c2a:	08 95       	ret

00001c2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <vQueueWaitForMessageRestricted+0x14>
    1c3e:	1d 8e       	std	Y+29, r1	; 0x1d
    1c40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c42:	8f 3f       	cpi	r24, 0xFF	; 255
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <vQueueWaitForMessageRestricted+0x1c>
    1c46:	1e 8e       	std	Y+30, r1	; 0x1e
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1c4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c4e:	81 11       	cpse	r24, r1
    1c50:	04 c0       	rjmp	.+8      	; 0x1c5a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1c52:	ce 01       	movw	r24, r28
    1c54:	41 96       	adiw	r24, 0x11	; 17
    1c56:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1c5a:	ce 01       	movw	r24, r28
    }
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1c60:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <prvUnlockQueue>

00001c64 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    1c64:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    1c68:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    1c6c:	80 81       	ld	r24, Z
    1c6e:	81 11       	cpse	r24, r1
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <prvResetNextTaskUnblockTime+0x14>
    1c72:	8f ef       	ldi	r24, 0xFF	; 255
    1c74:	9f ef       	ldi	r25, 0xFF	; 255
    1c76:	0c c0       	rjmp	.+24     	; 0x1c90 <prvResetNextTaskUnblockTime+0x2c>
    1c78:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    1c7c:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    1c80:	05 80       	ldd	r0, Z+5	; 0x05
    1c82:	f6 81       	ldd	r31, Z+6	; 0x06
    1c84:	e0 2d       	mov	r30, r0
    1c86:	06 80       	ldd	r0, Z+6	; 0x06
    1c88:	f7 81       	ldd	r31, Z+7	; 0x07
    1c8a:	e0 2d       	mov	r30, r0
    1c8c:	82 81       	ldd	r24, Z+2	; 0x02
    1c8e:	93 81       	ldd	r25, Z+3	; 0x03
    1c90:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <xNextTaskUnblockTime+0x1>
    1c94:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <xNextTaskUnblockTime>
    1c98:	08 95       	ret

00001c9a <prvAddCurrentTaskToDelayedList>:
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	ec 01       	movw	r28, r24
    1ca6:	f6 2e       	mov	r15, r22
    1ca8:	00 91 8a 03 	lds	r16, 0x038A	; 0x80038a <xTickCount>
    1cac:	10 91 8b 03 	lds	r17, 0x038B	; 0x80038b <xTickCount+0x1>
    1cb0:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1cb4:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1cb8:	02 96       	adiw	r24, 0x02	; 2
    1cba:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    1cbe:	cf 3f       	cpi	r28, 0xFF	; 255
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	d8 07       	cpc	r29, r24
    1cc4:	89 f4       	brne	.+34     	; 0x1ce8 <prvAddCurrentTaskToDelayedList+0x4e>
    1cc6:	ff 20       	and	r15, r15
    1cc8:	79 f0       	breq	.+30     	; 0x1ce8 <prvAddCurrentTaskToDelayedList+0x4e>
    1cca:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1cce:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1cd2:	6e 5f       	subi	r22, 0xFE	; 254
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	8d e8       	ldi	r24, 0x8D	; 141
    1cd8:	93 e0       	ldi	r25, 0x03	; 3
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	0c 94 06 09 	jmp	0x120c	; 0x120c <vListInsertEnd>
    1ce8:	c0 0f       	add	r28, r16
    1cea:	d1 1f       	adc	r29, r17
    1cec:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1cf0:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1cf4:	d3 83       	std	Z+3, r29	; 0x03
    1cf6:	c2 83       	std	Z+2, r28	; 0x02
    1cf8:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1cfc:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1d00:	c0 17       	cp	r28, r16
    1d02:	d1 07       	cpc	r29, r17
    1d04:	68 f4       	brcc	.+26     	; 0x1d20 <prvAddCurrentTaskToDelayedList+0x86>
    1d06:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxOverflowDelayedTaskList>
    1d0a:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxOverflowDelayedTaskList+0x1>
    1d0e:	6e 5f       	subi	r22, 0xFE	; 254
    1d10:	7f 4f       	sbci	r23, 0xFF	; 255
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	0c 94 27 09 	jmp	0x124e	; 0x124e <vListInsert>
    1d20:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    1d24:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    1d28:	6e 5f       	subi	r22, 0xFE	; 254
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	0e 94 27 09 	call	0x124e	; 0x124e <vListInsert>
    1d30:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <xNextTaskUnblockTime>
    1d34:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <xNextTaskUnblockTime+0x1>
    1d38:	c8 17       	cp	r28, r24
    1d3a:	d9 07       	cpc	r29, r25
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <prvAddCurrentTaskToDelayedList+0xac>
    1d3e:	d0 93 83 03 	sts	0x0383, r29	; 0x800383 <xNextTaskUnblockTime+0x1>
    1d42:	c0 93 82 03 	sts	0x0382, r28	; 0x800382 <xNextTaskUnblockTime>
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	08 95       	ret

00001d52 <prvIdleTask>:
    1d52:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <uxDeletedTasksWaitingCleanUp>
    1d56:	88 23       	and	r24, r24
    1d58:	09 f1       	breq	.+66     	; 0x1d9c <prvIdleTask+0x4a>
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	0f 92       	push	r0
    1d60:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <xTasksWaitingTermination+0x5>
    1d64:	f0 91 9d 03 	lds	r31, 0x039D	; 0x80039d <xTasksWaitingTermination+0x6>
    1d68:	c6 81       	ldd	r28, Z+6	; 0x06
    1d6a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	02 96       	adiw	r24, 0x02	; 2
    1d70:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    1d74:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <uxCurrentNumberOfTasks>
    1d78:	81 50       	subi	r24, 0x01	; 1
    1d7a:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <uxCurrentNumberOfTasks>
    1d7e:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <uxDeletedTasksWaitingCleanUp>
    1d82:	81 50       	subi	r24, 0x01	; 1
    1d84:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <uxDeletedTasksWaitingCleanUp>
    1d88:	0f 90       	pop	r0
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d90:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <vPortFree>
    1d94:	ce 01       	movw	r24, r28
    1d96:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <vPortFree>
    1d9a:	db cf       	rjmp	.-74     	; 0x1d52 <prvIdleTask>
    1d9c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <pxReadyTasksLists>
    1da0:	82 30       	cpi	r24, 0x02	; 2
    1da2:	10 f0       	brcs	.+4      	; 0x1da8 <prvIdleTask+0x56>
    1da4:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1da8:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <vApplicationIdleHook>
    1dac:	d2 cf       	rjmp	.-92     	; 0x1d52 <prvIdleTask>

00001dae <xTaskCreate>:
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	3c 01       	movw	r6, r24
    1dce:	6b 01       	movw	r12, r22
    1dd0:	5a 01       	movw	r10, r20
    1dd2:	49 01       	movw	r8, r18
    1dd4:	50 2e       	mov	r5, r16
    1dd6:	ca 01       	movw	r24, r20
    1dd8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <pvPortMalloc>
    1ddc:	8c 01       	movw	r16, r24
    1dde:	89 2b       	or	r24, r25
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <xTaskCreate+0x36>
    1de2:	e0 c0       	rjmp	.+448    	; 0x1fa4 <xTaskCreate+0x1f6>
    1de4:	88 e2       	ldi	r24, 0x28	; 40
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <pvPortMalloc>
    1dec:	ec 01       	movw	r28, r24
    1dee:	89 2b       	or	r24, r25
    1df0:	c9 f0       	breq	.+50     	; 0x1e24 <xTaskCreate+0x76>
    1df2:	18 8f       	std	Y+24, r17	; 0x18
    1df4:	0f 8b       	std	Y+23, r16	; 0x17
    1df6:	a5 01       	movw	r20, r10
    1df8:	65 ea       	ldi	r22, 0xA5	; 165
    1dfa:	70 e0       	ldi	r23, 0x00	; 0
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <memset>
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	a2 1a       	sub	r10, r18
    1e06:	b1 08       	sbc	r11, r1
    1e08:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0c:	a8 0e       	add	r10, r24
    1e0e:	b9 1e       	adc	r11, r25
    1e10:	c1 14       	cp	r12, r1
    1e12:	d1 04       	cpc	r13, r1
    1e14:	c9 f0       	breq	.+50     	; 0x1e48 <xTaskCreate+0x9a>
    1e16:	be 01       	movw	r22, r28
    1e18:	67 5e       	subi	r22, 0xE7	; 231
    1e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1c:	f6 01       	movw	r30, r12
    1e1e:	c6 01       	movw	r24, r12
    1e20:	08 96       	adiw	r24, 0x08	; 8
    1e22:	07 c0       	rjmp	.+14     	; 0x1e32 <xTaskCreate+0x84>
    1e24:	c8 01       	movw	r24, r16
    1e26:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <vPortFree>
    1e2a:	bc c0       	rjmp	.+376    	; 0x1fa4 <xTaskCreate+0x1f6>
    1e2c:	e8 17       	cp	r30, r24
    1e2e:	f9 07       	cpc	r31, r25
    1e30:	49 f0       	breq	.+18     	; 0x1e44 <xTaskCreate+0x96>
    1e32:	9f 01       	movw	r18, r30
    1e34:	41 91       	ld	r20, Z+
    1e36:	db 01       	movw	r26, r22
    1e38:	4d 93       	st	X+, r20
    1e3a:	bd 01       	movw	r22, r26
    1e3c:	d9 01       	movw	r26, r18
    1e3e:	2c 91       	ld	r18, X
    1e40:	21 11       	cpse	r18, r1
    1e42:	f4 cf       	rjmp	.-24     	; 0x1e2c <xTaskCreate+0x7e>
    1e44:	18 a2       	std	Y+32, r1	; 0x20
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <xTaskCreate+0x9c>
    1e48:	19 8e       	std	Y+25, r1	; 0x19
    1e4a:	05 2d       	mov	r16, r5
    1e4c:	04 30       	cpi	r16, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <xTaskCreate+0xa4>
    1e50:	03 e0       	ldi	r16, 0x03	; 3
    1e52:	0e 8b       	std	Y+22, r16	; 0x16
    1e54:	09 a3       	std	Y+33, r16	; 0x21
    1e56:	1a a2       	std	Y+34, r1	; 0x22
    1e58:	6e 01       	movw	r12, r28
    1e5a:	b2 e0       	ldi	r27, 0x02	; 2
    1e5c:	cb 0e       	add	r12, r27
    1e5e:	d1 1c       	adc	r13, r1
    1e60:	c6 01       	movw	r24, r12
    1e62:	0e 94 02 09 	call	0x1204	; 0x1204 <vListInitialiseItem>
    1e66:	ce 01       	movw	r24, r28
    1e68:	0c 96       	adiw	r24, 0x0c	; 12
    1e6a:	0e 94 02 09 	call	0x1204	; 0x1204 <vListInitialiseItem>
    1e6e:	d9 87       	std	Y+9, r29	; 0x09
    1e70:	c8 87       	std	Y+8, r28	; 0x08
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	80 1b       	sub	r24, r16
    1e78:	91 09       	sbc	r25, r1
    1e7a:	9d 87       	std	Y+13, r25	; 0x0d
    1e7c:	8c 87       	std	Y+12, r24	; 0x0c
    1e7e:	db 8b       	std	Y+19, r29	; 0x13
    1e80:	ca 8b       	std	Y+18, r28	; 0x12
    1e82:	1b a2       	std	Y+35, r1	; 0x23
    1e84:	1c a2       	std	Y+36, r1	; 0x24
    1e86:	1d a2       	std	Y+37, r1	; 0x25
    1e88:	1e a2       	std	Y+38, r1	; 0x26
    1e8a:	1f a2       	std	Y+39, r1	; 0x27
    1e8c:	a4 01       	movw	r20, r8
    1e8e:	b3 01       	movw	r22, r6
    1e90:	c5 01       	movw	r24, r10
    1e92:	0e 94 83 09 	call	0x1306	; 0x1306 <pxPortInitialiseStack>
    1e96:	99 83       	std	Y+1, r25	; 0x01
    1e98:	88 83       	st	Y, r24
    1e9a:	e1 14       	cp	r14, r1
    1e9c:	f1 04       	cpc	r15, r1
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <xTaskCreate+0xf8>
    1ea0:	f7 01       	movw	r30, r14
    1ea2:	d1 83       	std	Z+1, r29	; 0x01
    1ea4:	c0 83       	st	Z, r28
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	0f 92       	push	r0
    1eac:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <uxCurrentNumberOfTasks>
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <uxCurrentNumberOfTasks>
    1eb6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1eba:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1ebe:	89 2b       	or	r24, r25
    1ec0:	d1 f5       	brne	.+116    	; 0x1f36 <xTaskCreate+0x188>
    1ec2:	d0 93 e4 03 	sts	0x03E4, r29	; 0x8003e4 <pxCurrentTCB+0x1>
    1ec6:	c0 93 e3 03 	sts	0x03E3, r28	; 0x8003e3 <pxCurrentTCB>
    1eca:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <uxCurrentNumberOfTasks>
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <xTaskCreate+0x126>
    1ed2:	41 c0       	rjmp	.+130    	; 0x1f56 <xTaskCreate+0x1a8>
    1ed4:	8f eb       	ldi	r24, 0xBF	; 191
    1ed6:	93 e0       	ldi	r25, 0x03	; 3
    1ed8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1edc:	88 ec       	ldi	r24, 0xC8	; 200
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1ee4:	81 ed       	ldi	r24, 0xD1	; 209
    1ee6:	93 e0       	ldi	r25, 0x03	; 3
    1ee8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1eec:	8a ed       	ldi	r24, 0xDA	; 218
    1eee:	93 e0       	ldi	r25, 0x03	; 3
    1ef0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1ef4:	86 eb       	ldi	r24, 0xB6	; 182
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1efc:	8d ea       	ldi	r24, 0xAD	; 173
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1f04:	80 ea       	ldi	r24, 0xA0	; 160
    1f06:	93 e0       	ldi	r25, 0x03	; 3
    1f08:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1f0c:	87 e9       	ldi	r24, 0x97	; 151
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1f14:	8d e8       	ldi	r24, 0x8D	; 141
    1f16:	93 e0       	ldi	r25, 0x03	; 3
    1f18:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    1f1c:	86 eb       	ldi	r24, 0xB6	; 182
    1f1e:	93 e0       	ldi	r25, 0x03	; 3
    1f20:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <pxDelayedTaskList+0x1>
    1f24:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <pxDelayedTaskList>
    1f28:	8d ea       	ldi	r24, 0xAD	; 173
    1f2a:	93 e0       	ldi	r25, 0x03	; 3
    1f2c:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <pxOverflowDelayedTaskList+0x1>
    1f30:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <pxOverflowDelayedTaskList>
    1f34:	10 c0       	rjmp	.+32     	; 0x1f56 <xTaskCreate+0x1a8>
    1f36:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xSchedulerRunning>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	0c c0       	rjmp	.+24     	; 0x1f56 <xTaskCreate+0x1a8>
    1f3e:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1f42:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1f46:	96 89       	ldd	r25, Z+22	; 0x16
    1f48:	8e 89       	ldd	r24, Y+22	; 0x16
    1f4a:	89 17       	cp	r24, r25
    1f4c:	20 f0       	brcs	.+8      	; 0x1f56 <xTaskCreate+0x1a8>
    1f4e:	d0 93 e4 03 	sts	0x03E4, r29	; 0x8003e4 <pxCurrentTCB+0x1>
    1f52:	c0 93 e3 03 	sts	0x03E3, r28	; 0x8003e3 <pxCurrentTCB>
    1f56:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <uxTaskNumber>
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <uxTaskNumber>
    1f60:	8e 89       	ldd	r24, Y+22	; 0x16
    1f62:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    1f66:	98 17       	cp	r25, r24
    1f68:	10 f4       	brcc	.+4      	; 0x1f6e <xTaskCreate+0x1c0>
    1f6a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    1f6e:	f9 e0       	ldi	r31, 0x09	; 9
    1f70:	8f 9f       	mul	r24, r31
    1f72:	c0 01       	movw	r24, r0
    1f74:	11 24       	eor	r1, r1
    1f76:	b6 01       	movw	r22, r12
    1f78:	81 54       	subi	r24, 0x41	; 65
    1f7a:	9c 4f       	sbci	r25, 0xFC	; 252
    1f7c:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xSchedulerRunning>
    1f88:	88 23       	and	r24, r24
    1f8a:	51 f0       	breq	.+20     	; 0x1fa0 <xTaskCreate+0x1f2>
    1f8c:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    1f90:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    1f94:	96 89       	ldd	r25, Z+22	; 0x16
    1f96:	8e 89       	ldd	r24, Y+22	; 0x16
    1f98:	98 17       	cp	r25, r24
    1f9a:	10 f4       	brcc	.+4      	; 0x1fa0 <xTaskCreate+0x1f2>
    1f9c:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <xTaskCreate+0x1f8>
    1fa4:	8f ef       	ldi	r24, 0xFF	; 255
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	ff 90       	pop	r15
    1fb0:	ef 90       	pop	r14
    1fb2:	df 90       	pop	r13
    1fb4:	cf 90       	pop	r12
    1fb6:	bf 90       	pop	r11
    1fb8:	af 90       	pop	r10
    1fba:	9f 90       	pop	r9
    1fbc:	8f 90       	pop	r8
    1fbe:	7f 90       	pop	r7
    1fc0:	6f 90       	pop	r6
    1fc2:	5f 90       	pop	r5
    1fc4:	08 95       	ret

00001fc6 <vTaskStartScheduler>:
    1fc6:	ef 92       	push	r14
    1fc8:	ff 92       	push	r15
    1fca:	0f 93       	push	r16
    1fcc:	80 e8       	ldi	r24, 0x80	; 128
    1fce:	e8 2e       	mov	r14, r24
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	f8 2e       	mov	r15, r24
    1fd4:	00 e0       	ldi	r16, 0x00	; 0
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 ec       	ldi	r20, 0xC0	; 192
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	68 ef       	ldi	r22, 0xF8	; 248
    1fe0:	71 e0       	ldi	r23, 0x01	; 1
    1fe2:	89 ea       	ldi	r24, 0xA9	; 169
    1fe4:	9e e0       	ldi	r25, 0x0E	; 14
    1fe6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskCreate>
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	b1 f4       	brne	.+44     	; 0x201a <vTaskStartScheduler+0x54>
    1fee:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <xTimerCreateTimerTask>
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	91 f4       	brne	.+36     	; 0x201a <vTaskStartScheduler+0x54>
    1ff6:	f8 94       	cli
    1ff8:	2f ef       	ldi	r18, 0xFF	; 255
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <xNextTaskUnblockTime+0x1>
    2000:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <xNextTaskUnblockTime>
    2004:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <xSchedulerRunning>
    2008:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <xTickCount+0x1>
    200c:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <xTickCount>
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	0c 94 ef 09 	jmp	0x13de	; 0x13de <xPortStartScheduler>
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	08 95       	ret

00002022 <vTaskSuspendAll>:
    2022:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    2026:	8f 5f       	subi	r24, 0xFF	; 255
    2028:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <uxSchedulerSuspended>
    202c:	08 95       	ret

0000202e <xTaskGetTickCount>:
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	0f 92       	push	r0
    2034:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <xTickCount>
    2038:	90 91 8b 03 	lds	r25, 0x038B	; 0x80038b <xTickCount+0x1>
    203c:	0f 90       	pop	r0
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	08 95       	ret

00002042 <xTaskIncrementTick>:
    2042:	cf 92       	push	r12
    2044:	df 92       	push	r13
    2046:	ef 92       	push	r14
    2048:	ff 92       	push	r15
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    2056:	81 11       	cpse	r24, r1
    2058:	8c c0       	rjmp	.+280    	; 0x2172 <xTaskIncrementTick+0x130>
    205a:	00 91 8a 03 	lds	r16, 0x038A	; 0x80038a <xTickCount>
    205e:	10 91 8b 03 	lds	r17, 0x038B	; 0x80038b <xTickCount+0x1>
    2062:	0f 5f       	subi	r16, 0xFF	; 255
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	10 93 8b 03 	sts	0x038B, r17	; 0x80038b <xTickCount+0x1>
    206a:	00 93 8a 03 	sts	0x038A, r16	; 0x80038a <xTickCount>
    206e:	01 15       	cp	r16, r1
    2070:	11 05       	cpc	r17, r1
    2072:	b9 f4       	brne	.+46     	; 0x20a2 <xTaskIncrementTick+0x60>
    2074:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    2078:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    207c:	20 91 a9 03 	lds	r18, 0x03A9	; 0x8003a9 <pxOverflowDelayedTaskList>
    2080:	30 91 aa 03 	lds	r19, 0x03AA	; 0x8003aa <pxOverflowDelayedTaskList+0x1>
    2084:	30 93 ac 03 	sts	0x03AC, r19	; 0x8003ac <pxDelayedTaskList+0x1>
    2088:	20 93 ab 03 	sts	0x03AB, r18	; 0x8003ab <pxDelayedTaskList>
    208c:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <pxOverflowDelayedTaskList+0x1>
    2090:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <pxOverflowDelayedTaskList>
    2094:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <xNumOfOverflows>
    2098:	8f 5f       	subi	r24, 0xFF	; 255
    209a:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <xNumOfOverflows>
    209e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <prvResetNextTaskUnblockTime>
    20a2:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <xNextTaskUnblockTime>
    20a6:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <xNextTaskUnblockTime+0x1>
    20aa:	c0 e0       	ldi	r28, 0x00	; 0
    20ac:	08 17       	cp	r16, r24
    20ae:	19 07       	cpc	r17, r25
    20b0:	08 f4       	brcc	.+2      	; 0x20b4 <xTaskIncrementTick+0x72>
    20b2:	4f c0       	rjmp	.+158    	; 0x2152 <xTaskIncrementTick+0x110>
    20b4:	d9 e0       	ldi	r29, 0x09	; 9
    20b6:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    20ba:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    20be:	80 81       	ld	r24, Z
    20c0:	81 11       	cpse	r24, r1
    20c2:	03 c0       	rjmp	.+6      	; 0x20ca <xTaskIncrementTick+0x88>
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	9f ef       	ldi	r25, 0xFF	; 255
    20c8:	11 c0       	rjmp	.+34     	; 0x20ec <xTaskIncrementTick+0xaa>
    20ca:	e0 91 ab 03 	lds	r30, 0x03AB	; 0x8003ab <pxDelayedTaskList>
    20ce:	f0 91 ac 03 	lds	r31, 0x03AC	; 0x8003ac <pxDelayedTaskList+0x1>
    20d2:	05 80       	ldd	r0, Z+5	; 0x05
    20d4:	f6 81       	ldd	r31, Z+6	; 0x06
    20d6:	e0 2d       	mov	r30, r0
    20d8:	e6 80       	ldd	r14, Z+6	; 0x06
    20da:	f7 80       	ldd	r15, Z+7	; 0x07
    20dc:	d7 01       	movw	r26, r14
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	8d 91       	ld	r24, X+
    20e2:	9c 91       	ld	r25, X
    20e4:	13 97       	sbiw	r26, 0x03	; 3
    20e6:	08 17       	cp	r16, r24
    20e8:	19 07       	cpc	r17, r25
    20ea:	28 f4       	brcc	.+10     	; 0x20f6 <xTaskIncrementTick+0xb4>
    20ec:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <xNextTaskUnblockTime+0x1>
    20f0:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <xNextTaskUnblockTime>
    20f4:	2e c0       	rjmp	.+92     	; 0x2152 <xTaskIncrementTick+0x110>
    20f6:	67 01       	movw	r12, r14
    20f8:	b2 e0       	ldi	r27, 0x02	; 2
    20fa:	cb 0e       	add	r12, r27
    20fc:	d1 1c       	adc	r13, r1
    20fe:	c6 01       	movw	r24, r12
    2100:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    2104:	f7 01       	movw	r30, r14
    2106:	84 89       	ldd	r24, Z+20	; 0x14
    2108:	95 89       	ldd	r25, Z+21	; 0x15
    210a:	89 2b       	or	r24, r25
    210c:	21 f0       	breq	.+8      	; 0x2116 <xTaskIncrementTick+0xd4>
    210e:	c7 01       	movw	r24, r14
    2110:	0c 96       	adiw	r24, 0x0c	; 12
    2112:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    2116:	d7 01       	movw	r26, r14
    2118:	56 96       	adiw	r26, 0x16	; 22
    211a:	8c 91       	ld	r24, X
    211c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    2120:	98 17       	cp	r25, r24
    2122:	10 f4       	brcc	.+4      	; 0x2128 <xTaskIncrementTick+0xe6>
    2124:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    2128:	d8 9f       	mul	r29, r24
    212a:	c0 01       	movw	r24, r0
    212c:	11 24       	eor	r1, r1
    212e:	b6 01       	movw	r22, r12
    2130:	81 54       	subi	r24, 0x41	; 65
    2132:	9c 4f       	sbci	r25, 0xFC	; 252
    2134:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    2138:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    213c:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2140:	d7 01       	movw	r26, r14
    2142:	56 96       	adiw	r26, 0x16	; 22
    2144:	9c 91       	ld	r25, X
    2146:	86 89       	ldd	r24, Z+22	; 0x16
    2148:	98 17       	cp	r25, r24
    214a:	08 f4       	brcc	.+2      	; 0x214e <xTaskIncrementTick+0x10c>
    214c:	b4 cf       	rjmp	.-152    	; 0x20b6 <xTaskIncrementTick+0x74>
    214e:	c1 e0       	ldi	r28, 0x01	; 1
    2150:	b2 cf       	rjmp	.-156    	; 0x20b6 <xTaskIncrementTick+0x74>
    2152:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2156:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    215a:	e6 89       	ldd	r30, Z+22	; 0x16
    215c:	b9 e0       	ldi	r27, 0x09	; 9
    215e:	eb 9f       	mul	r30, r27
    2160:	f0 01       	movw	r30, r0
    2162:	11 24       	eor	r1, r1
    2164:	e1 54       	subi	r30, 0x41	; 65
    2166:	fc 4f       	sbci	r31, 0xFC	; 252
    2168:	80 81       	ld	r24, Z
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	40 f0       	brcs	.+16     	; 0x217e <xTaskIncrementTick+0x13c>
    216e:	c1 e0       	ldi	r28, 0x01	; 1
    2170:	06 c0       	rjmp	.+12     	; 0x217e <xTaskIncrementTick+0x13c>
    2172:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <uxPendedTicks>
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <uxPendedTicks>
    217c:	c0 e0       	ldi	r28, 0x00	; 0
    217e:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <xYieldPending>
    2182:	81 11       	cpse	r24, r1
    2184:	c1 e0       	ldi	r28, 0x01	; 1
    2186:	8c 2f       	mov	r24, r28
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	1f 91       	pop	r17
    218e:	0f 91       	pop	r16
    2190:	ff 90       	pop	r15
    2192:	ef 90       	pop	r14
    2194:	df 90       	pop	r13
    2196:	cf 90       	pop	r12
    2198:	08 95       	ret

0000219a <xTaskResumeAll>:
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	0f 92       	push	r0
    21ac:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    21b0:	81 50       	subi	r24, 0x01	; 1
    21b2:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <uxSchedulerSuspended>
    21b6:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    21ba:	88 23       	and	r24, r24
    21bc:	11 f0       	breq	.+4      	; 0x21c2 <xTaskResumeAll+0x28>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	52 c0       	rjmp	.+164    	; 0x2266 <xTaskResumeAll+0xcc>
    21c2:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <uxCurrentNumberOfTasks>
    21c6:	88 23       	and	r24, r24
    21c8:	d1 f3       	breq	.-12     	; 0x21be <xTaskResumeAll+0x24>
    21ca:	c0 e0       	ldi	r28, 0x00	; 0
    21cc:	d0 e0       	ldi	r29, 0x00	; 0
    21ce:	89 e0       	ldi	r24, 0x09	; 9
    21d0:	f8 2e       	mov	r15, r24
    21d2:	ee 24       	eor	r14, r14
    21d4:	e3 94       	inc	r14
    21d6:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <xPendingReadyList>
    21da:	88 23       	and	r24, r24
    21dc:	51 f1       	breq	.+84     	; 0x2232 <xTaskResumeAll+0x98>
    21de:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <xPendingReadyList+0x5>
    21e2:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <xPendingReadyList+0x6>
    21e6:	c6 81       	ldd	r28, Z+6	; 0x06
    21e8:	d7 81       	ldd	r29, Z+7	; 0x07
    21ea:	ce 01       	movw	r24, r28
    21ec:	0c 96       	adiw	r24, 0x0c	; 12
    21ee:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    21f2:	8e 01       	movw	r16, r28
    21f4:	0e 5f       	subi	r16, 0xFE	; 254
    21f6:	1f 4f       	sbci	r17, 0xFF	; 255
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    21fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2200:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    2204:	98 17       	cp	r25, r24
    2206:	10 f4       	brcc	.+4      	; 0x220c <xTaskResumeAll+0x72>
    2208:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    220c:	f8 9e       	mul	r15, r24
    220e:	c0 01       	movw	r24, r0
    2210:	11 24       	eor	r1, r1
    2212:	b8 01       	movw	r22, r16
    2214:	81 54       	subi	r24, 0x41	; 65
    2216:	9c 4f       	sbci	r25, 0xFC	; 252
    2218:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    221c:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2220:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2224:	9e 89       	ldd	r25, Y+22	; 0x16
    2226:	86 89       	ldd	r24, Z+22	; 0x16
    2228:	98 17       	cp	r25, r24
    222a:	a8 f2       	brcs	.-86     	; 0x21d6 <xTaskResumeAll+0x3c>
    222c:	e0 92 86 03 	sts	0x0386, r14	; 0x800386 <xYieldPending>
    2230:	d2 cf       	rjmp	.-92     	; 0x21d6 <xTaskResumeAll+0x3c>
    2232:	cd 2b       	or	r28, r29
    2234:	11 f0       	breq	.+4      	; 0x223a <xTaskResumeAll+0xa0>
    2236:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <prvResetNextTaskUnblockTime>
    223a:	c0 91 87 03 	lds	r28, 0x0387	; 0x800387 <uxPendedTicks>
    223e:	cc 23       	and	r28, r28
    2240:	51 f0       	breq	.+20     	; 0x2256 <xTaskResumeAll+0xbc>
    2242:	d1 e0       	ldi	r29, 0x01	; 1
    2244:	0e 94 21 10 	call	0x2042	; 0x2042 <xTaskIncrementTick>
    2248:	81 11       	cpse	r24, r1
    224a:	d0 93 86 03 	sts	0x0386, r29	; 0x800386 <xYieldPending>
    224e:	c1 50       	subi	r28, 0x01	; 1
    2250:	c9 f7       	brne	.-14     	; 0x2244 <xTaskResumeAll+0xaa>
    2252:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <uxPendedTicks>
    2256:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <xYieldPending>
    225a:	88 23       	and	r24, r24
    225c:	09 f4       	brne	.+2      	; 0x2260 <xTaskResumeAll+0xc6>
    225e:	af cf       	rjmp	.-162    	; 0x21be <xTaskResumeAll+0x24>
    2260:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	08 95       	ret

00002278 <vTaskDelayUntil>:
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	8c 01       	movw	r16, r24
    2282:	eb 01       	movw	r28, r22
    2284:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    2288:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <xTickCount>
    228c:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <xTickCount+0x1>
    2290:	f8 01       	movw	r30, r16
    2292:	20 81       	ld	r18, Z
    2294:	31 81       	ldd	r19, Z+1	; 0x01
    2296:	c9 01       	movw	r24, r18
    2298:	8c 0f       	add	r24, r28
    229a:	9d 1f       	adc	r25, r29
    229c:	42 17       	cp	r20, r18
    229e:	53 07       	cpc	r21, r19
    22a0:	20 f4       	brcc	.+8      	; 0x22aa <vTaskDelayUntil+0x32>
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	40 f4       	brcc	.+16     	; 0x22b8 <vTaskDelayUntil+0x40>
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <vTaskDelayUntil+0x38>
    22aa:	82 17       	cp	r24, r18
    22ac:	93 07       	cpc	r25, r19
    22ae:	30 f0       	brcs	.+12     	; 0x22bc <vTaskDelayUntil+0x44>
    22b0:	21 e0       	ldi	r18, 0x01	; 1
    22b2:	48 17       	cp	r20, r24
    22b4:	59 07       	cpc	r21, r25
    22b6:	18 f0       	brcs	.+6      	; 0x22be <vTaskDelayUntil+0x46>
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <vTaskDelayUntil+0x46>
    22bc:	21 e0       	ldi	r18, 0x01	; 1
    22be:	f8 01       	movw	r30, r16
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
    22c4:	22 23       	and	r18, r18
    22c6:	29 f0       	breq	.+10     	; 0x22d2 <vTaskDelayUntil+0x5a>
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	84 1b       	sub	r24, r20
    22cc:	95 0b       	sbc	r25, r21
    22ce:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <prvAddCurrentTaskToDelayedList>
    22d2:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    22d6:	81 11       	cpse	r24, r1
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <vTaskDelayUntil+0x66>
    22da:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	08 95       	ret

000022e8 <vTaskDelay>:
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	ec 01       	movw	r28, r24
    22ee:	89 2b       	or	r24, r25
    22f0:	19 f4       	brne	.+6      	; 0x22f8 <vTaskDelay+0x10>
    22f2:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    22f6:	0a c0       	rjmp	.+20     	; 0x230c <vTaskDelay+0x24>
    22f8:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	ce 01       	movw	r24, r28
    2300:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <prvAddCurrentTaskToDelayedList>
    2304:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    2308:	88 23       	and	r24, r24
    230a:	99 f3       	breq	.-26     	; 0x22f2 <vTaskDelay+0xa>
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	08 95       	ret

00002312 <vTaskSwitchContext>:
    2312:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    2316:	88 23       	and	r24, r24
    2318:	21 f0       	breq	.+8      	; 0x2322 <vTaskSwitchContext+0x10>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xYieldPending>
    2320:	08 95       	ret
    2322:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <xYieldPending>
    2326:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    232a:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    232e:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2332:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2336:	2d 91       	ld	r18, X+
    2338:	3c 91       	ld	r19, X
    233a:	87 89       	ldd	r24, Z+23	; 0x17
    233c:	90 8d       	ldd	r25, Z+24	; 0x18
    233e:	82 17       	cp	r24, r18
    2340:	93 07       	cpc	r25, r19
    2342:	60 f0       	brcs	.+24     	; 0x235c <vTaskSwitchContext+0x4a>
    2344:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2348:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    234c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2350:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2354:	67 5e       	subi	r22, 0xE7	; 231
    2356:	7f 4f       	sbci	r23, 0xFF	; 255
    2358:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <vApplicationStackOverflowHook>
    235c:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <uxTopReadyPriority>
    2360:	69 e0       	ldi	r22, 0x09	; 9
    2362:	48 2f       	mov	r20, r24
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	64 9f       	mul	r22, r20
    2368:	90 01       	movw	r18, r0
    236a:	65 9f       	mul	r22, r21
    236c:	30 0d       	add	r19, r0
    236e:	11 24       	eor	r1, r1
    2370:	f9 01       	movw	r30, r18
    2372:	e1 54       	subi	r30, 0x41	; 65
    2374:	fc 4f       	sbci	r31, 0xFC	; 252
    2376:	90 81       	ld	r25, Z
    2378:	91 11       	cpse	r25, r1
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <vTaskSwitchContext+0x6e>
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	f1 cf       	rjmp	.-30     	; 0x2362 <vTaskSwitchContext+0x50>
    2380:	a1 81       	ldd	r26, Z+1	; 0x01
    2382:	b2 81       	ldd	r27, Z+2	; 0x02
    2384:	12 96       	adiw	r26, 0x02	; 2
    2386:	0d 90       	ld	r0, X+
    2388:	bc 91       	ld	r27, X
    238a:	a0 2d       	mov	r26, r0
    238c:	b2 83       	std	Z+2, r27	; 0x02
    238e:	a1 83       	std	Z+1, r26	; 0x01
    2390:	2e 53       	subi	r18, 0x3E	; 62
    2392:	3c 4f       	sbci	r19, 0xFC	; 252
    2394:	a2 17       	cp	r26, r18
    2396:	b3 07       	cpc	r27, r19
    2398:	31 f4       	brne	.+12     	; 0x23a6 <vTaskSwitchContext+0x94>
    239a:	12 96       	adiw	r26, 0x02	; 2
    239c:	2d 91       	ld	r18, X+
    239e:	3c 91       	ld	r19, X
    23a0:	13 97       	sbiw	r26, 0x03	; 3
    23a2:	32 83       	std	Z+2, r19	; 0x02
    23a4:	21 83       	std	Z+1, r18	; 0x01
    23a6:	99 e0       	ldi	r25, 0x09	; 9
    23a8:	94 9f       	mul	r25, r20
    23aa:	f0 01       	movw	r30, r0
    23ac:	95 9f       	mul	r25, r21
    23ae:	f0 0d       	add	r31, r0
    23b0:	11 24       	eor	r1, r1
    23b2:	e1 54       	subi	r30, 0x41	; 65
    23b4:	fc 4f       	sbci	r31, 0xFC	; 252
    23b6:	01 80       	ldd	r0, Z+1	; 0x01
    23b8:	f2 81       	ldd	r31, Z+2	; 0x02
    23ba:	e0 2d       	mov	r30, r0
    23bc:	26 81       	ldd	r18, Z+6	; 0x06
    23be:	37 81       	ldd	r19, Z+7	; 0x07
    23c0:	30 93 e4 03 	sts	0x03E4, r19	; 0x8003e4 <pxCurrentTCB+0x1>
    23c4:	20 93 e3 03 	sts	0x03E3, r18	; 0x8003e3 <pxCurrentTCB>
    23c8:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    23cc:	08 95       	ret

000023ce <vTaskPlaceOnEventList>:
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
    23d2:	eb 01       	movw	r28, r22
    23d4:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    23d8:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    23dc:	64 5f       	subi	r22, 0xF4	; 244
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	0e 94 27 09 	call	0x124e	; 0x124e <vListInsert>
    23e4:	61 e0       	ldi	r22, 0x01	; 1
    23e6:	ce 01       	movw	r24, r28
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <prvAddCurrentTaskToDelayedList>

000023f0 <vTaskPlaceOnEventListRestricted>:
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	eb 01       	movw	r28, r22
    23f8:	14 2f       	mov	r17, r20
    23fa:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    23fe:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2402:	64 5f       	subi	r22, 0xF4	; 244
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    240a:	11 23       	and	r17, r17
    240c:	11 f0       	breq	.+4      	; 0x2412 <vTaskPlaceOnEventListRestricted+0x22>
    240e:	cf ef       	ldi	r28, 0xFF	; 255
    2410:	df ef       	ldi	r29, 0xFF	; 255
    2412:	61 2f       	mov	r22, r17
    2414:	ce 01       	movw	r24, r28
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0c 94 4d 0e 	jmp	0x1c9a	; 0x1c9a <prvAddCurrentTaskToDelayedList>

00002420 <xTaskRemoveFromEventList>:
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	dc 01       	movw	r26, r24
    242a:	15 96       	adiw	r26, 0x05	; 5
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	16 97       	sbiw	r26, 0x06	; 6
    2432:	c6 81       	ldd	r28, Z+6	; 0x06
    2434:	d7 81       	ldd	r29, Z+7	; 0x07
    2436:	8e 01       	movw	r16, r28
    2438:	04 5f       	subi	r16, 0xF4	; 244
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	c8 01       	movw	r24, r16
    243e:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    2442:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    2446:	81 11       	cpse	r24, r1
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <xTaskRemoveFromEventList+0x52>
    244a:	0a 50       	subi	r16, 0x0A	; 10
    244c:	11 09       	sbc	r17, r1
    244e:	c8 01       	movw	r24, r16
    2450:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    2454:	8e 89       	ldd	r24, Y+22	; 0x16
    2456:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    245a:	98 17       	cp	r25, r24
    245c:	10 f4       	brcc	.+4      	; 0x2462 <xTaskRemoveFromEventList+0x42>
    245e:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    2462:	b9 e0       	ldi	r27, 0x09	; 9
    2464:	8b 9f       	mul	r24, r27
    2466:	c0 01       	movw	r24, r0
    2468:	11 24       	eor	r1, r1
    246a:	b8 01       	movw	r22, r16
    246c:	81 54       	subi	r24, 0x41	; 65
    246e:	9c 4f       	sbci	r25, 0xFC	; 252
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <xTaskRemoveFromEventList+0x58>
    2472:	b8 01       	movw	r22, r16
    2474:	80 ea       	ldi	r24, 0xA0	; 160
    2476:	93 e0       	ldi	r25, 0x03	; 3
    2478:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    247c:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2480:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2484:	9e 89       	ldd	r25, Y+22	; 0x16
    2486:	86 89       	ldd	r24, Z+22	; 0x16
    2488:	89 17       	cp	r24, r25
    248a:	20 f4       	brcc	.+8      	; 0x2494 <xTaskRemoveFromEventList+0x74>
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xYieldPending>
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <xTaskRemoveFromEventList+0x76>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <vTaskInternalSetTimeOutState>:
    24a0:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <xNumOfOverflows>
    24a4:	fc 01       	movw	r30, r24
    24a6:	20 83       	st	Z, r18
    24a8:	20 91 8a 03 	lds	r18, 0x038A	; 0x80038a <xTickCount>
    24ac:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <xTickCount+0x1>
    24b0:	32 83       	std	Z+2, r19	; 0x02
    24b2:	21 83       	std	Z+1, r18	; 0x01
    24b4:	08 95       	ret

000024b6 <xTaskCheckForTimeOut>:
    24b6:	cf 93       	push	r28
    24b8:	df 93       	push	r29
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	0f 92       	push	r0
    24c0:	40 91 8a 03 	lds	r20, 0x038A	; 0x80038a <xTickCount>
    24c4:	50 91 8b 03 	lds	r21, 0x038B	; 0x80038b <xTickCount+0x1>
    24c8:	db 01       	movw	r26, r22
    24ca:	2d 91       	ld	r18, X+
    24cc:	3c 91       	ld	r19, X
    24ce:	2f 3f       	cpi	r18, 0xFF	; 255
    24d0:	bf ef       	ldi	r27, 0xFF	; 255
    24d2:	3b 07       	cpc	r19, r27
    24d4:	d9 f0       	breq	.+54     	; 0x250c <xTaskCheckForTimeOut+0x56>
    24d6:	ec 01       	movw	r28, r24
    24d8:	e9 81       	ldd	r30, Y+1	; 0x01
    24da:	fa 81       	ldd	r31, Y+2	; 0x02
    24dc:	a0 91 85 03 	lds	r26, 0x0385	; 0x800385 <xNumOfOverflows>
    24e0:	b8 81       	ld	r27, Y
    24e2:	ba 17       	cp	r27, r26
    24e4:	19 f0       	breq	.+6      	; 0x24ec <xTaskCheckForTimeOut+0x36>
    24e6:	4e 17       	cp	r20, r30
    24e8:	5f 07       	cpc	r21, r31
    24ea:	90 f4       	brcc	.+36     	; 0x2510 <xTaskCheckForTimeOut+0x5a>
    24ec:	4e 1b       	sub	r20, r30
    24ee:	5f 0b       	sbc	r21, r31
    24f0:	fb 01       	movw	r30, r22
    24f2:	42 17       	cp	r20, r18
    24f4:	53 07       	cpc	r21, r19
    24f6:	38 f4       	brcc	.+14     	; 0x2506 <xTaskCheckForTimeOut+0x50>
    24f8:	24 1b       	sub	r18, r20
    24fa:	35 0b       	sbc	r19, r21
    24fc:	31 83       	std	Z+1, r19	; 0x01
    24fe:	20 83       	st	Z, r18
    2500:	0e 94 50 12 	call	0x24a0	; 0x24a0 <vTaskInternalSetTimeOutState>
    2504:	03 c0       	rjmp	.+6      	; 0x250c <xTaskCheckForTimeOut+0x56>
    2506:	11 82       	std	Z+1, r1	; 0x01
    2508:	10 82       	st	Z, r1
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <xTaskCheckForTimeOut+0x5a>
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	01 c0       	rjmp	.+2      	; 0x2512 <xTaskCheckForTimeOut+0x5c>
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	0f 90       	pop	r0
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	08 95       	ret

0000251c <vTaskMissedYield>:
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <xYieldPending>
    2522:	08 95       	ret

00002524 <xTaskGetSchedulerState>:
    2524:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <xSchedulerRunning>
    2528:	88 23       	and	r24, r24
    252a:	31 f0       	breq	.+12     	; 0x2538 <xTaskGetSchedulerState+0x14>
    252c:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <uxSchedulerSuspended>
    2530:	88 23       	and	r24, r24
    2532:	21 f0       	breq	.+8      	; 0x253c <xTaskGetSchedulerState+0x18>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	08 95       	ret
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	08 95       	ret
    253c:	82 e0       	ldi	r24, 0x02	; 2
    253e:	08 95       	ret

00002540 <xTaskPriorityInherit>:
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	fc 01       	movw	r30, r24
    254a:	89 2b       	or	r24, r25
    254c:	09 f4       	brne	.+2      	; 0x2550 <xTaskPriorityInherit+0x10>
    254e:	55 c0       	rjmp	.+170    	; 0x25fa <xTaskPriorityInherit+0xba>
    2550:	86 89       	ldd	r24, Z+22	; 0x16
    2552:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2556:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    255a:	56 96       	adiw	r26, 0x16	; 22
    255c:	9c 91       	ld	r25, X
    255e:	89 17       	cp	r24, r25
    2560:	08 f0       	brcs	.+2      	; 0x2564 <xTaskPriorityInherit+0x24>
    2562:	41 c0       	rjmp	.+130    	; 0x25e6 <xTaskPriorityInherit+0xa6>
    2564:	24 85       	ldd	r18, Z+12	; 0x0c
    2566:	35 85       	ldd	r19, Z+13	; 0x0d
    2568:	37 fd       	sbrc	r19, 7
    256a:	0c c0       	rjmp	.+24     	; 0x2584 <xTaskPriorityInherit+0x44>
    256c:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2570:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2574:	56 96       	adiw	r26, 0x16	; 22
    2576:	9c 91       	ld	r25, X
    2578:	24 e0       	ldi	r18, 0x04	; 4
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	29 1b       	sub	r18, r25
    257e:	31 09       	sbc	r19, r1
    2580:	35 87       	std	Z+13, r19	; 0x0d
    2582:	24 87       	std	Z+12, r18	; 0x0c
    2584:	29 e0       	ldi	r18, 0x09	; 9
    2586:	82 9f       	mul	r24, r18
    2588:	c0 01       	movw	r24, r0
    258a:	11 24       	eor	r1, r1
    258c:	81 54       	subi	r24, 0x41	; 65
    258e:	9c 4f       	sbci	r25, 0xFC	; 252
    2590:	22 85       	ldd	r18, Z+10	; 0x0a
    2592:	33 85       	ldd	r19, Z+11	; 0x0b
    2594:	28 17       	cp	r18, r24
    2596:	39 07       	cpc	r19, r25
    2598:	e9 f4       	brne	.+58     	; 0x25d4 <xTaskPriorityInherit+0x94>
    259a:	8f 01       	movw	r16, r30
    259c:	ef 01       	movw	r28, r30
    259e:	22 96       	adiw	r28, 0x02	; 2
    25a0:	ce 01       	movw	r24, r28
    25a2:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    25a6:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    25aa:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    25ae:	86 89       	ldd	r24, Z+22	; 0x16
    25b0:	f8 01       	movw	r30, r16
    25b2:	86 8b       	std	Z+22, r24	; 0x16
    25b4:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    25b8:	98 17       	cp	r25, r24
    25ba:	10 f4       	brcc	.+4      	; 0x25c0 <xTaskPriorityInherit+0x80>
    25bc:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    25c0:	f9 e0       	ldi	r31, 0x09	; 9
    25c2:	8f 9f       	mul	r24, r31
    25c4:	c0 01       	movw	r24, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	be 01       	movw	r22, r28
    25ca:	81 54       	subi	r24, 0x41	; 65
    25cc:	9c 4f       	sbci	r25, 0xFC	; 252
    25ce:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    25d2:	07 c0       	rjmp	.+14     	; 0x25e2 <xTaskPriorityInherit+0xa2>
    25d4:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    25d8:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    25dc:	56 96       	adiw	r26, 0x16	; 22
    25de:	8c 91       	ld	r24, X
    25e0:	86 8b       	std	Z+22, r24	; 0x16
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	0b c0       	rjmp	.+22     	; 0x25fc <xTaskPriorityInherit+0xbc>
    25e6:	a0 91 e3 03 	lds	r26, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    25ea:	b0 91 e4 03 	lds	r27, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	21 a1       	ldd	r18, Z+33	; 0x21
    25f2:	56 96       	adiw	r26, 0x16	; 22
    25f4:	9c 91       	ld	r25, X
    25f6:	29 17       	cp	r18, r25
    25f8:	08 f0       	brcs	.+2      	; 0x25fc <xTaskPriorityInherit+0xbc>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <xTaskPriorityDisinherit>:
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	fc 01       	movw	r30, r24
    2610:	89 2b       	or	r24, r25
    2612:	11 f4       	brne	.+4      	; 0x2618 <xTaskPriorityDisinherit+0x12>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	2c c0       	rjmp	.+88     	; 0x2670 <xTaskPriorityDisinherit+0x6a>
    2618:	82 a1       	ldd	r24, Z+34	; 0x22
    261a:	81 50       	subi	r24, 0x01	; 1
    261c:	82 a3       	std	Z+34, r24	; 0x22
    261e:	26 89       	ldd	r18, Z+22	; 0x16
    2620:	91 a1       	ldd	r25, Z+33	; 0x21
    2622:	29 17       	cp	r18, r25
    2624:	b9 f3       	breq	.-18     	; 0x2614 <xTaskPriorityDisinherit+0xe>
    2626:	81 11       	cpse	r24, r1
    2628:	f5 cf       	rjmp	.-22     	; 0x2614 <xTaskPriorityDisinherit+0xe>
    262a:	ef 01       	movw	r28, r30
    262c:	8f 01       	movw	r16, r30
    262e:	0e 5f       	subi	r16, 0xFE	; 254
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	c8 01       	movw	r24, r16
    2634:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    2638:	89 a1       	ldd	r24, Y+33	; 0x21
    263a:	8e 8b       	std	Y+22, r24	; 0x16
    263c:	48 2f       	mov	r20, r24
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	24 e0       	ldi	r18, 0x04	; 4
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	24 1b       	sub	r18, r20
    2646:	35 0b       	sbc	r19, r21
    2648:	3d 87       	std	Y+13, r19	; 0x0d
    264a:	2c 87       	std	Y+12, r18	; 0x0c
    264c:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    2650:	98 17       	cp	r25, r24
    2652:	10 f4       	brcc	.+4      	; 0x2658 <xTaskPriorityDisinherit+0x52>
    2654:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    2658:	29 e0       	ldi	r18, 0x09	; 9
    265a:	24 9f       	mul	r18, r20
    265c:	c0 01       	movw	r24, r0
    265e:	25 9f       	mul	r18, r21
    2660:	90 0d       	add	r25, r0
    2662:	11 24       	eor	r1, r1
    2664:	b8 01       	movw	r22, r16
    2666:	81 54       	subi	r24, 0x41	; 65
    2668:	9c 4f       	sbci	r25, 0xFC	; 252
    266a:	0e 94 06 09 	call	0x120c	; 0x120c <vListInsertEnd>
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	df 91       	pop	r29
    2672:	cf 91       	pop	r28
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <vTaskPriorityDisinheritAfterTimeout>:
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	fc 01       	movw	r30, r24
    2684:	89 2b       	or	r24, r25
    2686:	d9 f1       	breq	.+118    	; 0x26fe <vTaskPriorityDisinheritAfterTimeout+0x84>
    2688:	91 a1       	ldd	r25, Z+33	; 0x21
    268a:	96 17       	cp	r25, r22
    268c:	08 f4       	brcc	.+2      	; 0x2690 <vTaskPriorityDisinheritAfterTimeout+0x16>
    268e:	96 2f       	mov	r25, r22
    2690:	86 89       	ldd	r24, Z+22	; 0x16
    2692:	89 17       	cp	r24, r25
    2694:	a1 f1       	breq	.+104    	; 0x26fe <vTaskPriorityDisinheritAfterTimeout+0x84>
    2696:	22 a1       	ldd	r18, Z+34	; 0x22
    2698:	21 30       	cpi	r18, 0x01	; 1
    269a:	89 f5       	brne	.+98     	; 0x26fe <vTaskPriorityDisinheritAfterTimeout+0x84>
    269c:	96 8b       	std	Z+22, r25	; 0x16
    269e:	24 85       	ldd	r18, Z+12	; 0x0c
    26a0:	35 85       	ldd	r19, Z+13	; 0x0d
    26a2:	37 fd       	sbrc	r19, 7
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <vTaskPriorityDisinheritAfterTimeout+0x38>
    26a6:	24 e0       	ldi	r18, 0x04	; 4
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	29 1b       	sub	r18, r25
    26ac:	31 09       	sbc	r19, r1
    26ae:	35 87       	std	Z+13, r19	; 0x0d
    26b0:	24 87       	std	Z+12, r18	; 0x0c
    26b2:	29 e0       	ldi	r18, 0x09	; 9
    26b4:	82 9f       	mul	r24, r18
    26b6:	c0 01       	movw	r24, r0
    26b8:	11 24       	eor	r1, r1
    26ba:	81 54       	subi	r24, 0x41	; 65
    26bc:	9c 4f       	sbci	r25, 0xFC	; 252
    26be:	22 85       	ldd	r18, Z+10	; 0x0a
    26c0:	33 85       	ldd	r19, Z+11	; 0x0b
    26c2:	28 17       	cp	r18, r24
    26c4:	39 07       	cpc	r19, r25
    26c6:	d9 f4       	brne	.+54     	; 0x26fe <vTaskPriorityDisinheritAfterTimeout+0x84>
    26c8:	ef 01       	movw	r28, r30
    26ca:	8f 01       	movw	r16, r30
    26cc:	0e 5f       	subi	r16, 0xFE	; 254
    26ce:	1f 4f       	sbci	r17, 0xFF	; 255
    26d0:	c8 01       	movw	r24, r16
    26d2:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    26d6:	8e 89       	ldd	r24, Y+22	; 0x16
    26d8:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <uxTopReadyPriority>
    26dc:	98 17       	cp	r25, r24
    26de:	10 f4       	brcc	.+4      	; 0x26e4 <vTaskPriorityDisinheritAfterTimeout+0x6a>
    26e0:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <uxTopReadyPriority>
    26e4:	29 e0       	ldi	r18, 0x09	; 9
    26e6:	82 9f       	mul	r24, r18
    26e8:	c0 01       	movw	r24, r0
    26ea:	11 24       	eor	r1, r1
    26ec:	b8 01       	movw	r22, r16
    26ee:	81 54       	subi	r24, 0x41	; 65
    26f0:	9c 4f       	sbci	r25, 0xFC	; 252
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	0c 94 06 09 	jmp	0x120c	; 0x120c <vListInsertEnd>
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	08 95       	ret

00002708 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2708:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    270c:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    2710:	89 2b       	or	r24, r25
    2712:	39 f0       	breq	.+14     	; 0x2722 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2714:	e0 91 e3 03 	lds	r30, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2718:	f0 91 e4 03 	lds	r31, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    271c:	82 a1       	ldd	r24, Z+34	; 0x22
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    2722:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <pxCurrentTCB>
    2726:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <pxCurrentTCB+0x1>
    }
    272a:	08 95       	ret

0000272c <prvCheckForValidListAndQueue>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	0f 92       	push	r0
    2732:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <xTimerQueue>
    2736:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
    273a:	89 2b       	or	r24, r25
    273c:	e9 f4       	brne	.+58     	; 0x2778 <prvCheckForValidListAndQueue+0x4c>
    273e:	88 ef       	ldi	r24, 0xF8	; 248
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    2746:	8f ee       	ldi	r24, 0xEF	; 239
    2748:	93 e0       	ldi	r25, 0x03	; 3
    274a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <vListInitialise>
    274e:	88 ef       	ldi	r24, 0xF8	; 248
    2750:	93 e0       	ldi	r25, 0x03	; 3
    2752:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <pxCurrentTimerList+0x1>
    2756:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <pxCurrentTimerList>
    275a:	8f ee       	ldi	r24, 0xEF	; 239
    275c:	93 e0       	ldi	r25, 0x03	; 3
    275e:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <pxOverflowTimerList+0x1>
    2762:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <pxOverflowTimerList>
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	65 e0       	ldi	r22, 0x05	; 5
    276a:	8a e0       	ldi	r24, 0x0A	; 10
    276c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <xQueueGenericCreate>
    2770:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <xTimerQueue+0x1>
    2774:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <xTimerQueue>
    2778:	0f 90       	pop	r0
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	08 95       	ret

0000277e <prvInsertTimerInActiveList>:
    277e:	fc 01       	movw	r30, r24
    2780:	73 83       	std	Z+3, r23	; 0x03
    2782:	62 83       	std	Z+2, r22	; 0x02
    2784:	91 87       	std	Z+9, r25	; 0x09
    2786:	80 87       	std	Z+8, r24	; 0x08
    2788:	46 17       	cp	r20, r22
    278a:	57 07       	cpc	r21, r23
    278c:	78 f0       	brcs	.+30     	; 0x27ac <prvInsertTimerInActiveList+0x2e>
    278e:	42 1b       	sub	r20, r18
    2790:	53 0b       	sbc	r21, r19
    2792:	84 85       	ldd	r24, Z+12	; 0x0c
    2794:	95 85       	ldd	r25, Z+13	; 0x0d
    2796:	48 17       	cp	r20, r24
    2798:	59 07       	cpc	r21, r25
    279a:	c8 f4       	brcc	.+50     	; 0x27ce <prvInsertTimerInActiveList+0x50>
    279c:	bf 01       	movw	r22, r30
    279e:	6e 5f       	subi	r22, 0xFE	; 254
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255
    27a2:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <pxOverflowTimerList>
    27a6:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <pxOverflowTimerList+0x1>
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <prvInsertTimerInActiveList+0x48>
    27ac:	42 17       	cp	r20, r18
    27ae:	53 07       	cpc	r21, r19
    27b0:	18 f4       	brcc	.+6      	; 0x27b8 <prvInsertTimerInActiveList+0x3a>
    27b2:	62 17       	cp	r22, r18
    27b4:	73 07       	cpc	r23, r19
    27b6:	58 f4       	brcc	.+22     	; 0x27ce <prvInsertTimerInActiveList+0x50>
    27b8:	bf 01       	movw	r22, r30
    27ba:	6e 5f       	subi	r22, 0xFE	; 254
    27bc:	7f 4f       	sbci	r23, 0xFF	; 255
    27be:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <pxCurrentTimerList>
    27c2:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <pxCurrentTimerList+0x1>
    27c6:	0e 94 27 09 	call	0x124e	; 0x124e <vListInsert>
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	08 95       	ret
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	08 95       	ret

000027d2 <xTimerCreateTimerTask>:
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	0f 93       	push	r16
    27d8:	0e 94 96 13 	call	0x272c	; 0x272c <prvCheckForValidListAndQueue>
    27dc:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <xTimerQueue>
    27e0:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
    27e4:	89 2b       	or	r24, r25
    27e6:	81 f0       	breq	.+32     	; 0x2808 <xTimerCreateTimerTask+0x36>
    27e8:	87 ee       	ldi	r24, 0xE7	; 231
    27ea:	e8 2e       	mov	r14, r24
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	f8 2e       	mov	r15, r24
    27f0:	03 e0       	ldi	r16, 0x03	; 3
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	45 e5       	ldi	r20, 0x55	; 85
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	6d ef       	ldi	r22, 0xFD	; 253
    27fc:	71 e0       	ldi	r23, 0x01	; 1
    27fe:	89 e9       	ldi	r24, 0x99	; 153
    2800:	94 e1       	ldi	r25, 0x14	; 20
    2802:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskCreate>
    2806:	01 c0       	rjmp	.+2      	; 0x280a <xTimerCreateTimerTask+0x38>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	08 95       	ret

00002812 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	00 d0       	rcall	.+0      	; 0x281c <xTimerGenericCommand+0xa>
    281c:	00 d0       	rcall	.+0      	; 0x281e <xTimerGenericCommand+0xc>
    281e:	1f 92       	push	r1
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2824:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <xTimerQueue>
    2828:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
    282c:	10 97       	sbiw	r26, 0x00	; 0
    282e:	29 f1       	breq	.+74     	; 0x287a <xTimerGenericCommand+0x68>
    2830:	f9 01       	movw	r30, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2832:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2834:	5b 83       	std	Y+3, r21	; 0x03
    2836:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2838:	9d 83       	std	Y+5, r25	; 0x05
    283a:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    283c:	66 30       	cpi	r22, 0x06	; 6
    283e:	a4 f4       	brge	.+40     	; 0x2868 <xTimerGenericCommand+0x56>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2840:	0e 94 92 12 	call	0x2524	; 0x2524 <xTaskGetSchedulerState>
    2844:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <xTimerQueue>
    2848:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    284c:	20 e0       	ldi	r18, 0x00	; 0
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
        xMessage.u.xTimerParameters.pxTimer = xTimer;

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	11 f4       	brne	.+4      	; 0x2856 <xTimerGenericCommand+0x44>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2852:	a8 01       	movw	r20, r16
    2854:	02 c0       	rjmp	.+4      	; 0x285a <xTimerGenericCommand+0x48>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	be 01       	movw	r22, r28
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	cf 01       	movw	r24, r30
    2862:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xQueueGenericSend>
    2866:	0a c0       	rjmp	.+20     	; 0x287c <xTimerGenericCommand+0x6a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	af 01       	movw	r20, r30
    286c:	be 01       	movw	r22, r28
    286e:	6f 5f       	subi	r22, 0xFF	; 255
    2870:	7f 4f       	sbci	r23, 0xFF	; 255
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 93 0c 	call	0x1926	; 0x1926 <xQueueGenericSendFromISR>
    2878:	01 c0       	rjmp	.+2      	; 0x287c <xTimerGenericCommand+0x6a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    287a:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	08 95       	ret

00002890 <prvSwitchTimerLists>:
    }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    289c:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <pxCurrentTimerList>
    28a0:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <pxCurrentTimerList+0x1>
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	89 f1       	breq	.+98     	; 0x290c <prvSwitchTimerLists+0x7c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    28aa:	05 80       	ldd	r0, Z+5	; 0x05
    28ac:	f6 81       	ldd	r31, Z+6	; 0x06
    28ae:	e0 2d       	mov	r30, r0
    28b0:	e0 80       	ld	r14, Z
    28b2:	f1 80       	ldd	r15, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    28b4:	c6 81       	ldd	r28, Z+6	; 0x06
    28b6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28b8:	8e 01       	movw	r16, r28
    28ba:	0e 5f       	subi	r16, 0xFE	; 254
    28bc:	1f 4f       	sbci	r17, 0xFF	; 255
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28c4:	e8 89       	ldd	r30, Y+16	; 0x10
    28c6:	f9 89       	ldd	r31, Y+17	; 0x11
    28c8:	ce 01       	movw	r24, r28
    28ca:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    28cc:	8a 89       	ldd	r24, Y+18	; 0x12
    28ce:	82 ff       	sbrs	r24, 2
    28d0:	e5 cf       	rjmp	.-54     	; 0x289c <prvSwitchTimerLists+0xc>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    28d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    28d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    28d6:	8e 0d       	add	r24, r14
    28d8:	9f 1d       	adc	r25, r15
            if( xReloadTime > xNextExpireTime )
    28da:	e8 16       	cp	r14, r24
    28dc:	f9 06       	cpc	r15, r25
    28de:	60 f4       	brcc	.+24     	; 0x28f8 <prvSwitchTimerLists+0x68>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    28e0:	9b 83       	std	Y+3, r25	; 0x03
    28e2:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    28e4:	d9 87       	std	Y+9, r29	; 0x09
    28e6:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    28e8:	b8 01       	movw	r22, r16
    28ea:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <pxCurrentTimerList>
    28ee:	90 91 ee 03 	lds	r25, 0x03EE	; 0x8003ee <pxCurrentTimerList+0x1>
    28f2:	0e 94 27 09 	call	0x124e	; 0x124e <vListInsert>
    28f6:	d2 cf       	rjmp	.-92     	; 0x289c <prvSwitchTimerLists+0xc>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	a7 01       	movw	r20, r14
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	ce 01       	movw	r24, r28
    2906:	0e 94 09 14 	call	0x2812	; 0x2812 <xTimerGenericCommand>
    290a:	c8 cf       	rjmp	.-112    	; 0x289c <prvSwitchTimerLists+0xc>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    290c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <pxOverflowTimerList>
    2910:	90 91 ec 03 	lds	r25, 0x03EC	; 0x8003ec <pxOverflowTimerList+0x1>
    2914:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <pxCurrentTimerList+0x1>
    2918:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    291c:	f0 93 ec 03 	sts	0x03EC, r31	; 0x8003ec <pxOverflowTimerList+0x1>
    2920:	e0 93 eb 03 	sts	0x03EB, r30	; 0x8003eb <pxOverflowTimerList>
}
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	ef 90       	pop	r14
    2930:	08 95       	ret

00002932 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	00 d0       	rcall	.+0      	; 0x2938 <prvTimerTask+0x6>
    2938:	00 d0       	rcall	.+0      	; 0x293a <prvTimerTask+0x8>
    293a:	1f 92       	push	r1
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2940:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <pxCurrentTimerList>
    2944:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <pxCurrentTimerList+0x1>
    2948:	d0 80       	ld	r13, Z
    if( *pxListWasEmpty == pdFALSE )
    294a:	dd 20       	and	r13, r13
    294c:	31 f0       	breq	.+12     	; 0x295a <prvTimerTask+0x28>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    294e:	05 80       	ldd	r0, Z+5	; 0x05
    2950:	f6 81       	ldd	r31, Z+6	; 0x06
    2952:	e0 2d       	mov	r30, r0
    2954:	e0 80       	ld	r14, Z
    2956:	f1 80       	ldd	r15, Z+1	; 0x01
    2958:	02 c0       	rjmp	.+4      	; 0x295e <prvTimerTask+0x2c>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    295a:	e1 2c       	mov	r14, r1
    295c:	f1 2c       	mov	r15, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    295e:	0e 94 11 10 	call	0x2022	; 0x2022 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2962:	0e 94 17 10 	call	0x202e	; 0x202e <xTaskGetTickCount>
    2966:	8c 01       	movw	r16, r24

    if( xTimeNow < xLastTime )
    2968:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <xLastTime.2412>
    296c:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <xLastTime.2412+0x1>
    2970:	08 17       	cp	r16, r24
    2972:	19 07       	cpc	r17, r25
    2974:	20 f4       	brcc	.+8      	; 0x297e <prvTimerTask+0x4c>
    {
        prvSwitchTimerLists();
    2976:	0e 94 48 14 	call	0x2890	; 0x2890 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	01 c0       	rjmp	.+2      	; 0x2980 <prvTimerTask+0x4e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    297e:	80 e0       	ldi	r24, 0x00	; 0
    }

    xLastTime = xTimeNow;
    2980:	10 93 e6 03 	sts	0x03E6, r17	; 0x8003e6 <xLastTime.2412+0x1>
    2984:	00 93 e5 03 	sts	0x03E5, r16	; 0x8003e5 <xLastTime.2412>
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
    2988:	81 11       	cpse	r24, r1
    298a:	55 c0       	rjmp	.+170    	; 0x2a36 <prvTimerTask+0x104>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    298c:	dd 20       	and	r13, r13
    298e:	d9 f1       	breq	.+118    	; 0x2a06 <prvTimerTask+0xd4>
    2990:	0e 15       	cp	r16, r14
    2992:	1f 05       	cpc	r17, r15
    2994:	08 f4       	brcc	.+2      	; 0x2998 <prvTimerTask+0x66>
    2996:	3e c0       	rjmp	.+124    	; 0x2a14 <prvTimerTask+0xe2>
            {
                ( void ) xTaskResumeAll();
    2998:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    299c:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <pxCurrentTimerList>
    29a0:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <pxCurrentTimerList+0x1>
    29a4:	05 80       	ldd	r0, Z+5	; 0x05
    29a6:	f6 81       	ldd	r31, Z+6	; 0x06
    29a8:	e0 2d       	mov	r30, r0
    29aa:	c6 80       	ldd	r12, Z+6	; 0x06
    29ac:	d7 80       	ldd	r13, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29ae:	c6 01       	movw	r24, r12
    29b0:	02 96       	adiw	r24, 0x02	; 2
    29b2:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29b6:	d6 01       	movw	r26, r12
    29b8:	52 96       	adiw	r26, 0x12	; 18
    29ba:	8c 91       	ld	r24, X
    29bc:	52 97       	sbiw	r26, 0x12	; 18
    29be:	82 ff       	sbrs	r24, 2
    29c0:	17 c0       	rjmp	.+46     	; 0x29f0 <prvTimerTask+0xbe>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    29c2:	1c 96       	adiw	r26, 0x0c	; 12
    29c4:	6d 91       	ld	r22, X+
    29c6:	7c 91       	ld	r23, X
    29c8:	1d 97       	sbiw	r26, 0x0d	; 13
    29ca:	6e 0d       	add	r22, r14
    29cc:	7f 1d       	adc	r23, r15
    29ce:	97 01       	movw	r18, r14
    29d0:	a8 01       	movw	r20, r16
    29d2:	c6 01       	movw	r24, r12
    29d4:	0e 94 bf 13 	call	0x277e	; 0x277e <prvInsertTimerInActiveList>
    29d8:	88 23       	and	r24, r24
    29da:	69 f0       	breq	.+26     	; 0x29f6 <prvTimerTask+0xc4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    29dc:	00 e0       	ldi	r16, 0x00	; 0
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	a7 01       	movw	r20, r14
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	c6 01       	movw	r24, r12
    29ea:	0e 94 09 14 	call	0x2812	; 0x2812 <xTimerGenericCommand>
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <prvTimerTask+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    29f0:	8e 7f       	andi	r24, 0xFE	; 254
    29f2:	f6 01       	movw	r30, r12
    29f4:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29f6:	d6 01       	movw	r26, r12
    29f8:	50 96       	adiw	r26, 0x10	; 16
    29fa:	ed 91       	ld	r30, X+
    29fc:	fc 91       	ld	r31, X
    29fe:	51 97       	sbiw	r26, 0x11	; 17
    2a00:	c6 01       	movw	r24, r12
    2a02:	09 95       	icall
    2a04:	1e c0       	rjmp	.+60     	; 0x2a42 <prvTimerTask+0x110>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2a06:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <pxOverflowTimerList>
    2a0a:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <pxOverflowTimerList+0x1>
    2a0e:	80 81       	ld	r24, Z
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	81 11       	cpse	r24, r1
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2a14:	40 e0       	ldi	r20, 0x00	; 0
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2a16:	b7 01       	movw	r22, r14
    2a18:	60 1b       	sub	r22, r16
    2a1a:	71 0b       	sbc	r23, r17
    2a1c:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <xTimerQueue>
    2a20:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
    2a24:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2a28:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    2a2c:	81 11       	cpse	r24, r1
    2a2e:	09 c0       	rjmp	.+18     	; 0x2a42 <prvTimerTask+0x110>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2a30:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYield>
    2a34:	06 c0       	rjmp	.+12     	; 0x2a42 <prvTimerTask+0x110>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2a36:	0e 94 cd 10 	call	0x219a	; 0x219a <xTaskResumeAll>
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <prvTimerTask+0x110>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	87 ff       	sbrs	r24, 7
    2a40:	0e c0       	rjmp	.+28     	; 0x2a5e <prvTimerTask+0x12c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	50 e0       	ldi	r21, 0x00	; 0
    2a46:	be 01       	movw	r22, r28
    2a48:	6f 5f       	subi	r22, 0xFF	; 255
    2a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a4c:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <xTimerQueue>
    2a50:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <xTimerQueue+0x1>
    2a54:	0e 94 c2 0c 	call	0x1984	; 0x1984 <xQueueReceive>
    2a58:	81 11       	cpse	r24, r1
    2a5a:	f0 cf       	rjmp	.-32     	; 0x2a3c <prvTimerTask+0x10a>
    2a5c:	71 cf       	rjmp	.-286    	; 0x2940 <prvTimerTask+0xe>
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2a5e:	ec 80       	ldd	r14, Y+4	; 0x04
    2a60:	fd 80       	ldd	r15, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2a62:	f7 01       	movw	r30, r14
    2a64:	82 85       	ldd	r24, Z+10	; 0x0a
    2a66:	93 85       	ldd	r25, Z+11	; 0x0b
    2a68:	89 2b       	or	r24, r25
    2a6a:	21 f0       	breq	.+8      	; 0x2a74 <prvTimerTask+0x142>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a6c:	c7 01       	movw	r24, r14
    2a6e:	02 96       	adiw	r24, 0x02	; 2
    2a70:	0e 94 5f 09 	call	0x12be	; 0x12be <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2a74:	0e 94 17 10 	call	0x202e	; 0x202e <xTaskGetTickCount>
    2a78:	6c 01       	movw	r12, r24

    if( xTimeNow < xLastTime )
    2a7a:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <xLastTime.2412>
    2a7e:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <xLastTime.2412+0x1>
    2a82:	c8 16       	cp	r12, r24
    2a84:	d9 06       	cpc	r13, r25
    2a86:	10 f4       	brcc	.+4      	; 0x2a8c <prvTimerTask+0x15a>
    {
        prvSwitchTimerLists();
    2a88:	0e 94 48 14 	call	0x2890	; 0x2890 <prvSwitchTimerLists>
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    }

    xLastTime = xTimeNow;
    2a8c:	d0 92 e6 03 	sts	0x03E6, r13	; 0x8003e6 <xLastTime.2412+0x1>
    2a90:	c0 92 e5 03 	sts	0x03E5, r12	; 0x8003e5 <xLastTime.2412>
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            switch( xMessage.xMessageID )
    2a94:	e9 81       	ldd	r30, Y+1	; 0x01
    2a96:	0e 2e       	mov	r0, r30
    2a98:	00 0c       	add	r0, r0
    2a9a:	ff 0b       	sbc	r31, r31
    2a9c:	ea 30       	cpi	r30, 0x0A	; 10
    2a9e:	f1 05       	cpc	r31, r1
    2aa0:	80 f6       	brcc	.-96     	; 0x2a42 <prvTimerTask+0x110>
    2aa2:	ec 5c       	subi	r30, 0xCC	; 204
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	d7 01       	movw	r26, r14
    2aa8:	52 96       	adiw	r26, 0x12	; 18
    2aaa:	8c 91       	ld	r24, X
    2aac:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ab0:	81 60       	ori	r24, 0x01	; 1
    2ab2:	f7 01       	movw	r30, r14
    2ab4:	82 8b       	std	Z+18, r24	; 0x12
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2ab6:	2a 81       	ldd	r18, Y+2	; 0x02
    2ab8:	3b 81       	ldd	r19, Y+3	; 0x03
    2aba:	64 85       	ldd	r22, Z+12	; 0x0c
    2abc:	75 85       	ldd	r23, Z+13	; 0x0d
    2abe:	62 0f       	add	r22, r18
    2ac0:	73 1f       	adc	r23, r19
    2ac2:	a6 01       	movw	r20, r12
    2ac4:	c7 01       	movw	r24, r14
    2ac6:	0e 94 bf 13 	call	0x277e	; 0x277e <prvInsertTimerInActiveList>
    2aca:	88 23       	and	r24, r24
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <prvTimerTask+0x19e>
    2ace:	b9 cf       	rjmp	.-142    	; 0x2a42 <prvTimerTask+0x110>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ad0:	d7 01       	movw	r26, r14
    2ad2:	50 96       	adiw	r26, 0x10	; 16
    2ad4:	ed 91       	ld	r30, X+
    2ad6:	fc 91       	ld	r31, X
    2ad8:	51 97       	sbiw	r26, 0x11	; 17
    2ada:	c7 01       	movw	r24, r14
    2adc:	09 95       	icall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2ade:	f7 01       	movw	r30, r14
    2ae0:	82 89       	ldd	r24, Z+18	; 0x12
    2ae2:	82 ff       	sbrs	r24, 2
    2ae4:	ae cf       	rjmp	.-164    	; 0x2a42 <prvTimerTask+0x110>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2ae6:	4a 81       	ldd	r20, Y+2	; 0x02
    2ae8:	5b 81       	ldd	r21, Y+3	; 0x03
    2aea:	84 85       	ldd	r24, Z+12	; 0x0c
    2aec:	95 85       	ldd	r25, Z+13	; 0x0d
    2aee:	48 0f       	add	r20, r24
    2af0:	59 1f       	adc	r21, r25
    2af2:	00 e0       	ldi	r16, 0x00	; 0
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	60 e0       	ldi	r22, 0x00	; 0
    2afc:	c7 01       	movw	r24, r14
    2afe:	0e 94 09 14 	call	0x2812	; 0x2812 <xTimerGenericCommand>
    2b02:	9f cf       	rjmp	.-194    	; 0x2a42 <prvTimerTask+0x110>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2b04:	81 60       	ori	r24, 0x01	; 1
    2b06:	f7 01       	movw	r30, r14
    2b08:	82 8b       	std	Z+18, r24	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2b0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b0c:	7b 81       	ldd	r23, Y+3	; 0x03
    2b0e:	75 87       	std	Z+13, r23	; 0x0d
    2b10:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2b12:	6c 0d       	add	r22, r12
    2b14:	7d 1d       	adc	r23, r13
    2b16:	96 01       	movw	r18, r12
    2b18:	a6 01       	movw	r20, r12
    2b1a:	c7 01       	movw	r24, r14
    2b1c:	0e 94 bf 13 	call	0x277e	; 0x277e <prvInsertTimerInActiveList>
    2b20:	90 cf       	rjmp	.-224    	; 0x2a42 <prvTimerTask+0x110>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2b22:	81 fd       	sbrc	r24, 1
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <prvTimerTask+0x1fc>
                        {
                            vPortFree( pxTimer );
    2b26:	c7 01       	movw	r24, r14
    2b28:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <vPortFree>
    2b2c:	8a cf       	rjmp	.-236    	; 0x2a42 <prvTimerTask+0x110>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2b2e:	8e 7f       	andi	r24, 0xFE	; 254
    2b30:	d7 01       	movw	r26, r14
    2b32:	52 96       	adiw	r26, 0x12	; 18
    2b34:	8c 93       	st	X, r24
    2b36:	85 cf       	rjmp	.-246    	; 0x2a42 <prvTimerTask+0x110>

00002b38 <initVariant>:
{
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    2b38:	0e 94 31 06 	call	0xc62	; 0xc62 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    2b3c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskStartScheduler>
    2b40:	08 95       	ret

00002b42 <vApplicationIdleHook>:
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    loop();        // the normal Arduino loop() function is run here.
    2b42:	0e 94 93 06 	call	0xd26	; 0xd26 <loop>
    if (serialEventRun) serialEventRun();
    2b46:	80 e5       	ldi	r24, 0x50	; 80
    2b48:	9c e1       	ldi	r25, 0x1C	; 28
    2b4a:	89 2b       	or	r24, r25
    2b4c:	11 f0       	breq	.+4      	; 0x2b52 <vApplicationIdleHook+0x10>
    2b4e:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <_Z14serialEventRunv>
    2b52:	08 95       	ret

00002b54 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    2b54:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    2b56:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b58:	2f ef       	ldi	r18, 0xFF	; 255
    2b5a:	80 e7       	ldi	r24, 0x70	; 112
    2b5c:	92 e0       	ldi	r25, 0x02	; 2
    2b5e:	21 50       	subi	r18, 0x01	; 1
    2b60:	80 40       	sbci	r24, 0x00	; 0
    2b62:	90 40       	sbci	r25, 0x00	; 0
    2b64:	e1 f7       	brne	.-8      	; 0x2b5e <vApplicationMallocFailedHook+0xa>
    2b66:	00 c0       	rjmp	.+0      	; 0x2b68 <vApplicationMallocFailedHook+0x14>
    2b68:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED fast blink.
    2b6a:	1d 9a       	sbi	0x03, 5	; 3
    2b6c:	f5 cf       	rjmp	.-22     	; 0x2b58 <vApplicationMallocFailedHook+0x4>

00002b6e <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    2b6e:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    2b70:	2d 9a       	sbi	0x05, 5	; 5
    2b72:	2f ef       	ldi	r18, 0xFF	; 255
    2b74:	87 ea       	ldi	r24, 0xA7	; 167
    2b76:	91 e6       	ldi	r25, 0x61	; 97
    2b78:	21 50       	subi	r18, 0x01	; 1
    2b7a:	80 40       	sbci	r24, 0x00	; 0
    2b7c:	90 40       	sbci	r25, 0x00	; 0
    2b7e:	e1 f7       	brne	.-8      	; 0x2b78 <vApplicationStackOverflowHook+0xa>
    2b80:	00 c0       	rjmp	.+0      	; 0x2b82 <vApplicationStackOverflowHook+0x14>
    2b82:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED slow blink.
    2b84:	1d 9a       	sbi	0x03, 5	; 3
    2b86:	f5 cf       	rjmp	.-22     	; 0x2b72 <vApplicationStackOverflowHook+0x4>

00002b88 <_ZN9MD_TCS23010initialiseEv>:
  }
  FreqCount.end();      // stop
  DUMP("VALUE ", FreqCount.read());

  return(FreqCount.read() * _readDiv);
}
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	8f ef       	ldi	r24, 0xFF	; 255
    2b90:	80 83       	st	Z, r24
    2b92:	81 83       	std	Z+1, r24	; 0x01
    2b94:	82 83       	std	Z+2, r24	; 0x02
    2b96:	83 83       	std	Z+3, r24	; 0x03
    2b98:	84 83       	std	Z+4, r24	; 0x04
    2b9a:	8a e0       	ldi	r24, 0x0A	; 10
    2b9c:	85 83       	std	Z+5, r24	; 0x05
    2b9e:	16 82       	std	Z+6, r1	; 0x06
    2ba0:	df 01       	movw	r26, r30
    2ba2:	17 96       	adiw	r26, 0x07	; 7
    2ba4:	73 96       	adiw	r30, 0x13	; 19
    2ba6:	00 e7       	ldi	r16, 0x70	; 112
    2ba8:	17 e1       	ldi	r17, 0x17	; 23
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	48 ed       	ldi	r20, 0xD8	; 216
    2bb0:	56 ed       	ldi	r21, 0xD6	; 214
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	0d 93       	st	X+, r16
    2bb8:	1d 93       	st	X+, r17
    2bba:	2d 93       	st	X+, r18
    2bbc:	3d 93       	st	X+, r19
    2bbe:	18 96       	adiw	r26, 0x08	; 8
    2bc0:	4d 93       	st	X+, r20
    2bc2:	5d 93       	st	X+, r21
    2bc4:	6d 93       	st	X+, r22
    2bc6:	7c 93       	st	X, r23
    2bc8:	1b 97       	sbiw	r26, 0x0b	; 11
    2bca:	ae 17       	cp	r26, r30
    2bcc:	bf 07       	cpc	r27, r31
    2bce:	99 f7       	brne	.-26     	; 0x2bb6 <_ZN9MD_TCS23010initialiseEv+0x2e>
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	08 95       	ret

00002bd6 <_ZN9MD_TCS230C1Ehhh>:
    2bd6:	ff 92       	push	r15
    2bd8:	0f 93       	push	r16
    2bda:	1f 93       	push	r17
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	ec 01       	movw	r28, r24
    2be2:	f6 2e       	mov	r15, r22
    2be4:	04 2f       	mov	r16, r20
    2be6:	12 2f       	mov	r17, r18
    2be8:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <_ZN9MD_TCS23010initialiseEv>
    2bec:	fb 82       	std	Y+3, r15	; 0x03
    2bee:	0c 83       	std	Y+4, r16	; 0x04
    2bf0:	18 83       	st	Y, r17
    2bf2:	df 91       	pop	r29
    2bf4:	cf 91       	pop	r28
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	08 95       	ret

00002bfe <_ZN9MD_TCS230D1Ev>:
    2bfe:	08 95       	ret

00002c00 <_ZN9MD_TCS2309setFilterEh>:
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	ec 01       	movw	r28, r24
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	8f 3f       	cpi	r24, 0xFF	; 255
    2c0a:	e9 f0       	breq	.+58     	; 0x2c46 <_ZN9MD_TCS2309setFilterEh+0x46>
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	9f 3f       	cpi	r25, 0xFF	; 255
    2c10:	d1 f0       	breq	.+52     	; 0x2c46 <_ZN9MD_TCS2309setFilterEh+0x46>
    2c12:	61 30       	cpi	r22, 0x01	; 1
    2c14:	49 f0       	breq	.+18     	; 0x2c28 <_ZN9MD_TCS2309setFilterEh+0x28>
    2c16:	30 f0       	brcs	.+12     	; 0x2c24 <_ZN9MD_TCS2309setFilterEh+0x24>
    2c18:	62 30       	cpi	r22, 0x02	; 2
    2c1a:	41 f0       	breq	.+16     	; 0x2c2c <_ZN9MD_TCS2309setFilterEh+0x2c>
    2c1c:	63 30       	cpi	r22, 0x03	; 3
    2c1e:	99 f4       	brne	.+38     	; 0x2c46 <_ZN9MD_TCS2309setFilterEh+0x46>
    2c20:	61 e0       	ldi	r22, 0x01	; 1
    2c22:	09 c0       	rjmp	.+18     	; 0x2c36 <_ZN9MD_TCS2309setFilterEh+0x36>
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	07 c0       	rjmp	.+14     	; 0x2c36 <_ZN9MD_TCS2309setFilterEh+0x36>
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <_ZN9MD_TCS2309setFilterEh+0x2e>
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	03 c0       	rjmp	.+6      	; 0x2c3c <_ZN9MD_TCS2309setFilterEh+0x3c>
    2c36:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
    2c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	0c 94 ef 20 	jmp	0x41de	; 0x41de <digitalWrite>
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <_ZN9MD_TCS23013setFrequency2Eh>:
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	ec 01       	movw	r28, r24
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	8f 3f       	cpi	r24, 0xFF	; 255
    2c56:	e9 f0       	breq	.+58     	; 0x2c92 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c5c:	d1 f0       	breq	.+52     	; 0x2c92 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    2c5e:	61 30       	cpi	r22, 0x01	; 1
    2c60:	49 f0       	breq	.+18     	; 0x2c74 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    2c62:	30 f0       	brcs	.+12     	; 0x2c70 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    2c64:	62 30       	cpi	r22, 0x02	; 2
    2c66:	41 f0       	breq	.+16     	; 0x2c78 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    2c68:	63 30       	cpi	r22, 0x03	; 3
    2c6a:	99 f4       	brne	.+38     	; 0x2c92 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	09 c0       	rjmp	.+18     	; 0x2c82 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	05 c0       	rjmp	.+10     	; 0x2c82 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    2c7e:	61 e0       	ldi	r22, 0x01	; 1
    2c80:	03 c0       	rjmp	.+6      	; 0x2c88 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    2c82:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    2c86:	60 e0       	ldi	r22, 0x00	; 0
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	0c 94 ef 20 	jmp	0x41de	; 0x41de <digitalWrite>
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	08 95       	ret

00002c98 <_ZN9MD_TCS2309setEnableEb>:
    2c98:	fc 01       	movw	r30, r24
    2c9a:	20 81       	ld	r18, Z
    2c9c:	2f 3f       	cpi	r18, 0xFF	; 255
    2c9e:	29 f0       	breq	.+10     	; 0x2caa <_ZN9MD_TCS2309setEnableEb+0x12>
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	69 27       	eor	r22, r25
    2ca4:	82 2f       	mov	r24, r18
    2ca6:	0c 94 ef 20 	jmp	0x41de	; 0x41de <digitalWrite>
    2caa:	66 23       	and	r22, r22
    2cac:	19 f0       	breq	.+6      	; 0x2cb4 <_ZN9MD_TCS2309setEnableEb+0x1c>
    2cae:	fc 01       	movw	r30, r24
    2cb0:	66 81       	ldd	r22, Z+6	; 0x06
    2cb2:	01 c0       	rjmp	.+2      	; 0x2cb6 <_ZN9MD_TCS2309setEnableEb+0x1e>
    2cb4:	63 e0       	ldi	r22, 0x03	; 3
    2cb6:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <_ZN9MD_TCS23013setFrequency2Eh>

00002cba <_ZN9MD_TCS2305beginEv>:
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	ec 01       	movw	r28, r24
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc4:	19 f0       	breq	.+6      	; 0x2ccc <_ZN9MD_TCS2305beginEv+0x12>
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd0:	19 f0       	breq	.+6      	; 0x2cd8 <_ZN9MD_TCS2305beginEv+0x1e>
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	8f 3f       	cpi	r24, 0xFF	; 255
    2cdc:	19 f0       	breq	.+6      	; 0x2ce4 <_ZN9MD_TCS2305beginEv+0x2a>
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <_ZN9MD_TCS2305beginEv+0x36>
    2cea:	61 e0       	ldi	r22, 0x01	; 1
    2cec:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    2cf0:	88 81       	ld	r24, Y
    2cf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf4:	19 f0       	breq	.+6      	; 0x2cfc <_ZN9MD_TCS2305beginEv+0x42>
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN9MD_TCS2309setEnableEb>
    2d04:	6e 81       	ldd	r22, Y+6	; 0x06
    2d06:	ce 01       	movw	r24, r28
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <_ZN9MD_TCS23013setFrequency2Eh>

00002d10 <_ZN9MD_TCS2306getRGBEP9colorData>:
    2d10:	dc 01       	movw	r26, r24
    2d12:	fb 01       	movw	r30, r22
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	59 f0       	breq	.+22     	; 0x2d2e <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    2d18:	9b 96       	adiw	r26, 0x2b	; 43
    2d1a:	8c 91       	ld	r24, X
    2d1c:	9b 97       	sbiw	r26, 0x2b	; 43
    2d1e:	80 83       	st	Z, r24
    2d20:	9c 96       	adiw	r26, 0x2c	; 44
    2d22:	8c 91       	ld	r24, X
    2d24:	9c 97       	sbiw	r26, 0x2c	; 44
    2d26:	81 83       	std	Z+1, r24	; 0x01
    2d28:	9d 96       	adiw	r26, 0x2d	; 45
    2d2a:	8c 91       	ld	r24, X
    2d2c:	82 83       	std	Z+2, r24	; 0x02
    2d2e:	08 95       	ret

00002d30 <_ZN9MD_TCS23017RGBTransformationEv>:
  return(s);
}

void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	df 92       	push	r13
    2d42:	ef 92       	push	r14
    2d44:	ff 92       	push	r15
    2d46:	0f 93       	push	r16
    2d48:	1f 93       	push	r17
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	8c 01       	movw	r16, r24
    2d50:	09 5f       	subi	r16, 0xF9	; 249
    2d52:	1f 4f       	sbci	r17, 0xFF	; 255
    2d54:	ec 01       	movw	r28, r24
    2d56:	7c 01       	movw	r14, r24
    2d58:	83 e1       	ldi	r24, 0x13	; 19
    2d5a:	e8 0e       	add	r14, r24
    2d5c:	f1 1c       	adc	r15, r1
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    x /= (_Fw.value[i] - _Fd.value[i]);

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    2d5e:	dd 24       	eor	r13, r13
    2d60:	da 94       	dec	r13
    2d62:	f8 01       	movw	r30, r16
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
  {
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    2d64:	d8 01       	movw	r26, r16
    2d66:	8d 90       	ld	r8, X+
    2d68:	9d 90       	ld	r9, X+
    2d6a:	ad 90       	ld	r10, X+
    2d6c:	bd 90       	ld	r11, X+
    2d6e:	8d 01       	movw	r16, r26
    2d70:	80 8d       	ldd	r24, Z+24	; 0x18
    2d72:	91 8d       	ldd	r25, Z+25	; 0x19
    2d74:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2d76:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2d78:	9c 01       	movw	r18, r24
    2d7a:	ad 01       	movw	r20, r26
    2d7c:	28 19       	sub	r18, r8
    2d7e:	39 09       	sbc	r19, r9
    2d80:	4a 09       	sbc	r20, r10
    2d82:	5b 09       	sbc	r21, r11
    2d84:	af ef       	ldi	r26, 0xFF	; 255
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	0e 94 90 22 	call	0x4520	; 0x4520 <__muluhisi3>
    x /= (_Fw.value[i] - _Fd.value[i]);
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	40 84       	ldd	r4, Z+8	; 0x08
    2d90:	51 84       	ldd	r5, Z+9	; 0x09
    2d92:	62 84       	ldd	r6, Z+10	; 0x0a
    2d94:	73 84       	ldd	r7, Z+11	; 0x0b
    2d96:	a3 01       	movw	r20, r6
    2d98:	92 01       	movw	r18, r4
    2d9a:	28 19       	sub	r18, r8
    2d9c:	39 09       	sbc	r19, r9
    2d9e:	4a 09       	sbc	r20, r10
    2da0:	5b 09       	sbc	r21, r11
    2da2:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__divmodsi4>

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    2da6:	57 ff       	sbrs	r21, 7
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    2daa:	1b a6       	std	Y+43, r1	; 0x2b
    2dac:	09 c0       	rjmp	.+18     	; 0x2dc0 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else if (x > 255) _rgb.value[i] = 255;
    2dae:	2f 3f       	cpi	r18, 0xFF	; 255
    2db0:	31 05       	cpc	r19, r1
    2db2:	41 05       	cpc	r20, r1
    2db4:	51 05       	cpc	r21, r1
    2db6:	19 f0       	breq	.+6      	; 0x2dbe <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    2db8:	14 f0       	brlt	.+4      	; 0x2dbe <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    2dba:	db a6       	std	Y+43, r13	; 0x2b
    2dbc:	01 c0       	rjmp	.+2      	; 0x2dc0 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else _rgb.value[i] = x;
    2dbe:	2b a7       	std	Y+43, r18	; 0x2b
    2dc0:	21 96       	adiw	r28, 0x01	; 1
void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
    2dc2:	0e 15       	cp	r16, r14
    2dc4:	1f 05       	cpc	r17, r15
    2dc6:	69 f6       	brne	.-102    	; 0x2d62 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    else _rgb.value[i] = x;
  }
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	bf 90       	pop	r11
    2dd8:	af 90       	pop	r10
    2dda:	9f 90       	pop	r9
    2ddc:	8f 90       	pop	r8
    2dde:	7f 90       	pop	r7
    2de0:	6f 90       	pop	r6
    2de2:	5f 90       	pop	r5
    2de4:	4f 90       	pop	r4
    2de6:	08 95       	ret

00002de8 <_ZN9MD_TCS2307readFSMEh>:
  return(_readState == 0);
}

uint8_t MD_TCS230::readFSM(uint8_t s)
// Finite State Machine to read a value (internal function)
{
    2de8:	0f 93       	push	r16
    2dea:	1f 93       	push	r17
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	8c 01       	movw	r16, r24
    2df2:	c6 2f       	mov	r28, r22
  static const uint8_t seq[] = { TCS230_RGB_R, TCS230_RGB_G, TCS230_RGB_B };
  static uint8_t       currCol;  // index for seq above

  switch(s)
    2df4:	61 30       	cpi	r22, 0x01	; 1
    2df6:	49 f0       	breq	.+18     	; 0x2e0a <_ZN9MD_TCS2307readFSMEh+0x22>
    2df8:	18 f0       	brcs	.+6      	; 0x2e00 <_ZN9MD_TCS2307readFSMEh+0x18>
    2dfa:	62 30       	cpi	r22, 0x02	; 2
    2dfc:	d9 f0       	breq	.+54     	; 0x2e34 <_ZN9MD_TCS2307readFSMEh+0x4c>
    2dfe:	4c c0       	rjmp	.+152    	; 0x2e98 <_ZN9MD_TCS2307readFSMEh+0xb0>
  {
  case 0: // enable the hardware for reading
    DUMPS("\n0");
    currCol = 0;  // RGB_R but we don't care
    2e00:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    setEnable(true);
    2e04:	61 e0       	ldi	r22, 0x01	; 1
    2e06:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN9MD_TCS2309setEnableEb>
    s++;
    // fall through to the next state

  case 1: // select a filter and start a reading
    DUMPS("\n1");
    setFilter(seq[currCol]);
    2e0a:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2e0e:	f0 e0       	ldi	r31, 0x00	; 0
    2e10:	eb 5f       	subi	r30, 0xFB	; 251
    2e12:	fd 4f       	sbci	r31, 0xFD	; 253
    2e14:	60 81       	ld	r22, Z
    2e16:	c8 01       	movw	r24, r16
    2e18:	0e 94 00 16 	call	0x2c00	; 0x2c00 <_ZN9MD_TCS2309setFilterEh>
    FreqCount.begin(1000/_readDiv);
    2e1c:	f8 01       	movw	r30, r16
    2e1e:	65 81       	ldd	r22, Z+5	; 0x05
    2e20:	70 e0       	ldi	r23, 0x00	; 0
    2e22:	88 ee       	ldi	r24, 0xE8	; 232
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 35 22 	call	0x446a	; 0x446a <__divmodhi4>
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	0e 94 1e 21 	call	0x423c	; 0x423c <_ZN14FreqCountClass5beginEj>
    s++;
    2e30:	c2 e0       	ldi	r28, 0x02	; 2
    break;
    2e32:	32 c0       	rjmp	.+100    	; 0x2e98 <_ZN9MD_TCS2307readFSMEh+0xb0>

  case 2: // see if a value is available
    DUMPS("2");
    if (FreqCount.available())
    2e34:	0e 94 96 21 	call	0x432c	; 0x432c <_ZN14FreqCountClass9availableEv>
    2e38:	88 23       	and	r24, r24
    2e3a:	71 f1       	breq	.+92     	; 0x2e98 <_ZN9MD_TCS2307readFSMEh+0xb0>
    {
      DUMP(" VALUE ", FreqCount.read());
      // read the value and save it 
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;
    2e3c:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	8e 0f       	add	r24, r30
    2e44:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	eb 5f       	subi	r30, 0xFB	; 251
    2e4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4e:	c0 81       	ld	r28, Z
    2e50:	d0 e0       	ldi	r29, 0x00	; 0
    2e52:	0e 94 99 21 	call	0x4332	; 0x4332 <_ZN14FreqCountClass4readEv>
    2e56:	9b 01       	movw	r18, r22
    2e58:	ac 01       	movw	r20, r24
    2e5a:	cc 0f       	add	r28, r28
    2e5c:	dd 1f       	adc	r29, r29
    2e5e:	cc 0f       	add	r28, r28
    2e60:	dd 1f       	adc	r29, r29
    2e62:	c0 0f       	add	r28, r16
    2e64:	d1 1f       	adc	r29, r17
    2e66:	f8 01       	movw	r30, r16
    2e68:	a5 81       	ldd	r26, Z+5	; 0x05
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	0e 94 90 22 	call	0x4520	; 0x4520 <__muluhisi3>
    2e70:	6f 8f       	std	Y+31, r22	; 0x1f
    2e72:	78 a3       	std	Y+32, r23	; 0x20
    2e74:	89 a3       	std	Y+33, r24	; 0x21
    2e76:	9a a3       	std	Y+34, r25	; 0x22

      if (currCol < RGB_SIZE)
    2e78:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2e7c:	83 30       	cpi	r24, 0x03	; 3
    2e7e:	58 f0       	brcs	.+22     	; 0x2e96 <_ZN9MD_TCS2307readFSMEh+0xae>
        s--;
      }
      else
      {
        // end this reading session
        FreqCount.end();
    2e80:	0e 94 a7 21 	call	0x434e	; 0x434e <_ZN14FreqCountClass3endEv>
        setEnable(false);
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	c8 01       	movw	r24, r16
    2e88:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN9MD_TCS2309setEnableEb>
        RGBTransformation();
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZN9MD_TCS23017RGBTransformationEv>
        s = 0;
    2e92:	c0 e0       	ldi	r28, 0x00	; 0
    2e94:	01 c0       	rjmp	.+2      	; 0x2e98 <_ZN9MD_TCS2307readFSMEh+0xb0>
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;

      if (currCol < RGB_SIZE)
      {
        // loop around again on next call to available()
        s--;
    2e96:	c1 e0       	ldi	r28, 0x01	; 1
    }
    break;
  }

  return(s);
}
    2e98:	8c 2f       	mov	r24, r28
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	08 95       	ret

00002ea4 <_ZN9MD_TCS2304readEv>:
  return(FreqCount.read() * _readDiv);
}

void MD_TCS230::read(void)
// initiate the finite state machine for reading a value
{
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	ec 01       	movw	r28, r24
  _readState = readFSM(0);
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN9MD_TCS2307readFSMEh>
    2eb0:	8e a7       	std	Y+46, r24	; 0x2e
}
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <_ZN9MD_TCS2309availableEv>:

bool MD_TCS230::available(void)
// check if a value is ready. Called repeatedly until it is!
{
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	ec 01       	movw	r28, r24
  _readState = readFSM(_readState);
    2ebe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ec0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <_ZN9MD_TCS2307readFSMEh>
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	8e a7       	std	Y+46, r24	; 0x2e

  return(_readState == 0);
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	91 11       	cpse	r25, r1
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
}
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	08 95       	ret

00002ed4 <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	08 95       	ret

00002eda <_ZN14SoftwareSerial4readEv>:
    2eda:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    2ede:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    2ee2:	28 17       	cp	r18, r24
    2ee4:	39 07       	cpc	r19, r25
    2ee6:	b9 f4       	brne	.+46     	; 0x2f16 <_ZN14SoftwareSerial4readEv+0x3c>
    2ee8:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2eec:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2ef0:	98 17       	cp	r25, r24
    2ef2:	89 f0       	breq	.+34     	; 0x2f16 <_ZN14SoftwareSerial4readEv+0x3c>
    2ef4:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	ec 5f       	subi	r30, 0xFC	; 252
    2efc:	fb 4f       	sbci	r31, 0xFB	; 251
    2efe:	80 81       	ld	r24, Z
    2f00:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	2f 5f       	subi	r18, 0xFF	; 255
    2f08:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0a:	2f 73       	andi	r18, 0x3F	; 63
    2f0c:	33 27       	eor	r19, r19
    2f0e:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	08 95       	ret
    2f16:	8f ef       	ldi	r24, 0xFF	; 255
    2f18:	9f ef       	ldi	r25, 0xFF	; 255
    2f1a:	08 95       	ret

00002f1c <_ZN14SoftwareSerial5writeEh>:
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	dc 01       	movw	r26, r24
    2f24:	5c 96       	adiw	r26, 0x1c	; 28
    2f26:	8d 91       	ld	r24, X+
    2f28:	9c 91       	ld	r25, X
    2f2a:	5d 97       	sbiw	r26, 0x1d	; 29
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	39 f4       	brne	.+14     	; 0x2f3e <_ZN14SoftwareSerial5writeEh+0x22>
    2f30:	21 e0       	ldi	r18, 0x01	; 1
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	13 96       	adiw	r26, 0x03	; 3
    2f36:	3c 93       	st	X, r19
    2f38:	2e 93       	st	-X, r18
    2f3a:	12 97       	sbiw	r26, 0x02	; 2
    2f3c:	3b c0       	rjmp	.+118    	; 0x2fb4 <_ZN14SoftwareSerial5writeEh+0x98>
    2f3e:	51 96       	adiw	r26, 0x11	; 17
    2f40:	ed 91       	ld	r30, X+
    2f42:	fc 91       	ld	r31, X
    2f44:	52 97       	sbiw	r26, 0x12	; 18
    2f46:	50 96       	adiw	r26, 0x10	; 16
    2f48:	2c 91       	ld	r18, X
    2f4a:	50 97       	sbiw	r26, 0x10	; 16
    2f4c:	32 2f       	mov	r19, r18
    2f4e:	30 95       	com	r19
    2f50:	1f b7       	in	r17, 0x3f	; 63
    2f52:	5e 96       	adiw	r26, 0x1e	; 30
    2f54:	4c 91       	ld	r20, X
    2f56:	5e 97       	sbiw	r26, 0x1e	; 30
    2f58:	74 2f       	mov	r23, r20
    2f5a:	72 70       	andi	r23, 0x02	; 2
    2f5c:	41 fd       	sbrc	r20, 1
    2f5e:	60 95       	com	r22
    2f60:	f8 94       	cli
    2f62:	40 81       	ld	r20, Z
    2f64:	77 23       	and	r23, r23
    2f66:	11 f0       	breq	.+4      	; 0x2f6c <_ZN14SoftwareSerial5writeEh+0x50>
    2f68:	42 2b       	or	r20, r18
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <_ZN14SoftwareSerial5writeEh+0x52>
    2f6c:	43 23       	and	r20, r19
    2f6e:	40 83       	st	Z, r20
    2f70:	ec 01       	movw	r28, r24
    2f72:	21 97       	sbiw	r28, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <_ZN14SoftwareSerial5writeEh+0x56>
    2f76:	48 e0       	ldi	r20, 0x08	; 8
    2f78:	50 81       	ld	r21, Z
    2f7a:	60 ff       	sbrs	r22, 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <_ZN14SoftwareSerial5writeEh+0x66>
    2f7e:	52 2b       	or	r21, r18
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <_ZN14SoftwareSerial5writeEh+0x68>
    2f82:	53 23       	and	r21, r19
    2f84:	50 83       	st	Z, r21
    2f86:	ec 01       	movw	r28, r24
    2f88:	21 97       	sbiw	r28, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <_ZN14SoftwareSerial5writeEh+0x6c>
    2f8c:	66 95       	lsr	r22
    2f8e:	41 50       	subi	r20, 0x01	; 1
    2f90:	99 f7       	brne	.-26     	; 0x2f78 <_ZN14SoftwareSerial5writeEh+0x5c>
    2f92:	80 81       	ld	r24, Z
    2f94:	77 23       	and	r23, r23
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <_ZN14SoftwareSerial5writeEh+0x82>
    2f98:	83 23       	and	r24, r19
    2f9a:	80 83       	st	Z, r24
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <_ZN14SoftwareSerial5writeEh+0x86>
    2f9e:	28 2b       	or	r18, r24
    2fa0:	20 83       	st	Z, r18
    2fa2:	1f bf       	out	0x3f, r17	; 63
    2fa4:	5c 96       	adiw	r26, 0x1c	; 28
    2fa6:	8d 91       	ld	r24, X+
    2fa8:	9c 91       	ld	r25, X
    2faa:	5d 97       	sbiw	r26, 0x1d	; 29
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <_ZN14SoftwareSerial5writeEh+0x90>
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	08 95       	ret

00002fbc <_ZN14SoftwareSerial5flushEv>:
    2fbc:	08 95       	ret

00002fbe <_ZN14SoftwareSerial4peekEv>:
    2fbe:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    2fc2:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    2fc6:	28 17       	cp	r18, r24
    2fc8:	39 07       	cpc	r19, r25
    2fca:	71 f4       	brne	.+28     	; 0x2fe8 <_ZN14SoftwareSerial4peekEv+0x2a>
    2fcc:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2fd0:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    2fd4:	98 17       	cp	r25, r24
    2fd6:	41 f0       	breq	.+16     	; 0x2fe8 <_ZN14SoftwareSerial4peekEv+0x2a>
    2fd8:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	ec 5f       	subi	r30, 0xFC	; 252
    2fe0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fe2:	80 81       	ld	r24, Z
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	08 95       	ret
    2fe8:	8f ef       	ldi	r24, 0xFF	; 255
    2fea:	9f ef       	ldi	r25, 0xFF	; 255
    2fec:	08 95       	ret

00002fee <_ZN14SoftwareSerial9availableEv>:
    2fee:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    2ff2:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    2ff6:	28 17       	cp	r18, r24
    2ff8:	39 07       	cpc	r19, r25
    2ffa:	71 f4       	brne	.+28     	; 0x3018 <_ZN14SoftwareSerial9availableEv+0x2a>
    2ffc:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3000:	20 91 02 04 	lds	r18, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	80 5c       	subi	r24, 0xC0	; 192
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	82 1b       	sub	r24, r18
    300c:	91 09       	sbc	r25, r1
    300e:	60 e4       	ldi	r22, 0x40	; 64
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	0e 94 35 22 	call	0x446a	; 0x446a <__divmodhi4>
    3016:	08 95       	ret
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	08 95       	ret

0000301e <_ZN14SoftwareSerial13stopListeningEv>:
    301e:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    3022:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    3026:	e8 17       	cp	r30, r24
    3028:	f9 07       	cpc	r31, r25
    302a:	69 f4       	brne	.+26     	; 0x3046 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    302c:	a3 89       	ldd	r26, Z+19	; 0x13
    302e:	b4 89       	ldd	r27, Z+20	; 0x14
    3030:	9c 91       	ld	r25, X
    3032:	85 89       	ldd	r24, Z+21	; 0x15
    3034:	80 95       	com	r24
    3036:	89 23       	and	r24, r25
    3038:	8c 93       	st	X, r24
    303a:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    303e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	08 95       	ret
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	08 95       	ret

0000304a <_ZN14SoftwareSerial6listenEv>:
    304a:	cf 93       	push	r28
    304c:	df 93       	push	r29
    304e:	ec 01       	movw	r28, r24
    3050:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3052:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3054:	89 2b       	or	r24, r25
    3056:	f1 f0       	breq	.+60     	; 0x3094 <_ZN14SoftwareSerial6listenEv+0x4a>
    3058:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    305c:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    3060:	c8 17       	cp	r28, r24
    3062:	d9 07       	cpc	r29, r25
    3064:	b9 f0       	breq	.+46     	; 0x3094 <_ZN14SoftwareSerial6listenEv+0x4a>
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	11 f0       	breq	.+4      	; 0x306e <_ZN14SoftwareSerial6listenEv+0x24>
    306a:	0e 94 0f 18 	call	0x301e	; 0x301e <_ZN14SoftwareSerial13stopListeningEv>
    306e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3070:	8e 7f       	andi	r24, 0xFE	; 254
    3072:	8e 8f       	std	Y+30, r24	; 0x1e
    3074:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3078:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    307c:	d0 93 45 04 	sts	0x0445, r29	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    3080:	c0 93 44 04 	sts	0x0444, r28	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    3084:	eb 89       	ldd	r30, Y+19	; 0x13
    3086:	fc 89       	ldd	r31, Y+20	; 0x14
    3088:	90 81       	ld	r25, Z
    308a:	8d 89       	ldd	r24, Y+21	; 0x15
    308c:	89 2b       	or	r24, r25
    308e:	80 83       	st	Z, r24
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	01 c0       	rjmp	.+2      	; 0x3096 <_ZN14SoftwareSerial6listenEv+0x4c>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	08 95       	ret

0000309c <__vector_3>:
    309c:	1f 92       	push	r1
    309e:	0f 92       	push	r0
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	0f 92       	push	r0
    30a4:	11 24       	eor	r1, r1
    30a6:	2f 93       	push	r18
    30a8:	3f 93       	push	r19
    30aa:	4f 93       	push	r20
    30ac:	5f 93       	push	r21
    30ae:	6f 93       	push	r22
    30b0:	7f 93       	push	r23
    30b2:	8f 93       	push	r24
    30b4:	9f 93       	push	r25
    30b6:	af 93       	push	r26
    30b8:	bf 93       	push	r27
    30ba:	ef 93       	push	r30
    30bc:	ff 93       	push	r31
    30be:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <_ZN14SoftwareSerial13active_objectE>
    30c2:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <_ZN14SoftwareSerial13active_objectE+0x1>
    30c6:	30 97       	sbiw	r30, 0x00	; 0
    30c8:	09 f4       	brne	.+2      	; 0x30cc <__vector_3+0x30>
    30ca:	51 c0       	rjmp	.+162    	; 0x316e <__vector_3+0xd2>
    30cc:	96 8d       	ldd	r25, Z+30	; 0x1e
    30ce:	a6 85       	ldd	r26, Z+14	; 0x0e
    30d0:	b7 85       	ldd	r27, Z+15	; 0x0f
    30d2:	85 85       	ldd	r24, Z+13	; 0x0d
    30d4:	91 ff       	sbrs	r25, 1
    30d6:	04 c0       	rjmp	.+8      	; 0x30e0 <__vector_3+0x44>
    30d8:	9c 91       	ld	r25, X
    30da:	89 23       	and	r24, r25
    30dc:	29 f4       	brne	.+10     	; 0x30e8 <__vector_3+0x4c>
    30de:	47 c0       	rjmp	.+142    	; 0x316e <__vector_3+0xd2>
    30e0:	9c 91       	ld	r25, X
    30e2:	89 23       	and	r24, r25
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <__vector_3+0x4c>
    30e6:	43 c0       	rjmp	.+134    	; 0x316e <__vector_3+0xd2>
    30e8:	a3 89       	ldd	r26, Z+19	; 0x13
    30ea:	b4 89       	ldd	r27, Z+20	; 0x14
    30ec:	9c 91       	ld	r25, X
    30ee:	85 89       	ldd	r24, Z+21	; 0x15
    30f0:	80 95       	com	r24
    30f2:	89 23       	and	r24, r25
    30f4:	8c 93       	st	X, r24
    30f6:	86 89       	ldd	r24, Z+22	; 0x16
    30f8:	97 89       	ldd	r25, Z+23	; 0x17
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <__vector_3+0x5e>
    30fe:	60 8d       	ldd	r22, Z+24	; 0x18
    3100:	71 8d       	ldd	r23, Z+25	; 0x19
    3102:	a6 85       	ldd	r26, Z+14	; 0x0e
    3104:	b7 85       	ldd	r27, Z+15	; 0x0f
    3106:	55 85       	ldd	r21, Z+13	; 0x0d
    3108:	38 e0       	ldi	r19, 0x08	; 8
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	cb 01       	movw	r24, r22
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <__vector_3+0x72>
    3112:	82 2f       	mov	r24, r18
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	95 95       	asr	r25
    3118:	87 95       	ror	r24
    311a:	28 2f       	mov	r18, r24
    311c:	4c 91       	ld	r20, X
    311e:	45 23       	and	r20, r21
    3120:	09 f0       	breq	.+2      	; 0x3124 <__vector_3+0x88>
    3122:	20 68       	ori	r18, 0x80	; 128
    3124:	31 50       	subi	r19, 0x01	; 1
    3126:	91 f7       	brne	.-28     	; 0x310c <__vector_3+0x70>
    3128:	86 8d       	ldd	r24, Z+30	; 0x1e
    312a:	81 fd       	sbrc	r24, 1
    312c:	20 95       	com	r18
    312e:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	01 96       	adiw	r24, 0x01	; 1
    3136:	8f 73       	andi	r24, 0x3F	; 63
    3138:	99 27       	eor	r25, r25
    313a:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <_ZN14SoftwareSerial20_receive_buffer_headE>
    313e:	38 17       	cp	r19, r24
    3140:	49 f0       	breq	.+18     	; 0x3154 <__vector_3+0xb8>
    3142:	a0 91 03 04 	lds	r26, 0x0403	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	ac 5f       	subi	r26, 0xFC	; 252
    314a:	bb 4f       	sbci	r27, 0xFB	; 251
    314c:	2c 93       	st	X, r18
    314e:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3152:	03 c0       	rjmp	.+6      	; 0x315a <__vector_3+0xbe>
    3154:	86 8d       	ldd	r24, Z+30	; 0x1e
    3156:	81 60       	ori	r24, 0x01	; 1
    3158:	86 8f       	std	Z+30, r24	; 0x1e
    315a:	82 8d       	ldd	r24, Z+26	; 0x1a
    315c:	93 8d       	ldd	r25, Z+27	; 0x1b
    315e:	01 97       	sbiw	r24, 0x01	; 1
    3160:	f1 f7       	brne	.-4      	; 0x315e <__vector_3+0xc2>
    3162:	a3 89       	ldd	r26, Z+19	; 0x13
    3164:	b4 89       	ldd	r27, Z+20	; 0x14
    3166:	9c 91       	ld	r25, X
    3168:	85 89       	ldd	r24, Z+21	; 0x15
    316a:	89 2b       	or	r24, r25
    316c:	8c 93       	st	X, r24
    316e:	ff 91       	pop	r31
    3170:	ef 91       	pop	r30
    3172:	bf 91       	pop	r27
    3174:	af 91       	pop	r26
    3176:	9f 91       	pop	r25
    3178:	8f 91       	pop	r24
    317a:	7f 91       	pop	r23
    317c:	6f 91       	pop	r22
    317e:	5f 91       	pop	r21
    3180:	4f 91       	pop	r20
    3182:	3f 91       	pop	r19
    3184:	2f 91       	pop	r18
    3186:	0f 90       	pop	r0
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	0f 90       	pop	r0
    318c:	1f 90       	pop	r1
    318e:	18 95       	reti

00003190 <_ZN14SoftwareSerialD1Ev>:
    3190:	2c e0       	ldi	r18, 0x0C	; 12
    3192:	32 e0       	ldi	r19, 0x02	; 2
    3194:	fc 01       	movw	r30, r24
    3196:	31 83       	std	Z+1, r19	; 0x01
    3198:	20 83       	st	Z, r18
    319a:	0c 94 0f 18 	jmp	0x301e	; 0x301e <_ZN14SoftwareSerial13stopListeningEv>

0000319e <_ZN14SoftwareSerial5setTXEh>:
    319e:	1f 93       	push	r17
    31a0:	cf 93       	push	r28
    31a2:	df 93       	push	r29
    31a4:	ec 01       	movw	r28, r24
    31a6:	16 2f       	mov	r17, r22
    31a8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    31aa:	66 95       	lsr	r22
    31ac:	61 70       	andi	r22, 0x01	; 1
    31ae:	81 e0       	ldi	r24, 0x01	; 1
    31b0:	68 27       	eor	r22, r24
    31b2:	81 2f       	mov	r24, r17
    31b4:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	81 2f       	mov	r24, r17
    31bc:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    31c0:	81 2f       	mov	r24, r17
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	fc 01       	movw	r30, r24
    31c6:	ea 53       	subi	r30, 0x3A	; 58
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	e4 91       	lpm	r30, Z
    31cc:	e8 8b       	std	Y+16, r30	; 0x10
    31ce:	fc 01       	movw	r30, r24
    31d0:	e6 52       	subi	r30, 0x26	; 38
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	e4 91       	lpm	r30, Z
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	ee 0f       	add	r30, r30
    31da:	ff 1f       	adc	r31, r31
    31dc:	e8 50       	subi	r30, 0x08	; 8
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	85 91       	lpm	r24, Z+
    31e2:	94 91       	lpm	r25, Z
    31e4:	9a 8b       	std	Y+18, r25	; 0x12
    31e6:	89 8b       	std	Y+17, r24	; 0x11
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	1f 91       	pop	r17
    31ee:	08 95       	ret

000031f0 <_ZN14SoftwareSerial5setRXEh>:
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	ec 01       	movw	r28, r24
    31f8:	16 2f       	mov	r17, r22
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	81 2f       	mov	r24, r17
    31fe:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
    3202:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3204:	81 fd       	sbrc	r24, 1
    3206:	04 c0       	rjmp	.+8      	; 0x3210 <_ZN14SoftwareSerial5setRXEh+0x20>
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	81 2f       	mov	r24, r17
    320c:	0e 94 ef 20 	call	0x41de	; 0x41de <digitalWrite>
    3210:	1c 87       	std	Y+12, r17	; 0x0c
    3212:	81 2f       	mov	r24, r17
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	fc 01       	movw	r30, r24
    3218:	ea 53       	subi	r30, 0x3A	; 58
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	e4 91       	lpm	r30, Z
    321e:	ed 87       	std	Y+13, r30	; 0x0d
    3220:	fc 01       	movw	r30, r24
    3222:	e6 52       	subi	r30, 0x26	; 38
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	e4 91       	lpm	r30, Z
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	ee 0f       	add	r30, r30
    322c:	ff 1f       	adc	r31, r31
    322e:	e2 51       	subi	r30, 0x12	; 18
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	85 91       	lpm	r24, Z+
    3234:	94 91       	lpm	r25, Z
    3236:	9f 87       	std	Y+15, r25	; 0x0f
    3238:	8e 87       	std	Y+14, r24	; 0x0e
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	08 95       	ret

00003242 <_ZN14SoftwareSerialC1Ehhb>:
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	ec 01       	movw	r28, r24
    324a:	16 2f       	mov	r17, r22
    324c:	1b 82       	std	Y+3, r1	; 0x03
    324e:	1a 82       	std	Y+2, r1	; 0x02
    3250:	88 ee       	ldi	r24, 0xE8	; 232
    3252:	93 e0       	ldi	r25, 0x03	; 3
    3254:	a0 e0       	ldi	r26, 0x00	; 0
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	8c 83       	std	Y+4, r24	; 0x04
    325a:	9d 83       	std	Y+5, r25	; 0x05
    325c:	ae 83       	std	Y+6, r26	; 0x06
    325e:	bf 83       	std	Y+7, r27	; 0x07
    3260:	8c e0       	ldi	r24, 0x0C	; 12
    3262:	92 e0       	ldi	r25, 0x02	; 2
    3264:	99 83       	std	Y+1, r25	; 0x01
    3266:	88 83       	st	Y, r24
    3268:	1f 8a       	std	Y+23, r1	; 0x17
    326a:	1e 8a       	std	Y+22, r1	; 0x16
    326c:	19 8e       	std	Y+25, r1	; 0x19
    326e:	18 8e       	std	Y+24, r1	; 0x18
    3270:	1b 8e       	std	Y+27, r1	; 0x1b
    3272:	1a 8e       	std	Y+26, r1	; 0x1a
    3274:	1d 8e       	std	Y+29, r1	; 0x1d
    3276:	1c 8e       	std	Y+28, r1	; 0x1c
    3278:	8e 8d       	ldd	r24, Y+30	; 0x1e
    327a:	8e 7f       	andi	r24, 0xFE	; 254
    327c:	20 fb       	bst	r18, 0
    327e:	81 f9       	bld	r24, 1
    3280:	8e 8f       	std	Y+30, r24	; 0x1e
    3282:	64 2f       	mov	r22, r20
    3284:	ce 01       	movw	r24, r28
    3286:	0e 94 cf 18 	call	0x319e	; 0x319e <_ZN14SoftwareSerial5setTXEh>
    328a:	61 2f       	mov	r22, r17
    328c:	ce 01       	movw	r24, r28
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <_ZN14SoftwareSerial5setRXEh>

00003298 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	ec 01       	movw	r28, r24
    329e:	9a 01       	movw	r18, r20
    32a0:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    32a2:	1b 8e       	std	Y+27, r1	; 0x1b
    32a4:	1a 8e       	std	Y+26, r1	; 0x1a
    32a6:	19 8e       	std	Y+25, r1	; 0x19
    32a8:	18 8e       	std	Y+24, r1	; 0x18
    32aa:	1f 8a       	std	Y+23, r1	; 0x17
    32ac:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	79 e0       	ldi	r23, 0x09	; 9
    32b2:	8d e3       	ldi	r24, 0x3D	; 61
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <__divmodsi4>
    32ba:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    32bc:	24 30       	cpi	r18, 0x04	; 4
    32be:	31 05       	cpc	r19, r1
    32c0:	18 f0       	brcs	.+6      	; 0x32c8 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    32c2:	c9 01       	movw	r24, r18
    32c4:	03 97       	sbiw	r24, 0x03	; 3
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    32cc:	9d 8f       	std	Y+29, r25	; 0x1d
    32ce:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    32d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    32d2:	66 31       	cpi	r22, 0x16	; 22
    32d4:	08 f0       	brcs	.+2      	; 0x32d8 <_ZN14SoftwareSerial5beginEl+0x40>
    32d6:	69 c0       	rjmp	.+210    	; 0x33aa <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    32d8:	c9 01       	movw	r24, r18
    32da:	96 95       	lsr	r25
    32dc:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    32de:	84 31       	cpi	r24, 0x14	; 20
    32e0:	91 05       	cpc	r25, r1
    32e2:	10 f0       	brcs	.+4      	; 0x32e8 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
    32e4:	43 97       	sbiw	r24, 0x13	; 19
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    32ec:	9f 8b       	std	Y+23, r25	; 0x17
    32ee:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    32f0:	36 97       	sbiw	r30, 0x06	; 6
    32f2:	18 f0       	brcs	.+6      	; 0x32fa <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
    32f4:	c9 01       	movw	r24, r18
    32f6:	05 97       	sbiw	r24, 0x05	; 5
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    32fe:	99 8f       	std	Y+25, r25	; 0x19
    3300:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3302:	c9 01       	movw	r24, r18
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	28 0f       	add	r18, r24
    330a:	39 1f       	adc	r19, r25
    330c:	36 95       	lsr	r19
    330e:	27 95       	ror	r18
    3310:	36 95       	lsr	r19
    3312:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    3314:	2d 30       	cpi	r18, 0x0D	; 13
    3316:	31 05       	cpc	r19, r1
    3318:	18 f0       	brcs	.+6      	; 0x3320 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
    331a:	2c 50       	subi	r18, 0x0C	; 12
    331c:	31 09       	sbc	r19, r1
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
    3320:	21 e0       	ldi	r18, 0x01	; 1
    3322:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    3324:	3b 8f       	std	Y+27, r19	; 0x1b
    3326:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    3328:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    332c:	68 30       	cpi	r22, 0x08	; 8
    332e:	50 f0       	brcs	.+20     	; 0x3344 <_ZN14SoftwareSerial5beginEl+0xac>
    3330:	21 e0       	ldi	r18, 0x01	; 1
    3332:	6e 30       	cpi	r22, 0x0E	; 14
    3334:	08 f4       	brcc	.+2      	; 0x3338 <_ZN14SoftwareSerial5beginEl+0xa0>
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	01 c0       	rjmp	.+2      	; 0x333e <_ZN14SoftwareSerial5beginEl+0xa6>
    333c:	88 0f       	add	r24, r24
    333e:	2a 95       	dec	r18
    3340:	ea f7       	brpl	.-6      	; 0x333c <_ZN14SoftwareSerial5beginEl+0xa4>
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <_ZN14SoftwareSerial5beginEl+0xae>
    3344:	84 e0       	ldi	r24, 0x04	; 4
    3346:	89 2b       	or	r24, r25
    3348:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    334c:	9c 85       	ldd	r25, Y+12	; 0x0c
    334e:	98 30       	cpi	r25, 0x08	; 8
    3350:	38 f0       	brcs	.+14     	; 0x3360 <_ZN14SoftwareSerial5beginEl+0xc8>
    3352:	9e 30       	cpi	r25, 0x0E	; 14
    3354:	40 f0       	brcs	.+16     	; 0x3366 <_ZN14SoftwareSerial5beginEl+0xce>
    3356:	96 31       	cpi	r25, 0x16	; 22
    3358:	48 f0       	brcs	.+18     	; 0x336c <_ZN14SoftwareSerial5beginEl+0xd4>
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	08 c0       	rjmp	.+16     	; 0x3370 <_ZN14SoftwareSerial5beginEl+0xd8>
    3360:	2d e6       	ldi	r18, 0x6D	; 109
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	05 c0       	rjmp	.+10     	; 0x3370 <_ZN14SoftwareSerial5beginEl+0xd8>
    3366:	2b e6       	ldi	r18, 0x6B	; 107
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <_ZN14SoftwareSerial5beginEl+0xd8>
    336c:	2c e6       	ldi	r18, 0x6C	; 108
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	3c 8b       	std	Y+20, r19	; 0x14
    3372:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    3374:	98 30       	cpi	r25, 0x08	; 8
    3376:	30 f4       	brcc	.+12     	; 0x3384 <_ZN14SoftwareSerial5beginEl+0xec>
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	01 c0       	rjmp	.+2      	; 0x337e <_ZN14SoftwareSerial5beginEl+0xe6>
    337c:	88 0f       	add	r24, r24
    337e:	9a 95       	dec	r25
    3380:	ea f7       	brpl	.-6      	; 0x337c <_ZN14SoftwareSerial5beginEl+0xe4>
    3382:	0e c0       	rjmp	.+28     	; 0x33a0 <_ZN14SoftwareSerial5beginEl+0x108>
    3384:	29 2f       	mov	r18, r25
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	9e 30       	cpi	r25, 0x0E	; 14
    338a:	18 f4       	brcc	.+6      	; 0x3392 <_ZN14SoftwareSerial5beginEl+0xfa>
    338c:	28 50       	subi	r18, 0x08	; 8
    338e:	31 09       	sbc	r19, r1
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <_ZN14SoftwareSerial5beginEl+0xfe>
    3392:	2e 50       	subi	r18, 0x0E	; 14
    3394:	31 09       	sbc	r19, r1
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	01 c0       	rjmp	.+2      	; 0x339c <_ZN14SoftwareSerial5beginEl+0x104>
    339a:	88 0f       	add	r24, r24
    339c:	2a 95       	dec	r18
    339e:	ea f7       	brpl	.-6      	; 0x339a <_ZN14SoftwareSerial5beginEl+0x102>
    33a0:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    33a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    33aa:	ce 01       	movw	r24, r28
}
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    33b0:	0c 94 25 18 	jmp	0x304a	; 0x304a <_ZN14SoftwareSerial6listenEv>

000033b4 <__subsf3>:
    33b4:	50 58       	subi	r21, 0x80	; 128

000033b6 <__addsf3>:
    33b6:	bb 27       	eor	r27, r27
    33b8:	aa 27       	eor	r26, r26
    33ba:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <__addsf3x>
    33be:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__fp_round>
    33c2:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_pscA>
    33c6:	38 f0       	brcs	.+14     	; 0x33d6 <__addsf3+0x20>
    33c8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_pscB>
    33cc:	20 f0       	brcs	.+8      	; 0x33d6 <__addsf3+0x20>
    33ce:	39 f4       	brne	.+14     	; 0x33de <__addsf3+0x28>
    33d0:	9f 3f       	cpi	r25, 0xFF	; 255
    33d2:	19 f4       	brne	.+6      	; 0x33da <__addsf3+0x24>
    33d4:	26 f4       	brtc	.+8      	; 0x33de <__addsf3+0x28>
    33d6:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__fp_nan>
    33da:	0e f4       	brtc	.+2      	; 0x33de <__addsf3+0x28>
    33dc:	e0 95       	com	r30
    33de:	e7 fb       	bst	r30, 7
    33e0:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__fp_inf>

000033e4 <__addsf3x>:
    33e4:	e9 2f       	mov	r30, r25
    33e6:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_split3>
    33ea:	58 f3       	brcs	.-42     	; 0x33c2 <__addsf3+0xc>
    33ec:	ba 17       	cp	r27, r26
    33ee:	62 07       	cpc	r22, r18
    33f0:	73 07       	cpc	r23, r19
    33f2:	84 07       	cpc	r24, r20
    33f4:	95 07       	cpc	r25, r21
    33f6:	20 f0       	brcs	.+8      	; 0x3400 <__addsf3x+0x1c>
    33f8:	79 f4       	brne	.+30     	; 0x3418 <__addsf3x+0x34>
    33fa:	a6 f5       	brtc	.+104    	; 0x3464 <__addsf3x+0x80>
    33fc:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_zero>
    3400:	0e f4       	brtc	.+2      	; 0x3404 <__addsf3x+0x20>
    3402:	e0 95       	com	r30
    3404:	0b 2e       	mov	r0, r27
    3406:	ba 2f       	mov	r27, r26
    3408:	a0 2d       	mov	r26, r0
    340a:	0b 01       	movw	r0, r22
    340c:	b9 01       	movw	r22, r18
    340e:	90 01       	movw	r18, r0
    3410:	0c 01       	movw	r0, r24
    3412:	ca 01       	movw	r24, r20
    3414:	a0 01       	movw	r20, r0
    3416:	11 24       	eor	r1, r1
    3418:	ff 27       	eor	r31, r31
    341a:	59 1b       	sub	r21, r25
    341c:	99 f0       	breq	.+38     	; 0x3444 <__addsf3x+0x60>
    341e:	59 3f       	cpi	r21, 0xF9	; 249
    3420:	50 f4       	brcc	.+20     	; 0x3436 <__addsf3x+0x52>
    3422:	50 3e       	cpi	r21, 0xE0	; 224
    3424:	68 f1       	brcs	.+90     	; 0x3480 <__addsf3x+0x9c>
    3426:	1a 16       	cp	r1, r26
    3428:	f0 40       	sbci	r31, 0x00	; 0
    342a:	a2 2f       	mov	r26, r18
    342c:	23 2f       	mov	r18, r19
    342e:	34 2f       	mov	r19, r20
    3430:	44 27       	eor	r20, r20
    3432:	58 5f       	subi	r21, 0xF8	; 248
    3434:	f3 cf       	rjmp	.-26     	; 0x341c <__addsf3x+0x38>
    3436:	46 95       	lsr	r20
    3438:	37 95       	ror	r19
    343a:	27 95       	ror	r18
    343c:	a7 95       	ror	r26
    343e:	f0 40       	sbci	r31, 0x00	; 0
    3440:	53 95       	inc	r21
    3442:	c9 f7       	brne	.-14     	; 0x3436 <__addsf3x+0x52>
    3444:	7e f4       	brtc	.+30     	; 0x3464 <__addsf3x+0x80>
    3446:	1f 16       	cp	r1, r31
    3448:	ba 0b       	sbc	r27, r26
    344a:	62 0b       	sbc	r22, r18
    344c:	73 0b       	sbc	r23, r19
    344e:	84 0b       	sbc	r24, r20
    3450:	ba f0       	brmi	.+46     	; 0x3480 <__addsf3x+0x9c>
    3452:	91 50       	subi	r25, 0x01	; 1
    3454:	a1 f0       	breq	.+40     	; 0x347e <__addsf3x+0x9a>
    3456:	ff 0f       	add	r31, r31
    3458:	bb 1f       	adc	r27, r27
    345a:	66 1f       	adc	r22, r22
    345c:	77 1f       	adc	r23, r23
    345e:	88 1f       	adc	r24, r24
    3460:	c2 f7       	brpl	.-16     	; 0x3452 <__addsf3x+0x6e>
    3462:	0e c0       	rjmp	.+28     	; 0x3480 <__addsf3x+0x9c>
    3464:	ba 0f       	add	r27, r26
    3466:	62 1f       	adc	r22, r18
    3468:	73 1f       	adc	r23, r19
    346a:	84 1f       	adc	r24, r20
    346c:	48 f4       	brcc	.+18     	; 0x3480 <__addsf3x+0x9c>
    346e:	87 95       	ror	r24
    3470:	77 95       	ror	r23
    3472:	67 95       	ror	r22
    3474:	b7 95       	ror	r27
    3476:	f7 95       	ror	r31
    3478:	9e 3f       	cpi	r25, 0xFE	; 254
    347a:	08 f0       	brcs	.+2      	; 0x347e <__addsf3x+0x9a>
    347c:	b0 cf       	rjmp	.-160    	; 0x33de <__addsf3+0x28>
    347e:	93 95       	inc	r25
    3480:	88 0f       	add	r24, r24
    3482:	08 f0       	brcs	.+2      	; 0x3486 <__addsf3x+0xa2>
    3484:	99 27       	eor	r25, r25
    3486:	ee 0f       	add	r30, r30
    3488:	97 95       	ror	r25
    348a:	87 95       	ror	r24
    348c:	08 95       	ret

0000348e <__cmpsf2>:
    348e:	0e 94 31 1b 	call	0x3662	; 0x3662 <__fp_cmp>
    3492:	08 f4       	brcc	.+2      	; 0x3496 <__cmpsf2+0x8>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	08 95       	ret

00003498 <__divsf3>:
    3498:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <__divsf3x>
    349c:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__fp_round>
    34a0:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_pscB>
    34a4:	58 f0       	brcs	.+22     	; 0x34bc <__divsf3+0x24>
    34a6:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_pscA>
    34aa:	40 f0       	brcs	.+16     	; 0x34bc <__divsf3+0x24>
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <__divsf3+0x20>
    34ae:	5f 3f       	cpi	r21, 0xFF	; 255
    34b0:	29 f0       	breq	.+10     	; 0x34bc <__divsf3+0x24>
    34b2:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__fp_inf>
    34b6:	51 11       	cpse	r21, r1
    34b8:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__fp_szero>
    34bc:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__fp_nan>

000034c0 <__divsf3x>:
    34c0:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_split3>
    34c4:	68 f3       	brcs	.-38     	; 0x34a0 <__divsf3+0x8>

000034c6 <__divsf3_pse>:
    34c6:	99 23       	and	r25, r25
    34c8:	b1 f3       	breq	.-20     	; 0x34b6 <__divsf3+0x1e>
    34ca:	55 23       	and	r21, r21
    34cc:	91 f3       	breq	.-28     	; 0x34b2 <__divsf3+0x1a>
    34ce:	95 1b       	sub	r25, r21
    34d0:	55 0b       	sbc	r21, r21
    34d2:	bb 27       	eor	r27, r27
    34d4:	aa 27       	eor	r26, r26
    34d6:	62 17       	cp	r22, r18
    34d8:	73 07       	cpc	r23, r19
    34da:	84 07       	cpc	r24, r20
    34dc:	38 f0       	brcs	.+14     	; 0x34ec <__divsf3_pse+0x26>
    34de:	9f 5f       	subi	r25, 0xFF	; 255
    34e0:	5f 4f       	sbci	r21, 0xFF	; 255
    34e2:	22 0f       	add	r18, r18
    34e4:	33 1f       	adc	r19, r19
    34e6:	44 1f       	adc	r20, r20
    34e8:	aa 1f       	adc	r26, r26
    34ea:	a9 f3       	breq	.-22     	; 0x34d6 <__divsf3_pse+0x10>
    34ec:	35 d0       	rcall	.+106    	; 0x3558 <__divsf3_pse+0x92>
    34ee:	0e 2e       	mov	r0, r30
    34f0:	3a f0       	brmi	.+14     	; 0x3500 <__divsf3_pse+0x3a>
    34f2:	e0 e8       	ldi	r30, 0x80	; 128
    34f4:	32 d0       	rcall	.+100    	; 0x355a <__divsf3_pse+0x94>
    34f6:	91 50       	subi	r25, 0x01	; 1
    34f8:	50 40       	sbci	r21, 0x00	; 0
    34fa:	e6 95       	lsr	r30
    34fc:	00 1c       	adc	r0, r0
    34fe:	ca f7       	brpl	.-14     	; 0x34f2 <__divsf3_pse+0x2c>
    3500:	2b d0       	rcall	.+86     	; 0x3558 <__divsf3_pse+0x92>
    3502:	fe 2f       	mov	r31, r30
    3504:	29 d0       	rcall	.+82     	; 0x3558 <__divsf3_pse+0x92>
    3506:	66 0f       	add	r22, r22
    3508:	77 1f       	adc	r23, r23
    350a:	88 1f       	adc	r24, r24
    350c:	bb 1f       	adc	r27, r27
    350e:	26 17       	cp	r18, r22
    3510:	37 07       	cpc	r19, r23
    3512:	48 07       	cpc	r20, r24
    3514:	ab 07       	cpc	r26, r27
    3516:	b0 e8       	ldi	r27, 0x80	; 128
    3518:	09 f0       	breq	.+2      	; 0x351c <__divsf3_pse+0x56>
    351a:	bb 0b       	sbc	r27, r27
    351c:	80 2d       	mov	r24, r0
    351e:	bf 01       	movw	r22, r30
    3520:	ff 27       	eor	r31, r31
    3522:	93 58       	subi	r25, 0x83	; 131
    3524:	5f 4f       	sbci	r21, 0xFF	; 255
    3526:	3a f0       	brmi	.+14     	; 0x3536 <__divsf3_pse+0x70>
    3528:	9e 3f       	cpi	r25, 0xFE	; 254
    352a:	51 05       	cpc	r21, r1
    352c:	78 f0       	brcs	.+30     	; 0x354c <__divsf3_pse+0x86>
    352e:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__fp_inf>
    3532:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__fp_szero>
    3536:	5f 3f       	cpi	r21, 0xFF	; 255
    3538:	e4 f3       	brlt	.-8      	; 0x3532 <__divsf3_pse+0x6c>
    353a:	98 3e       	cpi	r25, 0xE8	; 232
    353c:	d4 f3       	brlt	.-12     	; 0x3532 <__divsf3_pse+0x6c>
    353e:	86 95       	lsr	r24
    3540:	77 95       	ror	r23
    3542:	67 95       	ror	r22
    3544:	b7 95       	ror	r27
    3546:	f7 95       	ror	r31
    3548:	9f 5f       	subi	r25, 0xFF	; 255
    354a:	c9 f7       	brne	.-14     	; 0x353e <__divsf3_pse+0x78>
    354c:	88 0f       	add	r24, r24
    354e:	91 1d       	adc	r25, r1
    3550:	96 95       	lsr	r25
    3552:	87 95       	ror	r24
    3554:	97 f9       	bld	r25, 7
    3556:	08 95       	ret
    3558:	e1 e0       	ldi	r30, 0x01	; 1
    355a:	66 0f       	add	r22, r22
    355c:	77 1f       	adc	r23, r23
    355e:	88 1f       	adc	r24, r24
    3560:	bb 1f       	adc	r27, r27
    3562:	62 17       	cp	r22, r18
    3564:	73 07       	cpc	r23, r19
    3566:	84 07       	cpc	r24, r20
    3568:	ba 07       	cpc	r27, r26
    356a:	20 f0       	brcs	.+8      	; 0x3574 <__divsf3_pse+0xae>
    356c:	62 1b       	sub	r22, r18
    356e:	73 0b       	sbc	r23, r19
    3570:	84 0b       	sbc	r24, r20
    3572:	ba 0b       	sbc	r27, r26
    3574:	ee 1f       	adc	r30, r30
    3576:	88 f7       	brcc	.-30     	; 0x355a <__divsf3_pse+0x94>
    3578:	e0 95       	com	r30
    357a:	08 95       	ret

0000357c <__fixsfsi>:
    357c:	0e 94 c5 1a 	call	0x358a	; 0x358a <__fixunssfsi>
    3580:	68 94       	set
    3582:	b1 11       	cpse	r27, r1
    3584:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__fp_szero>
    3588:	08 95       	ret

0000358a <__fixunssfsi>:
    358a:	0e 94 85 1b 	call	0x370a	; 0x370a <__fp_splitA>
    358e:	88 f0       	brcs	.+34     	; 0x35b2 <__fixunssfsi+0x28>
    3590:	9f 57       	subi	r25, 0x7F	; 127
    3592:	98 f0       	brcs	.+38     	; 0x35ba <__fixunssfsi+0x30>
    3594:	b9 2f       	mov	r27, r25
    3596:	99 27       	eor	r25, r25
    3598:	b7 51       	subi	r27, 0x17	; 23
    359a:	b0 f0       	brcs	.+44     	; 0x35c8 <__fixunssfsi+0x3e>
    359c:	e1 f0       	breq	.+56     	; 0x35d6 <__fixunssfsi+0x4c>
    359e:	66 0f       	add	r22, r22
    35a0:	77 1f       	adc	r23, r23
    35a2:	88 1f       	adc	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	1a f0       	brmi	.+6      	; 0x35ae <__fixunssfsi+0x24>
    35a8:	ba 95       	dec	r27
    35aa:	c9 f7       	brne	.-14     	; 0x359e <__fixunssfsi+0x14>
    35ac:	14 c0       	rjmp	.+40     	; 0x35d6 <__fixunssfsi+0x4c>
    35ae:	b1 30       	cpi	r27, 0x01	; 1
    35b0:	91 f0       	breq	.+36     	; 0x35d6 <__fixunssfsi+0x4c>
    35b2:	0e 94 9f 1b 	call	0x373e	; 0x373e <__fp_zero>
    35b6:	b1 e0       	ldi	r27, 0x01	; 1
    35b8:	08 95       	ret
    35ba:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__fp_zero>
    35be:	67 2f       	mov	r22, r23
    35c0:	78 2f       	mov	r23, r24
    35c2:	88 27       	eor	r24, r24
    35c4:	b8 5f       	subi	r27, 0xF8	; 248
    35c6:	39 f0       	breq	.+14     	; 0x35d6 <__fixunssfsi+0x4c>
    35c8:	b9 3f       	cpi	r27, 0xF9	; 249
    35ca:	cc f3       	brlt	.-14     	; 0x35be <__fixunssfsi+0x34>
    35cc:	86 95       	lsr	r24
    35ce:	77 95       	ror	r23
    35d0:	67 95       	ror	r22
    35d2:	b3 95       	inc	r27
    35d4:	d9 f7       	brne	.-10     	; 0x35cc <__fixunssfsi+0x42>
    35d6:	3e f4       	brtc	.+14     	; 0x35e6 <__fixunssfsi+0x5c>
    35d8:	90 95       	com	r25
    35da:	80 95       	com	r24
    35dc:	70 95       	com	r23
    35de:	61 95       	neg	r22
    35e0:	7f 4f       	sbci	r23, 0xFF	; 255
    35e2:	8f 4f       	sbci	r24, 0xFF	; 255
    35e4:	9f 4f       	sbci	r25, 0xFF	; 255
    35e6:	08 95       	ret

000035e8 <__floatunsisf>:
    35e8:	e8 94       	clt
    35ea:	09 c0       	rjmp	.+18     	; 0x35fe <__floatsisf+0x12>

000035ec <__floatsisf>:
    35ec:	97 fb       	bst	r25, 7
    35ee:	3e f4       	brtc	.+14     	; 0x35fe <__floatsisf+0x12>
    35f0:	90 95       	com	r25
    35f2:	80 95       	com	r24
    35f4:	70 95       	com	r23
    35f6:	61 95       	neg	r22
    35f8:	7f 4f       	sbci	r23, 0xFF	; 255
    35fa:	8f 4f       	sbci	r24, 0xFF	; 255
    35fc:	9f 4f       	sbci	r25, 0xFF	; 255
    35fe:	99 23       	and	r25, r25
    3600:	a9 f0       	breq	.+42     	; 0x362c <__floatsisf+0x40>
    3602:	f9 2f       	mov	r31, r25
    3604:	96 e9       	ldi	r25, 0x96	; 150
    3606:	bb 27       	eor	r27, r27
    3608:	93 95       	inc	r25
    360a:	f6 95       	lsr	r31
    360c:	87 95       	ror	r24
    360e:	77 95       	ror	r23
    3610:	67 95       	ror	r22
    3612:	b7 95       	ror	r27
    3614:	f1 11       	cpse	r31, r1
    3616:	f8 cf       	rjmp	.-16     	; 0x3608 <__floatsisf+0x1c>
    3618:	fa f4       	brpl	.+62     	; 0x3658 <__floatsisf+0x6c>
    361a:	bb 0f       	add	r27, r27
    361c:	11 f4       	brne	.+4      	; 0x3622 <__floatsisf+0x36>
    361e:	60 ff       	sbrs	r22, 0
    3620:	1b c0       	rjmp	.+54     	; 0x3658 <__floatsisf+0x6c>
    3622:	6f 5f       	subi	r22, 0xFF	; 255
    3624:	7f 4f       	sbci	r23, 0xFF	; 255
    3626:	8f 4f       	sbci	r24, 0xFF	; 255
    3628:	9f 4f       	sbci	r25, 0xFF	; 255
    362a:	16 c0       	rjmp	.+44     	; 0x3658 <__floatsisf+0x6c>
    362c:	88 23       	and	r24, r24
    362e:	11 f0       	breq	.+4      	; 0x3634 <__floatsisf+0x48>
    3630:	96 e9       	ldi	r25, 0x96	; 150
    3632:	11 c0       	rjmp	.+34     	; 0x3656 <__floatsisf+0x6a>
    3634:	77 23       	and	r23, r23
    3636:	21 f0       	breq	.+8      	; 0x3640 <__floatsisf+0x54>
    3638:	9e e8       	ldi	r25, 0x8E	; 142
    363a:	87 2f       	mov	r24, r23
    363c:	76 2f       	mov	r23, r22
    363e:	05 c0       	rjmp	.+10     	; 0x364a <__floatsisf+0x5e>
    3640:	66 23       	and	r22, r22
    3642:	71 f0       	breq	.+28     	; 0x3660 <__floatsisf+0x74>
    3644:	96 e8       	ldi	r25, 0x86	; 134
    3646:	86 2f       	mov	r24, r22
    3648:	70 e0       	ldi	r23, 0x00	; 0
    364a:	60 e0       	ldi	r22, 0x00	; 0
    364c:	2a f0       	brmi	.+10     	; 0x3658 <__floatsisf+0x6c>
    364e:	9a 95       	dec	r25
    3650:	66 0f       	add	r22, r22
    3652:	77 1f       	adc	r23, r23
    3654:	88 1f       	adc	r24, r24
    3656:	da f7       	brpl	.-10     	; 0x364e <__floatsisf+0x62>
    3658:	88 0f       	add	r24, r24
    365a:	96 95       	lsr	r25
    365c:	87 95       	ror	r24
    365e:	97 f9       	bld	r25, 7
    3660:	08 95       	ret

00003662 <__fp_cmp>:
    3662:	99 0f       	add	r25, r25
    3664:	00 08       	sbc	r0, r0
    3666:	55 0f       	add	r21, r21
    3668:	aa 0b       	sbc	r26, r26
    366a:	e0 e8       	ldi	r30, 0x80	; 128
    366c:	fe ef       	ldi	r31, 0xFE	; 254
    366e:	16 16       	cp	r1, r22
    3670:	17 06       	cpc	r1, r23
    3672:	e8 07       	cpc	r30, r24
    3674:	f9 07       	cpc	r31, r25
    3676:	c0 f0       	brcs	.+48     	; 0x36a8 <__fp_cmp+0x46>
    3678:	12 16       	cp	r1, r18
    367a:	13 06       	cpc	r1, r19
    367c:	e4 07       	cpc	r30, r20
    367e:	f5 07       	cpc	r31, r21
    3680:	98 f0       	brcs	.+38     	; 0x36a8 <__fp_cmp+0x46>
    3682:	62 1b       	sub	r22, r18
    3684:	73 0b       	sbc	r23, r19
    3686:	84 0b       	sbc	r24, r20
    3688:	95 0b       	sbc	r25, r21
    368a:	39 f4       	brne	.+14     	; 0x369a <__fp_cmp+0x38>
    368c:	0a 26       	eor	r0, r26
    368e:	61 f0       	breq	.+24     	; 0x36a8 <__fp_cmp+0x46>
    3690:	23 2b       	or	r18, r19
    3692:	24 2b       	or	r18, r20
    3694:	25 2b       	or	r18, r21
    3696:	21 f4       	brne	.+8      	; 0x36a0 <__fp_cmp+0x3e>
    3698:	08 95       	ret
    369a:	0a 26       	eor	r0, r26
    369c:	09 f4       	brne	.+2      	; 0x36a0 <__fp_cmp+0x3e>
    369e:	a1 40       	sbci	r26, 0x01	; 1
    36a0:	a6 95       	lsr	r26
    36a2:	8f ef       	ldi	r24, 0xFF	; 255
    36a4:	81 1d       	adc	r24, r1
    36a6:	81 1d       	adc	r24, r1
    36a8:	08 95       	ret

000036aa <__fp_inf>:
    36aa:	97 f9       	bld	r25, 7
    36ac:	9f 67       	ori	r25, 0x7F	; 127
    36ae:	80 e8       	ldi	r24, 0x80	; 128
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	08 95       	ret

000036b6 <__fp_nan>:
    36b6:	9f ef       	ldi	r25, 0xFF	; 255
    36b8:	80 ec       	ldi	r24, 0xC0	; 192
    36ba:	08 95       	ret

000036bc <__fp_pscA>:
    36bc:	00 24       	eor	r0, r0
    36be:	0a 94       	dec	r0
    36c0:	16 16       	cp	r1, r22
    36c2:	17 06       	cpc	r1, r23
    36c4:	18 06       	cpc	r1, r24
    36c6:	09 06       	cpc	r0, r25
    36c8:	08 95       	ret

000036ca <__fp_pscB>:
    36ca:	00 24       	eor	r0, r0
    36cc:	0a 94       	dec	r0
    36ce:	12 16       	cp	r1, r18
    36d0:	13 06       	cpc	r1, r19
    36d2:	14 06       	cpc	r1, r20
    36d4:	05 06       	cpc	r0, r21
    36d6:	08 95       	ret

000036d8 <__fp_round>:
    36d8:	09 2e       	mov	r0, r25
    36da:	03 94       	inc	r0
    36dc:	00 0c       	add	r0, r0
    36de:	11 f4       	brne	.+4      	; 0x36e4 <__fp_round+0xc>
    36e0:	88 23       	and	r24, r24
    36e2:	52 f0       	brmi	.+20     	; 0x36f8 <__fp_round+0x20>
    36e4:	bb 0f       	add	r27, r27
    36e6:	40 f4       	brcc	.+16     	; 0x36f8 <__fp_round+0x20>
    36e8:	bf 2b       	or	r27, r31
    36ea:	11 f4       	brne	.+4      	; 0x36f0 <__fp_round+0x18>
    36ec:	60 ff       	sbrs	r22, 0
    36ee:	04 c0       	rjmp	.+8      	; 0x36f8 <__fp_round+0x20>
    36f0:	6f 5f       	subi	r22, 0xFF	; 255
    36f2:	7f 4f       	sbci	r23, 0xFF	; 255
    36f4:	8f 4f       	sbci	r24, 0xFF	; 255
    36f6:	9f 4f       	sbci	r25, 0xFF	; 255
    36f8:	08 95       	ret

000036fa <__fp_split3>:
    36fa:	57 fd       	sbrc	r21, 7
    36fc:	90 58       	subi	r25, 0x80	; 128
    36fe:	44 0f       	add	r20, r20
    3700:	55 1f       	adc	r21, r21
    3702:	59 f0       	breq	.+22     	; 0x371a <__fp_splitA+0x10>
    3704:	5f 3f       	cpi	r21, 0xFF	; 255
    3706:	71 f0       	breq	.+28     	; 0x3724 <__fp_splitA+0x1a>
    3708:	47 95       	ror	r20

0000370a <__fp_splitA>:
    370a:	88 0f       	add	r24, r24
    370c:	97 fb       	bst	r25, 7
    370e:	99 1f       	adc	r25, r25
    3710:	61 f0       	breq	.+24     	; 0x372a <__fp_splitA+0x20>
    3712:	9f 3f       	cpi	r25, 0xFF	; 255
    3714:	79 f0       	breq	.+30     	; 0x3734 <__fp_splitA+0x2a>
    3716:	87 95       	ror	r24
    3718:	08 95       	ret
    371a:	12 16       	cp	r1, r18
    371c:	13 06       	cpc	r1, r19
    371e:	14 06       	cpc	r1, r20
    3720:	55 1f       	adc	r21, r21
    3722:	f2 cf       	rjmp	.-28     	; 0x3708 <__fp_split3+0xe>
    3724:	46 95       	lsr	r20
    3726:	f1 df       	rcall	.-30     	; 0x370a <__fp_splitA>
    3728:	08 c0       	rjmp	.+16     	; 0x373a <__fp_splitA+0x30>
    372a:	16 16       	cp	r1, r22
    372c:	17 06       	cpc	r1, r23
    372e:	18 06       	cpc	r1, r24
    3730:	99 1f       	adc	r25, r25
    3732:	f1 cf       	rjmp	.-30     	; 0x3716 <__fp_splitA+0xc>
    3734:	86 95       	lsr	r24
    3736:	71 05       	cpc	r23, r1
    3738:	61 05       	cpc	r22, r1
    373a:	08 94       	sec
    373c:	08 95       	ret

0000373e <__fp_zero>:
    373e:	e8 94       	clt

00003740 <__fp_szero>:
    3740:	bb 27       	eor	r27, r27
    3742:	66 27       	eor	r22, r22
    3744:	77 27       	eor	r23, r23
    3746:	cb 01       	movw	r24, r22
    3748:	97 f9       	bld	r25, 7
    374a:	08 95       	ret

0000374c <__mulsf3>:
    374c:	0e 94 b9 1b 	call	0x3772	; 0x3772 <__mulsf3x>
    3750:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__fp_round>
    3754:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_pscA>
    3758:	38 f0       	brcs	.+14     	; 0x3768 <__mulsf3+0x1c>
    375a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fp_pscB>
    375e:	20 f0       	brcs	.+8      	; 0x3768 <__mulsf3+0x1c>
    3760:	95 23       	and	r25, r21
    3762:	11 f0       	breq	.+4      	; 0x3768 <__mulsf3+0x1c>
    3764:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__fp_inf>
    3768:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__fp_nan>
    376c:	11 24       	eor	r1, r1
    376e:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__fp_szero>

00003772 <__mulsf3x>:
    3772:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <__fp_split3>
    3776:	70 f3       	brcs	.-36     	; 0x3754 <__mulsf3+0x8>

00003778 <__mulsf3_pse>:
    3778:	95 9f       	mul	r25, r21
    377a:	c1 f3       	breq	.-16     	; 0x376c <__mulsf3+0x20>
    377c:	95 0f       	add	r25, r21
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	55 1f       	adc	r21, r21
    3782:	62 9f       	mul	r22, r18
    3784:	f0 01       	movw	r30, r0
    3786:	72 9f       	mul	r23, r18
    3788:	bb 27       	eor	r27, r27
    378a:	f0 0d       	add	r31, r0
    378c:	b1 1d       	adc	r27, r1
    378e:	63 9f       	mul	r22, r19
    3790:	aa 27       	eor	r26, r26
    3792:	f0 0d       	add	r31, r0
    3794:	b1 1d       	adc	r27, r1
    3796:	aa 1f       	adc	r26, r26
    3798:	64 9f       	mul	r22, r20
    379a:	66 27       	eor	r22, r22
    379c:	b0 0d       	add	r27, r0
    379e:	a1 1d       	adc	r26, r1
    37a0:	66 1f       	adc	r22, r22
    37a2:	82 9f       	mul	r24, r18
    37a4:	22 27       	eor	r18, r18
    37a6:	b0 0d       	add	r27, r0
    37a8:	a1 1d       	adc	r26, r1
    37aa:	62 1f       	adc	r22, r18
    37ac:	73 9f       	mul	r23, r19
    37ae:	b0 0d       	add	r27, r0
    37b0:	a1 1d       	adc	r26, r1
    37b2:	62 1f       	adc	r22, r18
    37b4:	83 9f       	mul	r24, r19
    37b6:	a0 0d       	add	r26, r0
    37b8:	61 1d       	adc	r22, r1
    37ba:	22 1f       	adc	r18, r18
    37bc:	74 9f       	mul	r23, r20
    37be:	33 27       	eor	r19, r19
    37c0:	a0 0d       	add	r26, r0
    37c2:	61 1d       	adc	r22, r1
    37c4:	23 1f       	adc	r18, r19
    37c6:	84 9f       	mul	r24, r20
    37c8:	60 0d       	add	r22, r0
    37ca:	21 1d       	adc	r18, r1
    37cc:	82 2f       	mov	r24, r18
    37ce:	76 2f       	mov	r23, r22
    37d0:	6a 2f       	mov	r22, r26
    37d2:	11 24       	eor	r1, r1
    37d4:	9f 57       	subi	r25, 0x7F	; 127
    37d6:	50 40       	sbci	r21, 0x00	; 0
    37d8:	9a f0       	brmi	.+38     	; 0x3800 <__mulsf3_pse+0x88>
    37da:	f1 f0       	breq	.+60     	; 0x3818 <__mulsf3_pse+0xa0>
    37dc:	88 23       	and	r24, r24
    37de:	4a f0       	brmi	.+18     	; 0x37f2 <__mulsf3_pse+0x7a>
    37e0:	ee 0f       	add	r30, r30
    37e2:	ff 1f       	adc	r31, r31
    37e4:	bb 1f       	adc	r27, r27
    37e6:	66 1f       	adc	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	88 1f       	adc	r24, r24
    37ec:	91 50       	subi	r25, 0x01	; 1
    37ee:	50 40       	sbci	r21, 0x00	; 0
    37f0:	a9 f7       	brne	.-22     	; 0x37dc <__mulsf3_pse+0x64>
    37f2:	9e 3f       	cpi	r25, 0xFE	; 254
    37f4:	51 05       	cpc	r21, r1
    37f6:	80 f0       	brcs	.+32     	; 0x3818 <__mulsf3_pse+0xa0>
    37f8:	0c 94 55 1b 	jmp	0x36aa	; 0x36aa <__fp_inf>
    37fc:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__fp_szero>
    3800:	5f 3f       	cpi	r21, 0xFF	; 255
    3802:	e4 f3       	brlt	.-8      	; 0x37fc <__mulsf3_pse+0x84>
    3804:	98 3e       	cpi	r25, 0xE8	; 232
    3806:	d4 f3       	brlt	.-12     	; 0x37fc <__mulsf3_pse+0x84>
    3808:	86 95       	lsr	r24
    380a:	77 95       	ror	r23
    380c:	67 95       	ror	r22
    380e:	b7 95       	ror	r27
    3810:	f7 95       	ror	r31
    3812:	e7 95       	ror	r30
    3814:	9f 5f       	subi	r25, 0xFF	; 255
    3816:	c1 f7       	brne	.-16     	; 0x3808 <__mulsf3_pse+0x90>
    3818:	fe 2b       	or	r31, r30
    381a:	88 0f       	add	r24, r24
    381c:	91 1d       	adc	r25, r1
    381e:	96 95       	lsr	r25
    3820:	87 95       	ror	r24
    3822:	97 f9       	bld	r25, 7
    3824:	08 95       	ret

00003826 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    3826:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    3828:	91 8d       	ldd	r25, Z+25	; 0x19
    382a:	22 8d       	ldd	r18, Z+26	; 0x1a
    382c:	89 2f       	mov	r24, r25
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	80 5c       	subi	r24, 0xC0	; 192
    3832:	9f 4f       	sbci	r25, 0xFF	; 255
    3834:	82 1b       	sub	r24, r18
    3836:	91 09       	sbc	r25, r1
}
    3838:	8f 73       	andi	r24, 0x3F	; 63
    383a:	99 27       	eor	r25, r25
    383c:	08 95       	ret

0000383e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    383e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3840:	91 8d       	ldd	r25, Z+25	; 0x19
    3842:	82 8d       	ldd	r24, Z+26	; 0x1a
    3844:	98 17       	cp	r25, r24
    3846:	31 f0       	breq	.+12     	; 0x3854 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3848:	82 8d       	ldd	r24, Z+26	; 0x1a
    384a:	e8 0f       	add	r30, r24
    384c:	f1 1d       	adc	r31, r1
    384e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3854:	8f ef       	ldi	r24, 0xFF	; 255
    3856:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3858:	08 95       	ret

0000385a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    385a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    385c:	91 8d       	ldd	r25, Z+25	; 0x19
    385e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3860:	98 17       	cp	r25, r24
    3862:	61 f0       	breq	.+24     	; 0x387c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3864:	82 8d       	ldd	r24, Z+26	; 0x1a
    3866:	df 01       	movw	r26, r30
    3868:	a8 0f       	add	r26, r24
    386a:	b1 1d       	adc	r27, r1
    386c:	5d 96       	adiw	r26, 0x1d	; 29
    386e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3870:	92 8d       	ldd	r25, Z+26	; 0x1a
    3872:	9f 5f       	subi	r25, 0xFF	; 255
    3874:	9f 73       	andi	r25, 0x3F	; 63
    3876:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    387c:	8f ef       	ldi	r24, 0xFF	; 255
    387e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3880:	08 95       	ret

00003882 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    3882:	fc 01       	movw	r30, r24
    3884:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    3886:	44 8d       	ldd	r20, Z+28	; 0x1c
    3888:	25 2f       	mov	r18, r21
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	84 2f       	mov	r24, r20
    388e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3890:	82 1b       	sub	r24, r18
    3892:	93 0b       	sbc	r25, r19
    3894:	54 17       	cp	r21, r20
    3896:	10 f0       	brcs	.+4      	; 0x389c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3898:	cf 96       	adiw	r24, 0x3f	; 63
    389a:	08 95       	ret
  return tail - head - 1;
    389c:	01 97       	sbiw	r24, 0x01	; 1
}
    389e:	08 95       	ret

000038a0 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    38a0:	8c ea       	ldi	r24, 0xAC	; 172
    38a2:	9d e1       	ldi	r25, 0x1D	; 29
    38a4:	89 2b       	or	r24, r25
    38a6:	49 f0       	breq	.+18     	; 0x38ba <_Z14serialEventRunv+0x1a>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	89 2b       	or	r24, r25
    38ae:	29 f0       	breq	.+10     	; 0x38ba <_Z14serialEventRunv+0x1a>
    38b0:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <_Z17Serial0_availablev>
    38b4:	81 11       	cpse	r24, r1
    38b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    38ba:	08 95       	ret

000038bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    38bc:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    38be:	84 8d       	ldd	r24, Z+28	; 0x1c
    38c0:	df 01       	movw	r26, r30
    38c2:	a8 0f       	add	r26, r24
    38c4:	b1 1d       	adc	r27, r1
    38c6:	a3 5a       	subi	r26, 0xA3	; 163
    38c8:	bf 4f       	sbci	r27, 0xFF	; 255
    38ca:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    38cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	01 96       	adiw	r24, 0x01	; 1
    38d2:	8f 73       	andi	r24, 0x3F	; 63
    38d4:	99 27       	eor	r25, r25
    38d6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    38d8:	a6 89       	ldd	r26, Z+22	; 0x16
    38da:	b7 89       	ldd	r27, Z+23	; 0x17
    38dc:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    38de:	a0 89       	ldd	r26, Z+16	; 0x10
    38e0:	b1 89       	ldd	r27, Z+17	; 0x11
    38e2:	8c 91       	ld	r24, X
    38e4:	83 70       	andi	r24, 0x03	; 3
    38e6:	80 64       	ori	r24, 0x40	; 64
    38e8:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    38ea:	93 8d       	ldd	r25, Z+27	; 0x1b
    38ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    38ee:	98 13       	cpse	r25, r24
    38f0:	06 c0       	rjmp	.+12     	; 0x38fe <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    38f2:	02 88       	ldd	r0, Z+18	; 0x12
    38f4:	f3 89       	ldd	r31, Z+19	; 0x13
    38f6:	e0 2d       	mov	r30, r0
    38f8:	80 81       	ld	r24, Z
    38fa:	8f 7d       	andi	r24, 0xDF	; 223
    38fc:	80 83       	st	Z, r24
    38fe:	08 95       	ret

00003900 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    3900:	ef 92       	push	r14
    3902:	ff 92       	push	r15
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
    390c:	ec 01       	movw	r28, r24
  _written = true;
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3912:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3916:	98 13       	cpse	r25, r24
    3918:	05 c0       	rjmp	.+10     	; 0x3924 <_ZN14HardwareSerial5writeEh+0x24>
    391a:	e8 89       	ldd	r30, Y+16	; 0x10
    391c:	f9 89       	ldd	r31, Y+17	; 0x11
    391e:	80 81       	ld	r24, Z
    3920:	85 fd       	sbrc	r24, 5
    3922:	26 c0       	rjmp	.+76     	; 0x3970 <_ZN14HardwareSerial5writeEh+0x70>
    3924:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3926:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3928:	10 e0       	ldi	r17, 0x00	; 0
    392a:	0f 5f       	subi	r16, 0xFF	; 255
    392c:	1f 4f       	sbci	r17, 0xFF	; 255
    392e:	0f 73       	andi	r16, 0x3F	; 63
    3930:	11 27       	eor	r17, r17
    3932:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3934:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3936:	e8 12       	cpse	r14, r24
    3938:	0c c0       	rjmp	.+24     	; 0x3952 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    393a:	0f b6       	in	r0, 0x3f	; 63
    393c:	07 fc       	sbrc	r0, 7
    393e:	fa cf       	rjmp	.-12     	; 0x3934 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3940:	e8 89       	ldd	r30, Y+16	; 0x10
    3942:	f9 89       	ldd	r31, Y+17	; 0x11
    3944:	80 81       	ld	r24, Z
    3946:	85 ff       	sbrs	r24, 5
    3948:	f5 cf       	rjmp	.-22     	; 0x3934 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    394a:	ce 01       	movw	r24, r28
    394c:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3950:	f1 cf       	rjmp	.-30     	; 0x3934 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3954:	fe 01       	movw	r30, r28
    3956:	e8 0f       	add	r30, r24
    3958:	f1 1d       	adc	r31, r1
    395a:	e3 5a       	subi	r30, 0xA3	; 163
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3960:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3962:	f8 94       	cli
    _tx_buffer_head = i;
    3964:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    3966:	ea 89       	ldd	r30, Y+18	; 0x12
    3968:	fb 89       	ldd	r31, Y+19	; 0x13
    396a:	80 81       	ld	r24, Z
    396c:	80 62       	ori	r24, 0x20	; 32
    396e:	0a c0       	rjmp	.+20     	; 0x3984 <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3970:	9f b7       	in	r25, 0x3f	; 63
    3972:	f8 94       	cli
      *_udr = c;
    3974:	ee 89       	ldd	r30, Y+22	; 0x16
    3976:	ff 89       	ldd	r31, Y+23	; 0x17
    3978:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    397a:	e8 89       	ldd	r30, Y+16	; 0x10
    397c:	f9 89       	ldd	r31, Y+17	; 0x11
    397e:	80 81       	ld	r24, Z
    3980:	83 70       	andi	r24, 0x03	; 3
    3982:	80 64       	ori	r24, 0x40	; 64
    3984:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3986:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	df 91       	pop	r29
    398e:	cf 91       	pop	r28
    3990:	1f 91       	pop	r17
    3992:	0f 91       	pop	r16
    3994:	ff 90       	pop	r15
    3996:	ef 90       	pop	r14
    3998:	08 95       	ret

0000399a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    39a0:	88 8d       	ldd	r24, Y+24	; 0x18
    39a2:	88 23       	and	r24, r24
    39a4:	c9 f0       	breq	.+50     	; 0x39d8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    39a6:	ea 89       	ldd	r30, Y+18	; 0x12
    39a8:	fb 89       	ldd	r31, Y+19	; 0x13
    39aa:	80 81       	ld	r24, Z
    39ac:	85 fd       	sbrc	r24, 5
    39ae:	05 c0       	rjmp	.+10     	; 0x39ba <_ZN14HardwareSerial5flushEv+0x20>
    39b0:	a8 89       	ldd	r26, Y+16	; 0x10
    39b2:	b9 89       	ldd	r27, Y+17	; 0x11
    39b4:	8c 91       	ld	r24, X
    39b6:	86 fd       	sbrc	r24, 6
    39b8:	0f c0       	rjmp	.+30     	; 0x39d8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	07 fc       	sbrc	r0, 7
    39be:	f5 cf       	rjmp	.-22     	; 0x39aa <_ZN14HardwareSerial5flushEv+0x10>
    39c0:	80 81       	ld	r24, Z
    39c2:	85 ff       	sbrs	r24, 5
    39c4:	f2 cf       	rjmp	.-28     	; 0x39aa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    39c6:	a8 89       	ldd	r26, Y+16	; 0x10
    39c8:	b9 89       	ldd	r27, Y+17	; 0x11
    39ca:	8c 91       	ld	r24, X
    39cc:	85 ff       	sbrs	r24, 5
    39ce:	ed cf       	rjmp	.-38     	; 0x39aa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    39d0:	ce 01       	movw	r24, r28
    39d2:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    39d6:	e7 cf       	rjmp	.-50     	; 0x39a6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    39d8:	df 91       	pop	r29
    39da:	cf 91       	pop	r28
    39dc:	08 95       	ret

000039de <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    39de:	cf 92       	push	r12
    39e0:	df 92       	push	r13
    39e2:	ef 92       	push	r14
    39e4:	ff 92       	push	r15
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
    39ec:	ec 01       	movw	r28, r24
    39ee:	6a 01       	movw	r12, r20
    39f0:	7b 01       	movw	r14, r22
    39f2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    39f4:	e8 89       	ldd	r30, Y+16	; 0x10
    39f6:	f9 89       	ldd	r31, Y+17	; 0x11
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    39fc:	41 15       	cp	r20, r1
    39fe:	51 4e       	sbci	r21, 0xE1	; 225
    3a00:	61 05       	cpc	r22, r1
    3a02:	71 05       	cpc	r23, r1
    3a04:	b1 f0       	breq	.+44     	; 0x3a32 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	79 e0       	ldi	r23, 0x09	; 9
    3a0a:	8d e3       	ldi	r24, 0x3D	; 61
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	a7 01       	movw	r20, r14
    3a10:	96 01       	movw	r18, r12
    3a12:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodsi4>
    3a16:	da 01       	movw	r26, r20
    3a18:	c9 01       	movw	r24, r18
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	a1 09       	sbc	r26, r1
    3a1e:	b1 09       	sbc	r27, r1
    3a20:	b6 95       	lsr	r27
    3a22:	a7 95       	ror	r26
    3a24:	97 95       	ror	r25
    3a26:	87 95       	ror	r24
    3a28:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    3a2a:	21 15       	cp	r18, r1
    3a2c:	80 e1       	ldi	r24, 0x10	; 16
    3a2e:	38 07       	cpc	r19, r24
    3a30:	a8 f0       	brcs	.+42     	; 0x3a5c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    3a32:	e8 89       	ldd	r30, Y+16	; 0x10
    3a34:	f9 89       	ldd	r31, Y+17	; 0x11
    3a36:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    3a38:	60 e8       	ldi	r22, 0x80	; 128
    3a3a:	74 e8       	ldi	r23, 0x84	; 132
    3a3c:	8e e1       	ldi	r24, 0x1E	; 30
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	a7 01       	movw	r20, r14
    3a42:	96 01       	movw	r18, r12
    3a44:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodsi4>
    3a48:	da 01       	movw	r26, r20
    3a4a:	c9 01       	movw	r24, r18
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	a1 09       	sbc	r26, r1
    3a50:	b1 09       	sbc	r27, r1
    3a52:	b6 95       	lsr	r27
    3a54:	a7 95       	ror	r26
    3a56:	97 95       	ror	r25
    3a58:	87 95       	ror	r24
    3a5a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    3a5c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a5e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3a60:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    3a62:	ee 85       	ldd	r30, Y+14	; 0x0e
    3a64:	ff 85       	ldd	r31, Y+15	; 0x0f
    3a66:	20 83       	st	Z, r18

  _written = false;
    3a68:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3a6a:	ec 89       	ldd	r30, Y+20	; 0x14
    3a6c:	fd 89       	ldd	r31, Y+21	; 0x15
    3a6e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    3a70:	ea 89       	ldd	r30, Y+18	; 0x12
    3a72:	fb 89       	ldd	r31, Y+19	; 0x13
    3a74:	80 81       	ld	r24, Z
    3a76:	80 61       	ori	r24, 0x10	; 16
    3a78:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    3a7a:	ea 89       	ldd	r30, Y+18	; 0x12
    3a7c:	fb 89       	ldd	r31, Y+19	; 0x13
    3a7e:	80 81       	ld	r24, Z
    3a80:	88 60       	ori	r24, 0x08	; 8
    3a82:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    3a84:	ea 89       	ldd	r30, Y+18	; 0x12
    3a86:	fb 89       	ldd	r31, Y+19	; 0x13
    3a88:	80 81       	ld	r24, Z
    3a8a:	80 68       	ori	r24, 0x80	; 128
    3a8c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    3a8e:	ea 89       	ldd	r30, Y+18	; 0x12
    3a90:	fb 89       	ldd	r31, Y+19	; 0x13
    3a92:	80 81       	ld	r24, Z
    3a94:	8f 7d       	andi	r24, 0xDF	; 223
    3a96:	80 83       	st	Z, r24
}
    3a98:	df 91       	pop	r29
    3a9a:	cf 91       	pop	r28
    3a9c:	1f 91       	pop	r17
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	08 95       	ret

00003aa8 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3aa8:	1f 92       	push	r1
    3aaa:	0f 92       	push	r0
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	0f 92       	push	r0
    3ab0:	11 24       	eor	r1, r1
    3ab2:	2f 93       	push	r18
    3ab4:	8f 93       	push	r24
    3ab6:	9f 93       	push	r25
    3ab8:	ef 93       	push	r30
    3aba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3abc:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <Serial+0x10>
    3ac0:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <Serial+0x11>
    3ac4:	80 81       	ld	r24, Z
    3ac6:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <Serial+0x16>
    3aca:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <Serial+0x17>
    3ace:	82 fd       	sbrc	r24, 2
    3ad0:	12 c0       	rjmp	.+36     	; 0x3af6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3ad2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3ad4:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <Serial+0x19>
    3ad8:	8f 5f       	subi	r24, 0xFF	; 255
    3ada:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3adc:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <Serial+0x1a>
    3ae0:	82 17       	cp	r24, r18
    3ae2:	51 f0       	breq	.+20     	; 0x3af8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    3ae4:	e0 91 5f 04 	lds	r30, 0x045F	; 0x80045f <Serial+0x19>
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	ea 5b       	subi	r30, 0xBA	; 186
    3aec:	fb 4f       	sbci	r31, 0xFB	; 251
    3aee:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    3af0:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <Serial+0x19>
    3af4:	01 c0       	rjmp	.+2      	; 0x3af8 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3af6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    3af8:	ff 91       	pop	r31
    3afa:	ef 91       	pop	r30
    3afc:	9f 91       	pop	r25
    3afe:	8f 91       	pop	r24
    3b00:	2f 91       	pop	r18
    3b02:	0f 90       	pop	r0
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	0f 90       	pop	r0
    3b08:	1f 90       	pop	r1
    3b0a:	18 95       	reti

00003b0c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3b0c:	1f 92       	push	r1
    3b0e:	0f 92       	push	r0
    3b10:	0f b6       	in	r0, 0x3f	; 63
    3b12:	0f 92       	push	r0
    3b14:	11 24       	eor	r1, r1
    3b16:	2f 93       	push	r18
    3b18:	3f 93       	push	r19
    3b1a:	4f 93       	push	r20
    3b1c:	5f 93       	push	r21
    3b1e:	6f 93       	push	r22
    3b20:	7f 93       	push	r23
    3b22:	8f 93       	push	r24
    3b24:	9f 93       	push	r25
    3b26:	af 93       	push	r26
    3b28:	bf 93       	push	r27
    3b2a:	ef 93       	push	r30
    3b2c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    3b2e:	86 e4       	ldi	r24, 0x46	; 70
    3b30:	94 e0       	ldi	r25, 0x04	; 4
    3b32:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3b36:	ff 91       	pop	r31
    3b38:	ef 91       	pop	r30
    3b3a:	bf 91       	pop	r27
    3b3c:	af 91       	pop	r26
    3b3e:	9f 91       	pop	r25
    3b40:	8f 91       	pop	r24
    3b42:	7f 91       	pop	r23
    3b44:	6f 91       	pop	r22
    3b46:	5f 91       	pop	r21
    3b48:	4f 91       	pop	r20
    3b4a:	3f 91       	pop	r19
    3b4c:	2f 91       	pop	r18
    3b4e:	0f 90       	pop	r0
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	0f 90       	pop	r0
    3b54:	1f 90       	pop	r1
    3b56:	18 95       	reti

00003b58 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3b58:	86 e4       	ldi	r24, 0x46	; 70
    3b5a:	94 e0       	ldi	r25, 0x04	; 4
    3b5c:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN14HardwareSerial9availableEv>
    3b60:	21 e0       	ldi	r18, 0x01	; 1
    3b62:	89 2b       	or	r24, r25
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <_Z17Serial0_availablev+0x10>
    3b66:	20 e0       	ldi	r18, 0x00	; 0
}
    3b68:	82 2f       	mov	r24, r18
    3b6a:	08 95       	ret

00003b6c <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3b6c:	e6 e4       	ldi	r30, 0x46	; 70
    3b6e:	f4 e0       	ldi	r31, 0x04	; 4
    3b70:	13 82       	std	Z+3, r1	; 0x03
    3b72:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    3b74:	88 ee       	ldi	r24, 0xE8	; 232
    3b76:	93 e0       	ldi	r25, 0x03	; 3
    3b78:	a0 e0       	ldi	r26, 0x00	; 0
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	84 83       	std	Z+4, r24	; 0x04
    3b7e:	95 83       	std	Z+5, r25	; 0x05
    3b80:	a6 83       	std	Z+6, r26	; 0x06
    3b82:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3b84:	8e e1       	ldi	r24, 0x1E	; 30
    3b86:	92 e0       	ldi	r25, 0x02	; 2
    3b88:	91 83       	std	Z+1, r25	; 0x01
    3b8a:	80 83       	st	Z, r24
    3b8c:	85 ec       	ldi	r24, 0xC5	; 197
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	95 87       	std	Z+13, r25	; 0x0d
    3b92:	84 87       	std	Z+12, r24	; 0x0c
    3b94:	84 ec       	ldi	r24, 0xC4	; 196
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	97 87       	std	Z+15, r25	; 0x0f
    3b9a:	86 87       	std	Z+14, r24	; 0x0e
    3b9c:	80 ec       	ldi	r24, 0xC0	; 192
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	91 8b       	std	Z+17, r25	; 0x11
    3ba2:	80 8b       	std	Z+16, r24	; 0x10
    3ba4:	81 ec       	ldi	r24, 0xC1	; 193
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	93 8b       	std	Z+19, r25	; 0x13
    3baa:	82 8b       	std	Z+18, r24	; 0x12
    3bac:	82 ec       	ldi	r24, 0xC2	; 194
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	95 8b       	std	Z+21, r25	; 0x15
    3bb2:	84 8b       	std	Z+20, r24	; 0x14
    3bb4:	86 ec       	ldi	r24, 0xC6	; 198
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	97 8b       	std	Z+23, r25	; 0x17
    3bba:	86 8b       	std	Z+22, r24	; 0x16
    3bbc:	11 8e       	std	Z+25, r1	; 0x19
    3bbe:	12 8e       	std	Z+26, r1	; 0x1a
    3bc0:	13 8e       	std	Z+27, r1	; 0x1b
    3bc2:	14 8e       	std	Z+28, r1	; 0x1c
    3bc4:	08 95       	ret

00003bc6 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    3bc6:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <init>

	initVariant();
    3bca:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    3bce:	0e 94 31 06 	call	0xc62	; 0xc62 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    3bd2:	c0 e5       	ldi	r28, 0x50	; 80
    3bd4:	dc e1       	ldi	r29, 0x1C	; 28
#endif
	
	setup();
    
	for (;;) {
		loop();
    3bd6:	0e 94 93 06 	call	0xd26	; 0xd26 <loop>
		if (serialEventRun) serialEventRun();
    3bda:	20 97       	sbiw	r28, 0x00	; 0
    3bdc:	e1 f3       	breq	.-8      	; 0x3bd6 <main+0x10>
    3bde:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <_Z14serialEventRunv>
    3be2:	f9 cf       	rjmp	.-14     	; 0x3bd6 <main+0x10>

00003be4 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3be4:	cf 92       	push	r12
    3be6:	df 92       	push	r13
    3be8:	ef 92       	push	r14
    3bea:	ff 92       	push	r15
    3bec:	0f 93       	push	r16
    3bee:	1f 93       	push	r17
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	6c 01       	movw	r12, r24
    3bf6:	7a 01       	movw	r14, r20
    3bf8:	8b 01       	movw	r16, r22
    3bfa:	c0 e0       	ldi	r28, 0x00	; 0
    3bfc:	d0 e0       	ldi	r29, 0x00	; 0
    3bfe:	ce 15       	cp	r28, r14
    3c00:	df 05       	cpc	r29, r15
    3c02:	81 f0       	breq	.+32     	; 0x3c24 <_ZN5Print5writeEPKhj+0x40>
    3c04:	d8 01       	movw	r26, r16
    3c06:	6d 91       	ld	r22, X+
    3c08:	8d 01       	movw	r16, r26
    3c0a:	d6 01       	movw	r26, r12
    3c0c:	ed 91       	ld	r30, X+
    3c0e:	fc 91       	ld	r31, X
    3c10:	01 90       	ld	r0, Z+
    3c12:	f0 81       	ld	r31, Z
    3c14:	e0 2d       	mov	r30, r0
    3c16:	c6 01       	movw	r24, r12
    3c18:	09 95       	icall
    3c1a:	89 2b       	or	r24, r25
    3c1c:	11 f0       	breq	.+4      	; 0x3c22 <_ZN5Print5writeEPKhj+0x3e>
    3c1e:	21 96       	adiw	r28, 0x01	; 1
    3c20:	ee cf       	rjmp	.-36     	; 0x3bfe <_ZN5Print5writeEPKhj+0x1a>
    3c22:	7e 01       	movw	r14, r28
    3c24:	c7 01       	movw	r24, r14
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	1f 91       	pop	r17
    3c2c:	0f 91       	pop	r16
    3c2e:	ff 90       	pop	r15
    3c30:	ef 90       	pop	r14
    3c32:	df 90       	pop	r13
    3c34:	cf 90       	pop	r12
    3c36:	08 95       	ret

00003c38 <_ZN5Print5printEPK19__FlashStringHelper>:
    3c38:	ef 92       	push	r14
    3c3a:	ff 92       	push	r15
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	8c 01       	movw	r16, r24
    3c46:	7b 01       	movw	r14, r22
    3c48:	c0 e0       	ldi	r28, 0x00	; 0
    3c4a:	d0 e0       	ldi	r29, 0x00	; 0
    3c4c:	f7 01       	movw	r30, r14
    3c4e:	ec 0f       	add	r30, r28
    3c50:	fd 1f       	adc	r31, r29
    3c52:	64 91       	lpm	r22, Z
    3c54:	66 23       	and	r22, r22
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3c58:	d8 01       	movw	r26, r16
    3c5a:	ed 91       	ld	r30, X+
    3c5c:	fc 91       	ld	r31, X
    3c5e:	01 90       	ld	r0, Z+
    3c60:	f0 81       	ld	r31, Z
    3c62:	e0 2d       	mov	r30, r0
    3c64:	c8 01       	movw	r24, r16
    3c66:	09 95       	icall
    3c68:	89 2b       	or	r24, r25
    3c6a:	11 f0       	breq	.+4      	; 0x3c70 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    3c6c:	21 96       	adiw	r28, 0x01	; 1
    3c6e:	ee cf       	rjmp	.-36     	; 0x3c4c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    3c70:	ce 01       	movw	r24, r28
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	ff 90       	pop	r15
    3c7c:	ef 90       	pop	r14
    3c7e:	08 95       	ret

00003c80 <_ZN5Print5printEPKc>:
    3c80:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_ZN5Print5writeEPKc>

00003c84 <_ZN5Print5printEc>:
    3c84:	dc 01       	movw	r26, r24
    3c86:	ed 91       	ld	r30, X+
    3c88:	fc 91       	ld	r31, X
    3c8a:	01 90       	ld	r0, Z+
    3c8c:	f0 81       	ld	r31, Z
    3c8e:	e0 2d       	mov	r30, r0
    3c90:	09 94       	ijmp

00003c92 <_ZN5Print7printlnEv>:
    3c92:	6c e2       	ldi	r22, 0x2C	; 44
    3c94:	72 e0       	ldi	r23, 0x02	; 2
    3c96:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <_ZN5Print5writeEPKc>

00003c9a <_ZN5Print7printlnEPKc>:
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	ec 01       	movw	r28, r24
    3ca4:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN5Print5writeEPKc>
    3ca8:	8c 01       	movw	r16, r24
    3caa:	ce 01       	movw	r24, r28
    3cac:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <_ZN5Print7printlnEv>
    3cb0:	80 0f       	add	r24, r16
    3cb2:	91 1f       	adc	r25, r17
    3cb4:	df 91       	pop	r29
    3cb6:	cf 91       	pop	r28
    3cb8:	1f 91       	pop	r17
    3cba:	0f 91       	pop	r16
    3cbc:	08 95       	ret

00003cbe <_ZN5Print11printNumberEmh>:
    3cbe:	8f 92       	push	r8
    3cc0:	9f 92       	push	r9
    3cc2:	af 92       	push	r10
    3cc4:	bf 92       	push	r11
    3cc6:	ef 92       	push	r14
    3cc8:	ff 92       	push	r15
    3cca:	0f 93       	push	r16
    3ccc:	1f 93       	push	r17
    3cce:	cf 93       	push	r28
    3cd0:	df 93       	push	r29
    3cd2:	cd b7       	in	r28, 0x3d	; 61
    3cd4:	de b7       	in	r29, 0x3e	; 62
    3cd6:	a1 97       	sbiw	r28, 0x21	; 33
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	f8 94       	cli
    3cdc:	de bf       	out	0x3e, r29	; 62
    3cde:	0f be       	out	0x3f, r0	; 63
    3ce0:	cd bf       	out	0x3d, r28	; 61
    3ce2:	7c 01       	movw	r14, r24
    3ce4:	fa 01       	movw	r30, r20
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	19 a2       	std	Y+33, r1	; 0x21
    3cea:	22 30       	cpi	r18, 0x02	; 2
    3cec:	08 f4       	brcc	.+2      	; 0x3cf0 <_ZN5Print11printNumberEmh+0x32>
    3cee:	2a e0       	ldi	r18, 0x0A	; 10
    3cf0:	8e 01       	movw	r16, r28
    3cf2:	0f 5d       	subi	r16, 0xDF	; 223
    3cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cf6:	82 2e       	mov	r8, r18
    3cf8:	91 2c       	mov	r9, r1
    3cfa:	a1 2c       	mov	r10, r1
    3cfc:	b1 2c       	mov	r11, r1
    3cfe:	bf 01       	movw	r22, r30
    3d00:	a5 01       	movw	r20, r10
    3d02:	94 01       	movw	r18, r8
    3d04:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodsi4>
    3d08:	f9 01       	movw	r30, r18
    3d0a:	ca 01       	movw	r24, r20
    3d0c:	01 50       	subi	r16, 0x01	; 1
    3d0e:	11 09       	sbc	r17, r1
    3d10:	6a 30       	cpi	r22, 0x0A	; 10
    3d12:	10 f4       	brcc	.+4      	; 0x3d18 <_ZN5Print11printNumberEmh+0x5a>
    3d14:	60 5d       	subi	r22, 0xD0	; 208
    3d16:	01 c0       	rjmp	.+2      	; 0x3d1a <_ZN5Print11printNumberEmh+0x5c>
    3d18:	69 5c       	subi	r22, 0xC9	; 201
    3d1a:	d8 01       	movw	r26, r16
    3d1c:	6c 93       	st	X, r22
    3d1e:	23 2b       	or	r18, r19
    3d20:	24 2b       	or	r18, r20
    3d22:	25 2b       	or	r18, r21
    3d24:	61 f7       	brne	.-40     	; 0x3cfe <_ZN5Print11printNumberEmh+0x40>
    3d26:	b8 01       	movw	r22, r16
    3d28:	c7 01       	movw	r24, r14
    3d2a:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN5Print5writeEPKc>
    3d2e:	a1 96       	adiw	r28, 0x21	; 33
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	ff 90       	pop	r15
    3d44:	ef 90       	pop	r14
    3d46:	bf 90       	pop	r11
    3d48:	af 90       	pop	r10
    3d4a:	9f 90       	pop	r9
    3d4c:	8f 90       	pop	r8
    3d4e:	08 95       	ret

00003d50 <_ZN5Print5printEmi>:
    3d50:	21 15       	cp	r18, r1
    3d52:	31 05       	cpc	r19, r1
    3d54:	41 f4       	brne	.+16     	; 0x3d66 <_ZN5Print5printEmi+0x16>
    3d56:	dc 01       	movw	r26, r24
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	01 90       	ld	r0, Z+
    3d5e:	f0 81       	ld	r31, Z
    3d60:	e0 2d       	mov	r30, r0
    3d62:	64 2f       	mov	r22, r20
    3d64:	09 94       	ijmp
    3d66:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <_ZN5Print11printNumberEmh>

00003d6a <_ZN5Print5printEhi>:
    3d6a:	9a 01       	movw	r18, r20
    3d6c:	46 2f       	mov	r20, r22
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <_ZN5Print5printEmi>

00003d78 <_ZN5Print7printlnEhi>:
    3d78:	0f 93       	push	r16
    3d7a:	1f 93       	push	r17
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
    3d80:	ec 01       	movw	r28, r24
    3d82:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <_ZN5Print5printEhi>
    3d86:	8c 01       	movw	r16, r24
    3d88:	ce 01       	movw	r24, r28
    3d8a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <_ZN5Print7printlnEv>
    3d8e:	80 0f       	add	r24, r16
    3d90:	91 1f       	adc	r25, r17
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	08 95       	ret

00003d9c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    3d9c:	cf 92       	push	r12
    3d9e:	df 92       	push	r13
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
  if (base == 0) {
    3dac:	21 15       	cp	r18, r1
    3dae:	31 05       	cpc	r19, r1
    3db0:	81 f4       	brne	.+32     	; 0x3dd2 <_ZN5Print5printEli+0x36>
    return write(n);
    3db2:	dc 01       	movw	r26, r24
    3db4:	ed 91       	ld	r30, X+
    3db6:	fc 91       	ld	r31, X
    3db8:	01 90       	ld	r0, Z+
    3dba:	f0 81       	ld	r31, Z
    3dbc:	e0 2d       	mov	r30, r0
    3dbe:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3dc0:	df 91       	pop	r29
    3dc2:	cf 91       	pop	r28
    3dc4:	1f 91       	pop	r17
    3dc6:	0f 91       	pop	r16
    3dc8:	ff 90       	pop	r15
    3dca:	ef 90       	pop	r14
    3dcc:	df 90       	pop	r13
    3dce:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    3dd0:	09 94       	ijmp
  } else if (base == 10) {
    3dd2:	2a 30       	cpi	r18, 0x0A	; 10
    3dd4:	31 05       	cpc	r19, r1
    3dd6:	01 f5       	brne	.+64     	; 0x3e18 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
    3dd8:	77 ff       	sbrs	r23, 7
    3dda:	1d c0       	rjmp	.+58     	; 0x3e16 <_ZN5Print5printEli+0x7a>
    3ddc:	6a 01       	movw	r12, r20
    3dde:	7b 01       	movw	r14, r22
    3de0:	ec 01       	movw	r28, r24
      int t = print('-');
    3de2:	6d e2       	ldi	r22, 0x2D	; 45
    3de4:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <_ZN5Print5printEc>
    3de8:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    3dea:	44 27       	eor	r20, r20
    3dec:	55 27       	eor	r21, r21
    3dee:	ba 01       	movw	r22, r20
    3df0:	4c 19       	sub	r20, r12
    3df2:	5d 09       	sbc	r21, r13
    3df4:	6e 09       	sbc	r22, r14
    3df6:	7f 09       	sbc	r23, r15
    3df8:	2a e0       	ldi	r18, 0x0A	; 10
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <_ZN5Print11printNumberEmh>
    3e00:	80 0f       	add	r24, r16
    3e02:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	1f 91       	pop	r17
    3e0a:	0f 91       	pop	r16
    3e0c:	ff 90       	pop	r15
    3e0e:	ef 90       	pop	r14
    3e10:	df 90       	pop	r13
    3e12:	cf 90       	pop	r12
    3e14:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    3e16:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	ff 90       	pop	r15
    3e22:	ef 90       	pop	r14
    3e24:	df 90       	pop	r13
    3e26:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    3e28:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <_ZN5Print11printNumberEmh>

00003e2c <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    3e2c:	9a 01       	movw	r18, r20
  return print((long) n, base);
    3e2e:	ab 01       	movw	r20, r22
    3e30:	77 0f       	add	r23, r23
    3e32:	66 0b       	sbc	r22, r22
    3e34:	77 0b       	sbc	r23, r23
    3e36:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <_ZN5Print5printEli>

00003e3a <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    3e3a:	1f 92       	push	r1
    3e3c:	0f 92       	push	r0
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	0f 92       	push	r0
    3e42:	11 24       	eor	r1, r1
    3e44:	2f 93       	push	r18
    3e46:	3f 93       	push	r19
    3e48:	8f 93       	push	r24
    3e4a:	9f 93       	push	r25
    3e4c:	af 93       	push	r26
    3e4e:	bf 93       	push	r27
    3e50:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <timer0_millis>
    3e54:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <timer0_millis+0x1>
    3e58:	a0 91 e6 04 	lds	r26, 0x04E6	; 0x8004e6 <timer0_millis+0x2>
    3e5c:	b0 91 e7 04 	lds	r27, 0x04E7	; 0x8004e7 <timer0_millis+0x3>
    3e60:	30 91 e3 04 	lds	r19, 0x04E3	; 0x8004e3 <timer0_fract>
    3e64:	23 e0       	ldi	r18, 0x03	; 3
    3e66:	23 0f       	add	r18, r19
    3e68:	2d 37       	cpi	r18, 0x7D	; 125
    3e6a:	20 f4       	brcc	.+8      	; 0x3e74 <__vector_16+0x3a>
    3e6c:	01 96       	adiw	r24, 0x01	; 1
    3e6e:	a1 1d       	adc	r26, r1
    3e70:	b1 1d       	adc	r27, r1
    3e72:	05 c0       	rjmp	.+10     	; 0x3e7e <__vector_16+0x44>
    3e74:	26 e8       	ldi	r18, 0x86	; 134
    3e76:	23 0f       	add	r18, r19
    3e78:	02 96       	adiw	r24, 0x02	; 2
    3e7a:	a1 1d       	adc	r26, r1
    3e7c:	b1 1d       	adc	r27, r1
    3e7e:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <timer0_fract>
    3e82:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <timer0_millis>
    3e86:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <timer0_millis+0x1>
    3e8a:	a0 93 e6 04 	sts	0x04E6, r26	; 0x8004e6 <timer0_millis+0x2>
    3e8e:	b0 93 e7 04 	sts	0x04E7, r27	; 0x8004e7 <timer0_millis+0x3>
    3e92:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <timer0_overflow_count>
    3e96:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <timer0_overflow_count+0x1>
    3e9a:	a0 91 ea 04 	lds	r26, 0x04EA	; 0x8004ea <timer0_overflow_count+0x2>
    3e9e:	b0 91 eb 04 	lds	r27, 0x04EB	; 0x8004eb <timer0_overflow_count+0x3>
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	a1 1d       	adc	r26, r1
    3ea6:	b1 1d       	adc	r27, r1
    3ea8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <timer0_overflow_count>
    3eac:	90 93 e9 04 	sts	0x04E9, r25	; 0x8004e9 <timer0_overflow_count+0x1>
    3eb0:	a0 93 ea 04 	sts	0x04EA, r26	; 0x8004ea <timer0_overflow_count+0x2>
    3eb4:	b0 93 eb 04 	sts	0x04EB, r27	; 0x8004eb <timer0_overflow_count+0x3>
    3eb8:	bf 91       	pop	r27
    3eba:	af 91       	pop	r26
    3ebc:	9f 91       	pop	r25
    3ebe:	8f 91       	pop	r24
    3ec0:	3f 91       	pop	r19
    3ec2:	2f 91       	pop	r18
    3ec4:	0f 90       	pop	r0
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	0f 90       	pop	r0
    3eca:	1f 90       	pop	r1
    3ecc:	18 95       	reti

00003ece <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    3ece:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    3ed0:	f8 94       	cli
	m = timer0_overflow_count;
    3ed2:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <timer0_overflow_count>
    3ed6:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <timer0_overflow_count+0x1>
    3eda:	a0 91 ea 04 	lds	r26, 0x04EA	; 0x8004ea <timer0_overflow_count+0x2>
    3ede:	b0 91 eb 04 	lds	r27, 0x04EB	; 0x8004eb <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    3ee2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3ee4:	a8 9b       	sbis	0x15, 0	; 21
    3ee6:	05 c0       	rjmp	.+10     	; 0x3ef2 <micros+0x24>
    3ee8:	2f 3f       	cpi	r18, 0xFF	; 255
    3eea:	19 f0       	breq	.+6      	; 0x3ef2 <micros+0x24>
		m++;
    3eec:	01 96       	adiw	r24, 0x01	; 1
    3eee:	a1 1d       	adc	r26, r1
    3ef0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    3ef2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3ef4:	ba 2f       	mov	r27, r26
    3ef6:	a9 2f       	mov	r26, r25
    3ef8:	98 2f       	mov	r25, r24
    3efa:	88 27       	eor	r24, r24
    3efc:	82 0f       	add	r24, r18
    3efe:	91 1d       	adc	r25, r1
    3f00:	a1 1d       	adc	r26, r1
    3f02:	b1 1d       	adc	r27, r1
    3f04:	bc 01       	movw	r22, r24
    3f06:	cd 01       	movw	r24, r26
    3f08:	42 e0       	ldi	r20, 0x02	; 2
    3f0a:	66 0f       	add	r22, r22
    3f0c:	77 1f       	adc	r23, r23
    3f0e:	88 1f       	adc	r24, r24
    3f10:	99 1f       	adc	r25, r25
    3f12:	4a 95       	dec	r20
    3f14:	d1 f7       	brne	.-12     	; 0x3f0a <micros+0x3c>
}
    3f16:	08 95       	ret

00003f18 <delay>:

void delay(unsigned long ms)
{
    3f18:	8f 92       	push	r8
    3f1a:	9f 92       	push	r9
    3f1c:	af 92       	push	r10
    3f1e:	bf 92       	push	r11
    3f20:	cf 92       	push	r12
    3f22:	df 92       	push	r13
    3f24:	ef 92       	push	r14
    3f26:	ff 92       	push	r15
    3f28:	6b 01       	movw	r12, r22
    3f2a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3f2c:	0e 94 67 1f 	call	0x3ece	; 0x3ece <micros>
    3f30:	4b 01       	movw	r8, r22
    3f32:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3f34:	c1 14       	cp	r12, r1
    3f36:	d1 04       	cpc	r13, r1
    3f38:	e1 04       	cpc	r14, r1
    3f3a:	f1 04       	cpc	r15, r1
    3f3c:	01 f1       	breq	.+64     	; 0x3f7e <delay+0x66>
		yield();
    3f3e:	0e 94 34 22 	call	0x4468	; 0x4468 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3f42:	0e 94 67 1f 	call	0x3ece	; 0x3ece <micros>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	88 19       	sub	r24, r8
    3f4c:	99 09       	sbc	r25, r9
    3f4e:	aa 09       	sbc	r26, r10
    3f50:	bb 09       	sbc	r27, r11
    3f52:	88 3e       	cpi	r24, 0xE8	; 232
    3f54:	93 40       	sbci	r25, 0x03	; 3
    3f56:	a1 05       	cpc	r26, r1
    3f58:	b1 05       	cpc	r27, r1
    3f5a:	60 f3       	brcs	.-40     	; 0x3f34 <delay+0x1c>
			ms--;
    3f5c:	21 e0       	ldi	r18, 0x01	; 1
    3f5e:	c2 1a       	sub	r12, r18
    3f60:	d1 08       	sbc	r13, r1
    3f62:	e1 08       	sbc	r14, r1
    3f64:	f1 08       	sbc	r15, r1
			start += 1000;
    3f66:	88 ee       	ldi	r24, 0xE8	; 232
    3f68:	88 0e       	add	r8, r24
    3f6a:	83 e0       	ldi	r24, 0x03	; 3
    3f6c:	98 1e       	adc	r9, r24
    3f6e:	a1 1c       	adc	r10, r1
    3f70:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3f72:	c1 14       	cp	r12, r1
    3f74:	d1 04       	cpc	r13, r1
    3f76:	e1 04       	cpc	r14, r1
    3f78:	f1 04       	cpc	r15, r1
    3f7a:	19 f7       	brne	.-58     	; 0x3f42 <delay+0x2a>
    3f7c:	db cf       	rjmp	.-74     	; 0x3f34 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    3f7e:	ff 90       	pop	r15
    3f80:	ef 90       	pop	r14
    3f82:	df 90       	pop	r13
    3f84:	cf 90       	pop	r12
    3f86:	bf 90       	pop	r11
    3f88:	af 90       	pop	r10
    3f8a:	9f 90       	pop	r9
    3f8c:	8f 90       	pop	r8
    3f8e:	08 95       	ret

00003f90 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3f90:	82 30       	cpi	r24, 0x02	; 2
    3f92:	91 05       	cpc	r25, r1
    3f94:	38 f0       	brcs	.+14     	; 0x3fa4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3f96:	88 0f       	add	r24, r24
    3f98:	99 1f       	adc	r25, r25
    3f9a:	88 0f       	add	r24, r24
    3f9c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    3f9e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <delayMicroseconds+0x10>
    3fa4:	08 95       	ret

00003fa6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3fa6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3fa8:	84 b5       	in	r24, 0x24	; 36
    3faa:	82 60       	ori	r24, 0x02	; 2
    3fac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3fae:	84 b5       	in	r24, 0x24	; 36
    3fb0:	81 60       	ori	r24, 0x01	; 1
    3fb2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    3fb4:	85 b5       	in	r24, 0x25	; 37
    3fb6:	82 60       	ori	r24, 0x02	; 2
    3fb8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3fba:	85 b5       	in	r24, 0x25	; 37
    3fbc:	81 60       	ori	r24, 0x01	; 1
    3fbe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3fc0:	ee e6       	ldi	r30, 0x6E	; 110
    3fc2:	f0 e0       	ldi	r31, 0x00	; 0
    3fc4:	80 81       	ld	r24, Z
    3fc6:	81 60       	ori	r24, 0x01	; 1
    3fc8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3fca:	e1 e8       	ldi	r30, 0x81	; 129
    3fcc:	f0 e0       	ldi	r31, 0x00	; 0
    3fce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3fd0:	80 81       	ld	r24, Z
    3fd2:	82 60       	ori	r24, 0x02	; 2
    3fd4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3fd6:	80 81       	ld	r24, Z
    3fd8:	81 60       	ori	r24, 0x01	; 1
    3fda:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3fdc:	e0 e8       	ldi	r30, 0x80	; 128
    3fde:	f0 e0       	ldi	r31, 0x00	; 0
    3fe0:	80 81       	ld	r24, Z
    3fe2:	81 60       	ori	r24, 0x01	; 1
    3fe4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3fe6:	e1 eb       	ldi	r30, 0xB1	; 177
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	80 81       	ld	r24, Z
    3fec:	84 60       	ori	r24, 0x04	; 4
    3fee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3ff0:	e0 eb       	ldi	r30, 0xB0	; 176
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	80 81       	ld	r24, Z
    3ff6:	81 60       	ori	r24, 0x01	; 1
    3ff8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3ffa:	ea e7       	ldi	r30, 0x7A	; 122
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	84 60       	ori	r24, 0x04	; 4
    4002:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    4004:	80 81       	ld	r24, Z
    4006:	82 60       	ori	r24, 0x02	; 2
    4008:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    400a:	80 81       	ld	r24, Z
    400c:	81 60       	ori	r24, 0x01	; 1
    400e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    4010:	80 81       	ld	r24, Z
    4012:	80 68       	ori	r24, 0x80	; 128
    4014:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    4016:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    401a:	08 95       	ret

0000401c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    401c:	8e 30       	cpi	r24, 0x0E	; 14
    401e:	08 f0       	brcs	.+2      	; 0x4022 <analogRead+0x6>
    4020:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    4022:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <analog_reference>
    4026:	90 e4       	ldi	r25, 0x40	; 64
    4028:	29 9f       	mul	r18, r25
    402a:	90 01       	movw	r18, r0
    402c:	11 24       	eor	r1, r1
    402e:	87 70       	andi	r24, 0x07	; 7
    4030:	82 2b       	or	r24, r18
    4032:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    4036:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    403a:	80 64       	ori	r24, 0x40	; 64
    403c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    4040:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4044:	86 fd       	sbrc	r24, 6
    4046:	fc cf       	rjmp	.-8      	; 0x4040 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    4048:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    404c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    4050:	90 e0       	ldi	r25, 0x00	; 0
}
    4052:	92 2b       	or	r25, r18
    4054:	08 95       	ret

00004056 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	18 2f       	mov	r17, r24
    405e:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    4060:	61 e0       	ldi	r22, 0x01	; 1
    4062:	0e 94 b3 20 	call	0x4166	; 0x4166 <pinMode>
	if (val == 0)
    4066:	20 97       	sbiw	r28, 0x00	; 0
    4068:	11 f4       	brne	.+4      	; 0x406e <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    406a:	60 e0       	ldi	r22, 0x00	; 0
    406c:	04 c0       	rjmp	.+8      	; 0x4076 <analogWrite+0x20>
	}
	else if (val == 255)
    406e:	cf 3f       	cpi	r28, 0xFF	; 255
    4070:	d1 05       	cpc	r29, r1
    4072:	39 f4       	brne	.+14     	; 0x4082 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    4074:	61 e0       	ldi	r22, 0x01	; 1
    4076:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    407e:	0c 94 ef 20 	jmp	0x41de	; 0x41de <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    4082:	e1 2f       	mov	r30, r17
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	ee 54       	subi	r30, 0x4E	; 78
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	e4 91       	lpm	r30, Z
    408c:	e3 30       	cpi	r30, 0x03	; 3
    408e:	f9 f0       	breq	.+62     	; 0x40ce <analogWrite+0x78>
    4090:	48 f4       	brcc	.+18     	; 0x40a4 <analogWrite+0x4e>
    4092:	e1 30       	cpi	r30, 0x01	; 1
    4094:	b9 f0       	breq	.+46     	; 0x40c4 <analogWrite+0x6e>
    4096:	e2 30       	cpi	r30, 0x02	; 2
    4098:	a1 f5       	brne	.+104    	; 0x4102 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    409a:	84 b5       	in	r24, 0x24	; 36
    409c:	80 62       	ori	r24, 0x20	; 32
    409e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    40a0:	c8 bd       	out	0x28, r28	; 40
				break;
    40a2:	34 c0       	rjmp	.+104    	; 0x410c <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    40a4:	e7 30       	cpi	r30, 0x07	; 7
    40a6:	e9 f0       	breq	.+58     	; 0x40e2 <analogWrite+0x8c>
    40a8:	e8 30       	cpi	r30, 0x08	; 8
    40aa:	19 f1       	breq	.+70     	; 0x40f2 <analogWrite+0x9c>
    40ac:	e4 30       	cpi	r30, 0x04	; 4
    40ae:	49 f5       	brne	.+82     	; 0x4102 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    40b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    40b4:	80 62       	ori	r24, 0x20	; 32
    40b6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    40ba:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    40be:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    40c2:	24 c0       	rjmp	.+72     	; 0x410c <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    40c4:	84 b5       	in	r24, 0x24	; 36
    40c6:	80 68       	ori	r24, 0x80	; 128
    40c8:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    40ca:	c7 bd       	out	0x27, r28	; 39
				break;
    40cc:	1f c0       	rjmp	.+62     	; 0x410c <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    40ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    40d2:	80 68       	ori	r24, 0x80	; 128
    40d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    40d8:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    40dc:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    40e0:	15 c0       	rjmp	.+42     	; 0x410c <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    40e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    40e6:	80 68       	ori	r24, 0x80	; 128
    40e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    40ec:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    40f0:	0d c0       	rjmp	.+26     	; 0x410c <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    40f2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    40f6:	80 62       	ori	r24, 0x20	; 32
    40f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    40fc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    4100:	05 c0       	rjmp	.+10     	; 0x410c <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    4102:	c0 38       	cpi	r28, 0x80	; 128
    4104:	d1 05       	cpc	r29, r1
    4106:	0c f0       	brlt	.+2      	; 0x410a <analogWrite+0xb4>
    4108:	b5 cf       	rjmp	.-150    	; 0x4074 <analogWrite+0x1e>
    410a:	af cf       	rjmp	.-162    	; 0x406a <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    410c:	df 91       	pop	r29
    410e:	cf 91       	pop	r28
    4110:	1f 91       	pop	r17
    4112:	08 95       	ret

00004114 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4114:	83 30       	cpi	r24, 0x03	; 3
    4116:	81 f0       	breq	.+32     	; 0x4138 <turnOffPWM+0x24>
    4118:	28 f4       	brcc	.+10     	; 0x4124 <turnOffPWM+0x10>
    411a:	81 30       	cpi	r24, 0x01	; 1
    411c:	99 f0       	breq	.+38     	; 0x4144 <turnOffPWM+0x30>
    411e:	82 30       	cpi	r24, 0x02	; 2
    4120:	a1 f0       	breq	.+40     	; 0x414a <turnOffPWM+0x36>
    4122:	08 95       	ret
    4124:	87 30       	cpi	r24, 0x07	; 7
    4126:	a9 f0       	breq	.+42     	; 0x4152 <turnOffPWM+0x3e>
    4128:	88 30       	cpi	r24, 0x08	; 8
    412a:	b9 f0       	breq	.+46     	; 0x415a <turnOffPWM+0x46>
    412c:	84 30       	cpi	r24, 0x04	; 4
    412e:	d1 f4       	brne	.+52     	; 0x4164 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4130:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4134:	8f 7d       	andi	r24, 0xDF	; 223
    4136:	03 c0       	rjmp	.+6      	; 0x413e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4138:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    413c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    413e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4142:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4144:	84 b5       	in	r24, 0x24	; 36
    4146:	8f 77       	andi	r24, 0x7F	; 127
    4148:	02 c0       	rjmp	.+4      	; 0x414e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    414a:	84 b5       	in	r24, 0x24	; 36
    414c:	8f 7d       	andi	r24, 0xDF	; 223
    414e:	84 bd       	out	0x24, r24	; 36
    4150:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4152:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4156:	8f 77       	andi	r24, 0x7F	; 127
    4158:	03 c0       	rjmp	.+6      	; 0x4160 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    415a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    415e:	8f 7d       	andi	r24, 0xDF	; 223
    4160:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4164:	08 95       	ret

00004166 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    4166:	cf 93       	push	r28
    4168:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	fc 01       	movw	r30, r24
    416e:	ea 53       	subi	r30, 0x3A	; 58
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    4174:	fc 01       	movw	r30, r24
    4176:	e6 52       	subi	r30, 0x26	; 38
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    417c:	88 23       	and	r24, r24
    417e:	61 f1       	breq	.+88     	; 0x41d8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	88 0f       	add	r24, r24
    4184:	99 1f       	adc	r25, r25
    4186:	fc 01       	movw	r30, r24
    4188:	ee 5f       	subi	r30, 0xFE	; 254
    418a:	fe 4f       	sbci	r31, 0xFE	; 254
    418c:	c5 91       	lpm	r28, Z+
    418e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    4190:	fc 01       	movw	r30, r24
    4192:	e8 50       	subi	r30, 0x08	; 8
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	a5 91       	lpm	r26, Z+
    4198:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    419a:	61 11       	cpse	r22, r1
    419c:	09 c0       	rjmp	.+18     	; 0x41b0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    419e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    41a0:	f8 94       	cli
		*reg &= ~bit;
    41a2:	88 81       	ld	r24, Y
    41a4:	20 95       	com	r18
    41a6:	82 23       	and	r24, r18
    41a8:	88 83       	st	Y, r24
		*out &= ~bit;
    41aa:	ec 91       	ld	r30, X
    41ac:	2e 23       	and	r18, r30
    41ae:	0b c0       	rjmp	.+22     	; 0x41c6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    41b0:	62 30       	cpi	r22, 0x02	; 2
    41b2:	61 f4       	brne	.+24     	; 0x41cc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    41b4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    41b6:	f8 94       	cli
		*reg &= ~bit;
    41b8:	88 81       	ld	r24, Y
    41ba:	32 2f       	mov	r19, r18
    41bc:	30 95       	com	r19
    41be:	83 23       	and	r24, r19
    41c0:	88 83       	st	Y, r24
		*out |= bit;
    41c2:	ec 91       	ld	r30, X
    41c4:	2e 2b       	or	r18, r30
    41c6:	2c 93       	st	X, r18
		SREG = oldSREG;
    41c8:	9f bf       	out	0x3f, r25	; 63
    41ca:	06 c0       	rjmp	.+12     	; 0x41d8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    41cc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    41ce:	f8 94       	cli
		*reg |= bit;
    41d0:	e8 81       	ld	r30, Y
    41d2:	2e 2b       	or	r18, r30
    41d4:	28 83       	st	Y, r18
		SREG = oldSREG;
    41d6:	8f bf       	out	0x3f, r24	; 63
	}
}
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	08 95       	ret

000041de <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    41e4:	28 2f       	mov	r18, r24
    41e6:	30 e0       	ldi	r19, 0x00	; 0
    41e8:	f9 01       	movw	r30, r18
    41ea:	ee 54       	subi	r30, 0x4E	; 78
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    41f0:	f9 01       	movw	r30, r18
    41f2:	ea 53       	subi	r30, 0x3A	; 58
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    41f8:	f9 01       	movw	r30, r18
    41fa:	e6 52       	subi	r30, 0x26	; 38
    41fc:	ff 4f       	sbci	r31, 0xFF	; 255
    41fe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4200:	cc 23       	and	r28, r28
    4202:	c1 f0       	breq	.+48     	; 0x4234 <digitalWrite+0x56>
    4204:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    4206:	81 11       	cpse	r24, r1
    4208:	0e 94 8a 20 	call	0x4114	; 0x4114 <turnOffPWM>

	out = portOutputRegister(port);
    420c:	ec 2f       	mov	r30, r28
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	ee 0f       	add	r30, r30
    4212:	ff 1f       	adc	r31, r31
    4214:	e8 50       	subi	r30, 0x08	; 8
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	a5 91       	lpm	r26, Z+
    421a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    421c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    421e:	f8 94       	cli

	if (val == LOW) {
    4220:	11 11       	cpse	r17, r1
    4222:	04 c0       	rjmp	.+8      	; 0x422c <digitalWrite+0x4e>
		*out &= ~bit;
    4224:	8c 91       	ld	r24, X
    4226:	d0 95       	com	r29
    4228:	d8 23       	and	r29, r24
    422a:	02 c0       	rjmp	.+4      	; 0x4230 <digitalWrite+0x52>
	} else {
		*out |= bit;
    422c:	ec 91       	ld	r30, X
    422e:	de 2b       	or	r29, r30
    4230:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    4232:	9f bf       	out	0x3f, r25	; 63
}
    4234:	df 91       	pop	r29
    4236:	cf 91       	pop	r28
    4238:	1f 91       	pop	r17
    423a:	08 95       	ret

0000423c <_ZN14FreqCountClass5beginEj>:
static uint16_t gate_index;


void FreqCountClass::begin(uint16_t msec)
{
	if (msec < 1) return;
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	09 f4       	brne	.+2      	; 0x4242 <_ZN14FreqCountClass5beginEj+0x6>
    4240:	74 c0       	rjmp	.+232    	; 0x432a <L_130_loop+0xc>
	gate_index = 0;
    4242:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZL10gate_index+0x1>
    4246:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZL10gate_index>
	count_msw = 0;
    424a:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <_ZL9count_msw+0x1>
    424e:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <_ZL9count_msw>
	count_prev = 0;
    4252:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <_ZL10count_prev>
    4256:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <_ZL10count_prev+0x1>
    425a:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <_ZL10count_prev+0x2>
    425e:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <_ZL10count_prev+0x3>
	count_ready = 0;
    4262:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZL11count_ready>

static uint8_t saveTCCR1A, saveTCCR1B;

static inline void counter_init(void)
{
	saveTCCR1A = TCCR1A;
    4266:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    426a:	20 93 ff 04 	sts	0x04FF, r18	; 0x8004ff <_ZL10saveTCCR1A>
	saveTCCR1B = TCCR1B;
    426e:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4272:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <_ZL10saveTCCR1B>
	TCCR1B = 0;
    4276:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1A = 0;
    427a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCNT1 = 0;
    427e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    4282:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIFR1 = (1<<TOV1);
    4286:	21 e0       	ldi	r18, 0x01	; 1
    4288:	26 bb       	out	0x16, r18	; 22
	TIMSK1 = 0;
    428a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>

static inline uint16_t timer_init(uint16_t msec)
{
	uint16_t gate_len;

	saveTCCR2A = TCCR2A;
    428e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4292:	20 93 fd 04 	sts	0x04FD, r18	; 0x8004fd <_ZL10saveTCCR2A>
	saveTCCR2B = TCCR2B;
    4296:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    429a:	20 93 fc 04 	sts	0x04FC, r18	; 0x8004fc <_ZL10saveTCCR2B>
	TCCR2B = 0;
    429e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCCR2A = (1<<WGM21);
    42a2:	22 e0       	ldi	r18, 0x02	; 2
    42a4:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	if ((msec & 7) == 0) {
    42a8:	9c 01       	movw	r18, r24
    42aa:	27 70       	andi	r18, 0x07	; 7
    42ac:	33 27       	eor	r19, r19
    42ae:	23 2b       	or	r18, r19
    42b0:	51 f4       	brne	.+20     	; 0x42c6 <_ZN14FreqCountClass5beginEj+0x8a>
		gate_len = msec >> 3;
    42b2:	43 e0       	ldi	r20, 0x03	; 3
    42b4:	96 95       	lsr	r25
    42b6:	87 95       	ror	r24
    42b8:	4a 95       	dec	r20
    42ba:	e1 f7       	brne	.-8      	; 0x42b4 <_ZN14FreqCountClass5beginEj+0x78>
		OCR2A = TIMER2_OCR2A_8MS_VAL;
    42bc:	2c e7       	ldi	r18, 0x7C	; 124
    42be:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_8MS_VAL;
    42c2:	27 e0       	ldi	r18, 0x07	; 7
    42c4:	18 c0       	rjmp	.+48     	; 0x42f6 <_ZN14FreqCountClass5beginEj+0xba>
	} else if ((msec & 3) == 0) {
    42c6:	9c 01       	movw	r18, r24
    42c8:	23 70       	andi	r18, 0x03	; 3
    42ca:	33 27       	eor	r19, r19
    42cc:	23 2b       	or	r18, r19
    42ce:	31 f4       	brne	.+12     	; 0x42dc <_ZN14FreqCountClass5beginEj+0xa0>
		gate_len = msec >> 2;
    42d0:	96 95       	lsr	r25
    42d2:	87 95       	ror	r24
    42d4:	96 95       	lsr	r25
    42d6:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_4MS_VAL;
    42d8:	29 ef       	ldi	r18, 0xF9	; 249
    42da:	05 c0       	rjmp	.+10     	; 0x42e6 <_ZN14FreqCountClass5beginEj+0xaa>
		startTCCR2B = TIMER2_TCCR2B_4MS_VAL;
	} else if ((msec & 1) == 0) {
    42dc:	80 fd       	sbrc	r24, 0
    42de:	07 c0       	rjmp	.+14     	; 0x42ee <_ZN14FreqCountClass5beginEj+0xb2>
		gate_len = msec >> 1;
    42e0:	96 95       	lsr	r25
    42e2:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_2MS_VAL;
    42e4:	2c e7       	ldi	r18, 0x7C	; 124
    42e6:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_2MS_VAL;
    42ea:	26 e0       	ldi	r18, 0x06	; 6
    42ec:	04 c0       	rjmp	.+8      	; 0x42f6 <_ZN14FreqCountClass5beginEj+0xba>
	} else {
		gate_len = msec;
		OCR2A = TIMER2_OCR2A_1MS_VAL;
    42ee:	2c e7       	ldi	r18, 0x7C	; 124
    42f0:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		startTCCR2B = TIMER2_TCCR2B_1MS_VAL;
    42f4:	25 e0       	ldi	r18, 0x05	; 5
    42f6:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <_ZL11startTCCR2B>
	}
	TIFR2 = (1<<OCF2A);
    42fa:	22 e0       	ldi	r18, 0x02	; 2
    42fc:	27 bb       	out	0x17, r18	; 23
	TCNT2 = 0;
    42fe:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	counter_init();
	gate_length = timer_init(msec);
    4302:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <_ZL11gate_length+0x1>
    4306:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_ZL11gate_length>
	uint8_t status = SREG;
    430a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    430c:	f8 94       	cli
	return gate_len;
}

static inline void timer_start(void)
{
	GTCCR = (1<<PSRASY);
    430e:	23 bd       	out	0x23, r18	; 35
	TCCR2B = startTCCR2B;
    4310:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <_ZL11startTCCR2B>
    4314:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TIMSK2 = (1<<OCIE2A);
    4318:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		"L_%=_loop:"
		"subi   %0, 1"		"\n\t"
		"brne   L_%=_loop"	"\n\t"
		: "+d" (cycles_times_3)
		: "0" (cycles_times_3)
	);
    431c:	8b e0       	ldi	r24, 0x0B	; 11

0000431e <L_130_loop>:
    431e:	81 50       	subi	r24, 0x01	; 1
    4320:	f1 f7       	brne	.-4      	; 0x431e <L_130_loop>
	TIMSK1 = 0;
}

static inline void counter_start(void)
{
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
    4322:	87 e0       	ldi	r24, 0x07	; 7
    4324:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	timer_start();
	timer_isr_latency_delay();
	counter_start();
	SREG = status;
    4328:	9f bf       	out	0x3f, r25	; 63
    432a:	08 95       	ret

0000432c <_ZN14FreqCountClass9availableEv>:
}

uint8_t FreqCountClass::available(void)
{
	return count_ready;
    432c:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_ZL11count_ready>
}
    4330:	08 95       	ret

00004332 <_ZN14FreqCountClass4readEv>:
uint32_t FreqCountClass::read(void)
{
	uint32_t count;
	uint8_t status;

	status = SREG;
    4332:	2f b7       	in	r18, 0x3f	; 63
	cli();
    4334:	f8 94       	cli
	count = count_output;
    4336:	60 91 f1 04 	lds	r22, 0x04F1	; 0x8004f1 <_ZL12count_output>
    433a:	70 91 f2 04 	lds	r23, 0x04F2	; 0x8004f2 <_ZL12count_output+0x1>
    433e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <_ZL12count_output+0x2>
    4342:	90 91 f4 04 	lds	r25, 0x04F4	; 0x8004f4 <_ZL12count_output+0x3>
	count_ready = 0;
    4346:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <_ZL11count_ready>
	SREG = status;
    434a:	2f bf       	out	0x3f, r18	; 63
	return count;
}
    434c:	08 95       	ret

0000434e <_ZN14FreqCountClass3endEv>:
	TIMSK2 = (1<<OCIE2A);
}

static inline void timer_shutdown(void)
{
	TCCR2B = 0;
    434e:	e1 eb       	ldi	r30, 0xB1	; 177
    4350:	f0 e0       	ldi	r31, 0x00	; 0
    4352:	10 82       	st	Z, r1
	TIMSK2 = 0;
    4354:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCCR2A = saveTCCR2A;
    4358:	80 91 fd 04 	lds	r24, 0x04FD	; 0x8004fd <_ZL10saveTCCR2A>
    435c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = saveTCCR2B;
    4360:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <_ZL10saveTCCR2B>
    4364:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
}

static inline void counter_shutdown(void)
{
	TCCR1B = 0;
    4366:	e1 e8       	ldi	r30, 0x81	; 129
    4368:	f0 e0       	ldi	r31, 0x00	; 0
    436a:	10 82       	st	Z, r1
	TCCR1A = saveTCCR1A;
    436c:	80 91 ff 04 	lds	r24, 0x04FF	; 0x8004ff <_ZL10saveTCCR1A>
    4370:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = saveTCCR1B;
    4374:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <_ZL10saveTCCR1B>
    4378:	80 83       	st	Z, r24
    437a:	08 95       	ret

0000437c <__vector_7>:
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
{
    437c:	1f 92       	push	r1
    437e:	0f 92       	push	r0
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	0f 92       	push	r0
    4384:	11 24       	eor	r1, r1
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	2f 93       	push	r18
    438c:	3f 93       	push	r19
    438e:	4f 93       	push	r20
    4390:	5f 93       	push	r21
    4392:	6f 93       	push	r22
    4394:	7f 93       	push	r23
    4396:	8f 93       	push	r24
    4398:	9f 93       	push	r25
    439a:	af 93       	push	r26
    439c:	bf 93       	push	r27
}

static inline uint16_t counter_read(void)
{
	return TCNT1;
    439e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    43a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
    43a6:	b0 9b       	sbis	0x16, 0	; 22
    43a8:	0b c0       	rjmp	.+22     	; 0x43c0 <__vector_7+0x44>
	return TIFR1 & (1<<TOV1);
}

static inline void counter_overflow_reset(void)
{
	TIFR1 = (1<<TOV1);
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	86 bb       	out	0x16, r24	; 22
		counter_overflow_reset();
		count_msw++;
    43ae:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZL9count_msw>
    43b2:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <_ZL9count_msw+0x1>
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <_ZL9count_msw+0x1>
    43bc:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <_ZL9count_msw>
	}
	index = gate_index + 1;
    43c0:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <_ZL10gate_index>
    43c4:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <_ZL10gate_index+0x1>
    43c8:	01 96       	adiw	r24, 0x01	; 1
	length = gate_length;
	if (index >= length) {
    43ca:	40 91 ee 04 	lds	r20, 0x04EE	; 0x8004ee <_ZL11gate_length>
    43ce:	50 91 ef 04 	lds	r21, 0x04EF	; 0x8004ef <_ZL11gate_length+0x1>
    43d2:	84 17       	cp	r24, r20
    43d4:	95 07       	cpc	r25, r21
    43d6:	98 f1       	brcs	.+102    	; 0x443e <__vector_7+0xc2>
		gate_index = 0;
    43d8:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZL10gate_index+0x1>
    43dc:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <_ZL10gate_index>
		count = ((uint32_t)count_msw << 16) + count_lsw;
    43e0:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <_ZL9count_msw>
    43e4:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <_ZL9count_msw+0x1>
    43e8:	a0 e0       	ldi	r26, 0x00	; 0
    43ea:	b0 e0       	ldi	r27, 0x00	; 0
    43ec:	dc 01       	movw	r26, r24
    43ee:	99 27       	eor	r25, r25
    43f0:	88 27       	eor	r24, r24
    43f2:	82 0f       	add	r24, r18
    43f4:	93 1f       	adc	r25, r19
    43f6:	a1 1d       	adc	r26, r1
    43f8:	b1 1d       	adc	r27, r1
		count_output = count - count_prev;
    43fa:	40 91 f5 04 	lds	r20, 0x04F5	; 0x8004f5 <_ZL10count_prev>
    43fe:	50 91 f6 04 	lds	r21, 0x04F6	; 0x8004f6 <_ZL10count_prev+0x1>
    4402:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <_ZL10count_prev+0x2>
    4406:	70 91 f8 04 	lds	r23, 0x04F8	; 0x8004f8 <_ZL10count_prev+0x3>
    440a:	8c 01       	movw	r16, r24
    440c:	9d 01       	movw	r18, r26
    440e:	04 1b       	sub	r16, r20
    4410:	15 0b       	sbc	r17, r21
    4412:	26 0b       	sbc	r18, r22
    4414:	37 0b       	sbc	r19, r23
    4416:	00 93 f1 04 	sts	0x04F1, r16	; 0x8004f1 <_ZL12count_output>
    441a:	10 93 f2 04 	sts	0x04F2, r17	; 0x8004f2 <_ZL12count_output+0x1>
    441e:	20 93 f3 04 	sts	0x04F3, r18	; 0x8004f3 <_ZL12count_output+0x2>
    4422:	30 93 f4 04 	sts	0x04F4, r19	; 0x8004f4 <_ZL12count_output+0x3>
		count_prev = count;
    4426:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <_ZL10count_prev>
    442a:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <_ZL10count_prev+0x1>
    442e:	a0 93 f7 04 	sts	0x04F7, r26	; 0x8004f7 <_ZL10count_prev+0x2>
    4432:	b0 93 f8 04 	sts	0x04F8, r27	; 0x8004f8 <_ZL10count_prev+0x3>
		count_ready = 1;
    4436:	81 e0       	ldi	r24, 0x01	; 1
    4438:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_ZL11count_ready>
    443c:	04 c0       	rjmp	.+8      	; 0x4446 <__vector_7+0xca>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
    443e:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <_ZL10gate_index+0x1>
    4442:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <_ZL10gate_index>
	}
}
    4446:	bf 91       	pop	r27
    4448:	af 91       	pop	r26
    444a:	9f 91       	pop	r25
    444c:	8f 91       	pop	r24
    444e:	7f 91       	pop	r23
    4450:	6f 91       	pop	r22
    4452:	5f 91       	pop	r21
    4454:	4f 91       	pop	r20
    4456:	3f 91       	pop	r19
    4458:	2f 91       	pop	r18
    445a:	1f 91       	pop	r17
    445c:	0f 91       	pop	r16
    445e:	0f 90       	pop	r0
    4460:	0f be       	out	0x3f, r0	; 63
    4462:	0f 90       	pop	r0
    4464:	1f 90       	pop	r1
    4466:	18 95       	reti

00004468 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    4468:	08 95       	ret

0000446a <__divmodhi4>:
    446a:	97 fb       	bst	r25, 7
    446c:	07 2e       	mov	r0, r23
    446e:	16 f4       	brtc	.+4      	; 0x4474 <__divmodhi4+0xa>
    4470:	00 94       	com	r0
    4472:	07 d0       	rcall	.+14     	; 0x4482 <__divmodhi4_neg1>
    4474:	77 fd       	sbrc	r23, 7
    4476:	09 d0       	rcall	.+18     	; 0x448a <__divmodhi4_neg2>
    4478:	0e 94 9b 22 	call	0x4536	; 0x4536 <__udivmodhi4>
    447c:	07 fc       	sbrc	r0, 7
    447e:	05 d0       	rcall	.+10     	; 0x448a <__divmodhi4_neg2>
    4480:	3e f4       	brtc	.+14     	; 0x4490 <__divmodhi4_exit>

00004482 <__divmodhi4_neg1>:
    4482:	90 95       	com	r25
    4484:	81 95       	neg	r24
    4486:	9f 4f       	sbci	r25, 0xFF	; 255
    4488:	08 95       	ret

0000448a <__divmodhi4_neg2>:
    448a:	70 95       	com	r23
    448c:	61 95       	neg	r22
    448e:	7f 4f       	sbci	r23, 0xFF	; 255

00004490 <__divmodhi4_exit>:
    4490:	08 95       	ret

00004492 <__udivmodsi4>:
    4492:	a1 e2       	ldi	r26, 0x21	; 33
    4494:	1a 2e       	mov	r1, r26
    4496:	aa 1b       	sub	r26, r26
    4498:	bb 1b       	sub	r27, r27
    449a:	fd 01       	movw	r30, r26
    449c:	0d c0       	rjmp	.+26     	; 0x44b8 <__udivmodsi4_ep>

0000449e <__udivmodsi4_loop>:
    449e:	aa 1f       	adc	r26, r26
    44a0:	bb 1f       	adc	r27, r27
    44a2:	ee 1f       	adc	r30, r30
    44a4:	ff 1f       	adc	r31, r31
    44a6:	a2 17       	cp	r26, r18
    44a8:	b3 07       	cpc	r27, r19
    44aa:	e4 07       	cpc	r30, r20
    44ac:	f5 07       	cpc	r31, r21
    44ae:	20 f0       	brcs	.+8      	; 0x44b8 <__udivmodsi4_ep>
    44b0:	a2 1b       	sub	r26, r18
    44b2:	b3 0b       	sbc	r27, r19
    44b4:	e4 0b       	sbc	r30, r20
    44b6:	f5 0b       	sbc	r31, r21

000044b8 <__udivmodsi4_ep>:
    44b8:	66 1f       	adc	r22, r22
    44ba:	77 1f       	adc	r23, r23
    44bc:	88 1f       	adc	r24, r24
    44be:	99 1f       	adc	r25, r25
    44c0:	1a 94       	dec	r1
    44c2:	69 f7       	brne	.-38     	; 0x449e <__udivmodsi4_loop>
    44c4:	60 95       	com	r22
    44c6:	70 95       	com	r23
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	9b 01       	movw	r18, r22
    44ce:	ac 01       	movw	r20, r24
    44d0:	bd 01       	movw	r22, r26
    44d2:	cf 01       	movw	r24, r30
    44d4:	08 95       	ret

000044d6 <__divmodsi4>:
    44d6:	05 2e       	mov	r0, r21
    44d8:	97 fb       	bst	r25, 7
    44da:	1e f4       	brtc	.+6      	; 0x44e2 <__divmodsi4+0xc>
    44dc:	00 94       	com	r0
    44de:	0e 94 82 22 	call	0x4504	; 0x4504 <__negsi2>
    44e2:	57 fd       	sbrc	r21, 7
    44e4:	07 d0       	rcall	.+14     	; 0x44f4 <__divmodsi4_neg2>
    44e6:	0e 94 49 22 	call	0x4492	; 0x4492 <__udivmodsi4>
    44ea:	07 fc       	sbrc	r0, 7
    44ec:	03 d0       	rcall	.+6      	; 0x44f4 <__divmodsi4_neg2>
    44ee:	4e f4       	brtc	.+18     	; 0x4502 <__divmodsi4_exit>
    44f0:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__negsi2>

000044f4 <__divmodsi4_neg2>:
    44f4:	50 95       	com	r21
    44f6:	40 95       	com	r20
    44f8:	30 95       	com	r19
    44fa:	21 95       	neg	r18
    44fc:	3f 4f       	sbci	r19, 0xFF	; 255
    44fe:	4f 4f       	sbci	r20, 0xFF	; 255
    4500:	5f 4f       	sbci	r21, 0xFF	; 255

00004502 <__divmodsi4_exit>:
    4502:	08 95       	ret

00004504 <__negsi2>:
    4504:	90 95       	com	r25
    4506:	80 95       	com	r24
    4508:	70 95       	com	r23
    450a:	61 95       	neg	r22
    450c:	7f 4f       	sbci	r23, 0xFF	; 255
    450e:	8f 4f       	sbci	r24, 0xFF	; 255
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	08 95       	ret

00004514 <__tablejump2__>:
    4514:	ee 0f       	add	r30, r30
    4516:	ff 1f       	adc	r31, r31
    4518:	05 90       	lpm	r0, Z+
    451a:	f4 91       	lpm	r31, Z
    451c:	e0 2d       	mov	r30, r0
    451e:	09 94       	ijmp

00004520 <__muluhisi3>:
    4520:	0e 94 af 22 	call	0x455e	; 0x455e <__umulhisi3>
    4524:	a5 9f       	mul	r26, r21
    4526:	90 0d       	add	r25, r0
    4528:	b4 9f       	mul	r27, r20
    452a:	90 0d       	add	r25, r0
    452c:	a4 9f       	mul	r26, r20
    452e:	80 0d       	add	r24, r0
    4530:	91 1d       	adc	r25, r1
    4532:	11 24       	eor	r1, r1
    4534:	08 95       	ret

00004536 <__udivmodhi4>:
    4536:	aa 1b       	sub	r26, r26
    4538:	bb 1b       	sub	r27, r27
    453a:	51 e1       	ldi	r21, 0x11	; 17
    453c:	07 c0       	rjmp	.+14     	; 0x454c <__udivmodhi4_ep>

0000453e <__udivmodhi4_loop>:
    453e:	aa 1f       	adc	r26, r26
    4540:	bb 1f       	adc	r27, r27
    4542:	a6 17       	cp	r26, r22
    4544:	b7 07       	cpc	r27, r23
    4546:	10 f0       	brcs	.+4      	; 0x454c <__udivmodhi4_ep>
    4548:	a6 1b       	sub	r26, r22
    454a:	b7 0b       	sbc	r27, r23

0000454c <__udivmodhi4_ep>:
    454c:	88 1f       	adc	r24, r24
    454e:	99 1f       	adc	r25, r25
    4550:	5a 95       	dec	r21
    4552:	a9 f7       	brne	.-22     	; 0x453e <__udivmodhi4_loop>
    4554:	80 95       	com	r24
    4556:	90 95       	com	r25
    4558:	bc 01       	movw	r22, r24
    455a:	cd 01       	movw	r24, r26
    455c:	08 95       	ret

0000455e <__umulhisi3>:
    455e:	a2 9f       	mul	r26, r18
    4560:	b0 01       	movw	r22, r0
    4562:	b3 9f       	mul	r27, r19
    4564:	c0 01       	movw	r24, r0
    4566:	a3 9f       	mul	r26, r19
    4568:	70 0d       	add	r23, r0
    456a:	81 1d       	adc	r24, r1
    456c:	11 24       	eor	r1, r1
    456e:	91 1d       	adc	r25, r1
    4570:	b2 9f       	mul	r27, r18
    4572:	70 0d       	add	r23, r0
    4574:	81 1d       	adc	r24, r1
    4576:	11 24       	eor	r1, r1
    4578:	91 1d       	adc	r25, r1
    457a:	08 95       	ret

0000457c <malloc>:
    457c:	0f 93       	push	r16
    457e:	1f 93       	push	r17
    4580:	cf 93       	push	r28
    4582:	df 93       	push	r29
    4584:	82 30       	cpi	r24, 0x02	; 2
    4586:	91 05       	cpc	r25, r1
    4588:	10 f4       	brcc	.+4      	; 0x458e <malloc+0x12>
    458a:	82 e0       	ldi	r24, 0x02	; 2
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <__flp>
    4592:	f0 91 03 05 	lds	r31, 0x0503	; 0x800503 <__flp+0x1>
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	a0 e0       	ldi	r26, 0x00	; 0
    459c:	b0 e0       	ldi	r27, 0x00	; 0
    459e:	30 97       	sbiw	r30, 0x00	; 0
    45a0:	19 f1       	breq	.+70     	; 0x45e8 <malloc+0x6c>
    45a2:	40 81       	ld	r20, Z
    45a4:	51 81       	ldd	r21, Z+1	; 0x01
    45a6:	02 81       	ldd	r16, Z+2	; 0x02
    45a8:	13 81       	ldd	r17, Z+3	; 0x03
    45aa:	48 17       	cp	r20, r24
    45ac:	59 07       	cpc	r21, r25
    45ae:	c8 f0       	brcs	.+50     	; 0x45e2 <malloc+0x66>
    45b0:	84 17       	cp	r24, r20
    45b2:	95 07       	cpc	r25, r21
    45b4:	69 f4       	brne	.+26     	; 0x45d0 <malloc+0x54>
    45b6:	10 97       	sbiw	r26, 0x00	; 0
    45b8:	31 f0       	breq	.+12     	; 0x45c6 <malloc+0x4a>
    45ba:	12 96       	adiw	r26, 0x02	; 2
    45bc:	0c 93       	st	X, r16
    45be:	12 97       	sbiw	r26, 0x02	; 2
    45c0:	13 96       	adiw	r26, 0x03	; 3
    45c2:	1c 93       	st	X, r17
    45c4:	27 c0       	rjmp	.+78     	; 0x4614 <malloc+0x98>
    45c6:	00 93 02 05 	sts	0x0502, r16	; 0x800502 <__flp>
    45ca:	10 93 03 05 	sts	0x0503, r17	; 0x800503 <__flp+0x1>
    45ce:	22 c0       	rjmp	.+68     	; 0x4614 <malloc+0x98>
    45d0:	21 15       	cp	r18, r1
    45d2:	31 05       	cpc	r19, r1
    45d4:	19 f0       	breq	.+6      	; 0x45dc <malloc+0x60>
    45d6:	42 17       	cp	r20, r18
    45d8:	53 07       	cpc	r21, r19
    45da:	18 f4       	brcc	.+6      	; 0x45e2 <malloc+0x66>
    45dc:	9a 01       	movw	r18, r20
    45de:	bd 01       	movw	r22, r26
    45e0:	ef 01       	movw	r28, r30
    45e2:	df 01       	movw	r26, r30
    45e4:	f8 01       	movw	r30, r16
    45e6:	db cf       	rjmp	.-74     	; 0x459e <malloc+0x22>
    45e8:	21 15       	cp	r18, r1
    45ea:	31 05       	cpc	r19, r1
    45ec:	f9 f0       	breq	.+62     	; 0x462c <malloc+0xb0>
    45ee:	28 1b       	sub	r18, r24
    45f0:	39 0b       	sbc	r19, r25
    45f2:	24 30       	cpi	r18, 0x04	; 4
    45f4:	31 05       	cpc	r19, r1
    45f6:	80 f4       	brcc	.+32     	; 0x4618 <malloc+0x9c>
    45f8:	8a 81       	ldd	r24, Y+2	; 0x02
    45fa:	9b 81       	ldd	r25, Y+3	; 0x03
    45fc:	61 15       	cp	r22, r1
    45fe:	71 05       	cpc	r23, r1
    4600:	21 f0       	breq	.+8      	; 0x460a <malloc+0x8e>
    4602:	fb 01       	movw	r30, r22
    4604:	93 83       	std	Z+3, r25	; 0x03
    4606:	82 83       	std	Z+2, r24	; 0x02
    4608:	04 c0       	rjmp	.+8      	; 0x4612 <malloc+0x96>
    460a:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <__flp+0x1>
    460e:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <__flp>
    4612:	fe 01       	movw	r30, r28
    4614:	32 96       	adiw	r30, 0x02	; 2
    4616:	44 c0       	rjmp	.+136    	; 0x46a0 <malloc+0x124>
    4618:	fe 01       	movw	r30, r28
    461a:	e2 0f       	add	r30, r18
    461c:	f3 1f       	adc	r31, r19
    461e:	81 93       	st	Z+, r24
    4620:	91 93       	st	Z+, r25
    4622:	22 50       	subi	r18, 0x02	; 2
    4624:	31 09       	sbc	r19, r1
    4626:	39 83       	std	Y+1, r19	; 0x01
    4628:	28 83       	st	Y, r18
    462a:	3a c0       	rjmp	.+116    	; 0x46a0 <malloc+0x124>
    462c:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    4630:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    4634:	23 2b       	or	r18, r19
    4636:	41 f4       	brne	.+16     	; 0x4648 <malloc+0xcc>
    4638:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    463c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4640:	30 93 01 05 	sts	0x0501, r19	; 0x800501 <__brkval+0x1>
    4644:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <__brkval>
    4648:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    464c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4650:	21 15       	cp	r18, r1
    4652:	31 05       	cpc	r19, r1
    4654:	41 f4       	brne	.+16     	; 0x4666 <malloc+0xea>
    4656:	2d b7       	in	r18, 0x3d	; 61
    4658:	3e b7       	in	r19, 0x3e	; 62
    465a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    465e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4662:	24 1b       	sub	r18, r20
    4664:	35 0b       	sbc	r19, r21
    4666:	e0 91 00 05 	lds	r30, 0x0500	; 0x800500 <__brkval>
    466a:	f0 91 01 05 	lds	r31, 0x0501	; 0x800501 <__brkval+0x1>
    466e:	e2 17       	cp	r30, r18
    4670:	f3 07       	cpc	r31, r19
    4672:	a0 f4       	brcc	.+40     	; 0x469c <malloc+0x120>
    4674:	2e 1b       	sub	r18, r30
    4676:	3f 0b       	sbc	r19, r31
    4678:	28 17       	cp	r18, r24
    467a:	39 07       	cpc	r19, r25
    467c:	78 f0       	brcs	.+30     	; 0x469c <malloc+0x120>
    467e:	ac 01       	movw	r20, r24
    4680:	4e 5f       	subi	r20, 0xFE	; 254
    4682:	5f 4f       	sbci	r21, 0xFF	; 255
    4684:	24 17       	cp	r18, r20
    4686:	35 07       	cpc	r19, r21
    4688:	48 f0       	brcs	.+18     	; 0x469c <malloc+0x120>
    468a:	4e 0f       	add	r20, r30
    468c:	5f 1f       	adc	r21, r31
    468e:	50 93 01 05 	sts	0x0501, r21	; 0x800501 <__brkval+0x1>
    4692:	40 93 00 05 	sts	0x0500, r20	; 0x800500 <__brkval>
    4696:	81 93       	st	Z+, r24
    4698:	91 93       	st	Z+, r25
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <malloc+0x124>
    469c:	e0 e0       	ldi	r30, 0x00	; 0
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	cf 01       	movw	r24, r30
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	08 95       	ret

000046ac <free>:
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <free+0xa>
    46b4:	81 c0       	rjmp	.+258    	; 0x47b8 <free+0x10c>
    46b6:	fc 01       	movw	r30, r24
    46b8:	32 97       	sbiw	r30, 0x02	; 2
    46ba:	13 82       	std	Z+3, r1	; 0x03
    46bc:	12 82       	std	Z+2, r1	; 0x02
    46be:	a0 91 02 05 	lds	r26, 0x0502	; 0x800502 <__flp>
    46c2:	b0 91 03 05 	lds	r27, 0x0503	; 0x800503 <__flp+0x1>
    46c6:	10 97       	sbiw	r26, 0x00	; 0
    46c8:	81 f4       	brne	.+32     	; 0x46ea <free+0x3e>
    46ca:	20 81       	ld	r18, Z
    46cc:	31 81       	ldd	r19, Z+1	; 0x01
    46ce:	82 0f       	add	r24, r18
    46d0:	93 1f       	adc	r25, r19
    46d2:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    46d6:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    46da:	28 17       	cp	r18, r24
    46dc:	39 07       	cpc	r19, r25
    46de:	51 f5       	brne	.+84     	; 0x4734 <free+0x88>
    46e0:	f0 93 01 05 	sts	0x0501, r31	; 0x800501 <__brkval+0x1>
    46e4:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <__brkval>
    46e8:	67 c0       	rjmp	.+206    	; 0x47b8 <free+0x10c>
    46ea:	ed 01       	movw	r28, r26
    46ec:	20 e0       	ldi	r18, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	ce 17       	cp	r28, r30
    46f2:	df 07       	cpc	r29, r31
    46f4:	40 f4       	brcc	.+16     	; 0x4706 <free+0x5a>
    46f6:	4a 81       	ldd	r20, Y+2	; 0x02
    46f8:	5b 81       	ldd	r21, Y+3	; 0x03
    46fa:	9e 01       	movw	r18, r28
    46fc:	41 15       	cp	r20, r1
    46fe:	51 05       	cpc	r21, r1
    4700:	f1 f0       	breq	.+60     	; 0x473e <free+0x92>
    4702:	ea 01       	movw	r28, r20
    4704:	f5 cf       	rjmp	.-22     	; 0x46f0 <free+0x44>
    4706:	d3 83       	std	Z+3, r29	; 0x03
    4708:	c2 83       	std	Z+2, r28	; 0x02
    470a:	40 81       	ld	r20, Z
    470c:	51 81       	ldd	r21, Z+1	; 0x01
    470e:	84 0f       	add	r24, r20
    4710:	95 1f       	adc	r25, r21
    4712:	c8 17       	cp	r28, r24
    4714:	d9 07       	cpc	r29, r25
    4716:	59 f4       	brne	.+22     	; 0x472e <free+0x82>
    4718:	88 81       	ld	r24, Y
    471a:	99 81       	ldd	r25, Y+1	; 0x01
    471c:	84 0f       	add	r24, r20
    471e:	95 1f       	adc	r25, r21
    4720:	02 96       	adiw	r24, 0x02	; 2
    4722:	91 83       	std	Z+1, r25	; 0x01
    4724:	80 83       	st	Z, r24
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	9b 81       	ldd	r25, Y+3	; 0x03
    472a:	93 83       	std	Z+3, r25	; 0x03
    472c:	82 83       	std	Z+2, r24	; 0x02
    472e:	21 15       	cp	r18, r1
    4730:	31 05       	cpc	r19, r1
    4732:	29 f4       	brne	.+10     	; 0x473e <free+0x92>
    4734:	f0 93 03 05 	sts	0x0503, r31	; 0x800503 <__flp+0x1>
    4738:	e0 93 02 05 	sts	0x0502, r30	; 0x800502 <__flp>
    473c:	3d c0       	rjmp	.+122    	; 0x47b8 <free+0x10c>
    473e:	e9 01       	movw	r28, r18
    4740:	fb 83       	std	Y+3, r31	; 0x03
    4742:	ea 83       	std	Y+2, r30	; 0x02
    4744:	49 91       	ld	r20, Y+
    4746:	59 91       	ld	r21, Y+
    4748:	c4 0f       	add	r28, r20
    474a:	d5 1f       	adc	r29, r21
    474c:	ec 17       	cp	r30, r28
    474e:	fd 07       	cpc	r31, r29
    4750:	61 f4       	brne	.+24     	; 0x476a <free+0xbe>
    4752:	80 81       	ld	r24, Z
    4754:	91 81       	ldd	r25, Z+1	; 0x01
    4756:	84 0f       	add	r24, r20
    4758:	95 1f       	adc	r25, r21
    475a:	02 96       	adiw	r24, 0x02	; 2
    475c:	e9 01       	movw	r28, r18
    475e:	99 83       	std	Y+1, r25	; 0x01
    4760:	88 83       	st	Y, r24
    4762:	82 81       	ldd	r24, Z+2	; 0x02
    4764:	93 81       	ldd	r25, Z+3	; 0x03
    4766:	9b 83       	std	Y+3, r25	; 0x03
    4768:	8a 83       	std	Y+2, r24	; 0x02
    476a:	e0 e0       	ldi	r30, 0x00	; 0
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	12 96       	adiw	r26, 0x02	; 2
    4770:	8d 91       	ld	r24, X+
    4772:	9c 91       	ld	r25, X
    4774:	13 97       	sbiw	r26, 0x03	; 3
    4776:	00 97       	sbiw	r24, 0x00	; 0
    4778:	19 f0       	breq	.+6      	; 0x4780 <free+0xd4>
    477a:	fd 01       	movw	r30, r26
    477c:	dc 01       	movw	r26, r24
    477e:	f7 cf       	rjmp	.-18     	; 0x476e <free+0xc2>
    4780:	8d 91       	ld	r24, X+
    4782:	9c 91       	ld	r25, X
    4784:	11 97       	sbiw	r26, 0x01	; 1
    4786:	9d 01       	movw	r18, r26
    4788:	2e 5f       	subi	r18, 0xFE	; 254
    478a:	3f 4f       	sbci	r19, 0xFF	; 255
    478c:	82 0f       	add	r24, r18
    478e:	93 1f       	adc	r25, r19
    4790:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <__brkval>
    4794:	30 91 01 05 	lds	r19, 0x0501	; 0x800501 <__brkval+0x1>
    4798:	28 17       	cp	r18, r24
    479a:	39 07       	cpc	r19, r25
    479c:	69 f4       	brne	.+26     	; 0x47b8 <free+0x10c>
    479e:	30 97       	sbiw	r30, 0x00	; 0
    47a0:	29 f4       	brne	.+10     	; 0x47ac <free+0x100>
    47a2:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <__flp+0x1>
    47a6:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <__flp>
    47aa:	02 c0       	rjmp	.+4      	; 0x47b0 <free+0x104>
    47ac:	13 82       	std	Z+3, r1	; 0x03
    47ae:	12 82       	std	Z+2, r1	; 0x02
    47b0:	b0 93 01 05 	sts	0x0501, r27	; 0x800501 <__brkval+0x1>
    47b4:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <__brkval>
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	08 95       	ret

000047be <memcpy>:
    47be:	fb 01       	movw	r30, r22
    47c0:	dc 01       	movw	r26, r24
    47c2:	02 c0       	rjmp	.+4      	; 0x47c8 <memcpy+0xa>
    47c4:	01 90       	ld	r0, Z+
    47c6:	0d 92       	st	X+, r0
    47c8:	41 50       	subi	r20, 0x01	; 1
    47ca:	50 40       	sbci	r21, 0x00	; 0
    47cc:	d8 f7       	brcc	.-10     	; 0x47c4 <memcpy+0x6>
    47ce:	08 95       	ret

000047d0 <memset>:
    47d0:	dc 01       	movw	r26, r24
    47d2:	01 c0       	rjmp	.+2      	; 0x47d6 <memset+0x6>
    47d4:	6d 93       	st	X+, r22
    47d6:	41 50       	subi	r20, 0x01	; 1
    47d8:	50 40       	sbci	r21, 0x00	; 0
    47da:	e0 f7       	brcc	.-8      	; 0x47d4 <memset+0x4>
    47dc:	08 95       	ret

000047de <__do_global_dtors>:
    47de:	10 e0       	ldi	r17, 0x00	; 0
    47e0:	ca e8       	ldi	r28, 0x8A	; 138
    47e2:	d0 e0       	ldi	r29, 0x00	; 0
    47e4:	04 c0       	rjmp	.+8      	; 0x47ee <__do_global_dtors+0x10>
    47e6:	fe 01       	movw	r30, r28
    47e8:	0e 94 8a 22 	call	0x4514	; 0x4514 <__tablejump2__>
    47ec:	21 96       	adiw	r28, 0x01	; 1
    47ee:	cc 38       	cpi	r28, 0x8C	; 140
    47f0:	d1 07       	cpc	r29, r17
    47f2:	c9 f7       	brne	.-14     	; 0x47e6 <__do_global_dtors+0x8>
    47f4:	f8 94       	cli

000047f6 <__stop_program>:
    47f6:	ff cf       	rjmp	.-2      	; 0x47f6 <__stop_program>
