
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800100  000049d0  00004a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000281  00800240  00800240  00004ba4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e8  00000000  00000000  00004c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000131bc  00000000  00000000  00005600  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a39  00000000  00000000  000187bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067b0  00000000  00000000  0001c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e5c  00000000  00000000  000229a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b8f  00000000  00000000  00024804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b5e9  00000000  00000000  00029393  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000918  00000000  00000000  0003497c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__dtors_end>
       4:	0c 94 92 10 	jmp	0x2124	; 0x2124 <__vector_1>
       8:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__vector_2>
       c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      10:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      14:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      18:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__vector_6>
      1c:	0c 94 90 22 	jmp	0x4520	; 0x4520 <__vector_7>
      20:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      24:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      28:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      2c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      30:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      34:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      38:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      3c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      40:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__vector_16>
      44:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      48:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_18>
      4c:	0c 94 f9 0d 	jmp	0x1bf2	; 0x1bf2 <__vector_19>
      50:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      54:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      58:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      5c:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      60:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      64:	0c 94 b1 00 	jmp	0x162	; 0x162 <__bad_interrupt>
      68:	f8 1d       	adc	r31, r8
      6a:	f8 1d       	adc	r31, r8
      6c:	f8 1d       	adc	r31, r8
      6e:	37 1e       	adc	r3, r23
      70:	22 1e       	adc	r2, r18
      72:	31 1e       	adc	r3, r17
      74:	f8 1d       	adc	r31, r8
      76:	f8 1d       	adc	r31, r8
      78:	37 1e       	adc	r3, r23
      7a:	22 1e       	adc	r2, r18

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <_ZL15dscrc2x16_table>:
      92:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      a2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000b2 <digital_pin_to_timer_PGM>:
      b2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c2:	00 00 00 00                                         ....

000000c6 <digital_pin_to_bit_mask_PGM>:
      c6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d6:	04 08 10 20                                         ... 

000000da <digital_pin_to_port_PGM>:
      da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ea:	03 03 03 03                                         ....

000000ee <port_to_input_PGM>:
      ee:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f8 <port_to_output_PGM>:
      f8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000102 <port_to_mode_PGM>:
     102:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010c <__ctors_start>:
     10c:	56 08       	sbc	r5, r6
     10e:	29 0e       	add	r2, r25

00000110 <__ctors_end>:
     110:	66 08       	sbc	r6, r6

00000112 <__dtors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d8 e0       	ldi	r29, 0x08	; 8
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	12 e0       	ldi	r17, 0x02	; 2
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e0 ed       	ldi	r30, 0xD0	; 208
     126:	f9 e4       	ldi	r31, 0x49	; 73
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a0 34       	cpi	r26, 0x40	; 64
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	24 e0       	ldi	r18, 0x04	; 4
     136:	a0 e4       	ldi	r26, 0x40	; 64
     138:	b2 e0       	ldi	r27, 0x02	; 2
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a1 3c       	cpi	r26, 0xC1	; 193
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>

00000144 <__do_global_ctors>:
     144:	10 e0       	ldi	r17, 0x00	; 0
     146:	c8 e8       	ldi	r28, 0x88	; 136
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	04 c0       	rjmp	.+8      	; 0x154 <__do_global_ctors+0x10>
     14c:	21 97       	sbiw	r28, 0x01	; 1
     14e:	fe 01       	movw	r30, r28
     150:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__tablejump2__>
     154:	c6 38       	cpi	r28, 0x86	; 134
     156:	d1 07       	cpc	r29, r17
     158:	c9 f7       	brne	.-14     	; 0x14c <__do_global_ctors+0x8>
     15a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <main>
     15e:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__do_global_dtors>

00000162 <__bad_interrupt>:
     162:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000166 <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     166:	0c 94 c5 24 	jmp	0x498a	; 0x498a <eeprom_read_byte>

0000016a <_ZN10DFRobot_PHC1Ev>:
#define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);}

#define PHVALUEADDR 0x00    //the start address of the pH calibration parameters stored in the EEPROM


DFRobot_PH::DFRobot_PH()
     16a:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	a8 ec       	ldi	r26, 0xC8	; 200
     172:	b1 e4       	ldi	r27, 0x41	; 65
     174:	80 8b       	std	Z+16, r24	; 0x10
     176:	91 8b       	std	Z+17, r25	; 0x11
     178:	a2 8b       	std	Z+18, r26	; 0x12
     17a:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	a0 ee       	ldi	r26, 0xE0	; 224
     182:	b0 e4       	ldi	r27, 0x40	; 64
     184:	80 83       	st	Z, r24
     186:	91 83       	std	Z+1, r25	; 0x01
     188:	a2 83       	std	Z+2, r26	; 0x02
     18a:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     18c:	84 e1       	ldi	r24, 0x14	; 20
     18e:	9e e0       	ldi	r25, 0x0E	; 14
     190:	ae ef       	ldi	r26, 0xFE	; 254
     192:	b4 e4       	ldi	r27, 0x44	; 68
     194:	84 83       	std	Z+4, r24	; 0x04
     196:	95 83       	std	Z+5, r25	; 0x05
     198:	a6 83       	std	Z+6, r26	; 0x06
     19a:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e8       	ldi	r25, 0x80	; 128
     1a0:	ab eb       	ldi	r26, 0xBB	; 187
     1a2:	b4 e4       	ldi	r27, 0x44	; 68
     1a4:	80 87       	std	Z+8, r24	; 0x08
     1a6:	91 87       	std	Z+9, r25	; 0x09
     1a8:	a2 87       	std	Z+10, r26	; 0x0a
     1aa:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     1ac:	84 87       	std	Z+12, r24	; 0x0c
     1ae:	95 87       	std	Z+13, r25	; 0x0d
     1b0:	a6 87       	std	Z+14, r26	; 0x0e
     1b2:	b7 87       	std	Z+15, r27	; 0x0f
     1b4:	08 95       	ret

000001b6 <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     1b6:	08 95       	ret

000001b8 <_ZN10DFRobot_PH5beginEv>:
{

}

void DFRobot_PH::begin()
{
     1b8:	cf 92       	push	r12
     1ba:	df 92       	push	r13
     1bc:	ef 92       	push	r14
     1be:	ff 92       	push	r15
     1c0:	0f 93       	push	r16
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
    EEPROM_read(PHVALUEADDR, this->_neutralVoltage);  //load the neutral (pH = 7.0)voltage of the pH board from the EEPROM
     1ca:	7c 01       	movw	r14, r24
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	e8 0e       	add	r14, r24
     1d0:	f1 1c       	adc	r15, r1
     1d2:	67 01       	movw	r12, r14
     1d4:	00 e0       	ldi	r16, 0x00	; 0
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	c8 01       	movw	r24, r16
     1da:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     1de:	f6 01       	movw	r30, r12
     1e0:	81 93       	st	Z+, r24
     1e2:	6f 01       	movw	r12, r30
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	04 30       	cpi	r16, 0x04	; 4
     1ea:	11 05       	cpc	r17, r1
     1ec:	a9 f7       	brne	.-22     	; 0x1d8 <_ZN10DFRobot_PH5beginEv+0x20>
    Serial.print("_neutralVoltage:");
     1ee:	65 e3       	ldi	r22, 0x35	; 53
     1f0:	71 e0       	ldi	r23, 0x01	; 1
     1f2:	80 e8       	ldi	r24, 0x80	; 128
     1f4:	93 e0       	ldi	r25, 0x03	; 3
     1f6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
    Serial.println(this->_neutralVoltage);
     1fa:	48 85       	ldd	r20, Y+8	; 0x08
     1fc:	59 85       	ldd	r21, Y+9	; 0x09
     1fe:	6a 85       	ldd	r22, Y+10	; 0x0a
     200:	7b 85       	ldd	r23, Y+11	; 0x0b
     202:	22 e0       	ldi	r18, 0x02	; 2
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	80 e8       	ldi	r24, 0x80	; 128
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR)==0xFF && EEPROM.read(PHVALUEADDR+1)==0xFF && EEPROM.read(PHVALUEADDR+2)==0xFF && EEPROM.read(PHVALUEADDR+3)==0xFF){
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     216:	8f 3f       	cpi	r24, 0xFF	; 255
     218:	39 f5       	brne	.+78     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	09 f5       	brne	.+66     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     226:	82 e0       	ldi	r24, 0x02	; 2
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     22e:	8f 3f       	cpi	r24, 0xFF	; 255
     230:	d9 f4       	brne	.+54     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     23a:	8f 3f       	cpi	r24, 0xFF	; 255
     23c:	a9 f4       	brne	.+42     	; 0x268 <_ZN10DFRobot_PH5beginEv+0xb0>
        this->_neutralVoltage = 1500.0;  // new EEPROM, write typical voltage
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e8       	ldi	r25, 0x80	; 128
     242:	ab eb       	ldi	r26, 0xBB	; 187
     244:	b4 e4       	ldi	r27, 0x44	; 68
     246:	88 87       	std	Y+8, r24	; 0x08
     248:	99 87       	std	Y+9, r25	; 0x09
     24a:	aa 87       	std	Y+10, r26	; 0x0a
     24c:	bb 87       	std	Y+11, r27	; 0x0b
        EEPROM_write(PHVALUEADDR, this->_neutralVoltage);
     24e:	00 e0       	ldi	r16, 0x00	; 0
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	f7 01       	movw	r30, r14
     254:	61 91       	ld	r22, Z+
     256:	7f 01       	movw	r14, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     258:	c8 01       	movw	r24, r16
     25a:	0e 94 cd 24 	call	0x499a	; 0x499a <eeprom_write_byte>
     25e:	0f 5f       	subi	r16, 0xFF	; 255
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	04 30       	cpi	r16, 0x04	; 4
     264:	11 05       	cpc	r17, r1
     266:	a9 f7       	brne	.-22     	; 0x252 <_ZN10DFRobot_PH5beginEv+0x9a>
    }
    EEPROM_read(PHVALUEADDR+4, this->_acidVoltage);//load the acid (pH = 4.0) voltage of the pH board from the EEPROM
     268:	7e 01       	movw	r14, r28
     26a:	f4 e0       	ldi	r31, 0x04	; 4
     26c:	ef 0e       	add	r14, r31
     26e:	f1 1c       	adc	r15, r1
     270:	67 01       	movw	r12, r14
     272:	04 e0       	ldi	r16, 0x04	; 4
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	c8 01       	movw	r24, r16
     278:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     27c:	f6 01       	movw	r30, r12
     27e:	81 93       	st	Z+, r24
     280:	6f 01       	movw	r12, r30
     282:	0f 5f       	subi	r16, 0xFF	; 255
     284:	1f 4f       	sbci	r17, 0xFF	; 255
     286:	08 30       	cpi	r16, 0x08	; 8
     288:	11 05       	cpc	r17, r1
     28a:	a9 f7       	brne	.-22     	; 0x276 <_ZN10DFRobot_PH5beginEv+0xbe>
    Serial.print("_acidVoltage:");
     28c:	66 e4       	ldi	r22, 0x46	; 70
     28e:	71 e0       	ldi	r23, 0x01	; 1
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
    Serial.println(this->_acidVoltage);
     298:	4c 81       	ldd	r20, Y+4	; 0x04
     29a:	5d 81       	ldd	r21, Y+5	; 0x05
     29c:	6e 81       	ldd	r22, Y+6	; 0x06
     29e:	7f 81       	ldd	r23, Y+7	; 0x07
     2a0:	22 e0       	ldi	r18, 0x02	; 2
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	93 e0       	ldi	r25, 0x03	; 3
     2a8:	0e 94 5f 10 	call	0x20be	; 0x20be <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR+4)==0xFF && EEPROM.read(PHVALUEADDR+5)==0xFF && EEPROM.read(PHVALUEADDR+6)==0xFF && EEPROM.read(PHVALUEADDR+7)==0xFF){
     2ac:	84 e0       	ldi	r24, 0x04	; 4
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2b4:	8f 3f       	cpi	r24, 0xFF	; 255
     2b6:	31 f5       	brne	.+76     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2c0:	8f 3f       	cpi	r24, 0xFF	; 255
     2c2:	01 f5       	brne	.+64     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	d1 f4       	brne	.+52     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
     2d0:	87 e0       	ldi	r24, 0x07	; 7
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 b3 00 	call	0x166	; 0x166 <_ZN11EEPROMClass4readEi.isra.0>
     2d8:	8f 3f       	cpi	r24, 0xFF	; 255
     2da:	a1 f4       	brne	.+40     	; 0x304 <_ZN10DFRobot_PH5beginEv+0x14c>
        this->_acidVoltage = 2032.44;  // new EEPROM, write typical voltage
     2dc:	84 e1       	ldi	r24, 0x14	; 20
     2de:	9e e0       	ldi	r25, 0x0E	; 14
     2e0:	ae ef       	ldi	r26, 0xFE	; 254
     2e2:	b4 e4       	ldi	r27, 0x44	; 68
     2e4:	8c 83       	std	Y+4, r24	; 0x04
     2e6:	9d 83       	std	Y+5, r25	; 0x05
     2e8:	ae 83       	std	Y+6, r26	; 0x06
     2ea:	bf 83       	std	Y+7, r27	; 0x07
     2ec:	c4 e0       	ldi	r28, 0x04	; 4
     2ee:	d0 e0       	ldi	r29, 0x00	; 0
        EEPROM_write(PHVALUEADDR+4, this->_acidVoltage);
     2f0:	f7 01       	movw	r30, r14
     2f2:	61 91       	ld	r22, Z+
     2f4:	7f 01       	movw	r14, r30
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 cd 24 	call	0x499a	; 0x499a <eeprom_write_byte>
     2fc:	21 96       	adiw	r28, 0x01	; 1
     2fe:	c8 30       	cpi	r28, 0x08	; 8
     300:	d1 05       	cpc	r29, r1
     302:	b1 f7       	brne	.-20     	; 0x2f0 <_ZN10DFRobot_PH5beginEv+0x138>
    }
}
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	08 95       	ret

00000316 <_ZN10DFRobot_PH6readPHEff>:

float DFRobot_PH::readPH(float voltage, float temperature)
{
     316:	4f 92       	push	r4
     318:	5f 92       	push	r5
     31a:	6f 92       	push	r6
     31c:	7f 92       	push	r7
     31e:	8f 92       	push	r8
     320:	9f 92       	push	r9
     322:	af 92       	push	r10
     324:	bf 92       	push	r11
     326:	cf 92       	push	r12
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	ec 01       	movw	r28, r24
     334:	2a 01       	movw	r4, r20
     336:	3b 01       	movw	r6, r22
    float slope = (7.0-4.0)/((this->_neutralVoltage-1500.0)/3.0 - (this->_acidVoltage-1500.0)/3.0);  // two point: (_neutralVoltage,7.0),(_acidVoltage,4.0)
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e8       	ldi	r19, 0x80	; 128
     33c:	4b eb       	ldi	r20, 0xBB	; 187
     33e:	54 e4       	ldi	r21, 0x44	; 68
     340:	68 85       	ldd	r22, Y+8	; 0x08
     342:	79 85       	ldd	r23, Y+9	; 0x09
     344:	8a 85       	ldd	r24, Y+10	; 0x0a
     346:	9b 85       	ldd	r25, Y+11	; 0x0b
     348:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
     34c:	4b 01       	movw	r8, r22
     34e:	5c 01       	movw	r10, r24
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	40 e4       	ldi	r20, 0x40	; 64
     356:	50 e4       	ldi	r21, 0x40	; 64
     358:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     35c:	6b 01       	movw	r12, r22
     35e:	7c 01       	movw	r14, r24
     360:	20 e0       	ldi	r18, 0x00	; 0
     362:	30 e8       	ldi	r19, 0x80	; 128
     364:	4b eb       	ldi	r20, 0xBB	; 187
     366:	54 e4       	ldi	r21, 0x44	; 68
     368:	6c 81       	ldd	r22, Y+4	; 0x04
     36a:	7d 81       	ldd	r23, Y+5	; 0x05
     36c:	8e 81       	ldd	r24, Y+6	; 0x06
     36e:	9f 81       	ldd	r25, Y+7	; 0x07
     370:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e4       	ldi	r20, 0x40	; 64
     37a:	50 e4       	ldi	r21, 0x40	; 64
     37c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
     384:	c7 01       	movw	r24, r14
     386:	b6 01       	movw	r22, r12
     388:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
     38c:	9b 01       	movw	r18, r22
     38e:	ac 01       	movw	r20, r24
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	80 e4       	ldi	r24, 0x40	; 64
     396:	90 e4       	ldi	r25, 0x40	; 64
     398:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     39c:	6b 01       	movw	r12, r22
     39e:	7c 01       	movw	r14, r24
    float intercept =  7.0 - slope*(this->_neutralVoltage-1500.0)/3.0;
    //Serial.print("slope:");
    //Serial.print(slope);
    //Serial.print(",intercept:");
    //Serial.println(intercept);
    this->_phValue = slope*(voltage-1500.0)/3.0+intercept;  //y = k*x + b
     3a0:	9b 01       	movw	r18, r22
     3a2:	ac 01       	movw	r20, r24
     3a4:	c5 01       	movw	r24, r10
     3a6:	b4 01       	movw	r22, r8
     3a8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e4       	ldi	r20, 0x40	; 64
     3b2:	50 e4       	ldi	r21, 0x40	; 64
     3b4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     3b8:	9b 01       	movw	r18, r22
     3ba:	ac 01       	movw	r20, r24
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	80 ee       	ldi	r24, 0xE0	; 224
     3c2:	90 e4       	ldi	r25, 0x40	; 64
     3c4:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
     3c8:	4b 01       	movw	r8, r22
     3ca:	5c 01       	movw	r10, r24
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e8       	ldi	r19, 0x80	; 128
     3d0:	4b eb       	ldi	r20, 0xBB	; 187
     3d2:	54 e4       	ldi	r21, 0x44	; 68
     3d4:	c3 01       	movw	r24, r6
     3d6:	b2 01       	movw	r22, r4
     3d8:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
     3dc:	a7 01       	movw	r20, r14
     3de:	96 01       	movw	r18, r12
     3e0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e4       	ldi	r20, 0x40	; 64
     3ea:	50 e4       	ldi	r21, 0x40	; 64
     3ec:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
     3f0:	9b 01       	movw	r18, r22
     3f2:	ac 01       	movw	r20, r24
     3f4:	c5 01       	movw	r24, r10
     3f6:	b4 01       	movw	r22, r8
     3f8:	0e 94 49 0a 	call	0x1492	; 0x1492 <__addsf3>
     3fc:	68 83       	st	Y, r22
     3fe:	79 83       	std	Y+1, r23	; 0x01
     400:	8a 83       	std	Y+2, r24	; 0x02
     402:	9b 83       	std	Y+3, r25	; 0x03
    return _phValue;
}
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	9f 90       	pop	r9
     416:	8f 90       	pop	r8
     418:	7f 90       	pop	r7
     41a:	6f 90       	pop	r6
     41c:	5f 90       	pop	r5
     41e:	4f 90       	pop	r4
     420:	08 95       	ret

00000422 <_Z8fromWifiv>:
	return phValue;
}

void calibratePH() {
	ph.calibration(voltage, temperature);
     422:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <xAmmonia>
     426:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <xAmmonia+0x1>
     42a:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <vTaskResume>

0000042e <_ZN5Print5writeEPKc>:
     42e:	61 15       	cp	r22, r1
     430:	71 05       	cpc	r23, r1
     432:	79 f0       	breq	.+30     	; 0x452 <_ZN5Print5writeEPKc+0x24>
     434:	fb 01       	movw	r30, r22
     436:	01 90       	ld	r0, Z+
     438:	00 20       	and	r0, r0
     43a:	e9 f7       	brne	.-6      	; 0x436 <_ZN5Print5writeEPKc+0x8>
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	af 01       	movw	r20, r30
     440:	46 1b       	sub	r20, r22
     442:	57 0b       	sbc	r21, r23
     444:	dc 01       	movw	r26, r24
     446:	ed 91       	ld	r30, X+
     448:	fc 91       	ld	r31, X
     44a:	02 80       	ldd	r0, Z+2	; 0x02
     44c:	f3 81       	ldd	r31, Z+3	; 0x03
     44e:	e0 2d       	mov	r30, r0
     450:	09 94       	ijmp
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	08 95       	ret

00000458 <_ZN14HardwareSerial5writeEl>:
     458:	dc 01       	movw	r26, r24
     45a:	ed 91       	ld	r30, X+
     45c:	fc 91       	ld	r31, X
     45e:	01 90       	ld	r0, Z+
     460:	f0 81       	ld	r31, Z
     462:	e0 2d       	mov	r30, r0
     464:	64 2f       	mov	r22, r20
     466:	09 94       	ijmp

00000468 <_Z11measureTempv>:
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	cd b7       	in	r28, 0x3d	; 61
     478:	de b7       	in	r29, 0x3e	; 62
     47a:	64 97       	sbiw	r28, 0x14	; 20
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	82 e7       	ldi	r24, 0x72	; 114
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <_ZN7OneWire12reset_searchEv>
     48e:	6a ef       	ldi	r22, 0xFA	; 250
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 4f 11 	call	0x229e	; 0x229e <delay>
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	be 01       	movw	r22, r28
     49e:	63 5f       	subi	r22, 0xF3	; 243
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	82 e7       	ldi	r24, 0x72	; 114
     4a4:	93 e0       	ldi	r25, 0x03	; 3
     4a6:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN7OneWire6searchEPhb>
     4aa:	67 e0       	ldi	r22, 0x07	; 7
     4ac:	ce 01       	movw	r24, r28
     4ae:	0d 96       	adiw	r24, 0x0d	; 13
     4b0:	0e 94 30 0a 	call	0x1460	; 0x1460 <_ZN7OneWire4crc8EPKhh>
     4b4:	9c 89       	ldd	r25, Y+20	; 0x14
     4b6:	89 17       	cp	r24, r25
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <_Z11measureTempv+0x58>
     4ba:	69 e6       	ldi	r22, 0x69	; 105
     4bc:	71 e0       	ldi	r23, 0x01	; 1
     4be:	09 c0       	rjmp	.+18     	; 0x4d2 <_Z11measureTempv+0x6a>
     4c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     4c2:	82 32       	cpi	r24, 0x22	; 34
     4c4:	91 f0       	breq	.+36     	; 0x4ea <_Z11measureTempv+0x82>
     4c6:	88 32       	cpi	r24, 0x28	; 40
     4c8:	81 f0       	breq	.+32     	; 0x4ea <_Z11measureTempv+0x82>
     4ca:	80 31       	cpi	r24, 0x10	; 16
     4cc:	59 f0       	breq	.+22     	; 0x4e4 <_Z11measureTempv+0x7c>
     4ce:	6b e7       	ldi	r22, 0x7B	; 123
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	80 e8       	ldi	r24, 0x80	; 128
     4d4:	93 e0       	ldi	r25, 0x03	; 3
     4d6:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN5Print7printlnEPKc>
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	80 e8       	ldi	r24, 0x80	; 128
     4e0:	9f eb       	ldi	r25, 0xBF	; 191
     4e2:	6a c0       	rjmp	.+212    	; 0x5b8 <_Z11measureTempv+0x150>
     4e4:	ff 24       	eor	r15, r15
     4e6:	f3 94       	inc	r15
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <_Z11measureTempv+0x84>
     4ea:	f1 2c       	mov	r15, r1
     4ec:	82 e7       	ldi	r24, 0x72	; 114
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire5resetEv>
     4f4:	be 01       	movw	r22, r28
     4f6:	63 5f       	subi	r22, 0xF3	; 243
     4f8:	7f 4f       	sbci	r23, 0xFF	; 255
     4fa:	82 e7       	ldi	r24, 0x72	; 114
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN7OneWire6selectEPKh>
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	64 e4       	ldi	r22, 0x44	; 68
     506:	82 e7       	ldi	r24, 0x72	; 114
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7OneWire5writeEhh>
     50e:	68 ee       	ldi	r22, 0xE8	; 232
     510:	73 e0       	ldi	r23, 0x03	; 3
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 4f 11 	call	0x229e	; 0x229e <delay>
     51a:	82 e7       	ldi	r24, 0x72	; 114
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire5resetEv>
     522:	be 01       	movw	r22, r28
     524:	63 5f       	subi	r22, 0xF3	; 243
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	82 e7       	ldi	r24, 0x72	; 114
     52a:	93 e0       	ldi	r25, 0x03	; 3
     52c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <_ZN7OneWire6selectEPKh>
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	6e eb       	ldi	r22, 0xBE	; 190
     534:	82 e7       	ldi	r24, 0x72	; 114
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7OneWire5writeEhh>
     53c:	8e 01       	movw	r16, r28
     53e:	0f 5f       	subi	r16, 0xFF	; 255
     540:	1f 4f       	sbci	r17, 0xFF	; 255
     542:	6e 01       	movw	r12, r28
     544:	8a e0       	ldi	r24, 0x0A	; 10
     546:	c8 0e       	add	r12, r24
     548:	d1 1c       	adc	r13, r1
     54a:	82 e7       	ldi	r24, 0x72	; 114
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN7OneWire4readEv>
     552:	f8 01       	movw	r30, r16
     554:	81 93       	st	Z+, r24
     556:	8f 01       	movw	r16, r30
     558:	ec 15       	cp	r30, r12
     55a:	fd 05       	cpc	r31, r13
     55c:	b1 f7       	brne	.-20     	; 0x54a <_Z11measureTempv+0xe2>
     55e:	69 81       	ldd	r22, Y+1	; 0x01
     560:	7a 81       	ldd	r23, Y+2	; 0x02
     562:	ff 20       	and	r15, r15
     564:	89 f0       	breq	.+34     	; 0x588 <_Z11measureTempv+0x120>
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	66 0f       	add	r22, r22
     56a:	77 1f       	adc	r23, r23
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <_Z11measureTempv+0x100>
     570:	88 85       	ldd	r24, Y+8	; 0x08
     572:	80 31       	cpi	r24, 0x10	; 16
     574:	a9 f4       	brne	.+42     	; 0x5a0 <_Z11measureTempv+0x138>
     576:	2f 81       	ldd	r18, Y+7	; 0x07
     578:	8c e0       	ldi	r24, 0x0C	; 12
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	82 1b       	sub	r24, r18
     57e:	91 09       	sbc	r25, r1
     580:	60 7f       	andi	r22, 0xF0	; 240
     582:	68 0f       	add	r22, r24
     584:	79 1f       	adc	r23, r25
     586:	0c c0       	rjmp	.+24     	; 0x5a0 <_Z11measureTempv+0x138>
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	80 76       	andi	r24, 0x60	; 96
     58c:	11 f4       	brne	.+4      	; 0x592 <_Z11measureTempv+0x12a>
     58e:	68 7f       	andi	r22, 0xF8	; 248
     590:	07 c0       	rjmp	.+14     	; 0x5a0 <_Z11measureTempv+0x138>
     592:	80 32       	cpi	r24, 0x20	; 32
     594:	11 f4       	brne	.+4      	; 0x59a <_Z11measureTempv+0x132>
     596:	6c 7f       	andi	r22, 0xFC	; 252
     598:	03 c0       	rjmp	.+6      	; 0x5a0 <_Z11measureTempv+0x138>
     59a:	80 34       	cpi	r24, 0x40	; 64
     59c:	09 f4       	brne	.+2      	; 0x5a0 <_Z11measureTempv+0x138>
     59e:	6e 7f       	andi	r22, 0xFE	; 254
     5a0:	07 2e       	mov	r0, r23
     5a2:	00 0c       	add	r0, r0
     5a4:	88 0b       	sbc	r24, r24
     5a6:	99 0b       	sbc	r25, r25
     5a8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__floatsisf>
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e8       	ldi	r20, 0x80	; 128
     5b2:	5d e3       	ldi	r21, 0x3D	; 61
     5b4:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     5b8:	64 96       	adiw	r28, 0x14	; 20
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	08 95       	ret

000005d4 <_Z9addColorsv>:
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	cf e3       	ldi	r28, 0x3F	; 63
     5de:	d3 e0       	ldi	r29, 0x03	; 3
     5e0:	18 82       	st	Y, r1
     5e2:	19 82       	std	Y+1, r1	; 0x01
     5e4:	1a 82       	std	Y+2, r1	; 0x02
     5e6:	1b 82       	std	Y+3, r1	; 0x03
     5e8:	1d 82       	std	Y+5, r1	; 0x05
     5ea:	1c 82       	std	Y+4, r1	; 0x04
     5ec:	1f 82       	std	Y+7, r1	; 0x07
     5ee:	1e 82       	std	Y+6, r1	; 0x06
     5f0:	19 86       	std	Y+9, r1	; 0x09
     5f2:	18 86       	std	Y+8, r1	; 0x08
     5f4:	a9 ef       	ldi	r26, 0xF9	; 249
     5f6:	b2 e0       	ldi	r27, 0x02	; 2
     5f8:	1d 92       	st	X+, r1
     5fa:	1d 92       	st	X+, r1
     5fc:	1d 92       	st	X+, r1
     5fe:	1c 92       	st	X, r1
     600:	13 97       	sbiw	r26, 0x03	; 3
     602:	15 96       	adiw	r26, 0x05	; 5
     604:	1c 92       	st	X, r1
     606:	1e 92       	st	-X, r1
     608:	14 97       	sbiw	r26, 0x04	; 4
     60a:	17 96       	adiw	r26, 0x07	; 7
     60c:	1c 92       	st	X, r1
     60e:	1e 92       	st	-X, r1
     610:	16 97       	sbiw	r26, 0x06	; 6
     612:	19 96       	adiw	r26, 0x09	; 9
     614:	1c 92       	st	X, r1
     616:	1e 92       	st	-X, r1
     618:	18 97       	sbiw	r26, 0x08	; 8
     61a:	e3 eb       	ldi	r30, 0xB3	; 179
     61c:	f2 e0       	ldi	r31, 0x02	; 2
     61e:	10 82       	st	Z, r1
     620:	11 82       	std	Z+1, r1	; 0x01
     622:	12 82       	std	Z+2, r1	; 0x02
     624:	13 82       	std	Z+3, r1	; 0x03
     626:	15 82       	std	Z+5, r1	; 0x05
     628:	14 82       	std	Z+4, r1	; 0x04
     62a:	17 82       	std	Z+7, r1	; 0x07
     62c:	16 82       	std	Z+6, r1	; 0x06
     62e:	11 86       	std	Z+9, r1	; 0x09
     630:	10 86       	std	Z+8, r1	; 0x08
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e8       	ldi	r22, 0x80	; 128
     638:	7e e3       	ldi	r23, 0x3E	; 62
     63a:	4a 87       	std	Y+10, r20	; 0x0a
     63c:	5b 87       	std	Y+11, r21	; 0x0b
     63e:	6c 87       	std	Y+12, r22	; 0x0c
     640:	7d 87       	std	Y+13, r23	; 0x0d
     642:	1f 86       	std	Y+15, r1	; 0x0f
     644:	1e 86       	std	Y+14, r1	; 0x0e
     646:	19 8a       	std	Y+17, r1	; 0x11
     648:	18 8a       	std	Y+16, r1	; 0x10
     64a:	1b 8a       	std	Y+19, r1	; 0x13
     64c:	1a 8a       	std	Y+18, r1	; 0x12
     64e:	4a e9       	ldi	r20, 0x9A	; 154
     650:	59 e9       	ldi	r21, 0x99	; 153
     652:	69 e1       	ldi	r22, 0x19	; 25
     654:	7e e3       	ldi	r23, 0x3E	; 62
     656:	1a 96       	adiw	r26, 0x0a	; 10
     658:	4d 93       	st	X+, r20
     65a:	5d 93       	st	X+, r21
     65c:	6d 93       	st	X+, r22
     65e:	7c 93       	st	X, r23
     660:	1d 97       	sbiw	r26, 0x0d	; 13
     662:	1f 96       	adiw	r26, 0x0f	; 15
     664:	1c 92       	st	X, r1
     666:	1e 92       	st	-X, r1
     668:	1e 97       	sbiw	r26, 0x0e	; 14
     66a:	51 96       	adiw	r26, 0x11	; 17
     66c:	1c 92       	st	X, r1
     66e:	1e 92       	st	-X, r1
     670:	50 97       	sbiw	r26, 0x10	; 16
     672:	53 96       	adiw	r26, 0x13	; 19
     674:	1c 92       	st	X, r1
     676:	1e 92       	st	-X, r1
     678:	52 97       	sbiw	r26, 0x12	; 18
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	7f e3       	ldi	r23, 0x3F	; 63
     682:	42 87       	std	Z+10, r20	; 0x0a
     684:	53 87       	std	Z+11, r21	; 0x0b
     686:	64 87       	std	Z+12, r22	; 0x0c
     688:	75 87       	std	Z+13, r23	; 0x0d
     68a:	17 86       	std	Z+15, r1	; 0x0f
     68c:	16 86       	std	Z+14, r1	; 0x0e
     68e:	11 8a       	std	Z+17, r1	; 0x11
     690:	10 8a       	std	Z+16, r1	; 0x10
     692:	13 8a       	std	Z+19, r1	; 0x13
     694:	12 8a       	std	Z+18, r1	; 0x12
     696:	4c 8b       	std	Y+20, r20	; 0x14
     698:	5d 8b       	std	Y+21, r21	; 0x15
     69a:	6e 8b       	std	Y+22, r22	; 0x16
     69c:	7f 8b       	std	Y+23, r23	; 0x17
     69e:	19 8e       	std	Y+25, r1	; 0x19
     6a0:	18 8e       	std	Y+24, r1	; 0x18
     6a2:	1b 8e       	std	Y+27, r1	; 0x1b
     6a4:	1a 8e       	std	Y+26, r1	; 0x1a
     6a6:	1d 8e       	std	Y+29, r1	; 0x1d
     6a8:	1c 8e       	std	Y+28, r1	; 0x1c
     6aa:	4a e9       	ldi	r20, 0x9A	; 154
     6ac:	59 e9       	ldi	r21, 0x99	; 153
     6ae:	69 e9       	ldi	r22, 0x99	; 153
     6b0:	7e e3       	ldi	r23, 0x3E	; 62
     6b2:	54 96       	adiw	r26, 0x14	; 20
     6b4:	4d 93       	st	X+, r20
     6b6:	5d 93       	st	X+, r21
     6b8:	6d 93       	st	X+, r22
     6ba:	7c 93       	st	X, r23
     6bc:	57 97       	sbiw	r26, 0x17	; 23
     6be:	59 96       	adiw	r26, 0x19	; 25
     6c0:	1c 92       	st	X, r1
     6c2:	1e 92       	st	-X, r1
     6c4:	58 97       	sbiw	r26, 0x18	; 24
     6c6:	5b 96       	adiw	r26, 0x1b	; 27
     6c8:	1c 92       	st	X, r1
     6ca:	1e 92       	st	-X, r1
     6cc:	5a 97       	sbiw	r26, 0x1a	; 26
     6ce:	5d 96       	adiw	r26, 0x1d	; 29
     6d0:	1c 92       	st	X, r1
     6d2:	1e 92       	st	-X, r1
     6d4:	5c 97       	sbiw	r26, 0x1c	; 28
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e4       	ldi	r23, 0x40	; 64
     6de:	44 8b       	std	Z+20, r20	; 0x14
     6e0:	55 8b       	std	Z+21, r21	; 0x15
     6e2:	66 8b       	std	Z+22, r22	; 0x16
     6e4:	77 8b       	std	Z+23, r23	; 0x17
     6e6:	11 8e       	std	Z+25, r1	; 0x19
     6e8:	10 8e       	std	Z+24, r1	; 0x18
     6ea:	13 8e       	std	Z+27, r1	; 0x1b
     6ec:	12 8e       	std	Z+26, r1	; 0x1a
     6ee:	15 8e       	std	Z+29, r1	; 0x1d
     6f0:	14 8e       	std	Z+28, r1	; 0x1c
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	20 e4       	ldi	r18, 0x40	; 64
     6f8:	30 e4       	ldi	r19, 0x40	; 64
     6fa:	0e 8f       	std	Y+30, r16	; 0x1e
     6fc:	1f 8f       	std	Y+31, r17	; 0x1f
     6fe:	28 a3       	std	Y+32, r18	; 0x20
     700:	39 a3       	std	Y+33, r19	; 0x21
     702:	1b a2       	std	Y+35, r1	; 0x23
     704:	1a a2       	std	Y+34, r1	; 0x22
     706:	1d a2       	std	Y+37, r1	; 0x25
     708:	1c a2       	std	Y+36, r1	; 0x24
     70a:	1f a2       	std	Y+39, r1	; 0x27
     70c:	1e a2       	std	Y+38, r1	; 0x26
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	60 e8       	ldi	r22, 0x80	; 128
     714:	7f e3       	ldi	r23, 0x3F	; 63
     716:	5e 96       	adiw	r26, 0x1e	; 30
     718:	4d 93       	st	X+, r20
     71a:	5d 93       	st	X+, r21
     71c:	6d 93       	st	X+, r22
     71e:	7c 93       	st	X, r23
     720:	91 97       	sbiw	r26, 0x21	; 33
     722:	93 96       	adiw	r26, 0x23	; 35
     724:	1c 92       	st	X, r1
     726:	1e 92       	st	-X, r1
     728:	92 97       	sbiw	r26, 0x22	; 34
     72a:	95 96       	adiw	r26, 0x25	; 37
     72c:	1c 92       	st	X, r1
     72e:	1e 92       	st	-X, r1
     730:	94 97       	sbiw	r26, 0x24	; 36
     732:	97 96       	adiw	r26, 0x27	; 39
     734:	1c 92       	st	X, r1
     736:	1e 92       	st	-X, r1
     738:	96 97       	sbiw	r26, 0x26	; 38
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 ea       	ldi	r22, 0xA0	; 160
     740:	70 e4       	ldi	r23, 0x40	; 64
     742:	46 8f       	std	Z+30, r20	; 0x1e
     744:	57 8f       	std	Z+31, r21	; 0x1f
     746:	60 a3       	std	Z+32, r22	; 0x20
     748:	71 a3       	std	Z+33, r23	; 0x21
     74a:	13 a2       	std	Z+35, r1	; 0x23
     74c:	12 a2       	std	Z+34, r1	; 0x22
     74e:	15 a2       	std	Z+37, r1	; 0x25
     750:	14 a2       	std	Z+36, r1	; 0x24
     752:	17 a2       	std	Z+39, r1	; 0x27
     754:	16 a2       	std	Z+38, r1	; 0x26
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	60 ec       	ldi	r22, 0xC0	; 192
     75c:	70 e4       	ldi	r23, 0x40	; 64
     75e:	48 a7       	std	Y+40, r20	; 0x28
     760:	59 a7       	std	Y+41, r21	; 0x29
     762:	6a a7       	std	Y+42, r22	; 0x2a
     764:	7b a7       	std	Y+43, r23	; 0x2b
     766:	1d a6       	std	Y+45, r1	; 0x2d
     768:	1c a6       	std	Y+44, r1	; 0x2c
     76a:	1f a6       	std	Y+47, r1	; 0x2f
     76c:	1e a6       	std	Y+46, r1	; 0x2e
     76e:	19 aa       	std	Y+49, r1	; 0x31
     770:	18 aa       	std	Y+48, r1	; 0x30
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	60 ec       	ldi	r22, 0xC0	; 192
     778:	7f e3       	ldi	r23, 0x3F	; 63
     77a:	98 96       	adiw	r26, 0x28	; 40
     77c:	4d 93       	st	X+, r20
     77e:	5d 93       	st	X+, r21
     780:	6d 93       	st	X+, r22
     782:	7c 93       	st	X, r23
     784:	9b 97       	sbiw	r26, 0x2b	; 43
     786:	9d 96       	adiw	r26, 0x2d	; 45
     788:	1c 92       	st	X, r1
     78a:	1e 92       	st	-X, r1
     78c:	9c 97       	sbiw	r26, 0x2c	; 44
     78e:	9f 96       	adiw	r26, 0x2f	; 47
     790:	1c 92       	st	X, r1
     792:	1e 92       	st	-X, r1
     794:	9e 97       	sbiw	r26, 0x2e	; 46
     796:	d1 96       	adiw	r26, 0x31	; 49
     798:	1c 92       	st	X, r1
     79a:	1e 92       	st	-X, r1
     79c:	d0 97       	sbiw	r26, 0x30	; 48
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	60 e2       	ldi	r22, 0x20	; 32
     7a4:	71 e4       	ldi	r23, 0x41	; 65
     7a6:	40 a7       	std	Z+40, r20	; 0x28
     7a8:	51 a7       	std	Z+41, r21	; 0x29
     7aa:	62 a7       	std	Z+42, r22	; 0x2a
     7ac:	73 a7       	std	Z+43, r23	; 0x2b
     7ae:	15 a6       	std	Z+45, r1	; 0x2d
     7b0:	14 a6       	std	Z+44, r1	; 0x2c
     7b2:	17 a6       	std	Z+47, r1	; 0x2f
     7b4:	16 a6       	std	Z+46, r1	; 0x2e
     7b6:	11 aa       	std	Z+49, r1	; 0x31
     7b8:	10 aa       	std	Z+48, r1	; 0x30
     7ba:	d2 96       	adiw	r26, 0x32	; 50
     7bc:	0d 93       	st	X+, r16
     7be:	1d 93       	st	X+, r17
     7c0:	2d 93       	st	X+, r18
     7c2:	3c 93       	st	X, r19
     7c4:	d5 97       	sbiw	r26, 0x35	; 53
     7c6:	d7 96       	adiw	r26, 0x37	; 55
     7c8:	1c 92       	st	X, r1
     7ca:	1e 92       	st	-X, r1
     7cc:	d6 97       	sbiw	r26, 0x36	; 54
     7ce:	d9 96       	adiw	r26, 0x39	; 57
     7d0:	1c 92       	st	X, r1
     7d2:	1e 92       	st	-X, r1
     7d4:	d8 97       	sbiw	r26, 0x38	; 56
     7d6:	db 96       	adiw	r26, 0x3b	; 59
     7d8:	1c 92       	st	X, r1
     7da:	1e 92       	st	-X, r1
     7dc:	da 97       	sbiw	r26, 0x3a	; 58
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	20 ea       	ldi	r18, 0xA0	; 160
     7e4:	31 e4       	ldi	r19, 0x41	; 65
     7e6:	02 ab       	std	Z+50, r16	; 0x32
     7e8:	13 ab       	std	Z+51, r17	; 0x33
     7ea:	24 ab       	std	Z+52, r18	; 0x34
     7ec:	35 ab       	std	Z+53, r19	; 0x35
     7ee:	17 aa       	std	Z+55, r1	; 0x37
     7f0:	16 aa       	std	Z+54, r1	; 0x36
     7f2:	11 ae       	std	Z+57, r1	; 0x39
     7f4:	10 ae       	std	Z+56, r1	; 0x38
     7f6:	13 ae       	std	Z+59, r1	; 0x3b
     7f8:	12 ae       	std	Z+58, r1	; 0x3a
     7fa:	dc 96       	adiw	r26, 0x3c	; 60
     7fc:	4d 93       	st	X+, r20
     7fe:	5d 93       	st	X+, r21
     800:	6d 93       	st	X+, r22
     802:	7c 93       	st	X, r23
     804:	df 97       	sbiw	r26, 0x3f	; 63
     806:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <Nitrite+0x41>
     80a:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <Nitrite+0x40>
     80e:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <Nitrite+0x43>
     812:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <Nitrite+0x42>
     816:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <Nitrite+0x45>
     81a:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <Nitrite+0x44>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	a8 e4       	ldi	r26, 0x48	; 72
     824:	b2 e4       	ldi	r27, 0x42	; 66
     826:	84 af       	std	Z+60, r24	; 0x3c
     828:	95 af       	std	Z+61, r25	; 0x3d
     82a:	a6 af       	std	Z+62, r26	; 0x3e
     82c:	b7 af       	std	Z+63, r27	; 0x3f
     82e:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <Nitrate+0x41>
     832:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <Nitrate+0x40>
     836:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <Nitrate+0x43>
     83a:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <Nitrate+0x42>
     83e:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <Nitrate+0x45>
     842:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <Nitrate+0x44>
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	1f 91       	pop	r17
     84c:	0f 91       	pop	r16
     84e:	08 95       	ret

00000850 <_Z9SameColorv>:
     850:	1f 93       	push	r17
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	10 91 b0 02 	lds	r17, 0x02B0	; 0x8002b0 <rgb>
     85a:	d0 91 b1 02 	lds	r29, 0x02B1	; 0x8002b1 <rgb+0x1>
     85e:	c0 91 b2 02 	lds	r28, 0x02B2	; 0x8002b2 <rgb+0x2>
     862:	62 ea       	ldi	r22, 0xA2	; 162
     864:	71 e0       	ldi	r23, 0x01	; 1
     866:	80 e8       	ldi	r24, 0x80	; 128
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     86e:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <c+0x4>
     872:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <c+0x5>
     876:	4a e0       	ldi	r20, 0x0A	; 10
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	80 e8       	ldi	r24, 0x80	; 128
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_ZN5Print5printEii>
     882:	64 ea       	ldi	r22, 0xA4	; 164
     884:	71 e0       	ldi	r23, 0x01	; 1
     886:	80 e8       	ldi	r24, 0x80	; 128
     888:	93 e0       	ldi	r25, 0x03	; 3
     88a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     88e:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <c+0x6>
     892:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <c+0x7>
     896:	4a e0       	ldi	r20, 0x0A	; 10
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	80 e8       	ldi	r24, 0x80	; 128
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_ZN5Print5printEii>
     8a2:	64 ea       	ldi	r22, 0xA4	; 164
     8a4:	71 e0       	ldi	r23, 0x01	; 1
     8a6:	80 e8       	ldi	r24, 0x80	; 128
     8a8:	93 e0       	ldi	r25, 0x03	; 3
     8aa:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     8ae:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <c+0x8>
     8b2:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <c+0x9>
     8b6:	4a e0       	ldi	r20, 0x0A	; 10
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	80 e8       	ldi	r24, 0x80	; 128
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_ZN5Print5printEii>
     8c2:	66 ea       	ldi	r22, 0xA6	; 166
     8c4:	71 e0       	ldi	r23, 0x01	; 1
     8c6:	80 e8       	ldi	r24, 0x80	; 128
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	61 2f       	mov	r22, r17
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN5Print5printEhi>
     8dc:	64 ea       	ldi	r22, 0xA4	; 164
     8de:	71 e0       	ldi	r23, 0x01	; 1
     8e0:	80 e8       	ldi	r24, 0x80	; 128
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     8e8:	4a e0       	ldi	r20, 0x0A	; 10
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	6d 2f       	mov	r22, r29
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	93 e0       	ldi	r25, 0x03	; 3
     8f2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN5Print5printEhi>
     8f6:	64 ea       	ldi	r22, 0xA4	; 164
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	80 e8       	ldi	r24, 0x80	; 128
     8fc:	93 e0       	ldi	r25, 0x03	; 3
     8fe:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     902:	4a e0       	ldi	r20, 0x0A	; 10
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	6c 2f       	mov	r22, r28
     908:	80 e8       	ldi	r24, 0x80	; 128
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_ZN5Print5printEhi>
     910:	61 2f       	mov	r22, r17
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <c+0x4>
     918:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <c+0x5>
     91c:	9c 01       	movw	r18, r24
     91e:	24 51       	subi	r18, 0x14	; 20
     920:	31 09       	sbc	r19, r1
     922:	62 17       	cp	r22, r18
     924:	73 07       	cpc	r23, r19
     926:	64 f1       	brlt	.+88     	; 0x980 <__stack+0x81>
     928:	44 96       	adiw	r24, 0x14	; 20
     92a:	86 17       	cp	r24, r22
     92c:	97 07       	cpc	r25, r23
     92e:	44 f1       	brlt	.+80     	; 0x980 <__stack+0x81>
     930:	6d 2f       	mov	r22, r29
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <c+0x6>
     938:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <c+0x7>
     93c:	9c 01       	movw	r18, r24
     93e:	24 51       	subi	r18, 0x14	; 20
     940:	31 09       	sbc	r19, r1
     942:	62 17       	cp	r22, r18
     944:	73 07       	cpc	r23, r19
     946:	e4 f0       	brlt	.+56     	; 0x980 <__stack+0x81>
     948:	44 96       	adiw	r24, 0x14	; 20
     94a:	86 17       	cp	r24, r22
     94c:	97 07       	cpc	r25, r23
     94e:	c4 f0       	brlt	.+48     	; 0x980 <__stack+0x81>
     950:	6c 2f       	mov	r22, r28
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <c+0x8>
     958:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <c+0x9>
     95c:	9c 01       	movw	r18, r24
     95e:	24 51       	subi	r18, 0x14	; 20
     960:	31 09       	sbc	r19, r1
     962:	62 17       	cp	r22, r18
     964:	73 07       	cpc	r23, r19
     966:	64 f0       	brlt	.+24     	; 0x980 <__stack+0x81>
     968:	44 96       	adiw	r24, 0x14	; 20
     96a:	86 17       	cp	r24, r22
     96c:	97 07       	cpc	r25, r23
     96e:	44 f0       	brlt	.+16     	; 0x980 <__stack+0x81>
     970:	6c e7       	ldi	r22, 0x7C	; 124
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	80 e8       	ldi	r24, 0x80	; 128
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN5Print5printEPK19__FlashStringHelper>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x83>
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	08 95       	ret

0000098a <_Z9FindMatchv>:
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <typeToRead>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f4       	brne	.+2      	; 0x99c <_Z9FindMatchv+0x12>
     99a:	48 c0       	rjmp	.+144    	; 0xa2c <_Z9FindMatchv+0xa2>
     99c:	40 f0       	brcs	.+16     	; 0x9ae <_Z9FindMatchv+0x24>
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <_Z9FindMatchv+0x1a>
     9a2:	6e c0       	rjmp	.+220    	; 0xa80 <_Z9FindMatchv+0xf6>
     9a4:	09 ef       	ldi	r16, 0xF9	; 249
     9a6:	12 e0       	ldi	r17, 0x02	; 2
     9a8:	c6 e0       	ldi	r28, 0x06	; 6
     9aa:	d0 e0       	ldi	r29, 0x00	; 0
     9ac:	29 c0       	rjmp	.+82     	; 0xa00 <_Z9FindMatchv+0x76>
     9ae:	0f e3       	ldi	r16, 0x3F	; 63
     9b0:	13 e0       	ldi	r17, 0x03	; 3
     9b2:	c4 e0       	ldi	r28, 0x04	; 4
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	f8 01       	movw	r30, r16
     9ba:	b8 96       	adiw	r30, 0x28	; 40
     9bc:	a6 ea       	ldi	r26, 0xA6	; 166
     9be:	b2 e0       	ldi	r27, 0x02	; 2
     9c0:	01 90       	ld	r0, Z+
     9c2:	0d 92       	st	X+, r0
     9c4:	8a 95       	dec	r24
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <_Z9FindMatchv+0x36>
     9c8:	0e 94 28 04 	call	0x850	; 0x850 <_Z9SameColorv>
     9cc:	88 23       	and	r24, r24
     9ce:	49 f0       	breq	.+18     	; 0x9e2 <_Z9FindMatchv+0x58>
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	8c 9f       	mul	r24, r28
     9d4:	f0 01       	movw	r30, r0
     9d6:	8d 9f       	mul	r24, r29
     9d8:	f0 0d       	add	r31, r0
     9da:	11 24       	eor	r1, r1
     9dc:	e1 5c       	subi	r30, 0xC1	; 193
     9de:	fc 4f       	sbci	r31, 0xFC	; 252
     9e0:	3e c0       	rjmp	.+124    	; 0xa5e <_Z9FindMatchv+0xd4>
     9e2:	21 97       	sbiw	r28, 0x01	; 1
     9e4:	0a 50       	subi	r16, 0x0A	; 10
     9e6:	11 09       	sbc	r17, r1
     9e8:	cf 3f       	cpi	r28, 0xFF	; 255
     9ea:	8f ef       	ldi	r24, 0xFF	; 255
     9ec:	d8 07       	cpc	r29, r24
     9ee:	19 f7       	brne	.-58     	; 0x9b6 <_Z9FindMatchv+0x2c>
     9f0:	42 c0       	rjmp	.+132    	; 0xa76 <_Z9FindMatchv+0xec>
     9f2:	21 97       	sbiw	r28, 0x01	; 1
     9f4:	0a 50       	subi	r16, 0x0A	; 10
     9f6:	11 09       	sbc	r17, r1
     9f8:	cf 3f       	cpi	r28, 0xFF	; 255
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	d8 07       	cpc	r29, r24
     9fe:	d9 f1       	breq	.+118    	; 0xa76 <_Z9FindMatchv+0xec>
     a00:	8a e0       	ldi	r24, 0x0A	; 10
     a02:	f8 01       	movw	r30, r16
     a04:	fc 96       	adiw	r30, 0x3c	; 60
     a06:	a6 ea       	ldi	r26, 0xA6	; 166
     a08:	b2 e0       	ldi	r27, 0x02	; 2
     a0a:	01 90       	ld	r0, Z+
     a0c:	0d 92       	st	X+, r0
     a0e:	8a 95       	dec	r24
     a10:	e1 f7       	brne	.-8      	; 0xa0a <_Z9FindMatchv+0x80>
     a12:	0e 94 28 04 	call	0x850	; 0x850 <_Z9SameColorv>
     a16:	88 23       	and	r24, r24
     a18:	61 f3       	breq	.-40     	; 0x9f2 <_Z9FindMatchv+0x68>
     a1a:	8a e0       	ldi	r24, 0x0A	; 10
     a1c:	8c 9f       	mul	r24, r28
     a1e:	f0 01       	movw	r30, r0
     a20:	8d 9f       	mul	r24, r29
     a22:	f0 0d       	add	r31, r0
     a24:	11 24       	eor	r1, r1
     a26:	e7 50       	subi	r30, 0x07	; 7
     a28:	fd 4f       	sbci	r31, 0xFD	; 253
     a2a:	19 c0       	rjmp	.+50     	; 0xa5e <_Z9FindMatchv+0xd4>
     a2c:	03 eb       	ldi	r16, 0xB3	; 179
     a2e:	12 e0       	ldi	r17, 0x02	; 2
     a30:	c6 e0       	ldi	r28, 0x06	; 6
     a32:	d0 e0       	ldi	r29, 0x00	; 0
     a34:	8a e0       	ldi	r24, 0x0A	; 10
     a36:	f8 01       	movw	r30, r16
     a38:	fc 96       	adiw	r30, 0x3c	; 60
     a3a:	a6 ea       	ldi	r26, 0xA6	; 166
     a3c:	b2 e0       	ldi	r27, 0x02	; 2
     a3e:	01 90       	ld	r0, Z+
     a40:	0d 92       	st	X+, r0
     a42:	8a 95       	dec	r24
     a44:	e1 f7       	brne	.-8      	; 0xa3e <_Z9FindMatchv+0xb4>
     a46:	0e 94 28 04 	call	0x850	; 0x850 <_Z9SameColorv>
     a4a:	88 23       	and	r24, r24
     a4c:	69 f0       	breq	.+26     	; 0xa68 <_Z9FindMatchv+0xde>
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	8c 9f       	mul	r24, r28
     a52:	f0 01       	movw	r30, r0
     a54:	8d 9f       	mul	r24, r29
     a56:	f0 0d       	add	r31, r0
     a58:	11 24       	eor	r1, r1
     a5a:	ed 54       	subi	r30, 0x4D	; 77
     a5c:	fd 4f       	sbci	r31, 0xFD	; 253
     a5e:	30 81       	ld	r19, Z
     a60:	21 81       	ldd	r18, Z+1	; 0x01
     a62:	92 81       	ldd	r25, Z+2	; 0x02
     a64:	83 81       	ldd	r24, Z+3	; 0x03
     a66:	0b c0       	rjmp	.+22     	; 0xa7e <_Z9FindMatchv+0xf4>
     a68:	21 97       	sbiw	r28, 0x01	; 1
     a6a:	0a 50       	subi	r16, 0x0A	; 10
     a6c:	11 09       	sbc	r17, r1
     a6e:	cf 3f       	cpi	r28, 0xFF	; 255
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	d8 07       	cpc	r29, r24
     a74:	f9 f6       	brne	.-66     	; 0xa34 <_Z9FindMatchv+0xaa>
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	90 e8       	ldi	r25, 0x80	; 128
     a7c:	8f eb       	ldi	r24, 0xBF	; 191
     a7e:	ac 01       	movw	r20, r24
     a80:	63 2f       	mov	r22, r19
     a82:	72 2f       	mov	r23, r18
     a84:	85 2f       	mov	r24, r21
     a86:	94 2f       	mov	r25, r20
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <_Z9ScanColorv>:
     a92:	87 e7       	ldi	r24, 0x77	; 119
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_ZN9MD_TCS2304readEv>
     a9a:	87 e7       	ldi	r24, 0x77	; 119
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <_ZN9MD_TCS2309availableEv>
     aa2:	88 23       	and	r24, r24
     aa4:	d1 f3       	breq	.-12     	; 0xa9a <_Z9ScanColorv+0x8>
     aa6:	60 eb       	ldi	r22, 0xB0	; 176
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	87 e7       	ldi	r24, 0x77	; 119
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN9MD_TCS2306getRGBEP9colorData>
     ab2:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z9FindMatchv>
     ab6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fixsfsi>
     aba:	08 95       	ret

00000abc <_Z13findTestStripv>:
     abc:	cf 93       	push	r28
     abe:	87 e7       	ldi	r24, 0x77	; 119
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_ZN9MD_TCS2304readEv>
     ac6:	87 e7       	ldi	r24, 0x77	; 119
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 d1 1f 	call	0x3fa2	; 0x3fa2 <_ZN9MD_TCS2309availableEv>
     ace:	88 23       	and	r24, r24
     ad0:	d1 f3       	breq	.-12     	; 0xac6 <_Z13findTestStripv+0xa>
     ad2:	60 eb       	ldi	r22, 0xB0	; 176
     ad4:	72 e0       	ldi	r23, 0x02	; 2
     ad6:	87 e7       	ldi	r24, 0x77	; 119
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <_ZN9MD_TCS2306getRGBEP9colorData>
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	e6 e2       	ldi	r30, 0x26	; 38
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	a6 ea       	ldi	r26, 0xA6	; 166
     ae6:	b2 e0       	ldi	r27, 0x02	; 2
     ae8:	01 90       	ld	r0, Z+
     aea:	0d 92       	st	X+, r0
     aec:	8a 95       	dec	r24
     aee:	e1 f7       	brne	.-8      	; 0xae8 <_Z13findTestStripv+0x2c>
     af0:	0e 94 28 04 	call	0x850	; 0x850 <_Z9SameColorv>
     af4:	c8 2f       	mov	r28, r24
     af6:	8a e0       	ldi	r24, 0x0A	; 10
     af8:	ec e1       	ldi	r30, 0x1C	; 28
     afa:	f1 e0       	ldi	r31, 0x01	; 1
     afc:	a6 ea       	ldi	r26, 0xA6	; 166
     afe:	b2 e0       	ldi	r27, 0x02	; 2
     b00:	01 90       	ld	r0, Z+
     b02:	0d 92       	st	X+, r0
     b04:	8a 95       	dec	r24
     b06:	e1 f7       	brne	.-8      	; 0xb00 <_Z13findTestStripv+0x44>
     b08:	c1 11       	cpse	r28, r1
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <_Z13findTestStripv+0x56>
     b0c:	0e 94 28 04 	call	0x850	; 0x850 <_Z9SameColorv>
     b10:	c8 2f       	mov	r28, r24
     b12:	6c 2f       	mov	r22, r28
     b14:	70 e0       	ldi	r23, 0x00	; 0
     b16:	4a e0       	ldi	r20, 0x0A	; 10
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	80 e8       	ldi	r24, 0x80	; 128
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <_ZN5Print5printEii>
     b22:	62 e2       	ldi	r22, 0x22	; 34
     b24:	72 e0       	ldi	r23, 0x02	; 2
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	93 e0       	ldi	r25, 0x03	; 3
     b2a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <_ZN5Print5printEPKc>
     b2e:	8c 2f       	mov	r24, r28
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <_Z6setLED8LEDColor>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <_Z6setLED8LEDColor+0x6>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <_Z6setLED8LEDColor+0x8>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <_Z6setLED8LEDColor+0xa>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	49 83       	std	Y+1, r20	; 0x01
     b44:	5a 83       	std	Y+2, r21	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	7c 83       	std	Y+4, r23	; 0x04
     b4a:	8d 83       	std	Y+5, r24	; 0x05
     b4c:	9e 83       	std	Y+6, r25	; 0x06
     b4e:	69 81       	ldd	r22, Y+1	; 0x01
     b50:	7a 81       	ldd	r23, Y+2	; 0x02
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	0e 94 ee 11 	call	0x23dc	; 0x23dc <analogWrite>
     b58:	6b 81       	ldd	r22, Y+3	; 0x03
     b5a:	7c 81       	ldd	r23, Y+4	; 0x04
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <analogWrite>
     b62:	6d 81       	ldd	r22, Y+5	; 0x05
     b64:	7e 81       	ldd	r23, Y+6	; 0x06
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	26 96       	adiw	r28, 0x06	; 6
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <analogWrite>

00000b7c <_Z15TaskAmmoniaReadPv>:
     b7c:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	8d e0       	ldi	r24, 0x0D	; 13
     b84:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <xSerialSemaphoreColorSensor>
     b90:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <xSerialSemaphoreColorSensor+0x1>
     b94:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xQueueSemaphoreTake>
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	09 f0       	breq	.+2      	; 0xb9e <_Z15TaskAmmoniaReadPv+0x22>
     b9c:	69 c0       	rjmp	.+210    	; 0xc70 <_Z15TaskAmmoniaReadPv+0xf4>
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	89 e0       	ldi	r24, 0x09	; 9
     ba2:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
     ba6:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Blue>
     baa:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Blue+0x1>
     bae:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Blue+0x2>
     bb2:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Blue+0x3>
     bb6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Blue+0x4>
     bba:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Blue+0x5>
     bbe:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     bc2:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z13findTestStripv>
     bc6:	81 11       	cpse	r24, r1
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <_Z15TaskAmmoniaReadPv+0x46>
     bca:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Green>
     bce:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Green+0x1>
     bd2:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Green+0x2>
     bd6:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Green+0x3>
     bda:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Green+0x4>
     bde:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Green+0x5>
     be2:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     be6:	6a ef       	ldi	r22, 0xFA	; 250
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 4f 11 	call	0x229e	; 0x229e <delay>
     bf2:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <typeToRead>
     bf6:	0e 94 49 05 	call	0xa92	; 0xa92 <_Z9ScanColorv>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	60 eb       	ldi	r22, 0xB0	; 176
     c00:	71 e0       	ldi	r23, 0x01	; 1
     c02:	80 e8       	ldi	r24, 0x80	; 128
     c04:	93 e0       	ldi	r25, 0x03	; 3
     c06:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     c0a:	6c eb       	ldi	r22, 0xBC	; 188
     c0c:	71 e0       	ldi	r23, 0x01	; 1
     c0e:	80 e8       	ldi	r24, 0x80	; 128
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     c16:	60 eb       	ldi	r22, 0xB0	; 176
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	80 e8       	ldi	r24, 0x80	; 128
     c1c:	93 e0       	ldi	r25, 0x03	; 3
     c1e:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     c22:	b7 01       	movw	r22, r14
     c24:	a6 01       	movw	r20, r12
     c26:	80 e8       	ldi	r24, 0x80	; 128
     c28:	93 e0       	ldi	r25, 0x03	; 3
     c2a:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14HardwareSerial5writeEl>
     c2e:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     c32:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     c36:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     c3a:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     c3e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     c42:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     c46:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	89 e0       	ldi	r24, 0x09	; 9
     c4e:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <xSerialSemaphoreColorSensor>
     c60:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <xSerialSemaphoreColorSensor+0x1>
     c64:	0e 94 fe 13 	call	0x27fc	; 0x27fc <xQueueGenericSend>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 31 1a 	call	0x3462	; 0x3462 <vTaskSuspend>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 be 19 	call	0x337c	; 0x337c <vTaskDelay>
     c78:	87 cf       	rjmp	.-242    	; 0xb88 <_Z15TaskAmmoniaReadPv+0xc>

00000c7a <_Z22TaskNitriteNitrateReadPv>:
     c7a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	8d e0       	ldi	r24, 0x0D	; 13
     c82:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
     c86:	c1 e0       	ldi	r28, 0x01	; 1
     c88:	d2 e0       	ldi	r29, 0x02	; 2
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <xSerialSemaphoreColorSensor>
     c92:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <xSerialSemaphoreColorSensor+0x1>
     c96:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <xQueueSemaphoreTake>
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <_Z22TaskNitriteNitrateReadPv+0x26>
     c9e:	91 c0       	rjmp	.+290    	; 0xdc2 <_Z22TaskNitriteNitrateReadPv+0x148>
     ca0:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z13findTestStripv>
     ca4:	88 23       	and	r24, r24
     ca6:	e1 f3       	breq	.-8      	; 0xca0 <_Z22TaskNitriteNitrateReadPv+0x26>
     ca8:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <Green>
     cac:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <Green+0x1>
     cb0:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <Green+0x2>
     cb4:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <Green+0x3>
     cb8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Green+0x4>
     cbc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Green+0x5>
     cc0:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     cc4:	6a ef       	ldi	r22, 0xFA	; 250
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 4f 11 	call	0x229e	; 0x229e <delay>
     cd0:	c0 93 71 03 	sts	0x0371, r28	; 0x800371 <typeToRead>
     cd4:	0e 94 49 05 	call	0xa92	; 0xa92 <_Z9ScanColorv>
     cd8:	6b 01       	movw	r12, r22
     cda:	7c 01       	movw	r14, r24
     cdc:	60 eb       	ldi	r22, 0xB0	; 176
     cde:	71 e0       	ldi	r23, 0x01	; 1
     ce0:	80 e8       	ldi	r24, 0x80	; 128
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     ce8:	64 ec       	ldi	r22, 0xC4	; 196
     cea:	71 e0       	ldi	r23, 0x01	; 1
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	93 e0       	ldi	r25, 0x03	; 3
     cf0:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     cf4:	60 eb       	ldi	r22, 0xB0	; 176
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	93 e0       	ldi	r25, 0x03	; 3
     cfc:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     d00:	b7 01       	movw	r22, r14
     d02:	a6 01       	movw	r20, r12
     d04:	80 e8       	ldi	r24, 0x80	; 128
     d06:	93 e0       	ldi	r25, 0x03	; 3
     d08:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14HardwareSerial5writeEl>
     d0c:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     d10:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     d14:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     d18:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     d1c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     d20:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     d24:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     d28:	0e 94 5e 05 	call	0xabc	; 0xabc <_Z13findTestStripv>
     d2c:	88 23       	and	r24, r24
     d2e:	e1 f3       	breq	.-8      	; 0xd28 <_Z22TaskNitriteNitrateReadPv+0xae>
     d30:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Blue>
     d34:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Blue+0x1>
     d38:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Blue+0x2>
     d3c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Blue+0x3>
     d40:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Blue+0x4>
     d44:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Blue+0x5>
     d48:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     d4c:	d0 93 71 03 	sts	0x0371, r29	; 0x800371 <typeToRead>
     d50:	0e 94 49 05 	call	0xa92	; 0xa92 <_Z9ScanColorv>
     d54:	6b 01       	movw	r12, r22
     d56:	7c 01       	movw	r14, r24
     d58:	60 eb       	ldi	r22, 0xB0	; 176
     d5a:	71 e0       	ldi	r23, 0x01	; 1
     d5c:	80 e8       	ldi	r24, 0x80	; 128
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     d64:	6c ec       	ldi	r22, 0xCC	; 204
     d66:	71 e0       	ldi	r23, 0x01	; 1
     d68:	80 e8       	ldi	r24, 0x80	; 128
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     d70:	60 eb       	ldi	r22, 0xB0	; 176
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	80 e8       	ldi	r24, 0x80	; 128
     d76:	93 e0       	ldi	r25, 0x03	; 3
     d78:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     d7c:	b7 01       	movw	r22, r14
     d7e:	a6 01       	movw	r20, r12
     d80:	80 e8       	ldi	r24, 0x80	; 128
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14HardwareSerial5writeEl>
     d88:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     d8c:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     d90:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     d94:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     d98:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     d9c:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     da0:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <xSerialSemaphoreColorSensor>
     db2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <xSerialSemaphoreColorSensor+0x1>
     db6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <xQueueGenericSend>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 31 1a 	call	0x3462	; 0x3462 <vTaskSuspend>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 be 19 	call	0x337c	; 0x337c <vTaskDelay>
     dca:	5f cf       	rjmp	.-322    	; 0xc8a <_Z22TaskNitriteNitrateReadPv+0x10>

00000dcc <_Z19TaskTemperatureReadPv>:
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <_Z19TaskTemperatureReadPv+0x6>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Blue>
     de2:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Blue+0x1>
     de6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <Blue+0x2>
     dea:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <Blue+0x3>
     dee:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Blue+0x4>
     df2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Blue+0x5>
     df6:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     dfa:	0e 94 34 02 	call	0x468	; 0x468 <_Z11measureTempv>
     dfe:	6b 01       	movw	r12, r22
     e00:	7c 01       	movw	r14, r24
     e02:	60 eb       	ldi	r22, 0xB0	; 176
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     e0e:	64 ed       	ldi	r22, 0xD4	; 212
     e10:	71 e0       	ldi	r23, 0x01	; 1
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     e1a:	60 eb       	ldi	r22, 0xB0	; 176
     e1c:	71 e0       	ldi	r23, 0x01	; 1
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     e26:	c7 01       	movw	r24, r14
     e28:	b6 01       	movw	r22, r12
     e2a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fixsfsi>
     e2e:	ab 01       	movw	r20, r22
     e30:	bc 01       	movw	r22, r24
     e32:	80 e8       	ldi	r24, 0x80	; 128
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14HardwareSerial5writeEl>
     e3a:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     e3e:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     e42:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     e46:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     e4a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     e4e:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     e52:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     e56:	64 ed       	ldi	r22, 0xD4	; 212
     e58:	71 e0       	ldi	r23, 0x01	; 1
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	0e 94 86 19 	call	0x330c	; 0x330c <vTaskDelayUntil>
     e62:	bd cf       	rjmp	.-134    	; 0xdde <_Z19TaskTemperatureReadPv+0x12>

00000e64 <_Z8setupLEDv>:
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	84 e0       	ldi	r24, 0x04	; 4
     e78:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
     e7c:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     e80:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     e84:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     e88:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     e8c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     e90:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     e94:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <_Z6setLED8LEDColor>

00000e98 <_Z6phInitv>:
     e98:	8a e4       	ldi	r24, 0x4A	; 74
     e9a:	92 e0       	ldi	r25, 0x02	; 2
     e9c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_ZN10DFRobot_PH5beginEv>

00000ea0 <_Z5getPHv>:
     ea0:	0f 93       	push	r16
     ea2:	1f 93       	push	r17
     ea4:	8f e0       	ldi	r24, 0x0F	; 15
     ea6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <analogRead>
     eaa:	bc 01       	movw	r22, r24
     eac:	99 0f       	add	r25, r25
     eae:	88 0b       	sbc	r24, r24
     eb0:	99 0b       	sbc	r25, r25
     eb2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__floatsisf>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5a e3       	ldi	r21, 0x3A	; 58
     ebe:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e4       	ldi	r19, 0x40	; 64
     ec6:	4c e9       	ldi	r20, 0x9C	; 156
     ec8:	55 e4       	ldi	r21, 0x45	; 69
     eca:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
     ece:	ab 01       	movw	r20, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	40 93 6d 02 	sts	0x026D, r20	; 0x80026d <voltage>
     ed6:	50 93 6e 02 	sts	0x026E, r21	; 0x80026e <voltage+0x1>
     eda:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <voltage+0x2>
     ede:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <voltage+0x3>
     ee2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <temperature>
     ee6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <temperature+0x1>
     eea:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperature+0x2>
     eee:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperature+0x3>
     ef2:	8a e4       	ldi	r24, 0x4A	; 74
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN10DFRobot_PH6readPHEff>
     efa:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <phValue>
     efe:	70 93 6a 02 	sts	0x026A, r23	; 0x80026a <phValue+0x1>
     f02:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <phValue+0x2>
     f06:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <phValue+0x3>
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <_Z10TaskPHReadPv>:
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <_Z10TaskPHReadPv+0x6>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Red>
     f26:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Red+0x1>
     f2a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <Red+0x2>
     f2e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <Red+0x3>
     f32:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Red+0x4>
     f36:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Red+0x5>
     f3a:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	89 e0       	ldi	r24, 0x09	; 9
     f42:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
     f46:	64 ef       	ldi	r22, 0xF4	; 244
     f48:	71 e0       	ldi	r23, 0x01	; 1
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 4f 11 	call	0x229e	; 0x229e <delay>
     f52:	0e 94 50 07 	call	0xea0	; 0xea0 <_Z5getPHv>
     f56:	6b 01       	movw	r12, r22
     f58:	7c 01       	movw	r14, r24
     f5a:	60 eb       	ldi	r22, 0xB0	; 176
     f5c:	71 e0       	ldi	r23, 0x01	; 1
     f5e:	80 e8       	ldi	r24, 0x80	; 128
     f60:	93 e0       	ldi	r25, 0x03	; 3
     f62:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     f66:	69 ed       	ldi	r22, 0xD9	; 217
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     f72:	60 eb       	ldi	r22, 0xB0	; 176
     f74:	71 e0       	ldi	r23, 0x01	; 1
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__fixsfsi>
     f86:	ab 01       	movw	r20, r22
     f88:	bc 01       	movw	r22, r24
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	93 e0       	ldi	r25, 0x03	; 3
     f8e:	0e 94 2c 02 	call	0x458	; 0x458 <_ZN14HardwareSerial5writeEl>
     f92:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <Off>
     f96:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <Off+0x1>
     f9a:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <Off+0x2>
     f9e:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <Off+0x3>
     fa2:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <Off+0x4>
     fa6:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <Off+0x5>
     faa:	0e 94 9a 05 	call	0xb34	; 0xb34 <_Z6setLED8LEDColor>
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	89 e0       	ldi	r24, 0x09	; 9
     fb2:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
     fb6:	6a ef       	ldi	r22, 0xFA	; 250
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 86 19 	call	0x330c	; 0x330c <vTaskDelayUntil>
     fc2:	af cf       	rjmp	.-162    	; 0xf22 <_Z10TaskPHReadPv+0x12>

00000fc4 <setup>:
TaskHandle_t xTemperature;



// the setup function runs once when you press reset or power the board
void setup() {
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     fca:	26 e0       	ldi	r18, 0x06	; 6
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	52 ec       	ldi	r21, 0xC2	; 194
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN14HardwareSerial5beginEmh>
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
  }
  
  // initialize Wifi module
  Serial.write("AT");
     fdc:	6c ed       	ldi	r22, 0xDC	; 220
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	80 e8       	ldi	r24, 0x80	; 128
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
  //String okay = Serial.read(); // unsure how to read from Wifi module
  //assert(okay == "OK"); // module is on
  Serial.write("AT+CWMODE=1"); // client mode
     fe8:	6f ed       	ldi	r22, 0xDF	; 223
     fea:	71 e0       	ldi	r23, 0x01	; 1
     fec:	80 e8       	ldi	r24, 0x80	; 128
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>

  // load test strip color data and initialize indicator LED
  addColors();
     ff4:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z9addColorsv>
  setupLED();
     ff8:	0e 94 32 07 	call	0xe64	; 0xe64 <_Z8setupLEDv>
  
  // initialize pH sensor
  phInit();
     ffc:	0e 94 4c 07 	call	0xe98	; 0xe98 <_Z6phInitv>
  
  digitalWrite(0, LOW);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>

  // TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
  attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
    1008:	43 e0       	ldi	r20, 0x03	; 3
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	61 e1       	ldi	r22, 0x11	; 17
    100e:	72 e0       	ldi	r23, 0x02	; 2
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 72 10 	call	0x20e4	; 0x20e4 <attachInterrupt>
    TaskAmmoniaRead
    ,  (const portCHAR *)"Ammonia"
    ,  128
    ,  NULL
    ,  2
    ,  &xAmmonia );
    1016:	86 e4       	ldi	r24, 0x46	; 70
    1018:	e8 2e       	mov	r14, r24
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	f8 2e       	mov	r15, r24
    101e:	02 e0       	ldi	r16, 0x02	; 2
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	6b ee       	ldi	r22, 0xEB	; 235
    102a:	71 e0       	ldi	r23, 0x01	; 1
    102c:	8e eb       	ldi	r24, 0xBE	; 190
    102e:	95 e0       	ldi	r25, 0x05	; 5
    1030:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
    TaskNitriteNitrateRead
    ,  (const portCHAR *) "Nitrite/Nitrate"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xNitriteNitrate );
    1034:	94 e4       	ldi	r25, 0x44	; 68
    1036:	e9 2e       	mov	r14, r25
    1038:	92 e0       	ldi	r25, 0x02	; 2
    103a:	f9 2e       	mov	r15, r25
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	63 ef       	ldi	r22, 0xF3	; 243
    1046:	71 e0       	ldi	r23, 0x01	; 1
    1048:	8d e3       	ldi	r24, 0x3D	; 61
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
    TaskPHRead
    ,  (const portCHAR *) "pH"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xPH );
    1050:	22 e4       	ldi	r18, 0x42	; 66
    1052:	e2 2e       	mov	r14, r18
    1054:	22 e0       	ldi	r18, 0x02	; 2
    1056:	f2 2e       	mov	r15, r18
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	69 ed       	ldi	r22, 0xD9	; 217
    1062:	71 e0       	ldi	r23, 0x01	; 1
    1064:	88 e8       	ldi	r24, 0x88	; 136
    1066:	97 e0       	ldi	r25, 0x07	; 7
    1068:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
    TaskTemperatureRead
    ,  (const portCHAR *) "Temperature"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xTemperature );
    106c:	30 e4       	ldi	r19, 0x40	; 64
    106e:	e3 2e       	mov	r14, r19
    1070:	32 e0       	ldi	r19, 0x02	; 2
    1072:	f3 2e       	mov	r15, r19
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	63 e0       	ldi	r22, 0x03	; 3
    107e:	72 e0       	ldi	r23, 0x02	; 2
    1080:	86 ee       	ldi	r24, 0xE6	; 230
    1082:	96 e0       	ldi	r25, 0x06	; 6
    1084:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
	
  vTaskSuspend(xAmmonia);
    1088:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <xAmmonia>
    108c:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <xAmmonia+0x1>
    1090:	0e 94 31 1a 	call	0x3462	; 0x3462 <vTaskSuspend>
  vTaskSuspend(xNitriteNitrate);
    1094:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xNitriteNitrate>
    1098:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xNitriteNitrate+0x1>
    109c:	0e 94 31 1a 	call	0x3462	; 0x3462 <vTaskSuspend>

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
}
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
	
  vTaskSuspend(xAmmonia);
  vTaskSuspend(xNitriteNitrate);

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
    10a6:	0c 94 2d 18 	jmp	0x305a	; 0x305a <vTaskStartScheduler>

000010aa <loop>:
}

void loop()
{
    10aa:	08 95       	ret

000010ac <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
    10ac:	67 e0       	ldi	r22, 0x07	; 7
    10ae:	82 e7       	ldi	r24, 0x72	; 114
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN7OneWire5beginEh>
Color WhiteTestStrip {0, {255, 81, 84}};

colorData rgb;
Color c;

MD_TCS230  CS(S2, S3, OE);
    10b6:	28 e0       	ldi	r18, 0x08	; 8
    10b8:	4d e0       	ldi	r20, 0x0D	; 13
    10ba:	6c e0       	ldi	r22, 0x0C	; 12
    10bc:	87 e7       	ldi	r24, 0x77	; 119
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <_ZN9MD_TCS230C1Ehhh>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define PH_PIN A1
float voltage, phValue, temperature = 25;
DFRobot_PH ph;
    10c4:	8a e4       	ldi	r24, 0x4A	; 74
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_ZN10DFRobot_PHC1Ev>

000010cc <_GLOBAL__sub_D_ds>:
    10cc:	8a e4       	ldi	r24, 0x4A	; 74
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN10DFRobot_PHD1Ev>
    10d4:	87 e7       	ldi	r24, 0x77	; 119
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	0c 94 9f 1e 	jmp	0x3d3e	; 0x3d3e <_ZN9MD_TCS230D1Ev>

000010dc <_ZN7OneWire5resetEv>:
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	fc 01       	movw	r30, r24
    10e8:	f0 80       	ld	r15, Z
    10ea:	c1 81       	ldd	r28, Z+1	; 0x01
    10ec:	d2 81       	ldd	r29, Z+2	; 0x02
    10ee:	f8 94       	cli
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	0f 2d       	mov	r16, r15
    10f4:	00 95       	com	r16
    10f6:	80 23       	and	r24, r16
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	78 94       	sei
    10fc:	1d e7       	ldi	r17, 0x7D	; 125
    10fe:	11 50       	subi	r17, 0x01	; 1
    1100:	29 f1       	breq	.+74     	; 0x114c <_ZN7OneWire5resetEv+0x70>
    1102:	82 e0       	ldi	r24, 0x02	; 2
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    110a:	88 81       	ld	r24, Y
    110c:	8f 21       	and	r24, r15
    110e:	b9 f3       	breq	.-18     	; 0x10fe <_ZN7OneWire5resetEv+0x22>
    1110:	f8 94       	cli
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 23       	and	r24, r16
    1116:	8a 83       	std	Y+2, r24	; 0x02
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	8f 29       	or	r24, r15
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	78 94       	sei
    1120:	80 ee       	ldi	r24, 0xE0	; 224
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    1128:	f8 94       	cli
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	08 23       	and	r16, r24
    112e:	09 83       	std	Y+1, r16	; 0x01
    1130:	86 e4       	ldi	r24, 0x46	; 70
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    1138:	88 81       	ld	r24, Y
    113a:	f8 22       	and	r15, r24
    113c:	11 e0       	ldi	r17, 0x01	; 1
    113e:	09 f0       	breq	.+2      	; 0x1142 <_ZN7OneWire5resetEv+0x66>
    1140:	10 e0       	ldi	r17, 0x00	; 0
    1142:	78 94       	sei
    1144:	8a e9       	ldi	r24, 0x9A	; 154
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    114c:	81 2f       	mov	r24, r17
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	08 95       	ret

0000115a <_ZN7OneWire9write_bitEh>:
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	fc 01       	movw	r30, r24
    1162:	10 81       	ld	r17, Z
    1164:	c1 81       	ldd	r28, Z+1	; 0x01
    1166:	d2 81       	ldd	r29, Z+2	; 0x02
    1168:	81 2f       	mov	r24, r17
    116a:	80 95       	com	r24
    116c:	60 ff       	sbrs	r22, 0
    116e:	12 c0       	rjmp	.+36     	; 0x1194 <_ZN7OneWire9write_bitEh+0x3a>
    1170:	f8 94       	cli
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	89 23       	and	r24, r25
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	81 2b       	or	r24, r17
    117c:	89 83       	std	Y+1, r24	; 0x01
    117e:	8a e0       	ldi	r24, 0x0A	; 10
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	18 2b       	or	r17, r24
    118a:	1a 83       	std	Y+2, r17	; 0x02
    118c:	78 94       	sei
    118e:	87 e3       	ldi	r24, 0x37	; 55
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	11 c0       	rjmp	.+34     	; 0x11b6 <_ZN7OneWire9write_bitEh+0x5c>
    1194:	f8 94       	cli
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	89 23       	and	r24, r25
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	81 2b       	or	r24, r17
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	81 e4       	ldi	r24, 0x41	; 65
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	18 2b       	or	r17, r24
    11ae:	1a 83       	std	Y+2, r17	; 0x02
    11b0:	78 94       	sei
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <delayMicroseconds>

000011c0 <_ZN7OneWire8read_bitEv>:
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	fc 01       	movw	r30, r24
    11ca:	00 81       	ld	r16, Z
    11cc:	c1 81       	ldd	r28, Z+1	; 0x01
    11ce:	d2 81       	ldd	r29, Z+2	; 0x02
    11d0:	f8 94       	cli
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	80 2b       	or	r24, r16
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	10 2f       	mov	r17, r16
    11dc:	10 95       	com	r17
    11de:	81 23       	and	r24, r17
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	18 23       	and	r17, r24
    11ee:	19 83       	std	Y+1, r17	; 0x01
    11f0:	8a e0       	ldi	r24, 0x0A	; 10
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    11f8:	c8 81       	ld	r28, Y
    11fa:	78 94       	sei
    11fc:	85 e3       	ldi	r24, 0x35	; 53
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 8b 11 	call	0x2316	; 0x2316 <delayMicroseconds>
    1204:	c0 23       	and	r28, r16
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	09 f4       	brne	.+2      	; 0x120c <_ZN7OneWire8read_bitEv+0x4c>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <_ZN7OneWire5writeEhh>:
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	ec 01       	movw	r28, r24
    1226:	d6 2e       	mov	r13, r22
    1228:	e4 2e       	mov	r14, r20
    122a:	08 e0       	ldi	r16, 0x08	; 8
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	ff 24       	eor	r15, r15
    1230:	f3 94       	inc	r15
    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	8d 2d       	mov	r24, r13
    1236:	8f 21       	and	r24, r15
    1238:	09 f4       	brne	.+2      	; 0x123c <_ZN7OneWire5writeEhh+0x26>
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN7OneWire9write_bitEh>
    1242:	ff 0c       	add	r15, r15
    1244:	01 50       	subi	r16, 0x01	; 1
    1246:	11 09       	sbc	r17, r1
    1248:	a1 f7       	brne	.-24     	; 0x1232 <_ZN7OneWire5writeEhh+0x1c>
    124a:	e1 10       	cpse	r14, r1
    124c:	10 c0       	rjmp	.+32     	; 0x126e <_ZN7OneWire5writeEhh+0x58>
    124e:	f8 94       	cli
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	91 81       	ldd	r25, Z+1	; 0x01
    1256:	88 81       	ld	r24, Y
    1258:	80 95       	com	r24
    125a:	89 23       	and	r24, r25
    125c:	81 83       	std	Z+1, r24	; 0x01
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	92 81       	ldd	r25, Z+2	; 0x02
    1264:	88 81       	ld	r24, Y
    1266:	80 95       	com	r24
    1268:	89 23       	and	r24, r25
    126a:	82 83       	std	Z+2, r24	; 0x02
    126c:	78 94       	sei
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	08 95       	ret

0000127e <_ZN7OneWire4readEv>:
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	7c 01       	movw	r14, r24
    128c:	08 e0       	ldi	r16, 0x08	; 8
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	c0 e0       	ldi	r28, 0x00	; 0
    1292:	d1 e0       	ldi	r29, 0x01	; 1
    1294:	c7 01       	movw	r24, r14
    1296:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN7OneWire8read_bitEv>
    129a:	81 11       	cpse	r24, r1
    129c:	cd 2b       	or	r28, r29
    129e:	dd 0f       	add	r29, r29
    12a0:	01 50       	subi	r16, 0x01	; 1
    12a2:	11 09       	sbc	r17, r1
    12a4:	b9 f7       	brne	.-18     	; 0x1294 <_ZN7OneWire4readEv+0x16>
    12a6:	8c 2f       	mov	r24, r28
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	1f 91       	pop	r17
    12ae:	0f 91       	pop	r16
    12b0:	ff 90       	pop	r15
    12b2:	ef 90       	pop	r14
    12b4:	08 95       	ret

000012b6 <_ZN7OneWire6selectEPKh>:
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	8c 01       	movw	r16, r24
    12c4:	7b 01       	movw	r14, r22
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	65 e5       	ldi	r22, 0x55	; 85
    12ca:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7OneWire5writeEhh>
    12ce:	e7 01       	movw	r28, r14
    12d0:	88 e0       	ldi	r24, 0x08	; 8
    12d2:	e8 0e       	add	r14, r24
    12d4:	f1 1c       	adc	r15, r1
    12d6:	69 91       	ld	r22, Y+
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	c8 01       	movw	r24, r16
    12dc:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7OneWire5writeEhh>
    12e0:	ce 15       	cp	r28, r14
    12e2:	df 05       	cpc	r29, r15
    12e4:	c1 f7       	brne	.-16     	; 0x12d6 <_ZN7OneWire6selectEPKh+0x20>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <_ZN7OneWire12reset_searchEv>:
    12f4:	fc 01       	movw	r30, r24
    12f6:	13 86       	std	Z+11, r1	; 0x0b
    12f8:	15 86       	std	Z+13, r1	; 0x0d
    12fa:	14 86       	std	Z+12, r1	; 0x0c
    12fc:	dc 01       	movw	r26, r24
    12fe:	1b 96       	adiw	r26, 0x0b	; 11
    1300:	33 96       	adiw	r30, 0x03	; 3
    1302:	1e 92       	st	-X, r1
    1304:	ae 17       	cp	r26, r30
    1306:	bf 07       	cpc	r27, r31
    1308:	e1 f7       	brne	.-8      	; 0x1302 <_ZN7OneWire12reset_searchEv+0xe>
    130a:	08 95       	ret

0000130c <_ZN7OneWire5beginEh>:
    130c:	1f 93       	push	r17
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    1314:	16 2f       	mov	r17, r22
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	81 2f       	mov	r24, r17
    131a:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
    131e:	61 2f       	mov	r22, r17
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	fb 01       	movw	r30, r22
    1324:	ea 53       	subi	r30, 0x3A	; 58
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	e4 91       	lpm	r30, Z
    132a:	e8 83       	st	Y, r30
    132c:	fb 01       	movw	r30, r22
    132e:	e6 52       	subi	r30, 0x26	; 38
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	e4 91       	lpm	r30, Z
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	e2 51       	subi	r30, 0x12	; 18
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	85 91       	lpm	r24, Z+
    1340:	94 91       	lpm	r25, Z
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	ce 01       	movw	r24, r28
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_ZN7OneWire12reset_searchEv>

00001352 <_ZN7OneWire6searchEPhb>:
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	ec 01       	movw	r28, r24
    1366:	6b 01       	movw	r12, r22
    1368:	14 2f       	mov	r17, r20
    136a:	8d 85       	ldd	r24, Y+13	; 0x0d
    136c:	81 11       	cpse	r24, r1
    136e:	05 c0       	rjmp	.+10     	; 0x137a <_ZN7OneWire6searchEPhb+0x28>
    1370:	ce 01       	movw	r24, r28
    1372:	0e 94 6e 08 	call	0x10dc	; 0x10dc <_ZN7OneWire5resetEv>
    1376:	81 11       	cpse	r24, r1
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <_ZN7OneWire6searchEPhb+0x32>
    137a:	1b 86       	std	Y+11, r1	; 0x0b
    137c:	1d 86       	std	Y+13, r1	; 0x0d
    137e:	1c 86       	std	Y+12, r1	; 0x0c
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	64 c0       	rjmp	.+200    	; 0x144c <_ZN7OneWire6searchEPhb+0xfa>
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	11 23       	and	r17, r17
    1388:	11 f0       	breq	.+4      	; 0x138e <_ZN7OneWire6searchEPhb+0x3c>
    138a:	60 ef       	ldi	r22, 0xF0	; 240
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <_ZN7OneWire6searchEPhb+0x3e>
    138e:	6c ee       	ldi	r22, 0xEC	; 236
    1390:	ce 01       	movw	r24, r28
    1392:	0e 94 0b 09 	call	0x1216	; 0x1216 <_ZN7OneWire5writeEhh>
    1396:	01 e0       	ldi	r16, 0x01	; 1
    1398:	e1 2c       	mov	r14, r1
    139a:	b1 2c       	mov	r11, r1
    139c:	11 e0       	ldi	r17, 0x01	; 1
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN7OneWire8read_bitEv>
    13a4:	f8 2e       	mov	r15, r24
    13a6:	ce 01       	movw	r24, r28
    13a8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_ZN7OneWire8read_bitEv>
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	f9 12       	cpse	r15, r25
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <_ZN7OneWire6searchEPhb+0x66>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	b1 f4       	brne	.+44     	; 0x13e2 <_ZN7OneWire6searchEPhb+0x90>
    13b6:	34 c0       	rjmp	.+104    	; 0x1420 <_ZN7OneWire6searchEPhb+0xce>
    13b8:	2e 2d       	mov	r18, r14
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f8 12       	cpse	r15, r24
    13be:	1b c0       	rjmp	.+54     	; 0x13f6 <_ZN7OneWire6searchEPhb+0xa4>
    13c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13c2:	18 17       	cp	r17, r24
    13c4:	38 f4       	brcc	.+14     	; 0x13d4 <_ZN7OneWire6searchEPhb+0x82>
    13c6:	fe 01       	movw	r30, r28
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	83 81       	ldd	r24, Z+3	; 0x03
    13ce:	80 23       	and	r24, r16
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <_ZN7OneWire6searchEPhb+0x90>
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <_ZN7OneWire6searchEPhb+0x86>
    13d4:	18 17       	cp	r17, r24
    13d6:	29 f0       	breq	.+10     	; 0x13e2 <_ZN7OneWire6searchEPhb+0x90>
    13d8:	f1 2c       	mov	r15, r1
    13da:	19 30       	cpi	r17, 0x09	; 9
    13dc:	58 f4       	brcc	.+22     	; 0x13f4 <_ZN7OneWire6searchEPhb+0xa2>
    13de:	1c 87       	std	Y+12, r17	; 0x0c
    13e0:	09 c0       	rjmp	.+18     	; 0x13f4 <_ZN7OneWire6searchEPhb+0xa2>
    13e2:	fe 01       	movw	r30, r28
    13e4:	ee 0d       	add	r30, r14
    13e6:	f1 1d       	adc	r31, r1
    13e8:	83 81       	ldd	r24, Z+3	; 0x03
    13ea:	80 2b       	or	r24, r16
    13ec:	83 83       	std	Z+3, r24	; 0x03
    13ee:	ff 24       	eor	r15, r15
    13f0:	f3 94       	inc	r15
    13f2:	09 c0       	rjmp	.+18     	; 0x1406 <_ZN7OneWire6searchEPhb+0xb4>
    13f4:	b1 2e       	mov	r11, r17
    13f6:	fe 01       	movw	r30, r28
    13f8:	e2 0f       	add	r30, r18
    13fa:	f3 1f       	adc	r31, r19
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	80 2f       	mov	r24, r16
    1400:	80 95       	com	r24
    1402:	89 23       	and	r24, r25
    1404:	83 83       	std	Z+3, r24	; 0x03
    1406:	6f 2d       	mov	r22, r15
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN7OneWire9write_bitEh>
    140e:	1f 5f       	subi	r17, 0xFF	; 255
    1410:	00 0f       	add	r16, r16
    1412:	11 f4       	brne	.+4      	; 0x1418 <_ZN7OneWire6searchEPhb+0xc6>
    1414:	e3 94       	inc	r14
    1416:	01 e0       	ldi	r16, 0x01	; 1
    1418:	87 e0       	ldi	r24, 0x07	; 7
    141a:	8e 15       	cp	r24, r14
    141c:	08 f0       	brcs	.+2      	; 0x1420 <_ZN7OneWire6searchEPhb+0xce>
    141e:	bf cf       	rjmp	.-130    	; 0x139e <_ZN7OneWire6searchEPhb+0x4c>
    1420:	11 34       	cpi	r17, 0x41	; 65
    1422:	08 f4       	brcc	.+2      	; 0x1426 <_ZN7OneWire6searchEPhb+0xd4>
    1424:	aa cf       	rjmp	.-172    	; 0x137a <_ZN7OneWire6searchEPhb+0x28>
    1426:	bb 86       	std	Y+11, r11	; 0x0b
    1428:	b1 10       	cpse	r11, r1
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <_ZN7OneWire6searchEPhb+0xde>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	8d 87       	std	Y+13, r24	; 0x0d
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <_ZN7OneWire6searchEPhb+0xe6>
    1436:	a1 cf       	rjmp	.-190    	; 0x137a <_ZN7OneWire6searchEPhb+0x28>
    1438:	de 01       	movw	r26, r28
    143a:	13 96       	adiw	r26, 0x03	; 3
    143c:	f6 01       	movw	r30, r12
    143e:	2b 96       	adiw	r28, 0x0b	; 11
    1440:	8d 91       	ld	r24, X+
    1442:	81 93       	st	Z+, r24
    1444:	ca 17       	cp	r28, r26
    1446:	db 07       	cpc	r29, r27
    1448:	d9 f7       	brne	.-10     	; 0x1440 <_ZN7OneWire6searchEPhb+0xee>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	08 95       	ret

00001460 <_ZN7OneWire4crc8EPKhh>:
    1460:	dc 01       	movw	r26, r24
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	61 50       	subi	r22, 0x01	; 1
    1466:	98 f0       	brcs	.+38     	; 0x148e <_ZN7OneWire4crc8EPKhh+0x2e>
    1468:	2d 91       	ld	r18, X+
    146a:	98 2f       	mov	r25, r24
    146c:	92 27       	eor	r25, r18
    146e:	e9 2f       	mov	r30, r25
    1470:	ef 70       	andi	r30, 0x0F	; 15
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	ee 56       	subi	r30, 0x6E	; 110
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	24 91       	lpm	r18, Z
    147a:	92 95       	swap	r25
    147c:	9f 70       	andi	r25, 0x0F	; 15
    147e:	e9 2f       	mov	r30, r25
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	ee 55       	subi	r30, 0x5E	; 94
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	e4 91       	lpm	r30, Z
    1488:	82 2f       	mov	r24, r18
    148a:	8e 27       	eor	r24, r30
    148c:	eb cf       	rjmp	.-42     	; 0x1464 <_ZN7OneWire4crc8EPKhh+0x4>
    148e:	08 95       	ret

00001490 <__subsf3>:
    1490:	50 58       	subi	r21, 0x80	; 128

00001492 <__addsf3>:
    1492:	bb 27       	eor	r27, r27
    1494:	aa 27       	eor	r26, r26
    1496:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <__addsf3x>
    149a:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    149e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    14a2:	38 f0       	brcs	.+14     	; 0x14b2 <__addsf3+0x20>
    14a4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    14a8:	20 f0       	brcs	.+8      	; 0x14b2 <__addsf3+0x20>
    14aa:	39 f4       	brne	.+14     	; 0x14ba <__addsf3+0x28>
    14ac:	9f 3f       	cpi	r25, 0xFF	; 255
    14ae:	19 f4       	brne	.+6      	; 0x14b6 <__addsf3+0x24>
    14b0:	26 f4       	brtc	.+8      	; 0x14ba <__addsf3+0x28>
    14b2:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    14b6:	0e f4       	brtc	.+2      	; 0x14ba <__addsf3+0x28>
    14b8:	e0 95       	com	r30
    14ba:	e7 fb       	bst	r30, 7
    14bc:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>

000014c0 <__addsf3x>:
    14c0:	e9 2f       	mov	r30, r25
    14c2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    14c6:	58 f3       	brcs	.-42     	; 0x149e <__addsf3+0xc>
    14c8:	ba 17       	cp	r27, r26
    14ca:	62 07       	cpc	r22, r18
    14cc:	73 07       	cpc	r23, r19
    14ce:	84 07       	cpc	r24, r20
    14d0:	95 07       	cpc	r25, r21
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__addsf3x+0x1c>
    14d4:	79 f4       	brne	.+30     	; 0x14f4 <__addsf3x+0x34>
    14d6:	a6 f5       	brtc	.+104    	; 0x1540 <__addsf3x+0x80>
    14d8:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    14dc:	0e f4       	brtc	.+2      	; 0x14e0 <__addsf3x+0x20>
    14de:	e0 95       	com	r30
    14e0:	0b 2e       	mov	r0, r27
    14e2:	ba 2f       	mov	r27, r26
    14e4:	a0 2d       	mov	r26, r0
    14e6:	0b 01       	movw	r0, r22
    14e8:	b9 01       	movw	r22, r18
    14ea:	90 01       	movw	r18, r0
    14ec:	0c 01       	movw	r0, r24
    14ee:	ca 01       	movw	r24, r20
    14f0:	a0 01       	movw	r20, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	ff 27       	eor	r31, r31
    14f6:	59 1b       	sub	r21, r25
    14f8:	99 f0       	breq	.+38     	; 0x1520 <__addsf3x+0x60>
    14fa:	59 3f       	cpi	r21, 0xF9	; 249
    14fc:	50 f4       	brcc	.+20     	; 0x1512 <__addsf3x+0x52>
    14fe:	50 3e       	cpi	r21, 0xE0	; 224
    1500:	68 f1       	brcs	.+90     	; 0x155c <__addsf3x+0x9c>
    1502:	1a 16       	cp	r1, r26
    1504:	f0 40       	sbci	r31, 0x00	; 0
    1506:	a2 2f       	mov	r26, r18
    1508:	23 2f       	mov	r18, r19
    150a:	34 2f       	mov	r19, r20
    150c:	44 27       	eor	r20, r20
    150e:	58 5f       	subi	r21, 0xF8	; 248
    1510:	f3 cf       	rjmp	.-26     	; 0x14f8 <__addsf3x+0x38>
    1512:	46 95       	lsr	r20
    1514:	37 95       	ror	r19
    1516:	27 95       	ror	r18
    1518:	a7 95       	ror	r26
    151a:	f0 40       	sbci	r31, 0x00	; 0
    151c:	53 95       	inc	r21
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__addsf3x+0x52>
    1520:	7e f4       	brtc	.+30     	; 0x1540 <__addsf3x+0x80>
    1522:	1f 16       	cp	r1, r31
    1524:	ba 0b       	sbc	r27, r26
    1526:	62 0b       	sbc	r22, r18
    1528:	73 0b       	sbc	r23, r19
    152a:	84 0b       	sbc	r24, r20
    152c:	ba f0       	brmi	.+46     	; 0x155c <__addsf3x+0x9c>
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	a1 f0       	breq	.+40     	; 0x155a <__addsf3x+0x9a>
    1532:	ff 0f       	add	r31, r31
    1534:	bb 1f       	adc	r27, r27
    1536:	66 1f       	adc	r22, r22
    1538:	77 1f       	adc	r23, r23
    153a:	88 1f       	adc	r24, r24
    153c:	c2 f7       	brpl	.-16     	; 0x152e <__addsf3x+0x6e>
    153e:	0e c0       	rjmp	.+28     	; 0x155c <__addsf3x+0x9c>
    1540:	ba 0f       	add	r27, r26
    1542:	62 1f       	adc	r22, r18
    1544:	73 1f       	adc	r23, r19
    1546:	84 1f       	adc	r24, r20
    1548:	48 f4       	brcc	.+18     	; 0x155c <__addsf3x+0x9c>
    154a:	87 95       	ror	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	9e 3f       	cpi	r25, 0xFE	; 254
    1556:	08 f0       	brcs	.+2      	; 0x155a <__addsf3x+0x9a>
    1558:	b0 cf       	rjmp	.-160    	; 0x14ba <__addsf3+0x28>
    155a:	93 95       	inc	r25
    155c:	88 0f       	add	r24, r24
    155e:	08 f0       	brcs	.+2      	; 0x1562 <__addsf3x+0xa2>
    1560:	99 27       	eor	r25, r25
    1562:	ee 0f       	add	r30, r30
    1564:	97 95       	ror	r25
    1566:	87 95       	ror	r24
    1568:	08 95       	ret

0000156a <__cmpsf2>:
    156a:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_cmp>
    156e:	08 f4       	brcc	.+2      	; 0x1572 <__cmpsf2+0x8>
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	08 95       	ret

00001574 <__divsf3>:
    1574:	0e 94 ce 0a 	call	0x159c	; 0x159c <__divsf3x>
    1578:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    157c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1580:	58 f0       	brcs	.+22     	; 0x1598 <__divsf3+0x24>
    1582:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    1586:	40 f0       	brcs	.+16     	; 0x1598 <__divsf3+0x24>
    1588:	29 f4       	brne	.+10     	; 0x1594 <__divsf3+0x20>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	29 f0       	breq	.+10     	; 0x1598 <__divsf3+0x24>
    158e:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    1592:	51 11       	cpse	r21, r1
    1594:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    1598:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>

0000159c <__divsf3x>:
    159c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    15a0:	68 f3       	brcs	.-38     	; 0x157c <__divsf3+0x8>

000015a2 <__divsf3_pse>:
    15a2:	99 23       	and	r25, r25
    15a4:	b1 f3       	breq	.-20     	; 0x1592 <__divsf3+0x1e>
    15a6:	55 23       	and	r21, r21
    15a8:	91 f3       	breq	.-28     	; 0x158e <__divsf3+0x1a>
    15aa:	95 1b       	sub	r25, r21
    15ac:	55 0b       	sbc	r21, r21
    15ae:	bb 27       	eor	r27, r27
    15b0:	aa 27       	eor	r26, r26
    15b2:	62 17       	cp	r22, r18
    15b4:	73 07       	cpc	r23, r19
    15b6:	84 07       	cpc	r24, r20
    15b8:	38 f0       	brcs	.+14     	; 0x15c8 <__divsf3_pse+0x26>
    15ba:	9f 5f       	subi	r25, 0xFF	; 255
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	22 0f       	add	r18, r18
    15c0:	33 1f       	adc	r19, r19
    15c2:	44 1f       	adc	r20, r20
    15c4:	aa 1f       	adc	r26, r26
    15c6:	a9 f3       	breq	.-22     	; 0x15b2 <__divsf3_pse+0x10>
    15c8:	35 d0       	rcall	.+106    	; 0x1634 <__divsf3_pse+0x92>
    15ca:	0e 2e       	mov	r0, r30
    15cc:	3a f0       	brmi	.+14     	; 0x15dc <__divsf3_pse+0x3a>
    15ce:	e0 e8       	ldi	r30, 0x80	; 128
    15d0:	32 d0       	rcall	.+100    	; 0x1636 <__divsf3_pse+0x94>
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	e6 95       	lsr	r30
    15d8:	00 1c       	adc	r0, r0
    15da:	ca f7       	brpl	.-14     	; 0x15ce <__divsf3_pse+0x2c>
    15dc:	2b d0       	rcall	.+86     	; 0x1634 <__divsf3_pse+0x92>
    15de:	fe 2f       	mov	r31, r30
    15e0:	29 d0       	rcall	.+82     	; 0x1634 <__divsf3_pse+0x92>
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	bb 1f       	adc	r27, r27
    15ea:	26 17       	cp	r18, r22
    15ec:	37 07       	cpc	r19, r23
    15ee:	48 07       	cpc	r20, r24
    15f0:	ab 07       	cpc	r26, r27
    15f2:	b0 e8       	ldi	r27, 0x80	; 128
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <__divsf3_pse+0x56>
    15f6:	bb 0b       	sbc	r27, r27
    15f8:	80 2d       	mov	r24, r0
    15fa:	bf 01       	movw	r22, r30
    15fc:	ff 27       	eor	r31, r31
    15fe:	93 58       	subi	r25, 0x83	; 131
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	3a f0       	brmi	.+14     	; 0x1612 <__divsf3_pse+0x70>
    1604:	9e 3f       	cpi	r25, 0xFE	; 254
    1606:	51 05       	cpc	r21, r1
    1608:	78 f0       	brcs	.+30     	; 0x1628 <__divsf3_pse+0x86>
    160a:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    160e:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    1612:	5f 3f       	cpi	r21, 0xFF	; 255
    1614:	e4 f3       	brlt	.-8      	; 0x160e <__divsf3_pse+0x6c>
    1616:	98 3e       	cpi	r25, 0xE8	; 232
    1618:	d4 f3       	brlt	.-12     	; 0x160e <__divsf3_pse+0x6c>
    161a:	86 95       	lsr	r24
    161c:	77 95       	ror	r23
    161e:	67 95       	ror	r22
    1620:	b7 95       	ror	r27
    1622:	f7 95       	ror	r31
    1624:	9f 5f       	subi	r25, 0xFF	; 255
    1626:	c9 f7       	brne	.-14     	; 0x161a <__divsf3_pse+0x78>
    1628:	88 0f       	add	r24, r24
    162a:	91 1d       	adc	r25, r1
    162c:	96 95       	lsr	r25
    162e:	87 95       	ror	r24
    1630:	97 f9       	bld	r25, 7
    1632:	08 95       	ret
    1634:	e1 e0       	ldi	r30, 0x01	; 1
    1636:	66 0f       	add	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	bb 1f       	adc	r27, r27
    163e:	62 17       	cp	r22, r18
    1640:	73 07       	cpc	r23, r19
    1642:	84 07       	cpc	r24, r20
    1644:	ba 07       	cpc	r27, r26
    1646:	20 f0       	brcs	.+8      	; 0x1650 <__divsf3_pse+0xae>
    1648:	62 1b       	sub	r22, r18
    164a:	73 0b       	sbc	r23, r19
    164c:	84 0b       	sbc	r24, r20
    164e:	ba 0b       	sbc	r27, r26
    1650:	ee 1f       	adc	r30, r30
    1652:	88 f7       	brcc	.-30     	; 0x1636 <__divsf3_pse+0x94>
    1654:	e0 95       	com	r30
    1656:	08 95       	ret

00001658 <__fixsfsi>:
    1658:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fixunssfsi>
    165c:	68 94       	set
    165e:	b1 11       	cpse	r27, r1
    1660:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    1664:	08 95       	ret

00001666 <__fixunssfsi>:
    1666:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_splitA>
    166a:	88 f0       	brcs	.+34     	; 0x168e <__fixunssfsi+0x28>
    166c:	9f 57       	subi	r25, 0x7F	; 127
    166e:	98 f0       	brcs	.+38     	; 0x1696 <__fixunssfsi+0x30>
    1670:	b9 2f       	mov	r27, r25
    1672:	99 27       	eor	r25, r25
    1674:	b7 51       	subi	r27, 0x17	; 23
    1676:	b0 f0       	brcs	.+44     	; 0x16a4 <__fixunssfsi+0x3e>
    1678:	e1 f0       	breq	.+56     	; 0x16b2 <__fixunssfsi+0x4c>
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	1a f0       	brmi	.+6      	; 0x168a <__fixunssfsi+0x24>
    1684:	ba 95       	dec	r27
    1686:	c9 f7       	brne	.-14     	; 0x167a <__fixunssfsi+0x14>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <__fixunssfsi+0x4c>
    168a:	b1 30       	cpi	r27, 0x01	; 1
    168c:	91 f0       	breq	.+36     	; 0x16b2 <__fixunssfsi+0x4c>
    168e:	0e 94 0d 0c 	call	0x181a	; 0x181a <__fp_zero>
    1692:	b1 e0       	ldi	r27, 0x01	; 1
    1694:	08 95       	ret
    1696:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__fp_zero>
    169a:	67 2f       	mov	r22, r23
    169c:	78 2f       	mov	r23, r24
    169e:	88 27       	eor	r24, r24
    16a0:	b8 5f       	subi	r27, 0xF8	; 248
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <__fixunssfsi+0x4c>
    16a4:	b9 3f       	cpi	r27, 0xF9	; 249
    16a6:	cc f3       	brlt	.-14     	; 0x169a <__fixunssfsi+0x34>
    16a8:	86 95       	lsr	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	b3 95       	inc	r27
    16b0:	d9 f7       	brne	.-10     	; 0x16a8 <__fixunssfsi+0x42>
    16b2:	3e f4       	brtc	.+14     	; 0x16c2 <__fixunssfsi+0x5c>
    16b4:	90 95       	com	r25
    16b6:	80 95       	com	r24
    16b8:	70 95       	com	r23
    16ba:	61 95       	neg	r22
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	08 95       	ret

000016c4 <__floatunsisf>:
    16c4:	e8 94       	clt
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <__floatsisf+0x12>

000016c8 <__floatsisf>:
    16c8:	97 fb       	bst	r25, 7
    16ca:	3e f4       	brtc	.+14     	; 0x16da <__floatsisf+0x12>
    16cc:	90 95       	com	r25
    16ce:	80 95       	com	r24
    16d0:	70 95       	com	r23
    16d2:	61 95       	neg	r22
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	99 23       	and	r25, r25
    16dc:	a9 f0       	breq	.+42     	; 0x1708 <__floatsisf+0x40>
    16de:	f9 2f       	mov	r31, r25
    16e0:	96 e9       	ldi	r25, 0x96	; 150
    16e2:	bb 27       	eor	r27, r27
    16e4:	93 95       	inc	r25
    16e6:	f6 95       	lsr	r31
    16e8:	87 95       	ror	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f1 11       	cpse	r31, r1
    16f2:	f8 cf       	rjmp	.-16     	; 0x16e4 <__floatsisf+0x1c>
    16f4:	fa f4       	brpl	.+62     	; 0x1734 <__floatsisf+0x6c>
    16f6:	bb 0f       	add	r27, r27
    16f8:	11 f4       	brne	.+4      	; 0x16fe <__floatsisf+0x36>
    16fa:	60 ff       	sbrs	r22, 0
    16fc:	1b c0       	rjmp	.+54     	; 0x1734 <__floatsisf+0x6c>
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <__floatsisf+0x6c>
    1708:	88 23       	and	r24, r24
    170a:	11 f0       	breq	.+4      	; 0x1710 <__floatsisf+0x48>
    170c:	96 e9       	ldi	r25, 0x96	; 150
    170e:	11 c0       	rjmp	.+34     	; 0x1732 <__floatsisf+0x6a>
    1710:	77 23       	and	r23, r23
    1712:	21 f0       	breq	.+8      	; 0x171c <__floatsisf+0x54>
    1714:	9e e8       	ldi	r25, 0x8E	; 142
    1716:	87 2f       	mov	r24, r23
    1718:	76 2f       	mov	r23, r22
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <__floatsisf+0x5e>
    171c:	66 23       	and	r22, r22
    171e:	71 f0       	breq	.+28     	; 0x173c <__floatsisf+0x74>
    1720:	96 e8       	ldi	r25, 0x86	; 134
    1722:	86 2f       	mov	r24, r22
    1724:	70 e0       	ldi	r23, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	2a f0       	brmi	.+10     	; 0x1734 <__floatsisf+0x6c>
    172a:	9a 95       	dec	r25
    172c:	66 0f       	add	r22, r22
    172e:	77 1f       	adc	r23, r23
    1730:	88 1f       	adc	r24, r24
    1732:	da f7       	brpl	.-10     	; 0x172a <__floatsisf+0x62>
    1734:	88 0f       	add	r24, r24
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__fp_cmp>:
    173e:	99 0f       	add	r25, r25
    1740:	00 08       	sbc	r0, r0
    1742:	55 0f       	add	r21, r21
    1744:	aa 0b       	sbc	r26, r26
    1746:	e0 e8       	ldi	r30, 0x80	; 128
    1748:	fe ef       	ldi	r31, 0xFE	; 254
    174a:	16 16       	cp	r1, r22
    174c:	17 06       	cpc	r1, r23
    174e:	e8 07       	cpc	r30, r24
    1750:	f9 07       	cpc	r31, r25
    1752:	c0 f0       	brcs	.+48     	; 0x1784 <__fp_cmp+0x46>
    1754:	12 16       	cp	r1, r18
    1756:	13 06       	cpc	r1, r19
    1758:	e4 07       	cpc	r30, r20
    175a:	f5 07       	cpc	r31, r21
    175c:	98 f0       	brcs	.+38     	; 0x1784 <__fp_cmp+0x46>
    175e:	62 1b       	sub	r22, r18
    1760:	73 0b       	sbc	r23, r19
    1762:	84 0b       	sbc	r24, r20
    1764:	95 0b       	sbc	r25, r21
    1766:	39 f4       	brne	.+14     	; 0x1776 <__fp_cmp+0x38>
    1768:	0a 26       	eor	r0, r26
    176a:	61 f0       	breq	.+24     	; 0x1784 <__fp_cmp+0x46>
    176c:	23 2b       	or	r18, r19
    176e:	24 2b       	or	r18, r20
    1770:	25 2b       	or	r18, r21
    1772:	21 f4       	brne	.+8      	; 0x177c <__fp_cmp+0x3e>
    1774:	08 95       	ret
    1776:	0a 26       	eor	r0, r26
    1778:	09 f4       	brne	.+2      	; 0x177c <__fp_cmp+0x3e>
    177a:	a1 40       	sbci	r26, 0x01	; 1
    177c:	a6 95       	lsr	r26
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	81 1d       	adc	r24, r1
    1782:	81 1d       	adc	r24, r1
    1784:	08 95       	ret

00001786 <__fp_inf>:
    1786:	97 f9       	bld	r25, 7
    1788:	9f 67       	ori	r25, 0x7F	; 127
    178a:	80 e8       	ldi	r24, 0x80	; 128
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	08 95       	ret

00001792 <__fp_nan>:
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	80 ec       	ldi	r24, 0xC0	; 192
    1796:	08 95       	ret

00001798 <__fp_pscA>:
    1798:	00 24       	eor	r0, r0
    179a:	0a 94       	dec	r0
    179c:	16 16       	cp	r1, r22
    179e:	17 06       	cpc	r1, r23
    17a0:	18 06       	cpc	r1, r24
    17a2:	09 06       	cpc	r0, r25
    17a4:	08 95       	ret

000017a6 <__fp_pscB>:
    17a6:	00 24       	eor	r0, r0
    17a8:	0a 94       	dec	r0
    17aa:	12 16       	cp	r1, r18
    17ac:	13 06       	cpc	r1, r19
    17ae:	14 06       	cpc	r1, r20
    17b0:	05 06       	cpc	r0, r21
    17b2:	08 95       	ret

000017b4 <__fp_round>:
    17b4:	09 2e       	mov	r0, r25
    17b6:	03 94       	inc	r0
    17b8:	00 0c       	add	r0, r0
    17ba:	11 f4       	brne	.+4      	; 0x17c0 <__fp_round+0xc>
    17bc:	88 23       	and	r24, r24
    17be:	52 f0       	brmi	.+20     	; 0x17d4 <__fp_round+0x20>
    17c0:	bb 0f       	add	r27, r27
    17c2:	40 f4       	brcc	.+16     	; 0x17d4 <__fp_round+0x20>
    17c4:	bf 2b       	or	r27, r31
    17c6:	11 f4       	brne	.+4      	; 0x17cc <__fp_round+0x18>
    17c8:	60 ff       	sbrs	r22, 0
    17ca:	04 c0       	rjmp	.+8      	; 0x17d4 <__fp_round+0x20>
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	08 95       	ret

000017d6 <__fp_split3>:
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	90 58       	subi	r25, 0x80	; 128
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	59 f0       	breq	.+22     	; 0x17f6 <__fp_splitA+0x10>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	71 f0       	breq	.+28     	; 0x1800 <__fp_splitA+0x1a>
    17e4:	47 95       	ror	r20

000017e6 <__fp_splitA>:
    17e6:	88 0f       	add	r24, r24
    17e8:	97 fb       	bst	r25, 7
    17ea:	99 1f       	adc	r25, r25
    17ec:	61 f0       	breq	.+24     	; 0x1806 <__fp_splitA+0x20>
    17ee:	9f 3f       	cpi	r25, 0xFF	; 255
    17f0:	79 f0       	breq	.+30     	; 0x1810 <__fp_splitA+0x2a>
    17f2:	87 95       	ror	r24
    17f4:	08 95       	ret
    17f6:	12 16       	cp	r1, r18
    17f8:	13 06       	cpc	r1, r19
    17fa:	14 06       	cpc	r1, r20
    17fc:	55 1f       	adc	r21, r21
    17fe:	f2 cf       	rjmp	.-28     	; 0x17e4 <__fp_split3+0xe>
    1800:	46 95       	lsr	r20
    1802:	f1 df       	rcall	.-30     	; 0x17e6 <__fp_splitA>
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <__fp_splitA+0x30>
    1806:	16 16       	cp	r1, r22
    1808:	17 06       	cpc	r1, r23
    180a:	18 06       	cpc	r1, r24
    180c:	99 1f       	adc	r25, r25
    180e:	f1 cf       	rjmp	.-30     	; 0x17f2 <__fp_splitA+0xc>
    1810:	86 95       	lsr	r24
    1812:	71 05       	cpc	r23, r1
    1814:	61 05       	cpc	r22, r1
    1816:	08 94       	sec
    1818:	08 95       	ret

0000181a <__fp_zero>:
    181a:	e8 94       	clt

0000181c <__fp_szero>:
    181c:	bb 27       	eor	r27, r27
    181e:	66 27       	eor	r22, r22
    1820:	77 27       	eor	r23, r23
    1822:	cb 01       	movw	r24, r22
    1824:	97 f9       	bld	r25, 7
    1826:	08 95       	ret

00001828 <__gesf2>:
    1828:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_cmp>
    182c:	08 f4       	brcc	.+2      	; 0x1830 <__gesf2+0x8>
    182e:	8f ef       	ldi	r24, 0xFF	; 255
    1830:	08 95       	ret

00001832 <__mulsf3>:
    1832:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__mulsf3x>
    1836:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__fp_round>
    183a:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__fp_pscA>
    183e:	38 f0       	brcs	.+14     	; 0x184e <__mulsf3+0x1c>
    1840:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fp_pscB>
    1844:	20 f0       	brcs	.+8      	; 0x184e <__mulsf3+0x1c>
    1846:	95 23       	and	r25, r21
    1848:	11 f0       	breq	.+4      	; 0x184e <__mulsf3+0x1c>
    184a:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    184e:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__fp_nan>
    1852:	11 24       	eor	r1, r1
    1854:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>

00001858 <__mulsf3x>:
    1858:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__fp_split3>
    185c:	70 f3       	brcs	.-36     	; 0x183a <__mulsf3+0x8>

0000185e <__mulsf3_pse>:
    185e:	95 9f       	mul	r25, r21
    1860:	c1 f3       	breq	.-16     	; 0x1852 <__mulsf3+0x20>
    1862:	95 0f       	add	r25, r21
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	55 1f       	adc	r21, r21
    1868:	62 9f       	mul	r22, r18
    186a:	f0 01       	movw	r30, r0
    186c:	72 9f       	mul	r23, r18
    186e:	bb 27       	eor	r27, r27
    1870:	f0 0d       	add	r31, r0
    1872:	b1 1d       	adc	r27, r1
    1874:	63 9f       	mul	r22, r19
    1876:	aa 27       	eor	r26, r26
    1878:	f0 0d       	add	r31, r0
    187a:	b1 1d       	adc	r27, r1
    187c:	aa 1f       	adc	r26, r26
    187e:	64 9f       	mul	r22, r20
    1880:	66 27       	eor	r22, r22
    1882:	b0 0d       	add	r27, r0
    1884:	a1 1d       	adc	r26, r1
    1886:	66 1f       	adc	r22, r22
    1888:	82 9f       	mul	r24, r18
    188a:	22 27       	eor	r18, r18
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	62 1f       	adc	r22, r18
    1892:	73 9f       	mul	r23, r19
    1894:	b0 0d       	add	r27, r0
    1896:	a1 1d       	adc	r26, r1
    1898:	62 1f       	adc	r22, r18
    189a:	83 9f       	mul	r24, r19
    189c:	a0 0d       	add	r26, r0
    189e:	61 1d       	adc	r22, r1
    18a0:	22 1f       	adc	r18, r18
    18a2:	74 9f       	mul	r23, r20
    18a4:	33 27       	eor	r19, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	23 1f       	adc	r18, r19
    18ac:	84 9f       	mul	r24, r20
    18ae:	60 0d       	add	r22, r0
    18b0:	21 1d       	adc	r18, r1
    18b2:	82 2f       	mov	r24, r18
    18b4:	76 2f       	mov	r23, r22
    18b6:	6a 2f       	mov	r22, r26
    18b8:	11 24       	eor	r1, r1
    18ba:	9f 57       	subi	r25, 0x7F	; 127
    18bc:	50 40       	sbci	r21, 0x00	; 0
    18be:	9a f0       	brmi	.+38     	; 0x18e6 <__mulsf3_pse+0x88>
    18c0:	f1 f0       	breq	.+60     	; 0x18fe <__mulsf3_pse+0xa0>
    18c2:	88 23       	and	r24, r24
    18c4:	4a f0       	brmi	.+18     	; 0x18d8 <__mulsf3_pse+0x7a>
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	bb 1f       	adc	r27, r27
    18cc:	66 1f       	adc	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	88 1f       	adc	r24, r24
    18d2:	91 50       	subi	r25, 0x01	; 1
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__mulsf3_pse+0x64>
    18d8:	9e 3f       	cpi	r25, 0xFE	; 254
    18da:	51 05       	cpc	r21, r1
    18dc:	80 f0       	brcs	.+32     	; 0x18fe <__mulsf3_pse+0xa0>
    18de:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_inf>
    18e2:	0c 94 0e 0c 	jmp	0x181c	; 0x181c <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	e4 f3       	brlt	.-8      	; 0x18e2 <__mulsf3_pse+0x84>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	d4 f3       	brlt	.-12     	; 0x18e2 <__mulsf3_pse+0x84>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	e7 95       	ror	r30
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <__mulsf3_pse+0x90>
    18fe:	fe 2b       	or	r31, r30
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    190c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    190e:	91 8d       	ldd	r25, Z+25	; 0x19
    1910:	22 8d       	ldd	r18, Z+26	; 0x1a
    1912:	89 2f       	mov	r24, r25
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	80 5c       	subi	r24, 0xC0	; 192
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	82 1b       	sub	r24, r18
    191c:	91 09       	sbc	r25, r1
}
    191e:	8f 73       	andi	r24, 0x3F	; 63
    1920:	99 27       	eor	r25, r25
    1922:	08 95       	ret

00001924 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1924:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1926:	91 8d       	ldd	r25, Z+25	; 0x19
    1928:	82 8d       	ldd	r24, Z+26	; 0x1a
    192a:	98 17       	cp	r25, r24
    192c:	31 f0       	breq	.+12     	; 0x193a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    192e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1930:	e8 0f       	add	r30, r24
    1932:	f1 1d       	adc	r31, r1
    1934:	85 8d       	ldd	r24, Z+29	; 0x1d
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    193e:	08 95       	ret

00001940 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1940:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1942:	91 8d       	ldd	r25, Z+25	; 0x19
    1944:	82 8d       	ldd	r24, Z+26	; 0x1a
    1946:	98 17       	cp	r25, r24
    1948:	61 f0       	breq	.+24     	; 0x1962 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    194a:	82 8d       	ldd	r24, Z+26	; 0x1a
    194c:	df 01       	movw	r26, r30
    194e:	a8 0f       	add	r26, r24
    1950:	b1 1d       	adc	r27, r1
    1952:	5d 96       	adiw	r26, 0x1d	; 29
    1954:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1956:	92 8d       	ldd	r25, Z+26	; 0x1a
    1958:	9f 5f       	subi	r25, 0xFF	; 255
    195a:	9f 73       	andi	r25, 0x3F	; 63
    195c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1966:	08 95       	ret

00001968 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1968:	fc 01       	movw	r30, r24
    196a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    196c:	44 8d       	ldd	r20, Z+28	; 0x1c
    196e:	25 2f       	mov	r18, r21
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	84 2f       	mov	r24, r20
    1974:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1976:	82 1b       	sub	r24, r18
    1978:	93 0b       	sbc	r25, r19
    197a:	54 17       	cp	r21, r20
    197c:	10 f0       	brcs	.+4      	; 0x1982 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    197e:	cf 96       	adiw	r24, 0x3f	; 63
    1980:	08 95       	ret
  return tail - head - 1;
    1982:	01 97       	sbiw	r24, 0x01	; 1
}
    1984:	08 95       	ret

00001986 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1986:	8f e1       	ldi	r24, 0x1F	; 31
    1988:	9e e0       	ldi	r25, 0x0E	; 14
    198a:	89 2b       	or	r24, r25
    198c:	49 f0       	breq	.+18     	; 0x19a0 <_Z14serialEventRunv+0x1a>
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	89 2b       	or	r24, r25
    1994:	29 f0       	breq	.+10     	; 0x19a0 <_Z14serialEventRunv+0x1a>
    1996:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <_Z17Serial0_availablev>
    199a:	81 11       	cpse	r24, r1
    199c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    19a0:	08 95       	ret

000019a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    19a2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    19a6:	df 01       	movw	r26, r30
    19a8:	a8 0f       	add	r26, r24
    19aa:	b1 1d       	adc	r27, r1
    19ac:	a3 5a       	subi	r26, 0xA3	; 163
    19ae:	bf 4f       	sbci	r27, 0xFF	; 255
    19b0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    19b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	8f 73       	andi	r24, 0x3F	; 63
    19ba:	99 27       	eor	r25, r25
    19bc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    19be:	a6 89       	ldd	r26, Z+22	; 0x16
    19c0:	b7 89       	ldd	r27, Z+23	; 0x17
    19c2:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    19c4:	a0 89       	ldd	r26, Z+16	; 0x10
    19c6:	b1 89       	ldd	r27, Z+17	; 0x11
    19c8:	8c 91       	ld	r24, X
    19ca:	83 70       	andi	r24, 0x03	; 3
    19cc:	80 64       	ori	r24, 0x40	; 64
    19ce:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    19d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    19d4:	98 13       	cpse	r25, r24
    19d6:	06 c0       	rjmp	.+12     	; 0x19e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19d8:	02 88       	ldd	r0, Z+18	; 0x12
    19da:	f3 89       	ldd	r31, Z+19	; 0x13
    19dc:	e0 2d       	mov	r30, r0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	80 83       	st	Z, r24
    19e4:	08 95       	ret

000019e6 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	ec 01       	movw	r28, r24
  _written = true;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    19f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    19fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19fc:	98 13       	cpse	r25, r24
    19fe:	05 c0       	rjmp	.+10     	; 0x1a0a <_ZN14HardwareSerial5writeEh+0x24>
    1a00:	e8 89       	ldd	r30, Y+16	; 0x10
    1a02:	f9 89       	ldd	r31, Y+17	; 0x11
    1a04:	80 81       	ld	r24, Z
    1a06:	85 fd       	sbrc	r24, 5
    1a08:	26 c0       	rjmp	.+76     	; 0x1a56 <_ZN14HardwareSerial5writeEh+0x70>
    1a0a:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a0c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	0f 5f       	subi	r16, 0xFF	; 255
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	0f 73       	andi	r16, 0x3F	; 63
    1a16:	11 27       	eor	r17, r17
    1a18:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a1c:	e8 12       	cpse	r14, r24
    1a1e:	0c c0       	rjmp	.+24     	; 0x1a38 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	07 fc       	sbrc	r0, 7
    1a24:	fa cf       	rjmp	.-12     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a26:	e8 89       	ldd	r30, Y+16	; 0x10
    1a28:	f9 89       	ldd	r31, Y+17	; 0x11
    1a2a:	80 81       	ld	r24, Z
    1a2c:	85 ff       	sbrs	r24, 5
    1a2e:	f5 cf       	rjmp	.-22     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a30:	ce 01       	movw	r24, r28
    1a32:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a36:	f1 cf       	rjmp	.-30     	; 0x1a1a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e8 0f       	add	r30, r24
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	e3 5a       	subi	r30, 0xA3	; 163
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a46:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1a48:	f8 94       	cli
    _tx_buffer_head = i;
    1a4a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1a4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a4e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a50:	80 81       	ld	r24, Z
    1a52:	80 62       	ori	r24, 0x20	; 32
    1a54:	0a c0       	rjmp	.+20     	; 0x1a6a <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1a56:	9f b7       	in	r25, 0x3f	; 63
    1a58:	f8 94       	cli
      *_udr = c;
    1a5a:	ee 89       	ldd	r30, Y+22	; 0x16
    1a5c:	ff 89       	ldd	r31, Y+23	; 0x17
    1a5e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a60:	e8 89       	ldd	r30, Y+16	; 0x10
    1a62:	f9 89       	ldd	r31, Y+17	; 0x11
    1a64:	80 81       	ld	r24, Z
    1a66:	83 70       	andi	r24, 0x03	; 3
    1a68:	80 64       	ori	r24, 0x40	; 64
    1a6a:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1a6c:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	08 95       	ret

00001a80 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1a86:	88 8d       	ldd	r24, Y+24	; 0x18
    1a88:	88 23       	and	r24, r24
    1a8a:	c9 f0       	breq	.+50     	; 0x1abe <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a8c:	ea 89       	ldd	r30, Y+18	; 0x12
    1a8e:	fb 89       	ldd	r31, Y+19	; 0x13
    1a90:	80 81       	ld	r24, Z
    1a92:	85 fd       	sbrc	r24, 5
    1a94:	05 c0       	rjmp	.+10     	; 0x1aa0 <_ZN14HardwareSerial5flushEv+0x20>
    1a96:	a8 89       	ldd	r26, Y+16	; 0x10
    1a98:	b9 89       	ldd	r27, Y+17	; 0x11
    1a9a:	8c 91       	ld	r24, X
    1a9c:	86 fd       	sbrc	r24, 6
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	07 fc       	sbrc	r0, 7
    1aa4:	f5 cf       	rjmp	.-22     	; 0x1a90 <_ZN14HardwareSerial5flushEv+0x10>
    1aa6:	80 81       	ld	r24, Z
    1aa8:	85 ff       	sbrs	r24, 5
    1aaa:	f2 cf       	rjmp	.-28     	; 0x1a90 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1aac:	a8 89       	ldd	r26, Y+16	; 0x10
    1aae:	b9 89       	ldd	r27, Y+17	; 0x11
    1ab0:	8c 91       	ld	r24, X
    1ab2:	85 ff       	sbrs	r24, 5
    1ab4:	ed cf       	rjmp	.-38     	; 0x1a90 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1abc:	e7 cf       	rjmp	.-50     	; 0x1a8c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	08 95       	ret

00001ac4 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	ec 01       	movw	r28, r24
    1ad4:	6a 01       	movw	r12, r20
    1ad6:	7b 01       	movw	r14, r22
    1ad8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1ada:	e8 89       	ldd	r30, Y+16	; 0x10
    1adc:	f9 89       	ldd	r31, Y+17	; 0x11
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1ae2:	41 15       	cp	r20, r1
    1ae4:	51 4e       	sbci	r21, 0xE1	; 225
    1ae6:	61 05       	cpc	r22, r1
    1ae8:	71 05       	cpc	r23, r1
    1aea:	b1 f0       	breq	.+44     	; 0x1b18 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	79 e0       	ldi	r23, 0x09	; 9
    1af0:	8d e3       	ldi	r24, 0x3D	; 61
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a7 01       	movw	r20, r14
    1af6:	96 01       	movw	r18, r12
    1af8:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    1afc:	da 01       	movw	r26, r20
    1afe:	c9 01       	movw	r24, r18
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	a1 09       	sbc	r26, r1
    1b04:	b1 09       	sbc	r27, r1
    1b06:	b6 95       	lsr	r27
    1b08:	a7 95       	ror	r26
    1b0a:	97 95       	ror	r25
    1b0c:	87 95       	ror	r24
    1b0e:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b10:	21 15       	cp	r18, r1
    1b12:	80 e1       	ldi	r24, 0x10	; 16
    1b14:	38 07       	cpc	r19, r24
    1b16:	a8 f0       	brcs	.+42     	; 0x1b42 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b18:	e8 89       	ldd	r30, Y+16	; 0x10
    1b1a:	f9 89       	ldd	r31, Y+17	; 0x11
    1b1c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b1e:	60 e8       	ldi	r22, 0x80	; 128
    1b20:	74 e8       	ldi	r23, 0x84	; 132
    1b22:	8e e1       	ldi	r24, 0x1E	; 30
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a7 01       	movw	r20, r14
    1b28:	96 01       	movw	r18, r12
    1b2a:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    1b2e:	da 01       	movw	r26, r20
    1b30:	c9 01       	movw	r24, r18
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	a1 09       	sbc	r26, r1
    1b36:	b1 09       	sbc	r27, r1
    1b38:	b6 95       	lsr	r27
    1b3a:	a7 95       	ror	r26
    1b3c:	97 95       	ror	r25
    1b3e:	87 95       	ror	r24
    1b40:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1b42:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b44:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b46:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b48:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b4a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b4c:	20 83       	st	Z, r18

  _written = false;
    1b4e:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1b50:	ec 89       	ldd	r30, Y+20	; 0x14
    1b52:	fd 89       	ldd	r31, Y+21	; 0x15
    1b54:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b56:	ea 89       	ldd	r30, Y+18	; 0x12
    1b58:	fb 89       	ldd	r31, Y+19	; 0x13
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 61       	ori	r24, 0x10	; 16
    1b5e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b60:	ea 89       	ldd	r30, Y+18	; 0x12
    1b62:	fb 89       	ldd	r31, Y+19	; 0x13
    1b64:	80 81       	ld	r24, Z
    1b66:	88 60       	ori	r24, 0x08	; 8
    1b68:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b6a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b6c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b6e:	80 81       	ld	r24, Z
    1b70:	80 68       	ori	r24, 0x80	; 128
    1b72:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b74:	ea 89       	ldd	r30, Y+18	; 0x12
    1b76:	fb 89       	ldd	r31, Y+19	; 0x13
    1b78:	80 81       	ld	r24, Z
    1b7a:	8f 7d       	andi	r24, 0xDF	; 223
    1b7c:	80 83       	st	Z, r24
}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	08 95       	ret

00001b8e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	2f 93       	push	r18
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1ba2:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <Serial+0x10>
    1ba6:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <Serial+0x11>
    1baa:	80 81       	ld	r24, Z
    1bac:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <Serial+0x16>
    1bb0:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <Serial+0x17>
    1bb4:	82 fd       	sbrc	r24, 2
    1bb6:	12 c0       	rjmp	.+36     	; 0x1bdc <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1bb8:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1bba:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <Serial+0x19>
    1bbe:	8f 5f       	subi	r24, 0xFF	; 255
    1bc0:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1bc2:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <Serial+0x1a>
    1bc6:	82 17       	cp	r24, r18
    1bc8:	51 f0       	breq	.+20     	; 0x1bde <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1bca:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <Serial+0x19>
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	e0 58       	subi	r30, 0x80	; 128
    1bd2:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1bd6:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <Serial+0x19>
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1bdc:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1bde:	ff 91       	pop	r31
    1be0:	ef 91       	pop	r30
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	2f 91       	pop	r18
    1be8:	0f 90       	pop	r0
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	0f 90       	pop	r0
    1bee:	1f 90       	pop	r1
    1bf0:	18 95       	reti

00001bf2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1bf2:	1f 92       	push	r1
    1bf4:	0f 92       	push	r0
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	0f 92       	push	r0
    1bfa:	11 24       	eor	r1, r1
    1bfc:	2f 93       	push	r18
    1bfe:	3f 93       	push	r19
    1c00:	4f 93       	push	r20
    1c02:	5f 93       	push	r21
    1c04:	6f 93       	push	r22
    1c06:	7f 93       	push	r23
    1c08:	8f 93       	push	r24
    1c0a:	9f 93       	push	r25
    1c0c:	af 93       	push	r26
    1c0e:	bf 93       	push	r27
    1c10:	ef 93       	push	r30
    1c12:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c14:	80 e8       	ldi	r24, 0x80	; 128
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c1c:	ff 91       	pop	r31
    1c1e:	ef 91       	pop	r30
    1c20:	bf 91       	pop	r27
    1c22:	af 91       	pop	r26
    1c24:	9f 91       	pop	r25
    1c26:	8f 91       	pop	r24
    1c28:	7f 91       	pop	r23
    1c2a:	6f 91       	pop	r22
    1c2c:	5f 91       	pop	r21
    1c2e:	4f 91       	pop	r20
    1c30:	3f 91       	pop	r19
    1c32:	2f 91       	pop	r18
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	93 e0       	ldi	r25, 0x03	; 3
    1c42:	0e 94 86 0c 	call	0x190c	; 0x190c <_ZN14HardwareSerial9availableEv>
    1c46:	21 e0       	ldi	r18, 0x01	; 1
    1c48:	89 2b       	or	r24, r25
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <_Z17Serial0_availablev+0x10>
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
}
    1c4e:	82 2f       	mov	r24, r18
    1c50:	08 95       	ret

00001c52 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c52:	e0 e8       	ldi	r30, 0x80	; 128
    1c54:	f3 e0       	ldi	r31, 0x03	; 3
    1c56:	13 82       	std	Z+3, r1	; 0x03
    1c58:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1c5a:	88 ee       	ldi	r24, 0xE8	; 232
    1c5c:	93 e0       	ldi	r25, 0x03	; 3
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	84 83       	std	Z+4, r24	; 0x04
    1c64:	95 83       	std	Z+5, r25	; 0x05
    1c66:	a6 83       	std	Z+6, r26	; 0x06
    1c68:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1c6a:	83 e1       	ldi	r24, 0x13	; 19
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	85 ec       	ldi	r24, 0xC5	; 197
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	95 87       	std	Z+13, r25	; 0x0d
    1c78:	84 87       	std	Z+12, r24	; 0x0c
    1c7a:	84 ec       	ldi	r24, 0xC4	; 196
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	97 87       	std	Z+15, r25	; 0x0f
    1c80:	86 87       	std	Z+14, r24	; 0x0e
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	91 8b       	std	Z+17, r25	; 0x11
    1c88:	80 8b       	std	Z+16, r24	; 0x10
    1c8a:	81 ec       	ldi	r24, 0xC1	; 193
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	93 8b       	std	Z+19, r25	; 0x13
    1c90:	82 8b       	std	Z+18, r24	; 0x12
    1c92:	82 ec       	ldi	r24, 0xC2	; 194
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	95 8b       	std	Z+21, r25	; 0x15
    1c98:	84 8b       	std	Z+20, r24	; 0x14
    1c9a:	86 ec       	ldi	r24, 0xC6	; 198
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	97 8b       	std	Z+23, r25	; 0x17
    1ca0:	86 8b       	std	Z+22, r24	; 0x16
    1ca2:	11 8e       	std	Z+25, r1	; 0x19
    1ca4:	12 8e       	std	Z+26, r1	; 0x1a
    1ca6:	13 8e       	std	Z+27, r1	; 0x1b
    1ca8:	14 8e       	std	Z+28, r1	; 0x1c
    1caa:	08 95       	ret

00001cac <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1cac:	0e 94 96 11 	call	0x232c	; 0x232c <init>

	initVariant();
    1cb0:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1cb4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1cb8:	c3 ec       	ldi	r28, 0xC3	; 195
    1cba:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1cbc:	0e 94 55 08 	call	0x10aa	; 0x10aa <loop>
		if (serialEventRun) serialEventRun();
    1cc0:	20 97       	sbiw	r28, 0x00	; 0
    1cc2:	e1 f3       	breq	.-8      	; 0x1cbc <main+0x10>
    1cc4:	0e 94 c3 0c 	call	0x1986	; 0x1986 <_Z14serialEventRunv>
    1cc8:	f9 cf       	rjmp	.-14     	; 0x1cbc <main+0x10>

00001cca <_ZN5Print5writeEPKhj>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	6c 01       	movw	r12, r24
    1cdc:	7a 01       	movw	r14, r20
    1cde:	8b 01       	movw	r16, r22
    1ce0:	c0 e0       	ldi	r28, 0x00	; 0
    1ce2:	d0 e0       	ldi	r29, 0x00	; 0
    1ce4:	ce 15       	cp	r28, r14
    1ce6:	df 05       	cpc	r29, r15
    1ce8:	81 f0       	breq	.+32     	; 0x1d0a <_ZN5Print5writeEPKhj+0x40>
    1cea:	d8 01       	movw	r26, r16
    1cec:	6d 91       	ld	r22, X+
    1cee:	8d 01       	movw	r16, r26
    1cf0:	d6 01       	movw	r26, r12
    1cf2:	ed 91       	ld	r30, X+
    1cf4:	fc 91       	ld	r31, X
    1cf6:	01 90       	ld	r0, Z+
    1cf8:	f0 81       	ld	r31, Z
    1cfa:	e0 2d       	mov	r30, r0
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	09 95       	icall
    1d00:	89 2b       	or	r24, r25
    1d02:	11 f0       	breq	.+4      	; 0x1d08 <_ZN5Print5writeEPKhj+0x3e>
    1d04:	21 96       	adiw	r28, 0x01	; 1
    1d06:	ee cf       	rjmp	.-36     	; 0x1ce4 <_ZN5Print5writeEPKhj+0x1a>
    1d08:	7e 01       	movw	r14, r28
    1d0a:	c7 01       	movw	r24, r14
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	cf 90       	pop	r12
    1d1c:	08 95       	ret

00001d1e <_ZN5Print5printEPK19__FlashStringHelper>:
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	cf 93       	push	r28
    1d28:	df 93       	push	r29
    1d2a:	8c 01       	movw	r16, r24
    1d2c:	7b 01       	movw	r14, r22
    1d2e:	c0 e0       	ldi	r28, 0x00	; 0
    1d30:	d0 e0       	ldi	r29, 0x00	; 0
    1d32:	f7 01       	movw	r30, r14
    1d34:	ec 0f       	add	r30, r28
    1d36:	fd 1f       	adc	r31, r29
    1d38:	64 91       	lpm	r22, Z
    1d3a:	66 23       	and	r22, r22
    1d3c:	61 f0       	breq	.+24     	; 0x1d56 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d3e:	d8 01       	movw	r26, r16
    1d40:	ed 91       	ld	r30, X+
    1d42:	fc 91       	ld	r31, X
    1d44:	01 90       	ld	r0, Z+
    1d46:	f0 81       	ld	r31, Z
    1d48:	e0 2d       	mov	r30, r0
    1d4a:	c8 01       	movw	r24, r16
    1d4c:	09 95       	icall
    1d4e:	89 2b       	or	r24, r25
    1d50:	11 f0       	breq	.+4      	; 0x1d56 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d52:	21 96       	adiw	r28, 0x01	; 1
    1d54:	ee cf       	rjmp	.-36     	; 0x1d32 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1d56:	ce 01       	movw	r24, r28
    1d58:	df 91       	pop	r29
    1d5a:	cf 91       	pop	r28
    1d5c:	1f 91       	pop	r17
    1d5e:	0f 91       	pop	r16
    1d60:	ff 90       	pop	r15
    1d62:	ef 90       	pop	r14
    1d64:	08 95       	ret

00001d66 <_ZN5Print5printEPKc>:
    1d66:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN5Print5writeEPKc>

00001d6a <_ZN5Print5printEc>:
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	ed 91       	ld	r30, X+
    1d6e:	fc 91       	ld	r31, X
    1d70:	01 90       	ld	r0, Z+
    1d72:	f0 81       	ld	r31, Z
    1d74:	e0 2d       	mov	r30, r0
    1d76:	09 94       	ijmp

00001d78 <_ZN5Print7printlnEv>:
    1d78:	61 e2       	ldi	r22, 0x21	; 33
    1d7a:	72 e0       	ldi	r23, 0x02	; 2
    1d7c:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN5Print5writeEPKc>

00001d80 <_ZN5Print7printlnEPKc>:
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
    1d8a:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
    1d8e:	8c 01       	movw	r16, r24
    1d90:	ce 01       	movw	r24, r28
    1d92:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN5Print7printlnEv>
    1d96:	80 0f       	add	r24, r16
    1d98:	91 1f       	adc	r25, r17
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <_ZN5Print11printNumberEmh>:
    1da4:	8f 92       	push	r8
    1da6:	9f 92       	push	r9
    1da8:	af 92       	push	r10
    1daa:	bf 92       	push	r11
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	a1 97       	sbiw	r28, 0x21	; 33
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	7c 01       	movw	r14, r24
    1dca:	fa 01       	movw	r30, r20
    1dcc:	cb 01       	movw	r24, r22
    1dce:	19 a2       	std	Y+33, r1	; 0x21
    1dd0:	22 30       	cpi	r18, 0x02	; 2
    1dd2:	08 f4       	brcc	.+2      	; 0x1dd6 <_ZN5Print11printNumberEmh+0x32>
    1dd4:	2a e0       	ldi	r18, 0x0A	; 10
    1dd6:	8e 01       	movw	r16, r28
    1dd8:	0f 5d       	subi	r16, 0xDF	; 223
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	82 2e       	mov	r8, r18
    1dde:	91 2c       	mov	r9, r1
    1de0:	a1 2c       	mov	r10, r1
    1de2:	b1 2c       	mov	r11, r1
    1de4:	bf 01       	movw	r22, r30
    1de6:	a5 01       	movw	r20, r10
    1de8:	94 01       	movw	r18, r8
    1dea:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    1dee:	f9 01       	movw	r30, r18
    1df0:	ca 01       	movw	r24, r20
    1df2:	01 50       	subi	r16, 0x01	; 1
    1df4:	11 09       	sbc	r17, r1
    1df6:	6a 30       	cpi	r22, 0x0A	; 10
    1df8:	10 f4       	brcc	.+4      	; 0x1dfe <_ZN5Print11printNumberEmh+0x5a>
    1dfa:	60 5d       	subi	r22, 0xD0	; 208
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <_ZN5Print11printNumberEmh+0x5c>
    1dfe:	69 5c       	subi	r22, 0xC9	; 201
    1e00:	d8 01       	movw	r26, r16
    1e02:	6c 93       	st	X, r22
    1e04:	23 2b       	or	r18, r19
    1e06:	24 2b       	or	r18, r20
    1e08:	25 2b       	or	r18, r21
    1e0a:	61 f7       	brne	.-40     	; 0x1de4 <_ZN5Print11printNumberEmh+0x40>
    1e0c:	b8 01       	movw	r22, r16
    1e0e:	c7 01       	movw	r24, r14
    1e10:	0e 94 17 02 	call	0x42e	; 0x42e <_ZN5Print5writeEPKc>
    1e14:	a1 96       	adiw	r28, 0x21	; 33
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	bf 90       	pop	r11
    1e2e:	af 90       	pop	r10
    1e30:	9f 90       	pop	r9
    1e32:	8f 90       	pop	r8
    1e34:	08 95       	ret

00001e36 <_ZN5Print5printEmi>:
    1e36:	21 15       	cp	r18, r1
    1e38:	31 05       	cpc	r19, r1
    1e3a:	41 f4       	brne	.+16     	; 0x1e4c <_ZN5Print5printEmi+0x16>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	ed 91       	ld	r30, X+
    1e40:	fc 91       	ld	r31, X
    1e42:	01 90       	ld	r0, Z+
    1e44:	f0 81       	ld	r31, Z
    1e46:	e0 2d       	mov	r30, r0
    1e48:	64 2f       	mov	r22, r20
    1e4a:	09 94       	ijmp
    1e4c:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <_ZN5Print11printNumberEmh>

00001e50 <_ZN5Print5printEhi>:
    1e50:	9a 01       	movw	r18, r20
    1e52:	46 2f       	mov	r20, r22
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	60 e0       	ldi	r22, 0x00	; 0
    1e58:	70 e0       	ldi	r23, 0x00	; 0
    1e5a:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_ZN5Print5printEmi>

00001e5e <_ZN5Print5printEji>:
    1e5e:	9a 01       	movw	r18, r20
    1e60:	ab 01       	movw	r20, r22
    1e62:	60 e0       	ldi	r22, 0x00	; 0
    1e64:	70 e0       	ldi	r23, 0x00	; 0
    1e66:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <_ZN5Print5printEmi>

00001e6a <_ZN5Print5printEli>:
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	21 15       	cp	r18, r1
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	81 f4       	brne	.+32     	; 0x1ea0 <_ZN5Print5printEli+0x36>
    1e80:	dc 01       	movw	r26, r24
    1e82:	ed 91       	ld	r30, X+
    1e84:	fc 91       	ld	r31, X
    1e86:	01 90       	ld	r0, Z+
    1e88:	f0 81       	ld	r31, Z
    1e8a:	e0 2d       	mov	r30, r0
    1e8c:	64 2f       	mov	r22, r20
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	0f 91       	pop	r16
    1e96:	ff 90       	pop	r15
    1e98:	ef 90       	pop	r14
    1e9a:	df 90       	pop	r13
    1e9c:	cf 90       	pop	r12
    1e9e:	09 94       	ijmp
    1ea0:	2a 30       	cpi	r18, 0x0A	; 10
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	01 f5       	brne	.+64     	; 0x1ee6 <_ZN5Print5printEli+0x7c>
    1ea6:	77 ff       	sbrs	r23, 7
    1ea8:	1d c0       	rjmp	.+58     	; 0x1ee4 <_ZN5Print5printEli+0x7a>
    1eaa:	6a 01       	movw	r12, r20
    1eac:	7b 01       	movw	r14, r22
    1eae:	ec 01       	movw	r28, r24
    1eb0:	6d e2       	ldi	r22, 0x2D	; 45
    1eb2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN5Print5printEc>
    1eb6:	8c 01       	movw	r16, r24
    1eb8:	44 27       	eor	r20, r20
    1eba:	55 27       	eor	r21, r21
    1ebc:	ba 01       	movw	r22, r20
    1ebe:	4c 19       	sub	r20, r12
    1ec0:	5d 09       	sbc	r21, r13
    1ec2:	6e 09       	sbc	r22, r14
    1ec4:	7f 09       	sbc	r23, r15
    1ec6:	2a e0       	ldi	r18, 0x0A	; 10
    1ec8:	ce 01       	movw	r24, r28
    1eca:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN5Print11printNumberEmh>
    1ece:	80 0f       	add	r24, r16
    1ed0:	91 1f       	adc	r25, r17
    1ed2:	df 91       	pop	r29
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	ef 90       	pop	r14
    1ede:	df 90       	pop	r13
    1ee0:	cf 90       	pop	r12
    1ee2:	08 95       	ret
    1ee4:	2a e0       	ldi	r18, 0x0A	; 10
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	ff 90       	pop	r15
    1ef0:	ef 90       	pop	r14
    1ef2:	df 90       	pop	r13
    1ef4:	cf 90       	pop	r12
    1ef6:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <_ZN5Print11printNumberEmh>

00001efa <_ZN5Print5printEii>:
    1efa:	9a 01       	movw	r18, r20
    1efc:	ab 01       	movw	r20, r22
    1efe:	77 0f       	add	r23, r23
    1f00:	66 0b       	sbc	r22, r22
    1f02:	77 0b       	sbc	r23, r23
    1f04:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <_ZN5Print5printEli>

00001f08 <_ZN5Print10printFloatEdh>:
    1f08:	7f 92       	push	r7
    1f0a:	8f 92       	push	r8
    1f0c:	9f 92       	push	r9
    1f0e:	af 92       	push	r10
    1f10:	bf 92       	push	r11
    1f12:	cf 92       	push	r12
    1f14:	df 92       	push	r13
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	8c 01       	movw	r16, r24
    1f24:	6a 01       	movw	r12, r20
    1f26:	7b 01       	movw	r14, r22
    1f28:	72 2e       	mov	r7, r18
    1f2a:	9a 01       	movw	r18, r20
    1f2c:	ab 01       	movw	r20, r22
    1f2e:	c7 01       	movw	r24, r14
    1f30:	b6 01       	movw	r22, r12
    1f32:	0e 94 06 23 	call	0x460c	; 0x460c <__unordsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <_ZN5Print10printFloatEdh+0x38>
    1f3a:	64 e2       	ldi	r22, 0x24	; 36
    1f3c:	72 e0       	ldi	r23, 0x02	; 2
    1f3e:	27 c0       	rjmp	.+78     	; 0x1f8e <_ZN5Print10printFloatEdh+0x86>
    1f40:	46 01       	movw	r8, r12
    1f42:	57 01       	movw	r10, r14
    1f44:	e8 94       	clt
    1f46:	b7 f8       	bld	r11, 7
    1f48:	2f ef       	ldi	r18, 0xFF	; 255
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	5f e7       	ldi	r21, 0x7F	; 127
    1f50:	c5 01       	movw	r24, r10
    1f52:	b4 01       	movw	r22, r8
    1f54:	0e 94 06 23 	call	0x460c	; 0x460c <__unordsf2>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	0d c0       	rjmp	.+26     	; 0x1f76 <_ZN5Print10printFloatEdh+0x6e>
    1f5c:	2f ef       	ldi	r18, 0xFF	; 255
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	5f e7       	ldi	r21, 0x7F	; 127
    1f64:	c5 01       	movw	r24, r10
    1f66:	b4 01       	movw	r22, r8
    1f68:	0e 94 b5 0a 	call	0x156a	; 0x156a <__cmpsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	1c f4       	brge	.+6      	; 0x1f76 <_ZN5Print10printFloatEdh+0x6e>
    1f70:	68 e2       	ldi	r22, 0x28	; 40
    1f72:	72 e0       	ldi	r23, 0x02	; 2
    1f74:	0c c0       	rjmp	.+24     	; 0x1f8e <_ZN5Print10printFloatEdh+0x86>
    1f76:	2f ef       	ldi	r18, 0xFF	; 255
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	5f e4       	ldi	r21, 0x4F	; 79
    1f7e:	c7 01       	movw	r24, r14
    1f80:	b6 01       	movw	r22, r12
    1f82:	0e 94 14 0c 	call	0x1828	; 0x1828 <__gesf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	94 f4       	brge	.+36     	; 0x1fae <_ZN5Print10printFloatEdh+0xa6>
    1f8a:	6c e2       	ldi	r22, 0x2C	; 44
    1f8c:	72 e0       	ldi	r23, 0x02	; 2
    1f8e:	c8 01       	movw	r24, r16
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	bf 90       	pop	r11
    1fa2:	af 90       	pop	r10
    1fa4:	9f 90       	pop	r9
    1fa6:	8f 90       	pop	r8
    1fa8:	7f 90       	pop	r7
    1faa:	0c 94 17 02 	jmp	0x42e	; 0x42e <_ZN5Print5writeEPKc>
    1fae:	2f ef       	ldi	r18, 0xFF	; 255
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	5f ec       	ldi	r21, 0xCF	; 207
    1fb6:	c7 01       	movw	r24, r14
    1fb8:	b6 01       	movw	r22, r12
    1fba:	0e 94 b5 0a 	call	0x156a	; 0x156a <__cmpsf2>
    1fbe:	87 fd       	sbrc	r24, 7
    1fc0:	e4 cf       	rjmp	.-56     	; 0x1f8a <_ZN5Print10printFloatEdh+0x82>
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	a9 01       	movw	r20, r18
    1fc8:	c7 01       	movw	r24, r14
    1fca:	b6 01       	movw	r22, r12
    1fcc:	0e 94 b5 0a 	call	0x156a	; 0x156a <__cmpsf2>
    1fd0:	87 ff       	sbrs	r24, 7
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <_ZN5Print10printFloatEdh+0xe0>
    1fd4:	6d e2       	ldi	r22, 0x2D	; 45
    1fd6:	c8 01       	movw	r24, r16
    1fd8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN5Print5printEc>
    1fdc:	ec 01       	movw	r28, r24
    1fde:	f7 fa       	bst	r15, 7
    1fe0:	f0 94       	com	r15
    1fe2:	f7 f8       	bld	r15, 7
    1fe4:	f0 94       	com	r15
    1fe6:	02 c0       	rjmp	.+4      	; 0x1fec <_ZN5Print10printFloatEdh+0xe4>
    1fe8:	c0 e0       	ldi	r28, 0x00	; 0
    1fea:	d0 e0       	ldi	r29, 0x00	; 0
    1fec:	b1 2c       	mov	r11, r1
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	70 e0       	ldi	r23, 0x00	; 0
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	9f e3       	ldi	r25, 0x3F	; 63
    1ff6:	7b 14       	cp	r7, r11
    1ff8:	41 f0       	breq	.+16     	; 0x200a <_ZN5Print10printFloatEdh+0x102>
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e2       	ldi	r20, 0x20	; 32
    2000:	51 e4       	ldi	r21, 0x41	; 65
    2002:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__divsf3>
    2006:	b3 94       	inc	r11
    2008:	f6 cf       	rjmp	.-20     	; 0x1ff6 <_ZN5Print10printFloatEdh+0xee>
    200a:	a7 01       	movw	r20, r14
    200c:	96 01       	movw	r18, r12
    200e:	0e 94 49 0a 	call	0x1492	; 0x1492 <__addsf3>
    2012:	6b 01       	movw	r12, r22
    2014:	7c 01       	movw	r14, r24
    2016:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fixunssfsi>
    201a:	4b 01       	movw	r8, r22
    201c:	5c 01       	movw	r10, r24
    201e:	2a e0       	ldi	r18, 0x0A	; 10
    2020:	ab 01       	movw	r20, r22
    2022:	bc 01       	movw	r22, r24
    2024:	c8 01       	movw	r24, r16
    2026:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <_ZN5Print11printNumberEmh>
    202a:	c8 0f       	add	r28, r24
    202c:	d9 1f       	adc	r29, r25
    202e:	77 20       	and	r7, r7
    2030:	b9 f1       	breq	.+110    	; 0x20a0 <_ZN5Print10printFloatEdh+0x198>
    2032:	c5 01       	movw	r24, r10
    2034:	b4 01       	movw	r22, r8
    2036:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__floatunsisf>
    203a:	9b 01       	movw	r18, r22
    203c:	ac 01       	movw	r20, r24
    203e:	c7 01       	movw	r24, r14
    2040:	b6 01       	movw	r22, r12
    2042:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
    2046:	6b 01       	movw	r12, r22
    2048:	7c 01       	movw	r14, r24
    204a:	6e e2       	ldi	r22, 0x2E	; 46
    204c:	c8 01       	movw	r24, r16
    204e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <_ZN5Print5printEc>
    2052:	c8 0f       	add	r28, r24
    2054:	d9 1f       	adc	r29, r25
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	c7 01       	movw	r24, r14
    2060:	b6 01       	movw	r22, r12
    2062:	0e 94 19 0c 	call	0x1832	; 0x1832 <__mulsf3>
    2066:	4b 01       	movw	r8, r22
    2068:	5c 01       	movw	r10, r24
    206a:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fixunssfsi>
    206e:	6b 01       	movw	r12, r22
    2070:	7c 01       	movw	r14, r24
    2072:	4a e0       	ldi	r20, 0x0A	; 10
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	c8 01       	movw	r24, r16
    2078:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_ZN5Print5printEji>
    207c:	c8 0f       	add	r28, r24
    207e:	d9 1f       	adc	r29, r25
    2080:	b6 01       	movw	r22, r12
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__floatunsisf>
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	c5 01       	movw	r24, r10
    2090:	b4 01       	movw	r22, r8
    2092:	0e 94 48 0a 	call	0x1490	; 0x1490 <__subsf3>
    2096:	6b 01       	movw	r12, r22
    2098:	7c 01       	movw	r14, r24
    209a:	7a 94       	dec	r7
    209c:	71 10       	cpse	r7, r1
    209e:	db cf       	rjmp	.-74     	; 0x2056 <_ZN5Print10printFloatEdh+0x14e>
    20a0:	ce 01       	movw	r24, r28
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0f 91       	pop	r16
    20aa:	ff 90       	pop	r15
    20ac:	ef 90       	pop	r14
    20ae:	df 90       	pop	r13
    20b0:	cf 90       	pop	r12
    20b2:	bf 90       	pop	r11
    20b4:	af 90       	pop	r10
    20b6:	9f 90       	pop	r9
    20b8:	8f 90       	pop	r8
    20ba:	7f 90       	pop	r7
    20bc:	08 95       	ret

000020be <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    20c8:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN5Print10printFloatEdh>
    20cc:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    20ce:	ce 01       	movw	r24, r28
    20d0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_ZN5Print7printlnEv>
  return n;
}
    20d4:	80 0f       	add	r24, r16
    20d6:	91 1f       	adc	r25, r17
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    20e2:	08 95       	ret

000020e4 <attachInterrupt>:
    20e4:	82 30       	cpi	r24, 0x02	; 2
    20e6:	e8 f4       	brcc	.+58     	; 0x2122 <attachInterrupt+0x3e>
    20e8:	e8 2f       	mov	r30, r24
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	e0 5d       	subi	r30, 0xD0	; 208
    20f2:	fe 4f       	sbci	r31, 0xFE	; 254
    20f4:	71 83       	std	Z+1, r23	; 0x01
    20f6:	60 83       	st	Z, r22
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	41 f0       	breq	.+16     	; 0x210c <attachInterrupt+0x28>
    20fc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2100:	8c 7f       	andi	r24, 0xFC	; 252
    2102:	48 2b       	or	r20, r24
    2104:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2108:	e8 9a       	sbi	0x1d, 0	; 29
    210a:	08 95       	ret
    210c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2110:	83 7f       	andi	r24, 0xF3	; 243
    2112:	44 0f       	add	r20, r20
    2114:	55 1f       	adc	r21, r21
    2116:	44 0f       	add	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	48 2b       	or	r20, r24
    211c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    2120:	e9 9a       	sbi	0x1d, 1	; 29
    2122:	08 95       	ret

00002124 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2124:	1f 92       	push	r1
    2126:	0f 92       	push	r0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	0f 92       	push	r0
    212c:	11 24       	eor	r1, r1
    212e:	2f 93       	push	r18
    2130:	3f 93       	push	r19
    2132:	4f 93       	push	r20
    2134:	5f 93       	push	r21
    2136:	6f 93       	push	r22
    2138:	7f 93       	push	r23
    213a:	8f 93       	push	r24
    213c:	9f 93       	push	r25
    213e:	af 93       	push	r26
    2140:	bf 93       	push	r27
    2142:	ef 93       	push	r30
    2144:	ff 93       	push	r31
    2146:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <intFunc>
    214a:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <intFunc+0x1>
    214e:	09 95       	icall
    2150:	ff 91       	pop	r31
    2152:	ef 91       	pop	r30
    2154:	bf 91       	pop	r27
    2156:	af 91       	pop	r26
    2158:	9f 91       	pop	r25
    215a:	8f 91       	pop	r24
    215c:	7f 91       	pop	r23
    215e:	6f 91       	pop	r22
    2160:	5f 91       	pop	r21
    2162:	4f 91       	pop	r20
    2164:	3f 91       	pop	r19
    2166:	2f 91       	pop	r18
    2168:	0f 90       	pop	r0
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	0f 90       	pop	r0
    216e:	1f 90       	pop	r1
    2170:	18 95       	reti

00002172 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2172:	1f 92       	push	r1
    2174:	0f 92       	push	r0
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	0f 92       	push	r0
    217a:	11 24       	eor	r1, r1
    217c:	2f 93       	push	r18
    217e:	3f 93       	push	r19
    2180:	4f 93       	push	r20
    2182:	5f 93       	push	r21
    2184:	6f 93       	push	r22
    2186:	7f 93       	push	r23
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
    218c:	af 93       	push	r26
    218e:	bf 93       	push	r27
    2190:	ef 93       	push	r30
    2192:	ff 93       	push	r31
    2194:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <intFunc+0x2>
    2198:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <intFunc+0x3>
    219c:	09 95       	icall
    219e:	ff 91       	pop	r31
    21a0:	ef 91       	pop	r30
    21a2:	bf 91       	pop	r27
    21a4:	af 91       	pop	r26
    21a6:	9f 91       	pop	r25
    21a8:	8f 91       	pop	r24
    21aa:	7f 91       	pop	r23
    21ac:	6f 91       	pop	r22
    21ae:	5f 91       	pop	r21
    21b0:	4f 91       	pop	r20
    21b2:	3f 91       	pop	r19
    21b4:	2f 91       	pop	r18
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	0f 90       	pop	r0
    21bc:	1f 90       	pop	r1
    21be:	18 95       	reti

000021c0 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    21c0:	1f 92       	push	r1
    21c2:	0f 92       	push	r0
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	0f 92       	push	r0
    21c8:	11 24       	eor	r1, r1
    21ca:	2f 93       	push	r18
    21cc:	3f 93       	push	r19
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <timer0_millis>
    21da:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <timer0_millis+0x1>
    21de:	a0 91 20 04 	lds	r26, 0x0420	; 0x800420 <timer0_millis+0x2>
    21e2:	b0 91 21 04 	lds	r27, 0x0421	; 0x800421 <timer0_millis+0x3>
    21e6:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <timer0_fract>
    21ea:	23 e0       	ldi	r18, 0x03	; 3
    21ec:	23 0f       	add	r18, r19
    21ee:	2d 37       	cpi	r18, 0x7D	; 125
    21f0:	20 f4       	brcc	.+8      	; 0x21fa <__vector_16+0x3a>
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	a1 1d       	adc	r26, r1
    21f6:	b1 1d       	adc	r27, r1
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__vector_16+0x44>
    21fa:	26 e8       	ldi	r18, 0x86	; 134
    21fc:	23 0f       	add	r18, r19
    21fe:	02 96       	adiw	r24, 0x02	; 2
    2200:	a1 1d       	adc	r26, r1
    2202:	b1 1d       	adc	r27, r1
    2204:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <timer0_fract>
    2208:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <timer0_millis>
    220c:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <timer0_millis+0x1>
    2210:	a0 93 20 04 	sts	0x0420, r26	; 0x800420 <timer0_millis+0x2>
    2214:	b0 93 21 04 	sts	0x0421, r27	; 0x800421 <timer0_millis+0x3>
    2218:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <timer0_overflow_count>
    221c:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <timer0_overflow_count+0x1>
    2220:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <timer0_overflow_count+0x2>
    2224:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <timer0_overflow_count+0x3>
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	a1 1d       	adc	r26, r1
    222c:	b1 1d       	adc	r27, r1
    222e:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <timer0_overflow_count>
    2232:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <timer0_overflow_count+0x1>
    2236:	a0 93 24 04 	sts	0x0424, r26	; 0x800424 <timer0_overflow_count+0x2>
    223a:	b0 93 25 04 	sts	0x0425, r27	; 0x800425 <timer0_overflow_count+0x3>
    223e:	bf 91       	pop	r27
    2240:	af 91       	pop	r26
    2242:	9f 91       	pop	r25
    2244:	8f 91       	pop	r24
    2246:	3f 91       	pop	r19
    2248:	2f 91       	pop	r18
    224a:	0f 90       	pop	r0
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	0f 90       	pop	r0
    2250:	1f 90       	pop	r1
    2252:	18 95       	reti

00002254 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2254:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2256:	f8 94       	cli
	m = timer0_overflow_count;
    2258:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <timer0_overflow_count>
    225c:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <timer0_overflow_count+0x1>
    2260:	a0 91 24 04 	lds	r26, 0x0424	; 0x800424 <timer0_overflow_count+0x2>
    2264:	b0 91 25 04 	lds	r27, 0x0425	; 0x800425 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2268:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    226a:	a8 9b       	sbis	0x15, 0	; 21
    226c:	05 c0       	rjmp	.+10     	; 0x2278 <micros+0x24>
    226e:	2f 3f       	cpi	r18, 0xFF	; 255
    2270:	19 f0       	breq	.+6      	; 0x2278 <micros+0x24>
		m++;
    2272:	01 96       	adiw	r24, 0x01	; 1
    2274:	a1 1d       	adc	r26, r1
    2276:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2278:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    227a:	ba 2f       	mov	r27, r26
    227c:	a9 2f       	mov	r26, r25
    227e:	98 2f       	mov	r25, r24
    2280:	88 27       	eor	r24, r24
    2282:	82 0f       	add	r24, r18
    2284:	91 1d       	adc	r25, r1
    2286:	a1 1d       	adc	r26, r1
    2288:	b1 1d       	adc	r27, r1
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	42 e0       	ldi	r20, 0x02	; 2
    2290:	66 0f       	add	r22, r22
    2292:	77 1f       	adc	r23, r23
    2294:	88 1f       	adc	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	4a 95       	dec	r20
    229a:	d1 f7       	brne	.-12     	; 0x2290 <micros+0x3c>
}
    229c:	08 95       	ret

0000229e <delay>:

void delay(unsigned long ms)
{
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	6b 01       	movw	r12, r22
    22b0:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    22b2:	0e 94 2a 11 	call	0x2254	; 0x2254 <micros>
    22b6:	4b 01       	movw	r8, r22
    22b8:	5c 01       	movw	r10, r24

	while (ms > 0) {
    22ba:	c1 14       	cp	r12, r1
    22bc:	d1 04       	cpc	r13, r1
    22be:	e1 04       	cpc	r14, r1
    22c0:	f1 04       	cpc	r15, r1
    22c2:	01 f1       	breq	.+64     	; 0x2304 <delay+0x66>
		yield();
    22c4:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    22c8:	0e 94 2a 11 	call	0x2254	; 0x2254 <micros>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	88 19       	sub	r24, r8
    22d2:	99 09       	sbc	r25, r9
    22d4:	aa 09       	sbc	r26, r10
    22d6:	bb 09       	sbc	r27, r11
    22d8:	88 3e       	cpi	r24, 0xE8	; 232
    22da:	93 40       	sbci	r25, 0x03	; 3
    22dc:	a1 05       	cpc	r26, r1
    22de:	b1 05       	cpc	r27, r1
    22e0:	60 f3       	brcs	.-40     	; 0x22ba <delay+0x1c>
			ms--;
    22e2:	21 e0       	ldi	r18, 0x01	; 1
    22e4:	c2 1a       	sub	r12, r18
    22e6:	d1 08       	sbc	r13, r1
    22e8:	e1 08       	sbc	r14, r1
    22ea:	f1 08       	sbc	r15, r1
			start += 1000;
    22ec:	88 ee       	ldi	r24, 0xE8	; 232
    22ee:	88 0e       	add	r8, r24
    22f0:	83 e0       	ldi	r24, 0x03	; 3
    22f2:	98 1e       	adc	r9, r24
    22f4:	a1 1c       	adc	r10, r1
    22f6:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    22f8:	c1 14       	cp	r12, r1
    22fa:	d1 04       	cpc	r13, r1
    22fc:	e1 04       	cpc	r14, r1
    22fe:	f1 04       	cpc	r15, r1
    2300:	19 f7       	brne	.-58     	; 0x22c8 <delay+0x2a>
    2302:	db cf       	rjmp	.-74     	; 0x22ba <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	bf 90       	pop	r11
    230e:	af 90       	pop	r10
    2310:	9f 90       	pop	r9
    2312:	8f 90       	pop	r8
    2314:	08 95       	ret

00002316 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	91 05       	cpc	r25, r1
    231a:	38 f0       	brcs	.+14     	; 0x232a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2324:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <delayMicroseconds+0x10>
    232a:	08 95       	ret

0000232c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    232c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    232e:	84 b5       	in	r24, 0x24	; 36
    2330:	82 60       	ori	r24, 0x02	; 2
    2332:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2334:	84 b5       	in	r24, 0x24	; 36
    2336:	81 60       	ori	r24, 0x01	; 1
    2338:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    233a:	85 b5       	in	r24, 0x25	; 37
    233c:	82 60       	ori	r24, 0x02	; 2
    233e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2340:	85 b5       	in	r24, 0x25	; 37
    2342:	81 60       	ori	r24, 0x01	; 1
    2344:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2346:	ee e6       	ldi	r30, 0x6E	; 110
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	81 60       	ori	r24, 0x01	; 1
    234e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2350:	e1 e8       	ldi	r30, 0x81	; 129
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2356:	80 81       	ld	r24, Z
    2358:	82 60       	ori	r24, 0x02	; 2
    235a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    235c:	80 81       	ld	r24, Z
    235e:	81 60       	ori	r24, 0x01	; 1
    2360:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2362:	e0 e8       	ldi	r30, 0x80	; 128
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	81 60       	ori	r24, 0x01	; 1
    236a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    236c:	e1 eb       	ldi	r30, 0xB1	; 177
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	84 60       	ori	r24, 0x04	; 4
    2374:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2376:	e0 eb       	ldi	r30, 0xB0	; 176
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	81 60       	ori	r24, 0x01	; 1
    237e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2380:	ea e7       	ldi	r30, 0x7A	; 122
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	84 60       	ori	r24, 0x04	; 4
    2388:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    238a:	80 81       	ld	r24, Z
    238c:	82 60       	ori	r24, 0x02	; 2
    238e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2390:	80 81       	ld	r24, Z
    2392:	81 60       	ori	r24, 0x01	; 1
    2394:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2396:	80 81       	ld	r24, Z
    2398:	80 68       	ori	r24, 0x80	; 128
    239a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    239c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    23a0:	08 95       	ret

000023a2 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    23a2:	8e 30       	cpi	r24, 0x0E	; 14
    23a4:	08 f0       	brcs	.+2      	; 0x23a8 <analogRead+0x6>
    23a6:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    23a8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <analog_reference>
    23ac:	90 e4       	ldi	r25, 0x40	; 64
    23ae:	29 9f       	mul	r18, r25
    23b0:	90 01       	movw	r18, r0
    23b2:	11 24       	eor	r1, r1
    23b4:	87 70       	andi	r24, 0x07	; 7
    23b6:	82 2b       	or	r24, r18
    23b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    23bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    23c0:	80 64       	ori	r24, 0x40	; 64
    23c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    23c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    23ca:	86 fd       	sbrc	r24, 6
    23cc:	fc cf       	rjmp	.-8      	; 0x23c6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    23ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    23d2:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    23d6:	90 e0       	ldi	r25, 0x00	; 0
}
    23d8:	92 2b       	or	r25, r18
    23da:	08 95       	ret

000023dc <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	18 2f       	mov	r17, r24
    23e4:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	0e 94 76 12 	call	0x24ec	; 0x24ec <pinMode>
	if (val == 0)
    23ec:	20 97       	sbiw	r28, 0x00	; 0
    23ee:	11 f4       	brne	.+4      	; 0x23f4 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    23f0:	60 e0       	ldi	r22, 0x00	; 0
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <analogWrite+0x20>
	}
	else if (val == 255)
    23f4:	cf 3f       	cpi	r28, 0xFF	; 255
    23f6:	d1 05       	cpc	r29, r1
    23f8:	39 f4       	brne	.+14     	; 0x2408 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    2404:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2408:	e1 2f       	mov	r30, r17
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	ee 54       	subi	r30, 0x4E	; 78
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	e4 91       	lpm	r30, Z
    2412:	e3 30       	cpi	r30, 0x03	; 3
    2414:	f9 f0       	breq	.+62     	; 0x2454 <analogWrite+0x78>
    2416:	48 f4       	brcc	.+18     	; 0x242a <analogWrite+0x4e>
    2418:	e1 30       	cpi	r30, 0x01	; 1
    241a:	b9 f0       	breq	.+46     	; 0x244a <analogWrite+0x6e>
    241c:	e2 30       	cpi	r30, 0x02	; 2
    241e:	a1 f5       	brne	.+104    	; 0x2488 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2420:	84 b5       	in	r24, 0x24	; 36
    2422:	80 62       	ori	r24, 0x20	; 32
    2424:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2426:	c8 bd       	out	0x28, r28	; 40
				break;
    2428:	34 c0       	rjmp	.+104    	; 0x2492 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    242a:	e7 30       	cpi	r30, 0x07	; 7
    242c:	e9 f0       	breq	.+58     	; 0x2468 <analogWrite+0x8c>
    242e:	e8 30       	cpi	r30, 0x08	; 8
    2430:	19 f1       	breq	.+70     	; 0x2478 <analogWrite+0x9c>
    2432:	e4 30       	cpi	r30, 0x04	; 4
    2434:	49 f5       	brne	.+82     	; 0x2488 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2436:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    243a:	80 62       	ori	r24, 0x20	; 32
    243c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    2440:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    2444:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    2448:	24 c0       	rjmp	.+72     	; 0x2492 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    244a:	84 b5       	in	r24, 0x24	; 36
    244c:	80 68       	ori	r24, 0x80	; 128
    244e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2450:	c7 bd       	out	0x27, r28	; 39
				break;
    2452:	1f c0       	rjmp	.+62     	; 0x2492 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2454:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    245e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    2462:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    2466:	15 c0       	rjmp	.+42     	; 0x2492 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2468:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    246c:	80 68       	ori	r24, 0x80	; 128
    246e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    2472:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    2476:	0d c0       	rjmp	.+26     	; 0x2492 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2478:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    247c:	80 62       	ori	r24, 0x20	; 32
    247e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    2482:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2488:	c0 38       	cpi	r28, 0x80	; 128
    248a:	d1 05       	cpc	r29, r1
    248c:	0c f0       	brlt	.+2      	; 0x2490 <analogWrite+0xb4>
    248e:	b5 cf       	rjmp	.-150    	; 0x23fa <analogWrite+0x1e>
    2490:	af cf       	rjmp	.-162    	; 0x23f0 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	08 95       	ret

0000249a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	81 f0       	breq	.+32     	; 0x24be <turnOffPWM+0x24>
    249e:	28 f4       	brcc	.+10     	; 0x24aa <turnOffPWM+0x10>
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	99 f0       	breq	.+38     	; 0x24ca <turnOffPWM+0x30>
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	a1 f0       	breq	.+40     	; 0x24d0 <turnOffPWM+0x36>
    24a8:	08 95       	ret
    24aa:	87 30       	cpi	r24, 0x07	; 7
    24ac:	a9 f0       	breq	.+42     	; 0x24d8 <turnOffPWM+0x3e>
    24ae:	88 30       	cpi	r24, 0x08	; 8
    24b0:	b9 f0       	breq	.+46     	; 0x24e0 <turnOffPWM+0x46>
    24b2:	84 30       	cpi	r24, 0x04	; 4
    24b4:	d1 f4       	brne	.+52     	; 0x24ea <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    24ba:	8f 7d       	andi	r24, 0xDF	; 223
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    24c2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    24c8:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24ca:	84 b5       	in	r24, 0x24	; 36
    24cc:	8f 77       	andi	r24, 0x7F	; 127
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    24d0:	84 b5       	in	r24, 0x24	; 36
    24d2:	8f 7d       	andi	r24, 0xDF	; 223
    24d4:	84 bd       	out	0x24, r24	; 36
    24d6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    24d8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    24dc:	8f 77       	andi	r24, 0x7F	; 127
    24de:	03 c0       	rjmp	.+6      	; 0x24e6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    24e0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    24e4:	8f 7d       	andi	r24, 0xDF	; 223
    24e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    24ea:	08 95       	ret

000024ec <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	fc 01       	movw	r30, r24
    24f4:	ea 53       	subi	r30, 0x3A	; 58
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    24fa:	fc 01       	movw	r30, r24
    24fc:	e6 52       	subi	r30, 0x26	; 38
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2502:	88 23       	and	r24, r24
    2504:	61 f1       	breq	.+88     	; 0x255e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	fc 01       	movw	r30, r24
    250e:	ee 5f       	subi	r30, 0xFE	; 254
    2510:	fe 4f       	sbci	r31, 0xFE	; 254
    2512:	c5 91       	lpm	r28, Z+
    2514:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2516:	fc 01       	movw	r30, r24
    2518:	e8 50       	subi	r30, 0x08	; 8
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	a5 91       	lpm	r26, Z+
    251e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2520:	61 11       	cpse	r22, r1
    2522:	09 c0       	rjmp	.+18     	; 0x2536 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2524:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2526:	f8 94       	cli
		*reg &= ~bit;
    2528:	88 81       	ld	r24, Y
    252a:	20 95       	com	r18
    252c:	82 23       	and	r24, r18
    252e:	88 83       	st	Y, r24
		*out &= ~bit;
    2530:	ec 91       	ld	r30, X
    2532:	2e 23       	and	r18, r30
    2534:	0b c0       	rjmp	.+22     	; 0x254c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2536:	62 30       	cpi	r22, 0x02	; 2
    2538:	61 f4       	brne	.+24     	; 0x2552 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    253a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    253c:	f8 94       	cli
		*reg &= ~bit;
    253e:	88 81       	ld	r24, Y
    2540:	32 2f       	mov	r19, r18
    2542:	30 95       	com	r19
    2544:	83 23       	and	r24, r19
    2546:	88 83       	st	Y, r24
		*out |= bit;
    2548:	ec 91       	ld	r30, X
    254a:	2e 2b       	or	r18, r30
    254c:	2c 93       	st	X, r18
		SREG = oldSREG;
    254e:	9f bf       	out	0x3f, r25	; 63
    2550:	06 c0       	rjmp	.+12     	; 0x255e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2552:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2554:	f8 94       	cli
		*reg |= bit;
    2556:	e8 81       	ld	r30, Y
    2558:	2e 2b       	or	r18, r30
    255a:	28 83       	st	Y, r18
		SREG = oldSREG;
    255c:	8f bf       	out	0x3f, r24	; 63
	}
}
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	08 95       	ret

00002564 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	f9 01       	movw	r30, r18
    2570:	ee 54       	subi	r30, 0x4E	; 78
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2576:	f9 01       	movw	r30, r18
    2578:	ea 53       	subi	r30, 0x3A	; 58
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    257e:	f9 01       	movw	r30, r18
    2580:	e6 52       	subi	r30, 0x26	; 38
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2586:	cc 23       	and	r28, r28
    2588:	c1 f0       	breq	.+48     	; 0x25ba <digitalWrite+0x56>
    258a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    258c:	81 11       	cpse	r24, r1
    258e:	0e 94 4d 12 	call	0x249a	; 0x249a <turnOffPWM>

	out = portOutputRegister(port);
    2592:	ec 2f       	mov	r30, r28
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	ee 0f       	add	r30, r30
    2598:	ff 1f       	adc	r31, r31
    259a:	e8 50       	subi	r30, 0x08	; 8
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	a5 91       	lpm	r26, Z+
    25a0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25a2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25a4:	f8 94       	cli

	if (val == LOW) {
    25a6:	11 11       	cpse	r17, r1
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <digitalWrite+0x4e>
		*out &= ~bit;
    25aa:	8c 91       	ld	r24, X
    25ac:	d0 95       	com	r29
    25ae:	d8 23       	and	r29, r24
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    25b2:	ec 91       	ld	r30, X
    25b4:	de 2b       	or	r29, r30
    25b6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25b8:	9f bf       	out	0x3f, r25	; 63
}
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	08 95       	ret

000025c2 <prvIsQueueEmpty>:
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	0f 92       	push	r0
    25c8:	fc 01       	movw	r30, r24
    25ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	91 11       	cpse	r25, r1
    25d4:	80 e0       	ldi	r24, 0x00	; 0
    25d6:	08 95       	ret

000025d8 <prvCopyDataToQueue>:
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	ec 01       	movw	r28, r24
    25e2:	04 2f       	mov	r16, r20
    25e4:	1a 8d       	ldd	r17, Y+26	; 0x1a
    25e6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25e8:	41 11       	cpse	r20, r1
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <prvCopyDataToQueue+0x2a>
    25ec:	88 81       	ld	r24, Y
    25ee:	99 81       	ldd	r25, Y+1	; 0x01
    25f0:	89 2b       	or	r24, r25
    25f2:	e9 f5       	brne	.+122    	; 0x266e <prvCopyDataToQueue+0x96>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	9d 81       	ldd	r25, Y+5	; 0x05
    25f8:	0e 94 a3 1b 	call	0x3746	; 0x3746 <xTaskPriorityDisinherit>
    25fc:	1d 82       	std	Y+5, r1	; 0x05
    25fe:	1c 82       	std	Y+4, r1	; 0x04
    2600:	37 c0       	rjmp	.+110    	; 0x2670 <prvCopyDataToQueue+0x98>
    2602:	50 e0       	ldi	r21, 0x00	; 0
    2604:	01 11       	cpse	r16, r1
    2606:	15 c0       	rjmp	.+42     	; 0x2632 <prvCopyDataToQueue+0x5a>
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	0e 94 b5 24 	call	0x496a	; 0x496a <memcpy>
    2610:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	82 0f       	add	r24, r18
    2618:	91 1d       	adc	r25, r1
    261a:	9b 83       	std	Y+3, r25	; 0x03
    261c:	8a 83       	std	Y+2, r24	; 0x02
    261e:	2c 81       	ldd	r18, Y+4	; 0x04
    2620:	3d 81       	ldd	r19, Y+5	; 0x05
    2622:	82 17       	cp	r24, r18
    2624:	93 07       	cpc	r25, r19
    2626:	18 f1       	brcs	.+70     	; 0x266e <prvCopyDataToQueue+0x96>
    2628:	88 81       	ld	r24, Y
    262a:	99 81       	ldd	r25, Y+1	; 0x01
    262c:	9b 83       	std	Y+3, r25	; 0x03
    262e:	8a 83       	std	Y+2, r24	; 0x02
    2630:	1e c0       	rjmp	.+60     	; 0x266e <prvCopyDataToQueue+0x96>
    2632:	8e 81       	ldd	r24, Y+6	; 0x06
    2634:	9f 81       	ldd	r25, Y+7	; 0x07
    2636:	0e 94 b5 24 	call	0x496a	; 0x496a <memcpy>
    263a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	91 95       	neg	r25
    2640:	81 95       	neg	r24
    2642:	91 09       	sbc	r25, r1
    2644:	2e 81       	ldd	r18, Y+6	; 0x06
    2646:	3f 81       	ldd	r19, Y+7	; 0x07
    2648:	28 0f       	add	r18, r24
    264a:	39 1f       	adc	r19, r25
    264c:	3f 83       	std	Y+7, r19	; 0x07
    264e:	2e 83       	std	Y+6, r18	; 0x06
    2650:	48 81       	ld	r20, Y
    2652:	59 81       	ldd	r21, Y+1	; 0x01
    2654:	24 17       	cp	r18, r20
    2656:	35 07       	cpc	r19, r21
    2658:	30 f4       	brcc	.+12     	; 0x2666 <prvCopyDataToQueue+0x8e>
    265a:	2c 81       	ldd	r18, Y+4	; 0x04
    265c:	3d 81       	ldd	r19, Y+5	; 0x05
    265e:	82 0f       	add	r24, r18
    2660:	93 1f       	adc	r25, r19
    2662:	9f 83       	std	Y+7, r25	; 0x07
    2664:	8e 83       	std	Y+6, r24	; 0x06
    2666:	02 30       	cpi	r16, 0x02	; 2
    2668:	11 f4       	brne	.+4      	; 0x266e <prvCopyDataToQueue+0x96>
    266a:	11 11       	cpse	r17, r1
    266c:	11 50       	subi	r17, 0x01	; 1
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	1f 5f       	subi	r17, 0xFF	; 255
    2672:	1a 8f       	std	Y+26, r17	; 0x1a
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	08 95       	ret

0000267e <prvCopyDataFromQueue>:
    267e:	fc 01       	movw	r30, r24
    2680:	cb 01       	movw	r24, r22
    2682:	44 8d       	ldd	r20, Z+28	; 0x1c
    2684:	44 23       	and	r20, r20
    2686:	a1 f0       	breq	.+40     	; 0x26b0 <prvCopyDataFromQueue+0x32>
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	26 81       	ldd	r18, Z+6	; 0x06
    268c:	37 81       	ldd	r19, Z+7	; 0x07
    268e:	24 0f       	add	r18, r20
    2690:	35 1f       	adc	r19, r21
    2692:	37 83       	std	Z+7, r19	; 0x07
    2694:	26 83       	std	Z+6, r18	; 0x06
    2696:	64 81       	ldd	r22, Z+4	; 0x04
    2698:	75 81       	ldd	r23, Z+5	; 0x05
    269a:	26 17       	cp	r18, r22
    269c:	37 07       	cpc	r19, r23
    269e:	20 f0       	brcs	.+8      	; 0x26a8 <prvCopyDataFromQueue+0x2a>
    26a0:	20 81       	ld	r18, Z
    26a2:	31 81       	ldd	r19, Z+1	; 0x01
    26a4:	37 83       	std	Z+7, r19	; 0x07
    26a6:	26 83       	std	Z+6, r18	; 0x06
    26a8:	66 81       	ldd	r22, Z+6	; 0x06
    26aa:	77 81       	ldd	r23, Z+7	; 0x07
    26ac:	0c 94 b5 24 	jmp	0x496a	; 0x496a <memcpy>
    26b0:	08 95       	ret

000026b2 <prvUnlockQueue>:
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	ec 01       	movw	r28, r24
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	0f 92       	push	r0
    26c4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    26c6:	7c 01       	movw	r14, r24
    26c8:	81 e1       	ldi	r24, 0x11	; 17
    26ca:	e8 0e       	add	r14, r24
    26cc:	f1 1c       	adc	r15, r1
    26ce:	11 16       	cp	r1, r17
    26d0:	5c f4       	brge	.+22     	; 0x26e8 <prvUnlockQueue+0x36>
    26d2:	89 89       	ldd	r24, Y+17	; 0x11
    26d4:	88 23       	and	r24, r24
    26d6:	41 f0       	breq	.+16     	; 0x26e8 <prvUnlockQueue+0x36>
    26d8:	c7 01       	movw	r24, r14
    26da:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    26de:	81 11       	cpse	r24, r1
    26e0:	0e 94 2e 1b 	call	0x365c	; 0x365c <vTaskMissedYield>
    26e4:	11 50       	subi	r17, 0x01	; 1
    26e6:	f3 cf       	rjmp	.-26     	; 0x26ce <prvUnlockQueue+0x1c>
    26e8:	8f ef       	ldi	r24, 0xFF	; 255
    26ea:	8e 8f       	std	Y+30, r24	; 0x1e
    26ec:	0f 90       	pop	r0
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	0f 92       	push	r0
    26f6:	1d 8d       	ldd	r17, Y+29	; 0x1d
    26f8:	7e 01       	movw	r14, r28
    26fa:	88 e0       	ldi	r24, 0x08	; 8
    26fc:	e8 0e       	add	r14, r24
    26fe:	f1 1c       	adc	r15, r1
    2700:	11 16       	cp	r1, r17
    2702:	5c f4       	brge	.+22     	; 0x271a <prvUnlockQueue+0x68>
    2704:	88 85       	ldd	r24, Y+8	; 0x08
    2706:	88 23       	and	r24, r24
    2708:	41 f0       	breq	.+16     	; 0x271a <prvUnlockQueue+0x68>
    270a:	c7 01       	movw	r24, r14
    270c:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    2710:	81 11       	cpse	r24, r1
    2712:	0e 94 2e 1b 	call	0x365c	; 0x365c <vTaskMissedYield>
    2716:	11 50       	subi	r17, 0x01	; 1
    2718:	f3 cf       	rjmp	.-26     	; 0x2700 <prvUnlockQueue+0x4e>
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	8d 8f       	std	Y+29, r24	; 0x1d
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	08 95       	ret

0000272e <xQueueGenericReset>:
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	ec 01       	movw	r28, r24
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	0f 92       	push	r0
    273a:	48 81       	ld	r20, Y
    273c:	59 81       	ldd	r21, Y+1	; 0x01
    273e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2740:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2742:	9a 01       	movw	r18, r20
    2744:	87 9f       	mul	r24, r23
    2746:	20 0d       	add	r18, r0
    2748:	31 1d       	adc	r19, r1
    274a:	11 24       	eor	r1, r1
    274c:	3d 83       	std	Y+5, r19	; 0x05
    274e:	2c 83       	std	Y+4, r18	; 0x04
    2750:	1a 8e       	std	Y+26, r1	; 0x1a
    2752:	5b 83       	std	Y+3, r21	; 0x03
    2754:	4a 83       	std	Y+2, r20	; 0x02
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	78 9f       	mul	r23, r24
    275c:	90 01       	movw	r18, r0
    275e:	79 9f       	mul	r23, r25
    2760:	30 0d       	add	r19, r0
    2762:	11 24       	eor	r1, r1
    2764:	ca 01       	movw	r24, r20
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	9f 83       	std	Y+7, r25	; 0x07
    276c:	8e 83       	std	Y+6, r24	; 0x06
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	8d 8f       	std	Y+29, r24	; 0x1d
    2772:	8e 8f       	std	Y+30, r24	; 0x1e
    2774:	61 11       	cpse	r22, r1
    2776:	0c c0       	rjmp	.+24     	; 0x2790 <xQueueGenericReset+0x62>
    2778:	88 85       	ldd	r24, Y+8	; 0x08
    277a:	88 23       	and	r24, r24
    277c:	89 f0       	breq	.+34     	; 0x27a0 <xQueueGenericReset+0x72>
    277e:	ce 01       	movw	r24, r28
    2780:	08 96       	adiw	r24, 0x08	; 8
    2782:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    2786:	88 23       	and	r24, r24
    2788:	59 f0       	breq	.+22     	; 0x27a0 <xQueueGenericReset+0x72>
    278a:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    278e:	08 c0       	rjmp	.+16     	; 0x27a0 <xQueueGenericReset+0x72>
    2790:	ce 01       	movw	r24, r28
    2792:	08 96       	adiw	r24, 0x08	; 8
    2794:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2798:	ce 01       	movw	r24, r28
    279a:	41 96       	adiw	r24, 0x11	; 17
    279c:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    27a0:	0f 90       	pop	r0
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <xQueueGenericCreate>:
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	08 2f       	mov	r16, r24
    27b6:	16 2f       	mov	r17, r22
    27b8:	66 23       	and	r22, r22
    27ba:	21 f0       	breq	.+8      	; 0x27c4 <xQueueGenericCreate+0x18>
    27bc:	86 9f       	mul	r24, r22
    27be:	c0 01       	movw	r24, r0
    27c0:	11 24       	eor	r1, r1
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <xQueueGenericCreate+0x1c>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	4f 96       	adiw	r24, 0x1f	; 31
    27ca:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <pvPortMalloc>
    27ce:	ec 01       	movw	r28, r24
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	71 f0       	breq	.+28     	; 0x27f0 <xQueueGenericCreate+0x44>
    27d4:	11 11       	cpse	r17, r1
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <xQueueGenericCreate+0x32>
    27d8:	99 83       	std	Y+1, r25	; 0x01
    27da:	88 83       	st	Y, r24
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <xQueueGenericCreate+0x38>
    27de:	4f 96       	adiw	r24, 0x1f	; 31
    27e0:	99 83       	std	Y+1, r25	; 0x01
    27e2:	88 83       	st	Y, r24
    27e4:	0b 8f       	std	Y+27, r16	; 0x1b
    27e6:	1c 8f       	std	Y+28, r17	; 0x1c
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	ce 01       	movw	r24, r28
    27ec:	0e 94 97 13 	call	0x272e	; 0x272e <xQueueGenericReset>
    27f0:	ce 01       	movw	r24, r28
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	08 95       	ret

000027fc <xQueueGenericSend>:
    27fc:	af 92       	push	r10
    27fe:	bf 92       	push	r11
    2800:	cf 92       	push	r12
    2802:	df 92       	push	r13
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	00 d0       	rcall	.+0      	; 0x2810 <xQueueGenericSend+0x14>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <xQueueGenericSend+0x16>
    2812:	1f 92       	push	r1
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	8c 01       	movw	r16, r24
    281a:	6b 01       	movw	r12, r22
    281c:	5d 83       	std	Y+5, r21	; 0x05
    281e:	4c 83       	std	Y+4, r20	; 0x04
    2820:	f2 2e       	mov	r15, r18
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	58 01       	movw	r10, r16
    2826:	98 e0       	ldi	r25, 0x08	; 8
    2828:	a9 0e       	add	r10, r25
    282a:	b1 1c       	adc	r11, r1
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	0f 92       	push	r0
    2832:	f8 01       	movw	r30, r16
    2834:	22 8d       	ldd	r18, Z+26	; 0x1a
    2836:	93 8d       	ldd	r25, Z+27	; 0x1b
    2838:	29 17       	cp	r18, r25
    283a:	18 f0       	brcs	.+6      	; 0x2842 <xQueueGenericSend+0x46>
    283c:	f2 e0       	ldi	r31, 0x02	; 2
    283e:	ff 12       	cpse	r15, r31
    2840:	14 c0       	rjmp	.+40     	; 0x286a <xQueueGenericSend+0x6e>
    2842:	4f 2d       	mov	r20, r15
    2844:	b6 01       	movw	r22, r12
    2846:	c8 01       	movw	r24, r16
    2848:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <prvCopyDataToQueue>
    284c:	f8 01       	movw	r30, r16
    284e:	91 89       	ldd	r25, Z+17	; 0x11
    2850:	99 23       	and	r25, r25
    2852:	21 f0       	breq	.+8      	; 0x285c <xQueueGenericSend+0x60>
    2854:	c8 01       	movw	r24, r16
    2856:	41 96       	adiw	r24, 0x11	; 17
    2858:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    285c:	81 11       	cpse	r24, r1
    285e:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2862:	0f 90       	pop	r0
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	50 c0       	rjmp	.+160    	; 0x290a <xQueueGenericSend+0x10e>
    286a:	2c 81       	ldd	r18, Y+4	; 0x04
    286c:	3d 81       	ldd	r19, Y+5	; 0x05
    286e:	23 2b       	or	r18, r19
    2870:	19 f4       	brne	.+6      	; 0x2878 <xQueueGenericSend+0x7c>
    2872:	0f 90       	pop	r0
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	48 c0       	rjmp	.+144    	; 0x2908 <xQueueGenericSend+0x10c>
    2878:	81 11       	cpse	r24, r1
    287a:	04 c0       	rjmp	.+8      	; 0x2884 <xQueueGenericSend+0x88>
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <vTaskInternalSetTimeOutState>
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	0f 92       	push	r0
    2892:	f8 01       	movw	r30, r16
    2894:	85 8d       	ldd	r24, Z+29	; 0x1d
    2896:	8f 3f       	cpi	r24, 0xFF	; 255
    2898:	09 f4       	brne	.+2      	; 0x289c <xQueueGenericSend+0xa0>
    289a:	15 8e       	std	Z+29, r1	; 0x1d
    289c:	f8 01       	movw	r30, r16
    289e:	86 8d       	ldd	r24, Z+30	; 0x1e
    28a0:	8f 3f       	cpi	r24, 0xFF	; 255
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <xQueueGenericSend+0xaa>
    28a4:	16 8e       	std	Z+30, r1	; 0x1e
    28a6:	0f 90       	pop	r0
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	be 01       	movw	r22, r28
    28ac:	6c 5f       	subi	r22, 0xFC	; 252
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	ce 01       	movw	r24, r28
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <xTaskCheckForTimeOut>
    28b8:	81 11       	cpse	r24, r1
    28ba:	21 c0       	rjmp	.+66     	; 0x28fe <xQueueGenericSend+0x102>
    28bc:	0f b6       	in	r0, 0x3f	; 63
    28be:	f8 94       	cli
    28c0:	0f 92       	push	r0
    28c2:	f8 01       	movw	r30, r16
    28c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    28c6:	83 8d       	ldd	r24, Z+27	; 0x1b
    28c8:	0f 90       	pop	r0
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	98 13       	cpse	r25, r24
    28ce:	11 c0       	rjmp	.+34     	; 0x28f2 <xQueueGenericSend+0xf6>
    28d0:	6c 81       	ldd	r22, Y+4	; 0x04
    28d2:	7d 81       	ldd	r23, Y+5	; 0x05
    28d4:	c5 01       	movw	r24, r10
    28d6:	0e 94 87 1a 	call	0x350e	; 0x350e <vTaskPlaceOnEventList>
    28da:	c8 01       	movw	r24, r16
    28dc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    28e0:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    28e4:	88 23       	and	r24, r24
    28e6:	11 f0       	breq	.+4      	; 0x28ec <xQueueGenericSend+0xf0>
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	a0 cf       	rjmp	.-192    	; 0x282c <xQueueGenericSend+0x30>
    28ec:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    28f0:	fb cf       	rjmp	.-10     	; 0x28e8 <xQueueGenericSend+0xec>
    28f2:	c8 01       	movw	r24, r16
    28f4:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    28f8:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    28fc:	f5 cf       	rjmp	.-22     	; 0x28e8 <xQueueGenericSend+0xec>
    28fe:	c8 01       	movw	r24, r16
    2900:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2904:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	0f 90       	pop	r0
    2910:	0f 90       	pop	r0
    2912:	0f 90       	pop	r0
    2914:	df 91       	pop	r29
    2916:	cf 91       	pop	r28
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	ff 90       	pop	r15
    291e:	df 90       	pop	r13
    2920:	cf 90       	pop	r12
    2922:	bf 90       	pop	r11
    2924:	af 90       	pop	r10
    2926:	08 95       	ret

00002928 <xQueueGenericSendFromISR>:
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	ec 01       	movw	r28, r24
    2934:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2938:	98 17       	cp	r25, r24
    293a:	10 f0       	brcs	.+4      	; 0x2940 <xQueueGenericSendFromISR+0x18>
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	e1 f4       	brne	.+56     	; 0x2978 <xQueueGenericSendFromISR+0x50>
    2940:	7a 01       	movw	r14, r20
    2942:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2944:	42 2f       	mov	r20, r18
    2946:	ce 01       	movw	r24, r28
    2948:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <prvCopyDataToQueue>
    294c:	1f 3f       	cpi	r17, 0xFF	; 255
    294e:	81 f4       	brne	.+32     	; 0x2970 <xQueueGenericSendFromISR+0x48>
    2950:	89 89       	ldd	r24, Y+17	; 0x11
    2952:	88 23       	and	r24, r24
    2954:	79 f0       	breq	.+30     	; 0x2974 <xQueueGenericSendFromISR+0x4c>
    2956:	ce 01       	movw	r24, r28
    2958:	41 96       	adiw	r24, 0x11	; 17
    295a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    295e:	88 23       	and	r24, r24
    2960:	49 f0       	breq	.+18     	; 0x2974 <xQueueGenericSendFromISR+0x4c>
    2962:	e1 14       	cp	r14, r1
    2964:	f1 04       	cpc	r15, r1
    2966:	31 f0       	breq	.+12     	; 0x2974 <xQueueGenericSendFromISR+0x4c>
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	f7 01       	movw	r30, r14
    296c:	80 83       	st	Z, r24
    296e:	05 c0       	rjmp	.+10     	; 0x297a <xQueueGenericSendFromISR+0x52>
    2970:	1f 5f       	subi	r17, 0xFF	; 255
    2972:	1e 8f       	std	Y+30, r17	; 0x1e
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	01 c0       	rjmp	.+2      	; 0x297a <xQueueGenericSendFromISR+0x52>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	ff 90       	pop	r15
    2982:	ef 90       	pop	r14
    2984:	08 95       	ret

00002986 <xQueueReceive>:
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ff 92       	push	r15
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	00 d0       	rcall	.+0      	; 0x299a <xQueueReceive+0x14>
    299a:	00 d0       	rcall	.+0      	; 0x299c <xQueueReceive+0x16>
    299c:	1f 92       	push	r1
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	8c 01       	movw	r16, r24
    29a4:	6b 01       	movw	r12, r22
    29a6:	5d 83       	std	Y+5, r21	; 0x05
    29a8:	4c 83       	std	Y+4, r20	; 0x04
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	58 01       	movw	r10, r16
    29ae:	91 e1       	ldi	r25, 0x11	; 17
    29b0:	a9 0e       	add	r10, r25
    29b2:	b1 1c       	adc	r11, r1
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	0f 92       	push	r0
    29ba:	f8 01       	movw	r30, r16
    29bc:	f2 8c       	ldd	r15, Z+26	; 0x1a
    29be:	ff 20       	and	r15, r15
    29c0:	a9 f0       	breq	.+42     	; 0x29ec <xQueueReceive+0x66>
    29c2:	b6 01       	movw	r22, r12
    29c4:	c8 01       	movw	r24, r16
    29c6:	0e 94 3f 13 	call	0x267e	; 0x267e <prvCopyDataFromQueue>
    29ca:	fa 94       	dec	r15
    29cc:	f8 01       	movw	r30, r16
    29ce:	f2 8e       	std	Z+26, r15	; 0x1a
    29d0:	80 85       	ldd	r24, Z+8	; 0x08
    29d2:	88 23       	and	r24, r24
    29d4:	39 f0       	breq	.+14     	; 0x29e4 <xQueueReceive+0x5e>
    29d6:	c8 01       	movw	r24, r16
    29d8:	08 96       	adiw	r24, 0x08	; 8
    29da:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    29de:	81 11       	cpse	r24, r1
    29e0:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    29e4:	0f 90       	pop	r0
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	50 c0       	rjmp	.+160    	; 0x2a8c <xQueueReceive+0x106>
    29ec:	2c 81       	ldd	r18, Y+4	; 0x04
    29ee:	3d 81       	ldd	r19, Y+5	; 0x05
    29f0:	23 2b       	or	r18, r19
    29f2:	19 f4       	brne	.+6      	; 0x29fa <xQueueReceive+0x74>
    29f4:	0f 90       	pop	r0
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	48 c0       	rjmp	.+144    	; 0x2a8a <xQueueReceive+0x104>
    29fa:	81 11       	cpse	r24, r1
    29fc:	04 c0       	rjmp	.+8      	; 0x2a06 <xQueueReceive+0x80>
    29fe:	ce 01       	movw	r24, r28
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <vTaskInternalSetTimeOutState>
    2a06:	0f 90       	pop	r0
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    2a0e:	0f b6       	in	r0, 0x3f	; 63
    2a10:	f8 94       	cli
    2a12:	0f 92       	push	r0
    2a14:	f8 01       	movw	r30, r16
    2a16:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a18:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <xQueueReceive+0x98>
    2a1c:	15 8e       	std	Z+29, r1	; 0x1d
    2a1e:	f8 01       	movw	r30, r16
    2a20:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a22:	8f 3f       	cpi	r24, 0xFF	; 255
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <xQueueReceive+0xa2>
    2a26:	16 8e       	std	Z+30, r1	; 0x1e
    2a28:	0f 90       	pop	r0
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	be 01       	movw	r22, r28
    2a2e:	6c 5f       	subi	r22, 0xFC	; 252
    2a30:	7f 4f       	sbci	r23, 0xFF	; 255
    2a32:	ce 01       	movw	r24, r28
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <xTaskCheckForTimeOut>
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	1c c0       	rjmp	.+56     	; 0x2a76 <xQueueReceive+0xf0>
    2a3e:	c8 01       	movw	r24, r16
    2a40:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <prvIsQueueEmpty>
    2a44:	88 23       	and	r24, r24
    2a46:	89 f0       	breq	.+34     	; 0x2a6a <xQueueReceive+0xe4>
    2a48:	6c 81       	ldd	r22, Y+4	; 0x04
    2a4a:	7d 81       	ldd	r23, Y+5	; 0x05
    2a4c:	c5 01       	movw	r24, r10
    2a4e:	0e 94 87 1a 	call	0x350e	; 0x350e <vTaskPlaceOnEventList>
    2a52:	c8 01       	movw	r24, r16
    2a54:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2a58:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2a5c:	88 23       	and	r24, r24
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <xQueueReceive+0xde>
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	a8 cf       	rjmp	.-176    	; 0x29b4 <xQueueReceive+0x2e>
    2a64:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2a68:	fb cf       	rjmp	.-10     	; 0x2a60 <xQueueReceive+0xda>
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2a70:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2a74:	f5 cf       	rjmp	.-22     	; 0x2a60 <xQueueReceive+0xda>
    2a76:	c8 01       	movw	r24, r16
    2a78:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2a7c:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2a80:	c8 01       	movw	r24, r16
    2a82:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <prvIsQueueEmpty>
    2a86:	88 23       	and	r24, r24
    2a88:	59 f3       	breq	.-42     	; 0x2a60 <xQueueReceive+0xda>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	ff 90       	pop	r15
    2aa0:	df 90       	pop	r13
    2aa2:	cf 90       	pop	r12
    2aa4:	bf 90       	pop	r11
    2aa6:	af 90       	pop	r10
    2aa8:	08 95       	ret

00002aaa <xQueueSemaphoreTake>:
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	00 d0       	rcall	.+0      	; 0x2aba <xQueueSemaphoreTake+0x10>
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <xQueueSemaphoreTake+0x12>
    2abc:	1f 92       	push	r1
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	8c 01       	movw	r16, r24
    2ac4:	7d 83       	std	Y+5, r23	; 0x05
    2ac6:	6c 83       	std	Y+4, r22	; 0x04
    2ac8:	f1 2c       	mov	r15, r1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	68 01       	movw	r12, r16
    2ace:	81 e1       	ldi	r24, 0x11	; 17
    2ad0:	c8 0e       	add	r12, r24
    2ad2:	d1 1c       	adc	r13, r1
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	0f 92       	push	r0
    2ada:	d8 01       	movw	r26, r16
    2adc:	5a 96       	adiw	r26, 0x1a	; 26
    2ade:	8c 91       	ld	r24, X
    2ae0:	5a 97       	sbiw	r26, 0x1a	; 26
    2ae2:	88 23       	and	r24, r24
    2ae4:	e9 f0       	breq	.+58     	; 0x2b20 <xQueueSemaphoreTake+0x76>
    2ae6:	81 50       	subi	r24, 0x01	; 1
    2ae8:	5a 96       	adiw	r26, 0x1a	; 26
    2aea:	8c 93       	st	X, r24
    2aec:	5a 97       	sbiw	r26, 0x1a	; 26
    2aee:	8d 91       	ld	r24, X+
    2af0:	9c 91       	ld	r25, X
    2af2:	89 2b       	or	r24, r25
    2af4:	29 f4       	brne	.+10     	; 0x2b00 <xQueueSemaphoreTake+0x56>
    2af6:	0e 94 24 1c 	call	0x3848	; 0x3848 <pvTaskIncrementMutexHeldCount>
    2afa:	f8 01       	movw	r30, r16
    2afc:	95 83       	std	Z+5, r25	; 0x05
    2afe:	84 83       	std	Z+4, r24	; 0x04
    2b00:	d8 01       	movw	r26, r16
    2b02:	18 96       	adiw	r26, 0x08	; 8
    2b04:	8c 91       	ld	r24, X
    2b06:	88 23       	and	r24, r24
    2b08:	39 f0       	breq	.+14     	; 0x2b18 <xQueueSemaphoreTake+0x6e>
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	08 96       	adiw	r24, 0x08	; 8
    2b0e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <xTaskRemoveFromEventList>
    2b12:	81 11       	cpse	r24, r1
    2b14:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2b18:	0f 90       	pop	r0
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	7a c0       	rjmp	.+244    	; 0x2c14 <xQueueSemaphoreTake+0x16a>
    2b20:	2c 81       	ldd	r18, Y+4	; 0x04
    2b22:	3d 81       	ldd	r19, Y+5	; 0x05
    2b24:	23 2b       	or	r18, r19
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <xQueueSemaphoreTake+0x80>
    2b28:	72 c0       	rjmp	.+228    	; 0x2c0e <xQueueSemaphoreTake+0x164>
    2b2a:	91 11       	cpse	r25, r1
    2b2c:	04 c0       	rjmp	.+8      	; 0x2b36 <xQueueSemaphoreTake+0x8c>
    2b2e:	ce 01       	movw	r24, r28
    2b30:	01 96       	adiw	r24, 0x01	; 1
    2b32:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <vTaskInternalSetTimeOutState>
    2b36:	0f 90       	pop	r0
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	0f 92       	push	r0
    2b44:	f8 01       	movw	r30, r16
    2b46:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b48:	8f 3f       	cpi	r24, 0xFF	; 255
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <xQueueSemaphoreTake+0xa4>
    2b4c:	15 8e       	std	Z+29, r1	; 0x1d
    2b4e:	d8 01       	movw	r26, r16
    2b50:	5e 96       	adiw	r26, 0x1e	; 30
    2b52:	8c 91       	ld	r24, X
    2b54:	5e 97       	sbiw	r26, 0x1e	; 30
    2b56:	8f 3f       	cpi	r24, 0xFF	; 255
    2b58:	11 f4       	brne	.+4      	; 0x2b5e <xQueueSemaphoreTake+0xb4>
    2b5a:	5e 96       	adiw	r26, 0x1e	; 30
    2b5c:	1c 92       	st	X, r1
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	be 01       	movw	r22, r28
    2b64:	6c 5f       	subi	r22, 0xFC	; 252
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <xTaskCheckForTimeOut>
    2b70:	81 11       	cpse	r24, r1
    2b72:	2b c0       	rjmp	.+86     	; 0x2bca <xQueueSemaphoreTake+0x120>
    2b74:	c8 01       	movw	r24, r16
    2b76:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <prvIsQueueEmpty>
    2b7a:	88 23       	and	r24, r24
    2b7c:	01 f1       	breq	.+64     	; 0x2bbe <xQueueSemaphoreTake+0x114>
    2b7e:	f8 01       	movw	r30, r16
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	89 2b       	or	r24, r25
    2b86:	51 f4       	brne	.+20     	; 0x2b9c <xQueueSemaphoreTake+0xf2>
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	0f 92       	push	r0
    2b8e:	84 81       	ldd	r24, Z+4	; 0x04
    2b90:	95 81       	ldd	r25, Z+5	; 0x05
    2b92:	0e 94 40 1b 	call	0x3680	; 0x3680 <xTaskPriorityInherit>
    2b96:	f8 2e       	mov	r15, r24
    2b98:	0f 90       	pop	r0
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	6c 81       	ldd	r22, Y+4	; 0x04
    2b9e:	7d 81       	ldd	r23, Y+5	; 0x05
    2ba0:	c6 01       	movw	r24, r12
    2ba2:	0e 94 87 1a 	call	0x350e	; 0x350e <vTaskPlaceOnEventList>
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2bac:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2bb0:	88 23       	and	r24, r24
    2bb2:	11 f0       	breq	.+4      	; 0x2bb8 <xQueueSemaphoreTake+0x10e>
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	8e cf       	rjmp	.-228    	; 0x2ad4 <xQueueSemaphoreTake+0x2a>
    2bb8:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2bbc:	fb cf       	rjmp	.-10     	; 0x2bb4 <xQueueSemaphoreTake+0x10a>
    2bbe:	c8 01       	movw	r24, r16
    2bc0:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2bc4:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2bc8:	f5 cf       	rjmp	.-22     	; 0x2bb4 <xQueueSemaphoreTake+0x10a>
    2bca:	c8 01       	movw	r24, r16
    2bcc:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvUnlockQueue>
    2bd0:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    2bd4:	c8 01       	movw	r24, r16
    2bd6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <prvIsQueueEmpty>
    2bda:	88 23       	and	r24, r24
    2bdc:	59 f3       	breq	.-42     	; 0x2bb4 <xQueueSemaphoreTake+0x10a>
    2bde:	ff 20       	and	r15, r15
    2be0:	c1 f0       	breq	.+48     	; 0x2c12 <xQueueSemaphoreTake+0x168>
    2be2:	0f b6       	in	r0, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	0f 92       	push	r0
    2be8:	f8 01       	movw	r30, r16
    2bea:	81 89       	ldd	r24, Z+17	; 0x11
    2bec:	88 23       	and	r24, r24
    2bee:	39 f0       	breq	.+14     	; 0x2bfe <xQueueSemaphoreTake+0x154>
    2bf0:	06 88       	ldd	r0, Z+22	; 0x16
    2bf2:	f7 89       	ldd	r31, Z+23	; 0x17
    2bf4:	e0 2d       	mov	r30, r0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	64 e0       	ldi	r22, 0x04	; 4
    2bfa:	68 1b       	sub	r22, r24
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <xQueueSemaphoreTake+0x156>
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	d8 01       	movw	r26, r16
    2c02:	14 96       	adiw	r26, 0x04	; 4
    2c04:	8d 91       	ld	r24, X+
    2c06:	9c 91       	ld	r25, X
    2c08:	15 97       	sbiw	r26, 0x05	; 5
    2c0a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <vTaskPriorityDisinheritAfterTimeout>
    2c0e:	0f 90       	pop	r0
    2c10:	0f be       	out	0x3f, r0	; 63
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	ff 90       	pop	r15
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	08 95       	ret

00002c2e <vQueueWaitForMessageRestricted>:
    2c2e:	cf 93       	push	r28
    2c30:	df 93       	push	r29
    2c32:	ec 01       	movw	r28, r24
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	0f 92       	push	r0
    2c3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <vQueueWaitForMessageRestricted+0x14>
    2c40:	1d 8e       	std	Y+29, r1	; 0x1d
    2c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c44:	8f 3f       	cpi	r24, 0xFF	; 255
    2c46:	09 f4       	brne	.+2      	; 0x2c4a <vQueueWaitForMessageRestricted+0x1c>
    2c48:	1e 8e       	std	Y+30, r1	; 0x1e
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c50:	81 11       	cpse	r24, r1
    2c52:	04 c0       	rjmp	.+8      	; 0x2c5c <vQueueWaitForMessageRestricted+0x2e>
    2c54:	ce 01       	movw	r24, r28
    2c56:	41 96       	adiw	r24, 0x11	; 17
    2c58:	0e 94 98 1a 	call	0x3530	; 0x3530 <vTaskPlaceOnEventListRestricted>
    2c5c:	ce 01       	movw	r24, r28
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <prvUnlockQueue>

00002c66 <prvResetNextTaskUnblockTime>:
    2c66:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxDelayedTaskList>
    2c6a:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    2c6e:	80 81       	ld	r24, Z
    2c70:	81 11       	cpse	r24, r1
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <prvResetNextTaskUnblockTime+0x14>
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    2c76:	9f ef       	ldi	r25, 0xFF	; 255
    2c78:	0c c0       	rjmp	.+24     	; 0x2c92 <prvResetNextTaskUnblockTime+0x2c>
    2c7a:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxDelayedTaskList>
    2c7e:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    2c82:	05 80       	ldd	r0, Z+5	; 0x05
    2c84:	f6 81       	ldd	r31, Z+6	; 0x06
    2c86:	e0 2d       	mov	r30, r0
    2c88:	06 80       	ldd	r0, Z+6	; 0x06
    2c8a:	f7 81       	ldd	r31, Z+7	; 0x07
    2c8c:	e0 2d       	mov	r30, r0
    2c8e:	82 81       	ldd	r24, Z+2	; 0x02
    2c90:	93 81       	ldd	r25, Z+3	; 0x03
    2c92:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <xNextTaskUnblockTime+0x1>
    2c96:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <xNextTaskUnblockTime>
    2c9a:	08 95       	ret

00002c9c <prvAddCurrentTaskToDelayedList>:
    2c9c:	ff 92       	push	r15
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	f6 2e       	mov	r15, r22
    2caa:	00 91 31 04 	lds	r16, 0x0431	; 0x800431 <xTickCount>
    2cae:	10 91 32 04 	lds	r17, 0x0432	; 0x800432 <xTickCount+0x1>
    2cb2:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    2cb6:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2cba:	02 96       	adiw	r24, 0x02	; 2
    2cbc:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    2cc0:	cf 3f       	cpi	r28, 0xFF	; 255
    2cc2:	8f ef       	ldi	r24, 0xFF	; 255
    2cc4:	d8 07       	cpc	r29, r24
    2cc6:	89 f4       	brne	.+34     	; 0x2cea <prvAddCurrentTaskToDelayedList+0x4e>
    2cc8:	ff 20       	and	r15, r15
    2cca:	79 f0       	breq	.+30     	; 0x2cea <prvAddCurrentTaskToDelayedList+0x4e>
    2ccc:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <pxCurrentTCB>
    2cd0:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2cd4:	6e 5f       	subi	r22, 0xFE	; 254
    2cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd8:	84 e3       	ldi	r24, 0x34	; 52
    2cda:	94 e0       	ldi	r25, 0x04	; 4
    2cdc:	df 91       	pop	r29
    2cde:	cf 91       	pop	r28
    2ce0:	1f 91       	pop	r17
    2ce2:	0f 91       	pop	r16
    2ce4:	ff 90       	pop	r15
    2ce6:	0c 94 16 20 	jmp	0x402c	; 0x402c <vListInsertEnd>
    2cea:	c0 0f       	add	r28, r16
    2cec:	d1 1f       	adc	r29, r17
    2cee:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    2cf2:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2cf6:	d3 83       	std	Z+3, r29	; 0x03
    2cf8:	c2 83       	std	Z+2, r28	; 0x02
    2cfa:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <pxCurrentTCB>
    2cfe:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2d02:	c0 17       	cp	r28, r16
    2d04:	d1 07       	cpc	r29, r17
    2d06:	68 f4       	brcc	.+26     	; 0x2d22 <prvAddCurrentTaskToDelayedList+0x86>
    2d08:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <pxOverflowDelayedTaskList>
    2d0c:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <pxOverflowDelayedTaskList+0x1>
    2d10:	6e 5f       	subi	r22, 0xFE	; 254
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	df 91       	pop	r29
    2d16:	cf 91       	pop	r28
    2d18:	1f 91       	pop	r17
    2d1a:	0f 91       	pop	r16
    2d1c:	ff 90       	pop	r15
    2d1e:	0c 94 37 20 	jmp	0x406e	; 0x406e <vListInsert>
    2d22:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxDelayedTaskList>
    2d26:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    2d2a:	6e 5f       	subi	r22, 0xFE	; 254
    2d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2e:	0e 94 37 20 	call	0x406e	; 0x406e <vListInsert>
    2d32:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <xNextTaskUnblockTime>
    2d36:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <xNextTaskUnblockTime+0x1>
    2d3a:	c8 17       	cp	r28, r24
    2d3c:	d9 07       	cpc	r29, r25
    2d3e:	20 f4       	brcc	.+8      	; 0x2d48 <prvAddCurrentTaskToDelayedList+0xac>
    2d40:	d0 93 2a 04 	sts	0x042A, r29	; 0x80042a <xNextTaskUnblockTime+0x1>
    2d44:	c0 93 29 04 	sts	0x0429, r28	; 0x800429 <xNextTaskUnblockTime>
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	08 95       	ret

00002d54 <prvIdleTask>:
    2d54:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <uxDeletedTasksWaitingCleanUp>
    2d58:	88 23       	and	r24, r24
    2d5a:	09 f1       	breq	.+66     	; 0x2d9e <prvIdleTask+0x4a>
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	0f 92       	push	r0
    2d62:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <xTasksWaitingTermination+0x5>
    2d66:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <xTasksWaitingTermination+0x6>
    2d6a:	c6 81       	ldd	r28, Z+6	; 0x06
    2d6c:	d7 81       	ldd	r29, Z+7	; 0x07
    2d6e:	ce 01       	movw	r24, r28
    2d70:	02 96       	adiw	r24, 0x02	; 2
    2d72:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    2d76:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <uxCurrentNumberOfTasks>
    2d7a:	81 50       	subi	r24, 0x01	; 1
    2d7c:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <uxCurrentNumberOfTasks>
    2d80:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <uxDeletedTasksWaitingCleanUp>
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <uxDeletedTasksWaitingCleanUp>
    2d8a:	0f 90       	pop	r0
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <vPortFree>
    2d96:	ce 01       	movw	r24, r28
    2d98:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <vPortFree>
    2d9c:	db cf       	rjmp	.-74     	; 0x2d54 <prvIdleTask>
    2d9e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <pxReadyTasksLists>
    2da2:	82 30       	cpi	r24, 0x02	; 2
    2da4:	10 f0       	brcs	.+4      	; 0x2daa <prvIdleTask+0x56>
    2da6:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2daa:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <vApplicationIdleHook>
    2dae:	d2 cf       	rjmp	.-92     	; 0x2d54 <prvIdleTask>

00002db0 <xTaskCreate>:
    2db0:	5f 92       	push	r5
    2db2:	6f 92       	push	r6
    2db4:	7f 92       	push	r7
    2db6:	8f 92       	push	r8
    2db8:	9f 92       	push	r9
    2dba:	af 92       	push	r10
    2dbc:	bf 92       	push	r11
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	3c 01       	movw	r6, r24
    2dd0:	6b 01       	movw	r12, r22
    2dd2:	5a 01       	movw	r10, r20
    2dd4:	49 01       	movw	r8, r18
    2dd6:	50 2e       	mov	r5, r16
    2dd8:	ca 01       	movw	r24, r20
    2dda:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <pvPortMalloc>
    2dde:	8c 01       	movw	r16, r24
    2de0:	89 2b       	or	r24, r25
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <xTaskCreate+0x36>
    2de4:	e0 c0       	rjmp	.+448    	; 0x2fa6 <xTaskCreate+0x1f6>
    2de6:	88 e2       	ldi	r24, 0x28	; 40
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <pvPortMalloc>
    2dee:	ec 01       	movw	r28, r24
    2df0:	89 2b       	or	r24, r25
    2df2:	c9 f0       	breq	.+50     	; 0x2e26 <xTaskCreate+0x76>
    2df4:	18 8f       	std	Y+24, r17	; 0x18
    2df6:	0f 8b       	std	Y+23, r16	; 0x17
    2df8:	a5 01       	movw	r20, r10
    2dfa:	65 ea       	ldi	r22, 0xA5	; 165
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	c8 01       	movw	r24, r16
    2e00:	0e 94 be 24 	call	0x497c	; 0x497c <memset>
    2e04:	21 e0       	ldi	r18, 0x01	; 1
    2e06:	a2 1a       	sub	r10, r18
    2e08:	b1 08       	sbc	r11, r1
    2e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e0e:	a8 0e       	add	r10, r24
    2e10:	b9 1e       	adc	r11, r25
    2e12:	c1 14       	cp	r12, r1
    2e14:	d1 04       	cpc	r13, r1
    2e16:	c9 f0       	breq	.+50     	; 0x2e4a <xTaskCreate+0x9a>
    2e18:	be 01       	movw	r22, r28
    2e1a:	67 5e       	subi	r22, 0xE7	; 231
    2e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e1e:	f6 01       	movw	r30, r12
    2e20:	c6 01       	movw	r24, r12
    2e22:	08 96       	adiw	r24, 0x08	; 8
    2e24:	07 c0       	rjmp	.+14     	; 0x2e34 <xTaskCreate+0x84>
    2e26:	c8 01       	movw	r24, r16
    2e28:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <vPortFree>
    2e2c:	bc c0       	rjmp	.+376    	; 0x2fa6 <xTaskCreate+0x1f6>
    2e2e:	e8 17       	cp	r30, r24
    2e30:	f9 07       	cpc	r31, r25
    2e32:	49 f0       	breq	.+18     	; 0x2e46 <xTaskCreate+0x96>
    2e34:	9f 01       	movw	r18, r30
    2e36:	41 91       	ld	r20, Z+
    2e38:	db 01       	movw	r26, r22
    2e3a:	4d 93       	st	X+, r20
    2e3c:	bd 01       	movw	r22, r26
    2e3e:	d9 01       	movw	r26, r18
    2e40:	2c 91       	ld	r18, X
    2e42:	21 11       	cpse	r18, r1
    2e44:	f4 cf       	rjmp	.-24     	; 0x2e2e <xTaskCreate+0x7e>
    2e46:	18 a2       	std	Y+32, r1	; 0x20
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <xTaskCreate+0x9c>
    2e4a:	19 8e       	std	Y+25, r1	; 0x19
    2e4c:	05 2d       	mov	r16, r5
    2e4e:	04 30       	cpi	r16, 0x04	; 4
    2e50:	08 f0       	brcs	.+2      	; 0x2e54 <xTaskCreate+0xa4>
    2e52:	03 e0       	ldi	r16, 0x03	; 3
    2e54:	0e 8b       	std	Y+22, r16	; 0x16
    2e56:	09 a3       	std	Y+33, r16	; 0x21
    2e58:	1a a2       	std	Y+34, r1	; 0x22
    2e5a:	6e 01       	movw	r12, r28
    2e5c:	b2 e0       	ldi	r27, 0x02	; 2
    2e5e:	cb 0e       	add	r12, r27
    2e60:	d1 1c       	adc	r13, r1
    2e62:	c6 01       	movw	r24, r12
    2e64:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInitialiseItem>
    2e68:	ce 01       	movw	r24, r28
    2e6a:	0c 96       	adiw	r24, 0x0c	; 12
    2e6c:	0e 94 12 20 	call	0x4024	; 0x4024 <vListInitialiseItem>
    2e70:	d9 87       	std	Y+9, r29	; 0x09
    2e72:	c8 87       	std	Y+8, r28	; 0x08
    2e74:	84 e0       	ldi	r24, 0x04	; 4
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	80 1b       	sub	r24, r16
    2e7a:	91 09       	sbc	r25, r1
    2e7c:	9d 87       	std	Y+13, r25	; 0x0d
    2e7e:	8c 87       	std	Y+12, r24	; 0x0c
    2e80:	db 8b       	std	Y+19, r29	; 0x13
    2e82:	ca 8b       	std	Y+18, r28	; 0x12
    2e84:	1b a2       	std	Y+35, r1	; 0x23
    2e86:	1c a2       	std	Y+36, r1	; 0x24
    2e88:	1d a2       	std	Y+37, r1	; 0x25
    2e8a:	1e a2       	std	Y+38, r1	; 0x26
    2e8c:	1f a2       	std	Y+39, r1	; 0x27
    2e8e:	a4 01       	movw	r20, r8
    2e90:	b3 01       	movw	r22, r6
    2e92:	c5 01       	movw	r24, r10
    2e94:	0e 94 93 20 	call	0x4126	; 0x4126 <pxPortInitialiseStack>
    2e98:	99 83       	std	Y+1, r25	; 0x01
    2e9a:	88 83       	st	Y, r24
    2e9c:	e1 14       	cp	r14, r1
    2e9e:	f1 04       	cpc	r15, r1
    2ea0:	19 f0       	breq	.+6      	; 0x2ea8 <xTaskCreate+0xf8>
    2ea2:	f7 01       	movw	r30, r14
    2ea4:	d1 83       	std	Z+1, r29	; 0x01
    2ea6:	c0 83       	st	Z, r28
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	0f 92       	push	r0
    2eae:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <uxCurrentNumberOfTasks>
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <uxCurrentNumberOfTasks>
    2eb8:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    2ebc:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2ec0:	89 2b       	or	r24, r25
    2ec2:	d1 f5       	brne	.+116    	; 0x2f38 <xTaskCreate+0x188>
    2ec4:	d0 93 8b 04 	sts	0x048B, r29	; 0x80048b <pxCurrentTCB+0x1>
    2ec8:	c0 93 8a 04 	sts	0x048A, r28	; 0x80048a <pxCurrentTCB>
    2ecc:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <uxCurrentNumberOfTasks>
    2ed0:	81 30       	cpi	r24, 0x01	; 1
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <xTaskCreate+0x126>
    2ed4:	41 c0       	rjmp	.+130    	; 0x2f58 <xTaskCreate+0x1a8>
    2ed6:	86 e6       	ldi	r24, 0x66	; 102
    2ed8:	94 e0       	ldi	r25, 0x04	; 4
    2eda:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2ede:	8f e6       	ldi	r24, 0x6F	; 111
    2ee0:	94 e0       	ldi	r25, 0x04	; 4
    2ee2:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2ee6:	88 e7       	ldi	r24, 0x78	; 120
    2ee8:	94 e0       	ldi	r25, 0x04	; 4
    2eea:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2eee:	81 e8       	ldi	r24, 0x81	; 129
    2ef0:	94 e0       	ldi	r25, 0x04	; 4
    2ef2:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2ef6:	8d e5       	ldi	r24, 0x5D	; 93
    2ef8:	94 e0       	ldi	r25, 0x04	; 4
    2efa:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2efe:	84 e5       	ldi	r24, 0x54	; 84
    2f00:	94 e0       	ldi	r25, 0x04	; 4
    2f02:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2f06:	87 e4       	ldi	r24, 0x47	; 71
    2f08:	94 e0       	ldi	r25, 0x04	; 4
    2f0a:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2f0e:	8e e3       	ldi	r24, 0x3E	; 62
    2f10:	94 e0       	ldi	r25, 0x04	; 4
    2f12:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2f16:	84 e3       	ldi	r24, 0x34	; 52
    2f18:	94 e0       	ldi	r25, 0x04	; 4
    2f1a:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    2f1e:	8d e5       	ldi	r24, 0x5D	; 93
    2f20:	94 e0       	ldi	r25, 0x04	; 4
    2f22:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <pxDelayedTaskList+0x1>
    2f26:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <pxDelayedTaskList>
    2f2a:	84 e5       	ldi	r24, 0x54	; 84
    2f2c:	94 e0       	ldi	r25, 0x04	; 4
    2f2e:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <pxOverflowDelayedTaskList+0x1>
    2f32:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <pxOverflowDelayedTaskList>
    2f36:	10 c0       	rjmp	.+32     	; 0x2f58 <xTaskCreate+0x1a8>
    2f38:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <xSchedulerRunning>
    2f3c:	81 11       	cpse	r24, r1
    2f3e:	0c c0       	rjmp	.+24     	; 0x2f58 <xTaskCreate+0x1a8>
    2f40:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    2f44:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2f48:	96 89       	ldd	r25, Z+22	; 0x16
    2f4a:	8e 89       	ldd	r24, Y+22	; 0x16
    2f4c:	89 17       	cp	r24, r25
    2f4e:	20 f0       	brcs	.+8      	; 0x2f58 <xTaskCreate+0x1a8>
    2f50:	d0 93 8b 04 	sts	0x048B, r29	; 0x80048b <pxCurrentTCB+0x1>
    2f54:	c0 93 8a 04 	sts	0x048A, r28	; 0x80048a <pxCurrentTCB>
    2f58:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <uxTaskNumber>
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <uxTaskNumber>
    2f62:	8e 89       	ldd	r24, Y+22	; 0x16
    2f64:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    2f68:	98 17       	cp	r25, r24
    2f6a:	10 f4       	brcc	.+4      	; 0x2f70 <xTaskCreate+0x1c0>
    2f6c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    2f70:	f9 e0       	ldi	r31, 0x09	; 9
    2f72:	8f 9f       	mul	r24, r31
    2f74:	c0 01       	movw	r24, r0
    2f76:	11 24       	eor	r1, r1
    2f78:	b6 01       	movw	r22, r12
    2f7a:	8a 59       	subi	r24, 0x9A	; 154
    2f7c:	9b 4f       	sbci	r25, 0xFB	; 251
    2f7e:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    2f82:	0f 90       	pop	r0
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <xSchedulerRunning>
    2f8a:	88 23       	and	r24, r24
    2f8c:	51 f0       	breq	.+20     	; 0x2fa2 <xTaskCreate+0x1f2>
    2f8e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    2f92:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2f96:	96 89       	ldd	r25, Z+22	; 0x16
    2f98:	8e 89       	ldd	r24, Y+22	; 0x16
    2f9a:	98 17       	cp	r25, r24
    2f9c:	10 f4       	brcc	.+4      	; 0x2fa2 <xTaskCreate+0x1f2>
    2f9e:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <xTaskCreate+0x1f8>
    2fa6:	8f ef       	ldi	r24, 0xFF	; 255
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	df 90       	pop	r13
    2fb6:	cf 90       	pop	r12
    2fb8:	bf 90       	pop	r11
    2fba:	af 90       	pop	r10
    2fbc:	9f 90       	pop	r9
    2fbe:	8f 90       	pop	r8
    2fc0:	7f 90       	pop	r7
    2fc2:	6f 90       	pop	r6
    2fc4:	5f 90       	pop	r5
    2fc6:	08 95       	ret

00002fc8 <vTaskResume>:
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	20 91 8a 04 	lds	r18, 0x048A	; 0x80048a <pxCurrentTCB>
    2fd4:	30 91 8b 04 	lds	r19, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    2fd8:	82 17       	cp	r24, r18
    2fda:	93 07       	cpc	r25, r19
    2fdc:	09 f4       	brne	.+2      	; 0x2fe0 <vTaskResume+0x18>
    2fde:	38 c0       	rjmp	.+112    	; 0x3050 <vTaskResume+0x88>
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <vTaskResume+0x1e>
    2fe4:	35 c0       	rjmp	.+106    	; 0x3050 <vTaskResume+0x88>
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	0f 92       	push	r0
    2fec:	fc 01       	movw	r30, r24
    2fee:	22 85       	ldd	r18, Z+10	; 0x0a
    2ff0:	33 85       	ldd	r19, Z+11	; 0x0b
    2ff2:	24 53       	subi	r18, 0x34	; 52
    2ff4:	34 40       	sbci	r19, 0x04	; 4
    2ff6:	51 f5       	brne	.+84     	; 0x304c <vTaskResume+0x84>
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	24 89       	ldd	r18, Z+20	; 0x14
    2ffc:	35 89       	ldd	r19, Z+21	; 0x15
    2ffe:	f4 e0       	ldi	r31, 0x04	; 4
    3000:	27 34       	cpi	r18, 0x47	; 71
    3002:	3f 07       	cpc	r19, r31
    3004:	19 f1       	breq	.+70     	; 0x304c <vTaskResume+0x84>
    3006:	23 2b       	or	r18, r19
    3008:	09 f5       	brne	.+66     	; 0x304c <vTaskResume+0x84>
    300a:	ec 01       	movw	r28, r24
    300c:	8c 01       	movw	r16, r24
    300e:	0e 5f       	subi	r16, 0xFE	; 254
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	c8 01       	movw	r24, r16
    3014:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3018:	8e 89       	ldd	r24, Y+22	; 0x16
    301a:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    301e:	98 17       	cp	r25, r24
    3020:	10 f4       	brcc	.+4      	; 0x3026 <vTaskResume+0x5e>
    3022:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    3026:	29 e0       	ldi	r18, 0x09	; 9
    3028:	82 9f       	mul	r24, r18
    302a:	c0 01       	movw	r24, r0
    302c:	11 24       	eor	r1, r1
    302e:	b8 01       	movw	r22, r16
    3030:	8a 59       	subi	r24, 0x9A	; 154
    3032:	9b 4f       	sbci	r25, 0xFB	; 251
    3034:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    3038:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    303c:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    3040:	9e 89       	ldd	r25, Y+22	; 0x16
    3042:	86 89       	ldd	r24, Z+22	; 0x16
    3044:	98 17       	cp	r25, r24
    3046:	10 f0       	brcs	.+4      	; 0x304c <vTaskResume+0x84>
    3048:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    304c:	0f 90       	pop	r0
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <vTaskStartScheduler>:
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	87 e2       	ldi	r24, 0x27	; 39
    3062:	e8 2e       	mov	r14, r24
    3064:	84 e0       	ldi	r24, 0x04	; 4
    3066:	f8 2e       	mov	r15, r24
    3068:	00 e0       	ldi	r16, 0x00	; 0
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 ec       	ldi	r20, 0xC0	; 192
    3070:	50 e0       	ldi	r21, 0x00	; 0
    3072:	60 e3       	ldi	r22, 0x30	; 48
    3074:	72 e0       	ldi	r23, 0x02	; 2
    3076:	8a ea       	ldi	r24, 0xAA	; 170
    3078:	96 e1       	ldi	r25, 0x16	; 22
    307a:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	b1 f4       	brne	.+44     	; 0x30ae <vTaskStartScheduler+0x54>
    3082:	0e 94 89 1c 	call	0x3912	; 0x3912 <xTimerCreateTimerTask>
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	91 f4       	brne	.+36     	; 0x30ae <vTaskStartScheduler+0x54>
    308a:	f8 94       	cli
    308c:	2f ef       	ldi	r18, 0xFF	; 255
    308e:	3f ef       	ldi	r19, 0xFF	; 255
    3090:	30 93 2a 04 	sts	0x042A, r19	; 0x80042a <xNextTaskUnblockTime+0x1>
    3094:	20 93 29 04 	sts	0x0429, r18	; 0x800429 <xNextTaskUnblockTime>
    3098:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <xSchedulerRunning>
    309c:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <xTickCount+0x1>
    30a0:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <xTickCount>
    30a4:	0f 91       	pop	r16
    30a6:	ff 90       	pop	r15
    30a8:	ef 90       	pop	r14
    30aa:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <xPortStartScheduler>
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	08 95       	ret

000030b6 <vTaskSuspendAll>:
    30b6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    30ba:	8f 5f       	subi	r24, 0xFF	; 255
    30bc:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <uxSchedulerSuspended>
    30c0:	08 95       	ret

000030c2 <xTaskGetTickCount>:
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	0f 92       	push	r0
    30c8:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <xTickCount>
    30cc:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <xTickCount+0x1>
    30d0:	0f 90       	pop	r0
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	08 95       	ret

000030d6 <xTaskIncrementTick>:
    30d6:	cf 92       	push	r12
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    30ea:	81 11       	cpse	r24, r1
    30ec:	8c c0       	rjmp	.+280    	; 0x3206 <xTaskIncrementTick+0x130>
    30ee:	00 91 31 04 	lds	r16, 0x0431	; 0x800431 <xTickCount>
    30f2:	10 91 32 04 	lds	r17, 0x0432	; 0x800432 <xTickCount+0x1>
    30f6:	0f 5f       	subi	r16, 0xFF	; 255
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	10 93 32 04 	sts	0x0432, r17	; 0x800432 <xTickCount+0x1>
    30fe:	00 93 31 04 	sts	0x0431, r16	; 0x800431 <xTickCount>
    3102:	01 15       	cp	r16, r1
    3104:	11 05       	cpc	r17, r1
    3106:	b9 f4       	brne	.+46     	; 0x3136 <xTaskIncrementTick+0x60>
    3108:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <pxDelayedTaskList>
    310c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    3110:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <pxOverflowDelayedTaskList>
    3114:	30 91 51 04 	lds	r19, 0x0451	; 0x800451 <pxOverflowDelayedTaskList+0x1>
    3118:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <pxDelayedTaskList+0x1>
    311c:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <pxDelayedTaskList>
    3120:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <pxOverflowDelayedTaskList+0x1>
    3124:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <pxOverflowDelayedTaskList>
    3128:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <xNumOfOverflows>
    312c:	8f 5f       	subi	r24, 0xFF	; 255
    312e:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <xNumOfOverflows>
    3132:	0e 94 33 16 	call	0x2c66	; 0x2c66 <prvResetNextTaskUnblockTime>
    3136:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <xNextTaskUnblockTime>
    313a:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <xNextTaskUnblockTime+0x1>
    313e:	c0 e0       	ldi	r28, 0x00	; 0
    3140:	08 17       	cp	r16, r24
    3142:	19 07       	cpc	r17, r25
    3144:	08 f4       	brcc	.+2      	; 0x3148 <xTaskIncrementTick+0x72>
    3146:	4f c0       	rjmp	.+158    	; 0x31e6 <xTaskIncrementTick+0x110>
    3148:	d9 e0       	ldi	r29, 0x09	; 9
    314a:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxDelayedTaskList>
    314e:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    3152:	80 81       	ld	r24, Z
    3154:	81 11       	cpse	r24, r1
    3156:	03 c0       	rjmp	.+6      	; 0x315e <xTaskIncrementTick+0x88>
    3158:	8f ef       	ldi	r24, 0xFF	; 255
    315a:	9f ef       	ldi	r25, 0xFF	; 255
    315c:	11 c0       	rjmp	.+34     	; 0x3180 <xTaskIncrementTick+0xaa>
    315e:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <pxDelayedTaskList>
    3162:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <pxDelayedTaskList+0x1>
    3166:	05 80       	ldd	r0, Z+5	; 0x05
    3168:	f6 81       	ldd	r31, Z+6	; 0x06
    316a:	e0 2d       	mov	r30, r0
    316c:	e6 80       	ldd	r14, Z+6	; 0x06
    316e:	f7 80       	ldd	r15, Z+7	; 0x07
    3170:	d7 01       	movw	r26, r14
    3172:	12 96       	adiw	r26, 0x02	; 2
    3174:	8d 91       	ld	r24, X+
    3176:	9c 91       	ld	r25, X
    3178:	13 97       	sbiw	r26, 0x03	; 3
    317a:	08 17       	cp	r16, r24
    317c:	19 07       	cpc	r17, r25
    317e:	28 f4       	brcc	.+10     	; 0x318a <xTaskIncrementTick+0xb4>
    3180:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <xNextTaskUnblockTime+0x1>
    3184:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <xNextTaskUnblockTime>
    3188:	2e c0       	rjmp	.+92     	; 0x31e6 <xTaskIncrementTick+0x110>
    318a:	67 01       	movw	r12, r14
    318c:	b2 e0       	ldi	r27, 0x02	; 2
    318e:	cb 0e       	add	r12, r27
    3190:	d1 1c       	adc	r13, r1
    3192:	c6 01       	movw	r24, r12
    3194:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3198:	f7 01       	movw	r30, r14
    319a:	84 89       	ldd	r24, Z+20	; 0x14
    319c:	95 89       	ldd	r25, Z+21	; 0x15
    319e:	89 2b       	or	r24, r25
    31a0:	21 f0       	breq	.+8      	; 0x31aa <xTaskIncrementTick+0xd4>
    31a2:	c7 01       	movw	r24, r14
    31a4:	0c 96       	adiw	r24, 0x0c	; 12
    31a6:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    31aa:	d7 01       	movw	r26, r14
    31ac:	56 96       	adiw	r26, 0x16	; 22
    31ae:	8c 91       	ld	r24, X
    31b0:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    31b4:	98 17       	cp	r25, r24
    31b6:	10 f4       	brcc	.+4      	; 0x31bc <xTaskIncrementTick+0xe6>
    31b8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    31bc:	d8 9f       	mul	r29, r24
    31be:	c0 01       	movw	r24, r0
    31c0:	11 24       	eor	r1, r1
    31c2:	b6 01       	movw	r22, r12
    31c4:	8a 59       	subi	r24, 0x9A	; 154
    31c6:	9b 4f       	sbci	r25, 0xFB	; 251
    31c8:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    31cc:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    31d0:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    31d4:	d7 01       	movw	r26, r14
    31d6:	56 96       	adiw	r26, 0x16	; 22
    31d8:	9c 91       	ld	r25, X
    31da:	86 89       	ldd	r24, Z+22	; 0x16
    31dc:	98 17       	cp	r25, r24
    31de:	08 f4       	brcc	.+2      	; 0x31e2 <xTaskIncrementTick+0x10c>
    31e0:	b4 cf       	rjmp	.-152    	; 0x314a <xTaskIncrementTick+0x74>
    31e2:	c1 e0       	ldi	r28, 0x01	; 1
    31e4:	b2 cf       	rjmp	.-156    	; 0x314a <xTaskIncrementTick+0x74>
    31e6:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    31ea:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    31ee:	e6 89       	ldd	r30, Z+22	; 0x16
    31f0:	b9 e0       	ldi	r27, 0x09	; 9
    31f2:	eb 9f       	mul	r30, r27
    31f4:	f0 01       	movw	r30, r0
    31f6:	11 24       	eor	r1, r1
    31f8:	ea 59       	subi	r30, 0x9A	; 154
    31fa:	fb 4f       	sbci	r31, 0xFB	; 251
    31fc:	80 81       	ld	r24, Z
    31fe:	82 30       	cpi	r24, 0x02	; 2
    3200:	40 f0       	brcs	.+16     	; 0x3212 <xTaskIncrementTick+0x13c>
    3202:	c1 e0       	ldi	r28, 0x01	; 1
    3204:	06 c0       	rjmp	.+12     	; 0x3212 <xTaskIncrementTick+0x13c>
    3206:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <uxPendedTicks>
    320a:	8f 5f       	subi	r24, 0xFF	; 255
    320c:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <uxPendedTicks>
    3210:	c0 e0       	ldi	r28, 0x00	; 0
    3212:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <xYieldPending>
    3216:	81 11       	cpse	r24, r1
    3218:	c1 e0       	ldi	r28, 0x01	; 1
    321a:	8c 2f       	mov	r24, r28
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	ff 90       	pop	r15
    3226:	ef 90       	pop	r14
    3228:	df 90       	pop	r13
    322a:	cf 90       	pop	r12
    322c:	08 95       	ret

0000322e <xTaskResumeAll>:
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	0f b6       	in	r0, 0x3f	; 63
    323c:	f8 94       	cli
    323e:	0f 92       	push	r0
    3240:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    3244:	81 50       	subi	r24, 0x01	; 1
    3246:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <uxSchedulerSuspended>
    324a:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    324e:	88 23       	and	r24, r24
    3250:	11 f0       	breq	.+4      	; 0x3256 <xTaskResumeAll+0x28>
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	52 c0       	rjmp	.+164    	; 0x32fa <xTaskResumeAll+0xcc>
    3256:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <uxCurrentNumberOfTasks>
    325a:	88 23       	and	r24, r24
    325c:	d1 f3       	breq	.-12     	; 0x3252 <xTaskResumeAll+0x24>
    325e:	c0 e0       	ldi	r28, 0x00	; 0
    3260:	d0 e0       	ldi	r29, 0x00	; 0
    3262:	89 e0       	ldi	r24, 0x09	; 9
    3264:	f8 2e       	mov	r15, r24
    3266:	ee 24       	eor	r14, r14
    3268:	e3 94       	inc	r14
    326a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <xPendingReadyList>
    326e:	88 23       	and	r24, r24
    3270:	51 f1       	breq	.+84     	; 0x32c6 <xTaskResumeAll+0x98>
    3272:	e0 91 4c 04 	lds	r30, 0x044C	; 0x80044c <xPendingReadyList+0x5>
    3276:	f0 91 4d 04 	lds	r31, 0x044D	; 0x80044d <xPendingReadyList+0x6>
    327a:	c6 81       	ldd	r28, Z+6	; 0x06
    327c:	d7 81       	ldd	r29, Z+7	; 0x07
    327e:	ce 01       	movw	r24, r28
    3280:	0c 96       	adiw	r24, 0x0c	; 12
    3282:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3286:	8e 01       	movw	r16, r28
    3288:	0e 5f       	subi	r16, 0xFE	; 254
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	c8 01       	movw	r24, r16
    328e:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3292:	8e 89       	ldd	r24, Y+22	; 0x16
    3294:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    3298:	98 17       	cp	r25, r24
    329a:	10 f4       	brcc	.+4      	; 0x32a0 <xTaskResumeAll+0x72>
    329c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    32a0:	f8 9e       	mul	r15, r24
    32a2:	c0 01       	movw	r24, r0
    32a4:	11 24       	eor	r1, r1
    32a6:	b8 01       	movw	r22, r16
    32a8:	8a 59       	subi	r24, 0x9A	; 154
    32aa:	9b 4f       	sbci	r25, 0xFB	; 251
    32ac:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    32b0:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    32b4:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    32b8:	9e 89       	ldd	r25, Y+22	; 0x16
    32ba:	86 89       	ldd	r24, Z+22	; 0x16
    32bc:	98 17       	cp	r25, r24
    32be:	a8 f2       	brcs	.-86     	; 0x326a <xTaskResumeAll+0x3c>
    32c0:	e0 92 2d 04 	sts	0x042D, r14	; 0x80042d <xYieldPending>
    32c4:	d2 cf       	rjmp	.-92     	; 0x326a <xTaskResumeAll+0x3c>
    32c6:	cd 2b       	or	r28, r29
    32c8:	11 f0       	breq	.+4      	; 0x32ce <xTaskResumeAll+0xa0>
    32ca:	0e 94 33 16 	call	0x2c66	; 0x2c66 <prvResetNextTaskUnblockTime>
    32ce:	c0 91 2e 04 	lds	r28, 0x042E	; 0x80042e <uxPendedTicks>
    32d2:	cc 23       	and	r28, r28
    32d4:	51 f0       	breq	.+20     	; 0x32ea <xTaskResumeAll+0xbc>
    32d6:	d1 e0       	ldi	r29, 0x01	; 1
    32d8:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <xTaskIncrementTick>
    32dc:	81 11       	cpse	r24, r1
    32de:	d0 93 2d 04 	sts	0x042D, r29	; 0x80042d <xYieldPending>
    32e2:	c1 50       	subi	r28, 0x01	; 1
    32e4:	c9 f7       	brne	.-14     	; 0x32d8 <xTaskResumeAll+0xaa>
    32e6:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <uxPendedTicks>
    32ea:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <xYieldPending>
    32ee:	88 23       	and	r24, r24
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <xTaskResumeAll+0xc6>
    32f2:	af cf       	rjmp	.-162    	; 0x3252 <xTaskResumeAll+0x24>
    32f4:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	0f 90       	pop	r0
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	1f 91       	pop	r17
    3304:	0f 91       	pop	r16
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	08 95       	ret

0000330c <vTaskDelayUntil>:
    330c:	0f 93       	push	r16
    330e:	1f 93       	push	r17
    3310:	cf 93       	push	r28
    3312:	df 93       	push	r29
    3314:	8c 01       	movw	r16, r24
    3316:	eb 01       	movw	r28, r22
    3318:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    331c:	40 91 31 04 	lds	r20, 0x0431	; 0x800431 <xTickCount>
    3320:	50 91 32 04 	lds	r21, 0x0432	; 0x800432 <xTickCount+0x1>
    3324:	f8 01       	movw	r30, r16
    3326:	20 81       	ld	r18, Z
    3328:	31 81       	ldd	r19, Z+1	; 0x01
    332a:	c9 01       	movw	r24, r18
    332c:	8c 0f       	add	r24, r28
    332e:	9d 1f       	adc	r25, r29
    3330:	42 17       	cp	r20, r18
    3332:	53 07       	cpc	r21, r19
    3334:	20 f4       	brcc	.+8      	; 0x333e <vTaskDelayUntil+0x32>
    3336:	82 17       	cp	r24, r18
    3338:	93 07       	cpc	r25, r19
    333a:	40 f4       	brcc	.+16     	; 0x334c <vTaskDelayUntil+0x40>
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <vTaskDelayUntil+0x38>
    333e:	82 17       	cp	r24, r18
    3340:	93 07       	cpc	r25, r19
    3342:	30 f0       	brcs	.+12     	; 0x3350 <vTaskDelayUntil+0x44>
    3344:	21 e0       	ldi	r18, 0x01	; 1
    3346:	48 17       	cp	r20, r24
    3348:	59 07       	cpc	r21, r25
    334a:	18 f0       	brcs	.+6      	; 0x3352 <vTaskDelayUntil+0x46>
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <vTaskDelayUntil+0x46>
    3350:	21 e0       	ldi	r18, 0x01	; 1
    3352:	f8 01       	movw	r30, r16
    3354:	91 83       	std	Z+1, r25	; 0x01
    3356:	80 83       	st	Z, r24
    3358:	22 23       	and	r18, r18
    335a:	29 f0       	breq	.+10     	; 0x3366 <vTaskDelayUntil+0x5a>
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	84 1b       	sub	r24, r20
    3360:	95 0b       	sbc	r25, r21
    3362:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <prvAddCurrentTaskToDelayedList>
    3366:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    336a:	81 11       	cpse	r24, r1
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <vTaskDelayUntil+0x66>
    336e:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    3372:	df 91       	pop	r29
    3374:	cf 91       	pop	r28
    3376:	1f 91       	pop	r17
    3378:	0f 91       	pop	r16
    337a:	08 95       	ret

0000337c <vTaskDelay>:
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	ec 01       	movw	r28, r24
    3382:	89 2b       	or	r24, r25
    3384:	19 f4       	brne	.+6      	; 0x338c <vTaskDelay+0x10>
    3386:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    338a:	0a c0       	rjmp	.+20     	; 0x33a0 <vTaskDelay+0x24>
    338c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	ce 01       	movw	r24, r28
    3394:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <prvAddCurrentTaskToDelayedList>
    3398:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    339c:	88 23       	and	r24, r24
    339e:	99 f3       	breq	.-26     	; 0x3386 <vTaskDelay+0xa>
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <vTaskSwitchContext>:
    33a6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    33aa:	88 23       	and	r24, r24
    33ac:	21 f0       	breq	.+8      	; 0x33b6 <vTaskSwitchContext+0x10>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <xYieldPending>
    33b4:	08 95       	ret
    33b6:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <xYieldPending>
    33ba:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    33be:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    33c2:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    33c6:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    33ca:	2d 91       	ld	r18, X+
    33cc:	3c 91       	ld	r19, X
    33ce:	87 89       	ldd	r24, Z+23	; 0x17
    33d0:	90 8d       	ldd	r25, Z+24	; 0x18
    33d2:	82 17       	cp	r24, r18
    33d4:	93 07       	cpc	r25, r19
    33d6:	60 f0       	brcs	.+24     	; 0x33f0 <vTaskSwitchContext+0x4a>
    33d8:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <pxCurrentTCB>
    33dc:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    33e0:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    33e4:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    33e8:	67 5e       	subi	r22, 0xE7	; 231
    33ea:	7f 4f       	sbci	r23, 0xFF	; 255
    33ec:	0e 94 57 1e 	call	0x3cae	; 0x3cae <vApplicationStackOverflowHook>
    33f0:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <uxTopReadyPriority>
    33f4:	69 e0       	ldi	r22, 0x09	; 9
    33f6:	48 2f       	mov	r20, r24
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	64 9f       	mul	r22, r20
    33fc:	90 01       	movw	r18, r0
    33fe:	65 9f       	mul	r22, r21
    3400:	30 0d       	add	r19, r0
    3402:	11 24       	eor	r1, r1
    3404:	f9 01       	movw	r30, r18
    3406:	ea 59       	subi	r30, 0x9A	; 154
    3408:	fb 4f       	sbci	r31, 0xFB	; 251
    340a:	90 81       	ld	r25, Z
    340c:	91 11       	cpse	r25, r1
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <vTaskSwitchContext+0x6e>
    3410:	81 50       	subi	r24, 0x01	; 1
    3412:	f1 cf       	rjmp	.-30     	; 0x33f6 <vTaskSwitchContext+0x50>
    3414:	a1 81       	ldd	r26, Z+1	; 0x01
    3416:	b2 81       	ldd	r27, Z+2	; 0x02
    3418:	12 96       	adiw	r26, 0x02	; 2
    341a:	0d 90       	ld	r0, X+
    341c:	bc 91       	ld	r27, X
    341e:	a0 2d       	mov	r26, r0
    3420:	b2 83       	std	Z+2, r27	; 0x02
    3422:	a1 83       	std	Z+1, r26	; 0x01
    3424:	27 59       	subi	r18, 0x97	; 151
    3426:	3b 4f       	sbci	r19, 0xFB	; 251
    3428:	a2 17       	cp	r26, r18
    342a:	b3 07       	cpc	r27, r19
    342c:	31 f4       	brne	.+12     	; 0x343a <vTaskSwitchContext+0x94>
    342e:	12 96       	adiw	r26, 0x02	; 2
    3430:	2d 91       	ld	r18, X+
    3432:	3c 91       	ld	r19, X
    3434:	13 97       	sbiw	r26, 0x03	; 3
    3436:	32 83       	std	Z+2, r19	; 0x02
    3438:	21 83       	std	Z+1, r18	; 0x01
    343a:	99 e0       	ldi	r25, 0x09	; 9
    343c:	94 9f       	mul	r25, r20
    343e:	f0 01       	movw	r30, r0
    3440:	95 9f       	mul	r25, r21
    3442:	f0 0d       	add	r31, r0
    3444:	11 24       	eor	r1, r1
    3446:	ea 59       	subi	r30, 0x9A	; 154
    3448:	fb 4f       	sbci	r31, 0xFB	; 251
    344a:	01 80       	ldd	r0, Z+1	; 0x01
    344c:	f2 81       	ldd	r31, Z+2	; 0x02
    344e:	e0 2d       	mov	r30, r0
    3450:	26 81       	ldd	r18, Z+6	; 0x06
    3452:	37 81       	ldd	r19, Z+7	; 0x07
    3454:	30 93 8b 04 	sts	0x048B, r19	; 0x80048b <pxCurrentTCB+0x1>
    3458:	20 93 8a 04 	sts	0x048A, r18	; 0x80048a <pxCurrentTCB>
    345c:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    3460:	08 95       	ret

00003462 <vTaskSuspend>:
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	ec 01       	movw	r28, r24
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	0f 92       	push	r0
    3472:	89 2b       	or	r24, r25
    3474:	21 f4       	brne	.+8      	; 0x347e <vTaskSuspend+0x1c>
    3476:	c0 91 8a 04 	lds	r28, 0x048A	; 0x80048a <pxCurrentTCB>
    347a:	d0 91 8b 04 	lds	r29, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    347e:	8e 01       	movw	r16, r28
    3480:	0e 5f       	subi	r16, 0xFE	; 254
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	c8 01       	movw	r24, r16
    3486:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    348a:	8c 89       	ldd	r24, Y+20	; 0x14
    348c:	9d 89       	ldd	r25, Y+21	; 0x15
    348e:	89 2b       	or	r24, r25
    3490:	21 f0       	breq	.+8      	; 0x349a <vTaskSuspend+0x38>
    3492:	ce 01       	movw	r24, r28
    3494:	0c 96       	adiw	r24, 0x0c	; 12
    3496:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    349a:	b8 01       	movw	r22, r16
    349c:	84 e3       	ldi	r24, 0x34	; 52
    349e:	94 e0       	ldi	r25, 0x04	; 4
    34a0:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    34a4:	8f a1       	ldd	r24, Y+39	; 0x27
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	09 f4       	brne	.+2      	; 0x34ac <vTaskSuspend+0x4a>
    34aa:	1f a2       	std	Y+39, r1	; 0x27
    34ac:	0f 90       	pop	r0
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <xSchedulerRunning>
    34b4:	88 23       	and	r24, r24
    34b6:	39 f0       	breq	.+14     	; 0x34c6 <vTaskSuspend+0x64>
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	0f 92       	push	r0
    34be:	0e 94 33 16 	call	0x2c66	; 0x2c66 <prvResetNextTaskUnblockTime>
    34c2:	0f 90       	pop	r0
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    34ca:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    34ce:	c8 17       	cp	r28, r24
    34d0:	d9 07       	cpc	r29, r25
    34d2:	c1 f4       	brne	.+48     	; 0x3504 <vTaskSuspend+0xa2>
    34d4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <xSchedulerRunning>
    34d8:	88 23       	and	r24, r24
    34da:	19 f0       	breq	.+6      	; 0x34e2 <vTaskSuspend+0x80>
    34dc:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    34e0:	11 c0       	rjmp	.+34     	; 0x3504 <vTaskSuspend+0xa2>
    34e2:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <xSuspendedTaskList>
    34e6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <uxCurrentNumberOfTasks>
    34ea:	98 13       	cpse	r25, r24
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <vTaskSuspend+0x96>
    34ee:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <pxCurrentTCB+0x1>
    34f2:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <pxCurrentTCB>
    34f6:	06 c0       	rjmp	.+12     	; 0x3504 <vTaskSuspend+0xa2>
    34f8:	df 91       	pop	r29
    34fa:	cf 91       	pop	r28
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <vTaskSwitchContext>
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	08 95       	ret

0000350e <vTaskPlaceOnEventList>:
    350e:	cf 93       	push	r28
    3510:	df 93       	push	r29
    3512:	eb 01       	movw	r28, r22
    3514:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <pxCurrentTCB>
    3518:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    351c:	64 5f       	subi	r22, 0xF4	; 244
    351e:	7f 4f       	sbci	r23, 0xFF	; 255
    3520:	0e 94 37 20 	call	0x406e	; 0x406e <vListInsert>
    3524:	61 e0       	ldi	r22, 0x01	; 1
    3526:	ce 01       	movw	r24, r28
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <prvAddCurrentTaskToDelayedList>

00003530 <vTaskPlaceOnEventListRestricted>:
    3530:	1f 93       	push	r17
    3532:	cf 93       	push	r28
    3534:	df 93       	push	r29
    3536:	eb 01       	movw	r28, r22
    3538:	14 2f       	mov	r17, r20
    353a:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <pxCurrentTCB>
    353e:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    3542:	64 5f       	subi	r22, 0xF4	; 244
    3544:	7f 4f       	sbci	r23, 0xFF	; 255
    3546:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    354a:	11 23       	and	r17, r17
    354c:	11 f0       	breq	.+4      	; 0x3552 <vTaskPlaceOnEventListRestricted+0x22>
    354e:	cf ef       	ldi	r28, 0xFF	; 255
    3550:	df ef       	ldi	r29, 0xFF	; 255
    3552:	61 2f       	mov	r22, r17
    3554:	ce 01       	movw	r24, r28
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <prvAddCurrentTaskToDelayedList>

00003560 <xTaskRemoveFromEventList>:
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	dc 01       	movw	r26, r24
    356a:	15 96       	adiw	r26, 0x05	; 5
    356c:	ed 91       	ld	r30, X+
    356e:	fc 91       	ld	r31, X
    3570:	16 97       	sbiw	r26, 0x06	; 6
    3572:	c6 81       	ldd	r28, Z+6	; 0x06
    3574:	d7 81       	ldd	r29, Z+7	; 0x07
    3576:	8e 01       	movw	r16, r28
    3578:	04 5f       	subi	r16, 0xF4	; 244
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	c8 01       	movw	r24, r16
    357e:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3582:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    3586:	81 11       	cpse	r24, r1
    3588:	14 c0       	rjmp	.+40     	; 0x35b2 <xTaskRemoveFromEventList+0x52>
    358a:	0a 50       	subi	r16, 0x0A	; 10
    358c:	11 09       	sbc	r17, r1
    358e:	c8 01       	movw	r24, r16
    3590:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3594:	8e 89       	ldd	r24, Y+22	; 0x16
    3596:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    359a:	98 17       	cp	r25, r24
    359c:	10 f4       	brcc	.+4      	; 0x35a2 <xTaskRemoveFromEventList+0x42>
    359e:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    35a2:	b9 e0       	ldi	r27, 0x09	; 9
    35a4:	8b 9f       	mul	r24, r27
    35a6:	c0 01       	movw	r24, r0
    35a8:	11 24       	eor	r1, r1
    35aa:	b8 01       	movw	r22, r16
    35ac:	8a 59       	subi	r24, 0x9A	; 154
    35ae:	9b 4f       	sbci	r25, 0xFB	; 251
    35b0:	03 c0       	rjmp	.+6      	; 0x35b8 <xTaskRemoveFromEventList+0x58>
    35b2:	b8 01       	movw	r22, r16
    35b4:	87 e4       	ldi	r24, 0x47	; 71
    35b6:	94 e0       	ldi	r25, 0x04	; 4
    35b8:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    35bc:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    35c0:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    35c4:	9e 89       	ldd	r25, Y+22	; 0x16
    35c6:	86 89       	ldd	r24, Z+22	; 0x16
    35c8:	89 17       	cp	r24, r25
    35ca:	20 f4       	brcc	.+8      	; 0x35d4 <xTaskRemoveFromEventList+0x74>
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <xYieldPending>
    35d2:	01 c0       	rjmp	.+2      	; 0x35d6 <xTaskRemoveFromEventList+0x76>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	df 91       	pop	r29
    35d8:	cf 91       	pop	r28
    35da:	1f 91       	pop	r17
    35dc:	0f 91       	pop	r16
    35de:	08 95       	ret

000035e0 <vTaskInternalSetTimeOutState>:
    35e0:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <xNumOfOverflows>
    35e4:	fc 01       	movw	r30, r24
    35e6:	20 83       	st	Z, r18
    35e8:	20 91 31 04 	lds	r18, 0x0431	; 0x800431 <xTickCount>
    35ec:	30 91 32 04 	lds	r19, 0x0432	; 0x800432 <xTickCount+0x1>
    35f0:	32 83       	std	Z+2, r19	; 0x02
    35f2:	21 83       	std	Z+1, r18	; 0x01
    35f4:	08 95       	ret

000035f6 <xTaskCheckForTimeOut>:
    35f6:	cf 93       	push	r28
    35f8:	df 93       	push	r29
    35fa:	0f b6       	in	r0, 0x3f	; 63
    35fc:	f8 94       	cli
    35fe:	0f 92       	push	r0
    3600:	40 91 31 04 	lds	r20, 0x0431	; 0x800431 <xTickCount>
    3604:	50 91 32 04 	lds	r21, 0x0432	; 0x800432 <xTickCount+0x1>
    3608:	db 01       	movw	r26, r22
    360a:	2d 91       	ld	r18, X+
    360c:	3c 91       	ld	r19, X
    360e:	2f 3f       	cpi	r18, 0xFF	; 255
    3610:	bf ef       	ldi	r27, 0xFF	; 255
    3612:	3b 07       	cpc	r19, r27
    3614:	d9 f0       	breq	.+54     	; 0x364c <xTaskCheckForTimeOut+0x56>
    3616:	ec 01       	movw	r28, r24
    3618:	e9 81       	ldd	r30, Y+1	; 0x01
    361a:	fa 81       	ldd	r31, Y+2	; 0x02
    361c:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <xNumOfOverflows>
    3620:	b8 81       	ld	r27, Y
    3622:	ba 17       	cp	r27, r26
    3624:	19 f0       	breq	.+6      	; 0x362c <xTaskCheckForTimeOut+0x36>
    3626:	4e 17       	cp	r20, r30
    3628:	5f 07       	cpc	r21, r31
    362a:	90 f4       	brcc	.+36     	; 0x3650 <xTaskCheckForTimeOut+0x5a>
    362c:	4e 1b       	sub	r20, r30
    362e:	5f 0b       	sbc	r21, r31
    3630:	fb 01       	movw	r30, r22
    3632:	42 17       	cp	r20, r18
    3634:	53 07       	cpc	r21, r19
    3636:	38 f4       	brcc	.+14     	; 0x3646 <xTaskCheckForTimeOut+0x50>
    3638:	24 1b       	sub	r18, r20
    363a:	35 0b       	sbc	r19, r21
    363c:	31 83       	std	Z+1, r19	; 0x01
    363e:	20 83       	st	Z, r18
    3640:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <vTaskInternalSetTimeOutState>
    3644:	03 c0       	rjmp	.+6      	; 0x364c <xTaskCheckForTimeOut+0x56>
    3646:	11 82       	std	Z+1, r1	; 0x01
    3648:	10 82       	st	Z, r1
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <xTaskCheckForTimeOut+0x5a>
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	01 c0       	rjmp	.+2      	; 0x3652 <xTaskCheckForTimeOut+0x5c>
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	0f 90       	pop	r0
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	08 95       	ret

0000365c <vTaskMissedYield>:
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <xYieldPending>
    3662:	08 95       	ret

00003664 <xTaskGetSchedulerState>:
    3664:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <xSchedulerRunning>
    3668:	88 23       	and	r24, r24
    366a:	31 f0       	breq	.+12     	; 0x3678 <xTaskGetSchedulerState+0x14>
    366c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <uxSchedulerSuspended>
    3670:	88 23       	and	r24, r24
    3672:	21 f0       	breq	.+8      	; 0x367c <xTaskGetSchedulerState+0x18>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	08 95       	ret
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	08 95       	ret
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	08 95       	ret

00003680 <xTaskPriorityInherit>:
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	fc 01       	movw	r30, r24
    368a:	89 2b       	or	r24, r25
    368c:	09 f4       	brne	.+2      	; 0x3690 <xTaskPriorityInherit+0x10>
    368e:	55 c0       	rjmp	.+170    	; 0x373a <xTaskPriorityInherit+0xba>
    3690:	86 89       	ldd	r24, Z+22	; 0x16
    3692:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    3696:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    369a:	56 96       	adiw	r26, 0x16	; 22
    369c:	9c 91       	ld	r25, X
    369e:	89 17       	cp	r24, r25
    36a0:	08 f0       	brcs	.+2      	; 0x36a4 <xTaskPriorityInherit+0x24>
    36a2:	41 c0       	rjmp	.+130    	; 0x3726 <xTaskPriorityInherit+0xa6>
    36a4:	24 85       	ldd	r18, Z+12	; 0x0c
    36a6:	35 85       	ldd	r19, Z+13	; 0x0d
    36a8:	37 fd       	sbrc	r19, 7
    36aa:	0c c0       	rjmp	.+24     	; 0x36c4 <xTaskPriorityInherit+0x44>
    36ac:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    36b0:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    36b4:	56 96       	adiw	r26, 0x16	; 22
    36b6:	9c 91       	ld	r25, X
    36b8:	24 e0       	ldi	r18, 0x04	; 4
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	29 1b       	sub	r18, r25
    36be:	31 09       	sbc	r19, r1
    36c0:	35 87       	std	Z+13, r19	; 0x0d
    36c2:	24 87       	std	Z+12, r18	; 0x0c
    36c4:	29 e0       	ldi	r18, 0x09	; 9
    36c6:	82 9f       	mul	r24, r18
    36c8:	c0 01       	movw	r24, r0
    36ca:	11 24       	eor	r1, r1
    36cc:	8a 59       	subi	r24, 0x9A	; 154
    36ce:	9b 4f       	sbci	r25, 0xFB	; 251
    36d0:	22 85       	ldd	r18, Z+10	; 0x0a
    36d2:	33 85       	ldd	r19, Z+11	; 0x0b
    36d4:	28 17       	cp	r18, r24
    36d6:	39 07       	cpc	r19, r25
    36d8:	e9 f4       	brne	.+58     	; 0x3714 <xTaskPriorityInherit+0x94>
    36da:	8f 01       	movw	r16, r30
    36dc:	ef 01       	movw	r28, r30
    36de:	22 96       	adiw	r28, 0x02	; 2
    36e0:	ce 01       	movw	r24, r28
    36e2:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    36e6:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    36ea:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    36ee:	86 89       	ldd	r24, Z+22	; 0x16
    36f0:	f8 01       	movw	r30, r16
    36f2:	86 8b       	std	Z+22, r24	; 0x16
    36f4:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    36f8:	98 17       	cp	r25, r24
    36fa:	10 f4       	brcc	.+4      	; 0x3700 <xTaskPriorityInherit+0x80>
    36fc:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    3700:	f9 e0       	ldi	r31, 0x09	; 9
    3702:	8f 9f       	mul	r24, r31
    3704:	c0 01       	movw	r24, r0
    3706:	11 24       	eor	r1, r1
    3708:	be 01       	movw	r22, r28
    370a:	8a 59       	subi	r24, 0x9A	; 154
    370c:	9b 4f       	sbci	r25, 0xFB	; 251
    370e:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    3712:	07 c0       	rjmp	.+14     	; 0x3722 <xTaskPriorityInherit+0xa2>
    3714:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    3718:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    371c:	56 96       	adiw	r26, 0x16	; 22
    371e:	8c 91       	ld	r24, X
    3720:	86 8b       	std	Z+22, r24	; 0x16
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	0b c0       	rjmp	.+22     	; 0x373c <xTaskPriorityInherit+0xbc>
    3726:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    372a:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	21 a1       	ldd	r18, Z+33	; 0x21
    3732:	56 96       	adiw	r26, 0x16	; 22
    3734:	9c 91       	ld	r25, X
    3736:	29 17       	cp	r18, r25
    3738:	08 f0       	brcs	.+2      	; 0x373c <xTaskPriorityInherit+0xbc>
    373a:	80 e0       	ldi	r24, 0x00	; 0
    373c:	df 91       	pop	r29
    373e:	cf 91       	pop	r28
    3740:	1f 91       	pop	r17
    3742:	0f 91       	pop	r16
    3744:	08 95       	ret

00003746 <xTaskPriorityDisinherit>:
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	fc 01       	movw	r30, r24
    3750:	89 2b       	or	r24, r25
    3752:	11 f4       	brne	.+4      	; 0x3758 <xTaskPriorityDisinherit+0x12>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	2c c0       	rjmp	.+88     	; 0x37b0 <xTaskPriorityDisinherit+0x6a>
    3758:	82 a1       	ldd	r24, Z+34	; 0x22
    375a:	81 50       	subi	r24, 0x01	; 1
    375c:	82 a3       	std	Z+34, r24	; 0x22
    375e:	26 89       	ldd	r18, Z+22	; 0x16
    3760:	91 a1       	ldd	r25, Z+33	; 0x21
    3762:	29 17       	cp	r18, r25
    3764:	b9 f3       	breq	.-18     	; 0x3754 <xTaskPriorityDisinherit+0xe>
    3766:	81 11       	cpse	r24, r1
    3768:	f5 cf       	rjmp	.-22     	; 0x3754 <xTaskPriorityDisinherit+0xe>
    376a:	ef 01       	movw	r28, r30
    376c:	8f 01       	movw	r16, r30
    376e:	0e 5f       	subi	r16, 0xFE	; 254
    3770:	1f 4f       	sbci	r17, 0xFF	; 255
    3772:	c8 01       	movw	r24, r16
    3774:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3778:	89 a1       	ldd	r24, Y+33	; 0x21
    377a:	8e 8b       	std	Y+22, r24	; 0x16
    377c:	48 2f       	mov	r20, r24
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	24 e0       	ldi	r18, 0x04	; 4
    3782:	30 e0       	ldi	r19, 0x00	; 0
    3784:	24 1b       	sub	r18, r20
    3786:	35 0b       	sbc	r19, r21
    3788:	3d 87       	std	Y+13, r19	; 0x0d
    378a:	2c 87       	std	Y+12, r18	; 0x0c
    378c:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    3790:	98 17       	cp	r25, r24
    3792:	10 f4       	brcc	.+4      	; 0x3798 <xTaskPriorityDisinherit+0x52>
    3794:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    3798:	29 e0       	ldi	r18, 0x09	; 9
    379a:	24 9f       	mul	r18, r20
    379c:	c0 01       	movw	r24, r0
    379e:	25 9f       	mul	r18, r21
    37a0:	90 0d       	add	r25, r0
    37a2:	11 24       	eor	r1, r1
    37a4:	b8 01       	movw	r22, r16
    37a6:	8a 59       	subi	r24, 0x9A	; 154
    37a8:	9b 4f       	sbci	r25, 0xFB	; 251
    37aa:	0e 94 16 20 	call	0x402c	; 0x402c <vListInsertEnd>
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

000037ba <vTaskPriorityDisinheritAfterTimeout>:
    37ba:	0f 93       	push	r16
    37bc:	1f 93       	push	r17
    37be:	cf 93       	push	r28
    37c0:	df 93       	push	r29
    37c2:	fc 01       	movw	r30, r24
    37c4:	89 2b       	or	r24, r25
    37c6:	d9 f1       	breq	.+118    	; 0x383e <vTaskPriorityDisinheritAfterTimeout+0x84>
    37c8:	91 a1       	ldd	r25, Z+33	; 0x21
    37ca:	96 17       	cp	r25, r22
    37cc:	08 f4       	brcc	.+2      	; 0x37d0 <vTaskPriorityDisinheritAfterTimeout+0x16>
    37ce:	96 2f       	mov	r25, r22
    37d0:	86 89       	ldd	r24, Z+22	; 0x16
    37d2:	89 17       	cp	r24, r25
    37d4:	a1 f1       	breq	.+104    	; 0x383e <vTaskPriorityDisinheritAfterTimeout+0x84>
    37d6:	22 a1       	ldd	r18, Z+34	; 0x22
    37d8:	21 30       	cpi	r18, 0x01	; 1
    37da:	89 f5       	brne	.+98     	; 0x383e <vTaskPriorityDisinheritAfterTimeout+0x84>
    37dc:	96 8b       	std	Z+22, r25	; 0x16
    37de:	24 85       	ldd	r18, Z+12	; 0x0c
    37e0:	35 85       	ldd	r19, Z+13	; 0x0d
    37e2:	37 fd       	sbrc	r19, 7
    37e4:	06 c0       	rjmp	.+12     	; 0x37f2 <vTaskPriorityDisinheritAfterTimeout+0x38>
    37e6:	24 e0       	ldi	r18, 0x04	; 4
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	29 1b       	sub	r18, r25
    37ec:	31 09       	sbc	r19, r1
    37ee:	35 87       	std	Z+13, r19	; 0x0d
    37f0:	24 87       	std	Z+12, r18	; 0x0c
    37f2:	29 e0       	ldi	r18, 0x09	; 9
    37f4:	82 9f       	mul	r24, r18
    37f6:	c0 01       	movw	r24, r0
    37f8:	11 24       	eor	r1, r1
    37fa:	8a 59       	subi	r24, 0x9A	; 154
    37fc:	9b 4f       	sbci	r25, 0xFB	; 251
    37fe:	22 85       	ldd	r18, Z+10	; 0x0a
    3800:	33 85       	ldd	r19, Z+11	; 0x0b
    3802:	28 17       	cp	r18, r24
    3804:	39 07       	cpc	r19, r25
    3806:	d9 f4       	brne	.+54     	; 0x383e <vTaskPriorityDisinheritAfterTimeout+0x84>
    3808:	ef 01       	movw	r28, r30
    380a:	8f 01       	movw	r16, r30
    380c:	0e 5f       	subi	r16, 0xFE	; 254
    380e:	1f 4f       	sbci	r17, 0xFF	; 255
    3810:	c8 01       	movw	r24, r16
    3812:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3816:	8e 89       	ldd	r24, Y+22	; 0x16
    3818:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <uxTopReadyPriority>
    381c:	98 17       	cp	r25, r24
    381e:	10 f4       	brcc	.+4      	; 0x3824 <vTaskPriorityDisinheritAfterTimeout+0x6a>
    3820:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <uxTopReadyPriority>
    3824:	29 e0       	ldi	r18, 0x09	; 9
    3826:	82 9f       	mul	r24, r18
    3828:	c0 01       	movw	r24, r0
    382a:	11 24       	eor	r1, r1
    382c:	b8 01       	movw	r22, r16
    382e:	8a 59       	subi	r24, 0x9A	; 154
    3830:	9b 4f       	sbci	r25, 0xFB	; 251
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	0c 94 16 20 	jmp	0x402c	; 0x402c <vListInsertEnd>
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	08 95       	ret

00003848 <pvTaskIncrementMutexHeldCount>:
    3848:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    384c:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    3850:	89 2b       	or	r24, r25
    3852:	39 f0       	breq	.+14     	; 0x3862 <pvTaskIncrementMutexHeldCount+0x1a>
    3854:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <pxCurrentTCB>
    3858:	f0 91 8b 04 	lds	r31, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    385c:	82 a1       	ldd	r24, Z+34	; 0x22
    385e:	8f 5f       	subi	r24, 0xFF	; 255
    3860:	82 a3       	std	Z+34, r24	; 0x22
    3862:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <pxCurrentTCB>
    3866:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    386a:	08 95       	ret

0000386c <prvCheckForValidListAndQueue>:
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	0f 92       	push	r0
    3872:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <xTimerQueue>
    3876:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <xTimerQueue+0x1>
    387a:	89 2b       	or	r24, r25
    387c:	e9 f4       	brne	.+58     	; 0x38b8 <prvCheckForValidListAndQueue+0x4c>
    387e:	8f e9       	ldi	r24, 0x9F	; 159
    3880:	94 e0       	ldi	r25, 0x04	; 4
    3882:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    3886:	86 e9       	ldi	r24, 0x96	; 150
    3888:	94 e0       	ldi	r25, 0x04	; 4
    388a:	0e 94 04 20 	call	0x4008	; 0x4008 <vListInitialise>
    388e:	8f e9       	ldi	r24, 0x9F	; 159
    3890:	94 e0       	ldi	r25, 0x04	; 4
    3892:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <pxCurrentTimerList+0x1>
    3896:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <pxCurrentTimerList>
    389a:	86 e9       	ldi	r24, 0x96	; 150
    389c:	94 e0       	ldi	r25, 0x04	; 4
    389e:	90 93 93 04 	sts	0x0493, r25	; 0x800493 <pxOverflowTimerList+0x1>
    38a2:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <pxOverflowTimerList>
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	65 e0       	ldi	r22, 0x05	; 5
    38aa:	8a e0       	ldi	r24, 0x0A	; 10
    38ac:	0e 94 d6 13 	call	0x27ac	; 0x27ac <xQueueGenericCreate>
    38b0:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <xTimerQueue+0x1>
    38b4:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <xTimerQueue>
    38b8:	0f 90       	pop	r0
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	08 95       	ret

000038be <prvInsertTimerInActiveList>:
    38be:	fc 01       	movw	r30, r24
    38c0:	73 83       	std	Z+3, r23	; 0x03
    38c2:	62 83       	std	Z+2, r22	; 0x02
    38c4:	91 87       	std	Z+9, r25	; 0x09
    38c6:	80 87       	std	Z+8, r24	; 0x08
    38c8:	46 17       	cp	r20, r22
    38ca:	57 07       	cpc	r21, r23
    38cc:	78 f0       	brcs	.+30     	; 0x38ec <prvInsertTimerInActiveList+0x2e>
    38ce:	42 1b       	sub	r20, r18
    38d0:	53 0b       	sbc	r21, r19
    38d2:	84 85       	ldd	r24, Z+12	; 0x0c
    38d4:	95 85       	ldd	r25, Z+13	; 0x0d
    38d6:	48 17       	cp	r20, r24
    38d8:	59 07       	cpc	r21, r25
    38da:	c8 f4       	brcc	.+50     	; 0x390e <prvInsertTimerInActiveList+0x50>
    38dc:	bf 01       	movw	r22, r30
    38de:	6e 5f       	subi	r22, 0xFE	; 254
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <pxOverflowTimerList>
    38e6:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <pxOverflowTimerList+0x1>
    38ea:	0d c0       	rjmp	.+26     	; 0x3906 <prvInsertTimerInActiveList+0x48>
    38ec:	42 17       	cp	r20, r18
    38ee:	53 07       	cpc	r21, r19
    38f0:	18 f4       	brcc	.+6      	; 0x38f8 <prvInsertTimerInActiveList+0x3a>
    38f2:	62 17       	cp	r22, r18
    38f4:	73 07       	cpc	r23, r19
    38f6:	58 f4       	brcc	.+22     	; 0x390e <prvInsertTimerInActiveList+0x50>
    38f8:	bf 01       	movw	r22, r30
    38fa:	6e 5f       	subi	r22, 0xFE	; 254
    38fc:	7f 4f       	sbci	r23, 0xFF	; 255
    38fe:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <pxCurrentTimerList>
    3902:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <pxCurrentTimerList+0x1>
    3906:	0e 94 37 20 	call	0x406e	; 0x406e <vListInsert>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	08 95       	ret
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	08 95       	ret

00003912 <xTimerCreateTimerTask>:
    3912:	ef 92       	push	r14
    3914:	ff 92       	push	r15
    3916:	0f 93       	push	r16
    3918:	0e 94 36 1c 	call	0x386c	; 0x386c <prvCheckForValidListAndQueue>
    391c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <xTimerQueue>
    3920:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <xTimerQueue+0x1>
    3924:	89 2b       	or	r24, r25
    3926:	81 f0       	breq	.+32     	; 0x3948 <xTimerCreateTimerTask+0x36>
    3928:	8e e8       	ldi	r24, 0x8E	; 142
    392a:	e8 2e       	mov	r14, r24
    392c:	84 e0       	ldi	r24, 0x04	; 4
    392e:	f8 2e       	mov	r15, r24
    3930:	03 e0       	ldi	r16, 0x03	; 3
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	45 e5       	ldi	r20, 0x55	; 85
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	65 e3       	ldi	r22, 0x35	; 53
    393c:	72 e0       	ldi	r23, 0x02	; 2
    393e:	89 e3       	ldi	r24, 0x39	; 57
    3940:	9d e1       	ldi	r25, 0x1D	; 29
    3942:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <xTaskCreate>
    3946:	01 c0       	rjmp	.+2      	; 0x394a <xTimerCreateTimerTask+0x38>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	0f 91       	pop	r16
    394c:	ff 90       	pop	r15
    394e:	ef 90       	pop	r14
    3950:	08 95       	ret

00003952 <xTimerGenericCommand>:
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	00 d0       	rcall	.+0      	; 0x395c <xTimerGenericCommand+0xa>
    395c:	00 d0       	rcall	.+0      	; 0x395e <xTimerGenericCommand+0xc>
    395e:	1f 92       	push	r1
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <xTimerQueue>
    3968:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <xTimerQueue+0x1>
    396c:	10 97       	sbiw	r26, 0x00	; 0
    396e:	29 f1       	breq	.+74     	; 0x39ba <xTimerGenericCommand+0x68>
    3970:	f9 01       	movw	r30, r18
    3972:	69 83       	std	Y+1, r22	; 0x01
    3974:	5b 83       	std	Y+3, r21	; 0x03
    3976:	4a 83       	std	Y+2, r20	; 0x02
    3978:	9d 83       	std	Y+5, r25	; 0x05
    397a:	8c 83       	std	Y+4, r24	; 0x04
    397c:	66 30       	cpi	r22, 0x06	; 6
    397e:	a4 f4       	brge	.+40     	; 0x39a8 <xTimerGenericCommand+0x56>
    3980:	0e 94 32 1b 	call	0x3664	; 0x3664 <xTaskGetSchedulerState>
    3984:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <xTimerQueue>
    3988:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <xTimerQueue+0x1>
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	82 30       	cpi	r24, 0x02	; 2
    3990:	11 f4       	brne	.+4      	; 0x3996 <xTimerGenericCommand+0x44>
    3992:	a8 01       	movw	r20, r16
    3994:	02 c0       	rjmp	.+4      	; 0x399a <xTimerGenericCommand+0x48>
    3996:	40 e0       	ldi	r20, 0x00	; 0
    3998:	50 e0       	ldi	r21, 0x00	; 0
    399a:	be 01       	movw	r22, r28
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	cf 01       	movw	r24, r30
    39a2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <xQueueGenericSend>
    39a6:	0a c0       	rjmp	.+20     	; 0x39bc <xTimerGenericCommand+0x6a>
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	af 01       	movw	r20, r30
    39ac:	be 01       	movw	r22, r28
    39ae:	6f 5f       	subi	r22, 0xFF	; 255
    39b0:	7f 4f       	sbci	r23, 0xFF	; 255
    39b2:	cd 01       	movw	r24, r26
    39b4:	0e 94 94 14 	call	0x2928	; 0x2928 <xQueueGenericSendFromISR>
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <xTimerGenericCommand+0x6a>
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	08 95       	ret

000039d0 <prvSwitchTimerLists>:
    39d0:	ef 92       	push	r14
    39d2:	ff 92       	push	r15
    39d4:	0f 93       	push	r16
    39d6:	1f 93       	push	r17
    39d8:	cf 93       	push	r28
    39da:	df 93       	push	r29
    39dc:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <pxCurrentTimerList>
    39e0:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <pxCurrentTimerList+0x1>
    39e4:	80 81       	ld	r24, Z
    39e6:	88 23       	and	r24, r24
    39e8:	89 f1       	breq	.+98     	; 0x3a4c <prvSwitchTimerLists+0x7c>
    39ea:	05 80       	ldd	r0, Z+5	; 0x05
    39ec:	f6 81       	ldd	r31, Z+6	; 0x06
    39ee:	e0 2d       	mov	r30, r0
    39f0:	e0 80       	ld	r14, Z
    39f2:	f1 80       	ldd	r15, Z+1	; 0x01
    39f4:	c6 81       	ldd	r28, Z+6	; 0x06
    39f6:	d7 81       	ldd	r29, Z+7	; 0x07
    39f8:	8e 01       	movw	r16, r28
    39fa:	0e 5f       	subi	r16, 0xFE	; 254
    39fc:	1f 4f       	sbci	r17, 0xFF	; 255
    39fe:	c8 01       	movw	r24, r16
    3a00:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3a04:	e8 89       	ldd	r30, Y+16	; 0x10
    3a06:	f9 89       	ldd	r31, Y+17	; 0x11
    3a08:	ce 01       	movw	r24, r28
    3a0a:	09 95       	icall
    3a0c:	8a 89       	ldd	r24, Y+18	; 0x12
    3a0e:	82 ff       	sbrs	r24, 2
    3a10:	e5 cf       	rjmp	.-54     	; 0x39dc <prvSwitchTimerLists+0xc>
    3a12:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a14:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a16:	8e 0d       	add	r24, r14
    3a18:	9f 1d       	adc	r25, r15
    3a1a:	e8 16       	cp	r14, r24
    3a1c:	f9 06       	cpc	r15, r25
    3a1e:	60 f4       	brcc	.+24     	; 0x3a38 <prvSwitchTimerLists+0x68>
    3a20:	9b 83       	std	Y+3, r25	; 0x03
    3a22:	8a 83       	std	Y+2, r24	; 0x02
    3a24:	d9 87       	std	Y+9, r29	; 0x09
    3a26:	c8 87       	std	Y+8, r28	; 0x08
    3a28:	b8 01       	movw	r22, r16
    3a2a:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <pxCurrentTimerList>
    3a2e:	90 91 95 04 	lds	r25, 0x0495	; 0x800495 <pxCurrentTimerList+0x1>
    3a32:	0e 94 37 20 	call	0x406e	; 0x406e <vListInsert>
    3a36:	d2 cf       	rjmp	.-92     	; 0x39dc <prvSwitchTimerLists+0xc>
    3a38:	00 e0       	ldi	r16, 0x00	; 0
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
    3a3c:	20 e0       	ldi	r18, 0x00	; 0
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	a7 01       	movw	r20, r14
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	ce 01       	movw	r24, r28
    3a46:	0e 94 a9 1c 	call	0x3952	; 0x3952 <xTimerGenericCommand>
    3a4a:	c8 cf       	rjmp	.-112    	; 0x39dc <prvSwitchTimerLists+0xc>
    3a4c:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <pxOverflowTimerList>
    3a50:	90 91 93 04 	lds	r25, 0x0493	; 0x800493 <pxOverflowTimerList+0x1>
    3a54:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <pxCurrentTimerList+0x1>
    3a58:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <pxCurrentTimerList>
    3a5c:	f0 93 93 04 	sts	0x0493, r31	; 0x800493 <pxOverflowTimerList+0x1>
    3a60:	e0 93 92 04 	sts	0x0492, r30	; 0x800492 <pxOverflowTimerList>
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	ff 90       	pop	r15
    3a6e:	ef 90       	pop	r14
    3a70:	08 95       	ret

00003a72 <prvTimerTask>:
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <prvTimerTask+0x6>
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <prvTimerTask+0x8>
    3a7a:	1f 92       	push	r1
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
    3a80:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <pxCurrentTimerList>
    3a84:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <pxCurrentTimerList+0x1>
    3a88:	d0 80       	ld	r13, Z
    3a8a:	dd 20       	and	r13, r13
    3a8c:	31 f0       	breq	.+12     	; 0x3a9a <prvTimerTask+0x28>
    3a8e:	05 80       	ldd	r0, Z+5	; 0x05
    3a90:	f6 81       	ldd	r31, Z+6	; 0x06
    3a92:	e0 2d       	mov	r30, r0
    3a94:	e0 80       	ld	r14, Z
    3a96:	f1 80       	ldd	r15, Z+1	; 0x01
    3a98:	02 c0       	rjmp	.+4      	; 0x3a9e <prvTimerTask+0x2c>
    3a9a:	e1 2c       	mov	r14, r1
    3a9c:	f1 2c       	mov	r15, r1
    3a9e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    3aa2:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
    3aa6:	8c 01       	movw	r16, r24
    3aa8:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <xLastTime.2412>
    3aac:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <xLastTime.2412+0x1>
    3ab0:	08 17       	cp	r16, r24
    3ab2:	19 07       	cpc	r17, r25
    3ab4:	20 f4       	brcc	.+8      	; 0x3abe <prvTimerTask+0x4c>
    3ab6:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <prvSwitchTimerLists>
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	01 c0       	rjmp	.+2      	; 0x3ac0 <prvTimerTask+0x4e>
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	10 93 8d 04 	sts	0x048D, r17	; 0x80048d <xLastTime.2412+0x1>
    3ac4:	00 93 8c 04 	sts	0x048C, r16	; 0x80048c <xLastTime.2412>
    3ac8:	81 11       	cpse	r24, r1
    3aca:	55 c0       	rjmp	.+170    	; 0x3b76 <prvTimerTask+0x104>
    3acc:	dd 20       	and	r13, r13
    3ace:	d9 f1       	breq	.+118    	; 0x3b46 <prvTimerTask+0xd4>
    3ad0:	0e 15       	cp	r16, r14
    3ad2:	1f 05       	cpc	r17, r15
    3ad4:	08 f4       	brcc	.+2      	; 0x3ad8 <prvTimerTask+0x66>
    3ad6:	3e c0       	rjmp	.+124    	; 0x3b54 <prvTimerTask+0xe2>
    3ad8:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    3adc:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <pxCurrentTimerList>
    3ae0:	f0 91 95 04 	lds	r31, 0x0495	; 0x800495 <pxCurrentTimerList+0x1>
    3ae4:	05 80       	ldd	r0, Z+5	; 0x05
    3ae6:	f6 81       	ldd	r31, Z+6	; 0x06
    3ae8:	e0 2d       	mov	r30, r0
    3aea:	c6 80       	ldd	r12, Z+6	; 0x06
    3aec:	d7 80       	ldd	r13, Z+7	; 0x07
    3aee:	c6 01       	movw	r24, r12
    3af0:	02 96       	adiw	r24, 0x02	; 2
    3af2:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3af6:	d6 01       	movw	r26, r12
    3af8:	52 96       	adiw	r26, 0x12	; 18
    3afa:	8c 91       	ld	r24, X
    3afc:	52 97       	sbiw	r26, 0x12	; 18
    3afe:	82 ff       	sbrs	r24, 2
    3b00:	17 c0       	rjmp	.+46     	; 0x3b30 <prvTimerTask+0xbe>
    3b02:	1c 96       	adiw	r26, 0x0c	; 12
    3b04:	6d 91       	ld	r22, X+
    3b06:	7c 91       	ld	r23, X
    3b08:	1d 97       	sbiw	r26, 0x0d	; 13
    3b0a:	6e 0d       	add	r22, r14
    3b0c:	7f 1d       	adc	r23, r15
    3b0e:	97 01       	movw	r18, r14
    3b10:	a8 01       	movw	r20, r16
    3b12:	c6 01       	movw	r24, r12
    3b14:	0e 94 5f 1c 	call	0x38be	; 0x38be <prvInsertTimerInActiveList>
    3b18:	88 23       	and	r24, r24
    3b1a:	69 f0       	breq	.+26     	; 0x3b36 <prvTimerTask+0xc4>
    3b1c:	00 e0       	ldi	r16, 0x00	; 0
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	a7 01       	movw	r20, r14
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	c6 01       	movw	r24, r12
    3b2a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <xTimerGenericCommand>
    3b2e:	03 c0       	rjmp	.+6      	; 0x3b36 <prvTimerTask+0xc4>
    3b30:	8e 7f       	andi	r24, 0xFE	; 254
    3b32:	f6 01       	movw	r30, r12
    3b34:	82 8b       	std	Z+18, r24	; 0x12
    3b36:	d6 01       	movw	r26, r12
    3b38:	50 96       	adiw	r26, 0x10	; 16
    3b3a:	ed 91       	ld	r30, X+
    3b3c:	fc 91       	ld	r31, X
    3b3e:	51 97       	sbiw	r26, 0x11	; 17
    3b40:	c6 01       	movw	r24, r12
    3b42:	09 95       	icall
    3b44:	1e c0       	rjmp	.+60     	; 0x3b82 <prvTimerTask+0x110>
    3b46:	e0 91 92 04 	lds	r30, 0x0492	; 0x800492 <pxOverflowTimerList>
    3b4a:	f0 91 93 04 	lds	r31, 0x0493	; 0x800493 <pxOverflowTimerList+0x1>
    3b4e:	80 81       	ld	r24, Z
    3b50:	41 e0       	ldi	r20, 0x01	; 1
    3b52:	81 11       	cpse	r24, r1
    3b54:	40 e0       	ldi	r20, 0x00	; 0
    3b56:	b7 01       	movw	r22, r14
    3b58:	60 1b       	sub	r22, r16
    3b5a:	71 0b       	sbc	r23, r17
    3b5c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <xTimerQueue>
    3b60:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <xTimerQueue+0x1>
    3b64:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <vQueueWaitForMessageRestricted>
    3b68:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	09 c0       	rjmp	.+18     	; 0x3b82 <prvTimerTask+0x110>
    3b70:	0e 94 37 21 	call	0x426e	; 0x426e <vPortYield>
    3b74:	06 c0       	rjmp	.+12     	; 0x3b82 <prvTimerTask+0x110>
    3b76:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    3b7a:	03 c0       	rjmp	.+6      	; 0x3b82 <prvTimerTask+0x110>
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	87 ff       	sbrs	r24, 7
    3b80:	0e c0       	rjmp	.+28     	; 0x3b9e <prvTimerTask+0x12c>
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	be 01       	movw	r22, r28
    3b88:	6f 5f       	subi	r22, 0xFF	; 255
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <xTimerQueue>
    3b90:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <xTimerQueue+0x1>
    3b94:	0e 94 c3 14 	call	0x2986	; 0x2986 <xQueueReceive>
    3b98:	81 11       	cpse	r24, r1
    3b9a:	f0 cf       	rjmp	.-32     	; 0x3b7c <prvTimerTask+0x10a>
    3b9c:	71 cf       	rjmp	.-286    	; 0x3a80 <prvTimerTask+0xe>
    3b9e:	ec 80       	ldd	r14, Y+4	; 0x04
    3ba0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ba2:	f7 01       	movw	r30, r14
    3ba4:	82 85       	ldd	r24, Z+10	; 0x0a
    3ba6:	93 85       	ldd	r25, Z+11	; 0x0b
    3ba8:	89 2b       	or	r24, r25
    3baa:	21 f0       	breq	.+8      	; 0x3bb4 <prvTimerTask+0x142>
    3bac:	c7 01       	movw	r24, r14
    3bae:	02 96       	adiw	r24, 0x02	; 2
    3bb0:	0e 94 6f 20 	call	0x40de	; 0x40de <uxListRemove>
    3bb4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <xTaskGetTickCount>
    3bb8:	6c 01       	movw	r12, r24
    3bba:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <xLastTime.2412>
    3bbe:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <xLastTime.2412+0x1>
    3bc2:	c8 16       	cp	r12, r24
    3bc4:	d9 06       	cpc	r13, r25
    3bc6:	10 f4       	brcc	.+4      	; 0x3bcc <prvTimerTask+0x15a>
    3bc8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <prvSwitchTimerLists>
    3bcc:	d0 92 8d 04 	sts	0x048D, r13	; 0x80048d <xLastTime.2412+0x1>
    3bd0:	c0 92 8c 04 	sts	0x048C, r12	; 0x80048c <xLastTime.2412>
    3bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd6:	0e 2e       	mov	r0, r30
    3bd8:	00 0c       	add	r0, r0
    3bda:	ff 0b       	sbc	r31, r31
    3bdc:	ea 30       	cpi	r30, 0x0A	; 10
    3bde:	f1 05       	cpc	r31, r1
    3be0:	80 f6       	brcc	.-96     	; 0x3b82 <prvTimerTask+0x110>
    3be2:	ec 5c       	subi	r30, 0xCC	; 204
    3be4:	ff 4f       	sbci	r31, 0xFF	; 255
    3be6:	d7 01       	movw	r26, r14
    3be8:	52 96       	adiw	r26, 0x12	; 18
    3bea:	8c 91       	ld	r24, X
    3bec:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__tablejump2__>
    3bf0:	81 60       	ori	r24, 0x01	; 1
    3bf2:	f7 01       	movw	r30, r14
    3bf4:	82 8b       	std	Z+18, r24	; 0x12
    3bf6:	2a 81       	ldd	r18, Y+2	; 0x02
    3bf8:	3b 81       	ldd	r19, Y+3	; 0x03
    3bfa:	64 85       	ldd	r22, Z+12	; 0x0c
    3bfc:	75 85       	ldd	r23, Z+13	; 0x0d
    3bfe:	62 0f       	add	r22, r18
    3c00:	73 1f       	adc	r23, r19
    3c02:	a6 01       	movw	r20, r12
    3c04:	c7 01       	movw	r24, r14
    3c06:	0e 94 5f 1c 	call	0x38be	; 0x38be <prvInsertTimerInActiveList>
    3c0a:	88 23       	and	r24, r24
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <prvTimerTask+0x19e>
    3c0e:	b9 cf       	rjmp	.-142    	; 0x3b82 <prvTimerTask+0x110>
    3c10:	d7 01       	movw	r26, r14
    3c12:	50 96       	adiw	r26, 0x10	; 16
    3c14:	ed 91       	ld	r30, X+
    3c16:	fc 91       	ld	r31, X
    3c18:	51 97       	sbiw	r26, 0x11	; 17
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	09 95       	icall
    3c1e:	f7 01       	movw	r30, r14
    3c20:	82 89       	ldd	r24, Z+18	; 0x12
    3c22:	82 ff       	sbrs	r24, 2
    3c24:	ae cf       	rjmp	.-164    	; 0x3b82 <prvTimerTask+0x110>
    3c26:	4a 81       	ldd	r20, Y+2	; 0x02
    3c28:	5b 81       	ldd	r21, Y+3	; 0x03
    3c2a:	84 85       	ldd	r24, Z+12	; 0x0c
    3c2c:	95 85       	ldd	r25, Z+13	; 0x0d
    3c2e:	48 0f       	add	r20, r24
    3c30:	59 1f       	adc	r21, r25
    3c32:	00 e0       	ldi	r16, 0x00	; 0
    3c34:	10 e0       	ldi	r17, 0x00	; 0
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	0e 94 a9 1c 	call	0x3952	; 0x3952 <xTimerGenericCommand>
    3c42:	9f cf       	rjmp	.-194    	; 0x3b82 <prvTimerTask+0x110>
    3c44:	81 60       	ori	r24, 0x01	; 1
    3c46:	f7 01       	movw	r30, r14
    3c48:	82 8b       	std	Z+18, r24	; 0x12
    3c4a:	6a 81       	ldd	r22, Y+2	; 0x02
    3c4c:	7b 81       	ldd	r23, Y+3	; 0x03
    3c4e:	75 87       	std	Z+13, r23	; 0x0d
    3c50:	64 87       	std	Z+12, r22	; 0x0c
    3c52:	6c 0d       	add	r22, r12
    3c54:	7d 1d       	adc	r23, r13
    3c56:	96 01       	movw	r18, r12
    3c58:	a6 01       	movw	r20, r12
    3c5a:	c7 01       	movw	r24, r14
    3c5c:	0e 94 5f 1c 	call	0x38be	; 0x38be <prvInsertTimerInActiveList>
    3c60:	90 cf       	rjmp	.-224    	; 0x3b82 <prvTimerTask+0x110>
    3c62:	81 fd       	sbrc	r24, 1
    3c64:	04 c0       	rjmp	.+8      	; 0x3c6e <prvTimerTask+0x1fc>
    3c66:	c7 01       	movw	r24, r14
    3c68:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <vPortFree>
    3c6c:	8a cf       	rjmp	.-236    	; 0x3b82 <prvTimerTask+0x110>
    3c6e:	8e 7f       	andi	r24, 0xFE	; 254
    3c70:	d7 01       	movw	r26, r14
    3c72:	52 96       	adiw	r26, 0x12	; 18
    3c74:	8c 93       	st	X, r24
    3c76:	85 cf       	rjmp	.-246    	; 0x3b82 <prvTimerTask+0x110>

00003c78 <initVariant>:
    3c78:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <setup>
    3c7c:	0e 94 2d 18 	call	0x305a	; 0x305a <vTaskStartScheduler>
    3c80:	08 95       	ret

00003c82 <vApplicationIdleHook>:
    3c82:	0e 94 55 08 	call	0x10aa	; 0x10aa <loop>
    3c86:	83 ec       	ldi	r24, 0xC3	; 195
    3c88:	9c e0       	ldi	r25, 0x0C	; 12
    3c8a:	89 2b       	or	r24, r25
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <vApplicationIdleHook+0x10>
    3c8e:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <_Z14serialEventRunv>
    3c92:	08 95       	ret

00003c94 <vApplicationMallocFailedHook>:
    3c94:	25 9a       	sbi	0x04, 5	; 4
    3c96:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c98:	2f ef       	ldi	r18, 0xFF	; 255
    3c9a:	80 e7       	ldi	r24, 0x70	; 112
    3c9c:	92 e0       	ldi	r25, 0x02	; 2
    3c9e:	21 50       	subi	r18, 0x01	; 1
    3ca0:	80 40       	sbci	r24, 0x00	; 0
    3ca2:	90 40       	sbci	r25, 0x00	; 0
    3ca4:	e1 f7       	brne	.-8      	; 0x3c9e <vApplicationMallocFailedHook+0xa>
    3ca6:	00 c0       	rjmp	.+0      	; 0x3ca8 <vApplicationMallocFailedHook+0x14>
    3ca8:	00 00       	nop
    3caa:	1d 9a       	sbi	0x03, 5	; 3
    3cac:	f5 cf       	rjmp	.-22     	; 0x3c98 <vApplicationMallocFailedHook+0x4>

00003cae <vApplicationStackOverflowHook>:
    3cae:	25 9a       	sbi	0x04, 5	; 4
    3cb0:	2d 9a       	sbi	0x05, 5	; 5
    3cb2:	2f ef       	ldi	r18, 0xFF	; 255
    3cb4:	87 ea       	ldi	r24, 0xA7	; 167
    3cb6:	91 e6       	ldi	r25, 0x61	; 97
    3cb8:	21 50       	subi	r18, 0x01	; 1
    3cba:	80 40       	sbci	r24, 0x00	; 0
    3cbc:	90 40       	sbci	r25, 0x00	; 0
    3cbe:	e1 f7       	brne	.-8      	; 0x3cb8 <vApplicationStackOverflowHook+0xa>
    3cc0:	00 c0       	rjmp	.+0      	; 0x3cc2 <vApplicationStackOverflowHook+0x14>
    3cc2:	00 00       	nop
    3cc4:	1d 9a       	sbi	0x03, 5	; 3
    3cc6:	f5 cf       	rjmp	.-22     	; 0x3cb2 <vApplicationStackOverflowHook+0x4>

00003cc8 <_ZN9MD_TCS23010initialiseEv>:
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	fc 01       	movw	r30, r24
    3cce:	8f ef       	ldi	r24, 0xFF	; 255
    3cd0:	80 83       	st	Z, r24
    3cd2:	81 83       	std	Z+1, r24	; 0x01
    3cd4:	82 83       	std	Z+2, r24	; 0x02
    3cd6:	83 83       	std	Z+3, r24	; 0x03
    3cd8:	84 83       	std	Z+4, r24	; 0x04
    3cda:	8a e0       	ldi	r24, 0x0A	; 10
    3cdc:	85 83       	std	Z+5, r24	; 0x05
    3cde:	16 82       	std	Z+6, r1	; 0x06
    3ce0:	df 01       	movw	r26, r30
    3ce2:	17 96       	adiw	r26, 0x07	; 7
    3ce4:	73 96       	adiw	r30, 0x13	; 19
    3ce6:	00 e7       	ldi	r16, 0x70	; 112
    3ce8:	17 e1       	ldi	r17, 0x17	; 23
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	48 ed       	ldi	r20, 0xD8	; 216
    3cf0:	56 ed       	ldi	r21, 0xD6	; 214
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	70 e0       	ldi	r23, 0x00	; 0
    3cf6:	0d 93       	st	X+, r16
    3cf8:	1d 93       	st	X+, r17
    3cfa:	2d 93       	st	X+, r18
    3cfc:	3d 93       	st	X+, r19
    3cfe:	18 96       	adiw	r26, 0x08	; 8
    3d00:	4d 93       	st	X+, r20
    3d02:	5d 93       	st	X+, r21
    3d04:	6d 93       	st	X+, r22
    3d06:	7c 93       	st	X, r23
    3d08:	1b 97       	sbiw	r26, 0x0b	; 11
    3d0a:	ae 17       	cp	r26, r30
    3d0c:	bf 07       	cpc	r27, r31
    3d0e:	99 f7       	brne	.-26     	; 0x3cf6 <_ZN9MD_TCS23010initialiseEv+0x2e>
    3d10:	1f 91       	pop	r17
    3d12:	0f 91       	pop	r16
    3d14:	08 95       	ret

00003d16 <_ZN9MD_TCS230C1Ehhh>:
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	ec 01       	movw	r28, r24
    3d22:	f6 2e       	mov	r15, r22
    3d24:	04 2f       	mov	r16, r20
    3d26:	12 2f       	mov	r17, r18
    3d28:	0e 94 64 1e 	call	0x3cc8	; 0x3cc8 <_ZN9MD_TCS23010initialiseEv>
    3d2c:	fb 82       	std	Y+3, r15	; 0x03
    3d2e:	0c 83       	std	Y+4, r16	; 0x04
    3d30:	18 83       	st	Y, r17
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	1f 91       	pop	r17
    3d38:	0f 91       	pop	r16
    3d3a:	ff 90       	pop	r15
    3d3c:	08 95       	ret

00003d3e <_ZN9MD_TCS230D1Ev>:
    3d3e:	08 95       	ret

00003d40 <_ZN9MD_TCS2309setFilterEh>:
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	ec 01       	movw	r28, r24
    3d46:	8b 81       	ldd	r24, Y+3	; 0x03
    3d48:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4a:	e9 f0       	breq	.+58     	; 0x3d86 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d50:	d1 f0       	breq	.+52     	; 0x3d86 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d52:	61 30       	cpi	r22, 0x01	; 1
    3d54:	49 f0       	breq	.+18     	; 0x3d68 <_ZN9MD_TCS2309setFilterEh+0x28>
    3d56:	30 f0       	brcs	.+12     	; 0x3d64 <_ZN9MD_TCS2309setFilterEh+0x24>
    3d58:	62 30       	cpi	r22, 0x02	; 2
    3d5a:	41 f0       	breq	.+16     	; 0x3d6c <_ZN9MD_TCS2309setFilterEh+0x2c>
    3d5c:	63 30       	cpi	r22, 0x03	; 3
    3d5e:	99 f4       	brne	.+38     	; 0x3d86 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d60:	61 e0       	ldi	r22, 0x01	; 1
    3d62:	09 c0       	rjmp	.+18     	; 0x3d76 <_ZN9MD_TCS2309setFilterEh+0x36>
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	07 c0       	rjmp	.+14     	; 0x3d76 <_ZN9MD_TCS2309setFilterEh+0x36>
    3d68:	61 e0       	ldi	r22, 0x01	; 1
    3d6a:	01 c0       	rjmp	.+2      	; 0x3d6e <_ZN9MD_TCS2309setFilterEh+0x2e>
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
    3d72:	61 e0       	ldi	r22, 0x01	; 1
    3d74:	03 c0       	rjmp	.+6      	; 0x3d7c <_ZN9MD_TCS2309setFilterEh+0x3c>
    3d76:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d7e:	df 91       	pop	r29
    3d80:	cf 91       	pop	r28
    3d82:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <digitalWrite>
    3d86:	df 91       	pop	r29
    3d88:	cf 91       	pop	r28
    3d8a:	08 95       	ret

00003d8c <_ZN9MD_TCS23013setFrequency2Eh>:
    3d8c:	cf 93       	push	r28
    3d8e:	df 93       	push	r29
    3d90:	ec 01       	movw	r28, r24
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	8f 3f       	cpi	r24, 0xFF	; 255
    3d96:	e9 f0       	breq	.+58     	; 0x3dd2 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3d98:	9a 81       	ldd	r25, Y+2	; 0x02
    3d9a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d9c:	d1 f0       	breq	.+52     	; 0x3dd2 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3d9e:	61 30       	cpi	r22, 0x01	; 1
    3da0:	49 f0       	breq	.+18     	; 0x3db4 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3da2:	30 f0       	brcs	.+12     	; 0x3db0 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3da4:	62 30       	cpi	r22, 0x02	; 2
    3da6:	41 f0       	breq	.+16     	; 0x3db8 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    3da8:	63 30       	cpi	r22, 0x03	; 3
    3daa:	99 f4       	brne	.+38     	; 0x3dd2 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3dac:	60 e0       	ldi	r22, 0x00	; 0
    3dae:	09 c0       	rjmp	.+18     	; 0x3dc2 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	03 c0       	rjmp	.+6      	; 0x3dba <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3db4:	61 e0       	ldi	r22, 0x01	; 1
    3db6:	05 c0       	rjmp	.+10     	; 0x3dc2 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3db8:	60 e0       	ldi	r22, 0x00	; 0
    3dba:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
    3dbe:	61 e0       	ldi	r22, 0x01	; 1
    3dc0:	03 c0       	rjmp	.+6      	; 0x3dc8 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    3dc2:	0e 94 b2 12 	call	0x2564	; 0x2564 <digitalWrite>
    3dc6:	60 e0       	ldi	r22, 0x00	; 0
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <digitalWrite>
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	08 95       	ret

00003dd8 <_ZN9MD_TCS2309setEnableEb>:
    3dd8:	fc 01       	movw	r30, r24
    3dda:	20 81       	ld	r18, Z
    3ddc:	2f 3f       	cpi	r18, 0xFF	; 255
    3dde:	29 f0       	breq	.+10     	; 0x3dea <_ZN9MD_TCS2309setEnableEb+0x12>
    3de0:	91 e0       	ldi	r25, 0x01	; 1
    3de2:	69 27       	eor	r22, r25
    3de4:	82 2f       	mov	r24, r18
    3de6:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <digitalWrite>
    3dea:	66 23       	and	r22, r22
    3dec:	19 f0       	breq	.+6      	; 0x3df4 <_ZN9MD_TCS2309setEnableEb+0x1c>
    3dee:	fc 01       	movw	r30, r24
    3df0:	66 81       	ldd	r22, Z+6	; 0x06
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <_ZN9MD_TCS2309setEnableEb+0x1e>
    3df4:	63 e0       	ldi	r22, 0x03	; 3
    3df6:	0c 94 c6 1e 	jmp	0x3d8c	; 0x3d8c <_ZN9MD_TCS23013setFrequency2Eh>

00003dfa <_ZN9MD_TCS2306getRGBEP9colorData>:
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	fb 01       	movw	r30, r22
    3dfe:	30 97       	sbiw	r30, 0x00	; 0
    3e00:	59 f0       	breq	.+22     	; 0x3e18 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    3e02:	9b 96       	adiw	r26, 0x2b	; 43
    3e04:	8c 91       	ld	r24, X
    3e06:	9b 97       	sbiw	r26, 0x2b	; 43
    3e08:	80 83       	st	Z, r24
    3e0a:	9c 96       	adiw	r26, 0x2c	; 44
    3e0c:	8c 91       	ld	r24, X
    3e0e:	9c 97       	sbiw	r26, 0x2c	; 44
    3e10:	81 83       	std	Z+1, r24	; 0x01
    3e12:	9d 96       	adiw	r26, 0x2d	; 45
    3e14:	8c 91       	ld	r24, X
    3e16:	82 83       	std	Z+2, r24	; 0x02
    3e18:	08 95       	ret

00003e1a <_ZN9MD_TCS23017RGBTransformationEv>:
    3e1a:	4f 92       	push	r4
    3e1c:	5f 92       	push	r5
    3e1e:	6f 92       	push	r6
    3e20:	7f 92       	push	r7
    3e22:	8f 92       	push	r8
    3e24:	9f 92       	push	r9
    3e26:	af 92       	push	r10
    3e28:	bf 92       	push	r11
    3e2a:	df 92       	push	r13
    3e2c:	ef 92       	push	r14
    3e2e:	ff 92       	push	r15
    3e30:	0f 93       	push	r16
    3e32:	1f 93       	push	r17
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	8c 01       	movw	r16, r24
    3e3a:	09 5f       	subi	r16, 0xF9	; 249
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	ec 01       	movw	r28, r24
    3e40:	7c 01       	movw	r14, r24
    3e42:	83 e1       	ldi	r24, 0x13	; 19
    3e44:	e8 0e       	add	r14, r24
    3e46:	f1 1c       	adc	r15, r1
    3e48:	dd 24       	eor	r13, r13
    3e4a:	da 94       	dec	r13
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	d8 01       	movw	r26, r16
    3e50:	8d 90       	ld	r8, X+
    3e52:	9d 90       	ld	r9, X+
    3e54:	ad 90       	ld	r10, X+
    3e56:	bd 90       	ld	r11, X+
    3e58:	8d 01       	movw	r16, r26
    3e5a:	80 8d       	ldd	r24, Z+24	; 0x18
    3e5c:	91 8d       	ldd	r25, Z+25	; 0x19
    3e5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3e60:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3e62:	9c 01       	movw	r18, r24
    3e64:	ad 01       	movw	r20, r26
    3e66:	28 19       	sub	r18, r8
    3e68:	39 09       	sbc	r19, r9
    3e6a:	4a 09       	sbc	r20, r10
    3e6c:	5b 09       	sbc	r21, r11
    3e6e:	af ef       	ldi	r26, 0xFF	; 255
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	0e 94 66 23 	call	0x46cc	; 0x46cc <__muluhisi3>
    3e76:	f8 01       	movw	r30, r16
    3e78:	40 84       	ldd	r4, Z+8	; 0x08
    3e7a:	51 84       	ldd	r5, Z+9	; 0x09
    3e7c:	62 84       	ldd	r6, Z+10	; 0x0a
    3e7e:	73 84       	ldd	r7, Z+11	; 0x0b
    3e80:	a3 01       	movw	r20, r6
    3e82:	92 01       	movw	r18, r4
    3e84:	28 19       	sub	r18, r8
    3e86:	39 09       	sbc	r19, r9
    3e88:	4a 09       	sbc	r20, r10
    3e8a:	5b 09       	sbc	r21, r11
    3e8c:	0e 94 41 23 	call	0x4682	; 0x4682 <__divmodsi4>
    3e90:	57 ff       	sbrs	r21, 7
    3e92:	02 c0       	rjmp	.+4      	; 0x3e98 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    3e94:	1b a6       	std	Y+43, r1	; 0x2b
    3e96:	09 c0       	rjmp	.+18     	; 0x3eaa <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3e98:	2f 3f       	cpi	r18, 0xFF	; 255
    3e9a:	31 05       	cpc	r19, r1
    3e9c:	41 05       	cpc	r20, r1
    3e9e:	51 05       	cpc	r21, r1
    3ea0:	19 f0       	breq	.+6      	; 0x3ea8 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3ea2:	14 f0       	brlt	.+4      	; 0x3ea8 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3ea4:	db a6       	std	Y+43, r13	; 0x2b
    3ea6:	01 c0       	rjmp	.+2      	; 0x3eaa <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3ea8:	2b a7       	std	Y+43, r18	; 0x2b
    3eaa:	21 96       	adiw	r28, 0x01	; 1
    3eac:	0e 15       	cp	r16, r14
    3eae:	1f 05       	cpc	r17, r15
    3eb0:	69 f6       	brne	.-102    	; 0x3e4c <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    3eb2:	df 91       	pop	r29
    3eb4:	cf 91       	pop	r28
    3eb6:	1f 91       	pop	r17
    3eb8:	0f 91       	pop	r16
    3eba:	ff 90       	pop	r15
    3ebc:	ef 90       	pop	r14
    3ebe:	df 90       	pop	r13
    3ec0:	bf 90       	pop	r11
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	7f 90       	pop	r7
    3eca:	6f 90       	pop	r6
    3ecc:	5f 90       	pop	r5
    3ece:	4f 90       	pop	r4
    3ed0:	08 95       	ret

00003ed2 <_ZN9MD_TCS2307readFSMEh>:
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	cf 93       	push	r28
    3ed8:	df 93       	push	r29
    3eda:	8c 01       	movw	r16, r24
    3edc:	c6 2f       	mov	r28, r22
    3ede:	61 30       	cpi	r22, 0x01	; 1
    3ee0:	49 f0       	breq	.+18     	; 0x3ef4 <_ZN9MD_TCS2307readFSMEh+0x22>
    3ee2:	18 f0       	brcs	.+6      	; 0x3eea <_ZN9MD_TCS2307readFSMEh+0x18>
    3ee4:	62 30       	cpi	r22, 0x02	; 2
    3ee6:	d9 f0       	breq	.+54     	; 0x3f1e <_ZN9MD_TCS2307readFSMEh+0x4c>
    3ee8:	4c c0       	rjmp	.+152    	; 0x3f82 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3eea:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN9MD_TCS2309setEnableEb>
    3ef4:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	e3 5c       	subi	r30, 0xC3	; 195
    3efc:	fd 4f       	sbci	r31, 0xFD	; 253
    3efe:	60 81       	ld	r22, Z
    3f00:	c8 01       	movw	r24, r16
    3f02:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <_ZN9MD_TCS2309setFilterEh>
    3f06:	f8 01       	movw	r30, r16
    3f08:	65 81       	ldd	r22, Z+5	; 0x05
    3f0a:	70 e0       	ldi	r23, 0x00	; 0
    3f0c:	88 ee       	ldi	r24, 0xE8	; 232
    3f0e:	93 e0       	ldi	r25, 0x03	; 3
    3f10:	0e 94 0b 23 	call	0x4616	; 0x4616 <__divmodhi4>
    3f14:	cb 01       	movw	r24, r22
    3f16:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <_ZN14FreqCountClass5beginEj>
    3f1a:	c2 e0       	ldi	r28, 0x02	; 2
    3f1c:	32 c0       	rjmp	.+100    	; 0x3f82 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3f1e:	0e 94 68 22 	call	0x44d0	; 0x44d0 <_ZN14FreqCountClass9availableEv>
    3f22:	88 23       	and	r24, r24
    3f24:	71 f1       	breq	.+92     	; 0x3f82 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3f26:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	8e 0f       	add	r24, r30
    3f2e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	e3 5c       	subi	r30, 0xC3	; 195
    3f36:	fd 4f       	sbci	r31, 0xFD	; 253
    3f38:	c0 81       	ld	r28, Z
    3f3a:	d0 e0       	ldi	r29, 0x00	; 0
    3f3c:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <_ZN14FreqCountClass4readEv>
    3f40:	9b 01       	movw	r18, r22
    3f42:	ac 01       	movw	r20, r24
    3f44:	cc 0f       	add	r28, r28
    3f46:	dd 1f       	adc	r29, r29
    3f48:	cc 0f       	add	r28, r28
    3f4a:	dd 1f       	adc	r29, r29
    3f4c:	c0 0f       	add	r28, r16
    3f4e:	d1 1f       	adc	r29, r17
    3f50:	f8 01       	movw	r30, r16
    3f52:	a5 81       	ldd	r26, Z+5	; 0x05
    3f54:	b0 e0       	ldi	r27, 0x00	; 0
    3f56:	0e 94 66 23 	call	0x46cc	; 0x46cc <__muluhisi3>
    3f5a:	6f 8f       	std	Y+31, r22	; 0x1f
    3f5c:	78 a3       	std	Y+32, r23	; 0x20
    3f5e:	89 a3       	std	Y+33, r24	; 0x21
    3f60:	9a a3       	std	Y+34, r25	; 0x22
    3f62:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f66:	83 30       	cpi	r24, 0x03	; 3
    3f68:	58 f0       	brcs	.+22     	; 0x3f80 <_ZN9MD_TCS2307readFSMEh+0xae>
    3f6a:	0e 94 79 22 	call	0x44f2	; 0x44f2 <_ZN14FreqCountClass3endEv>
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	c8 01       	movw	r24, r16
    3f72:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <_ZN9MD_TCS2309setEnableEb>
    3f76:	c8 01       	movw	r24, r16
    3f78:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <_ZN9MD_TCS23017RGBTransformationEv>
    3f7c:	c0 e0       	ldi	r28, 0x00	; 0
    3f7e:	01 c0       	rjmp	.+2      	; 0x3f82 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3f80:	c1 e0       	ldi	r28, 0x01	; 1
    3f82:	8c 2f       	mov	r24, r28
    3f84:	df 91       	pop	r29
    3f86:	cf 91       	pop	r28
    3f88:	1f 91       	pop	r17
    3f8a:	0f 91       	pop	r16
    3f8c:	08 95       	ret

00003f8e <_ZN9MD_TCS2304readEv>:
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	ec 01       	movw	r28, r24
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN9MD_TCS2307readFSMEh>
    3f9a:	8e a7       	std	Y+46, r24	; 0x2e
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	08 95       	ret

00003fa2 <_ZN9MD_TCS2309availableEv>:
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	ec 01       	movw	r28, r24
    3fa8:	6e a5       	ldd	r22, Y+46	; 0x2e
    3faa:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <_ZN9MD_TCS2307readFSMEh>
    3fae:	98 2f       	mov	r25, r24
    3fb0:	8e a7       	std	Y+46, r24	; 0x2e
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	91 11       	cpse	r25, r1
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	08 95       	ret

00003fbe <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3fbe:	08 95       	ret

00003fc0 <pvPortMalloc>:
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	ec 01       	movw	r28, r24
    3fc6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    3fca:	ce 01       	movw	r24, r28
    3fcc:	0e 94 94 23 	call	0x4728	; 0x4728 <malloc>
    3fd0:	ec 01       	movw	r28, r24
    3fd2:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskResumeAll>
    3fd6:	20 97       	sbiw	r28, 0x00	; 0
    3fd8:	11 f4       	brne	.+4      	; 0x3fde <pvPortMalloc+0x1e>
    3fda:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <vApplicationMallocFailedHook>
    3fde:	ce 01       	movw	r24, r28
    3fe0:	df 91       	pop	r29
    3fe2:	cf 91       	pop	r28
    3fe4:	08 95       	ret

00003fe6 <vPortFree>:
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	51 f0       	breq	.+20     	; 0x4002 <vPortFree+0x1c>
    3fee:	ec 01       	movw	r28, r24
    3ff0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vTaskSuspendAll>
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	0e 94 2c 24 	call	0x4858	; 0x4858 <free>
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	0c 94 17 19 	jmp	0x322e	; 0x322e <xTaskResumeAll>
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	08 95       	ret

00004008 <vListInitialise>:
    4008:	fc 01       	movw	r30, r24
    400a:	03 96       	adiw	r24, 0x03	; 3
    400c:	92 83       	std	Z+2, r25	; 0x02
    400e:	81 83       	std	Z+1, r24	; 0x01
    4010:	2f ef       	ldi	r18, 0xFF	; 255
    4012:	3f ef       	ldi	r19, 0xFF	; 255
    4014:	34 83       	std	Z+4, r19	; 0x04
    4016:	23 83       	std	Z+3, r18	; 0x03
    4018:	96 83       	std	Z+6, r25	; 0x06
    401a:	85 83       	std	Z+5, r24	; 0x05
    401c:	90 87       	std	Z+8, r25	; 0x08
    401e:	87 83       	std	Z+7, r24	; 0x07
    4020:	10 82       	st	Z, r1
    4022:	08 95       	ret

00004024 <vListInitialiseItem>:
    4024:	fc 01       	movw	r30, r24
    4026:	11 86       	std	Z+9, r1	; 0x09
    4028:	10 86       	std	Z+8, r1	; 0x08
    402a:	08 95       	ret

0000402c <vListInsertEnd>:
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29
    4030:	9c 01       	movw	r18, r24
    4032:	fb 01       	movw	r30, r22
    4034:	dc 01       	movw	r26, r24
    4036:	11 96       	adiw	r26, 0x01	; 1
    4038:	cd 91       	ld	r28, X+
    403a:	dc 91       	ld	r29, X
    403c:	12 97       	sbiw	r26, 0x02	; 2
    403e:	d3 83       	std	Z+3, r29	; 0x03
    4040:	c2 83       	std	Z+2, r28	; 0x02
    4042:	8c 81       	ldd	r24, Y+4	; 0x04
    4044:	9d 81       	ldd	r25, Y+5	; 0x05
    4046:	95 83       	std	Z+5, r25	; 0x05
    4048:	84 83       	std	Z+4, r24	; 0x04
    404a:	8c 81       	ldd	r24, Y+4	; 0x04
    404c:	9d 81       	ldd	r25, Y+5	; 0x05
    404e:	dc 01       	movw	r26, r24
    4050:	13 96       	adiw	r26, 0x03	; 3
    4052:	7c 93       	st	X, r23
    4054:	6e 93       	st	-X, r22
    4056:	12 97       	sbiw	r26, 0x02	; 2
    4058:	7d 83       	std	Y+5, r23	; 0x05
    405a:	6c 83       	std	Y+4, r22	; 0x04
    405c:	31 87       	std	Z+9, r19	; 0x09
    405e:	20 87       	std	Z+8, r18	; 0x08
    4060:	f9 01       	movw	r30, r18
    4062:	80 81       	ld	r24, Z
    4064:	8f 5f       	subi	r24, 0xFF	; 255
    4066:	80 83       	st	Z, r24
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <vListInsert>:
    406e:	0f 93       	push	r16
    4070:	1f 93       	push	r17
    4072:	cf 93       	push	r28
    4074:	df 93       	push	r29
    4076:	8c 01       	movw	r16, r24
    4078:	fb 01       	movw	r30, r22
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	8f 3f       	cpi	r24, 0xFF	; 255
    4080:	2f ef       	ldi	r18, 0xFF	; 255
    4082:	92 07       	cpc	r25, r18
    4084:	21 f4       	brne	.+8      	; 0x408e <vListInsert+0x20>
    4086:	e8 01       	movw	r28, r16
    4088:	af 81       	ldd	r26, Y+7	; 0x07
    408a:	b8 85       	ldd	r27, Y+8	; 0x08
    408c:	0e c0       	rjmp	.+28     	; 0x40aa <vListInsert+0x3c>
    408e:	d8 01       	movw	r26, r16
    4090:	13 96       	adiw	r26, 0x03	; 3
    4092:	12 96       	adiw	r26, 0x02	; 2
    4094:	2d 91       	ld	r18, X+
    4096:	3c 91       	ld	r19, X
    4098:	13 97       	sbiw	r26, 0x03	; 3
    409a:	e9 01       	movw	r28, r18
    409c:	48 81       	ld	r20, Y
    409e:	59 81       	ldd	r21, Y+1	; 0x01
    40a0:	84 17       	cp	r24, r20
    40a2:	95 07       	cpc	r25, r21
    40a4:	10 f0       	brcs	.+4      	; 0x40aa <vListInsert+0x3c>
    40a6:	d9 01       	movw	r26, r18
    40a8:	f4 cf       	rjmp	.-24     	; 0x4092 <vListInsert+0x24>
    40aa:	12 96       	adiw	r26, 0x02	; 2
    40ac:	8d 91       	ld	r24, X+
    40ae:	9c 91       	ld	r25, X
    40b0:	13 97       	sbiw	r26, 0x03	; 3
    40b2:	93 83       	std	Z+3, r25	; 0x03
    40b4:	82 83       	std	Z+2, r24	; 0x02
    40b6:	ec 01       	movw	r28, r24
    40b8:	fd 83       	std	Y+5, r31	; 0x05
    40ba:	ec 83       	std	Y+4, r30	; 0x04
    40bc:	b5 83       	std	Z+5, r27	; 0x05
    40be:	a4 83       	std	Z+4, r26	; 0x04
    40c0:	13 96       	adiw	r26, 0x03	; 3
    40c2:	fc 93       	st	X, r31
    40c4:	ee 93       	st	-X, r30
    40c6:	12 97       	sbiw	r26, 0x02	; 2
    40c8:	11 87       	std	Z+9, r17	; 0x09
    40ca:	00 87       	std	Z+8, r16	; 0x08
    40cc:	f8 01       	movw	r30, r16
    40ce:	80 81       	ld	r24, Z
    40d0:	8f 5f       	subi	r24, 0xFF	; 255
    40d2:	80 83       	st	Z, r24
    40d4:	df 91       	pop	r29
    40d6:	cf 91       	pop	r28
    40d8:	1f 91       	pop	r17
    40da:	0f 91       	pop	r16
    40dc:	08 95       	ret

000040de <uxListRemove>:
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	fc 01       	movw	r30, r24
    40e4:	a0 85       	ldd	r26, Z+8	; 0x08
    40e6:	b1 85       	ldd	r27, Z+9	; 0x09
    40e8:	82 81       	ldd	r24, Z+2	; 0x02
    40ea:	93 81       	ldd	r25, Z+3	; 0x03
    40ec:	24 81       	ldd	r18, Z+4	; 0x04
    40ee:	35 81       	ldd	r19, Z+5	; 0x05
    40f0:	ec 01       	movw	r28, r24
    40f2:	3d 83       	std	Y+5, r19	; 0x05
    40f4:	2c 83       	std	Y+4, r18	; 0x04
    40f6:	c4 81       	ldd	r28, Z+4	; 0x04
    40f8:	d5 81       	ldd	r29, Z+5	; 0x05
    40fa:	9b 83       	std	Y+3, r25	; 0x03
    40fc:	8a 83       	std	Y+2, r24	; 0x02
    40fe:	11 96       	adiw	r26, 0x01	; 1
    4100:	8d 91       	ld	r24, X+
    4102:	9c 91       	ld	r25, X
    4104:	12 97       	sbiw	r26, 0x02	; 2
    4106:	e8 17       	cp	r30, r24
    4108:	f9 07       	cpc	r31, r25
    410a:	21 f4       	brne	.+8      	; 0x4114 <uxListRemove+0x36>
    410c:	12 96       	adiw	r26, 0x02	; 2
    410e:	dc 93       	st	X, r29
    4110:	ce 93       	st	-X, r28
    4112:	11 97       	sbiw	r26, 0x01	; 1
    4114:	11 86       	std	Z+9, r1	; 0x09
    4116:	10 86       	std	Z+8, r1	; 0x08
    4118:	8c 91       	ld	r24, X
    411a:	81 50       	subi	r24, 0x01	; 1
    411c:	8c 93       	st	X, r24
    411e:	8c 91       	ld	r24, X
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	08 95       	ret

00004126 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    4126:	31 e1       	ldi	r19, 0x11	; 17
    4128:	fc 01       	movw	r30, r24
    412a:	30 83       	st	Z, r19
    412c:	31 97       	sbiw	r30, 0x01	; 1
    412e:	22 e2       	ldi	r18, 0x22	; 34
    4130:	20 83       	st	Z, r18
    4132:	31 97       	sbiw	r30, 0x01	; 1
    4134:	a3 e3       	ldi	r26, 0x33	; 51
    4136:	a0 83       	st	Z, r26
    4138:	31 97       	sbiw	r30, 0x01	; 1
    413a:	60 83       	st	Z, r22
    413c:	31 97       	sbiw	r30, 0x01	; 1
    413e:	70 83       	st	Z, r23
    4140:	31 97       	sbiw	r30, 0x01	; 1
    4142:	10 82       	st	Z, r1
    4144:	31 97       	sbiw	r30, 0x01	; 1
    4146:	60 e8       	ldi	r22, 0x80	; 128
    4148:	60 83       	st	Z, r22
    414a:	31 97       	sbiw	r30, 0x01	; 1
    414c:	10 82       	st	Z, r1
    414e:	31 97       	sbiw	r30, 0x01	; 1
    4150:	62 e0       	ldi	r22, 0x02	; 2
    4152:	60 83       	st	Z, r22
    4154:	31 97       	sbiw	r30, 0x01	; 1
    4156:	63 e0       	ldi	r22, 0x03	; 3
    4158:	60 83       	st	Z, r22
    415a:	31 97       	sbiw	r30, 0x01	; 1
    415c:	64 e0       	ldi	r22, 0x04	; 4
    415e:	60 83       	st	Z, r22
    4160:	31 97       	sbiw	r30, 0x01	; 1
    4162:	65 e0       	ldi	r22, 0x05	; 5
    4164:	60 83       	st	Z, r22
    4166:	31 97       	sbiw	r30, 0x01	; 1
    4168:	66 e0       	ldi	r22, 0x06	; 6
    416a:	60 83       	st	Z, r22
    416c:	31 97       	sbiw	r30, 0x01	; 1
    416e:	67 e0       	ldi	r22, 0x07	; 7
    4170:	60 83       	st	Z, r22
    4172:	31 97       	sbiw	r30, 0x01	; 1
    4174:	68 e0       	ldi	r22, 0x08	; 8
    4176:	60 83       	st	Z, r22
    4178:	31 97       	sbiw	r30, 0x01	; 1
    417a:	69 e0       	ldi	r22, 0x09	; 9
    417c:	60 83       	st	Z, r22
    417e:	31 97       	sbiw	r30, 0x01	; 1
    4180:	60 e1       	ldi	r22, 0x10	; 16
    4182:	60 83       	st	Z, r22
    4184:	31 97       	sbiw	r30, 0x01	; 1
    4186:	30 83       	st	Z, r19
    4188:	31 97       	sbiw	r30, 0x01	; 1
    418a:	32 e1       	ldi	r19, 0x12	; 18
    418c:	30 83       	st	Z, r19
    418e:	31 97       	sbiw	r30, 0x01	; 1
    4190:	33 e1       	ldi	r19, 0x13	; 19
    4192:	30 83       	st	Z, r19
    4194:	31 97       	sbiw	r30, 0x01	; 1
    4196:	34 e1       	ldi	r19, 0x14	; 20
    4198:	30 83       	st	Z, r19
    419a:	31 97       	sbiw	r30, 0x01	; 1
    419c:	35 e1       	ldi	r19, 0x15	; 21
    419e:	30 83       	st	Z, r19
    41a0:	31 97       	sbiw	r30, 0x01	; 1
    41a2:	36 e1       	ldi	r19, 0x16	; 22
    41a4:	30 83       	st	Z, r19
    41a6:	31 97       	sbiw	r30, 0x01	; 1
    41a8:	37 e1       	ldi	r19, 0x17	; 23
    41aa:	30 83       	st	Z, r19
    41ac:	31 97       	sbiw	r30, 0x01	; 1
    41ae:	38 e1       	ldi	r19, 0x18	; 24
    41b0:	30 83       	st	Z, r19
    41b2:	31 97       	sbiw	r30, 0x01	; 1
    41b4:	39 e1       	ldi	r19, 0x19	; 25
    41b6:	30 83       	st	Z, r19
    41b8:	31 97       	sbiw	r30, 0x01	; 1
    41ba:	30 e2       	ldi	r19, 0x20	; 32
    41bc:	30 83       	st	Z, r19
    41be:	31 97       	sbiw	r30, 0x01	; 1
    41c0:	31 e2       	ldi	r19, 0x21	; 33
    41c2:	30 83       	st	Z, r19
    41c4:	31 97       	sbiw	r30, 0x01	; 1
    41c6:	20 83       	st	Z, r18
    41c8:	31 97       	sbiw	r30, 0x01	; 1
    41ca:	23 e2       	ldi	r18, 0x23	; 35
    41cc:	20 83       	st	Z, r18
    41ce:	31 97       	sbiw	r30, 0x01	; 1
    41d0:	40 83       	st	Z, r20
    41d2:	31 97       	sbiw	r30, 0x01	; 1
    41d4:	50 83       	st	Z, r21
    41d6:	31 97       	sbiw	r30, 0x01	; 1
    41d8:	26 e2       	ldi	r18, 0x26	; 38
    41da:	20 83       	st	Z, r18
    41dc:	31 97       	sbiw	r30, 0x01	; 1
    41de:	27 e2       	ldi	r18, 0x27	; 39
    41e0:	20 83       	st	Z, r18
    41e2:	31 97       	sbiw	r30, 0x01	; 1
    41e4:	28 e2       	ldi	r18, 0x28	; 40
    41e6:	20 83       	st	Z, r18
    41e8:	31 97       	sbiw	r30, 0x01	; 1
    41ea:	29 e2       	ldi	r18, 0x29	; 41
    41ec:	20 83       	st	Z, r18
    41ee:	31 97       	sbiw	r30, 0x01	; 1
    41f0:	20 e3       	ldi	r18, 0x30	; 48
    41f2:	20 83       	st	Z, r18
    41f4:	31 97       	sbiw	r30, 0x01	; 1
    41f6:	21 e3       	ldi	r18, 0x31	; 49
    41f8:	20 83       	st	Z, r18
    41fa:	86 97       	sbiw	r24, 0x26	; 38
    41fc:	08 95       	ret

000041fe <xPortStartScheduler>:
    41fe:	a8 95       	wdr
    4200:	90 ec       	ldi	r25, 0xC0	; 192
    4202:	88 e1       	ldi	r24, 0x18	; 24
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	f8 94       	cli
    4208:	a8 95       	wdr
    420a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    420e:	0f be       	out	0x3f, r0	; 63
    4210:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    4214:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    4218:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    421c:	cd 91       	ld	r28, X+
    421e:	cd bf       	out	0x3d, r28	; 61
    4220:	dd 91       	ld	r29, X+
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	ff 91       	pop	r31
    4226:	ef 91       	pop	r30
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	bf 91       	pop	r27
    422e:	af 91       	pop	r26
    4230:	9f 91       	pop	r25
    4232:	8f 91       	pop	r24
    4234:	7f 91       	pop	r23
    4236:	6f 91       	pop	r22
    4238:	5f 91       	pop	r21
    423a:	4f 91       	pop	r20
    423c:	3f 91       	pop	r19
    423e:	2f 91       	pop	r18
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	bf 90       	pop	r11
    424e:	af 90       	pop	r10
    4250:	9f 90       	pop	r9
    4252:	8f 90       	pop	r8
    4254:	7f 90       	pop	r7
    4256:	6f 90       	pop	r6
    4258:	5f 90       	pop	r5
    425a:	4f 90       	pop	r4
    425c:	3f 90       	pop	r3
    425e:	2f 90       	pop	r2
    4260:	1f 90       	pop	r1
    4262:	0f 90       	pop	r0
    4264:	0f be       	out	0x3f, r0	; 63
    4266:	0f 90       	pop	r0
    4268:	08 95       	ret
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	08 95       	ret

0000426e <vPortYield>:
    426e:	0f 92       	push	r0
    4270:	0f b6       	in	r0, 0x3f	; 63
    4272:	f8 94       	cli
    4274:	0f 92       	push	r0
    4276:	1f 92       	push	r1
    4278:	11 24       	eor	r1, r1
    427a:	2f 92       	push	r2
    427c:	3f 92       	push	r3
    427e:	4f 92       	push	r4
    4280:	5f 92       	push	r5
    4282:	6f 92       	push	r6
    4284:	7f 92       	push	r7
    4286:	8f 92       	push	r8
    4288:	9f 92       	push	r9
    428a:	af 92       	push	r10
    428c:	bf 92       	push	r11
    428e:	cf 92       	push	r12
    4290:	df 92       	push	r13
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	2f 93       	push	r18
    429c:	3f 93       	push	r19
    429e:	4f 93       	push	r20
    42a0:	5f 93       	push	r21
    42a2:	6f 93       	push	r22
    42a4:	7f 93       	push	r23
    42a6:	8f 93       	push	r24
    42a8:	9f 93       	push	r25
    42aa:	af 93       	push	r26
    42ac:	bf 93       	push	r27
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	ef 93       	push	r30
    42b4:	ff 93       	push	r31
    42b6:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    42ba:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    42be:	0d b6       	in	r0, 0x3d	; 61
    42c0:	0d 92       	st	X+, r0
    42c2:	0e b6       	in	r0, 0x3e	; 62
    42c4:	0d 92       	st	X+, r0
    42c6:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <vTaskSwitchContext>
    42ca:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    42ce:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    42d2:	cd 91       	ld	r28, X+
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	dd 91       	ld	r29, X+
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	ff 91       	pop	r31
    42dc:	ef 91       	pop	r30
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	bf 91       	pop	r27
    42e4:	af 91       	pop	r26
    42e6:	9f 91       	pop	r25
    42e8:	8f 91       	pop	r24
    42ea:	7f 91       	pop	r23
    42ec:	6f 91       	pop	r22
    42ee:	5f 91       	pop	r21
    42f0:	4f 91       	pop	r20
    42f2:	3f 91       	pop	r19
    42f4:	2f 91       	pop	r18
    42f6:	1f 91       	pop	r17
    42f8:	0f 91       	pop	r16
    42fa:	ff 90       	pop	r15
    42fc:	ef 90       	pop	r14
    42fe:	df 90       	pop	r13
    4300:	cf 90       	pop	r12
    4302:	bf 90       	pop	r11
    4304:	af 90       	pop	r10
    4306:	9f 90       	pop	r9
    4308:	8f 90       	pop	r8
    430a:	7f 90       	pop	r7
    430c:	6f 90       	pop	r6
    430e:	5f 90       	pop	r5
    4310:	4f 90       	pop	r4
    4312:	3f 90       	pop	r3
    4314:	2f 90       	pop	r2
    4316:	1f 90       	pop	r1
    4318:	0f 90       	pop	r0
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	0f 90       	pop	r0
    431e:	08 95       	ret

00004320 <vPortYieldFromTick>:
    4320:	0f 92       	push	r0
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	0f 92       	push	r0
    4328:	1f 92       	push	r1
    432a:	11 24       	eor	r1, r1
    432c:	2f 92       	push	r2
    432e:	3f 92       	push	r3
    4330:	4f 92       	push	r4
    4332:	5f 92       	push	r5
    4334:	6f 92       	push	r6
    4336:	7f 92       	push	r7
    4338:	8f 92       	push	r8
    433a:	9f 92       	push	r9
    433c:	af 92       	push	r10
    433e:	bf 92       	push	r11
    4340:	cf 92       	push	r12
    4342:	df 92       	push	r13
    4344:	ef 92       	push	r14
    4346:	ff 92       	push	r15
    4348:	0f 93       	push	r16
    434a:	1f 93       	push	r17
    434c:	2f 93       	push	r18
    434e:	3f 93       	push	r19
    4350:	4f 93       	push	r20
    4352:	5f 93       	push	r21
    4354:	6f 93       	push	r22
    4356:	7f 93       	push	r23
    4358:	8f 93       	push	r24
    435a:	9f 93       	push	r25
    435c:	af 93       	push	r26
    435e:	bf 93       	push	r27
    4360:	cf 93       	push	r28
    4362:	df 93       	push	r29
    4364:	ef 93       	push	r30
    4366:	ff 93       	push	r31
    4368:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    436c:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    4370:	0d b6       	in	r0, 0x3d	; 61
    4372:	0d 92       	st	X+, r0
    4374:	0e b6       	in	r0, 0x3e	; 62
    4376:	0d 92       	st	X+, r0
    4378:	13 be       	out	0x33, r1	; 51
    437a:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <xTaskIncrementTick>
    437e:	81 11       	cpse	r24, r1
    4380:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <vTaskSwitchContext>
    4384:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <pxCurrentTCB>
    4388:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <pxCurrentTCB+0x1>
    438c:	cd 91       	ld	r28, X+
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	dd 91       	ld	r29, X+
    4392:	de bf       	out	0x3e, r29	; 62
    4394:	ff 91       	pop	r31
    4396:	ef 91       	pop	r30
    4398:	df 91       	pop	r29
    439a:	cf 91       	pop	r28
    439c:	bf 91       	pop	r27
    439e:	af 91       	pop	r26
    43a0:	9f 91       	pop	r25
    43a2:	8f 91       	pop	r24
    43a4:	7f 91       	pop	r23
    43a6:	6f 91       	pop	r22
    43a8:	5f 91       	pop	r21
    43aa:	4f 91       	pop	r20
    43ac:	3f 91       	pop	r19
    43ae:	2f 91       	pop	r18
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	ef 90       	pop	r14
    43b8:	df 90       	pop	r13
    43ba:	cf 90       	pop	r12
    43bc:	bf 90       	pop	r11
    43be:	af 90       	pop	r10
    43c0:	9f 90       	pop	r9
    43c2:	8f 90       	pop	r8
    43c4:	7f 90       	pop	r7
    43c6:	6f 90       	pop	r6
    43c8:	5f 90       	pop	r5
    43ca:	4f 90       	pop	r4
    43cc:	3f 90       	pop	r3
    43ce:	2f 90       	pop	r2
    43d0:	1f 90       	pop	r1
    43d2:	0f 90       	pop	r0
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	0f 90       	pop	r0
    43d8:	08 95       	ret

000043da <__vector_6>:
    43da:	0e 94 90 21 	call	0x4320	; 0x4320 <vPortYieldFromTick>
    43de:	18 95       	reti

000043e0 <_ZN14FreqCountClass5beginEj>:
    43e0:	00 97       	sbiw	r24, 0x00	; 0
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <_ZN14FreqCountClass5beginEj+0x6>
    43e4:	74 c0       	rjmp	.+232    	; 0x44ce <L_130_loop+0xc>
    43e6:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL10gate_index+0x1>
    43ea:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10gate_index>
    43ee:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <_ZL9count_msw+0x1>
    43f2:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <_ZL9count_msw>
    43f6:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <_ZL10count_prev>
    43fa:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <_ZL10count_prev+0x1>
    43fe:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <_ZL10count_prev+0x2>
    4402:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <_ZL10count_prev+0x3>
    4406:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZL11count_ready>
    440a:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    440e:	20 93 bc 04 	sts	0x04BC, r18	; 0x8004bc <_ZL10saveTCCR1A>
    4412:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4416:	20 93 bb 04 	sts	0x04BB, r18	; 0x8004bb <_ZL10saveTCCR1B>
    441a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    441e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4422:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    4426:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    442a:	21 e0       	ldi	r18, 0x01	; 1
    442c:	26 bb       	out	0x16, r18	; 22
    442e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    4432:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4436:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <_ZL10saveTCCR2A>
    443a:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    443e:	20 93 b9 04 	sts	0x04B9, r18	; 0x8004b9 <_ZL10saveTCCR2B>
    4442:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    4446:	22 e0       	ldi	r18, 0x02	; 2
    4448:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    444c:	9c 01       	movw	r18, r24
    444e:	27 70       	andi	r18, 0x07	; 7
    4450:	33 27       	eor	r19, r19
    4452:	23 2b       	or	r18, r19
    4454:	51 f4       	brne	.+20     	; 0x446a <_ZN14FreqCountClass5beginEj+0x8a>
    4456:	43 e0       	ldi	r20, 0x03	; 3
    4458:	96 95       	lsr	r25
    445a:	87 95       	ror	r24
    445c:	4a 95       	dec	r20
    445e:	e1 f7       	brne	.-8      	; 0x4458 <_ZN14FreqCountClass5beginEj+0x78>
    4460:	2c e7       	ldi	r18, 0x7C	; 124
    4462:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    4466:	27 e0       	ldi	r18, 0x07	; 7
    4468:	18 c0       	rjmp	.+48     	; 0x449a <_ZN14FreqCountClass5beginEj+0xba>
    446a:	9c 01       	movw	r18, r24
    446c:	23 70       	andi	r18, 0x03	; 3
    446e:	33 27       	eor	r19, r19
    4470:	23 2b       	or	r18, r19
    4472:	31 f4       	brne	.+12     	; 0x4480 <_ZN14FreqCountClass5beginEj+0xa0>
    4474:	96 95       	lsr	r25
    4476:	87 95       	ror	r24
    4478:	96 95       	lsr	r25
    447a:	87 95       	ror	r24
    447c:	29 ef       	ldi	r18, 0xF9	; 249
    447e:	05 c0       	rjmp	.+10     	; 0x448a <_ZN14FreqCountClass5beginEj+0xaa>
    4480:	80 fd       	sbrc	r24, 0
    4482:	07 c0       	rjmp	.+14     	; 0x4492 <_ZN14FreqCountClass5beginEj+0xb2>
    4484:	96 95       	lsr	r25
    4486:	87 95       	ror	r24
    4488:	2c e7       	ldi	r18, 0x7C	; 124
    448a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    448e:	26 e0       	ldi	r18, 0x06	; 6
    4490:	04 c0       	rjmp	.+8      	; 0x449a <_ZN14FreqCountClass5beginEj+0xba>
    4492:	2c e7       	ldi	r18, 0x7C	; 124
    4494:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    4498:	25 e0       	ldi	r18, 0x05	; 5
    449a:	20 93 b8 04 	sts	0x04B8, r18	; 0x8004b8 <_ZL11startTCCR2B>
    449e:	22 e0       	ldi	r18, 0x02	; 2
    44a0:	27 bb       	out	0x17, r18	; 23
    44a2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    44a6:	90 93 ac 04 	sts	0x04AC, r25	; 0x8004ac <_ZL11gate_length+0x1>
    44aa:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <_ZL11gate_length>
    44ae:	9f b7       	in	r25, 0x3f	; 63
    44b0:	f8 94       	cli
    44b2:	23 bd       	out	0x23, r18	; 35
    44b4:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <_ZL11startTCCR2B>
    44b8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    44bc:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    44c0:	8b e0       	ldi	r24, 0x0B	; 11

000044c2 <L_130_loop>:
    44c2:	81 50       	subi	r24, 0x01	; 1
    44c4:	f1 f7       	brne	.-4      	; 0x44c2 <L_130_loop>
    44c6:	87 e0       	ldi	r24, 0x07	; 7
    44c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    44cc:	9f bf       	out	0x3f, r25	; 63
    44ce:	08 95       	ret

000044d0 <_ZN14FreqCountClass9availableEv>:
    44d0:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL11count_ready>
    44d4:	08 95       	ret

000044d6 <_ZN14FreqCountClass4readEv>:
    44d6:	2f b7       	in	r18, 0x3f	; 63
    44d8:	f8 94       	cli
    44da:	60 91 ae 04 	lds	r22, 0x04AE	; 0x8004ae <_ZL12count_output>
    44de:	70 91 af 04 	lds	r23, 0x04AF	; 0x8004af <_ZL12count_output+0x1>
    44e2:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZL12count_output+0x2>
    44e6:	90 91 b1 04 	lds	r25, 0x04B1	; 0x8004b1 <_ZL12count_output+0x3>
    44ea:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <_ZL11count_ready>
    44ee:	2f bf       	out	0x3f, r18	; 63
    44f0:	08 95       	ret

000044f2 <_ZN14FreqCountClass3endEv>:
    44f2:	e1 eb       	ldi	r30, 0xB1	; 177
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	10 82       	st	Z, r1
    44f8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    44fc:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <_ZL10saveTCCR2A>
    4500:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4504:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <_ZL10saveTCCR2B>
    4508:	80 83       	st	Z, r24
    450a:	e1 e8       	ldi	r30, 0x81	; 129
    450c:	f0 e0       	ldi	r31, 0x00	; 0
    450e:	10 82       	st	Z, r1
    4510:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZL10saveTCCR1A>
    4514:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4518:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <_ZL10saveTCCR1B>
    451c:	80 83       	st	Z, r24
    451e:	08 95       	ret

00004520 <__vector_7>:
    4520:	1f 92       	push	r1
    4522:	0f 92       	push	r0
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	0f 92       	push	r0
    4528:	11 24       	eor	r1, r1
    452a:	0f 93       	push	r16
    452c:	1f 93       	push	r17
    452e:	2f 93       	push	r18
    4530:	3f 93       	push	r19
    4532:	4f 93       	push	r20
    4534:	5f 93       	push	r21
    4536:	6f 93       	push	r22
    4538:	7f 93       	push	r23
    453a:	8f 93       	push	r24
    453c:	9f 93       	push	r25
    453e:	af 93       	push	r26
    4540:	bf 93       	push	r27
    4542:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    4546:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    454a:	b0 9b       	sbis	0x16, 0	; 22
    454c:	0b c0       	rjmp	.+22     	; 0x4564 <__vector_7+0x44>
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	86 bb       	out	0x16, r24	; 22
    4552:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <_ZL9count_msw>
    4556:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <_ZL9count_msw+0x1>
    455a:	01 96       	adiw	r24, 0x01	; 1
    455c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <_ZL9count_msw+0x1>
    4560:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <_ZL9count_msw>
    4564:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <_ZL10gate_index>
    4568:	90 91 aa 04 	lds	r25, 0x04AA	; 0x8004aa <_ZL10gate_index+0x1>
    456c:	01 96       	adiw	r24, 0x01	; 1
    456e:	40 91 ab 04 	lds	r20, 0x04AB	; 0x8004ab <_ZL11gate_length>
    4572:	50 91 ac 04 	lds	r21, 0x04AC	; 0x8004ac <_ZL11gate_length+0x1>
    4576:	84 17       	cp	r24, r20
    4578:	95 07       	cpc	r25, r21
    457a:	98 f1       	brcs	.+102    	; 0x45e2 <__vector_7+0xc2>
    457c:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL10gate_index+0x1>
    4580:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10gate_index>
    4584:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <_ZL9count_msw>
    4588:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <_ZL9count_msw+0x1>
    458c:	a0 e0       	ldi	r26, 0x00	; 0
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	dc 01       	movw	r26, r24
    4592:	99 27       	eor	r25, r25
    4594:	88 27       	eor	r24, r24
    4596:	82 0f       	add	r24, r18
    4598:	93 1f       	adc	r25, r19
    459a:	a1 1d       	adc	r26, r1
    459c:	b1 1d       	adc	r27, r1
    459e:	40 91 b2 04 	lds	r20, 0x04B2	; 0x8004b2 <_ZL10count_prev>
    45a2:	50 91 b3 04 	lds	r21, 0x04B3	; 0x8004b3 <_ZL10count_prev+0x1>
    45a6:	60 91 b4 04 	lds	r22, 0x04B4	; 0x8004b4 <_ZL10count_prev+0x2>
    45aa:	70 91 b5 04 	lds	r23, 0x04B5	; 0x8004b5 <_ZL10count_prev+0x3>
    45ae:	8c 01       	movw	r16, r24
    45b0:	9d 01       	movw	r18, r26
    45b2:	04 1b       	sub	r16, r20
    45b4:	15 0b       	sbc	r17, r21
    45b6:	26 0b       	sbc	r18, r22
    45b8:	37 0b       	sbc	r19, r23
    45ba:	00 93 ae 04 	sts	0x04AE, r16	; 0x8004ae <_ZL12count_output>
    45be:	10 93 af 04 	sts	0x04AF, r17	; 0x8004af <_ZL12count_output+0x1>
    45c2:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <_ZL12count_output+0x2>
    45c6:	30 93 b1 04 	sts	0x04B1, r19	; 0x8004b1 <_ZL12count_output+0x3>
    45ca:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <_ZL10count_prev>
    45ce:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <_ZL10count_prev+0x1>
    45d2:	a0 93 b4 04 	sts	0x04B4, r26	; 0x8004b4 <_ZL10count_prev+0x2>
    45d6:	b0 93 b5 04 	sts	0x04B5, r27	; 0x8004b5 <_ZL10count_prev+0x3>
    45da:	81 e0       	ldi	r24, 0x01	; 1
    45dc:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <_ZL11count_ready>
    45e0:	04 c0       	rjmp	.+8      	; 0x45ea <__vector_7+0xca>
    45e2:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <_ZL10gate_index+0x1>
    45e6:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <_ZL10gate_index>
    45ea:	bf 91       	pop	r27
    45ec:	af 91       	pop	r26
    45ee:	9f 91       	pop	r25
    45f0:	8f 91       	pop	r24
    45f2:	7f 91       	pop	r23
    45f4:	6f 91       	pop	r22
    45f6:	5f 91       	pop	r21
    45f8:	4f 91       	pop	r20
    45fa:	3f 91       	pop	r19
    45fc:	2f 91       	pop	r18
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	0f 90       	pop	r0
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	0f 90       	pop	r0
    4608:	1f 90       	pop	r1
    460a:	18 95       	reti

0000460c <__unordsf2>:
    460c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_cmp>
    4610:	88 0b       	sbc	r24, r24
    4612:	99 0b       	sbc	r25, r25
    4614:	08 95       	ret

00004616 <__divmodhi4>:
    4616:	97 fb       	bst	r25, 7
    4618:	07 2e       	mov	r0, r23
    461a:	16 f4       	brtc	.+4      	; 0x4620 <__divmodhi4+0xa>
    461c:	00 94       	com	r0
    461e:	07 d0       	rcall	.+14     	; 0x462e <__divmodhi4_neg1>
    4620:	77 fd       	sbrc	r23, 7
    4622:	09 d0       	rcall	.+18     	; 0x4636 <__divmodhi4_neg2>
    4624:	0e 94 71 23 	call	0x46e2	; 0x46e2 <__udivmodhi4>
    4628:	07 fc       	sbrc	r0, 7
    462a:	05 d0       	rcall	.+10     	; 0x4636 <__divmodhi4_neg2>
    462c:	3e f4       	brtc	.+14     	; 0x463c <__divmodhi4_exit>

0000462e <__divmodhi4_neg1>:
    462e:	90 95       	com	r25
    4630:	81 95       	neg	r24
    4632:	9f 4f       	sbci	r25, 0xFF	; 255
    4634:	08 95       	ret

00004636 <__divmodhi4_neg2>:
    4636:	70 95       	com	r23
    4638:	61 95       	neg	r22
    463a:	7f 4f       	sbci	r23, 0xFF	; 255

0000463c <__divmodhi4_exit>:
    463c:	08 95       	ret

0000463e <__udivmodsi4>:
    463e:	a1 e2       	ldi	r26, 0x21	; 33
    4640:	1a 2e       	mov	r1, r26
    4642:	aa 1b       	sub	r26, r26
    4644:	bb 1b       	sub	r27, r27
    4646:	fd 01       	movw	r30, r26
    4648:	0d c0       	rjmp	.+26     	; 0x4664 <__udivmodsi4_ep>

0000464a <__udivmodsi4_loop>:
    464a:	aa 1f       	adc	r26, r26
    464c:	bb 1f       	adc	r27, r27
    464e:	ee 1f       	adc	r30, r30
    4650:	ff 1f       	adc	r31, r31
    4652:	a2 17       	cp	r26, r18
    4654:	b3 07       	cpc	r27, r19
    4656:	e4 07       	cpc	r30, r20
    4658:	f5 07       	cpc	r31, r21
    465a:	20 f0       	brcs	.+8      	; 0x4664 <__udivmodsi4_ep>
    465c:	a2 1b       	sub	r26, r18
    465e:	b3 0b       	sbc	r27, r19
    4660:	e4 0b       	sbc	r30, r20
    4662:	f5 0b       	sbc	r31, r21

00004664 <__udivmodsi4_ep>:
    4664:	66 1f       	adc	r22, r22
    4666:	77 1f       	adc	r23, r23
    4668:	88 1f       	adc	r24, r24
    466a:	99 1f       	adc	r25, r25
    466c:	1a 94       	dec	r1
    466e:	69 f7       	brne	.-38     	; 0x464a <__udivmodsi4_loop>
    4670:	60 95       	com	r22
    4672:	70 95       	com	r23
    4674:	80 95       	com	r24
    4676:	90 95       	com	r25
    4678:	9b 01       	movw	r18, r22
    467a:	ac 01       	movw	r20, r24
    467c:	bd 01       	movw	r22, r26
    467e:	cf 01       	movw	r24, r30
    4680:	08 95       	ret

00004682 <__divmodsi4>:
    4682:	05 2e       	mov	r0, r21
    4684:	97 fb       	bst	r25, 7
    4686:	1e f4       	brtc	.+6      	; 0x468e <__divmodsi4+0xc>
    4688:	00 94       	com	r0
    468a:	0e 94 58 23 	call	0x46b0	; 0x46b0 <__negsi2>
    468e:	57 fd       	sbrc	r21, 7
    4690:	07 d0       	rcall	.+14     	; 0x46a0 <__divmodsi4_neg2>
    4692:	0e 94 1f 23 	call	0x463e	; 0x463e <__udivmodsi4>
    4696:	07 fc       	sbrc	r0, 7
    4698:	03 d0       	rcall	.+6      	; 0x46a0 <__divmodsi4_neg2>
    469a:	4e f4       	brtc	.+18     	; 0x46ae <__divmodsi4_exit>
    469c:	0c 94 58 23 	jmp	0x46b0	; 0x46b0 <__negsi2>

000046a0 <__divmodsi4_neg2>:
    46a0:	50 95       	com	r21
    46a2:	40 95       	com	r20
    46a4:	30 95       	com	r19
    46a6:	21 95       	neg	r18
    46a8:	3f 4f       	sbci	r19, 0xFF	; 255
    46aa:	4f 4f       	sbci	r20, 0xFF	; 255
    46ac:	5f 4f       	sbci	r21, 0xFF	; 255

000046ae <__divmodsi4_exit>:
    46ae:	08 95       	ret

000046b0 <__negsi2>:
    46b0:	90 95       	com	r25
    46b2:	80 95       	com	r24
    46b4:	70 95       	com	r23
    46b6:	61 95       	neg	r22
    46b8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ba:	8f 4f       	sbci	r24, 0xFF	; 255
    46bc:	9f 4f       	sbci	r25, 0xFF	; 255
    46be:	08 95       	ret

000046c0 <__tablejump2__>:
    46c0:	ee 0f       	add	r30, r30
    46c2:	ff 1f       	adc	r31, r31
    46c4:	05 90       	lpm	r0, Z+
    46c6:	f4 91       	lpm	r31, Z
    46c8:	e0 2d       	mov	r30, r0
    46ca:	09 94       	ijmp

000046cc <__muluhisi3>:
    46cc:	0e 94 85 23 	call	0x470a	; 0x470a <__umulhisi3>
    46d0:	a5 9f       	mul	r26, r21
    46d2:	90 0d       	add	r25, r0
    46d4:	b4 9f       	mul	r27, r20
    46d6:	90 0d       	add	r25, r0
    46d8:	a4 9f       	mul	r26, r20
    46da:	80 0d       	add	r24, r0
    46dc:	91 1d       	adc	r25, r1
    46de:	11 24       	eor	r1, r1
    46e0:	08 95       	ret

000046e2 <__udivmodhi4>:
    46e2:	aa 1b       	sub	r26, r26
    46e4:	bb 1b       	sub	r27, r27
    46e6:	51 e1       	ldi	r21, 0x11	; 17
    46e8:	07 c0       	rjmp	.+14     	; 0x46f8 <__udivmodhi4_ep>

000046ea <__udivmodhi4_loop>:
    46ea:	aa 1f       	adc	r26, r26
    46ec:	bb 1f       	adc	r27, r27
    46ee:	a6 17       	cp	r26, r22
    46f0:	b7 07       	cpc	r27, r23
    46f2:	10 f0       	brcs	.+4      	; 0x46f8 <__udivmodhi4_ep>
    46f4:	a6 1b       	sub	r26, r22
    46f6:	b7 0b       	sbc	r27, r23

000046f8 <__udivmodhi4_ep>:
    46f8:	88 1f       	adc	r24, r24
    46fa:	99 1f       	adc	r25, r25
    46fc:	5a 95       	dec	r21
    46fe:	a9 f7       	brne	.-22     	; 0x46ea <__udivmodhi4_loop>
    4700:	80 95       	com	r24
    4702:	90 95       	com	r25
    4704:	bc 01       	movw	r22, r24
    4706:	cd 01       	movw	r24, r26
    4708:	08 95       	ret

0000470a <__umulhisi3>:
    470a:	a2 9f       	mul	r26, r18
    470c:	b0 01       	movw	r22, r0
    470e:	b3 9f       	mul	r27, r19
    4710:	c0 01       	movw	r24, r0
    4712:	a3 9f       	mul	r26, r19
    4714:	70 0d       	add	r23, r0
    4716:	81 1d       	adc	r24, r1
    4718:	11 24       	eor	r1, r1
    471a:	91 1d       	adc	r25, r1
    471c:	b2 9f       	mul	r27, r18
    471e:	70 0d       	add	r23, r0
    4720:	81 1d       	adc	r24, r1
    4722:	11 24       	eor	r1, r1
    4724:	91 1d       	adc	r25, r1
    4726:	08 95       	ret

00004728 <malloc>:
    4728:	0f 93       	push	r16
    472a:	1f 93       	push	r17
    472c:	cf 93       	push	r28
    472e:	df 93       	push	r29
    4730:	82 30       	cpi	r24, 0x02	; 2
    4732:	91 05       	cpc	r25, r1
    4734:	10 f4       	brcc	.+4      	; 0x473a <malloc+0x12>
    4736:	82 e0       	ldi	r24, 0x02	; 2
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	e0 91 bf 04 	lds	r30, 0x04BF	; 0x8004bf <__flp>
    473e:	f0 91 c0 04 	lds	r31, 0x04C0	; 0x8004c0 <__flp+0x1>
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	a0 e0       	ldi	r26, 0x00	; 0
    4748:	b0 e0       	ldi	r27, 0x00	; 0
    474a:	30 97       	sbiw	r30, 0x00	; 0
    474c:	19 f1       	breq	.+70     	; 0x4794 <malloc+0x6c>
    474e:	40 81       	ld	r20, Z
    4750:	51 81       	ldd	r21, Z+1	; 0x01
    4752:	02 81       	ldd	r16, Z+2	; 0x02
    4754:	13 81       	ldd	r17, Z+3	; 0x03
    4756:	48 17       	cp	r20, r24
    4758:	59 07       	cpc	r21, r25
    475a:	c8 f0       	brcs	.+50     	; 0x478e <malloc+0x66>
    475c:	84 17       	cp	r24, r20
    475e:	95 07       	cpc	r25, r21
    4760:	69 f4       	brne	.+26     	; 0x477c <malloc+0x54>
    4762:	10 97       	sbiw	r26, 0x00	; 0
    4764:	31 f0       	breq	.+12     	; 0x4772 <malloc+0x4a>
    4766:	12 96       	adiw	r26, 0x02	; 2
    4768:	0c 93       	st	X, r16
    476a:	12 97       	sbiw	r26, 0x02	; 2
    476c:	13 96       	adiw	r26, 0x03	; 3
    476e:	1c 93       	st	X, r17
    4770:	27 c0       	rjmp	.+78     	; 0x47c0 <malloc+0x98>
    4772:	00 93 bf 04 	sts	0x04BF, r16	; 0x8004bf <__flp>
    4776:	10 93 c0 04 	sts	0x04C0, r17	; 0x8004c0 <__flp+0x1>
    477a:	22 c0       	rjmp	.+68     	; 0x47c0 <malloc+0x98>
    477c:	21 15       	cp	r18, r1
    477e:	31 05       	cpc	r19, r1
    4780:	19 f0       	breq	.+6      	; 0x4788 <malloc+0x60>
    4782:	42 17       	cp	r20, r18
    4784:	53 07       	cpc	r21, r19
    4786:	18 f4       	brcc	.+6      	; 0x478e <malloc+0x66>
    4788:	9a 01       	movw	r18, r20
    478a:	bd 01       	movw	r22, r26
    478c:	ef 01       	movw	r28, r30
    478e:	df 01       	movw	r26, r30
    4790:	f8 01       	movw	r30, r16
    4792:	db cf       	rjmp	.-74     	; 0x474a <malloc+0x22>
    4794:	21 15       	cp	r18, r1
    4796:	31 05       	cpc	r19, r1
    4798:	f9 f0       	breq	.+62     	; 0x47d8 <malloc+0xb0>
    479a:	28 1b       	sub	r18, r24
    479c:	39 0b       	sbc	r19, r25
    479e:	24 30       	cpi	r18, 0x04	; 4
    47a0:	31 05       	cpc	r19, r1
    47a2:	80 f4       	brcc	.+32     	; 0x47c4 <malloc+0x9c>
    47a4:	8a 81       	ldd	r24, Y+2	; 0x02
    47a6:	9b 81       	ldd	r25, Y+3	; 0x03
    47a8:	61 15       	cp	r22, r1
    47aa:	71 05       	cpc	r23, r1
    47ac:	21 f0       	breq	.+8      	; 0x47b6 <malloc+0x8e>
    47ae:	fb 01       	movw	r30, r22
    47b0:	93 83       	std	Z+3, r25	; 0x03
    47b2:	82 83       	std	Z+2, r24	; 0x02
    47b4:	04 c0       	rjmp	.+8      	; 0x47be <malloc+0x96>
    47b6:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <__flp+0x1>
    47ba:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <__flp>
    47be:	fe 01       	movw	r30, r28
    47c0:	32 96       	adiw	r30, 0x02	; 2
    47c2:	44 c0       	rjmp	.+136    	; 0x484c <malloc+0x124>
    47c4:	fe 01       	movw	r30, r28
    47c6:	e2 0f       	add	r30, r18
    47c8:	f3 1f       	adc	r31, r19
    47ca:	81 93       	st	Z+, r24
    47cc:	91 93       	st	Z+, r25
    47ce:	22 50       	subi	r18, 0x02	; 2
    47d0:	31 09       	sbc	r19, r1
    47d2:	39 83       	std	Y+1, r19	; 0x01
    47d4:	28 83       	st	Y, r18
    47d6:	3a c0       	rjmp	.+116    	; 0x484c <malloc+0x124>
    47d8:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <__brkval>
    47dc:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <__brkval+0x1>
    47e0:	23 2b       	or	r18, r19
    47e2:	41 f4       	brne	.+16     	; 0x47f4 <malloc+0xcc>
    47e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    47e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    47ec:	30 93 be 04 	sts	0x04BE, r19	; 0x8004be <__brkval+0x1>
    47f0:	20 93 bd 04 	sts	0x04BD, r18	; 0x8004bd <__brkval>
    47f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    47f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    47fc:	21 15       	cp	r18, r1
    47fe:	31 05       	cpc	r19, r1
    4800:	41 f4       	brne	.+16     	; 0x4812 <malloc+0xea>
    4802:	2d b7       	in	r18, 0x3d	; 61
    4804:	3e b7       	in	r19, 0x3e	; 62
    4806:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    480a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    480e:	24 1b       	sub	r18, r20
    4810:	35 0b       	sbc	r19, r21
    4812:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <__brkval>
    4816:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <__brkval+0x1>
    481a:	e2 17       	cp	r30, r18
    481c:	f3 07       	cpc	r31, r19
    481e:	a0 f4       	brcc	.+40     	; 0x4848 <malloc+0x120>
    4820:	2e 1b       	sub	r18, r30
    4822:	3f 0b       	sbc	r19, r31
    4824:	28 17       	cp	r18, r24
    4826:	39 07       	cpc	r19, r25
    4828:	78 f0       	brcs	.+30     	; 0x4848 <malloc+0x120>
    482a:	ac 01       	movw	r20, r24
    482c:	4e 5f       	subi	r20, 0xFE	; 254
    482e:	5f 4f       	sbci	r21, 0xFF	; 255
    4830:	24 17       	cp	r18, r20
    4832:	35 07       	cpc	r19, r21
    4834:	48 f0       	brcs	.+18     	; 0x4848 <malloc+0x120>
    4836:	4e 0f       	add	r20, r30
    4838:	5f 1f       	adc	r21, r31
    483a:	50 93 be 04 	sts	0x04BE, r21	; 0x8004be <__brkval+0x1>
    483e:	40 93 bd 04 	sts	0x04BD, r20	; 0x8004bd <__brkval>
    4842:	81 93       	st	Z+, r24
    4844:	91 93       	st	Z+, r25
    4846:	02 c0       	rjmp	.+4      	; 0x484c <malloc+0x124>
    4848:	e0 e0       	ldi	r30, 0x00	; 0
    484a:	f0 e0       	ldi	r31, 0x00	; 0
    484c:	cf 01       	movw	r24, r30
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	1f 91       	pop	r17
    4854:	0f 91       	pop	r16
    4856:	08 95       	ret

00004858 <free>:
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	00 97       	sbiw	r24, 0x00	; 0
    485e:	09 f4       	brne	.+2      	; 0x4862 <free+0xa>
    4860:	81 c0       	rjmp	.+258    	; 0x4964 <free+0x10c>
    4862:	fc 01       	movw	r30, r24
    4864:	32 97       	sbiw	r30, 0x02	; 2
    4866:	13 82       	std	Z+3, r1	; 0x03
    4868:	12 82       	std	Z+2, r1	; 0x02
    486a:	a0 91 bf 04 	lds	r26, 0x04BF	; 0x8004bf <__flp>
    486e:	b0 91 c0 04 	lds	r27, 0x04C0	; 0x8004c0 <__flp+0x1>
    4872:	10 97       	sbiw	r26, 0x00	; 0
    4874:	81 f4       	brne	.+32     	; 0x4896 <free+0x3e>
    4876:	20 81       	ld	r18, Z
    4878:	31 81       	ldd	r19, Z+1	; 0x01
    487a:	82 0f       	add	r24, r18
    487c:	93 1f       	adc	r25, r19
    487e:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <__brkval>
    4882:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <__brkval+0x1>
    4886:	28 17       	cp	r18, r24
    4888:	39 07       	cpc	r19, r25
    488a:	51 f5       	brne	.+84     	; 0x48e0 <free+0x88>
    488c:	f0 93 be 04 	sts	0x04BE, r31	; 0x8004be <__brkval+0x1>
    4890:	e0 93 bd 04 	sts	0x04BD, r30	; 0x8004bd <__brkval>
    4894:	67 c0       	rjmp	.+206    	; 0x4964 <free+0x10c>
    4896:	ed 01       	movw	r28, r26
    4898:	20 e0       	ldi	r18, 0x00	; 0
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	ce 17       	cp	r28, r30
    489e:	df 07       	cpc	r29, r31
    48a0:	40 f4       	brcc	.+16     	; 0x48b2 <free+0x5a>
    48a2:	4a 81       	ldd	r20, Y+2	; 0x02
    48a4:	5b 81       	ldd	r21, Y+3	; 0x03
    48a6:	9e 01       	movw	r18, r28
    48a8:	41 15       	cp	r20, r1
    48aa:	51 05       	cpc	r21, r1
    48ac:	f1 f0       	breq	.+60     	; 0x48ea <free+0x92>
    48ae:	ea 01       	movw	r28, r20
    48b0:	f5 cf       	rjmp	.-22     	; 0x489c <free+0x44>
    48b2:	d3 83       	std	Z+3, r29	; 0x03
    48b4:	c2 83       	std	Z+2, r28	; 0x02
    48b6:	40 81       	ld	r20, Z
    48b8:	51 81       	ldd	r21, Z+1	; 0x01
    48ba:	84 0f       	add	r24, r20
    48bc:	95 1f       	adc	r25, r21
    48be:	c8 17       	cp	r28, r24
    48c0:	d9 07       	cpc	r29, r25
    48c2:	59 f4       	brne	.+22     	; 0x48da <free+0x82>
    48c4:	88 81       	ld	r24, Y
    48c6:	99 81       	ldd	r25, Y+1	; 0x01
    48c8:	84 0f       	add	r24, r20
    48ca:	95 1f       	adc	r25, r21
    48cc:	02 96       	adiw	r24, 0x02	; 2
    48ce:	91 83       	std	Z+1, r25	; 0x01
    48d0:	80 83       	st	Z, r24
    48d2:	8a 81       	ldd	r24, Y+2	; 0x02
    48d4:	9b 81       	ldd	r25, Y+3	; 0x03
    48d6:	93 83       	std	Z+3, r25	; 0x03
    48d8:	82 83       	std	Z+2, r24	; 0x02
    48da:	21 15       	cp	r18, r1
    48dc:	31 05       	cpc	r19, r1
    48de:	29 f4       	brne	.+10     	; 0x48ea <free+0x92>
    48e0:	f0 93 c0 04 	sts	0x04C0, r31	; 0x8004c0 <__flp+0x1>
    48e4:	e0 93 bf 04 	sts	0x04BF, r30	; 0x8004bf <__flp>
    48e8:	3d c0       	rjmp	.+122    	; 0x4964 <free+0x10c>
    48ea:	e9 01       	movw	r28, r18
    48ec:	fb 83       	std	Y+3, r31	; 0x03
    48ee:	ea 83       	std	Y+2, r30	; 0x02
    48f0:	49 91       	ld	r20, Y+
    48f2:	59 91       	ld	r21, Y+
    48f4:	c4 0f       	add	r28, r20
    48f6:	d5 1f       	adc	r29, r21
    48f8:	ec 17       	cp	r30, r28
    48fa:	fd 07       	cpc	r31, r29
    48fc:	61 f4       	brne	.+24     	; 0x4916 <free+0xbe>
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	84 0f       	add	r24, r20
    4904:	95 1f       	adc	r25, r21
    4906:	02 96       	adiw	r24, 0x02	; 2
    4908:	e9 01       	movw	r28, r18
    490a:	99 83       	std	Y+1, r25	; 0x01
    490c:	88 83       	st	Y, r24
    490e:	82 81       	ldd	r24, Z+2	; 0x02
    4910:	93 81       	ldd	r25, Z+3	; 0x03
    4912:	9b 83       	std	Y+3, r25	; 0x03
    4914:	8a 83       	std	Y+2, r24	; 0x02
    4916:	e0 e0       	ldi	r30, 0x00	; 0
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	12 96       	adiw	r26, 0x02	; 2
    491c:	8d 91       	ld	r24, X+
    491e:	9c 91       	ld	r25, X
    4920:	13 97       	sbiw	r26, 0x03	; 3
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	19 f0       	breq	.+6      	; 0x492c <free+0xd4>
    4926:	fd 01       	movw	r30, r26
    4928:	dc 01       	movw	r26, r24
    492a:	f7 cf       	rjmp	.-18     	; 0x491a <free+0xc2>
    492c:	8d 91       	ld	r24, X+
    492e:	9c 91       	ld	r25, X
    4930:	11 97       	sbiw	r26, 0x01	; 1
    4932:	9d 01       	movw	r18, r26
    4934:	2e 5f       	subi	r18, 0xFE	; 254
    4936:	3f 4f       	sbci	r19, 0xFF	; 255
    4938:	82 0f       	add	r24, r18
    493a:	93 1f       	adc	r25, r19
    493c:	20 91 bd 04 	lds	r18, 0x04BD	; 0x8004bd <__brkval>
    4940:	30 91 be 04 	lds	r19, 0x04BE	; 0x8004be <__brkval+0x1>
    4944:	28 17       	cp	r18, r24
    4946:	39 07       	cpc	r19, r25
    4948:	69 f4       	brne	.+26     	; 0x4964 <free+0x10c>
    494a:	30 97       	sbiw	r30, 0x00	; 0
    494c:	29 f4       	brne	.+10     	; 0x4958 <free+0x100>
    494e:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__flp+0x1>
    4952:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <__flp>
    4956:	02 c0       	rjmp	.+4      	; 0x495c <free+0x104>
    4958:	13 82       	std	Z+3, r1	; 0x03
    495a:	12 82       	std	Z+2, r1	; 0x02
    495c:	b0 93 be 04 	sts	0x04BE, r27	; 0x8004be <__brkval+0x1>
    4960:	a0 93 bd 04 	sts	0x04BD, r26	; 0x8004bd <__brkval>
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	08 95       	ret

0000496a <memcpy>:
    496a:	fb 01       	movw	r30, r22
    496c:	dc 01       	movw	r26, r24
    496e:	02 c0       	rjmp	.+4      	; 0x4974 <memcpy+0xa>
    4970:	01 90       	ld	r0, Z+
    4972:	0d 92       	st	X+, r0
    4974:	41 50       	subi	r20, 0x01	; 1
    4976:	50 40       	sbci	r21, 0x00	; 0
    4978:	d8 f7       	brcc	.-10     	; 0x4970 <memcpy+0x6>
    497a:	08 95       	ret

0000497c <memset>:
    497c:	dc 01       	movw	r26, r24
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <memset+0x6>
    4980:	6d 93       	st	X+, r22
    4982:	41 50       	subi	r20, 0x01	; 1
    4984:	50 40       	sbci	r21, 0x00	; 0
    4986:	e0 f7       	brcc	.-8      	; 0x4980 <memset+0x4>
    4988:	08 95       	ret

0000498a <eeprom_read_byte>:
    498a:	f9 99       	sbic	0x1f, 1	; 31
    498c:	fe cf       	rjmp	.-4      	; 0x498a <eeprom_read_byte>
    498e:	92 bd       	out	0x22, r25	; 34
    4990:	81 bd       	out	0x21, r24	; 33
    4992:	f8 9a       	sbi	0x1f, 0	; 31
    4994:	99 27       	eor	r25, r25
    4996:	80 b5       	in	r24, 0x20	; 32
    4998:	08 95       	ret

0000499a <eeprom_write_byte>:
    499a:	26 2f       	mov	r18, r22

0000499c <eeprom_write_r18>:
    499c:	f9 99       	sbic	0x1f, 1	; 31
    499e:	fe cf       	rjmp	.-4      	; 0x499c <eeprom_write_r18>
    49a0:	1f ba       	out	0x1f, r1	; 31
    49a2:	92 bd       	out	0x22, r25	; 34
    49a4:	81 bd       	out	0x21, r24	; 33
    49a6:	20 bd       	out	0x20, r18	; 32
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	fa 9a       	sbi	0x1f, 2	; 31
    49ae:	f9 9a       	sbi	0x1f, 1	; 31
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	01 96       	adiw	r24, 0x01	; 1
    49b4:	08 95       	ret

000049b6 <__do_global_dtors>:
    49b6:	10 e0       	ldi	r17, 0x00	; 0
    49b8:	c8 e8       	ldi	r28, 0x88	; 136
    49ba:	d0 e0       	ldi	r29, 0x00	; 0
    49bc:	04 c0       	rjmp	.+8      	; 0x49c6 <__do_global_dtors+0x10>
    49be:	fe 01       	movw	r30, r28
    49c0:	0e 94 60 23 	call	0x46c0	; 0x46c0 <__tablejump2__>
    49c4:	21 96       	adiw	r28, 0x01	; 1
    49c6:	c9 38       	cpi	r28, 0x89	; 137
    49c8:	d1 07       	cpc	r29, r17
    49ca:	c9 f7       	brne	.-14     	; 0x49be <__do_global_dtors+0x8>
    49cc:	f8 94       	cli

000049ce <__stop_program>:
    49ce:	ff cf       	rjmp	.-2      	; 0x49ce <__stop_program>
