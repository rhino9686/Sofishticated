
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000142  00800100  00003c7e  00003d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000273  00800242  00800242  00003e54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00003ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001307c  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a4e  00000000  00000000  00017924  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000678b  00000000  00000000  0001b372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e5c  00000000  00000000  00021b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b8f  00000000  00000000  0002395c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b62d  00000000  00000000  000284eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  00033b18  2**0
=======
  0 .data         0000013c  00800100  000049da  00004a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000049da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000279  0080023c  0080023c  00004baa  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00004baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a10  00000000  00000000  00004c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000139e9  00000000  00000000  00005660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc1  00000000  00000000  00019049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006909  00000000  00000000  0001cd0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ec8  00000000  00000000  00023614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b27  00000000  00000000  000254dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b7b7  00000000  00000000  0002a003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  000357ba  2**0
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
<<<<<<< HEAD
       0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__dtors_end>
       4:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__vector_1>
       8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_2>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_6>
      1c:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__vector_7>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_18>
      4c:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	4f 17       	cp	r20, r31
      6a:	4f 17       	cp	r20, r31
      6c:	4f 17       	cp	r20, r31
      6e:	8e 17       	cp	r24, r30
      70:	79 17       	cp	r23, r25
      72:	88 17       	cp	r24, r24
      74:	4f 17       	cp	r20, r31
      76:	4f 17       	cp	r20, r31
      78:	8e 17       	cp	r24, r30
      7a:	79 17       	cp	r23, r25
=======
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__dtors_end>
       4:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_1>
       8:	0c 94 be 10 	jmp	0x217c	; 0x217c <__vector_2>
       c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      10:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      14:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      18:	0c 94 f2 21 	jmp	0x43e4	; 0x43e4 <__vector_6>
      1c:	0c 94 95 22 	jmp	0x452a	; 0x452a <__vector_7>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__vector_16>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_18>
      4c:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_19>
      50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      54:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	fd 1d       	adc	r31, r13
      6a:	fd 1d       	adc	r31, r13
      6c:	fd 1d       	adc	r31, r13
      6e:	3c 1e       	adc	r3, r28
      70:	27 1e       	adc	r2, r23
      72:	36 1e       	adc	r3, r22
      74:	fd 1d       	adc	r31, r13
      76:	fd 1d       	adc	r31, r13
      78:	3c 1e       	adc	r3, r28
      7a:	27 1e       	adc	r2, r23
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

<<<<<<< HEAD
00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a2:	00 00 00 00                                         ....

000000a6 <digital_pin_to_bit_mask_PGM>:
      a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b6:	04 08 10 20                                         ... 

000000ba <digital_pin_to_port_PGM>:
      ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ca:	03 03 03 03                                         ....

000000ce <port_to_input_PGM>:
      ce:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d8 <port_to_output_PGM>:
      d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e2 <port_to_mode_PGM>:
      e2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ec <__ctors_start>:
      ec:	69 05       	cpc	r22, r9
      ee:	91 09       	sbc	r25, r1

000000f0 <__ctors_end>:
      f0:	79 05       	cpc	r23, r9

000000f2 <__dtors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d8 e0       	ldi	r29, 0x08	; 8
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
      fe:	12 e0       	ldi	r17, 0x02	; 2
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	ee e7       	ldi	r30, 0x7E	; 126
     106:	fc e3       	ldi	r31, 0x3C	; 60
     108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
     10a:	05 90       	lpm	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	a2 34       	cpi	r26, 0x42	; 66
     110:	b1 07       	cpc	r27, r17
     112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
     114:	24 e0       	ldi	r18, 0x04	; 4
     116:	a2 e4       	ldi	r26, 0x42	; 66
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	a5 3b       	cpi	r26, 0xB5	; 181
     120:	b2 07       	cpc	r27, r18
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>

00000124 <__do_global_ctors>:
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	c8 e7       	ldi	r28, 0x78	; 120
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_global_ctors+0x10>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	fe 01       	movw	r30, r28
     130:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
     134:	c6 37       	cpi	r28, 0x76	; 118
     136:	d1 07       	cpc	r29, r17
     138:	c9 f7       	brne	.-14     	; 0x12c <__do_global_ctors+0x8>
     13a:	0e 94 be 09 	call	0x137c	; 0x137c <main>
     13e:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__do_global_dtors>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <_ZN11EEPROMClass4readEi.isra.0>:
=======
00000092 <_ZL15dscrc2x16_table>:
      92:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      a2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000b2 <digital_pin_to_timer_PGM>:
      b2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c2:	00 00 00 00                                         ....

000000c6 <digital_pin_to_bit_mask_PGM>:
      c6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d6:	04 08 10 20                                         ... 

000000da <digital_pin_to_port_PGM>:
      da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ea:	03 03 03 03                                         ....

000000ee <port_to_input_PGM>:
      ee:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f8 <port_to_output_PGM>:
      f8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000102 <port_to_mode_PGM>:
     102:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010c <__ctors_start>:
     10c:	20 08       	sbc	r2, r0
     10e:	45 0a       	sbc	r4, r21
     110:	2e 0e       	add	r2, r30

00000112 <__ctors_end>:
     112:	2c 08       	sbc	r2, r12
     114:	49 0a       	sbc	r4, r25

00000116 <__dtors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	ea ed       	ldi	r30, 0xDA	; 218
     12a:	f9 e4       	ldi	r31, 0x49	; 73
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	ac 33       	cpi	r26, 0x3C	; 60
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	24 e0       	ldi	r18, 0x04	; 4
     13a:	ac e3       	ldi	r26, 0x3C	; 60
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a5 3b       	cpi	r26, 0xB5	; 181
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>

00000148 <__do_global_ctors>:
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	c9 e8       	ldi	r28, 0x89	; 137
     14c:	d0 e0       	ldi	r29, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <__do_global_ctors+0x10>
     150:	21 97       	sbiw	r28, 0x01	; 1
     152:	fe 01       	movw	r30, r28
     154:	0e 94 65 23 	call	0x46ca	; 0x46ca <__tablejump2__>
     158:	c6 38       	cpi	r28, 0x86	; 134
     15a:	d1 07       	cpc	r29, r17
     15c:	c9 f7       	brne	.-14     	; 0x150 <__do_global_ctors+0x8>
     15e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <main>
     162:	0c 94 e0 24 	jmp	0x49c0	; 0x49c0 <__do_global_dtors>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <_ZN11EEPROMClass4readEi.isra.0>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
<<<<<<< HEAD
     146:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <eeprom_read_byte>

0000014a <_ZN10DFRobot_PHC1Ev>:
=======
     16a:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <eeprom_read_byte>

0000016e <_ZN10DFRobot_PHC1Ev>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);}

#define PHVALUEADDR 0x00    //the start address of the pH calibration parameters stored in the EEPROM


DFRobot_PH::DFRobot_PH()
<<<<<<< HEAD
     14a:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	a8 ec       	ldi	r26, 0xC8	; 200
     152:	b1 e4       	ldi	r27, 0x41	; 65
     154:	80 8b       	std	Z+16, r24	; 0x10
     156:	91 8b       	std	Z+17, r25	; 0x11
     158:	a2 8b       	std	Z+18, r26	; 0x12
     15a:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	a0 ee       	ldi	r26, 0xE0	; 224
     162:	b0 e4       	ldi	r27, 0x40	; 64
     164:	80 83       	st	Z, r24
     166:	91 83       	std	Z+1, r25	; 0x01
     168:	a2 83       	std	Z+2, r26	; 0x02
     16a:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     16c:	84 e1       	ldi	r24, 0x14	; 20
     16e:	9e e0       	ldi	r25, 0x0E	; 14
     170:	ae ef       	ldi	r26, 0xFE	; 254
     172:	b4 e4       	ldi	r27, 0x44	; 68
     174:	84 83       	std	Z+4, r24	; 0x04
     176:	95 83       	std	Z+5, r25	; 0x05
     178:	a6 83       	std	Z+6, r26	; 0x06
     17a:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e8       	ldi	r25, 0x80	; 128
     180:	ab eb       	ldi	r26, 0xBB	; 187
     182:	b4 e4       	ldi	r27, 0x44	; 68
     184:	80 87       	std	Z+8, r24	; 0x08
     186:	91 87       	std	Z+9, r25	; 0x09
     188:	a2 87       	std	Z+10, r26	; 0x0a
     18a:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     18c:	84 87       	std	Z+12, r24	; 0x0c
     18e:	95 87       	std	Z+13, r25	; 0x0d
     190:	a6 87       	std	Z+14, r26	; 0x0e
     192:	b7 87       	std	Z+15, r27	; 0x0f
     194:	08 95       	ret

00000196 <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     196:	08 95       	ret

00000198 <_ZN10DFRobot_PH5beginEv>:
=======
     16e:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a8 ec       	ldi	r26, 0xC8	; 200
     176:	b1 e4       	ldi	r27, 0x41	; 65
     178:	80 8b       	std	Z+16, r24	; 0x10
     17a:	91 8b       	std	Z+17, r25	; 0x11
     17c:	a2 8b       	std	Z+18, r26	; 0x12
     17e:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	a0 ee       	ldi	r26, 0xE0	; 224
     186:	b0 e4       	ldi	r27, 0x40	; 64
     188:	80 83       	st	Z, r24
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	a2 83       	std	Z+2, r26	; 0x02
     18e:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     190:	84 e1       	ldi	r24, 0x14	; 20
     192:	9e e0       	ldi	r25, 0x0E	; 14
     194:	ae ef       	ldi	r26, 0xFE	; 254
     196:	b4 e4       	ldi	r27, 0x44	; 68
     198:	84 83       	std	Z+4, r24	; 0x04
     19a:	95 83       	std	Z+5, r25	; 0x05
     19c:	a6 83       	std	Z+6, r26	; 0x06
     19e:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e8       	ldi	r25, 0x80	; 128
     1a4:	ab eb       	ldi	r26, 0xBB	; 187
     1a6:	b4 e4       	ldi	r27, 0x44	; 68
     1a8:	80 87       	std	Z+8, r24	; 0x08
     1aa:	91 87       	std	Z+9, r25	; 0x09
     1ac:	a2 87       	std	Z+10, r26	; 0x0a
     1ae:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     1b0:	84 87       	std	Z+12, r24	; 0x0c
     1b2:	95 87       	std	Z+13, r25	; 0x0d
     1b4:	a6 87       	std	Z+14, r26	; 0x0e
     1b6:	b7 87       	std	Z+15, r27	; 0x0f
     1b8:	08 95       	ret

000001ba <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     1ba:	08 95       	ret

000001bc <_ZN10DFRobot_PH5beginEv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
{

}

void DFRobot_PH::begin()
{
<<<<<<< HEAD
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
    EEPROM_read(PHVALUEADDR, this->_neutralVoltage);  //load the neutral (pH = 7.0)voltage of the pH board from the EEPROM
     1aa:	7c 01       	movw	r14, r24
     1ac:	88 e0       	ldi	r24, 0x08	; 8
     1ae:	e8 0e       	add	r14, r24
     1b0:	f1 1c       	adc	r15, r1
     1b2:	67 01       	movw	r12, r14
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	c8 01       	movw	r24, r16
     1ba:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     1be:	f6 01       	movw	r30, r12
     1c0:	81 93       	st	Z+, r24
     1c2:	6f 01       	movw	r12, r30
     1c4:	0f 5f       	subi	r16, 0xFF	; 255
     1c6:	1f 4f       	sbci	r17, 0xFF	; 255
     1c8:	04 30       	cpi	r16, 0x04	; 4
     1ca:	11 05       	cpc	r17, r1
     1cc:	a9 f7       	brne	.-22     	; 0x1b8 <_ZN10DFRobot_PH5beginEv+0x20>
    Serial.print("_neutralVoltage:");
     1ce:	60 e3       	ldi	r22, 0x30	; 48
     1d0:	71 e0       	ldi	r23, 0x01	; 1
     1d2:	84 e7       	ldi	r24, 0x74	; 116
     1d4:	93 e0       	ldi	r25, 0x03	; 3
     1d6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
    Serial.println(this->_neutralVoltage);
     1da:	48 85       	ldd	r20, Y+8	; 0x08
     1dc:	59 85       	ldd	r21, Y+9	; 0x09
     1de:	6a 85       	ldd	r22, Y+10	; 0x0a
     1e0:	7b 85       	ldd	r23, Y+11	; 0x0b
     1e2:	22 e0       	ldi	r18, 0x02	; 2
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	84 e7       	ldi	r24, 0x74	; 116
     1e8:	93 e0       	ldi	r25, 0x03	; 3
     1ea:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR)==0xFF && EEPROM.read(PHVALUEADDR+1)==0xFF && EEPROM.read(PHVALUEADDR+2)==0xFF && EEPROM.read(PHVALUEADDR+3)==0xFF){
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     1f6:	8f 3f       	cpi	r24, 0xFF	; 255
     1f8:	39 f5       	brne	.+78     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     202:	8f 3f       	cpi	r24, 0xFF	; 255
     204:	09 f5       	brne	.+66     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     20e:	8f 3f       	cpi	r24, 0xFF	; 255
     210:	d9 f4       	brne	.+54     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     21a:	8f 3f       	cpi	r24, 0xFF	; 255
     21c:	a9 f4       	brne	.+42     	; 0x248 <_ZN10DFRobot_PH5beginEv+0xb0>
        this->_neutralVoltage = 1500.0;  // new EEPROM, write typical voltage
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e8       	ldi	r25, 0x80	; 128
     222:	ab eb       	ldi	r26, 0xBB	; 187
     224:	b4 e4       	ldi	r27, 0x44	; 68
     226:	88 87       	std	Y+8, r24	; 0x08
     228:	99 87       	std	Y+9, r25	; 0x09
     22a:	aa 87       	std	Y+10, r26	; 0x0a
     22c:	bb 87       	std	Y+11, r27	; 0x0b
        EEPROM_write(PHVALUEADDR, this->_neutralVoltage);
     22e:	00 e0       	ldi	r16, 0x00	; 0
     230:	10 e0       	ldi	r17, 0x00	; 0
     232:	f7 01       	movw	r30, r14
     234:	61 91       	ld	r22, Z+
     236:	7f 01       	movw	r14, r30
=======
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
    EEPROM_read(PHVALUEADDR, this->_neutralVoltage);  //load the neutral (pH = 7.0)voltage of the pH board from the EEPROM
     1ce:	7c 01       	movw	r14, r24
     1d0:	88 e0       	ldi	r24, 0x08	; 8
     1d2:	e8 0e       	add	r14, r24
     1d4:	f1 1c       	adc	r15, r1
     1d6:	67 01       	movw	r12, r14
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	c8 01       	movw	r24, r16
     1de:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     1e2:	f6 01       	movw	r30, r12
     1e4:	81 93       	st	Z+, r24
     1e6:	6f 01       	movw	r12, r30
     1e8:	0f 5f       	subi	r16, 0xFF	; 255
     1ea:	1f 4f       	sbci	r17, 0xFF	; 255
     1ec:	04 30       	cpi	r16, 0x04	; 4
     1ee:	11 05       	cpc	r17, r1
     1f0:	a9 f7       	brne	.-22     	; 0x1dc <_ZN10DFRobot_PH5beginEv+0x20>
    Serial.print("_neutralVoltage:");
     1f2:	61 e3       	ldi	r22, 0x31	; 49
     1f4:	71 e0       	ldi	r23, 0x01	; 1
     1f6:	84 e7       	ldi	r24, 0x74	; 116
     1f8:	93 e0       	ldi	r25, 0x03	; 3
     1fa:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
    Serial.println(this->_neutralVoltage);
     1fe:	48 85       	ldd	r20, Y+8	; 0x08
     200:	59 85       	ldd	r21, Y+9	; 0x09
     202:	6a 85       	ldd	r22, Y+10	; 0x0a
     204:	7b 85       	ldd	r23, Y+11	; 0x0b
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	84 e7       	ldi	r24, 0x74	; 116
     20c:	93 e0       	ldi	r25, 0x03	; 3
     20e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR)==0xFF && EEPROM.read(PHVALUEADDR+1)==0xFF && EEPROM.read(PHVALUEADDR+2)==0xFF && EEPROM.read(PHVALUEADDR+3)==0xFF){
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     21a:	8f 3f       	cpi	r24, 0xFF	; 255
     21c:	39 f5       	brne	.+78     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	09 f5       	brne	.+66     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     232:	8f 3f       	cpi	r24, 0xFF	; 255
     234:	d9 f4       	brne	.+54     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     23e:	8f 3f       	cpi	r24, 0xFF	; 255
     240:	a9 f4       	brne	.+42     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
        this->_neutralVoltage = 1500.0;  // new EEPROM, write typical voltage
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e8       	ldi	r25, 0x80	; 128
     246:	ab eb       	ldi	r26, 0xBB	; 187
     248:	b4 e4       	ldi	r27, 0x44	; 68
     24a:	88 87       	std	Y+8, r24	; 0x08
     24c:	99 87       	std	Y+9, r25	; 0x09
     24e:	aa 87       	std	Y+10, r26	; 0x0a
     250:	bb 87       	std	Y+11, r27	; 0x0b
        EEPROM_write(PHVALUEADDR, this->_neutralVoltage);
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	f7 01       	movw	r30, r14
     258:	61 91       	ld	r22, Z+
     25a:	7f 01       	movw	r14, r30
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
<<<<<<< HEAD
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <eeprom_write_byte>
     23e:	0f 5f       	subi	r16, 0xFF	; 255
     240:	1f 4f       	sbci	r17, 0xFF	; 255
     242:	04 30       	cpi	r16, 0x04	; 4
     244:	11 05       	cpc	r17, r1
     246:	a9 f7       	brne	.-22     	; 0x232 <_ZN10DFRobot_PH5beginEv+0x9a>
    }
    EEPROM_read(PHVALUEADDR+4, this->_acidVoltage);//load the acid (pH = 4.0) voltage of the pH board from the EEPROM
     248:	7e 01       	movw	r14, r28
     24a:	f4 e0       	ldi	r31, 0x04	; 4
     24c:	ef 0e       	add	r14, r31
     24e:	f1 1c       	adc	r15, r1
     250:	67 01       	movw	r12, r14
     252:	04 e0       	ldi	r16, 0x04	; 4
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	c8 01       	movw	r24, r16
     258:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     25c:	f6 01       	movw	r30, r12
     25e:	81 93       	st	Z+, r24
     260:	6f 01       	movw	r12, r30
     262:	0f 5f       	subi	r16, 0xFF	; 255
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	08 30       	cpi	r16, 0x08	; 8
     268:	11 05       	cpc	r17, r1
     26a:	a9 f7       	brne	.-22     	; 0x256 <_ZN10DFRobot_PH5beginEv+0xbe>
    Serial.print("_acidVoltage:");
     26c:	61 e4       	ldi	r22, 0x41	; 65
     26e:	71 e0       	ldi	r23, 0x01	; 1
     270:	84 e7       	ldi	r24, 0x74	; 116
     272:	93 e0       	ldi	r25, 0x03	; 3
     274:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
    Serial.println(this->_acidVoltage);
     278:	4c 81       	ldd	r20, Y+4	; 0x04
     27a:	5d 81       	ldd	r21, Y+5	; 0x05
     27c:	6e 81       	ldd	r22, Y+6	; 0x06
     27e:	7f 81       	ldd	r23, Y+7	; 0x07
     280:	22 e0       	ldi	r18, 0x02	; 2
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	84 e7       	ldi	r24, 0x74	; 116
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 c7 0b 	call	0x178e	; 0x178e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR+4)==0xFF && EEPROM.read(PHVALUEADDR+5)==0xFF && EEPROM.read(PHVALUEADDR+6)==0xFF && EEPROM.read(PHVALUEADDR+7)==0xFF){
     28c:	84 e0       	ldi	r24, 0x04	; 4
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     294:	8f 3f       	cpi	r24, 0xFF	; 255
     296:	31 f5       	brne	.+76     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2a0:	8f 3f       	cpi	r24, 0xFF	; 255
     2a2:	01 f5       	brne	.+64     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2ac:	8f 3f       	cpi	r24, 0xFF	; 255
     2ae:	d1 f4       	brne	.+52     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN11EEPROMClass4readEi.isra.0>
     2b8:	8f 3f       	cpi	r24, 0xFF	; 255
     2ba:	a1 f4       	brne	.+40     	; 0x2e4 <_ZN10DFRobot_PH5beginEv+0x14c>
        this->_acidVoltage = 2032.44;  // new EEPROM, write typical voltage
     2bc:	84 e1       	ldi	r24, 0x14	; 20
     2be:	9e e0       	ldi	r25, 0x0E	; 14
     2c0:	ae ef       	ldi	r26, 0xFE	; 254
     2c2:	b4 e4       	ldi	r27, 0x44	; 68
     2c4:	8c 83       	std	Y+4, r24	; 0x04
     2c6:	9d 83       	std	Y+5, r25	; 0x05
     2c8:	ae 83       	std	Y+6, r26	; 0x06
     2ca:	bf 83       	std	Y+7, r27	; 0x07
     2cc:	c4 e0       	ldi	r28, 0x04	; 4
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
        EEPROM_write(PHVALUEADDR+4, this->_acidVoltage);
     2d0:	f7 01       	movw	r30, r14
     2d2:	61 91       	ld	r22, Z+
     2d4:	7f 01       	movw	r14, r30
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <eeprom_write_byte>
     2dc:	21 96       	adiw	r28, 0x01	; 1
     2de:	c8 30       	cpi	r28, 0x08	; 8
     2e0:	d1 05       	cpc	r29, r1
     2e2:	b1 f7       	brne	.-20     	; 0x2d0 <_ZN10DFRobot_PH5beginEv+0x138>
    }
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	08 95       	ret

000002f6 <_Z8fromWifiv>:
	return phValue;
}

void calibratePH() {
	ph.calibration(voltage, temperature);
     2f6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xAmmonia>
     2fa:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xAmmonia+0x1>
     2fe:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <vTaskResume>

00000302 <_ZN5Print5writeEPKc>:
     302:	61 15       	cp	r22, r1
     304:	71 05       	cpc	r23, r1
     306:	79 f0       	breq	.+30     	; 0x326 <_ZN5Print5writeEPKc+0x24>
     308:	fb 01       	movw	r30, r22
     30a:	01 90       	ld	r0, Z+
     30c:	00 20       	and	r0, r0
     30e:	e9 f7       	brne	.-6      	; 0x30a <_ZN5Print5writeEPKc+0x8>
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	af 01       	movw	r20, r30
     314:	46 1b       	sub	r20, r22
     316:	57 0b       	sbc	r21, r23
     318:	dc 01       	movw	r26, r24
     31a:	ed 91       	ld	r30, X+
     31c:	fc 91       	ld	r31, X
     31e:	02 80       	ldd	r0, Z+2	; 0x02
     320:	f3 81       	ldd	r31, Z+3	; 0x03
     322:	e0 2d       	mov	r30, r0
     324:	09 94       	ijmp
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	08 95       	ret

0000032c <_Z9addColorsv>:
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	c3 e3       	ldi	r28, 0x33	; 51
     336:	d3 e0       	ldi	r29, 0x03	; 3
     338:	18 82       	st	Y, r1
     33a:	19 82       	std	Y+1, r1	; 0x01
     33c:	1a 82       	std	Y+2, r1	; 0x02
     33e:	1b 82       	std	Y+3, r1	; 0x03
     340:	1d 82       	std	Y+5, r1	; 0x05
     342:	1c 82       	std	Y+4, r1	; 0x04
     344:	1f 82       	std	Y+7, r1	; 0x07
     346:	1e 82       	std	Y+6, r1	; 0x06
     348:	19 86       	std	Y+9, r1	; 0x09
     34a:	18 86       	std	Y+8, r1	; 0x08
     34c:	ad ee       	ldi	r26, 0xED	; 237
     34e:	b2 e0       	ldi	r27, 0x02	; 2
     350:	1d 92       	st	X+, r1
     352:	1d 92       	st	X+, r1
     354:	1d 92       	st	X+, r1
     356:	1c 92       	st	X, r1
     358:	13 97       	sbiw	r26, 0x03	; 3
     35a:	2f ef       	ldi	r18, 0xFF	; 255
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	15 96       	adiw	r26, 0x05	; 5
     360:	3c 93       	st	X, r19
     362:	2e 93       	st	-X, r18
     364:	14 97       	sbiw	r26, 0x04	; 4
     366:	8f e5       	ldi	r24, 0x5F	; 95
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	17 96       	adiw	r26, 0x07	; 7
     36c:	9c 93       	st	X, r25
     36e:	8e 93       	st	-X, r24
     370:	16 97       	sbiw	r26, 0x06	; 6
     372:	19 96       	adiw	r26, 0x09	; 9
     374:	9c 93       	st	X, r25
     376:	8e 93       	st	-X, r24
     378:	18 97       	sbiw	r26, 0x08	; 8
     37a:	e7 ea       	ldi	r30, 0xA7	; 167
     37c:	f2 e0       	ldi	r31, 0x02	; 2
     37e:	10 82       	st	Z, r1
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	12 82       	std	Z+2, r1	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	35 83       	std	Z+5, r19	; 0x05
     388:	24 83       	std	Z+4, r18	; 0x04
     38a:	97 83       	std	Z+7, r25	; 0x07
     38c:	86 83       	std	Z+6, r24	; 0x06
     38e:	91 87       	std	Z+9, r25	; 0x09
     390:	80 87       	std	Z+8, r24	; 0x08
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	60 e8       	ldi	r22, 0x80	; 128
     398:	7e e3       	ldi	r23, 0x3E	; 62
     39a:	4a 87       	std	Y+10, r20	; 0x0a
     39c:	5b 87       	std	Y+11, r21	; 0x0b
     39e:	6c 87       	std	Y+12, r22	; 0x0c
     3a0:	7d 87       	std	Y+13, r23	; 0x0d
     3a2:	1f 86       	std	Y+15, r1	; 0x0f
     3a4:	1e 86       	std	Y+14, r1	; 0x0e
     3a6:	19 8a       	std	Y+17, r1	; 0x11
     3a8:	18 8a       	std	Y+16, r1	; 0x10
     3aa:	1b 8a       	std	Y+19, r1	; 0x13
     3ac:	1a 8a       	std	Y+18, r1	; 0x12
     3ae:	4a e9       	ldi	r20, 0x9A	; 154
     3b0:	59 e9       	ldi	r21, 0x99	; 153
     3b2:	69 e1       	ldi	r22, 0x19	; 25
     3b4:	7e e3       	ldi	r23, 0x3E	; 62
     3b6:	1a 96       	adiw	r26, 0x0a	; 10
     3b8:	4d 93       	st	X+, r20
     3ba:	5d 93       	st	X+, r21
     3bc:	6d 93       	st	X+, r22
     3be:	7c 93       	st	X, r23
     3c0:	1d 97       	sbiw	r26, 0x0d	; 13
     3c2:	1f 96       	adiw	r26, 0x0f	; 15
     3c4:	1c 92       	st	X, r1
     3c6:	1e 92       	st	-X, r1
     3c8:	1e 97       	sbiw	r26, 0x0e	; 14
     3ca:	51 96       	adiw	r26, 0x11	; 17
     3cc:	1c 92       	st	X, r1
     3ce:	1e 92       	st	-X, r1
     3d0:	50 97       	sbiw	r26, 0x10	; 16
     3d2:	53 96       	adiw	r26, 0x13	; 19
     3d4:	1c 92       	st	X, r1
     3d6:	1e 92       	st	-X, r1
     3d8:	52 97       	sbiw	r26, 0x12	; 18
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	7f e3       	ldi	r23, 0x3F	; 63
     3e2:	42 87       	std	Z+10, r20	; 0x0a
     3e4:	53 87       	std	Z+11, r21	; 0x0b
     3e6:	64 87       	std	Z+12, r22	; 0x0c
     3e8:	75 87       	std	Z+13, r23	; 0x0d
     3ea:	17 86       	std	Z+15, r1	; 0x0f
     3ec:	16 86       	std	Z+14, r1	; 0x0e
     3ee:	11 8a       	std	Z+17, r1	; 0x11
     3f0:	10 8a       	std	Z+16, r1	; 0x10
     3f2:	13 8a       	std	Z+19, r1	; 0x13
     3f4:	12 8a       	std	Z+18, r1	; 0x12
     3f6:	4c 8b       	std	Y+20, r20	; 0x14
     3f8:	5d 8b       	std	Y+21, r21	; 0x15
     3fa:	6e 8b       	std	Y+22, r22	; 0x16
     3fc:	7f 8b       	std	Y+23, r23	; 0x17
     3fe:	19 8e       	std	Y+25, r1	; 0x19
     400:	18 8e       	std	Y+24, r1	; 0x18
     402:	1b 8e       	std	Y+27, r1	; 0x1b
     404:	1a 8e       	std	Y+26, r1	; 0x1a
     406:	1d 8e       	std	Y+29, r1	; 0x1d
     408:	1c 8e       	std	Y+28, r1	; 0x1c
     40a:	4a e9       	ldi	r20, 0x9A	; 154
     40c:	59 e9       	ldi	r21, 0x99	; 153
     40e:	69 e9       	ldi	r22, 0x99	; 153
     410:	7e e3       	ldi	r23, 0x3E	; 62
     412:	54 96       	adiw	r26, 0x14	; 20
     414:	4d 93       	st	X+, r20
     416:	5d 93       	st	X+, r21
     418:	6d 93       	st	X+, r22
     41a:	7c 93       	st	X, r23
     41c:	57 97       	sbiw	r26, 0x17	; 23
     41e:	59 96       	adiw	r26, 0x19	; 25
     420:	1c 92       	st	X, r1
     422:	1e 92       	st	-X, r1
     424:	58 97       	sbiw	r26, 0x18	; 24
     426:	5b 96       	adiw	r26, 0x1b	; 27
     428:	1c 92       	st	X, r1
     42a:	1e 92       	st	-X, r1
     42c:	5a 97       	sbiw	r26, 0x1a	; 26
     42e:	5d 96       	adiw	r26, 0x1d	; 29
     430:	1c 92       	st	X, r1
     432:	1e 92       	st	-X, r1
     434:	5c 97       	sbiw	r26, 0x1c	; 28
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e0       	ldi	r22, 0x00	; 0
     43c:	70 e4       	ldi	r23, 0x40	; 64
     43e:	44 8b       	std	Z+20, r20	; 0x14
     440:	55 8b       	std	Z+21, r21	; 0x15
     442:	66 8b       	std	Z+22, r22	; 0x16
     444:	77 8b       	std	Z+23, r23	; 0x17
     446:	11 8e       	std	Z+25, r1	; 0x19
     448:	10 8e       	std	Z+24, r1	; 0x18
     44a:	13 8e       	std	Z+27, r1	; 0x1b
     44c:	12 8e       	std	Z+26, r1	; 0x1a
     44e:	15 8e       	std	Z+29, r1	; 0x1d
     450:	14 8e       	std	Z+28, r1	; 0x1c
     452:	00 e0       	ldi	r16, 0x00	; 0
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	20 e4       	ldi	r18, 0x40	; 64
     458:	30 e4       	ldi	r19, 0x40	; 64
     45a:	0e 8f       	std	Y+30, r16	; 0x1e
     45c:	1f 8f       	std	Y+31, r17	; 0x1f
     45e:	28 a3       	std	Y+32, r18	; 0x20
     460:	39 a3       	std	Y+33, r19	; 0x21
     462:	1b a2       	std	Y+35, r1	; 0x23
     464:	1a a2       	std	Y+34, r1	; 0x22
     466:	1d a2       	std	Y+37, r1	; 0x25
     468:	1c a2       	std	Y+36, r1	; 0x24
     46a:	1f a2       	std	Y+39, r1	; 0x27
     46c:	1e a2       	std	Y+38, r1	; 0x26
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	60 e8       	ldi	r22, 0x80	; 128
     474:	7f e3       	ldi	r23, 0x3F	; 63
     476:	5e 96       	adiw	r26, 0x1e	; 30
     478:	4d 93       	st	X+, r20
     47a:	5d 93       	st	X+, r21
     47c:	6d 93       	st	X+, r22
     47e:	7c 93       	st	X, r23
     480:	91 97       	sbiw	r26, 0x21	; 33
     482:	93 96       	adiw	r26, 0x23	; 35
     484:	1c 92       	st	X, r1
     486:	1e 92       	st	-X, r1
     488:	92 97       	sbiw	r26, 0x22	; 34
     48a:	95 96       	adiw	r26, 0x25	; 37
     48c:	1c 92       	st	X, r1
     48e:	1e 92       	st	-X, r1
     490:	94 97       	sbiw	r26, 0x24	; 36
     492:	97 96       	adiw	r26, 0x27	; 39
     494:	1c 92       	st	X, r1
     496:	1e 92       	st	-X, r1
     498:	96 97       	sbiw	r26, 0x26	; 38
     49a:	40 e0       	ldi	r20, 0x00	; 0
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	60 ea       	ldi	r22, 0xA0	; 160
     4a0:	70 e4       	ldi	r23, 0x40	; 64
     4a2:	46 8f       	std	Z+30, r20	; 0x1e
     4a4:	57 8f       	std	Z+31, r21	; 0x1f
     4a6:	60 a3       	std	Z+32, r22	; 0x20
     4a8:	71 a3       	std	Z+33, r23	; 0x21
     4aa:	13 a2       	std	Z+35, r1	; 0x23
     4ac:	12 a2       	std	Z+34, r1	; 0x22
     4ae:	15 a2       	std	Z+37, r1	; 0x25
     4b0:	14 a2       	std	Z+36, r1	; 0x24
     4b2:	17 a2       	std	Z+39, r1	; 0x27
     4b4:	16 a2       	std	Z+38, r1	; 0x26
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	60 ec       	ldi	r22, 0xC0	; 192
     4bc:	70 e4       	ldi	r23, 0x40	; 64
     4be:	48 a7       	std	Y+40, r20	; 0x28
     4c0:	59 a7       	std	Y+41, r21	; 0x29
     4c2:	6a a7       	std	Y+42, r22	; 0x2a
     4c4:	7b a7       	std	Y+43, r23	; 0x2b
     4c6:	1d a6       	std	Y+45, r1	; 0x2d
     4c8:	1c a6       	std	Y+44, r1	; 0x2c
     4ca:	1f a6       	std	Y+47, r1	; 0x2f
     4cc:	1e a6       	std	Y+46, r1	; 0x2e
     4ce:	19 aa       	std	Y+49, r1	; 0x31
     4d0:	18 aa       	std	Y+48, r1	; 0x30
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 ec       	ldi	r22, 0xC0	; 192
     4d8:	7f e3       	ldi	r23, 0x3F	; 63
     4da:	98 96       	adiw	r26, 0x28	; 40
     4dc:	4d 93       	st	X+, r20
     4de:	5d 93       	st	X+, r21
     4e0:	6d 93       	st	X+, r22
     4e2:	7c 93       	st	X, r23
     4e4:	9b 97       	sbiw	r26, 0x2b	; 43
     4e6:	9d 96       	adiw	r26, 0x2d	; 45
     4e8:	1c 92       	st	X, r1
     4ea:	1e 92       	st	-X, r1
     4ec:	9c 97       	sbiw	r26, 0x2c	; 44
     4ee:	9f 96       	adiw	r26, 0x2f	; 47
     4f0:	1c 92       	st	X, r1
     4f2:	1e 92       	st	-X, r1
     4f4:	9e 97       	sbiw	r26, 0x2e	; 46
     4f6:	d1 96       	adiw	r26, 0x31	; 49
     4f8:	1c 92       	st	X, r1
     4fa:	1e 92       	st	-X, r1
     4fc:	d0 97       	sbiw	r26, 0x30	; 48
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	60 e2       	ldi	r22, 0x20	; 32
     504:	71 e4       	ldi	r23, 0x41	; 65
     506:	40 a7       	std	Z+40, r20	; 0x28
     508:	51 a7       	std	Z+41, r21	; 0x29
     50a:	62 a7       	std	Z+42, r22	; 0x2a
     50c:	73 a7       	std	Z+43, r23	; 0x2b
     50e:	15 a6       	std	Z+45, r1	; 0x2d
     510:	14 a6       	std	Z+44, r1	; 0x2c
     512:	17 a6       	std	Z+47, r1	; 0x2f
     514:	16 a6       	std	Z+46, r1	; 0x2e
     516:	11 aa       	std	Z+49, r1	; 0x31
     518:	10 aa       	std	Z+48, r1	; 0x30
     51a:	d2 96       	adiw	r26, 0x32	; 50
     51c:	0d 93       	st	X+, r16
     51e:	1d 93       	st	X+, r17
     520:	2d 93       	st	X+, r18
     522:	3c 93       	st	X, r19
     524:	d5 97       	sbiw	r26, 0x35	; 53
     526:	d7 96       	adiw	r26, 0x37	; 55
     528:	1c 92       	st	X, r1
     52a:	1e 92       	st	-X, r1
     52c:	d6 97       	sbiw	r26, 0x36	; 54
     52e:	d9 96       	adiw	r26, 0x39	; 57
     530:	1c 92       	st	X, r1
     532:	1e 92       	st	-X, r1
     534:	d8 97       	sbiw	r26, 0x38	; 56
     536:	db 96       	adiw	r26, 0x3b	; 59
     538:	1c 92       	st	X, r1
     53a:	1e 92       	st	-X, r1
     53c:	da 97       	sbiw	r26, 0x3a	; 58
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
     542:	20 ea       	ldi	r18, 0xA0	; 160
     544:	31 e4       	ldi	r19, 0x41	; 65
     546:	02 ab       	std	Z+50, r16	; 0x32
     548:	13 ab       	std	Z+51, r17	; 0x33
     54a:	24 ab       	std	Z+52, r18	; 0x34
     54c:	35 ab       	std	Z+53, r19	; 0x35
     54e:	17 aa       	std	Z+55, r1	; 0x37
     550:	16 aa       	std	Z+54, r1	; 0x36
     552:	11 ae       	std	Z+57, r1	; 0x39
     554:	10 ae       	std	Z+56, r1	; 0x38
     556:	13 ae       	std	Z+59, r1	; 0x3b
     558:	12 ae       	std	Z+58, r1	; 0x3a
     55a:	dc 96       	adiw	r26, 0x3c	; 60
     55c:	4d 93       	st	X+, r20
     55e:	5d 93       	st	X+, r21
     560:	6d 93       	st	X+, r22
     562:	7c 93       	st	X, r23
     564:	df 97       	sbiw	r26, 0x3f	; 63
     566:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <Nitrite+0x41>
     56a:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <Nitrite+0x40>
     56e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <Nitrite+0x43>
     572:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <Nitrite+0x42>
     576:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <Nitrite+0x45>
     57a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <Nitrite+0x44>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a8 e4       	ldi	r26, 0x48	; 72
     584:	b2 e4       	ldi	r27, 0x42	; 66
     586:	84 af       	std	Z+60, r24	; 0x3c
     588:	95 af       	std	Z+61, r25	; 0x3d
     58a:	a6 af       	std	Z+62, r26	; 0x3e
     58c:	b7 af       	std	Z+63, r27	; 0x3f
     58e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <Nitrate+0x41>
     592:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <Nitrate+0x40>
     596:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <Nitrate+0x43>
     59a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <Nitrate+0x42>
     59e:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <Nitrate+0x45>
     5a2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <Nitrate+0x44>
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	1f 91       	pop	r17
     5ac:	0f 91       	pop	r16
     5ae:	08 95       	ret

000005b0 <_Z9SameColorv>:
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	10 91 a4 02 	lds	r17, 0x02A4	; 0x8002a4 <rgb>
     5ba:	d0 91 a5 02 	lds	r29, 0x02A5	; 0x8002a5 <rgb+0x1>
     5be:	c0 91 a6 02 	lds	r28, 0x02A6	; 0x8002a6 <rgb+0x2>
     5c2:	6d e9       	ldi	r22, 0x9D	; 157
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	84 e7       	ldi	r24, 0x74	; 116
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     5ce:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <c+0x4>
     5d2:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <c+0x5>
     5d6:	4a e0       	ldi	r20, 0x0A	; 10
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	84 e7       	ldi	r24, 0x74	; 116
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     5e2:	6f e9       	ldi	r22, 0x9F	; 159
     5e4:	71 e0       	ldi	r23, 0x01	; 1
     5e6:	84 e7       	ldi	r24, 0x74	; 116
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     5ee:	60 91 a0 02 	lds	r22, 0x02A0	; 0x8002a0 <c+0x6>
     5f2:	70 91 a1 02 	lds	r23, 0x02A1	; 0x8002a1 <c+0x7>
     5f6:	4a e0       	ldi	r20, 0x0A	; 10
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	84 e7       	ldi	r24, 0x74	; 116
     5fc:	93 e0       	ldi	r25, 0x03	; 3
     5fe:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     602:	6f e9       	ldi	r22, 0x9F	; 159
     604:	71 e0       	ldi	r23, 0x01	; 1
     606:	84 e7       	ldi	r24, 0x74	; 116
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     60e:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <c+0x8>
     612:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <c+0x9>
     616:	4a e0       	ldi	r20, 0x0A	; 10
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	84 e7       	ldi	r24, 0x74	; 116
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
     622:	61 ea       	ldi	r22, 0xA1	; 161
     624:	71 e0       	ldi	r23, 0x01	; 1
     626:	84 e7       	ldi	r24, 0x74	; 116
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     62e:	4a e0       	ldi	r20, 0x0A	; 10
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	61 2f       	mov	r22, r17
     634:	84 e7       	ldi	r24, 0x74	; 116
     636:	93 e0       	ldi	r25, 0x03	; 3
     638:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     63c:	6f e9       	ldi	r22, 0x9F	; 159
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	84 e7       	ldi	r24, 0x74	; 116
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     648:	4a e0       	ldi	r20, 0x0A	; 10
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	6d 2f       	mov	r22, r29
     64e:	84 e7       	ldi	r24, 0x74	; 116
     650:	93 e0       	ldi	r25, 0x03	; 3
     652:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     656:	6f e9       	ldi	r22, 0x9F	; 159
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	84 e7       	ldi	r24, 0x74	; 116
     65c:	93 e0       	ldi	r25, 0x03	; 3
     65e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     662:	4a e0       	ldi	r20, 0x0A	; 10
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	6c 2f       	mov	r22, r28
     668:	84 e7       	ldi	r24, 0x74	; 116
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <_ZN5Print5printEhi>
     670:	61 2f       	mov	r22, r17
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <c+0x4>
     678:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <c+0x5>
     67c:	9c 01       	movw	r18, r24
     67e:	25 50       	subi	r18, 0x05	; 5
     680:	31 09       	sbc	r19, r1
     682:	62 17       	cp	r22, r18
     684:	73 07       	cpc	r23, r19
     686:	64 f1       	brlt	.+88     	; 0x6e0 <_Z9SameColorv+0x130>
     688:	05 96       	adiw	r24, 0x05	; 5
     68a:	86 17       	cp	r24, r22
     68c:	97 07       	cpc	r25, r23
     68e:	44 f1       	brlt	.+80     	; 0x6e0 <_Z9SameColorv+0x130>
     690:	6d 2f       	mov	r22, r29
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <c+0x6>
     698:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <c+0x7>
     69c:	9c 01       	movw	r18, r24
     69e:	25 50       	subi	r18, 0x05	; 5
     6a0:	31 09       	sbc	r19, r1
     6a2:	62 17       	cp	r22, r18
     6a4:	73 07       	cpc	r23, r19
     6a6:	e4 f0       	brlt	.+56     	; 0x6e0 <_Z9SameColorv+0x130>
     6a8:	05 96       	adiw	r24, 0x05	; 5
     6aa:	86 17       	cp	r24, r22
     6ac:	97 07       	cpc	r25, r23
     6ae:	c4 f0       	brlt	.+48     	; 0x6e0 <_Z9SameColorv+0x130>
     6b0:	6c 2f       	mov	r22, r28
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <c+0x8>
     6b8:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <c+0x9>
     6bc:	9c 01       	movw	r18, r24
     6be:	25 50       	subi	r18, 0x05	; 5
     6c0:	31 09       	sbc	r19, r1
     6c2:	62 17       	cp	r22, r18
     6c4:	73 07       	cpc	r23, r19
     6c6:	64 f0       	brlt	.+24     	; 0x6e0 <_Z9SameColorv+0x130>
     6c8:	05 96       	adiw	r24, 0x05	; 5
     6ca:	86 17       	cp	r24, r22
     6cc:	97 07       	cpc	r25, r23
     6ce:	44 f0       	brlt	.+16     	; 0x6e0 <_Z9SameColorv+0x130>
     6d0:	6c e7       	ldi	r22, 0x7C	; 124
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	84 e7       	ldi	r24, 0x74	; 116
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN5Print5printEPK19__FlashStringHelper>
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <_Z9SameColorv+0x132>
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	08 95       	ret

000006ea <_Z9FindMatchv>:
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <typeToRead>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <_Z9FindMatchv+0x12>
     6fa:	48 c0       	rjmp	.+144    	; 0x78c <_Z9FindMatchv+0xa2>
     6fc:	40 f0       	brcs	.+16     	; 0x70e <_Z9FindMatchv+0x24>
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	09 f0       	breq	.+2      	; 0x704 <_Z9FindMatchv+0x1a>
     702:	6e c0       	rjmp	.+220    	; 0x7e0 <_Z9FindMatchv+0xf6>
     704:	0d ee       	ldi	r16, 0xED	; 237
     706:	12 e0       	ldi	r17, 0x02	; 2
     708:	c6 e0       	ldi	r28, 0x06	; 6
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	29 c0       	rjmp	.+82     	; 0x760 <_Z9FindMatchv+0x76>
     70e:	03 e3       	ldi	r16, 0x33	; 51
     710:	13 e0       	ldi	r17, 0x03	; 3
     712:	c4 e0       	ldi	r28, 0x04	; 4
     714:	d0 e0       	ldi	r29, 0x00	; 0
     716:	8a e0       	ldi	r24, 0x0A	; 10
     718:	f8 01       	movw	r30, r16
     71a:	b8 96       	adiw	r30, 0x28	; 40
     71c:	aa e9       	ldi	r26, 0x9A	; 154
     71e:	b2 e0       	ldi	r27, 0x02	; 2
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	8a 95       	dec	r24
     726:	e1 f7       	brne	.-8      	; 0x720 <_Z9FindMatchv+0x36>
     728:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     72c:	88 23       	and	r24, r24
     72e:	49 f0       	breq	.+18     	; 0x742 <_Z9FindMatchv+0x58>
     730:	8a e0       	ldi	r24, 0x0A	; 10
     732:	8c 9f       	mul	r24, r28
     734:	f0 01       	movw	r30, r0
     736:	8d 9f       	mul	r24, r29
     738:	f0 0d       	add	r31, r0
     73a:	11 24       	eor	r1, r1
     73c:	ed 5c       	subi	r30, 0xCD	; 205
     73e:	fc 4f       	sbci	r31, 0xFC	; 252
     740:	3e c0       	rjmp	.+124    	; 0x7be <_Z9FindMatchv+0xd4>
     742:	21 97       	sbiw	r28, 0x01	; 1
     744:	0a 50       	subi	r16, 0x0A	; 10
     746:	11 09       	sbc	r17, r1
     748:	cf 3f       	cpi	r28, 0xFF	; 255
     74a:	8f ef       	ldi	r24, 0xFF	; 255
     74c:	d8 07       	cpc	r29, r24
     74e:	19 f7       	brne	.-58     	; 0x716 <_Z9FindMatchv+0x2c>
     750:	42 c0       	rjmp	.+132    	; 0x7d6 <_Z9FindMatchv+0xec>
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0a 50       	subi	r16, 0x0A	; 10
     756:	11 09       	sbc	r17, r1
     758:	cf 3f       	cpi	r28, 0xFF	; 255
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	d8 07       	cpc	r29, r24
     75e:	d9 f1       	breq	.+118    	; 0x7d6 <_Z9FindMatchv+0xec>
     760:	8a e0       	ldi	r24, 0x0A	; 10
     762:	f8 01       	movw	r30, r16
     764:	fc 96       	adiw	r30, 0x3c	; 60
     766:	aa e9       	ldi	r26, 0x9A	; 154
     768:	b2 e0       	ldi	r27, 0x02	; 2
     76a:	01 90       	ld	r0, Z+
     76c:	0d 92       	st	X+, r0
     76e:	8a 95       	dec	r24
     770:	e1 f7       	brne	.-8      	; 0x76a <_Z9FindMatchv+0x80>
     772:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     776:	88 23       	and	r24, r24
     778:	61 f3       	breq	.-40     	; 0x752 <_Z9FindMatchv+0x68>
     77a:	8a e0       	ldi	r24, 0x0A	; 10
     77c:	8c 9f       	mul	r24, r28
     77e:	f0 01       	movw	r30, r0
     780:	8d 9f       	mul	r24, r29
     782:	f0 0d       	add	r31, r0
     784:	11 24       	eor	r1, r1
     786:	e3 51       	subi	r30, 0x13	; 19
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	19 c0       	rjmp	.+50     	; 0x7be <_Z9FindMatchv+0xd4>
     78c:	07 ea       	ldi	r16, 0xA7	; 167
     78e:	12 e0       	ldi	r17, 0x02	; 2
     790:	c6 e0       	ldi	r28, 0x06	; 6
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	8a e0       	ldi	r24, 0x0A	; 10
     796:	f8 01       	movw	r30, r16
     798:	fc 96       	adiw	r30, 0x3c	; 60
     79a:	aa e9       	ldi	r26, 0x9A	; 154
     79c:	b2 e0       	ldi	r27, 0x02	; 2
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <_Z9FindMatchv+0xb4>
     7a6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     7aa:	88 23       	and	r24, r24
     7ac:	69 f0       	breq	.+26     	; 0x7c8 <_Z9FindMatchv+0xde>
     7ae:	8a e0       	ldi	r24, 0x0A	; 10
     7b0:	8c 9f       	mul	r24, r28
     7b2:	f0 01       	movw	r30, r0
     7b4:	8d 9f       	mul	r24, r29
     7b6:	f0 0d       	add	r31, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	e9 55       	subi	r30, 0x59	; 89
     7bc:	fd 4f       	sbci	r31, 0xFD	; 253
     7be:	30 81       	ld	r19, Z
     7c0:	21 81       	ldd	r18, Z+1	; 0x01
     7c2:	92 81       	ldd	r25, Z+2	; 0x02
     7c4:	83 81       	ldd	r24, Z+3	; 0x03
     7c6:	0b c0       	rjmp	.+22     	; 0x7de <_Z9FindMatchv+0xf4>
     7c8:	21 97       	sbiw	r28, 0x01	; 1
     7ca:	0a 50       	subi	r16, 0x0A	; 10
     7cc:	11 09       	sbc	r17, r1
     7ce:	cf 3f       	cpi	r28, 0xFF	; 255
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	d8 07       	cpc	r29, r24
     7d4:	f9 f6       	brne	.-66     	; 0x794 <_Z9FindMatchv+0xaa>
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	90 e8       	ldi	r25, 0x80	; 128
     7dc:	8f eb       	ldi	r24, 0xBF	; 191
     7de:	ac 01       	movw	r20, r24
     7e0:	63 2f       	mov	r22, r19
     7e2:	72 2f       	mov	r23, r18
     7e4:	85 2f       	mov	r24, r21
     7e6:	94 2f       	mov	r25, r20
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <_Z9ScanColorv>:
     7f2:	8b e6       	ldi	r24, 0x6B	; 107
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN9MD_TCS2304readEv>
     7fa:	8b e6       	ldi	r24, 0x6B	; 107
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 28 19 	call	0x3250	; 0x3250 <_ZN9MD_TCS2309availableEv>
     802:	88 23       	and	r24, r24
     804:	d1 f3       	breq	.-12     	; 0x7fa <_Z9ScanColorv+0x8>
     806:	64 ea       	ldi	r22, 0xA4	; 164
     808:	72 e0       	ldi	r23, 0x02	; 2
     80a:	8b e6       	ldi	r24, 0x6B	; 107
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN9MD_TCS2306getRGBEP9colorData>
     812:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z9FindMatchv>
     816:	0e 94 94 06 	call	0xd28	; 0xd28 <__fixsfsi>
     81a:	08 95       	ret

0000081c <_Z13findTestStripv>:
     81c:	cf 93       	push	r28
     81e:	8b e6       	ldi	r24, 0x6B	; 107
     820:	92 e0       	ldi	r25, 0x02	; 2
     822:	0e 94 1e 19 	call	0x323c	; 0x323c <_ZN9MD_TCS2304readEv>
     826:	8b e6       	ldi	r24, 0x6B	; 107
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	0e 94 28 19 	call	0x3250	; 0x3250 <_ZN9MD_TCS2309availableEv>
     82e:	88 23       	and	r24, r24
     830:	d1 f3       	breq	.-12     	; 0x826 <_Z13findTestStripv+0xa>
     832:	64 ea       	ldi	r22, 0xA4	; 164
     834:	72 e0       	ldi	r23, 0x02	; 2
     836:	8b e6       	ldi	r24, 0x6B	; 107
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <_ZN9MD_TCS2306getRGBEP9colorData>
     83e:	8a e0       	ldi	r24, 0x0A	; 10
     840:	e2 e2       	ldi	r30, 0x22	; 34
     842:	f1 e0       	ldi	r31, 0x01	; 1
     844:	aa e9       	ldi	r26, 0x9A	; 154
     846:	b2 e0       	ldi	r27, 0x02	; 2
     848:	01 90       	ld	r0, Z+
     84a:	0d 92       	st	X+, r0
     84c:	8a 95       	dec	r24
     84e:	e1 f7       	brne	.-8      	; 0x848 <_Z13findTestStripv+0x2c>
     850:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     854:	c8 2f       	mov	r28, r24
     856:	6b ea       	ldi	r22, 0xAB	; 171
     858:	71 e0       	ldi	r23, 0x01	; 1
     85a:	84 e7       	ldi	r24, 0x74	; 116
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     862:	6c 2f       	mov	r22, r28
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	4a e0       	ldi	r20, 0x0A	; 10
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	84 e7       	ldi	r24, 0x74	; 116
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN5Print7printlnEii>
     872:	64 e2       	ldi	r22, 0x24	; 36
     874:	72 e0       	ldi	r23, 0x02	; 2
     876:	84 e7       	ldi	r24, 0x74	; 116
     878:	93 e0       	ldi	r25, 0x03	; 3
     87a:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     87e:	8a e0       	ldi	r24, 0x0A	; 10
     880:	e8 e1       	ldi	r30, 0x18	; 24
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	aa e9       	ldi	r26, 0x9A	; 154
     886:	b2 e0       	ldi	r27, 0x02	; 2
     888:	01 90       	ld	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	8a 95       	dec	r24
     88e:	e1 f7       	brne	.-8      	; 0x888 <_Z13findTestStripv+0x6c>
     890:	c1 11       	cpse	r28, r1
     892:	03 c0       	rjmp	.+6      	; 0x89a <_Z13findTestStripv+0x7e>
     894:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Z9SameColorv>
     898:	c8 2f       	mov	r28, r24
     89a:	6b eb       	ldi	r22, 0xBB	; 187
     89c:	71 e0       	ldi	r23, 0x01	; 1
     89e:	84 e7       	ldi	r24, 0x74	; 116
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     8a6:	6c 2f       	mov	r22, r28
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	4a e0       	ldi	r20, 0x0A	; 10
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	84 e7       	ldi	r24, 0x74	; 116
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <_ZN5Print7printlnEii>
     8b6:	64 e2       	ldi	r22, 0x24	; 36
     8b8:	72 e0       	ldi	r23, 0x02	; 2
     8ba:	84 e7       	ldi	r24, 0x74	; 116
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 1b 0a 	call	0x1436	; 0x1436 <_ZN5Print5printEPKc>
     8c2:	cc 23       	and	r28, r28
     8c4:	51 f0       	breq	.+20     	; 0x8da <_Z13findTestStripv+0xbe>
     8c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <_Z9FindMatchv>
     8ca:	c1 e0       	ldi	r28, 0x01	; 1
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e8       	ldi	r20, 0x80	; 128
     8d2:	5f eb       	ldi	r21, 0xBF	; 191
     8d4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
     8d8:	81 11       	cpse	r24, r1
     8da:	c0 e0       	ldi	r28, 0x00	; 0
     8dc:	8c 2f       	mov	r24, r28
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <_Z6setLED8LEDColor>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <_Z6setLED8LEDColor+0x6>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <_Z6setLED8LEDColor+0x8>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <_Z6setLED8LEDColor+0xa>
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	49 83       	std	Y+1, r20	; 0x01
     8f2:	5a 83       	std	Y+2, r21	; 0x02
     8f4:	6b 83       	std	Y+3, r22	; 0x03
     8f6:	7c 83       	std	Y+4, r23	; 0x04
     8f8:	8d 83       	std	Y+5, r24	; 0x05
     8fa:	9e 83       	std	Y+6, r25	; 0x06
     8fc:	69 81       	ldd	r22, Y+1	; 0x01
     8fe:	7a 81       	ldd	r23, Y+2	; 0x02
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <analogWrite>
     906:	6b 81       	ldd	r22, Y+3	; 0x03
     908:	7c 81       	ldd	r23, Y+4	; 0x04
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <analogWrite>
     910:	6d 81       	ldd	r22, Y+5	; 0x05
     912:	7e 81       	ldd	r23, Y+6	; 0x06
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	26 96       	adiw	r28, 0x06	; 6
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <analogWrite>

0000092a <_Z22TaskNitriteNitrateReadPv>:
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	00 d0       	rcall	.+0      	; 0x930 <_Z22TaskNitriteNitrateReadPv+0x6>
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	8d e0       	ldi	r24, 0x0D	; 13
     940:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     944:	11 e0       	ldi	r17, 0x01	; 1
     946:	02 e0       	ldi	r16, 0x02	; 2
     948:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Red>
     94c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Red+0x1>
     950:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Red+0x2>
     954:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Red+0x3>
     958:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Red+0x4>
     95c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Red+0x5>
     960:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     964:	10 93 65 03 	sts	0x0365, r17	; 0x800365 <typeToRead>
     968:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z13findTestStripv>
     96c:	81 11       	cpse	r24, r1
     96e:	fc cf       	rjmp	.-8      	; 0x968 <_Z22TaskNitriteNitrateReadPv+0x3e>
     970:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Green>
     974:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Green+0x1>
     978:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Green+0x2>
     97c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Green+0x3>
     980:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Green+0x4>
     984:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Green+0x5>
     988:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     98c:	6a ef       	ldi	r22, 0xFA	; 250
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 b7 0c 	call	0x196e	; 0x196e <delay>
     998:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z9ScanColorv>
     99c:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     9a0:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     9a4:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     9a8:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     9ac:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     9b0:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     9b4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     9b8:	00 93 65 03 	sts	0x0365, r16	; 0x800365 <typeToRead>
     9bc:	0e 94 0e 04 	call	0x81c	; 0x81c <_Z13findTestStripv>
     9c0:	81 11       	cpse	r24, r1
     9c2:	fc cf       	rjmp	.-8      	; 0x9bc <_Z22TaskNitriteNitrateReadPv+0x92>
     9c4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     9c8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     9cc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     9d0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     9d4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     9d8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     9dc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     9e0:	6a ef       	ldi	r22, 0xFA	; 250
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <delay>
     9ec:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Z9ScanColorv>
     9f0:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     9f4:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     9f8:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     9fc:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     a00:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     a04:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     a08:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>
     a0c:	61 e7       	ldi	r22, 0x71	; 113
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	ce 01       	movw	r24, r28
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	0e 94 04 14 	call	0x2808	; 0x2808 <vTaskDelayUntil>
     a18:	97 cf       	rjmp	.-210    	; 0x948 <_Z22TaskNitriteNitrateReadPv+0x1e>

00000a1a <_Z8setupLEDv>:
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     a32:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <Off>
     a36:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <Off+0x1>
     a3a:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <Off+0x2>
     a3e:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <Off+0x3>
     a42:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <Off+0x4>
     a46:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <Off+0x5>
     a4a:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_Z6setLED8LEDColor>

00000a4e <_Z6phInitv>:
     a4e:	86 e4       	ldi	r24, 0x46	; 70
     a50:	92 e0       	ldi	r25, 0x02	; 2
     a52:	0c 94 cc 00 	jmp	0x198	; 0x198 <_ZN10DFRobot_PH5beginEv>

00000a56 <setup>:
=======
     25c:	c8 01       	movw	r24, r16
     25e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <eeprom_write_byte>
     262:	0f 5f       	subi	r16, 0xFF	; 255
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	04 30       	cpi	r16, 0x04	; 4
     268:	11 05       	cpc	r17, r1
     26a:	a9 f7       	brne	.-22     	; 0x256 <_ZN10DFRobot_PH5beginEv+0x9a>
    }
    EEPROM_read(PHVALUEADDR+4, this->_acidVoltage);//load the acid (pH = 4.0) voltage of the pH board from the EEPROM
     26c:	7e 01       	movw	r14, r28
     26e:	f4 e0       	ldi	r31, 0x04	; 4
     270:	ef 0e       	add	r14, r31
     272:	f1 1c       	adc	r15, r1
     274:	67 01       	movw	r12, r14
     276:	04 e0       	ldi	r16, 0x04	; 4
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	c8 01       	movw	r24, r16
     27c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     280:	f6 01       	movw	r30, r12
     282:	81 93       	st	Z+, r24
     284:	6f 01       	movw	r12, r30
     286:	0f 5f       	subi	r16, 0xFF	; 255
     288:	1f 4f       	sbci	r17, 0xFF	; 255
     28a:	08 30       	cpi	r16, 0x08	; 8
     28c:	11 05       	cpc	r17, r1
     28e:	a9 f7       	brne	.-22     	; 0x27a <_ZN10DFRobot_PH5beginEv+0xbe>
    Serial.print("_acidVoltage:");
     290:	62 e4       	ldi	r22, 0x42	; 66
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	84 e7       	ldi	r24, 0x74	; 116
     296:	93 e0       	ldi	r25, 0x03	; 3
     298:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
    Serial.println(this->_acidVoltage);
     29c:	4c 81       	ldd	r20, Y+4	; 0x04
     29e:	5d 81       	ldd	r21, Y+5	; 0x05
     2a0:	6e 81       	ldd	r22, Y+6	; 0x06
     2a2:	7f 81       	ldd	r23, Y+7	; 0x07
     2a4:	22 e0       	ldi	r18, 0x02	; 2
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	84 e7       	ldi	r24, 0x74	; 116
     2aa:	93 e0       	ldi	r25, 0x03	; 3
     2ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR+4)==0xFF && EEPROM.read(PHVALUEADDR+5)==0xFF && EEPROM.read(PHVALUEADDR+6)==0xFF && EEPROM.read(PHVALUEADDR+7)==0xFF){
     2b0:	84 e0       	ldi	r24, 0x04	; 4
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2b8:	8f 3f       	cpi	r24, 0xFF	; 255
     2ba:	31 f5       	brne	.+76     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2c4:	8f 3f       	cpi	r24, 0xFF	; 255
     2c6:	01 f5       	brne	.+64     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2d0:	8f 3f       	cpi	r24, 0xFF	; 255
     2d2:	d1 f4       	brne	.+52     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2d4:	87 e0       	ldi	r24, 0x07	; 7
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2dc:	8f 3f       	cpi	r24, 0xFF	; 255
     2de:	a1 f4       	brne	.+40     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
        this->_acidVoltage = 2032.44;  // new EEPROM, write typical voltage
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	9e e0       	ldi	r25, 0x0E	; 14
     2e4:	ae ef       	ldi	r26, 0xFE	; 254
     2e6:	b4 e4       	ldi	r27, 0x44	; 68
     2e8:	8c 83       	std	Y+4, r24	; 0x04
     2ea:	9d 83       	std	Y+5, r25	; 0x05
     2ec:	ae 83       	std	Y+6, r26	; 0x06
     2ee:	bf 83       	std	Y+7, r27	; 0x07
     2f0:	c4 e0       	ldi	r28, 0x04	; 4
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
        EEPROM_write(PHVALUEADDR+4, this->_acidVoltage);
     2f4:	f7 01       	movw	r30, r14
     2f6:	61 91       	ld	r22, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	ce 01       	movw	r24, r28
     2fc:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <eeprom_write_byte>
     300:	21 96       	adiw	r28, 0x01	; 1
     302:	c8 30       	cpi	r28, 0x08	; 8
     304:	d1 05       	cpc	r29, r1
     306:	b1 f7       	brne	.-20     	; 0x2f4 <_ZN10DFRobot_PH5beginEv+0x138>
    }
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	08 95       	ret

0000031a <_ZN10DFRobot_PH6readPHEff>:

float DFRobot_PH::readPH(float voltage, float temperature)
{
     31a:	4f 92       	push	r4
     31c:	5f 92       	push	r5
     31e:	6f 92       	push	r6
     320:	7f 92       	push	r7
     322:	8f 92       	push	r8
     324:	9f 92       	push	r9
     326:	af 92       	push	r10
     328:	bf 92       	push	r11
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
     338:	2a 01       	movw	r4, r20
     33a:	3b 01       	movw	r6, r22
    float slope = (7.0-4.0)/((this->_neutralVoltage-1500.0)/3.0 - (this->_acidVoltage-1500.0)/3.0);  // two point: (_neutralVoltage,7.0),(_acidVoltage,4.0)
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e8       	ldi	r19, 0x80	; 128
     340:	4b eb       	ldi	r20, 0xBB	; 187
     342:	54 e4       	ldi	r21, 0x44	; 68
     344:	68 85       	ldd	r22, Y+8	; 0x08
     346:	79 85       	ldd	r23, Y+9	; 0x09
     348:	8a 85       	ldd	r24, Y+10	; 0x0a
     34a:	9b 85       	ldd	r25, Y+11	; 0x0b
     34c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
     350:	4b 01       	movw	r8, r22
     352:	5c 01       	movw	r10, r24
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	40 e4       	ldi	r20, 0x40	; 64
     35a:	50 e4       	ldi	r21, 0x40	; 64
     35c:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     360:	6b 01       	movw	r12, r22
     362:	7c 01       	movw	r14, r24
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	30 e8       	ldi	r19, 0x80	; 128
     368:	4b eb       	ldi	r20, 0xBB	; 187
     36a:	54 e4       	ldi	r21, 0x44	; 68
     36c:	6c 81       	ldd	r22, Y+4	; 0x04
     36e:	7d 81       	ldd	r23, Y+5	; 0x05
     370:	8e 81       	ldd	r24, Y+6	; 0x06
     372:	9f 81       	ldd	r25, Y+7	; 0x07
     374:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	40 e4       	ldi	r20, 0x40	; 64
     37e:	50 e4       	ldi	r21, 0x40	; 64
     380:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     384:	9b 01       	movw	r18, r22
     386:	ac 01       	movw	r20, r24
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
     390:	9b 01       	movw	r18, r22
     392:	ac 01       	movw	r20, r24
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e4       	ldi	r24, 0x40	; 64
     39a:	90 e4       	ldi	r25, 0x40	; 64
     39c:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
    float intercept =  7.0 - slope*(this->_neutralVoltage-1500.0)/3.0;
    //Serial.print("slope:");
    //Serial.print(slope);
    //Serial.print(",intercept:");
    //Serial.println(intercept);
    this->_phValue = slope*(voltage-1500.0)/3.0+intercept;  //y = k*x + b
     3a4:	9b 01       	movw	r18, r22
     3a6:	ac 01       	movw	r20, r24
     3a8:	c5 01       	movw	r24, r10
     3aa:	b4 01       	movw	r22, r8
     3ac:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e4       	ldi	r20, 0x40	; 64
     3b6:	50 e4       	ldi	r21, 0x40	; 64
     3b8:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     3bc:	9b 01       	movw	r18, r22
     3be:	ac 01       	movw	r20, r24
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 ee       	ldi	r24, 0xE0	; 224
     3c6:	90 e4       	ldi	r25, 0x40	; 64
     3c8:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
     3cc:	4b 01       	movw	r8, r22
     3ce:	5c 01       	movw	r10, r24
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e8       	ldi	r19, 0x80	; 128
     3d4:	4b eb       	ldi	r20, 0xBB	; 187
     3d6:	54 e4       	ldi	r21, 0x44	; 68
     3d8:	c3 01       	movw	r24, r6
     3da:	b2 01       	movw	r22, r4
     3dc:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
     3e0:	a7 01       	movw	r20, r14
     3e2:	96 01       	movw	r18, r12
     3e4:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e4       	ldi	r20, 0x40	; 64
     3ee:	50 e4       	ldi	r21, 0x40	; 64
     3f0:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
     3f4:	9b 01       	movw	r18, r22
     3f6:	ac 01       	movw	r20, r24
     3f8:	c5 01       	movw	r24, r10
     3fa:	b4 01       	movw	r22, r8
     3fc:	0e 94 4e 0a 	call	0x149c	; 0x149c <__addsf3>
     400:	68 83       	st	Y, r22
     402:	79 83       	std	Y+1, r23	; 0x01
     404:	8a 83       	std	Y+2, r24	; 0x02
     406:	9b 83       	std	Y+3, r25	; 0x03
    return _phValue;
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	ff 90       	pop	r15
     40e:	ef 90       	pop	r14
     410:	df 90       	pop	r13
     412:	cf 90       	pop	r12
     414:	bf 90       	pop	r11
     416:	af 90       	pop	r10
     418:	9f 90       	pop	r9
     41a:	8f 90       	pop	r8
     41c:	7f 90       	pop	r7
     41e:	6f 90       	pop	r6
     420:	5f 90       	pop	r5
     422:	4f 90       	pop	r4
     424:	08 95       	ret

00000426 <_Z8fromWifiv>:
  char action = 'a';

  switch(action)
  {
    case 'a':
      vTaskResume(xAmmonia);
     426:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <xAmmonia>
     42a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <xAmmonia+0x1>
     42e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <vTaskResume>

00000432 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     432:	61 15       	cp	r22, r1
     434:	71 05       	cpc	r23, r1
     436:	79 f0       	breq	.+30     	; 0x456 <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     438:	fb 01       	movw	r30, r22
     43a:	01 90       	ld	r0, Z+
     43c:	00 20       	and	r0, r0
     43e:	e9 f7       	brne	.-6      	; 0x43a <_ZN5Print5writeEPKc+0x8>
     440:	31 97       	sbiw	r30, 0x01	; 1
     442:	af 01       	movw	r20, r30
     444:	46 1b       	sub	r20, r22
     446:	57 0b       	sbc	r21, r23
     448:	dc 01       	movw	r26, r24
     44a:	ed 91       	ld	r30, X+
     44c:	fc 91       	ld	r31, X
     44e:	02 80       	ldd	r0, Z+2	; 0x02
     450:	f3 81       	ldd	r31, Z+3	; 0x03
     452:	e0 2d       	mov	r30, r0
     454:	09 94       	ijmp
    }
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret

0000045c <_ZN14HardwareSerial5writeEl>:
    virtual int read(void);
    virtual int availableForWrite(void);
    virtual void flush(void);
    virtual size_t write(uint8_t);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
     45c:	dc 01       	movw	r26, r24
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	01 90       	ld	r0, Z+
     464:	f0 81       	ld	r31, Z
     466:	e0 2d       	mov	r30, r0
     468:	64 2f       	mov	r22, r20
     46a:	09 94       	ijmp

0000046c <_Z11measureTempv>:

OneWire ds(TEMP_PIN); // Temp sensor on pin 7


/* measureTemp() returns the measured temperature in degrees Celsius */
float measureTemp() {
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	64 97       	sbiw	r28, 0x14	; 20
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
	byte type_s;
	byte data[12];
	byte addr[8];
	float celsius, fahrenheit;
	
	ds.reset_search();
     48a:	87 e4       	ldi	r24, 0x47	; 71
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN7OneWire12reset_searchEv>
	delay(250);
     492:	6a ef       	ldi	r22, 0xFA	; 250
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
	ds.search(addr);
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	be 01       	movw	r22, r28
     4a2:	63 5f       	subi	r22, 0xF3	; 243
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	87 e4       	ldi	r24, 0x47	; 71
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <_ZN7OneWire6searchEPhb>

	if (OneWire::crc8(addr, 7) != addr[7]) {
     4ae:	67 e0       	ldi	r22, 0x07	; 7
     4b0:	ce 01       	movw	r24, r28
     4b2:	0d 96       	adiw	r24, 0x0d	; 13
     4b4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <_ZN7OneWire4crc8EPKhh>
     4b8:	9c 89       	ldd	r25, Y+20	; 0x14
     4ba:	89 17       	cp	r24, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <_Z11measureTempv+0x58>
		Serial.println("CRC is not valid!");
     4be:	65 e6       	ldi	r22, 0x65	; 101
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <_Z11measureTempv+0x6a>
		return -1;
	}
//	Serial.println();
	
	// the first ROM byte indicates which chip
	switch (addr[0]) {
     4c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     4c6:	82 32       	cpi	r24, 0x22	; 34
     4c8:	91 f0       	breq	.+36     	; 0x4ee <_Z11measureTempv+0x82>
     4ca:	88 32       	cpi	r24, 0x28	; 40
     4cc:	81 f0       	breq	.+32     	; 0x4ee <_Z11measureTempv+0x82>
     4ce:	80 31       	cpi	r24, 0x10	; 16
     4d0:	59 f0       	breq	.+22     	; 0x4e8 <_Z11measureTempv+0x7c>
		case 0x22:
		//Serial.println("  Chip = DS1822");
		type_s = 0;
		break;
		default:
		Serial.println("Device is not a DS18x20 family device.");
     4d2:	67 e7       	ldi	r22, 0x77	; 119
     4d4:	71 e0       	ldi	r23, 0x01	; 1
     4d6:	84 e7       	ldi	r24, 0x74	; 116
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN5Print7printlnEPKc>
		return -1;
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	80 e8       	ldi	r24, 0x80	; 128
     4e4:	9f eb       	ldi	r25, 0xBF	; 191
     4e6:	6a c0       	rjmp	.+212    	; 0x5bc <_Z11measureTempv+0x150>
	
	// the first ROM byte indicates which chip
	switch (addr[0]) {
		case 0x10:
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		type_s = 1;
     4e8:	ff 24       	eor	r15, r15
     4ea:	f3 94       	inc	r15
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <_Z11measureTempv+0x84>
		break;
		case 0x28:
		//Serial.println("  Chip = DS18B20");
		type_s = 0;
     4ee:	f1 2c       	mov	r15, r1
		default:
		Serial.println("Device is not a DS18x20 family device.");
		return -1;
	}

	ds.reset();
     4f0:	87 e4       	ldi	r24, 0x47	; 71
     4f2:	93 e0       	ldi	r25, 0x03	; 3
     4f4:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN7OneWire5resetEv>
	ds.select(addr);
     4f8:	be 01       	movw	r22, r28
     4fa:	63 5f       	subi	r22, 0xF3	; 243
     4fc:	7f 4f       	sbci	r23, 0xFF	; 255
     4fe:	87 e4       	ldi	r24, 0x47	; 71
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN7OneWire6selectEPKh>
	ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	64 e4       	ldi	r22, 0x44	; 68
     50a:	87 e4       	ldi	r24, 0x47	; 71
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN7OneWire5writeEhh>
	
	delay(1000);     // maybe 750ms is enough, maybe not
     512:	68 ee       	ldi	r22, 0xE8	; 232
     514:	73 e0       	ldi	r23, 0x03	; 3
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
	// we might do a ds.depower() here, but the reset will take care of it.
	
	present = ds.reset();
     51e:	87 e4       	ldi	r24, 0x47	; 71
     520:	93 e0       	ldi	r25, 0x03	; 3
     522:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN7OneWire5resetEv>
	ds.select(addr);
     526:	be 01       	movw	r22, r28
     528:	63 5f       	subi	r22, 0xF3	; 243
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	87 e4       	ldi	r24, 0x47	; 71
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN7OneWire6selectEPKh>
	ds.write(0xBE);         // Read Scratchpad
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	6e eb       	ldi	r22, 0xBE	; 190
     538:	87 e4       	ldi	r24, 0x47	; 71
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN7OneWire5writeEhh>
     540:	8e 01       	movw	r16, r28
     542:	0f 5f       	subi	r16, 0xFF	; 255
     544:	1f 4f       	sbci	r17, 0xFF	; 255
     546:	6e 01       	movw	r12, r28
     548:	8a e0       	ldi	r24, 0x0A	; 10
     54a:	c8 0e       	add	r12, r24
     54c:	d1 1c       	adc	r13, r1

	//Serial.print("  Data = ");
	//Serial.print(present, HEX);
	//Serial.print(" ");
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
		data[i] = ds.read();
     54e:	87 e4       	ldi	r24, 0x47	; 71
     550:	93 e0       	ldi	r25, 0x03	; 3
     552:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN7OneWire4readEv>
     556:	f8 01       	movw	r30, r16
     558:	81 93       	st	Z+, r24
     55a:	8f 01       	movw	r16, r30
	ds.write(0xBE);         // Read Scratchpad

	//Serial.print("  Data = ");
	//Serial.print(present, HEX);
	//Serial.print(" ");
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     55c:	ec 15       	cp	r30, r12
     55e:	fd 05       	cpc	r31, r13
     560:	b1 f7       	brne	.-20     	; 0x54e <_Z11measureTempv+0xe2>

	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
     562:	69 81       	ldd	r22, Y+1	; 0x01
     564:	7a 81       	ldd	r23, Y+2	; 0x02
	if (type_s) {
     566:	ff 20       	and	r15, r15
     568:	89 f0       	breq	.+34     	; 0x58c <_Z11measureTempv+0x120>
		raw = raw << 3; // 9 bit resolution default
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	66 0f       	add	r22, r22
     56e:	77 1f       	adc	r23, r23
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <_Z11measureTempv+0x100>
		if (data[7] == 0x10) {
     574:	88 85       	ldd	r24, Y+8	; 0x08
     576:	80 31       	cpi	r24, 0x10	; 16
     578:	a9 f4       	brne	.+42     	; 0x5a4 <_Z11measureTempv+0x138>
			// "count remain" gives full 12 bit resolution
			raw = (raw & 0xFFF0) + 12 - data[6];
     57a:	2f 81       	ldd	r18, Y+7	; 0x07
     57c:	8c e0       	ldi	r24, 0x0C	; 12
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	82 1b       	sub	r24, r18
     582:	91 09       	sbc	r25, r1
     584:	60 7f       	andi	r22, 0xF0	; 240
     586:	68 0f       	add	r22, r24
     588:	79 1f       	adc	r23, r25
     58a:	0c c0       	rjmp	.+24     	; 0x5a4 <_Z11measureTempv+0x138>
		}
		} else {
		byte cfg = (data[4] & 0x60);
     58c:	8d 81       	ldd	r24, Y+5	; 0x05
     58e:	80 76       	andi	r24, 0x60	; 96
		// at lower res, the low bits are undefined, so let's zero them
		if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
     590:	11 f4       	brne	.+4      	; 0x596 <_Z11measureTempv+0x12a>
     592:	68 7f       	andi	r22, 0xF8	; 248
     594:	07 c0       	rjmp	.+14     	; 0x5a4 <_Z11measureTempv+0x138>
		else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
     596:	80 32       	cpi	r24, 0x20	; 32
     598:	11 f4       	brne	.+4      	; 0x59e <_Z11measureTempv+0x132>
     59a:	6c 7f       	andi	r22, 0xFC	; 252
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <_Z11measureTempv+0x138>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
     59e:	80 34       	cpi	r24, 0x40	; 64
     5a0:	09 f4       	brne	.+2      	; 0x5a4 <_Z11measureTempv+0x138>
     5a2:	6e 7f       	andi	r22, 0xFE	; 254
		//// default is 12 bit resolution, 750 ms conversion time
	}
	celsius = (float)raw / 16.0;
     5a4:	07 2e       	mov	r0, r23
     5a6:	00 0c       	add	r0, r0
     5a8:	88 0b       	sbc	r24, r24
     5aa:	99 0b       	sbc	r25, r25
     5ac:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
     5b0:	20 e0       	ldi	r18, 0x00	; 0
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	40 e8       	ldi	r20, 0x80	; 128
     5b6:	5d e3       	ldi	r21, 0x3D	; 61
     5b8:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
	//Serial.print(celsius);
	//Serial.print(" Celsius, ");
	//Serial.print(fahrenheit);
	//Serial.println(" Fahrenheit");
	return celsius;
     5bc:	64 96       	adiw	r28, 0x14	; 20
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	df 90       	pop	r13
     5d4:	cf 90       	pop	r12
     5d6:	08 95       	ret

000005d8 <_Z9addColorsv>:
MD_TCS230  CS(S2, S3, OE);


// add possible color strip values to specific arrays
void addColors()
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
	int index = 0;
	Color c;
	c.ppm = 0.0;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     5e0:	c4 e1       	ldi	r28, 0x14	; 20
     5e2:	d3 e0       	ldi	r29, 0x03	; 3
     5e4:	18 82       	st	Y, r1
     5e6:	19 82       	std	Y+1, r1	; 0x01
     5e8:	1a 82       	std	Y+2, r1	; 0x02
     5ea:	1b 82       	std	Y+3, r1	; 0x03
     5ec:	1d 82       	std	Y+5, r1	; 0x05
     5ee:	1c 82       	std	Y+4, r1	; 0x04
     5f0:	1f 82       	std	Y+7, r1	; 0x07
     5f2:	1e 82       	std	Y+6, r1	; 0x06
     5f4:	19 86       	std	Y+9, r1	; 0x09
     5f6:	18 86       	std	Y+8, r1	; 0x08

	c.ppm = 0.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     5f8:	ae ec       	ldi	r26, 0xCE	; 206
     5fa:	b2 e0       	ldi	r27, 0x02	; 2
     5fc:	1d 92       	st	X+, r1
     5fe:	1d 92       	st	X+, r1
     600:	1d 92       	st	X+, r1
     602:	1c 92       	st	X, r1
     604:	13 97       	sbiw	r26, 0x03	; 3
     606:	15 96       	adiw	r26, 0x05	; 5
     608:	1c 92       	st	X, r1
     60a:	1e 92       	st	-X, r1
     60c:	14 97       	sbiw	r26, 0x04	; 4
     60e:	17 96       	adiw	r26, 0x07	; 7
     610:	1c 92       	st	X, r1
     612:	1e 92       	st	-X, r1
     614:	16 97       	sbiw	r26, 0x06	; 6
     616:	19 96       	adiw	r26, 0x09	; 9
     618:	1c 92       	st	X, r1
     61a:	1e 92       	st	-X, r1
     61c:	18 97       	sbiw	r26, 0x08	; 8

	c.ppm = 0.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     61e:	e8 e8       	ldi	r30, 0x88	; 136
     620:	f2 e0       	ldi	r31, 0x02	; 2
     622:	10 82       	st	Z, r1
     624:	11 82       	std	Z+1, r1	; 0x01
     626:	12 82       	std	Z+2, r1	; 0x02
     628:	13 82       	std	Z+3, r1	; 0x03
     62a:	15 82       	std	Z+5, r1	; 0x05
     62c:	14 82       	std	Z+4, r1	; 0x04
     62e:	17 82       	std	Z+7, r1	; 0x07
     630:	16 82       	std	Z+6, r1	; 0x06
     632:	11 86       	std	Z+9, r1	; 0x09
     634:	10 86       	std	Z+8, r1	; 0x08

	++index;

	c.ppm = 0.25;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	60 e8       	ldi	r22, 0x80	; 128
     63c:	7e e3       	ldi	r23, 0x3E	; 62
     63e:	4a 87       	std	Y+10, r20	; 0x0a
     640:	5b 87       	std	Y+11, r21	; 0x0b
     642:	6c 87       	std	Y+12, r22	; 0x0c
     644:	7d 87       	std	Y+13, r23	; 0x0d
     646:	1f 86       	std	Y+15, r1	; 0x0f
     648:	1e 86       	std	Y+14, r1	; 0x0e
     64a:	19 8a       	std	Y+17, r1	; 0x11
     64c:	18 8a       	std	Y+16, r1	; 0x10
     64e:	1b 8a       	std	Y+19, r1	; 0x13
     650:	1a 8a       	std	Y+18, r1	; 0x12

	c.ppm = 0.15;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     652:	4a e9       	ldi	r20, 0x9A	; 154
     654:	59 e9       	ldi	r21, 0x99	; 153
     656:	69 e1       	ldi	r22, 0x19	; 25
     658:	7e e3       	ldi	r23, 0x3E	; 62
     65a:	1a 96       	adiw	r26, 0x0a	; 10
     65c:	4d 93       	st	X+, r20
     65e:	5d 93       	st	X+, r21
     660:	6d 93       	st	X+, r22
     662:	7c 93       	st	X, r23
     664:	1d 97       	sbiw	r26, 0x0d	; 13
     666:	1f 96       	adiw	r26, 0x0f	; 15
     668:	1c 92       	st	X, r1
     66a:	1e 92       	st	-X, r1
     66c:	1e 97       	sbiw	r26, 0x0e	; 14
     66e:	51 96       	adiw	r26, 0x11	; 17
     670:	1c 92       	st	X, r1
     672:	1e 92       	st	-X, r1
     674:	50 97       	sbiw	r26, 0x10	; 16
     676:	53 96       	adiw	r26, 0x13	; 19
     678:	1c 92       	st	X, r1
     67a:	1e 92       	st	-X, r1
     67c:	52 97       	sbiw	r26, 0x12	; 18

	c.ppm = 0.5;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	7f e3       	ldi	r23, 0x3F	; 63
     686:	42 87       	std	Z+10, r20	; 0x0a
     688:	53 87       	std	Z+11, r21	; 0x0b
     68a:	64 87       	std	Z+12, r22	; 0x0c
     68c:	75 87       	std	Z+13, r23	; 0x0d
     68e:	17 86       	std	Z+15, r1	; 0x0f
     690:	16 86       	std	Z+14, r1	; 0x0e
     692:	11 8a       	std	Z+17, r1	; 0x11
     694:	10 8a       	std	Z+16, r1	; 0x10
     696:	13 8a       	std	Z+19, r1	; 0x13
     698:	12 8a       	std	Z+18, r1	; 0x12

	++index;

	c.ppm = 0.5;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     69a:	4c 8b       	std	Y+20, r20	; 0x14
     69c:	5d 8b       	std	Y+21, r21	; 0x15
     69e:	6e 8b       	std	Y+22, r22	; 0x16
     6a0:	7f 8b       	std	Y+23, r23	; 0x17
     6a2:	19 8e       	std	Y+25, r1	; 0x19
     6a4:	18 8e       	std	Y+24, r1	; 0x18
     6a6:	1b 8e       	std	Y+27, r1	; 0x1b
     6a8:	1a 8e       	std	Y+26, r1	; 0x1a
     6aa:	1d 8e       	std	Y+29, r1	; 0x1d
     6ac:	1c 8e       	std	Y+28, r1	; 0x1c

	c.ppm = 0.3;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     6ae:	4a e9       	ldi	r20, 0x9A	; 154
     6b0:	59 e9       	ldi	r21, 0x99	; 153
     6b2:	69 e9       	ldi	r22, 0x99	; 153
     6b4:	7e e3       	ldi	r23, 0x3E	; 62
     6b6:	54 96       	adiw	r26, 0x14	; 20
     6b8:	4d 93       	st	X+, r20
     6ba:	5d 93       	st	X+, r21
     6bc:	6d 93       	st	X+, r22
     6be:	7c 93       	st	X, r23
     6c0:	57 97       	sbiw	r26, 0x17	; 23
     6c2:	59 96       	adiw	r26, 0x19	; 25
     6c4:	1c 92       	st	X, r1
     6c6:	1e 92       	st	-X, r1
     6c8:	58 97       	sbiw	r26, 0x18	; 24
     6ca:	5b 96       	adiw	r26, 0x1b	; 27
     6cc:	1c 92       	st	X, r1
     6ce:	1e 92       	st	-X, r1
     6d0:	5a 97       	sbiw	r26, 0x1a	; 26
     6d2:	5d 96       	adiw	r26, 0x1d	; 29
     6d4:	1c 92       	st	X, r1
     6d6:	1e 92       	st	-X, r1
     6d8:	5c 97       	sbiw	r26, 0x1c	; 28

	c.ppm = 2.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e4       	ldi	r23, 0x40	; 64
     6e2:	44 8b       	std	Z+20, r20	; 0x14
     6e4:	55 8b       	std	Z+21, r21	; 0x15
     6e6:	66 8b       	std	Z+22, r22	; 0x16
     6e8:	77 8b       	std	Z+23, r23	; 0x17
     6ea:	11 8e       	std	Z+25, r1	; 0x19
     6ec:	10 8e       	std	Z+24, r1	; 0x18
     6ee:	13 8e       	std	Z+27, r1	; 0x1b
     6f0:	12 8e       	std	Z+26, r1	; 0x1a
     6f2:	15 8e       	std	Z+29, r1	; 0x1d
     6f4:	14 8e       	std	Z+28, r1	; 0x1c

	++index;

	c.ppm = 3.0;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     6f6:	00 e0       	ldi	r16, 0x00	; 0
     6f8:	10 e0       	ldi	r17, 0x00	; 0
     6fa:	20 e4       	ldi	r18, 0x40	; 64
     6fc:	30 e4       	ldi	r19, 0x40	; 64
     6fe:	0e 8f       	std	Y+30, r16	; 0x1e
     700:	1f 8f       	std	Y+31, r17	; 0x1f
     702:	28 a3       	std	Y+32, r18	; 0x20
     704:	39 a3       	std	Y+33, r19	; 0x21
     706:	1b a2       	std	Y+35, r1	; 0x23
     708:	1a a2       	std	Y+34, r1	; 0x22
     70a:	1d a2       	std	Y+37, r1	; 0x25
     70c:	1c a2       	std	Y+36, r1	; 0x24
     70e:	1f a2       	std	Y+39, r1	; 0x27
     710:	1e a2       	std	Y+38, r1	; 0x26

	c.ppm = 1.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e8       	ldi	r22, 0x80	; 128
     718:	7f e3       	ldi	r23, 0x3F	; 63
     71a:	5e 96       	adiw	r26, 0x1e	; 30
     71c:	4d 93       	st	X+, r20
     71e:	5d 93       	st	X+, r21
     720:	6d 93       	st	X+, r22
     722:	7c 93       	st	X, r23
     724:	91 97       	sbiw	r26, 0x21	; 33
     726:	93 96       	adiw	r26, 0x23	; 35
     728:	1c 92       	st	X, r1
     72a:	1e 92       	st	-X, r1
     72c:	92 97       	sbiw	r26, 0x22	; 34
     72e:	95 96       	adiw	r26, 0x25	; 37
     730:	1c 92       	st	X, r1
     732:	1e 92       	st	-X, r1
     734:	94 97       	sbiw	r26, 0x24	; 36
     736:	97 96       	adiw	r26, 0x27	; 39
     738:	1c 92       	st	X, r1
     73a:	1e 92       	st	-X, r1
     73c:	96 97       	sbiw	r26, 0x26	; 38

	c.ppm = 5.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	60 ea       	ldi	r22, 0xA0	; 160
     744:	70 e4       	ldi	r23, 0x40	; 64
     746:	46 8f       	std	Z+30, r20	; 0x1e
     748:	57 8f       	std	Z+31, r21	; 0x1f
     74a:	60 a3       	std	Z+32, r22	; 0x20
     74c:	71 a3       	std	Z+33, r23	; 0x21
     74e:	13 a2       	std	Z+35, r1	; 0x23
     750:	12 a2       	std	Z+34, r1	; 0x22
     752:	15 a2       	std	Z+37, r1	; 0x25
     754:	14 a2       	std	Z+36, r1	; 0x24
     756:	17 a2       	std	Z+39, r1	; 0x27
     758:	16 a2       	std	Z+38, r1	; 0x26

	++index;

	c.ppm = 6.0;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 ec       	ldi	r22, 0xC0	; 192
     760:	70 e4       	ldi	r23, 0x40	; 64
     762:	48 a7       	std	Y+40, r20	; 0x28
     764:	59 a7       	std	Y+41, r21	; 0x29
     766:	6a a7       	std	Y+42, r22	; 0x2a
     768:	7b a7       	std	Y+43, r23	; 0x2b
     76a:	1d a6       	std	Y+45, r1	; 0x2d
     76c:	1c a6       	std	Y+44, r1	; 0x2c
     76e:	1f a6       	std	Y+47, r1	; 0x2f
     770:	1e a6       	std	Y+46, r1	; 0x2e
     772:	19 aa       	std	Y+49, r1	; 0x31
     774:	18 aa       	std	Y+48, r1	; 0x30

	c.ppm = 1.5;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 ec       	ldi	r22, 0xC0	; 192
     77c:	7f e3       	ldi	r23, 0x3F	; 63
     77e:	98 96       	adiw	r26, 0x28	; 40
     780:	4d 93       	st	X+, r20
     782:	5d 93       	st	X+, r21
     784:	6d 93       	st	X+, r22
     786:	7c 93       	st	X, r23
     788:	9b 97       	sbiw	r26, 0x2b	; 43
     78a:	9d 96       	adiw	r26, 0x2d	; 45
     78c:	1c 92       	st	X, r1
     78e:	1e 92       	st	-X, r1
     790:	9c 97       	sbiw	r26, 0x2c	; 44
     792:	9f 96       	adiw	r26, 0x2f	; 47
     794:	1c 92       	st	X, r1
     796:	1e 92       	st	-X, r1
     798:	9e 97       	sbiw	r26, 0x2e	; 46
     79a:	d1 96       	adiw	r26, 0x31	; 49
     79c:	1c 92       	st	X, r1
     79e:	1e 92       	st	-X, r1
     7a0:	d0 97       	sbiw	r26, 0x30	; 48

	c.ppm = 10.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	60 e2       	ldi	r22, 0x20	; 32
     7a8:	71 e4       	ldi	r23, 0x41	; 65
     7aa:	40 a7       	std	Z+40, r20	; 0x28
     7ac:	51 a7       	std	Z+41, r21	; 0x29
     7ae:	62 a7       	std	Z+42, r22	; 0x2a
     7b0:	73 a7       	std	Z+43, r23	; 0x2b
     7b2:	15 a6       	std	Z+45, r1	; 0x2d
     7b4:	14 a6       	std	Z+44, r1	; 0x2c
     7b6:	17 a6       	std	Z+47, r1	; 0x2f
     7b8:	16 a6       	std	Z+46, r1	; 0x2e
     7ba:	11 aa       	std	Z+49, r1	; 0x31
     7bc:	10 aa       	std	Z+48, r1	; 0x30

	++index;

	c.ppm = 3.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     7be:	d2 96       	adiw	r26, 0x32	; 50
     7c0:	0d 93       	st	X+, r16
     7c2:	1d 93       	st	X+, r17
     7c4:	2d 93       	st	X+, r18
     7c6:	3c 93       	st	X, r19
     7c8:	d5 97       	sbiw	r26, 0x35	; 53
     7ca:	d7 96       	adiw	r26, 0x37	; 55
     7cc:	1c 92       	st	X, r1
     7ce:	1e 92       	st	-X, r1
     7d0:	d6 97       	sbiw	r26, 0x36	; 54
     7d2:	d9 96       	adiw	r26, 0x39	; 57
     7d4:	1c 92       	st	X, r1
     7d6:	1e 92       	st	-X, r1
     7d8:	d8 97       	sbiw	r26, 0x38	; 56
     7da:	db 96       	adiw	r26, 0x3b	; 59
     7dc:	1c 92       	st	X, r1
     7de:	1e 92       	st	-X, r1
     7e0:	da 97       	sbiw	r26, 0x3a	; 58

	c.ppm = 20.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     7e2:	00 e0       	ldi	r16, 0x00	; 0
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	20 ea       	ldi	r18, 0xA0	; 160
     7e8:	31 e4       	ldi	r19, 0x41	; 65
     7ea:	02 ab       	std	Z+50, r16	; 0x32
     7ec:	13 ab       	std	Z+51, r17	; 0x33
     7ee:	24 ab       	std	Z+52, r18	; 0x34
     7f0:	35 ab       	std	Z+53, r19	; 0x35
     7f2:	17 aa       	std	Z+55, r1	; 0x37
     7f4:	16 aa       	std	Z+54, r1	; 0x36
     7f6:	11 ae       	std	Z+57, r1	; 0x39
     7f8:	10 ae       	std	Z+56, r1	; 0x38
     7fa:	13 ae       	std	Z+59, r1	; 0x3b
     7fc:	12 ae       	std	Z+58, r1	; 0x3a

	++index;

	c.ppm = 10.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     7fe:	dc 96       	adiw	r26, 0x3c	; 60
     800:	4d 93       	st	X+, r20
     802:	5d 93       	st	X+, r21
     804:	6d 93       	st	X+, r22
     806:	7c 93       	st	X, r23
     808:	df 97       	sbiw	r26, 0x3f	; 63
     80a:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <Nitrite+0x41>
     80e:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <Nitrite+0x40>
     812:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <Nitrite+0x43>
     816:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <Nitrite+0x42>
     81a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <Nitrite+0x45>
     81e:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <Nitrite+0x44>

	c.ppm = 50.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a8 e4       	ldi	r26, 0x48	; 72
     828:	b2 e4       	ldi	r27, 0x42	; 66
     82a:	84 af       	std	Z+60, r24	; 0x3c
     82c:	95 af       	std	Z+61, r25	; 0x3d
     82e:	a6 af       	std	Z+62, r26	; 0x3e
     830:	b7 af       	std	Z+63, r27	; 0x3f
     832:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <Nitrate+0x41>
     836:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <Nitrate+0x40>
     83a:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <Nitrate+0x43>
     83e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <Nitrate+0x42>
     842:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <Nitrate+0x45>
     846:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <Nitrate+0x44>
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	08 95       	ret

00000854 <_Z9SameColorv>:


bool SameColor()
{
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
	// values of stored color being compared against
	uint8_t redExpected = rgb.value[TCS230_RGB_R];
     85a:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <rgb>
	uint8_t greenExpected = rgb.value[TCS230_RGB_G];
     85e:	d0 91 86 02 	lds	r29, 0x0286	; 0x800286 <rgb+0x1>
	uint8_t blueExpected = rgb.value[TCS230_RGB_B];
     862:	c0 91 87 02 	lds	r28, 0x0287	; 0x800287 <rgb+0x2>
	Serial.print("c: ");
     866:	6e e9       	ldi	r22, 0x9E	; 158
     868:	71 e0       	ldi	r23, 0x01	; 1
     86a:	84 e7       	ldi	r24, 0x74	; 116
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(c.p.R);
     872:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <c+0x4>
     876:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <c+0x5>
     87a:	4a e0       	ldi	r20, 0x0A	; 10
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	84 e7       	ldi	r24, 0x74	; 116
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEii>
	Serial.print(" ");
     886:	60 ea       	ldi	r22, 0xA0	; 160
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	84 e7       	ldi	r24, 0x74	; 116
     88c:	93 e0       	ldi	r25, 0x03	; 3
     88e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(c.p.G);
     892:	60 91 81 02 	lds	r22, 0x0281	; 0x800281 <c+0x6>
     896:	70 91 82 02 	lds	r23, 0x0282	; 0x800282 <c+0x7>
     89a:	4a e0       	ldi	r20, 0x0A	; 10
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	84 e7       	ldi	r24, 0x74	; 116
     8a0:	93 e0       	ldi	r25, 0x03	; 3
     8a2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEii>
	Serial.print(" ");
     8a6:	60 ea       	ldi	r22, 0xA0	; 160
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	84 e7       	ldi	r24, 0x74	; 116
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(c.p.B);
     8b2:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <c+0x8>
     8b6:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <c+0x9>
     8ba:	4a e0       	ldi	r20, 0x0A	; 10
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	84 e7       	ldi	r24, 0x74	; 116
     8c0:	93 e0       	ldi	r25, 0x03	; 3
     8c2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEii>
	Serial.print("read_in: ");
     8c6:	62 ea       	ldi	r22, 0xA2	; 162
     8c8:	71 e0       	ldi	r23, 0x01	; 1
     8ca:	84 e7       	ldi	r24, 0x74	; 116
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(redExpected);
     8d2:	4a e0       	ldi	r20, 0x0A	; 10
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	61 2f       	mov	r22, r17
     8d8:	84 e7       	ldi	r24, 0x74	; 116
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN5Print5printEhi>
	Serial.print(" ");
     8e0:	60 ea       	ldi	r22, 0xA0	; 160
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	84 e7       	ldi	r24, 0x74	; 116
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(greenExpected);
     8ec:	4a e0       	ldi	r20, 0x0A	; 10
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	6d 2f       	mov	r22, r29
     8f2:	84 e7       	ldi	r24, 0x74	; 116
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN5Print5printEhi>
	Serial.print(" ");
     8fa:	60 ea       	ldi	r22, 0xA0	; 160
     8fc:	71 e0       	ldi	r23, 0x01	; 1
     8fe:	84 e7       	ldi	r24, 0x74	; 116
     900:	93 e0       	ldi	r25, 0x03	; 3
     902:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	Serial.print(blueExpected);
     906:	4a e0       	ldi	r20, 0x0A	; 10
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	6c 2f       	mov	r22, r28
     90c:	84 e7       	ldi	r24, 0x74	; 116
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <_ZN5Print5printEhi>
	// check if RGB values are within range specified by tolerance
	if (redExpected < (c.p.R - TOLERANCE) || redExpected > (c.p.R + TOLERANCE))
     914:	61 2f       	mov	r22, r17
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <c+0x4>
     91c:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <c+0x5>
     920:	9c 01       	movw	r18, r24
     922:	24 51       	subi	r18, 0x14	; 20
     924:	31 09       	sbc	r19, r1
     926:	62 17       	cp	r22, r18
     928:	73 07       	cpc	r23, r19
     92a:	64 f1       	brlt	.+88     	; 0x984 <__stack+0x85>
     92c:	44 96       	adiw	r24, 0x14	; 20
     92e:	86 17       	cp	r24, r22
     930:	97 07       	cpc	r25, r23
     932:	44 f1       	brlt	.+80     	; 0x984 <__stack+0x85>
		
		//Serial.print("Red fails")	;
		return false;
	}
	
	if (greenExpected < (c.p.G - TOLERANCE) || greenExpected > (c.p.G + TOLERANCE))
     934:	6d 2f       	mov	r22, r29
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <c+0x6>
     93c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <c+0x7>
     940:	9c 01       	movw	r18, r24
     942:	24 51       	subi	r18, 0x14	; 20
     944:	31 09       	sbc	r19, r1
     946:	62 17       	cp	r22, r18
     948:	73 07       	cpc	r23, r19
     94a:	e4 f0       	brlt	.+56     	; 0x984 <__stack+0x85>
     94c:	44 96       	adiw	r24, 0x14	; 20
     94e:	86 17       	cp	r24, r22
     950:	97 07       	cpc	r25, r23
     952:	c4 f0       	brlt	.+48     	; 0x984 <__stack+0x85>
	{
		//Serial.print("Green fails");
		return false;}
	if (blueExpected < (c.p.B - TOLERANCE) || blueExpected > (c.p.B + TOLERANCE))
     954:	6c 2f       	mov	r22, r28
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <c+0x8>
     95c:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <c+0x9>
     960:	9c 01       	movw	r18, r24
     962:	24 51       	subi	r18, 0x14	; 20
     964:	31 09       	sbc	r19, r1
     966:	62 17       	cp	r22, r18
     968:	73 07       	cpc	r23, r19
     96a:	64 f0       	brlt	.+24     	; 0x984 <__stack+0x85>
     96c:	44 96       	adiw	r24, 0x14	; 20
     96e:	86 17       	cp	r24, r22
     970:	97 07       	cpc	r25, r23
     972:	44 f0       	brlt	.+16     	; 0x984 <__stack+0x85>
	{
		//Serial.print("Blue fails")	;
		return false;
	}
	
	Serial.print(F("\nFound Matching Color"));
     974:	6c e7       	ldi	r22, 0x7C	; 124
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	84 e7       	ldi	r24, 0x74	; 116
     97a:	93 e0       	ldi	r25, 0x03	; 3
     97c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <_ZN5Print5printEPK19__FlashStringHelper>
	return true;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	01 c0       	rjmp	.+2      	; 0x986 <__stack+0x87>
	// check if RGB values are within range specified by tolerance
	if (redExpected < (c.p.R - TOLERANCE) || redExpected > (c.p.R + TOLERANCE))
	{
		
		//Serial.print("Red fails")	;
		return false;
     984:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
	
	Serial.print(F("\nFound Matching Color"));
	return true;
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	08 95       	ret

0000098e <_Z9FindMatchv>:

double FindMatch()
{
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
	switch(typeToRead)
     996:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <typeToRead>
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	09 f4       	brne	.+2      	; 0x9a0 <_Z9FindMatchv+0x12>
     99e:	48 c0       	rjmp	.+144    	; 0xa30 <_Z9FindMatchv+0xa2>
     9a0:	40 f0       	brcs	.+16     	; 0x9b2 <_Z9FindMatchv+0x24>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <_Z9FindMatchv+0x1a>
     9a6:	6e c0       	rjmp	.+220    	; 0xa84 <_Z9FindMatchv+0xf6>
     9a8:	0e ec       	ldi	r16, 0xCE	; 206
     9aa:	12 e0       	ldi	r17, 0x02	; 2
     9ac:	c6 e0       	ldi	r28, 0x06	; 6
     9ae:	d0 e0       	ldi	r29, 0x00	; 0
     9b0:	29 c0       	rjmp	.+82     	; 0xa04 <_Z9FindMatchv+0x76>
     9b2:	04 e1       	ldi	r16, 0x14	; 20
     9b4:	13 e0       	ldi	r17, 0x03	; 3
     9b6:	c4 e0       	ldi	r28, 0x04	; 4
     9b8:	d0 e0       	ldi	r29, 0x00	; 0
		case AMMONIA:
		{
			// start at highest ammonia level - false positive better than false negative
			for(int i = MAX_AMMONIA_COLORS - 1; i >= 0; --i)
			{
				c = Ammonia[i];
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	f8 01       	movw	r30, r16
     9be:	b8 96       	adiw	r30, 0x28	; 40
     9c0:	ab e7       	ldi	r26, 0x7B	; 123
     9c2:	b2 e0       	ldi	r27, 0x02	; 2
     9c4:	01 90       	ld	r0, Z+
     9c6:	0d 92       	st	X+, r0
     9c8:	8a 95       	dec	r24
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <_Z9FindMatchv+0x36>
				if(SameColor())
     9cc:	0e 94 2a 04 	call	0x854	; 0x854 <_Z9SameColorv>
     9d0:	88 23       	and	r24, r24
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <_Z9FindMatchv+0x58>
				return Ammonia[i].ppm;
     9d4:	8a e0       	ldi	r24, 0x0A	; 10
     9d6:	8c 9f       	mul	r24, r28
     9d8:	f0 01       	movw	r30, r0
     9da:	8d 9f       	mul	r24, r29
     9dc:	f0 0d       	add	r31, r0
     9de:	11 24       	eor	r1, r1
     9e0:	ec 5e       	subi	r30, 0xEC	; 236
     9e2:	fc 4f       	sbci	r31, 0xFC	; 252
     9e4:	3e c0       	rjmp	.+124    	; 0xa62 <_Z9FindMatchv+0xd4>
	switch(typeToRead)
	{
		case AMMONIA:
		{
			// start at highest ammonia level - false positive better than false negative
			for(int i = MAX_AMMONIA_COLORS - 1; i >= 0; --i)
     9e6:	21 97       	sbiw	r28, 0x01	; 1
     9e8:	0a 50       	subi	r16, 0x0A	; 10
     9ea:	11 09       	sbc	r17, r1
     9ec:	cf 3f       	cpi	r28, 0xFF	; 255
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	d8 07       	cpc	r29, r24
     9f2:	19 f7       	brne	.-58     	; 0x9ba <_Z9FindMatchv+0x2c>
     9f4:	42 c0       	rjmp	.+132    	; 0xa7a <_Z9FindMatchv+0xec>
			break;
		}
		case NITRITE:
		{
			// start at highest nitrite level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
     9f6:	21 97       	sbiw	r28, 0x01	; 1
     9f8:	0a 50       	subi	r16, 0x0A	; 10
     9fa:	11 09       	sbc	r17, r1
     9fc:	cf 3f       	cpi	r28, 0xFF	; 255
     9fe:	8f ef       	ldi	r24, 0xFF	; 255
     a00:	d8 07       	cpc	r29, r24
     a02:	d9 f1       	breq	.+118    	; 0xa7a <_Z9FindMatchv+0xec>
			{
				c = Nitrite[i];
     a04:	8a e0       	ldi	r24, 0x0A	; 10
     a06:	f8 01       	movw	r30, r16
     a08:	fc 96       	adiw	r30, 0x3c	; 60
     a0a:	ab e7       	ldi	r26, 0x7B	; 123
     a0c:	b2 e0       	ldi	r27, 0x02	; 2
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <_Z9FindMatchv+0x80>
				if(SameColor())
     a16:	0e 94 2a 04 	call	0x854	; 0x854 <_Z9SameColorv>
     a1a:	88 23       	and	r24, r24
     a1c:	61 f3       	breq	.-40     	; 0x9f6 <_Z9FindMatchv+0x68>
				return Nitrite[i].ppm;
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	8c 9f       	mul	r24, r28
     a22:	f0 01       	movw	r30, r0
     a24:	8d 9f       	mul	r24, r29
     a26:	f0 0d       	add	r31, r0
     a28:	11 24       	eor	r1, r1
     a2a:	e2 53       	subi	r30, 0x32	; 50
     a2c:	fd 4f       	sbci	r31, 0xFD	; 253
     a2e:	19 c0       	rjmp	.+50     	; 0xa62 <_Z9FindMatchv+0xd4>
     a30:	08 e8       	ldi	r16, 0x88	; 136
     a32:	12 e0       	ldi	r17, 0x02	; 2
	return true;
}

double FindMatch()
{
	switch(typeToRead)
     a34:	c6 e0       	ldi	r28, 0x06	; 6
     a36:	d0 e0       	ldi	r29, 0x00	; 0
		case NITRATE:
		{
			// start at highest nitrate level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
			{
				c = Nitrate[i];
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	f8 01       	movw	r30, r16
     a3c:	fc 96       	adiw	r30, 0x3c	; 60
     a3e:	ab e7       	ldi	r26, 0x7B	; 123
     a40:	b2 e0       	ldi	r27, 0x02	; 2
     a42:	01 90       	ld	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	8a 95       	dec	r24
     a48:	e1 f7       	brne	.-8      	; 0xa42 <_Z9FindMatchv+0xb4>
				if(SameColor())
     a4a:	0e 94 2a 04 	call	0x854	; 0x854 <_Z9SameColorv>
     a4e:	88 23       	and	r24, r24
     a50:	69 f0       	breq	.+26     	; 0xa6c <_Z9FindMatchv+0xde>
				return Nitrate[i].ppm;
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	8c 9f       	mul	r24, r28
     a56:	f0 01       	movw	r30, r0
     a58:	8d 9f       	mul	r24, r29
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	e8 57       	subi	r30, 0x78	; 120
     a60:	fd 4f       	sbci	r31, 0xFD	; 253
     a62:	30 81       	ld	r19, Z
     a64:	21 81       	ldd	r18, Z+1	; 0x01
     a66:	92 81       	ldd	r25, Z+2	; 0x02
     a68:	83 81       	ldd	r24, Z+3	; 0x03
     a6a:	0b c0       	rjmp	.+22     	; 0xa82 <_Z9FindMatchv+0xf4>
			break;
		}
		case NITRATE:
		{
			// start at highest nitrate level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
     a6c:	21 97       	sbiw	r28, 0x01	; 1
     a6e:	0a 50       	subi	r16, 0x0A	; 10
     a70:	11 09       	sbc	r17, r1
     a72:	cf 3f       	cpi	r28, 0xFF	; 255
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	d8 07       	cpc	r29, r24
     a78:	f9 f6       	brne	.-66     	; 0xa38 <_Z9FindMatchv+0xaa>
			{
				c = Ammonia[i];
				if(SameColor())
				return Ammonia[i].ppm;
			}
			return -1;
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	90 e8       	ldi	r25, 0x80	; 128
     a80:	8f eb       	ldi	r24, 0xBF	; 191
     a82:	ac 01       	movw	r20, r24
			}
			return -1;
			break;
		}
	}
}
     a84:	63 2f       	mov	r22, r19
     a86:	72 2f       	mov	r23, r18
     a88:	85 2f       	mov	r24, r21
     a8a:	94 2f       	mov	r25, r20
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	08 95       	ret

00000a96 <_Z9ScanColorv>:

long ScanColor()
{
	// Scan for color
	CS.read();
     a96:	8c e4       	ldi	r24, 0x4C	; 76
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN9MD_TCS2304readEv>
	while(CS.available() == 0);  // wait for read to complete
     a9e:	8c e4       	ldi	r24, 0x4C	; 76
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <_ZN9MD_TCS2309availableEv>
     aa6:	88 23       	and	r24, r24
     aa8:	d1 f3       	breq	.-12     	; 0xa9e <_Z9ScanColorv+0x8>
	CS.getRGB(&rgb);
     aaa:	65 e8       	ldi	r22, 0x85	; 133
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	8c e4       	ldi	r24, 0x4C	; 76
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <_ZN9MD_TCS2306getRGBEP9colorData>
	// look for match
	return FindMatch();
     ab6:	0e 94 c7 04 	call	0x98e	; 0x98e <_Z9FindMatchv>
     aba:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
}
     abe:	08 95       	ret

00000ac0 <_Z13findTestStripv>:

bool findTestStrip()
{
     ac0:	cf 93       	push	r28
	// Scan for color
	CS.read();
     ac2:	8c e4       	ldi	r24, 0x4C	; 76
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <_ZN9MD_TCS2304readEv>
	while (CS.available() == 0);
     aca:	8c e4       	ldi	r24, 0x4C	; 76
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <_ZN9MD_TCS2309availableEv>
     ad2:	88 23       	and	r24, r24
     ad4:	d1 f3       	breq	.-12     	; 0xaca <_Z13findTestStripv+0xa>
	CS.getRGB(&rgb);
     ad6:	65 e8       	ldi	r22, 0x85	; 133
     ad8:	72 e0       	ldi	r23, 0x02	; 2
     ada:	8c e4       	ldi	r24, 0x4C	; 76
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <_ZN9MD_TCS2306getRGBEP9colorData>
	// look for match against black
	c = EmptyTestBox;
     ae2:	8a e0       	ldi	r24, 0x0A	; 10
     ae4:	e2 e2       	ldi	r30, 0x22	; 34
     ae6:	f1 e0       	ldi	r31, 0x01	; 1
     ae8:	ab e7       	ldi	r26, 0x7B	; 123
     aea:	b2 e0       	ldi	r27, 0x02	; 2
     aec:	01 90       	ld	r0, Z+
     aee:	0d 92       	st	X+, r0
     af0:	8a 95       	dec	r24
     af2:	e1 f7       	brne	.-8      	; 0xaec <_Z13findTestStripv+0x2c>
	bool foundEmptyBox = SameColor();
     af4:	0e 94 2a 04 	call	0x854	; 0x854 <_Z9SameColorv>
     af8:	c8 2f       	mov	r28, r24
	c = WhiteTestStrip;
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	e8 e1       	ldi	r30, 0x18	; 24
     afe:	f1 e0       	ldi	r31, 0x01	; 1
     b00:	ab e7       	ldi	r26, 0x7B	; 123
     b02:	b2 e0       	ldi	r27, 0x02	; 2
     b04:	01 90       	ld	r0, Z+
     b06:	0d 92       	st	X+, r0
     b08:	8a 95       	dec	r24
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <_Z13findTestStripv+0x44>
	foundEmptyBox =  foundEmptyBox || SameColor();
     b0c:	c1 11       	cpse	r28, r1
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <_Z13findTestStripv+0x56>
     b10:	0e 94 2a 04 	call	0x854	; 0x854 <_Z9SameColorv>
     b14:	c8 2f       	mov	r28, r24
	Serial.print(foundEmptyBox);
     b16:	6c 2f       	mov	r22, r28
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	4a e0       	ldi	r20, 0x0A	; 10
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	84 e7       	ldi	r24, 0x74	; 116
     b20:	93 e0       	ldi	r25, 0x03	; 3
     b22:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN5Print5printEii>
	Serial.print("\n");
     b26:	6e e1       	ldi	r22, 0x1E	; 30
     b28:	72 e0       	ldi	r23, 0x02	; 2
     b2a:	84 e7       	ldi	r24, 0x74	; 116
     b2c:	93 e0       	ldi	r25, 0x03	; 3
     b2e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN5Print5printEPKc>
	return foundEmptyBox;
     b32:	8c 2f       	mov	r24, r28
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <_Z6setLED8LEDColor>:
LEDColor White = {255, 255, 255};
LEDColor Off = {0, 0, 0};


void setLED(LEDColor c)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <_Z6setLED8LEDColor+0x6>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <_Z6setLED8LEDColor+0x8>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <_Z6setLED8LEDColor+0xa>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	49 83       	std	Y+1, r20	; 0x01
     b48:	5a 83       	std	Y+2, r21	; 0x02
     b4a:	6b 83       	std	Y+3, r22	; 0x03
     b4c:	7c 83       	std	Y+4, r23	; 0x04
     b4e:	8d 83       	std	Y+5, r24	; 0x05
     b50:	9e 83       	std	Y+6, r25	; 0x06
	analogWrite(R_LED, c.r);
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <analogWrite>
	analogWrite(G_LED, c.g);
     b5c:	6b 81       	ldd	r22, Y+3	; 0x03
     b5e:	7c 81       	ldd	r23, Y+4	; 0x04
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <analogWrite>
	analogWrite(B_LED, c.b);
     b66:	6d 81       	ldd	r22, Y+5	; 0x05
     b68:	7e 81       	ldd	r23, Y+6	; 0x06
     b6a:	84 e0       	ldi	r24, 0x04	; 4
}
     b6c:	26 96       	adiw	r28, 0x06	; 6
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28

void setLED(LEDColor c)
{
	analogWrite(R_LED, c.r);
	analogWrite(G_LED, c.g);
	analogWrite(B_LED, c.b);
     b7c:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <analogWrite>

00000b80 <_Z15TaskAmmoniaReadPv>:
// get Ammonia reading from color sensor
void TaskAmmoniaRead(void *pvParameters)
{
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     b80:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
  pinMode(LED_BUILTIN, OUTPUT);
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	8d e0       	ldi	r24, 0x0D	; 13
     b88:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
  for (;;) // A Task shall never return or exit.
  {
    if ( xSemaphoreTake( xSerialSemaphoreColorSensor, ( TickType_t ) 1 ) == pdTRUE )
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xSerialSemaphoreColorSensor>
     b94:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xSerialSemaphoreColorSensor+0x1>
     b98:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <xQueueSemaphoreTake>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	09 f0       	breq	.+2      	; 0xba2 <_Z15TaskAmmoniaReadPv+0x22>
     ba0:	69 c0       	rjmp	.+210    	; 0xc74 <_Z15TaskAmmoniaReadPv+0xf4>
    {
	  digitalWrite(9, HIGH);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	89 e0       	ldi	r24, 0x09	; 9
     ba6:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
	  setLED(Blue);
     baa:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     bae:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     bb2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     bb6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     bba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     bbe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     bc2:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  while (findTestStrip());
     bc6:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z13findTestStripv>
     bca:	81 11       	cpse	r24, r1
     bcc:	fc cf       	rjmp	.-8      	; 0xbc6 <_Z15TaskAmmoniaReadPv+0x46>
	  setLED(Green);
     bce:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Green>
     bd2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Green+0x1>
     bd6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Green+0x2>
     bda:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Green+0x3>
     bde:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Green+0x4>
     be2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Green+0x5>
     be6:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  delay(250); // let user see LED and stop moving before measuring
     bea:	6a ef       	ldi	r22, 0xFA	; 250
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
	  
      typeToRead = AMMONIA;
     bf6:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <typeToRead>
      long value = ScanColor();
     bfa:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z9ScanColorv>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
	  // TODO: transmit value to Wifi module
	  Serial.write("AT+CTIPSEND"); // indicate we are about to send ammonia
     c02:	6c ea       	ldi	r22, 0xAC	; 172
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	84 e7       	ldi	r24, 0x74	; 116
     c08:	93 e0       	ldi	r25, 0x03	; 3
     c0a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("ammonia");
     c0e:	68 eb       	ldi	r22, 0xB8	; 184
     c10:	71 e0       	ldi	r23, 0x01	; 1
     c12:	84 e7       	ldi	r24, 0x74	; 116
     c14:	93 e0       	ldi	r25, 0x03	; 3
     c16:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("AT+CTIPSEND"); // send ammonia
     c1a:	6c ea       	ldi	r22, 0xAC	; 172
     c1c:	71 e0       	ldi	r23, 0x01	; 1
     c1e:	84 e7       	ldi	r24, 0x74	; 116
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write(value);
     c26:	b7 01       	movw	r22, r14
     c28:	a6 01       	movw	r20, r12
     c2a:	84 e7       	ldi	r24, 0x74	; 116
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN14HardwareSerial5writeEl>
	  
	  setLED(Off);	
     c32:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     c36:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     c3a:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     c3e:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     c42:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     c46:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     c4a:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  digitalWrite(9, LOW);		  
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	89 e0       	ldi	r24, 0x09	; 9
     c52:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
      xSemaphoreGive( xSerialSemaphoreColorSensor );
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xSerialSemaphoreColorSensor>
     c64:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xSerialSemaphoreColorSensor+0x1>
     c68:	0e 94 03 14 	call	0x2806	; 0x2806 <xQueueGenericSend>
      // suspend until triggered by next interrupt from Wifi module
      vTaskSuspend(NULL);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 36 1a 	call	0x346c	; 0x346c <vTaskSuspend>
    }

    vTaskDelay(1); // 1 tick delay between reads for stability
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 c3 19 	call	0x3386	; 0x3386 <vTaskDelay>
{
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
  pinMode(LED_BUILTIN, OUTPUT);
  for (;;) // A Task shall never return or exit.
     c7c:	87 cf       	rjmp	.-242    	; 0xb8c <_Z15TaskAmmoniaReadPv+0xc>

00000c7e <_Z22TaskNitriteNitrateReadPv>:
// get Nitrite reading from color sensor
void TaskNitriteNitrateRead(void *pvParameters)
{
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     c7e:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
  pinMode(LED_BUILTIN, OUTPUT);
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	8d e0       	ldi	r24, 0x0D	; 13
     c86:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
    if ( xSemaphoreTake( xSerialSemaphoreColorSensor, ( TickType_t ) 1 ) == pdTRUE )
    {
      while (!findTestStrip());
      setLED(Green);
	  delay(250); // allow user to see LED and stop moving test strip
      typeToRead = NITRATE;
     c8a:	c1 e0       	ldi	r28, 0x01	; 1
	  while (!findTestStrip())
	  {
		  // transmit error to Wifi module
	  }
	  setLED(Blue);
	  typeToRead = NITRITE;
     c8c:	d2 e0       	ldi	r29, 0x02	; 2
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
  pinMode(LED_BUILTIN, OUTPUT);
  for (;;) // A Task shall never return or exit.
  {
    if ( xSemaphoreTake( xSerialSemaphoreColorSensor, ( TickType_t ) 1 ) == pdTRUE )
     c8e:	61 e0       	ldi	r22, 0x01	; 1
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xSerialSemaphoreColorSensor>
     c96:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xSerialSemaphoreColorSensor+0x1>
     c9a:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <xQueueSemaphoreTake>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	09 f0       	breq	.+2      	; 0xca4 <_Z22TaskNitriteNitrateReadPv+0x26>
     ca2:	91 c0       	rjmp	.+290    	; 0xdc6 <_Z22TaskNitriteNitrateReadPv+0x148>
    {
      while (!findTestStrip());
     ca4:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z13findTestStripv>
     ca8:	88 23       	and	r24, r24
     caa:	e1 f3       	breq	.-8      	; 0xca4 <_Z22TaskNitriteNitrateReadPv+0x26>
      setLED(Green);
     cac:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Green>
     cb0:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Green+0x1>
     cb4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Green+0x2>
     cb8:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Green+0x3>
     cbc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Green+0x4>
     cc0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Green+0x5>
     cc4:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  delay(250); // allow user to see LED and stop moving test strip
     cc8:	6a ef       	ldi	r22, 0xFA	; 250
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
      typeToRead = NITRATE;
     cd4:	c0 93 46 03 	sts	0x0346, r28	; 0x800346 <typeToRead>
	  //vTaskDelay(4000); // wait 1 min for the test strip to develop
      long value = ScanColor();
     cd8:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z9ScanColorv>
     cdc:	6b 01       	movw	r12, r22
     cde:	7c 01       	movw	r14, r24
	  // TODO: transmit to Wifi module
	  Serial.write("AT+CTIPSEND"); // indicate we are about to send nitrate
     ce0:	6c ea       	ldi	r22, 0xAC	; 172
     ce2:	71 e0       	ldi	r23, 0x01	; 1
     ce4:	84 e7       	ldi	r24, 0x74	; 116
     ce6:	93 e0       	ldi	r25, 0x03	; 3
     ce8:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("nitrate");
     cec:	60 ec       	ldi	r22, 0xC0	; 192
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	84 e7       	ldi	r24, 0x74	; 116
     cf2:	93 e0       	ldi	r25, 0x03	; 3
     cf4:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("AT+CTIPSEND"); // send nitrate
     cf8:	6c ea       	ldi	r22, 0xAC	; 172
     cfa:	71 e0       	ldi	r23, 0x01	; 1
     cfc:	84 e7       	ldi	r24, 0x74	; 116
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write(value);
     d04:	b7 01       	movw	r22, r14
     d06:	a6 01       	movw	r20, r12
     d08:	84 e7       	ldi	r24, 0x74	; 116
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN14HardwareSerial5writeEl>
	  
	  setLED(Off);
     d10:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     d14:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     d18:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     d1c:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     d20:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     d24:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     d28:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  
	  while (!findTestStrip())
     d2c:	0e 94 60 05 	call	0xac0	; 0xac0 <_Z13findTestStripv>
     d30:	88 23       	and	r24, r24
     d32:	e1 f3       	breq	.-8      	; 0xd2c <_Z22TaskNitriteNitrateReadPv+0xae>
	  {
		  // transmit error to Wifi module
	  }
	  setLED(Blue);
     d34:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     d38:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     d3c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     d40:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     d44:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     d48:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     d4c:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	  typeToRead = NITRITE;
     d50:	d0 93 46 03 	sts	0x0346, r29	; 0x800346 <typeToRead>
	  //vTaskDelay(4000); // wait 1 min for the test strip to develop
	  value = ScanColor();
     d54:	0e 94 4b 05 	call	0xa96	; 0xa96 <_Z9ScanColorv>
     d58:	6b 01       	movw	r12, r22
     d5a:	7c 01       	movw	r14, r24
	  // TODO: transmit to Wifi module
	  Serial.write("AT+CTIPSEND"); // indicate we are about to send nitrite
     d5c:	6c ea       	ldi	r22, 0xAC	; 172
     d5e:	71 e0       	ldi	r23, 0x01	; 1
     d60:	84 e7       	ldi	r24, 0x74	; 116
     d62:	93 e0       	ldi	r25, 0x03	; 3
     d64:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("nitrite");
     d68:	68 ec       	ldi	r22, 0xC8	; 200
     d6a:	71 e0       	ldi	r23, 0x01	; 1
     d6c:	84 e7       	ldi	r24, 0x74	; 116
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write("AT+CTIPSEND"); // send nitrite
     d74:	6c ea       	ldi	r22, 0xAC	; 172
     d76:	71 e0       	ldi	r23, 0x01	; 1
     d78:	84 e7       	ldi	r24, 0x74	; 116
     d7a:	93 e0       	ldi	r25, 0x03	; 3
     d7c:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	  Serial.write(value);
     d80:	b7 01       	movw	r22, r14
     d82:	a6 01       	movw	r20, r12
     d84:	84 e7       	ldi	r24, 0x74	; 116
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN14HardwareSerial5writeEl>
	  
	  setLED(Off);
     d8c:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     d90:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     d94:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     d98:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     d9c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     da0:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     da4:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
      xSemaphoreGive( xSerialSemaphoreColorSensor );
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xSerialSemaphoreColorSensor>
     db6:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xSerialSemaphoreColorSensor+0x1>
     dba:	0e 94 03 14 	call	0x2806	; 0x2806 <xQueueGenericSend>
      //suspend until triggered by next interrupt from Wifi module
      vTaskSuspend(NULL);
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 36 1a 	call	0x346c	; 0x346c <vTaskSuspend>
    }

    vTaskDelay(1); // 1 tick delay between reads for stability
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 c3 19 	call	0x3386	; 0x3386 <vTaskDelay>
{
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
  pinMode(LED_BUILTIN, OUTPUT);
  for (;;) // A Task shall never return or exit.
     dce:	5f cf       	rjmp	.-322    	; 0xc8e <_Z22TaskNitriteNitrateReadPv+0x10>

00000dd0 <_Z10TaskPHReadPv>:
  }
}

// get pH reading from sensor
void TaskPHRead(void *pvParameters)
{
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <_Z10TaskPHReadPv+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     dda:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
  for (;;) // A Task shall never return or exit.
  {
    setLED(Red);
     de2:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Red>
     de6:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Red+0x1>
     dea:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Red+0x2>
     dee:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Red+0x3>
     df2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Red+0x4>
     df6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Red+0x5>
     dfa:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	digitalWrite(9, HIGH);
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	89 e0       	ldi	r24, 0x09	; 9
     e02:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
	// Gets pH value
	delay(500);
     e06:	64 ef       	ldi	r22, 0xF4	; 244
     e08:	71 e0       	ldi	r23, 0x01	; 1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <delay>
	long temp = measureTemp();
     e12:	0e 94 36 02 	call	0x46c	; 0x46c <_Z11measureTempv>
	long phValue = getPH(temp);
     e16:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     e1a:	0e 94 0e 0a 	call	0x141c	; 0x141c <_Z5getPHl>
     e1e:	6b 01       	movw	r12, r22
     e20:	7c 01       	movw	r14, r24
	
	//TODO: Transmit ph to Wifi
	Serial.write("AT+CTIPSEND"); // indicate we are about to send pH
     e22:	6c ea       	ldi	r22, 0xAC	; 172
     e24:	71 e0       	ldi	r23, 0x01	; 1
     e26:	84 e7       	ldi	r24, 0x74	; 116
     e28:	93 e0       	ldi	r25, 0x03	; 3
     e2a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write("pH");
     e2e:	60 ed       	ldi	r22, 0xD0	; 208
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	84 e7       	ldi	r24, 0x74	; 116
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write("AT+CTIPSEND"); // send pH
     e3a:	6c ea       	ldi	r22, 0xAC	; 172
     e3c:	71 e0       	ldi	r23, 0x01	; 1
     e3e:	84 e7       	ldi	r24, 0x74	; 116
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write(phValue);
     e46:	c7 01       	movw	r24, r14
     e48:	b6 01       	movw	r22, r12
     e4a:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     e4e:	ab 01       	movw	r20, r22
     e50:	bc 01       	movw	r22, r24
     e52:	84 e7       	ldi	r24, 0x74	; 116
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN14HardwareSerial5writeEl>
	
    setLED(Off);
     e5a:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     e5e:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     e62:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     e66:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     e6a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     e6e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     e72:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
	digitalWrite(9, LOW);
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	89 e0       	ldi	r24, 0x09	; 9
     e7a:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
    // check pH every 15 min
    vTaskDelayUntil( &xLastWakeTime, 4000 / portTICK_PERIOD_MS );
     e7e:	6a ef       	ldi	r22, 0xFA	; 250
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	0e 94 8b 19 	call	0x3316	; 0x3316 <vTaskDelayUntil>
     e8a:	ab cf       	rjmp	.-170    	; 0xde2 <_Z10TaskPHReadPv+0x12>

00000e8c <_Z19TaskTemperatureReadPv>:
  }
}

// get Temperature reading from sensor
void TaskTemperatureRead(void *pvParameters)
{
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	00 d0       	rcall	.+0      	; 0xe92 <_Z19TaskTemperatureReadPv+0x6>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     e96:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
  for (;;) // A Task shall never return or exit.
  {
	setLED(Blue);
     e9e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     ea2:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     ea6:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     eaa:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     eae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     eb2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     eb6:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
    // Gets temperature value in Celsius
	long temp = measureTemp();
     eba:	0e 94 36 02 	call	0x46c	; 0x46c <_Z11measureTempv>
     ebe:	6b 01       	movw	r12, r22
     ec0:	7c 01       	movw	r14, r24
	
	// TODO: transmit to Wifi
	Serial.write("AT+CTIPSEND"); // indicate that we are about to send temp
     ec2:	6c ea       	ldi	r22, 0xAC	; 172
     ec4:	71 e0       	ldi	r23, 0x01	; 1
     ec6:	84 e7       	ldi	r24, 0x74	; 116
     ec8:	93 e0       	ldi	r25, 0x03	; 3
     eca:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write("temp");
     ece:	63 ed       	ldi	r22, 0xD3	; 211
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	84 e7       	ldi	r24, 0x74	; 116
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write("AT+CTIPSEND"); // send temp
     eda:	6c ea       	ldi	r22, 0xAC	; 172
     edc:	71 e0       	ldi	r23, 0x01	; 1
     ede:	84 e7       	ldi	r24, 0x74	; 116
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
	Serial.write(temp);
     ee6:	c7 01       	movw	r24, r14
     ee8:	b6 01       	movw	r22, r12
     eea:	0e 94 31 0b 	call	0x1662	; 0x1662 <__fixsfsi>
     eee:	ab 01       	movw	r20, r22
     ef0:	bc 01       	movw	r22, r24
     ef2:	84 e7       	ldi	r24, 0x74	; 116
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN14HardwareSerial5writeEl>
	
	setLED(Off);
     efa:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     efe:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     f02:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     f06:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     f0a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     f0e:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     f12:	0e 94 9c 05 	call	0xb38	; 0xb38 <_Z6setLED8LEDColor>
    // check temperature every 2 min
    vTaskDelayUntil( &xLastWakeTime, 7500 / portTICK_PERIOD_MS );
     f16:	64 ed       	ldi	r22, 0xD4	; 212
     f18:	71 e0       	ldi	r23, 0x01	; 1
     f1a:	ce 01       	movw	r24, r28
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	0e 94 8b 19 	call	0x3316	; 0x3316 <vTaskDelayUntil>
     f22:	bd cf       	rjmp	.-134    	; 0xe9e <_Z19TaskTemperatureReadPv+0x12>

00000f24 <_Z8setupLEDv>:
}

void setupLED()
{
	pinMode(R_LED, OUTPUT);
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
	pinMode(G_LED, OUTPUT);
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
	pinMode(B_LED, OUTPUT);
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
	setLED(Off);
     f3c:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <Off>
     f40:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <Off+0x1>
     f44:	60 91 48 02 	lds	r22, 0x0248	; 0x800248 <Off+0x2>
     f48:	70 91 49 02 	lds	r23, 0x0249	; 0x800249 <Off+0x3>
     f4c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <Off+0x4>
     f50:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <Off+0x5>
     f54:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <_Z6setLED8LEDColor>

00000f58 <setup>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
TaskHandle_t xTemperature;



// the setup function runs once when you press reset or power the board
void setup() {
<<<<<<< HEAD
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
=======
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
<<<<<<< HEAD
     a5c:	26 e0       	ldi	r18, 0x06	; 6
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	52 ec       	ldi	r21, 0xC2	; 194
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	84 e7       	ldi	r24, 0x74	; 116
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN14HardwareSerial5beginEmh>
=======
     f5e:	26 e0       	ldi	r18, 0x06	; 6
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	52 ec       	ldi	r21, 0xC2	; 194
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	84 e7       	ldi	r24, 0x74	; 116
     f6a:	93 e0       	ldi	r25, 0x03	; 3
     f6c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN14HardwareSerial5beginEmh>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
  }
  
  // initialize Wifi module
  Serial.write("AT");
<<<<<<< HEAD
     a6e:	66 ed       	ldi	r22, 0xD6	; 214
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	84 e7       	ldi	r24, 0x74	; 116
     a74:	93 e0       	ldi	r25, 0x03	; 3
     a76:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>
  //String okay = Serial.read(); // unsure how to read from Wifi module
  //assert(okay == "OK"); // module is on
  Serial.write("AT+CWMODE=1"); // client mode
     a7a:	69 ed       	ldi	r22, 0xD9	; 217
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	84 e7       	ldi	r24, 0x74	; 116
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>

  // load test strip color data and initialize indicator LED
  addColors();
     a86:	0e 94 96 01 	call	0x32c	; 0x32c <_Z9addColorsv>
  setupLED();
     a8a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z8setupLEDv>
  
  // initialize pH sensor
  phInit();
     a8e:	0e 94 27 05 	call	0xa4e	; 0xa4e <_Z6phInitv>
  
  digitalWrite(0, LOW);
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>

  // TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
  attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
     a9a:	43 e0       	ldi	r20, 0x03	; 3
     a9c:	50 e0       	ldi	r21, 0x00	; 0
     a9e:	6b e7       	ldi	r22, 0x7B	; 123
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <attachInterrupt>
=======
     f70:	68 ed       	ldi	r22, 0xD8	; 216
     f72:	71 e0       	ldi	r23, 0x01	; 1
     f74:	84 e7       	ldi	r24, 0x74	; 116
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
  //String okay = Serial.read(); // unsure how to read from Wifi module
  //assert(okay == "OK"); // module is on
  Serial.write("AT+CWMODE=1"); // client mode
     f7c:	6b ed       	ldi	r22, 0xDB	; 219
     f7e:	71 e0       	ldi	r23, 0x01	; 1
     f80:	84 e7       	ldi	r24, 0x74	; 116
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>

  // load test strip color data and initialize indicator LED
  addColors();
     f88:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z9addColorsv>
  setupLED();
     f8c:	0e 94 92 07 	call	0xf24	; 0xf24 <_Z8setupLEDv>
  
  // initialize pH sensor
  phInit();
     f90:	0e 94 0a 0a 	call	0x1414	; 0x1414 <_Z6phInitv>
  
  digitalWrite(0, LOW);
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>

  // TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
  attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
     f9c:	43 e0       	ldi	r20, 0x03	; 3
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	63 e1       	ldi	r22, 0x13	; 19
     fa2:	72 e0       	ldi	r23, 0x02	; 2
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 77 10 	call	0x20ee	; 0x20ee <attachInterrupt>
    TaskAmmoniaRead
    ,  (const portCHAR *)"Ammonia"
    ,  128
    ,  NULL
    ,  2
    ,  &xAmmonia );
     faa:	82 e4       	ldi	r24, 0x42	; 66
     fac:	e8 2e       	mov	r14, r24
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	f8 2e       	mov	r15, r24
     fb2:	02 e0       	ldi	r16, 0x02	; 2
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e8       	ldi	r20, 0x80	; 128
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	67 ee       	ldi	r22, 0xE7	; 231
     fbe:	71 e0       	ldi	r23, 0x01	; 1
     fc0:	80 ec       	ldi	r24, 0xC0	; 192
     fc2:	95 e0       	ldi	r25, 0x05	; 5
     fc4:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    TaskNitriteNitrateRead
    ,  (const portCHAR *) "Nitrite/Nitrate"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xNitriteNitrate );
<<<<<<< HEAD
     aa8:	82 e4       	ldi	r24, 0x42	; 66
     aaa:	e8 2e       	mov	r14, r24
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	f8 2e       	mov	r15, r24
     ab0:	02 e0       	ldi	r16, 0x02	; 2
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e8       	ldi	r20, 0x80	; 128
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	65 ee       	ldi	r22, 0xE5	; 229
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	85 e9       	ldi	r24, 0x95	; 149
     ac0:	94 e0       	ldi	r25, 0x04	; 4
     ac2:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
  vTaskSuspend(xAmmonia);
  vTaskSuspend(xNitriteNitrate);*/
=======
     fc8:	90 e4       	ldi	r25, 0x40	; 64
     fca:	e9 2e       	mov	r14, r25
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	f9 2e       	mov	r15, r25
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e8       	ldi	r20, 0x80	; 128
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	6f ee       	ldi	r22, 0xEF	; 239
     fda:	71 e0       	ldi	r23, 0x01	; 1
     fdc:	8f e3       	ldi	r24, 0x3F	; 63
     fde:	96 e0       	ldi	r25, 0x06	; 6
     fe0:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
    TaskPHRead
    ,  (const portCHAR *) "pH"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xPH );
     fe4:	2e e3       	ldi	r18, 0x3E	; 62
     fe6:	e2 2e       	mov	r14, r18
     fe8:	22 e0       	ldi	r18, 0x02	; 2
     fea:	f2 2e       	mov	r15, r18
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	60 ed       	ldi	r22, 0xD0	; 208
     ff6:	71 e0       	ldi	r23, 0x01	; 1
     ff8:	88 ee       	ldi	r24, 0xE8	; 232
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
    TaskTemperatureRead
    ,  (const portCHAR *) "Temperature"
    ,  128  // Stack size
    ,  NULL
    ,  2  // Priority
    ,  &xTemperature );
    1000:	3c e3       	ldi	r19, 0x3C	; 60
    1002:	e3 2e       	mov	r14, r19
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	f3 2e       	mov	r15, r19
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	6f ef       	ldi	r22, 0xFF	; 255
    1012:	71 e0       	ldi	r23, 0x01	; 1
    1014:	86 e4       	ldi	r24, 0x46	; 70
    1016:	97 e0       	ldi	r25, 0x07	; 7
    1018:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
	
  vTaskSuspend(xAmmonia);
    101c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <xAmmonia>
    1020:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <xAmmonia+0x1>
    1024:	0e 94 36 1a 	call	0x346c	; 0x346c <vTaskSuspend>
  vTaskSuspend(xNitriteNitrate);
    1028:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <xNitriteNitrate>
    102c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <xNitriteNitrate+0x1>
    1030:	0e 94 36 1a 	call	0x346c	; 0x346c <vTaskSuspend>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
}
<<<<<<< HEAD
     ac6:	0f 91       	pop	r16
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
=======
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	
  vTaskSuspend(xAmmonia);
  vTaskSuspend(xNitriteNitrate);*/

  // Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
  vTaskStartScheduler();
<<<<<<< HEAD
     acc:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <vTaskStartScheduler>

00000ad0 <loop>:
=======
    103a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <vTaskStartScheduler>

0000103e <loop>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
}

void loop()
{
<<<<<<< HEAD
     ad0:	08 95       	ret

00000ad2 <_GLOBAL__sub_I_ds>:
=======
    103e:	08 95       	ret

00001040 <_GLOBAL__sub_I_ds>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
<<<<<<< HEAD
     ad2:	67 e0       	ldi	r22, 0x07	; 7
     ad4:	86 e6       	ldi	r24, 0x66	; 102
     ad6:	93 e0       	ldi	r25, 0x03	; 3
     ad8:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN7OneWire5beginEh>
Color WhiteTestStrip {0, {245, 45, 45}};
=======
    1040:	67 e0       	ldi	r22, 0x07	; 7
    1042:	87 e4       	ldi	r24, 0x47	; 71
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN7OneWire5beginEh>
Color WhiteTestStrip {0, {255, 81, 84}};
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

colorData rgb;
Color c;

MD_TCS230  CS(S2, S3, OE);
<<<<<<< HEAD
     adc:	28 e0       	ldi	r18, 0x08	; 8
     ade:	4d e0       	ldi	r20, 0x0D	; 13
     ae0:	6c e0       	ldi	r22, 0x0C	; 12
     ae2:	8b e6       	ldi	r24, 0x6B	; 107
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN9MD_TCS230C1Ehhh>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define PH_PIN A1
float voltage, phValue, temperature = 25;
DFRobot_PH ph;
     aea:	86 e4       	ldi	r24, 0x46	; 70
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_ZN10DFRobot_PHC1Ev>

00000af2 <_GLOBAL__sub_D_ds>:
     af2:	86 e4       	ldi	r24, 0x46	; 70
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 cb 00 	call	0x196	; 0x196 <_ZN10DFRobot_PHD1Ev>
     afa:	8b e6       	ldi	r24, 0x6B	; 107
     afc:	92 e0       	ldi	r25, 0x02	; 2
     afe:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <_ZN9MD_TCS230D1Ev>

00000b02 <_ZN7OneWire12reset_searchEv>:
     b02:	fc 01       	movw	r30, r24
     b04:	13 86       	std	Z+11, r1	; 0x0b
     b06:	15 86       	std	Z+13, r1	; 0x0d
     b08:	14 86       	std	Z+12, r1	; 0x0c
     b0a:	dc 01       	movw	r26, r24
     b0c:	1b 96       	adiw	r26, 0x0b	; 11
     b0e:	33 96       	adiw	r30, 0x03	; 3
     b10:	1e 92       	st	-X, r1
     b12:	ae 17       	cp	r26, r30
     b14:	bf 07       	cpc	r27, r31
     b16:	e1 f7       	brne	.-8      	; 0xb10 <_ZN7OneWire12reset_searchEv+0xe>
     b18:	08 95       	ret

00000b1a <_ZN7OneWire5beginEh>:
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	16 2f       	mov	r17, r22
     b24:	60 e0       	ldi	r22, 0x00	; 0
     b26:	81 2f       	mov	r24, r17
     b28:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
     b2c:	61 2f       	mov	r22, r17
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	fb 01       	movw	r30, r22
     b32:	ea 55       	subi	r30, 0x5A	; 90
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	e4 91       	lpm	r30, Z
     b38:	e8 83       	st	Y, r30
     b3a:	fb 01       	movw	r30, r22
     b3c:	e6 54       	subi	r30, 0x46	; 70
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	e4 91       	lpm	r30, Z
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	e2 53       	subi	r30, 0x32	; 50
     b4a:	ff 4f       	sbci	r31, 0xFF	; 255
     b4c:	85 91       	lpm	r24, Z+
     b4e:	94 91       	lpm	r25, Z
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	ce 01       	movw	r24, r28
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <_ZN7OneWire12reset_searchEv>

00000b60 <__subsf3>:
     b60:	50 58       	subi	r21, 0x80	; 128

00000b62 <__addsf3>:
     b62:	bb 27       	eor	r27, r27
     b64:	aa 27       	eor	r26, r26
     b66:	0e 94 c8 05 	call	0xb90	; 0xb90 <__addsf3x>
     b6a:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     b6e:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     b72:	38 f0       	brcs	.+14     	; 0xb82 <__addsf3+0x20>
     b74:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     b78:	20 f0       	brcs	.+8      	; 0xb82 <__addsf3+0x20>
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__addsf3+0x28>
     b7c:	9f 3f       	cpi	r25, 0xFF	; 255
     b7e:	19 f4       	brne	.+6      	; 0xb86 <__addsf3+0x24>
     b80:	26 f4       	brtc	.+8      	; 0xb8a <__addsf3+0x28>
     b82:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     b86:	0e f4       	brtc	.+2      	; 0xb8a <__addsf3+0x28>
     b88:	e0 95       	com	r30
     b8a:	e7 fb       	bst	r30, 7
     b8c:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>

00000b90 <__addsf3x>:
     b90:	e9 2f       	mov	r30, r25
     b92:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     b96:	58 f3       	brcs	.-42     	; 0xb6e <__addsf3+0xc>
     b98:	ba 17       	cp	r27, r26
     b9a:	62 07       	cpc	r22, r18
     b9c:	73 07       	cpc	r23, r19
     b9e:	84 07       	cpc	r24, r20
     ba0:	95 07       	cpc	r25, r21
     ba2:	20 f0       	brcs	.+8      	; 0xbac <__addsf3x+0x1c>
     ba4:	79 f4       	brne	.+30     	; 0xbc4 <__addsf3x+0x34>
     ba6:	a6 f5       	brtc	.+104    	; 0xc10 <__addsf3x+0x80>
     ba8:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     bac:	0e f4       	brtc	.+2      	; 0xbb0 <__addsf3x+0x20>
     bae:	e0 95       	com	r30
     bb0:	0b 2e       	mov	r0, r27
     bb2:	ba 2f       	mov	r27, r26
     bb4:	a0 2d       	mov	r26, r0
     bb6:	0b 01       	movw	r0, r22
     bb8:	b9 01       	movw	r22, r18
     bba:	90 01       	movw	r18, r0
     bbc:	0c 01       	movw	r0, r24
     bbe:	ca 01       	movw	r24, r20
     bc0:	a0 01       	movw	r20, r0
     bc2:	11 24       	eor	r1, r1
     bc4:	ff 27       	eor	r31, r31
     bc6:	59 1b       	sub	r21, r25
     bc8:	99 f0       	breq	.+38     	; 0xbf0 <__addsf3x+0x60>
     bca:	59 3f       	cpi	r21, 0xF9	; 249
     bcc:	50 f4       	brcc	.+20     	; 0xbe2 <__addsf3x+0x52>
     bce:	50 3e       	cpi	r21, 0xE0	; 224
     bd0:	68 f1       	brcs	.+90     	; 0xc2c <__addsf3x+0x9c>
     bd2:	1a 16       	cp	r1, r26
     bd4:	f0 40       	sbci	r31, 0x00	; 0
     bd6:	a2 2f       	mov	r26, r18
     bd8:	23 2f       	mov	r18, r19
     bda:	34 2f       	mov	r19, r20
     bdc:	44 27       	eor	r20, r20
     bde:	58 5f       	subi	r21, 0xF8	; 248
     be0:	f3 cf       	rjmp	.-26     	; 0xbc8 <__addsf3x+0x38>
     be2:	46 95       	lsr	r20
     be4:	37 95       	ror	r19
     be6:	27 95       	ror	r18
     be8:	a7 95       	ror	r26
     bea:	f0 40       	sbci	r31, 0x00	; 0
     bec:	53 95       	inc	r21
     bee:	c9 f7       	brne	.-14     	; 0xbe2 <__addsf3x+0x52>
     bf0:	7e f4       	brtc	.+30     	; 0xc10 <__addsf3x+0x80>
     bf2:	1f 16       	cp	r1, r31
     bf4:	ba 0b       	sbc	r27, r26
     bf6:	62 0b       	sbc	r22, r18
     bf8:	73 0b       	sbc	r23, r19
     bfa:	84 0b       	sbc	r24, r20
     bfc:	ba f0       	brmi	.+46     	; 0xc2c <__addsf3x+0x9c>
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	a1 f0       	breq	.+40     	; 0xc2a <__addsf3x+0x9a>
     c02:	ff 0f       	add	r31, r31
     c04:	bb 1f       	adc	r27, r27
     c06:	66 1f       	adc	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	c2 f7       	brpl	.-16     	; 0xbfe <__addsf3x+0x6e>
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <__addsf3x+0x9c>
     c10:	ba 0f       	add	r27, r26
     c12:	62 1f       	adc	r22, r18
     c14:	73 1f       	adc	r23, r19
     c16:	84 1f       	adc	r24, r20
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__addsf3x+0x9c>
     c1a:	87 95       	ror	r24
     c1c:	77 95       	ror	r23
     c1e:	67 95       	ror	r22
     c20:	b7 95       	ror	r27
     c22:	f7 95       	ror	r31
     c24:	9e 3f       	cpi	r25, 0xFE	; 254
     c26:	08 f0       	brcs	.+2      	; 0xc2a <__addsf3x+0x9a>
     c28:	b0 cf       	rjmp	.-160    	; 0xb8a <__addsf3+0x28>
     c2a:	93 95       	inc	r25
     c2c:	88 0f       	add	r24, r24
     c2e:	08 f0       	brcs	.+2      	; 0xc32 <__addsf3x+0xa2>
     c30:	99 27       	eor	r25, r25
     c32:	ee 0f       	add	r30, r30
     c34:	97 95       	ror	r25
     c36:	87 95       	ror	r24
     c38:	08 95       	ret

00000c3a <__cmpsf2>:
     c3a:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <__cmpsf2+0x8>
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	08 95       	ret

00000c44 <__divsf3>:
     c44:	0e 94 36 06 	call	0xc6c	; 0xc6c <__divsf3x>
     c48:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     c4c:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     c50:	58 f0       	brcs	.+22     	; 0xc68 <__divsf3+0x24>
     c52:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     c56:	40 f0       	brcs	.+16     	; 0xc68 <__divsf3+0x24>
     c58:	29 f4       	brne	.+10     	; 0xc64 <__divsf3+0x20>
     c5a:	5f 3f       	cpi	r21, 0xFF	; 255
     c5c:	29 f0       	breq	.+10     	; 0xc68 <__divsf3+0x24>
     c5e:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     c62:	51 11       	cpse	r21, r1
     c64:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     c68:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>

00000c6c <__divsf3x>:
     c6c:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     c70:	68 f3       	brcs	.-38     	; 0xc4c <__divsf3+0x8>

00000c72 <__divsf3_pse>:
     c72:	99 23       	and	r25, r25
     c74:	b1 f3       	breq	.-20     	; 0xc62 <__divsf3+0x1e>
     c76:	55 23       	and	r21, r21
     c78:	91 f3       	breq	.-28     	; 0xc5e <__divsf3+0x1a>
     c7a:	95 1b       	sub	r25, r21
     c7c:	55 0b       	sbc	r21, r21
     c7e:	bb 27       	eor	r27, r27
     c80:	aa 27       	eor	r26, r26
     c82:	62 17       	cp	r22, r18
     c84:	73 07       	cpc	r23, r19
     c86:	84 07       	cpc	r24, r20
     c88:	38 f0       	brcs	.+14     	; 0xc98 <__divsf3_pse+0x26>
     c8a:	9f 5f       	subi	r25, 0xFF	; 255
     c8c:	5f 4f       	sbci	r21, 0xFF	; 255
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	44 1f       	adc	r20, r20
     c94:	aa 1f       	adc	r26, r26
     c96:	a9 f3       	breq	.-22     	; 0xc82 <__divsf3_pse+0x10>
     c98:	35 d0       	rcall	.+106    	; 0xd04 <__divsf3_pse+0x92>
     c9a:	0e 2e       	mov	r0, r30
     c9c:	3a f0       	brmi	.+14     	; 0xcac <__divsf3_pse+0x3a>
     c9e:	e0 e8       	ldi	r30, 0x80	; 128
     ca0:	32 d0       	rcall	.+100    	; 0xd06 <__divsf3_pse+0x94>
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	50 40       	sbci	r21, 0x00	; 0
     ca6:	e6 95       	lsr	r30
     ca8:	00 1c       	adc	r0, r0
     caa:	ca f7       	brpl	.-14     	; 0xc9e <__divsf3_pse+0x2c>
     cac:	2b d0       	rcall	.+86     	; 0xd04 <__divsf3_pse+0x92>
     cae:	fe 2f       	mov	r31, r30
     cb0:	29 d0       	rcall	.+82     	; 0xd04 <__divsf3_pse+0x92>
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	bb 1f       	adc	r27, r27
     cba:	26 17       	cp	r18, r22
     cbc:	37 07       	cpc	r19, r23
     cbe:	48 07       	cpc	r20, r24
     cc0:	ab 07       	cpc	r26, r27
     cc2:	b0 e8       	ldi	r27, 0x80	; 128
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <__divsf3_pse+0x56>
     cc6:	bb 0b       	sbc	r27, r27
     cc8:	80 2d       	mov	r24, r0
     cca:	bf 01       	movw	r22, r30
     ccc:	ff 27       	eor	r31, r31
     cce:	93 58       	subi	r25, 0x83	; 131
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	3a f0       	brmi	.+14     	; 0xce2 <__divsf3_pse+0x70>
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	51 05       	cpc	r21, r1
     cd8:	78 f0       	brcs	.+30     	; 0xcf8 <__divsf3_pse+0x86>
     cda:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     cde:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     ce2:	5f 3f       	cpi	r21, 0xFF	; 255
     ce4:	e4 f3       	brlt	.-8      	; 0xcde <__divsf3_pse+0x6c>
     ce6:	98 3e       	cpi	r25, 0xE8	; 232
     ce8:	d4 f3       	brlt	.-12     	; 0xcde <__divsf3_pse+0x6c>
     cea:	86 95       	lsr	r24
     cec:	77 95       	ror	r23
     cee:	67 95       	ror	r22
     cf0:	b7 95       	ror	r27
     cf2:	f7 95       	ror	r31
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	c9 f7       	brne	.-14     	; 0xcea <__divsf3_pse+0x78>
     cf8:	88 0f       	add	r24, r24
     cfa:	91 1d       	adc	r25, r1
     cfc:	96 95       	lsr	r25
     cfe:	87 95       	ror	r24
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	88 1f       	adc	r24, r24
     d0c:	bb 1f       	adc	r27, r27
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	ba 07       	cpc	r27, r26
     d16:	20 f0       	brcs	.+8      	; 0xd20 <__divsf3_pse+0xae>
     d18:	62 1b       	sub	r22, r18
     d1a:	73 0b       	sbc	r23, r19
     d1c:	84 0b       	sbc	r24, r20
     d1e:	ba 0b       	sbc	r27, r26
     d20:	ee 1f       	adc	r30, r30
     d22:	88 f7       	brcc	.-30     	; 0xd06 <__divsf3_pse+0x94>
     d24:	e0 95       	com	r30
     d26:	08 95       	ret

00000d28 <__fixsfsi>:
     d28:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
     d2c:	68 94       	set
     d2e:	b1 11       	cpse	r27, r1
     d30:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     d34:	08 95       	ret

00000d36 <__fixunssfsi>:
     d36:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_splitA>
     d3a:	88 f0       	brcs	.+34     	; 0xd5e <__fixunssfsi+0x28>
     d3c:	9f 57       	subi	r25, 0x7F	; 127
     d3e:	98 f0       	brcs	.+38     	; 0xd66 <__fixunssfsi+0x30>
     d40:	b9 2f       	mov	r27, r25
     d42:	99 27       	eor	r25, r25
     d44:	b7 51       	subi	r27, 0x17	; 23
     d46:	b0 f0       	brcs	.+44     	; 0xd74 <__fixunssfsi+0x3e>
     d48:	e1 f0       	breq	.+56     	; 0xd82 <__fixunssfsi+0x4c>
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	1a f0       	brmi	.+6      	; 0xd5a <__fixunssfsi+0x24>
     d54:	ba 95       	dec	r27
     d56:	c9 f7       	brne	.-14     	; 0xd4a <__fixunssfsi+0x14>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <__fixunssfsi+0x4c>
     d5a:	b1 30       	cpi	r27, 0x01	; 1
     d5c:	91 f0       	breq	.+36     	; 0xd82 <__fixunssfsi+0x4c>
     d5e:	0e 94 75 07 	call	0xeea	; 0xeea <__fp_zero>
     d62:	b1 e0       	ldi	r27, 0x01	; 1
     d64:	08 95       	ret
     d66:	0c 94 75 07 	jmp	0xeea	; 0xeea <__fp_zero>
     d6a:	67 2f       	mov	r22, r23
     d6c:	78 2f       	mov	r23, r24
     d6e:	88 27       	eor	r24, r24
     d70:	b8 5f       	subi	r27, 0xF8	; 248
     d72:	39 f0       	breq	.+14     	; 0xd82 <__fixunssfsi+0x4c>
     d74:	b9 3f       	cpi	r27, 0xF9	; 249
     d76:	cc f3       	brlt	.-14     	; 0xd6a <__fixunssfsi+0x34>
     d78:	86 95       	lsr	r24
     d7a:	77 95       	ror	r23
     d7c:	67 95       	ror	r22
     d7e:	b3 95       	inc	r27
     d80:	d9 f7       	brne	.-10     	; 0xd78 <__fixunssfsi+0x42>
     d82:	3e f4       	brtc	.+14     	; 0xd92 <__fixunssfsi+0x5c>
     d84:	90 95       	com	r25
     d86:	80 95       	com	r24
     d88:	70 95       	com	r23
     d8a:	61 95       	neg	r22
     d8c:	7f 4f       	sbci	r23, 0xFF	; 255
     d8e:	8f 4f       	sbci	r24, 0xFF	; 255
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	08 95       	ret

00000d94 <__floatunsisf>:
     d94:	e8 94       	clt
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__floatsisf+0x12>

00000d98 <__floatsisf>:
     d98:	97 fb       	bst	r25, 7
     d9a:	3e f4       	brtc	.+14     	; 0xdaa <__floatsisf+0x12>
     d9c:	90 95       	com	r25
     d9e:	80 95       	com	r24
     da0:	70 95       	com	r23
     da2:	61 95       	neg	r22
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	8f 4f       	sbci	r24, 0xFF	; 255
     da8:	9f 4f       	sbci	r25, 0xFF	; 255
     daa:	99 23       	and	r25, r25
     dac:	a9 f0       	breq	.+42     	; 0xdd8 <__floatsisf+0x40>
     dae:	f9 2f       	mov	r31, r25
     db0:	96 e9       	ldi	r25, 0x96	; 150
     db2:	bb 27       	eor	r27, r27
     db4:	93 95       	inc	r25
     db6:	f6 95       	lsr	r31
     db8:	87 95       	ror	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f1 11       	cpse	r31, r1
     dc2:	f8 cf       	rjmp	.-16     	; 0xdb4 <__floatsisf+0x1c>
     dc4:	fa f4       	brpl	.+62     	; 0xe04 <__floatsisf+0x6c>
     dc6:	bb 0f       	add	r27, r27
     dc8:	11 f4       	brne	.+4      	; 0xdce <__floatsisf+0x36>
     dca:	60 ff       	sbrs	r22, 0
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <__floatsisf+0x6c>
     dce:	6f 5f       	subi	r22, 0xFF	; 255
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	8f 4f       	sbci	r24, 0xFF	; 255
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	16 c0       	rjmp	.+44     	; 0xe04 <__floatsisf+0x6c>
     dd8:	88 23       	and	r24, r24
     dda:	11 f0       	breq	.+4      	; 0xde0 <__floatsisf+0x48>
     ddc:	96 e9       	ldi	r25, 0x96	; 150
     dde:	11 c0       	rjmp	.+34     	; 0xe02 <__floatsisf+0x6a>
     de0:	77 23       	and	r23, r23
     de2:	21 f0       	breq	.+8      	; 0xdec <__floatsisf+0x54>
     de4:	9e e8       	ldi	r25, 0x8E	; 142
     de6:	87 2f       	mov	r24, r23
     de8:	76 2f       	mov	r23, r22
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <__floatsisf+0x5e>
     dec:	66 23       	and	r22, r22
     dee:	71 f0       	breq	.+28     	; 0xe0c <__floatsisf+0x74>
     df0:	96 e8       	ldi	r25, 0x86	; 134
     df2:	86 2f       	mov	r24, r22
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	2a f0       	brmi	.+10     	; 0xe04 <__floatsisf+0x6c>
     dfa:	9a 95       	dec	r25
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	da f7       	brpl	.-10     	; 0xdfa <__floatsisf+0x62>
     e04:	88 0f       	add	r24, r24
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret

00000e0e <__fp_cmp>:
     e0e:	99 0f       	add	r25, r25
     e10:	00 08       	sbc	r0, r0
     e12:	55 0f       	add	r21, r21
     e14:	aa 0b       	sbc	r26, r26
     e16:	e0 e8       	ldi	r30, 0x80	; 128
     e18:	fe ef       	ldi	r31, 0xFE	; 254
     e1a:	16 16       	cp	r1, r22
     e1c:	17 06       	cpc	r1, r23
     e1e:	e8 07       	cpc	r30, r24
     e20:	f9 07       	cpc	r31, r25
     e22:	c0 f0       	brcs	.+48     	; 0xe54 <__fp_cmp+0x46>
     e24:	12 16       	cp	r1, r18
     e26:	13 06       	cpc	r1, r19
     e28:	e4 07       	cpc	r30, r20
     e2a:	f5 07       	cpc	r31, r21
     e2c:	98 f0       	brcs	.+38     	; 0xe54 <__fp_cmp+0x46>
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	95 0b       	sbc	r25, r21
     e36:	39 f4       	brne	.+14     	; 0xe46 <__fp_cmp+0x38>
     e38:	0a 26       	eor	r0, r26
     e3a:	61 f0       	breq	.+24     	; 0xe54 <__fp_cmp+0x46>
     e3c:	23 2b       	or	r18, r19
     e3e:	24 2b       	or	r18, r20
     e40:	25 2b       	or	r18, r21
     e42:	21 f4       	brne	.+8      	; 0xe4c <__fp_cmp+0x3e>
     e44:	08 95       	ret
     e46:	0a 26       	eor	r0, r26
     e48:	09 f4       	brne	.+2      	; 0xe4c <__fp_cmp+0x3e>
     e4a:	a1 40       	sbci	r26, 0x01	; 1
     e4c:	a6 95       	lsr	r26
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	81 1d       	adc	r24, r1
     e52:	81 1d       	adc	r24, r1
     e54:	08 95       	ret

00000e56 <__fp_inf>:
     e56:	97 f9       	bld	r25, 7
     e58:	9f 67       	ori	r25, 0x7F	; 127
     e5a:	80 e8       	ldi	r24, 0x80	; 128
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	08 95       	ret

00000e62 <__fp_nan>:
     e62:	9f ef       	ldi	r25, 0xFF	; 255
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	08 95       	ret

00000e68 <__fp_pscA>:
     e68:	00 24       	eor	r0, r0
     e6a:	0a 94       	dec	r0
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	18 06       	cpc	r1, r24
     e72:	09 06       	cpc	r0, r25
     e74:	08 95       	ret

00000e76 <__fp_pscB>:
     e76:	00 24       	eor	r0, r0
     e78:	0a 94       	dec	r0
     e7a:	12 16       	cp	r1, r18
     e7c:	13 06       	cpc	r1, r19
     e7e:	14 06       	cpc	r1, r20
     e80:	05 06       	cpc	r0, r21
     e82:	08 95       	ret

00000e84 <__fp_round>:
     e84:	09 2e       	mov	r0, r25
     e86:	03 94       	inc	r0
     e88:	00 0c       	add	r0, r0
     e8a:	11 f4       	brne	.+4      	; 0xe90 <__fp_round+0xc>
     e8c:	88 23       	and	r24, r24
     e8e:	52 f0       	brmi	.+20     	; 0xea4 <__fp_round+0x20>
     e90:	bb 0f       	add	r27, r27
     e92:	40 f4       	brcc	.+16     	; 0xea4 <__fp_round+0x20>
     e94:	bf 2b       	or	r27, r31
     e96:	11 f4       	brne	.+4      	; 0xe9c <__fp_round+0x18>
     e98:	60 ff       	sbrs	r22, 0
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <__fp_round+0x20>
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	8f 4f       	sbci	r24, 0xFF	; 255
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	08 95       	ret

00000ea6 <__fp_split3>:
     ea6:	57 fd       	sbrc	r21, 7
     ea8:	90 58       	subi	r25, 0x80	; 128
     eaa:	44 0f       	add	r20, r20
     eac:	55 1f       	adc	r21, r21
     eae:	59 f0       	breq	.+22     	; 0xec6 <__fp_splitA+0x10>
     eb0:	5f 3f       	cpi	r21, 0xFF	; 255
     eb2:	71 f0       	breq	.+28     	; 0xed0 <__fp_splitA+0x1a>
     eb4:	47 95       	ror	r20

00000eb6 <__fp_splitA>:
     eb6:	88 0f       	add	r24, r24
     eb8:	97 fb       	bst	r25, 7
     eba:	99 1f       	adc	r25, r25
     ebc:	61 f0       	breq	.+24     	; 0xed6 <__fp_splitA+0x20>
     ebe:	9f 3f       	cpi	r25, 0xFF	; 255
     ec0:	79 f0       	breq	.+30     	; 0xee0 <__fp_splitA+0x2a>
     ec2:	87 95       	ror	r24
     ec4:	08 95       	ret
     ec6:	12 16       	cp	r1, r18
     ec8:	13 06       	cpc	r1, r19
     eca:	14 06       	cpc	r1, r20
     ecc:	55 1f       	adc	r21, r21
     ece:	f2 cf       	rjmp	.-28     	; 0xeb4 <__fp_split3+0xe>
     ed0:	46 95       	lsr	r20
     ed2:	f1 df       	rcall	.-30     	; 0xeb6 <__fp_splitA>
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <__fp_splitA+0x30>
     ed6:	16 16       	cp	r1, r22
     ed8:	17 06       	cpc	r1, r23
     eda:	18 06       	cpc	r1, r24
     edc:	99 1f       	adc	r25, r25
     ede:	f1 cf       	rjmp	.-30     	; 0xec2 <__fp_splitA+0xc>
     ee0:	86 95       	lsr	r24
     ee2:	71 05       	cpc	r23, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	08 94       	sec
     ee8:	08 95       	ret

00000eea <__fp_zero>:
     eea:	e8 94       	clt

00000eec <__fp_szero>:
     eec:	bb 27       	eor	r27, r27
     eee:	66 27       	eor	r22, r22
     ef0:	77 27       	eor	r23, r23
     ef2:	cb 01       	movw	r24, r22
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret

00000ef8 <__gesf2>:
     ef8:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
     efc:	08 f4       	brcc	.+2      	; 0xf00 <__gesf2+0x8>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	08 95       	ret

00000f02 <__mulsf3>:
     f02:	0e 94 94 07 	call	0xf28	; 0xf28 <__mulsf3x>
     f06:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__fp_round>
     f0a:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_pscA>
     f0e:	38 f0       	brcs	.+14     	; 0xf1e <__mulsf3+0x1c>
     f10:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscB>
     f14:	20 f0       	brcs	.+8      	; 0xf1e <__mulsf3+0x1c>
     f16:	95 23       	and	r25, r21
     f18:	11 f0       	breq	.+4      	; 0xf1e <__mulsf3+0x1c>
     f1a:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     f1e:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__fp_nan>
     f22:	11 24       	eor	r1, r1
     f24:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>

00000f28 <__mulsf3x>:
     f28:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_split3>
     f2c:	70 f3       	brcs	.-36     	; 0xf0a <__mulsf3+0x8>

00000f2e <__mulsf3_pse>:
     f2e:	95 9f       	mul	r25, r21
     f30:	c1 f3       	breq	.-16     	; 0xf22 <__mulsf3+0x20>
     f32:	95 0f       	add	r25, r21
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	55 1f       	adc	r21, r21
     f38:	62 9f       	mul	r22, r18
     f3a:	f0 01       	movw	r30, r0
     f3c:	72 9f       	mul	r23, r18
     f3e:	bb 27       	eor	r27, r27
     f40:	f0 0d       	add	r31, r0
     f42:	b1 1d       	adc	r27, r1
     f44:	63 9f       	mul	r22, r19
     f46:	aa 27       	eor	r26, r26
     f48:	f0 0d       	add	r31, r0
     f4a:	b1 1d       	adc	r27, r1
     f4c:	aa 1f       	adc	r26, r26
     f4e:	64 9f       	mul	r22, r20
     f50:	66 27       	eor	r22, r22
     f52:	b0 0d       	add	r27, r0
     f54:	a1 1d       	adc	r26, r1
     f56:	66 1f       	adc	r22, r22
     f58:	82 9f       	mul	r24, r18
     f5a:	22 27       	eor	r18, r18
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	62 1f       	adc	r22, r18
     f62:	73 9f       	mul	r23, r19
     f64:	b0 0d       	add	r27, r0
     f66:	a1 1d       	adc	r26, r1
     f68:	62 1f       	adc	r22, r18
     f6a:	83 9f       	mul	r24, r19
     f6c:	a0 0d       	add	r26, r0
     f6e:	61 1d       	adc	r22, r1
     f70:	22 1f       	adc	r18, r18
     f72:	74 9f       	mul	r23, r20
     f74:	33 27       	eor	r19, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	23 1f       	adc	r18, r19
     f7c:	84 9f       	mul	r24, r20
     f7e:	60 0d       	add	r22, r0
     f80:	21 1d       	adc	r18, r1
     f82:	82 2f       	mov	r24, r18
     f84:	76 2f       	mov	r23, r22
     f86:	6a 2f       	mov	r22, r26
     f88:	11 24       	eor	r1, r1
     f8a:	9f 57       	subi	r25, 0x7F	; 127
     f8c:	50 40       	sbci	r21, 0x00	; 0
     f8e:	9a f0       	brmi	.+38     	; 0xfb6 <__mulsf3_pse+0x88>
     f90:	f1 f0       	breq	.+60     	; 0xfce <__mulsf3_pse+0xa0>
     f92:	88 23       	and	r24, r24
     f94:	4a f0       	brmi	.+18     	; 0xfa8 <__mulsf3_pse+0x7a>
     f96:	ee 0f       	add	r30, r30
     f98:	ff 1f       	adc	r31, r31
     f9a:	bb 1f       	adc	r27, r27
     f9c:	66 1f       	adc	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	91 50       	subi	r25, 0x01	; 1
     fa4:	50 40       	sbci	r21, 0x00	; 0
     fa6:	a9 f7       	brne	.-22     	; 0xf92 <__mulsf3_pse+0x64>
     fa8:	9e 3f       	cpi	r25, 0xFE	; 254
     faa:	51 05       	cpc	r21, r1
     fac:	80 f0       	brcs	.+32     	; 0xfce <__mulsf3_pse+0xa0>
     fae:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_inf>
     fb2:	0c 94 76 07 	jmp	0xeec	; 0xeec <__fp_szero>
     fb6:	5f 3f       	cpi	r21, 0xFF	; 255
     fb8:	e4 f3       	brlt	.-8      	; 0xfb2 <__mulsf3_pse+0x84>
     fba:	98 3e       	cpi	r25, 0xE8	; 232
     fbc:	d4 f3       	brlt	.-12     	; 0xfb2 <__mulsf3_pse+0x84>
     fbe:	86 95       	lsr	r24
     fc0:	77 95       	ror	r23
     fc2:	67 95       	ror	r22
     fc4:	b7 95       	ror	r27
     fc6:	f7 95       	ror	r31
     fc8:	e7 95       	ror	r30
     fca:	9f 5f       	subi	r25, 0xFF	; 255
     fcc:	c1 f7       	brne	.-16     	; 0xfbe <__mulsf3_pse+0x90>
     fce:	fe 2b       	or	r31, r30
     fd0:	88 0f       	add	r24, r24
     fd2:	91 1d       	adc	r25, r1
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	97 f9       	bld	r25, 7
     fda:	08 95       	ret

00000fdc <_ZN14HardwareSerial9availableEv>:
=======
    104a:	28 e0       	ldi	r18, 0x08	; 8
    104c:	4d e0       	ldi	r20, 0x0D	; 13
    104e:	6c e0       	ldi	r22, 0x0C	; 12
    1050:	8c e4       	ldi	r24, 0x4C	; 76
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <_ZN9MD_TCS230C1Ehhh>

00001058 <_GLOBAL__sub_D_ds>:
    1058:	8c e4       	ldi	r24, 0x4C	; 76
    105a:	92 e0       	ldi	r25, 0x02	; 2
    105c:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <_ZN9MD_TCS230D1Ev>

00001060 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	fc 01       	movw	r30, r24
    106c:	f0 80       	ld	r15, Z
    106e:	c1 81       	ldd	r28, Z+1	; 0x01
    1070:	d2 81       	ldd	r29, Z+2	; 0x02
    1072:	f8 94       	cli
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	0f 2d       	mov	r16, r15
    1078:	00 95       	com	r16
    107a:	80 23       	and	r24, r16
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	78 94       	sei
    1080:	1d e7       	ldi	r17, 0x7D	; 125
    1082:	11 50       	subi	r17, 0x01	; 1
    1084:	29 f1       	breq	.+74     	; 0x10d0 <_ZN7OneWire5resetEv+0x70>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    108e:	88 81       	ld	r24, Y
    1090:	8f 21       	and	r24, r15
    1092:	b9 f3       	breq	.-18     	; 0x1082 <_ZN7OneWire5resetEv+0x22>
    1094:	f8 94       	cli
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	80 23       	and	r24, r16
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	8f 29       	or	r24, r15
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	78 94       	sei
    10a4:	80 ee       	ldi	r24, 0xE0	; 224
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    10ac:	f8 94       	cli
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	08 23       	and	r16, r24
    10b2:	09 83       	std	Y+1, r16	; 0x01
    10b4:	86 e4       	ldi	r24, 0x46	; 70
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    10bc:	88 81       	ld	r24, Y
    10be:	f8 22       	and	r15, r24
    10c0:	11 e0       	ldi	r17, 0x01	; 1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <_ZN7OneWire5resetEv+0x66>
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	78 94       	sei
    10c8:	8a e9       	ldi	r24, 0x9A	; 154
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    10d0:	81 2f       	mov	r24, r17
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	08 95       	ret

000010de <_ZN7OneWire9write_bitEh>:
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	fc 01       	movw	r30, r24
    10e6:	10 81       	ld	r17, Z
    10e8:	c1 81       	ldd	r28, Z+1	; 0x01
    10ea:	d2 81       	ldd	r29, Z+2	; 0x02
    10ec:	81 2f       	mov	r24, r17
    10ee:	80 95       	com	r24
    10f0:	60 ff       	sbrs	r22, 0
    10f2:	12 c0       	rjmp	.+36     	; 0x1118 <_ZN7OneWire9write_bitEh+0x3a>
    10f4:	f8 94       	cli
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	89 23       	and	r24, r25
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	81 2b       	or	r24, r17
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	8a e0       	ldi	r24, 0x0A	; 10
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	18 2b       	or	r17, r24
    110e:	1a 83       	std	Y+2, r17	; 0x02
    1110:	78 94       	sei
    1112:	87 e3       	ldi	r24, 0x37	; 55
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	11 c0       	rjmp	.+34     	; 0x113a <_ZN7OneWire9write_bitEh+0x5c>
    1118:	f8 94       	cli
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	89 23       	and	r24, r25
    111e:	8a 83       	std	Y+2, r24	; 0x02
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	81 2b       	or	r24, r17
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	81 e4       	ldi	r24, 0x41	; 65
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	18 2b       	or	r17, r24
    1132:	1a 83       	std	Y+2, r17	; 0x02
    1134:	78 94       	sei
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0c 94 90 11 	jmp	0x2320	; 0x2320 <delayMicroseconds>

00001144 <_ZN7OneWire8read_bitEv>:
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	fc 01       	movw	r30, r24
    114e:	00 81       	ld	r16, Z
    1150:	c1 81       	ldd	r28, Z+1	; 0x01
    1152:	d2 81       	ldd	r29, Z+2	; 0x02
    1154:	f8 94       	cli
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	80 2b       	or	r24, r16
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	10 2f       	mov	r17, r16
    1160:	10 95       	com	r17
    1162:	81 23       	and	r24, r17
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	18 23       	and	r17, r24
    1172:	19 83       	std	Y+1, r17	; 0x01
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    117c:	c8 81       	ld	r28, Y
    117e:	78 94       	sei
    1180:	85 e3       	ldi	r24, 0x35	; 53
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 90 11 	call	0x2320	; 0x2320 <delayMicroseconds>
    1188:	c0 23       	and	r28, r16
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	09 f4       	brne	.+2      	; 0x1190 <_ZN7OneWire8read_bitEv+0x4c>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <_ZN7OneWire5writeEhh>:
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	ec 01       	movw	r28, r24
    11aa:	d6 2e       	mov	r13, r22
    11ac:	e4 2e       	mov	r14, r20
    11ae:	08 e0       	ldi	r16, 0x08	; 8
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	ff 24       	eor	r15, r15
    11b4:	f3 94       	inc	r15
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	8d 2d       	mov	r24, r13
    11ba:	8f 21       	and	r24, r15
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <_ZN7OneWire5writeEhh+0x26>
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN7OneWire9write_bitEh>
    11c6:	ff 0c       	add	r15, r15
    11c8:	01 50       	subi	r16, 0x01	; 1
    11ca:	11 09       	sbc	r17, r1
    11cc:	a1 f7       	brne	.-24     	; 0x11b6 <_ZN7OneWire5writeEhh+0x1c>
    11ce:	e1 10       	cpse	r14, r1
    11d0:	10 c0       	rjmp	.+32     	; 0x11f2 <_ZN7OneWire5writeEhh+0x58>
    11d2:	f8 94       	cli
    11d4:	e9 81       	ldd	r30, Y+1	; 0x01
    11d6:	fa 81       	ldd	r31, Y+2	; 0x02
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	88 81       	ld	r24, Y
    11dc:	80 95       	com	r24
    11de:	89 23       	and	r24, r25
    11e0:	81 83       	std	Z+1, r24	; 0x01
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	92 81       	ldd	r25, Z+2	; 0x02
    11e8:	88 81       	ld	r24, Y
    11ea:	80 95       	com	r24
    11ec:	89 23       	and	r24, r25
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	78 94       	sei
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	08 95       	ret

00001202 <_ZN7OneWire4readEv>:
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	7c 01       	movw	r14, r24
    1210:	08 e0       	ldi	r16, 0x08	; 8
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	c0 e0       	ldi	r28, 0x00	; 0
    1216:	d1 e0       	ldi	r29, 0x01	; 1
    1218:	c7 01       	movw	r24, r14
    121a:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire8read_bitEv>
    121e:	81 11       	cpse	r24, r1
    1220:	cd 2b       	or	r28, r29
    1222:	dd 0f       	add	r29, r29
    1224:	01 50       	subi	r16, 0x01	; 1
    1226:	11 09       	sbc	r17, r1
    1228:	b9 f7       	brne	.-18     	; 0x1218 <_ZN7OneWire4readEv+0x16>
    122a:	8c 2f       	mov	r24, r28
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <_ZN7OneWire6selectEPKh>:
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	8c 01       	movw	r16, r24
    1248:	7b 01       	movw	r14, r22
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	65 e5       	ldi	r22, 0x55	; 85
    124e:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN7OneWire5writeEhh>
    1252:	e7 01       	movw	r28, r14
    1254:	88 e0       	ldi	r24, 0x08	; 8
    1256:	e8 0e       	add	r14, r24
    1258:	f1 1c       	adc	r15, r1
    125a:	69 91       	ld	r22, Y+
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	c8 01       	movw	r24, r16
    1260:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN7OneWire5writeEhh>
    1264:	ce 15       	cp	r28, r14
    1266:	df 05       	cpc	r29, r15
    1268:	c1 f7       	brne	.-16     	; 0x125a <_ZN7OneWire6selectEPKh+0x20>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	08 95       	ret

00001278 <_ZN7OneWire12reset_searchEv>:
    1278:	fc 01       	movw	r30, r24
    127a:	13 86       	std	Z+11, r1	; 0x0b
    127c:	15 86       	std	Z+13, r1	; 0x0d
    127e:	14 86       	std	Z+12, r1	; 0x0c
    1280:	dc 01       	movw	r26, r24
    1282:	1b 96       	adiw	r26, 0x0b	; 11
    1284:	33 96       	adiw	r30, 0x03	; 3
    1286:	1e 92       	st	-X, r1
    1288:	ae 17       	cp	r26, r30
    128a:	bf 07       	cpc	r27, r31
    128c:	e1 f7       	brne	.-8      	; 0x1286 <_ZN7OneWire12reset_searchEv+0xe>
    128e:	08 95       	ret

00001290 <_ZN7OneWire5beginEh>:
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	ec 01       	movw	r28, r24
    1298:	16 2f       	mov	r17, r22
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	81 2f       	mov	r24, r17
    129e:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
    12a2:	61 2f       	mov	r22, r17
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	fb 01       	movw	r30, r22
    12a8:	ea 53       	subi	r30, 0x3A	; 58
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	e4 91       	lpm	r30, Z
    12ae:	e8 83       	st	Y, r30
    12b0:	fb 01       	movw	r30, r22
    12b2:	e6 52       	subi	r30, 0x26	; 38
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	e4 91       	lpm	r30, Z
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	ee 0f       	add	r30, r30
    12bc:	ff 1f       	adc	r31, r31
    12be:	e2 51       	subi	r30, 0x12	; 18
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	85 91       	lpm	r24, Z+
    12c4:	94 91       	lpm	r25, Z
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
    12ca:	ce 01       	movw	r24, r28
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_ZN7OneWire12reset_searchEv>

000012d6 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	6b 01       	movw	r12, r22
    12ec:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	81 11       	cpse	r24, r1
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <_ZN7OneWire6searchEPhb+0x28>
      // 1-Wire reset
      if (!reset()) {
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN7OneWire5resetEv>
    12fa:	81 11       	cpse	r24, r1
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <_ZN7OneWire6searchEPhb+0x32>
         // reset the search
         LastDiscrepancy = 0;
    12fe:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = false;
    1300:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1302:	1c 86       	std	Y+12, r1	; 0x0c
         return false;
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	64 c0       	rjmp	.+200    	; 0x13d0 <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    1308:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
    130a:	11 23       	and	r17, r17
    130c:	11 f0       	breq	.+4      	; 0x1312 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
    130e:	60 ef       	ldi	r22, 0xF0	; 240
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    1312:	6c ee       	ldi	r22, 0xEC	; 236
    1314:	ce 01       	movw	r24, r28
    1316:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    131a:	01 e0       	ldi	r16, 0x01	; 1
    131c:	e1 2c       	mov	r14, r1
    131e:	b1 2c       	mov	r11, r1
    1320:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1322:	ce 01       	movw	r24, r28
    1324:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire8read_bitEv>
    1328:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 a2 08 	call	0x1144	; 0x1144 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	f9 12       	cpse	r15, r25
    1334:	03 c0       	rjmp	.+6      	; 0x133c <_ZN7OneWire6searchEPhb+0x66>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	b1 f4       	brne	.+44     	; 0x1366 <_ZN7OneWire6searchEPhb+0x90>
    133a:	34 c0       	rjmp	.+104    	; 0x13a4 <_ZN7OneWire6searchEPhb+0xce>
    133c:	2e 2d       	mov	r18, r14
    133e:	30 e0       	ldi	r19, 0x00	; 0
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    1340:	f8 12       	cpse	r15, r24
    1342:	1b c0       	rjmp	.+54     	; 0x137a <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    1344:	8b 85       	ldd	r24, Y+11	; 0x0b
    1346:	18 17       	cp	r17, r24
    1348:	38 f4       	brcc	.+14     	; 0x1358 <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    134a:	fe 01       	movw	r30, r28
    134c:	e2 0f       	add	r30, r18
    134e:	f3 1f       	adc	r31, r19
    1350:	83 81       	ldd	r24, Z+3	; 0x03
    1352:	80 23       	and	r24, r16
    1354:	41 f4       	brne	.+16     	; 0x1366 <_ZN7OneWire6searchEPhb+0x90>
    1356:	02 c0       	rjmp	.+4      	; 0x135c <_ZN7OneWire6searchEPhb+0x86>
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1358:	18 17       	cp	r17, r24
    135a:	29 f0       	breq	.+10     	; 0x1366 <_ZN7OneWire6searchEPhb+0x90>
    135c:	f1 2c       	mov	r15, r1
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    135e:	19 30       	cpi	r17, 0x09	; 9
    1360:	58 f4       	brcc	.+22     	; 0x1378 <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
    1362:	1c 87       	std	Y+12, r17	; 0x0c
    1364:	09 c0       	rjmp	.+18     	; 0x1378 <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1366:	fe 01       	movw	r30, r28
    1368:	ee 0d       	add	r30, r14
    136a:	f1 1d       	adc	r31, r1
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	80 2b       	or	r24, r16
    1370:	83 83       	std	Z+3, r24	; 0x03
    1372:	ff 24       	eor	r15, r15
    1374:	f3 94       	inc	r15
    1376:	09 c0       	rjmp	.+18     	; 0x138a <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    1378:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    137a:	fe 01       	movw	r30, r28
    137c:	e2 0f       	add	r30, r18
    137e:	f3 1f       	adc	r31, r19
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	80 2f       	mov	r24, r16
    1384:	80 95       	com	r24
    1386:	89 23       	and	r24, r25
    1388:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    138a:	6f 2d       	mov	r22, r15
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 6f 08 	call	0x10de	; 0x10de <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1392:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    1394:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    1396:	11 f4       	brne	.+4      	; 0x139c <_ZN7OneWire6searchEPhb+0xc6>
                rom_byte_number++;
    1398:	e3 94       	inc	r14
                rom_byte_mask = 1;
    139a:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    139c:	87 e0       	ldi	r24, 0x07	; 7
    139e:	8e 15       	cp	r24, r14
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <_ZN7OneWire6searchEPhb+0xce>
    13a2:	bf cf       	rjmp	.-130    	; 0x1322 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    13a4:	11 34       	cpi	r17, 0x41	; 65
    13a6:	08 f4       	brcc	.+2      	; 0x13aa <_ZN7OneWire6searchEPhb+0xd4>
    13a8:	aa cf       	rjmp	.-172    	; 0x12fe <_ZN7OneWire6searchEPhb+0x28>
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    13aa:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0) {
    13ac:	b1 10       	cpse	r11, r1
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = true;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 23       	and	r24, r24
    13b8:	09 f4       	brne	.+2      	; 0x13bc <_ZN7OneWire6searchEPhb+0xe6>
    13ba:	a1 cf       	rjmp	.-190    	; 0x12fe <_ZN7OneWire6searchEPhb+0x28>
    13bc:	de 01       	movw	r26, r28
    13be:	13 96       	adiw	r26, 0x03	; 3
    13c0:	f6 01       	movw	r30, r12
    13c2:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    13c4:	8d 91       	ld	r24, X+
    13c6:	81 93       	st	Z+, r24
    13c8:	ca 17       	cp	r28, r26
    13ca:	db 07       	cpc	r29, r27
    13cc:	d9 f7       	brne	.-10     	; 0x13c4 <_ZN7OneWire6searchEPhb+0xee>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	08 95       	ret

000013e4 <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    13e4:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    13e6:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    13e8:	61 50       	subi	r22, 0x01	; 1
    13ea:	98 f0       	brcs	.+38     	; 0x1412 <_ZN7OneWire4crc8EPKhh+0x2e>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    13ec:	2d 91       	ld	r18, X+
    13ee:	98 2f       	mov	r25, r24
    13f0:	92 27       	eor	r25, r18
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    13f2:	e9 2f       	mov	r30, r25
    13f4:	ef 70       	andi	r30, 0x0F	; 15
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	ee 56       	subi	r30, 0x6E	; 110
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	24 91       	lpm	r18, Z
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    13fe:	92 95       	swap	r25
    1400:	9f 70       	andi	r25, 0x0F	; 15
    1402:	e9 2f       	mov	r30, r25
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	ee 55       	subi	r30, 0x5E	; 94
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	e4 91       	lpm	r30, Z
    140c:	82 2f       	mov	r24, r18
    140e:	8e 27       	eor	r24, r30
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1410:	eb cf       	rjmp	.-42     	; 0x13e8 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    1412:	08 95       	ret

00001414 <_Z6phInitv>:
}

void calibratePH(long temperaturePH) {
	float voltage = analogRead(PH_PIN)/1024.0*5000;
	ph.calibration(voltage, temperaturePH);
    1414:	85 e5       	ldi	r24, 0x55	; 85
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_ZN10DFRobot_PH5beginEv>

0000141c <_Z5getPHl>:
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	6b 01       	movw	r12, r22
    142e:	7c 01       	movw	r14, r24
    1430:	8f e0       	ldi	r24, 0x0F	; 15
    1432:	0e 94 d6 11 	call	0x23ac	; 0x23ac <analogRead>
    1436:	ec 01       	movw	r28, r24
    1438:	c7 01       	movw	r24, r14
    143a:	b6 01       	movw	r22, r12
    143c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	be 01       	movw	r22, r28
    1446:	dd 0f       	add	r29, r29
    1448:	88 0b       	sbc	r24, r24
    144a:	99 0b       	sbc	r25, r25
    144c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__floatsisf>
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5a e3       	ldi	r21, 0x3A	; 58
    1458:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e4       	ldi	r19, 0x40	; 64
    1460:	4c e9       	ldi	r20, 0x9C	; 156
    1462:	55 e4       	ldi	r21, 0x45	; 69
    1464:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    1468:	ab 01       	movw	r20, r22
    146a:	bc 01       	movw	r22, r24
    146c:	97 01       	movw	r18, r14
    146e:	86 01       	movw	r16, r12
    1470:	85 e5       	ldi	r24, 0x55	; 85
    1472:	93 e0       	ldi	r25, 0x03	; 3
    1474:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN10DFRobot_PH6readPHEff>
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <_GLOBAL__sub_I_ph>:
#include "phSensor.h"

DFRobot_PH ph;
    148a:	85 e5       	ldi	r24, 0x55	; 85
    148c:	93 e0       	ldi	r25, 0x03	; 3
    148e:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_ZN10DFRobot_PHC1Ev>

00001492 <_GLOBAL__sub_D_ph>:
    1492:	85 e5       	ldi	r24, 0x55	; 85
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_ZN10DFRobot_PHD1Ev>

0000149a <__subsf3>:
    149a:	50 58       	subi	r21, 0x80	; 128

0000149c <__addsf3>:
    149c:	bb 27       	eor	r27, r27
    149e:	aa 27       	eor	r26, r26
    14a0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__addsf3x>
    14a4:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_round>
    14a8:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscA>
    14ac:	38 f0       	brcs	.+14     	; 0x14bc <__addsf3+0x20>
    14ae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscB>
    14b2:	20 f0       	brcs	.+8      	; 0x14bc <__addsf3+0x20>
    14b4:	39 f4       	brne	.+14     	; 0x14c4 <__addsf3+0x28>
    14b6:	9f 3f       	cpi	r25, 0xFF	; 255
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <__addsf3+0x24>
    14ba:	26 f4       	brtc	.+8      	; 0x14c4 <__addsf3+0x28>
    14bc:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>
    14c0:	0e f4       	brtc	.+2      	; 0x14c4 <__addsf3+0x28>
    14c2:	e0 95       	com	r30
    14c4:	e7 fb       	bst	r30, 7
    14c6:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>

000014ca <__addsf3x>:
    14ca:	e9 2f       	mov	r30, r25
    14cc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_split3>
    14d0:	58 f3       	brcs	.-42     	; 0x14a8 <__addsf3+0xc>
    14d2:	ba 17       	cp	r27, r26
    14d4:	62 07       	cpc	r22, r18
    14d6:	73 07       	cpc	r23, r19
    14d8:	84 07       	cpc	r24, r20
    14da:	95 07       	cpc	r25, r21
    14dc:	20 f0       	brcs	.+8      	; 0x14e6 <__addsf3x+0x1c>
    14de:	79 f4       	brne	.+30     	; 0x14fe <__addsf3x+0x34>
    14e0:	a6 f5       	brtc	.+104    	; 0x154a <__addsf3x+0x80>
    14e2:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_zero>
    14e6:	0e f4       	brtc	.+2      	; 0x14ea <__addsf3x+0x20>
    14e8:	e0 95       	com	r30
    14ea:	0b 2e       	mov	r0, r27
    14ec:	ba 2f       	mov	r27, r26
    14ee:	a0 2d       	mov	r26, r0
    14f0:	0b 01       	movw	r0, r22
    14f2:	b9 01       	movw	r22, r18
    14f4:	90 01       	movw	r18, r0
    14f6:	0c 01       	movw	r0, r24
    14f8:	ca 01       	movw	r24, r20
    14fa:	a0 01       	movw	r20, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	ff 27       	eor	r31, r31
    1500:	59 1b       	sub	r21, r25
    1502:	99 f0       	breq	.+38     	; 0x152a <__addsf3x+0x60>
    1504:	59 3f       	cpi	r21, 0xF9	; 249
    1506:	50 f4       	brcc	.+20     	; 0x151c <__addsf3x+0x52>
    1508:	50 3e       	cpi	r21, 0xE0	; 224
    150a:	68 f1       	brcs	.+90     	; 0x1566 <__addsf3x+0x9c>
    150c:	1a 16       	cp	r1, r26
    150e:	f0 40       	sbci	r31, 0x00	; 0
    1510:	a2 2f       	mov	r26, r18
    1512:	23 2f       	mov	r18, r19
    1514:	34 2f       	mov	r19, r20
    1516:	44 27       	eor	r20, r20
    1518:	58 5f       	subi	r21, 0xF8	; 248
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <__addsf3x+0x38>
    151c:	46 95       	lsr	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	a7 95       	ror	r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	53 95       	inc	r21
    1528:	c9 f7       	brne	.-14     	; 0x151c <__addsf3x+0x52>
    152a:	7e f4       	brtc	.+30     	; 0x154a <__addsf3x+0x80>
    152c:	1f 16       	cp	r1, r31
    152e:	ba 0b       	sbc	r27, r26
    1530:	62 0b       	sbc	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba f0       	brmi	.+46     	; 0x1566 <__addsf3x+0x9c>
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	a1 f0       	breq	.+40     	; 0x1564 <__addsf3x+0x9a>
    153c:	ff 0f       	add	r31, r31
    153e:	bb 1f       	adc	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	c2 f7       	brpl	.-16     	; 0x1538 <__addsf3x+0x6e>
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <__addsf3x+0x9c>
    154a:	ba 0f       	add	r27, r26
    154c:	62 1f       	adc	r22, r18
    154e:	73 1f       	adc	r23, r19
    1550:	84 1f       	adc	r24, r20
    1552:	48 f4       	brcc	.+18     	; 0x1566 <__addsf3x+0x9c>
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	9e 3f       	cpi	r25, 0xFE	; 254
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__addsf3x+0x9a>
    1562:	b0 cf       	rjmp	.-160    	; 0x14c4 <__addsf3+0x28>
    1564:	93 95       	inc	r25
    1566:	88 0f       	add	r24, r24
    1568:	08 f0       	brcs	.+2      	; 0x156c <__addsf3x+0xa2>
    156a:	99 27       	eor	r25, r25
    156c:	ee 0f       	add	r30, r30
    156e:	97 95       	ror	r25
    1570:	87 95       	ror	r24
    1572:	08 95       	ret

00001574 <__cmpsf2>:
    1574:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_cmp>
    1578:	08 f4       	brcc	.+2      	; 0x157c <__cmpsf2+0x8>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	08 95       	ret

0000157e <__divsf3>:
    157e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__divsf3x>
    1582:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_round>
    1586:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscB>
    158a:	58 f0       	brcs	.+22     	; 0x15a2 <__divsf3+0x24>
    158c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscA>
    1590:	40 f0       	brcs	.+16     	; 0x15a2 <__divsf3+0x24>
    1592:	29 f4       	brne	.+10     	; 0x159e <__divsf3+0x20>
    1594:	5f 3f       	cpi	r21, 0xFF	; 255
    1596:	29 f0       	breq	.+10     	; 0x15a2 <__divsf3+0x24>
    1598:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    159c:	51 11       	cpse	r21, r1
    159e:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    15a2:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>

000015a6 <__divsf3x>:
    15a6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_split3>
    15aa:	68 f3       	brcs	.-38     	; 0x1586 <__divsf3+0x8>

000015ac <__divsf3_pse>:
    15ac:	99 23       	and	r25, r25
    15ae:	b1 f3       	breq	.-20     	; 0x159c <__divsf3+0x1e>
    15b0:	55 23       	and	r21, r21
    15b2:	91 f3       	breq	.-28     	; 0x1598 <__divsf3+0x1a>
    15b4:	95 1b       	sub	r25, r21
    15b6:	55 0b       	sbc	r21, r21
    15b8:	bb 27       	eor	r27, r27
    15ba:	aa 27       	eor	r26, r26
    15bc:	62 17       	cp	r22, r18
    15be:	73 07       	cpc	r23, r19
    15c0:	84 07       	cpc	r24, r20
    15c2:	38 f0       	brcs	.+14     	; 0x15d2 <__divsf3_pse+0x26>
    15c4:	9f 5f       	subi	r25, 0xFF	; 255
    15c6:	5f 4f       	sbci	r21, 0xFF	; 255
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	44 1f       	adc	r20, r20
    15ce:	aa 1f       	adc	r26, r26
    15d0:	a9 f3       	breq	.-22     	; 0x15bc <__divsf3_pse+0x10>
    15d2:	35 d0       	rcall	.+106    	; 0x163e <__divsf3_pse+0x92>
    15d4:	0e 2e       	mov	r0, r30
    15d6:	3a f0       	brmi	.+14     	; 0x15e6 <__divsf3_pse+0x3a>
    15d8:	e0 e8       	ldi	r30, 0x80	; 128
    15da:	32 d0       	rcall	.+100    	; 0x1640 <__divsf3_pse+0x94>
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	50 40       	sbci	r21, 0x00	; 0
    15e0:	e6 95       	lsr	r30
    15e2:	00 1c       	adc	r0, r0
    15e4:	ca f7       	brpl	.-14     	; 0x15d8 <__divsf3_pse+0x2c>
    15e6:	2b d0       	rcall	.+86     	; 0x163e <__divsf3_pse+0x92>
    15e8:	fe 2f       	mov	r31, r30
    15ea:	29 d0       	rcall	.+82     	; 0x163e <__divsf3_pse+0x92>
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	88 1f       	adc	r24, r24
    15f2:	bb 1f       	adc	r27, r27
    15f4:	26 17       	cp	r18, r22
    15f6:	37 07       	cpc	r19, r23
    15f8:	48 07       	cpc	r20, r24
    15fa:	ab 07       	cpc	r26, r27
    15fc:	b0 e8       	ldi	r27, 0x80	; 128
    15fe:	09 f0       	breq	.+2      	; 0x1602 <__divsf3_pse+0x56>
    1600:	bb 0b       	sbc	r27, r27
    1602:	80 2d       	mov	r24, r0
    1604:	bf 01       	movw	r22, r30
    1606:	ff 27       	eor	r31, r31
    1608:	93 58       	subi	r25, 0x83	; 131
    160a:	5f 4f       	sbci	r21, 0xFF	; 255
    160c:	3a f0       	brmi	.+14     	; 0x161c <__divsf3_pse+0x70>
    160e:	9e 3f       	cpi	r25, 0xFE	; 254
    1610:	51 05       	cpc	r21, r1
    1612:	78 f0       	brcs	.+30     	; 0x1632 <__divsf3_pse+0x86>
    1614:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    1618:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	e4 f3       	brlt	.-8      	; 0x1618 <__divsf3_pse+0x6c>
    1620:	98 3e       	cpi	r25, 0xE8	; 232
    1622:	d4 f3       	brlt	.-12     	; 0x1618 <__divsf3_pse+0x6c>
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b7 95       	ror	r27
    162c:	f7 95       	ror	r31
    162e:	9f 5f       	subi	r25, 0xFF	; 255
    1630:	c9 f7       	brne	.-14     	; 0x1624 <__divsf3_pse+0x78>
    1632:	88 0f       	add	r24, r24
    1634:	91 1d       	adc	r25, r1
    1636:	96 95       	lsr	r25
    1638:	87 95       	ror	r24
    163a:	97 f9       	bld	r25, 7
    163c:	08 95       	ret
    163e:	e1 e0       	ldi	r30, 0x01	; 1
    1640:	66 0f       	add	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	bb 1f       	adc	r27, r27
    1648:	62 17       	cp	r22, r18
    164a:	73 07       	cpc	r23, r19
    164c:	84 07       	cpc	r24, r20
    164e:	ba 07       	cpc	r27, r26
    1650:	20 f0       	brcs	.+8      	; 0x165a <__divsf3_pse+0xae>
    1652:	62 1b       	sub	r22, r18
    1654:	73 0b       	sbc	r23, r19
    1656:	84 0b       	sbc	r24, r20
    1658:	ba 0b       	sbc	r27, r26
    165a:	ee 1f       	adc	r30, r30
    165c:	88 f7       	brcc	.-30     	; 0x1640 <__divsf3_pse+0x94>
    165e:	e0 95       	com	r30
    1660:	08 95       	ret

00001662 <__fixsfsi>:
    1662:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fixunssfsi>
    1666:	68 94       	set
    1668:	b1 11       	cpse	r27, r1
    166a:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    166e:	08 95       	ret

00001670 <__fixunssfsi>:
    1670:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_splitA>
    1674:	88 f0       	brcs	.+34     	; 0x1698 <__fixunssfsi+0x28>
    1676:	9f 57       	subi	r25, 0x7F	; 127
    1678:	98 f0       	brcs	.+38     	; 0x16a0 <__fixunssfsi+0x30>
    167a:	b9 2f       	mov	r27, r25
    167c:	99 27       	eor	r25, r25
    167e:	b7 51       	subi	r27, 0x17	; 23
    1680:	b0 f0       	brcs	.+44     	; 0x16ae <__fixunssfsi+0x3e>
    1682:	e1 f0       	breq	.+56     	; 0x16bc <__fixunssfsi+0x4c>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	1a f0       	brmi	.+6      	; 0x1694 <__fixunssfsi+0x24>
    168e:	ba 95       	dec	r27
    1690:	c9 f7       	brne	.-14     	; 0x1684 <__fixunssfsi+0x14>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <__fixunssfsi+0x4c>
    1694:	b1 30       	cpi	r27, 0x01	; 1
    1696:	91 f0       	breq	.+36     	; 0x16bc <__fixunssfsi+0x4c>
    1698:	0e 94 12 0c 	call	0x1824	; 0x1824 <__fp_zero>
    169c:	b1 e0       	ldi	r27, 0x01	; 1
    169e:	08 95       	ret
    16a0:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__fp_zero>
    16a4:	67 2f       	mov	r22, r23
    16a6:	78 2f       	mov	r23, r24
    16a8:	88 27       	eor	r24, r24
    16aa:	b8 5f       	subi	r27, 0xF8	; 248
    16ac:	39 f0       	breq	.+14     	; 0x16bc <__fixunssfsi+0x4c>
    16ae:	b9 3f       	cpi	r27, 0xF9	; 249
    16b0:	cc f3       	brlt	.-14     	; 0x16a4 <__fixunssfsi+0x34>
    16b2:	86 95       	lsr	r24
    16b4:	77 95       	ror	r23
    16b6:	67 95       	ror	r22
    16b8:	b3 95       	inc	r27
    16ba:	d9 f7       	brne	.-10     	; 0x16b2 <__fixunssfsi+0x42>
    16bc:	3e f4       	brtc	.+14     	; 0x16cc <__fixunssfsi+0x5c>
    16be:	90 95       	com	r25
    16c0:	80 95       	com	r24
    16c2:	70 95       	com	r23
    16c4:	61 95       	neg	r22
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	08 95       	ret

000016ce <__floatunsisf>:
    16ce:	e8 94       	clt
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <__floatsisf+0x12>

000016d2 <__floatsisf>:
    16d2:	97 fb       	bst	r25, 7
    16d4:	3e f4       	brtc	.+14     	; 0x16e4 <__floatsisf+0x12>
    16d6:	90 95       	com	r25
    16d8:	80 95       	com	r24
    16da:	70 95       	com	r23
    16dc:	61 95       	neg	r22
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	99 23       	and	r25, r25
    16e6:	a9 f0       	breq	.+42     	; 0x1712 <__floatsisf+0x40>
    16e8:	f9 2f       	mov	r31, r25
    16ea:	96 e9       	ldi	r25, 0x96	; 150
    16ec:	bb 27       	eor	r27, r27
    16ee:	93 95       	inc	r25
    16f0:	f6 95       	lsr	r31
    16f2:	87 95       	ror	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f1 11       	cpse	r31, r1
    16fc:	f8 cf       	rjmp	.-16     	; 0x16ee <__floatsisf+0x1c>
    16fe:	fa f4       	brpl	.+62     	; 0x173e <__floatsisf+0x6c>
    1700:	bb 0f       	add	r27, r27
    1702:	11 f4       	brne	.+4      	; 0x1708 <__floatsisf+0x36>
    1704:	60 ff       	sbrs	r22, 0
    1706:	1b c0       	rjmp	.+54     	; 0x173e <__floatsisf+0x6c>
    1708:	6f 5f       	subi	r22, 0xFF	; 255
    170a:	7f 4f       	sbci	r23, 0xFF	; 255
    170c:	8f 4f       	sbci	r24, 0xFF	; 255
    170e:	9f 4f       	sbci	r25, 0xFF	; 255
    1710:	16 c0       	rjmp	.+44     	; 0x173e <__floatsisf+0x6c>
    1712:	88 23       	and	r24, r24
    1714:	11 f0       	breq	.+4      	; 0x171a <__floatsisf+0x48>
    1716:	96 e9       	ldi	r25, 0x96	; 150
    1718:	11 c0       	rjmp	.+34     	; 0x173c <__floatsisf+0x6a>
    171a:	77 23       	and	r23, r23
    171c:	21 f0       	breq	.+8      	; 0x1726 <__floatsisf+0x54>
    171e:	9e e8       	ldi	r25, 0x8E	; 142
    1720:	87 2f       	mov	r24, r23
    1722:	76 2f       	mov	r23, r22
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <__floatsisf+0x5e>
    1726:	66 23       	and	r22, r22
    1728:	71 f0       	breq	.+28     	; 0x1746 <__floatsisf+0x74>
    172a:	96 e8       	ldi	r25, 0x86	; 134
    172c:	86 2f       	mov	r24, r22
    172e:	70 e0       	ldi	r23, 0x00	; 0
    1730:	60 e0       	ldi	r22, 0x00	; 0
    1732:	2a f0       	brmi	.+10     	; 0x173e <__floatsisf+0x6c>
    1734:	9a 95       	dec	r25
    1736:	66 0f       	add	r22, r22
    1738:	77 1f       	adc	r23, r23
    173a:	88 1f       	adc	r24, r24
    173c:	da f7       	brpl	.-10     	; 0x1734 <__floatsisf+0x62>
    173e:	88 0f       	add	r24, r24
    1740:	96 95       	lsr	r25
    1742:	87 95       	ror	r24
    1744:	97 f9       	bld	r25, 7
    1746:	08 95       	ret

00001748 <__fp_cmp>:
    1748:	99 0f       	add	r25, r25
    174a:	00 08       	sbc	r0, r0
    174c:	55 0f       	add	r21, r21
    174e:	aa 0b       	sbc	r26, r26
    1750:	e0 e8       	ldi	r30, 0x80	; 128
    1752:	fe ef       	ldi	r31, 0xFE	; 254
    1754:	16 16       	cp	r1, r22
    1756:	17 06       	cpc	r1, r23
    1758:	e8 07       	cpc	r30, r24
    175a:	f9 07       	cpc	r31, r25
    175c:	c0 f0       	brcs	.+48     	; 0x178e <__fp_cmp+0x46>
    175e:	12 16       	cp	r1, r18
    1760:	13 06       	cpc	r1, r19
    1762:	e4 07       	cpc	r30, r20
    1764:	f5 07       	cpc	r31, r21
    1766:	98 f0       	brcs	.+38     	; 0x178e <__fp_cmp+0x46>
    1768:	62 1b       	sub	r22, r18
    176a:	73 0b       	sbc	r23, r19
    176c:	84 0b       	sbc	r24, r20
    176e:	95 0b       	sbc	r25, r21
    1770:	39 f4       	brne	.+14     	; 0x1780 <__fp_cmp+0x38>
    1772:	0a 26       	eor	r0, r26
    1774:	61 f0       	breq	.+24     	; 0x178e <__fp_cmp+0x46>
    1776:	23 2b       	or	r18, r19
    1778:	24 2b       	or	r18, r20
    177a:	25 2b       	or	r18, r21
    177c:	21 f4       	brne	.+8      	; 0x1786 <__fp_cmp+0x3e>
    177e:	08 95       	ret
    1780:	0a 26       	eor	r0, r26
    1782:	09 f4       	brne	.+2      	; 0x1786 <__fp_cmp+0x3e>
    1784:	a1 40       	sbci	r26, 0x01	; 1
    1786:	a6 95       	lsr	r26
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	81 1d       	adc	r24, r1
    178c:	81 1d       	adc	r24, r1
    178e:	08 95       	ret

00001790 <__fp_inf>:
    1790:	97 f9       	bld	r25, 7
    1792:	9f 67       	ori	r25, 0x7F	; 127
    1794:	80 e8       	ldi	r24, 0x80	; 128
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	08 95       	ret

0000179c <__fp_nan>:
    179c:	9f ef       	ldi	r25, 0xFF	; 255
    179e:	80 ec       	ldi	r24, 0xC0	; 192
    17a0:	08 95       	ret

000017a2 <__fp_pscA>:
    17a2:	00 24       	eor	r0, r0
    17a4:	0a 94       	dec	r0
    17a6:	16 16       	cp	r1, r22
    17a8:	17 06       	cpc	r1, r23
    17aa:	18 06       	cpc	r1, r24
    17ac:	09 06       	cpc	r0, r25
    17ae:	08 95       	ret

000017b0 <__fp_pscB>:
    17b0:	00 24       	eor	r0, r0
    17b2:	0a 94       	dec	r0
    17b4:	12 16       	cp	r1, r18
    17b6:	13 06       	cpc	r1, r19
    17b8:	14 06       	cpc	r1, r20
    17ba:	05 06       	cpc	r0, r21
    17bc:	08 95       	ret

000017be <__fp_round>:
    17be:	09 2e       	mov	r0, r25
    17c0:	03 94       	inc	r0
    17c2:	00 0c       	add	r0, r0
    17c4:	11 f4       	brne	.+4      	; 0x17ca <__fp_round+0xc>
    17c6:	88 23       	and	r24, r24
    17c8:	52 f0       	brmi	.+20     	; 0x17de <__fp_round+0x20>
    17ca:	bb 0f       	add	r27, r27
    17cc:	40 f4       	brcc	.+16     	; 0x17de <__fp_round+0x20>
    17ce:	bf 2b       	or	r27, r31
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <__fp_round+0x18>
    17d2:	60 ff       	sbrs	r22, 0
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__fp_round+0x20>
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	08 95       	ret

000017e0 <__fp_split3>:
    17e0:	57 fd       	sbrc	r21, 7
    17e2:	90 58       	subi	r25, 0x80	; 128
    17e4:	44 0f       	add	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	59 f0       	breq	.+22     	; 0x1800 <__fp_splitA+0x10>
    17ea:	5f 3f       	cpi	r21, 0xFF	; 255
    17ec:	71 f0       	breq	.+28     	; 0x180a <__fp_splitA+0x1a>
    17ee:	47 95       	ror	r20

000017f0 <__fp_splitA>:
    17f0:	88 0f       	add	r24, r24
    17f2:	97 fb       	bst	r25, 7
    17f4:	99 1f       	adc	r25, r25
    17f6:	61 f0       	breq	.+24     	; 0x1810 <__fp_splitA+0x20>
    17f8:	9f 3f       	cpi	r25, 0xFF	; 255
    17fa:	79 f0       	breq	.+30     	; 0x181a <__fp_splitA+0x2a>
    17fc:	87 95       	ror	r24
    17fe:	08 95       	ret
    1800:	12 16       	cp	r1, r18
    1802:	13 06       	cpc	r1, r19
    1804:	14 06       	cpc	r1, r20
    1806:	55 1f       	adc	r21, r21
    1808:	f2 cf       	rjmp	.-28     	; 0x17ee <__fp_split3+0xe>
    180a:	46 95       	lsr	r20
    180c:	f1 df       	rcall	.-30     	; 0x17f0 <__fp_splitA>
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <__fp_splitA+0x30>
    1810:	16 16       	cp	r1, r22
    1812:	17 06       	cpc	r1, r23
    1814:	18 06       	cpc	r1, r24
    1816:	99 1f       	adc	r25, r25
    1818:	f1 cf       	rjmp	.-30     	; 0x17fc <__fp_splitA+0xc>
    181a:	86 95       	lsr	r24
    181c:	71 05       	cpc	r23, r1
    181e:	61 05       	cpc	r22, r1
    1820:	08 94       	sec
    1822:	08 95       	ret

00001824 <__fp_zero>:
    1824:	e8 94       	clt

00001826 <__fp_szero>:
    1826:	bb 27       	eor	r27, r27
    1828:	66 27       	eor	r22, r22
    182a:	77 27       	eor	r23, r23
    182c:	cb 01       	movw	r24, r22
    182e:	97 f9       	bld	r25, 7
    1830:	08 95       	ret

00001832 <__gesf2>:
    1832:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_cmp>
    1836:	08 f4       	brcc	.+2      	; 0x183a <__gesf2+0x8>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	08 95       	ret

0000183c <__mulsf3>:
    183c:	0e 94 31 0c 	call	0x1862	; 0x1862 <__mulsf3x>
    1840:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__fp_round>
    1844:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__fp_pscA>
    1848:	38 f0       	brcs	.+14     	; 0x1858 <__mulsf3+0x1c>
    184a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__fp_pscB>
    184e:	20 f0       	brcs	.+8      	; 0x1858 <__mulsf3+0x1c>
    1850:	95 23       	and	r25, r21
    1852:	11 f0       	breq	.+4      	; 0x1858 <__mulsf3+0x1c>
    1854:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    1858:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__fp_nan>
    185c:	11 24       	eor	r1, r1
    185e:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>

00001862 <__mulsf3x>:
    1862:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__fp_split3>
    1866:	70 f3       	brcs	.-36     	; 0x1844 <__mulsf3+0x8>

00001868 <__mulsf3_pse>:
    1868:	95 9f       	mul	r25, r21
    186a:	c1 f3       	breq	.-16     	; 0x185c <__mulsf3+0x20>
    186c:	95 0f       	add	r25, r21
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	55 1f       	adc	r21, r21
    1872:	62 9f       	mul	r22, r18
    1874:	f0 01       	movw	r30, r0
    1876:	72 9f       	mul	r23, r18
    1878:	bb 27       	eor	r27, r27
    187a:	f0 0d       	add	r31, r0
    187c:	b1 1d       	adc	r27, r1
    187e:	63 9f       	mul	r22, r19
    1880:	aa 27       	eor	r26, r26
    1882:	f0 0d       	add	r31, r0
    1884:	b1 1d       	adc	r27, r1
    1886:	aa 1f       	adc	r26, r26
    1888:	64 9f       	mul	r22, r20
    188a:	66 27       	eor	r22, r22
    188c:	b0 0d       	add	r27, r0
    188e:	a1 1d       	adc	r26, r1
    1890:	66 1f       	adc	r22, r22
    1892:	82 9f       	mul	r24, r18
    1894:	22 27       	eor	r18, r18
    1896:	b0 0d       	add	r27, r0
    1898:	a1 1d       	adc	r26, r1
    189a:	62 1f       	adc	r22, r18
    189c:	73 9f       	mul	r23, r19
    189e:	b0 0d       	add	r27, r0
    18a0:	a1 1d       	adc	r26, r1
    18a2:	62 1f       	adc	r22, r18
    18a4:	83 9f       	mul	r24, r19
    18a6:	a0 0d       	add	r26, r0
    18a8:	61 1d       	adc	r22, r1
    18aa:	22 1f       	adc	r18, r18
    18ac:	74 9f       	mul	r23, r20
    18ae:	33 27       	eor	r19, r19
    18b0:	a0 0d       	add	r26, r0
    18b2:	61 1d       	adc	r22, r1
    18b4:	23 1f       	adc	r18, r19
    18b6:	84 9f       	mul	r24, r20
    18b8:	60 0d       	add	r22, r0
    18ba:	21 1d       	adc	r18, r1
    18bc:	82 2f       	mov	r24, r18
    18be:	76 2f       	mov	r23, r22
    18c0:	6a 2f       	mov	r22, r26
    18c2:	11 24       	eor	r1, r1
    18c4:	9f 57       	subi	r25, 0x7F	; 127
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	9a f0       	brmi	.+38     	; 0x18f0 <__mulsf3_pse+0x88>
    18ca:	f1 f0       	breq	.+60     	; 0x1908 <__mulsf3_pse+0xa0>
    18cc:	88 23       	and	r24, r24
    18ce:	4a f0       	brmi	.+18     	; 0x18e2 <__mulsf3_pse+0x7a>
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	bb 1f       	adc	r27, r27
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	50 40       	sbci	r21, 0x00	; 0
    18e0:	a9 f7       	brne	.-22     	; 0x18cc <__mulsf3_pse+0x64>
    18e2:	9e 3f       	cpi	r25, 0xFE	; 254
    18e4:	51 05       	cpc	r21, r1
    18e6:	80 f0       	brcs	.+32     	; 0x1908 <__mulsf3_pse+0xa0>
    18e8:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_inf>
    18ec:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__fp_szero>
    18f0:	5f 3f       	cpi	r21, 0xFF	; 255
    18f2:	e4 f3       	brlt	.-8      	; 0x18ec <__mulsf3_pse+0x84>
    18f4:	98 3e       	cpi	r25, 0xE8	; 232
    18f6:	d4 f3       	brlt	.-12     	; 0x18ec <__mulsf3_pse+0x84>
    18f8:	86 95       	lsr	r24
    18fa:	77 95       	ror	r23
    18fc:	67 95       	ror	r22
    18fe:	b7 95       	ror	r27
    1900:	f7 95       	ror	r31
    1902:	e7 95       	ror	r30
    1904:	9f 5f       	subi	r25, 0xFF	; 255
    1906:	c1 f7       	brne	.-16     	; 0x18f8 <__mulsf3_pse+0x90>
    1908:	fe 2b       	or	r31, r30
    190a:	88 0f       	add	r24, r24
    190c:	91 1d       	adc	r25, r1
    190e:	96 95       	lsr	r25
    1910:	87 95       	ror	r24
    1912:	97 f9       	bld	r25, 7
    1914:	08 95       	ret

00001916 <_ZN14HardwareSerial9availableEv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
<<<<<<< HEAD
     fdc:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     fde:	91 8d       	ldd	r25, Z+25	; 0x19
     fe0:	22 8d       	ldd	r18, Z+26	; 0x1a
     fe2:	89 2f       	mov	r24, r25
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 5c       	subi	r24, 0xC0	; 192
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	82 1b       	sub	r24, r18
     fec:	91 09       	sbc	r25, r1
}
     fee:	8f 73       	andi	r24, 0x3F	; 63
     ff0:	99 27       	eor	r25, r25
     ff2:	08 95       	ret

00000ff4 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     ff4:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     ff6:	91 8d       	ldd	r25, Z+25	; 0x19
     ff8:	82 8d       	ldd	r24, Z+26	; 0x1a
     ffa:	98 17       	cp	r25, r24
     ffc:	31 f0       	breq	.+12     	; 0x100a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     ffe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1000:	e8 0f       	add	r30, r24
    1002:	f1 1d       	adc	r31, r1
    1004:	85 8d       	ldd	r24, Z+29	; 0x1d
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	08 95       	ret
=======
    1916:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1918:	91 8d       	ldd	r25, Z+25	; 0x19
    191a:	22 8d       	ldd	r18, Z+26	; 0x1a
    191c:	89 2f       	mov	r24, r25
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	80 5c       	subi	r24, 0xC0	; 192
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	82 1b       	sub	r24, r18
    1926:	91 09       	sbc	r25, r1
}
    1928:	8f 73       	andi	r24, 0x3F	; 63
    192a:	99 27       	eor	r25, r25
    192c:	08 95       	ret

0000192e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    192e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1930:	91 8d       	ldd	r25, Z+25	; 0x19
    1932:	82 8d       	ldd	r24, Z+26	; 0x1a
    1934:	98 17       	cp	r25, r24
    1936:	31 f0       	breq	.+12     	; 0x1944 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1938:	82 8d       	ldd	r24, Z+26	; 0x1a
    193a:	e8 0f       	add	r30, r24
    193c:	f1 1d       	adc	r31, r1
    193e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	08 95       	ret
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	9f ef       	ldi	r25, 0xFF	; 255
=======
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
<<<<<<< HEAD
    100e:	08 95       	ret

00001010 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1010:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1012:	91 8d       	ldd	r25, Z+25	; 0x19
    1014:	82 8d       	ldd	r24, Z+26	; 0x1a
    1016:	98 17       	cp	r25, r24
    1018:	61 f0       	breq	.+24     	; 0x1032 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    101a:	82 8d       	ldd	r24, Z+26	; 0x1a
    101c:	df 01       	movw	r26, r30
    101e:	a8 0f       	add	r26, r24
    1020:	b1 1d       	adc	r27, r1
    1022:	5d 96       	adiw	r26, 0x1d	; 29
    1024:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1026:	92 8d       	ldd	r25, Z+26	; 0x1a
    1028:	9f 5f       	subi	r25, 0xFF	; 255
    102a:	9f 73       	andi	r25, 0x3F	; 63
    102c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	08 95       	ret
=======
    1948:	08 95       	ret

0000194a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    194a:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    194c:	91 8d       	ldd	r25, Z+25	; 0x19
    194e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1950:	98 17       	cp	r25, r24
    1952:	61 f0       	breq	.+24     	; 0x196c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1954:	82 8d       	ldd	r24, Z+26	; 0x1a
    1956:	df 01       	movw	r26, r30
    1958:	a8 0f       	add	r26, r24
    195a:	b1 1d       	adc	r27, r1
    195c:	5d 96       	adiw	r26, 0x1d	; 29
    195e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1960:	92 8d       	ldd	r25, Z+26	; 0x1a
    1962:	9f 5f       	subi	r25, 0xFF	; 255
    1964:	9f 73       	andi	r25, 0x3F	; 63
    1966:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	08 95       	ret
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
<<<<<<< HEAD
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	9f ef       	ldi	r25, 0xFF	; 255
=======
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
<<<<<<< HEAD
    1036:	08 95       	ret

00001038 <_ZN14HardwareSerial17availableForWriteEv>:
=======
    1970:	08 95       	ret

00001972 <_ZN14HardwareSerial17availableForWriteEv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
<<<<<<< HEAD
    1038:	fc 01       	movw	r30, r24
    103a:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    103c:	44 8d       	ldd	r20, Z+28	; 0x1c
    103e:	25 2f       	mov	r18, r21
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	84 2f       	mov	r24, r20
    1044:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1046:	82 1b       	sub	r24, r18
    1048:	93 0b       	sbc	r25, r19
    104a:	54 17       	cp	r21, r20
    104c:	10 f0       	brcs	.+4      	; 0x1052 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    104e:	cf 96       	adiw	r24, 0x3f	; 63
    1050:	08 95       	ret
  return tail - head - 1;
    1052:	01 97       	sbiw	r24, 0x01	; 1
}
    1054:	08 95       	ret

00001056 <_Z14serialEventRunv>:
=======
    1972:	fc 01       	movw	r30, r24
    1974:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    1976:	44 8d       	ldd	r20, Z+28	; 0x1c
    1978:	25 2f       	mov	r18, r21
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	84 2f       	mov	r24, r20
    197e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1980:	82 1b       	sub	r24, r18
    1982:	93 0b       	sbc	r25, r19
    1984:	54 17       	cp	r21, r20
    1986:	10 f0       	brcs	.+4      	; 0x198c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    1988:	cf 96       	adiw	r24, 0x3f	; 63
    198a:	08 95       	ret
  return tail - head - 1;
    198c:	01 97       	sbiw	r24, 0x01	; 1
}
    198e:	08 95       	ret

00001990 <_Z14serialEventRunv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
<<<<<<< HEAD
    1056:	87 e8       	ldi	r24, 0x87	; 135
    1058:	99 e0       	ldi	r25, 0x09	; 9
    105a:	89 2b       	or	r24, r25
    105c:	49 f0       	breq	.+18     	; 0x1070 <_Z14serialEventRunv+0x1a>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	89 2b       	or	r24, r25
    1064:	29 f0       	breq	.+10     	; 0x1070 <_Z14serialEventRunv+0x1a>
    1066:	0e 94 87 09 	call	0x130e	; 0x130e <_Z17Serial0_availablev>
    106a:	81 11       	cpse	r24, r1
    106c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1070:	08 95       	ret

00001072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
=======
    1990:	84 e2       	ldi	r24, 0x24	; 36
    1992:	9e e0       	ldi	r25, 0x0E	; 14
    1994:	89 2b       	or	r24, r25
    1996:	49 f0       	breq	.+18     	; 0x19aa <_Z14serialEventRunv+0x1a>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	89 2b       	or	r24, r25
    199e:	29 f0       	breq	.+10     	; 0x19aa <_Z14serialEventRunv+0x1a>
    19a0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_Z17Serial0_availablev>
    19a4:	81 11       	cpse	r24, r1
    19a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    19aa:	08 95       	ret

000019ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
<<<<<<< HEAD
    1072:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1074:	84 8d       	ldd	r24, Z+28	; 0x1c
    1076:	df 01       	movw	r26, r30
    1078:	a8 0f       	add	r26, r24
    107a:	b1 1d       	adc	r27, r1
    107c:	a3 5a       	subi	r26, 0xA3	; 163
    107e:	bf 4f       	sbci	r27, 0xFF	; 255
    1080:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1082:	84 8d       	ldd	r24, Z+28	; 0x1c
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	8f 73       	andi	r24, 0x3F	; 63
    108a:	99 27       	eor	r25, r25
    108c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    108e:	a6 89       	ldd	r26, Z+22	; 0x16
    1090:	b7 89       	ldd	r27, Z+23	; 0x17
    1092:	2c 93       	st	X, r18
=======
    19ac:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    19ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    19b0:	df 01       	movw	r26, r30
    19b2:	a8 0f       	add	r26, r24
    19b4:	b1 1d       	adc	r27, r1
    19b6:	a3 5a       	subi	r26, 0xA3	; 163
    19b8:	bf 4f       	sbci	r27, 0xFF	; 255
    19ba:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    19bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	01 96       	adiw	r24, 0x01	; 1
    19c2:	8f 73       	andi	r24, 0x3F	; 63
    19c4:	99 27       	eor	r25, r25
    19c6:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    19c8:	a6 89       	ldd	r26, Z+22	; 0x16
    19ca:	b7 89       	ldd	r27, Z+23	; 0x17
    19cc:	2c 93       	st	X, r18
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
<<<<<<< HEAD
    1094:	a0 89       	ldd	r26, Z+16	; 0x10
    1096:	b1 89       	ldd	r27, Z+17	; 0x11
    1098:	8c 91       	ld	r24, X
    109a:	83 70       	andi	r24, 0x03	; 3
    109c:	80 64       	ori	r24, 0x40	; 64
    109e:	8c 93       	st	X, r24
=======
    19ce:	a0 89       	ldd	r26, Z+16	; 0x10
    19d0:	b1 89       	ldd	r27, Z+17	; 0x11
    19d2:	8c 91       	ld	r24, X
    19d4:	83 70       	andi	r24, 0x03	; 3
    19d6:	80 64       	ori	r24, 0x40	; 64
    19d8:	8c 93       	st	X, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
<<<<<<< HEAD
    10a0:	93 8d       	ldd	r25, Z+27	; 0x1b
    10a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    10a4:	98 13       	cpse	r25, r24
    10a6:	06 c0       	rjmp	.+12     	; 0x10b4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    10a8:	02 88       	ldd	r0, Z+18	; 0x12
    10aa:	f3 89       	ldd	r31, Z+19	; 0x13
    10ac:	e0 2d       	mov	r30, r0
    10ae:	80 81       	ld	r24, Z
    10b0:	8f 7d       	andi	r24, 0xDF	; 223
    10b2:	80 83       	st	Z, r24
    10b4:	08 95       	ret

000010b6 <_ZN14HardwareSerial5writeEh>:
=======
    19da:	93 8d       	ldd	r25, Z+27	; 0x1b
    19dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    19de:	98 13       	cpse	r25, r24
    19e0:	06 c0       	rjmp	.+12     	; 0x19ee <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    19e2:	02 88       	ldd	r0, Z+18	; 0x12
    19e4:	f3 89       	ldd	r31, Z+19	; 0x13
    19e6:	e0 2d       	mov	r30, r0
    19e8:	80 81       	ld	r24, Z
    19ea:	8f 7d       	andi	r24, 0xDF	; 223
    19ec:	80 83       	st	Z, r24
    19ee:	08 95       	ret

000019f0 <_ZN14HardwareSerial5writeEh>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
<<<<<<< HEAD
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ec 01       	movw	r28, r24
  _written = true;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	88 8f       	std	Y+24, r24	; 0x18
=======
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ec 01       	movw	r28, r24
  _written = true;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	88 8f       	std	Y+24, r24	; 0x18
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
<<<<<<< HEAD
    10c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    10ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10cc:	98 13       	cpse	r25, r24
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <_ZN14HardwareSerial5writeEh+0x24>
    10d0:	e8 89       	ldd	r30, Y+16	; 0x10
    10d2:	f9 89       	ldd	r31, Y+17	; 0x11
    10d4:	80 81       	ld	r24, Z
    10d6:	85 fd       	sbrc	r24, 5
    10d8:	26 c0       	rjmp	.+76     	; 0x1126 <_ZN14HardwareSerial5writeEh+0x70>
    10da:	f6 2e       	mov	r15, r22
=======
    1a02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a06:	98 13       	cpse	r25, r24
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <_ZN14HardwareSerial5writeEh+0x24>
    1a0a:	e8 89       	ldd	r30, Y+16	; 0x10
    1a0c:	f9 89       	ldd	r31, Y+17	; 0x11
    1a0e:	80 81       	ld	r24, Z
    1a10:	85 fd       	sbrc	r24, 5
    1a12:	26 c0       	rjmp	.+76     	; 0x1a60 <_ZN14HardwareSerial5writeEh+0x70>
    1a14:	f6 2e       	mov	r15, r22
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
<<<<<<< HEAD
    10dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    10de:	10 e0       	ldi	r17, 0x00	; 0
    10e0:	0f 5f       	subi	r16, 0xFF	; 255
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	0f 73       	andi	r16, 0x3F	; 63
    10e6:	11 27       	eor	r17, r17
    10e8:	e0 2e       	mov	r14, r16
=======
    1a16:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	0f 5f       	subi	r16, 0xFF	; 255
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	0f 73       	andi	r16, 0x3F	; 63
    1a20:	11 27       	eor	r17, r17
    1a22:	e0 2e       	mov	r14, r16
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
<<<<<<< HEAD
    10ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10ec:	e8 12       	cpse	r14, r24
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	07 fc       	sbrc	r0, 7
    10f4:	fa cf       	rjmp	.-12     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
=======
    1a24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a26:	e8 12       	cpse	r14, r24
    1a28:	0c c0       	rjmp	.+24     	; 0x1a42 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	07 fc       	sbrc	r0, 7
    1a2e:	fa cf       	rjmp	.-12     	; 0x1a24 <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
    10f6:	e8 89       	ldd	r30, Y+16	; 0x10
    10f8:	f9 89       	ldd	r31, Y+17	; 0x11
    10fa:	80 81       	ld	r24, Z
    10fc:	85 ff       	sbrs	r24, 5
    10fe:	f5 cf       	rjmp	.-22     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1100:	ce 01       	movw	r24, r28
    1102:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1106:	f1 cf       	rjmp	.-30     	; 0x10ea <_ZN14HardwareSerial5writeEh+0x34>
=======
    1a30:	e8 89       	ldd	r30, Y+16	; 0x10
    1a32:	f9 89       	ldd	r31, Y+17	; 0x11
    1a34:	80 81       	ld	r24, Z
    1a36:	85 ff       	sbrs	r24, 5
    1a38:	f5 cf       	rjmp	.-22     	; 0x1a24 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1a40:	f1 cf       	rjmp	.-30     	; 0x1a24 <_ZN14HardwareSerial5writeEh+0x34>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
<<<<<<< HEAD
    1108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110a:	fe 01       	movw	r30, r28
    110c:	e8 0f       	add	r30, r24
    110e:	f1 1d       	adc	r31, r1
    1110:	e3 5a       	subi	r30, 0xA3	; 163
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	f0 82       	st	Z, r15
=======
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	fe 01       	movw	r30, r28
    1a46:	e8 0f       	add	r30, r24
    1a48:	f1 1d       	adc	r31, r1
    1a4a:	e3 5a       	subi	r30, 0xA3	; 163
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	f0 82       	st	Z, r15
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
<<<<<<< HEAD
    1116:	9f b7       	in	r25, 0x3f	; 63
=======
    1a50:	9f b7       	in	r25, 0x3f	; 63
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
<<<<<<< HEAD
    1118:	f8 94       	cli
    _tx_buffer_head = i;
    111a:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    111c:	ea 89       	ldd	r30, Y+18	; 0x12
    111e:	fb 89       	ldd	r31, Y+19	; 0x13
    1120:	80 81       	ld	r24, Z
    1122:	80 62       	ori	r24, 0x20	; 32
    1124:	0a c0       	rjmp	.+20     	; 0x113a <_ZN14HardwareSerial5writeEh+0x84>
=======
    1a52:	f8 94       	cli
    _tx_buffer_head = i;
    1a54:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1a56:	ea 89       	ldd	r30, Y+18	; 0x12
    1a58:	fb 89       	ldd	r31, Y+19	; 0x13
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 62       	ori	r24, 0x20	; 32
    1a5e:	0a c0       	rjmp	.+20     	; 0x1a74 <_ZN14HardwareSerial5writeEh+0x84>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
<<<<<<< HEAD
    1126:	9f b7       	in	r25, 0x3f	; 63
    1128:	f8 94       	cli
      *_udr = c;
    112a:	ee 89       	ldd	r30, Y+22	; 0x16
    112c:	ff 89       	ldd	r31, Y+23	; 0x17
    112e:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1130:	e8 89       	ldd	r30, Y+16	; 0x10
    1132:	f9 89       	ldd	r31, Y+17	; 0x11
    1134:	80 81       	ld	r24, Z
    1136:	83 70       	andi	r24, 0x03	; 3
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	80 83       	st	Z, r24
=======
    1a60:	9f b7       	in	r25, 0x3f	; 63
    1a62:	f8 94       	cli
      *_udr = c;
    1a64:	ee 89       	ldd	r30, Y+22	; 0x16
    1a66:	ff 89       	ldd	r31, Y+23	; 0x17
    1a68:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1a6a:	e8 89       	ldd	r30, Y+16	; 0x10
    1a6c:	f9 89       	ldd	r31, Y+17	; 0x11
    1a6e:	80 81       	ld	r24, Z
    1a70:	83 70       	andi	r24, 0x03	; 3
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
<<<<<<< HEAD
    113c:	9f bf       	out	0x3f, r25	; 63
=======
    1a76:	9f bf       	out	0x3f, r25	; 63
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
<<<<<<< HEAD
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	ff 90       	pop	r15
    114c:	ef 90       	pop	r14
    114e:	08 95       	ret

00001150 <_ZN14HardwareSerial5flushEv>:
=======
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	08 95       	ret

00001a8a <_ZN14HardwareSerial5flushEv>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
<<<<<<< HEAD
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
=======
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	ec 01       	movw	r28, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
<<<<<<< HEAD
    1156:	88 8d       	ldd	r24, Y+24	; 0x18
    1158:	88 23       	and	r24, r24
    115a:	c9 f0       	breq	.+50     	; 0x118e <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    115c:	ea 89       	ldd	r30, Y+18	; 0x12
    115e:	fb 89       	ldd	r31, Y+19	; 0x13
    1160:	80 81       	ld	r24, Z
    1162:	85 fd       	sbrc	r24, 5
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <_ZN14HardwareSerial5flushEv+0x20>
    1166:	a8 89       	ldd	r26, Y+16	; 0x10
    1168:	b9 89       	ldd	r27, Y+17	; 0x11
    116a:	8c 91       	ld	r24, X
    116c:	86 fd       	sbrc	r24, 6
    116e:	0f c0       	rjmp	.+30     	; 0x118e <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	07 fc       	sbrc	r0, 7
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
    1176:	80 81       	ld	r24, Z
    1178:	85 ff       	sbrs	r24, 5
    117a:	f2 cf       	rjmp	.-28     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
=======
    1a90:	88 8d       	ldd	r24, Y+24	; 0x18
    1a92:	88 23       	and	r24, r24
    1a94:	c9 f0       	breq	.+50     	; 0x1ac8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1a96:	ea 89       	ldd	r30, Y+18	; 0x12
    1a98:	fb 89       	ldd	r31, Y+19	; 0x13
    1a9a:	80 81       	ld	r24, Z
    1a9c:	85 fd       	sbrc	r24, 5
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <_ZN14HardwareSerial5flushEv+0x20>
    1aa0:	a8 89       	ldd	r26, Y+16	; 0x10
    1aa2:	b9 89       	ldd	r27, Y+17	; 0x11
    1aa4:	8c 91       	ld	r24, X
    1aa6:	86 fd       	sbrc	r24, 6
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	07 fc       	sbrc	r0, 7
    1aae:	f5 cf       	rjmp	.-22     	; 0x1a9a <_ZN14HardwareSerial5flushEv+0x10>
    1ab0:	80 81       	ld	r24, Z
    1ab2:	85 ff       	sbrs	r24, 5
    1ab4:	f2 cf       	rjmp	.-28     	; 0x1a9a <_ZN14HardwareSerial5flushEv+0x10>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
<<<<<<< HEAD
    117c:	a8 89       	ldd	r26, Y+16	; 0x10
    117e:	b9 89       	ldd	r27, Y+17	; 0x11
    1180:	8c 91       	ld	r24, X
    1182:	85 ff       	sbrs	r24, 5
    1184:	ed cf       	rjmp	.-38     	; 0x1160 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1186:	ce 01       	movw	r24, r28
    1188:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    118c:	e7 cf       	rjmp	.-50     	; 0x115c <_ZN14HardwareSerial5flushEv+0xc>
=======
    1ab6:	a8 89       	ldd	r26, Y+16	; 0x10
    1ab8:	b9 89       	ldd	r27, Y+17	; 0x11
    1aba:	8c 91       	ld	r24, X
    1abc:	85 ff       	sbrs	r24, 5
    1abe:	ed cf       	rjmp	.-38     	; 0x1a9a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1ac6:	e7 cf       	rjmp	.-50     	; 0x1a96 <_ZN14HardwareSerial5flushEv+0xc>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
<<<<<<< HEAD
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <_ZN14HardwareSerial5beginEmh>:
=======
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	08 95       	ret

00001ace <_ZN14HardwareSerial5beginEmh>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
<<<<<<< HEAD
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
    11a4:	6a 01       	movw	r12, r20
    11a6:	7b 01       	movw	r14, r22
    11a8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    11aa:	e8 89       	ldd	r30, Y+16	; 0x10
    11ac:	f9 89       	ldd	r31, Y+17	; 0x11
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	80 83       	st	Z, r24
=======
    1ace:	cf 92       	push	r12
    1ad0:	df 92       	push	r13
    1ad2:	ef 92       	push	r14
    1ad4:	ff 92       	push	r15
    1ad6:	1f 93       	push	r17
    1ad8:	cf 93       	push	r28
    1ada:	df 93       	push	r29
    1adc:	ec 01       	movw	r28, r24
    1ade:	6a 01       	movw	r12, r20
    1ae0:	7b 01       	movw	r14, r22
    1ae2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1ae4:	e8 89       	ldd	r30, Y+16	; 0x10
    1ae6:	f9 89       	ldd	r31, Y+17	; 0x11
    1ae8:	82 e0       	ldi	r24, 0x02	; 2
    1aea:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
    11b2:	41 15       	cp	r20, r1
    11b4:	51 4e       	sbci	r21, 0xE1	; 225
    11b6:	61 05       	cpc	r22, r1
    11b8:	71 05       	cpc	r23, r1
    11ba:	b1 f0       	breq	.+44     	; 0x11e8 <_ZN14HardwareSerial5beginEmh+0x54>
=======
    1aec:	41 15       	cp	r20, r1
    1aee:	51 4e       	sbci	r21, 0xE1	; 225
    1af0:	61 05       	cpc	r22, r1
    1af2:	71 05       	cpc	r23, r1
    1af4:	b1 f0       	breq	.+44     	; 0x1b22 <_ZN14HardwareSerial5beginEmh+0x54>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
<<<<<<< HEAD
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	79 e0       	ldi	r23, 0x09	; 9
    11c0:	8d e3       	ldi	r24, 0x3D	; 61
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a7 01       	movw	r20, r14
    11c6:	96 01       	movw	r18, r12
    11c8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    11cc:	da 01       	movw	r26, r20
    11ce:	c9 01       	movw	r24, r18
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	a1 09       	sbc	r26, r1
    11d4:	b1 09       	sbc	r27, r1
    11d6:	b6 95       	lsr	r27
    11d8:	a7 95       	ror	r26
    11da:	97 95       	ror	r25
    11dc:	87 95       	ror	r24
    11de:	9c 01       	movw	r18, r24
=======
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	79 e0       	ldi	r23, 0x09	; 9
    1afa:	8d e3       	ldi	r24, 0x3D	; 61
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	a7 01       	movw	r20, r14
    1b00:	96 01       	movw	r18, r12
    1b02:	0e 94 24 23 	call	0x4648	; 0x4648 <__udivmodsi4>
    1b06:	da 01       	movw	r26, r20
    1b08:	c9 01       	movw	r24, r18
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	a1 09       	sbc	r26, r1
    1b0e:	b1 09       	sbc	r27, r1
    1b10:	b6 95       	lsr	r27
    1b12:	a7 95       	ror	r26
    1b14:	97 95       	ror	r25
    1b16:	87 95       	ror	r24
    1b18:	9c 01       	movw	r18, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
<<<<<<< HEAD
    11e0:	21 15       	cp	r18, r1
    11e2:	80 e1       	ldi	r24, 0x10	; 16
    11e4:	38 07       	cpc	r19, r24
    11e6:	a8 f0       	brcs	.+42     	; 0x1212 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    11e8:	e8 89       	ldd	r30, Y+16	; 0x10
    11ea:	f9 89       	ldd	r31, Y+17	; 0x11
    11ec:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    11ee:	60 e8       	ldi	r22, 0x80	; 128
    11f0:	74 e8       	ldi	r23, 0x84	; 132
    11f2:	8e e1       	ldi	r24, 0x1E	; 30
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a7 01       	movw	r20, r14
    11f8:	96 01       	movw	r18, r12
    11fa:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    11fe:	da 01       	movw	r26, r20
    1200:	c9 01       	movw	r24, r18
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	b6 95       	lsr	r27
    120a:	a7 95       	ror	r26
    120c:	97 95       	ror	r25
    120e:	87 95       	ror	r24
    1210:	9c 01       	movw	r18, r24
=======
    1b1a:	21 15       	cp	r18, r1
    1b1c:	80 e1       	ldi	r24, 0x10	; 16
    1b1e:	38 07       	cpc	r19, r24
    1b20:	a8 f0       	brcs	.+42     	; 0x1b4c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b22:	e8 89       	ldd	r30, Y+16	; 0x10
    1b24:	f9 89       	ldd	r31, Y+17	; 0x11
    1b26:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b28:	60 e8       	ldi	r22, 0x80	; 128
    1b2a:	74 e8       	ldi	r23, 0x84	; 132
    1b2c:	8e e1       	ldi	r24, 0x1E	; 30
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a7 01       	movw	r20, r14
    1b32:	96 01       	movw	r18, r12
    1b34:	0e 94 24 23 	call	0x4648	; 0x4648 <__udivmodsi4>
    1b38:	da 01       	movw	r26, r20
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	a1 09       	sbc	r26, r1
    1b40:	b1 09       	sbc	r27, r1
    1b42:	b6 95       	lsr	r27
    1b44:	a7 95       	ror	r26
    1b46:	97 95       	ror	r25
    1b48:	87 95       	ror	r24
    1b4a:	9c 01       	movw	r18, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
<<<<<<< HEAD
    1212:	ec 85       	ldd	r30, Y+12	; 0x0c
    1214:	fd 85       	ldd	r31, Y+13	; 0x0d
    1216:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1218:	ee 85       	ldd	r30, Y+14	; 0x0e
    121a:	ff 85       	ldd	r31, Y+15	; 0x0f
    121c:	20 83       	st	Z, r18

  _written = false;
    121e:	18 8e       	std	Y+24, r1	; 0x18
=======
    1b4c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b4e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b50:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1b52:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b54:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b56:	20 83       	st	Z, r18

  _written = false;
    1b58:	18 8e       	std	Y+24, r1	; 0x18
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
<<<<<<< HEAD
    1220:	ec 89       	ldd	r30, Y+20	; 0x14
    1222:	fd 89       	ldd	r31, Y+21	; 0x15
    1224:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1226:	ea 89       	ldd	r30, Y+18	; 0x12
    1228:	fb 89       	ldd	r31, Y+19	; 0x13
    122a:	80 81       	ld	r24, Z
    122c:	80 61       	ori	r24, 0x10	; 16
    122e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1230:	ea 89       	ldd	r30, Y+18	; 0x12
    1232:	fb 89       	ldd	r31, Y+19	; 0x13
    1234:	80 81       	ld	r24, Z
    1236:	88 60       	ori	r24, 0x08	; 8
    1238:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    123a:	ea 89       	ldd	r30, Y+18	; 0x12
    123c:	fb 89       	ldd	r31, Y+19	; 0x13
    123e:	80 81       	ld	r24, Z
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1244:	ea 89       	ldd	r30, Y+18	; 0x12
    1246:	fb 89       	ldd	r31, Y+19	; 0x13
    1248:	80 81       	ld	r24, Z
    124a:	8f 7d       	andi	r24, 0xDF	; 223
    124c:	80 83       	st	Z, r24
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	08 95       	ret

0000125e <__vector_18>:
=======
    1b5a:	ec 89       	ldd	r30, Y+20	; 0x14
    1b5c:	fd 89       	ldd	r31, Y+21	; 0x15
    1b5e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1b60:	ea 89       	ldd	r30, Y+18	; 0x12
    1b62:	fb 89       	ldd	r31, Y+19	; 0x13
    1b64:	80 81       	ld	r24, Z
    1b66:	80 61       	ori	r24, 0x10	; 16
    1b68:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1b6a:	ea 89       	ldd	r30, Y+18	; 0x12
    1b6c:	fb 89       	ldd	r31, Y+19	; 0x13
    1b6e:	80 81       	ld	r24, Z
    1b70:	88 60       	ori	r24, 0x08	; 8
    1b72:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1b74:	ea 89       	ldd	r30, Y+18	; 0x12
    1b76:	fb 89       	ldd	r31, Y+19	; 0x13
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 68       	ori	r24, 0x80	; 128
    1b7c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1b7e:	ea 89       	ldd	r30, Y+18	; 0x12
    1b80:	fb 89       	ldd	r31, Y+19	; 0x13
    1b82:	80 81       	ld	r24, Z
    1b84:	8f 7d       	andi	r24, 0xDF	; 223
    1b86:	80 83       	st	Z, r24
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	cf 90       	pop	r12
    1b96:	08 95       	ret

00001b98 <__vector_18>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
<<<<<<< HEAD
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
=======
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
<<<<<<< HEAD
    1272:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Serial+0x10>
    1276:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <Serial+0x11>
    127a:	80 81       	ld	r24, Z
    127c:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <Serial+0x16>
    1280:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <Serial+0x17>
    1284:	82 fd       	sbrc	r24, 2
    1286:	12 c0       	rjmp	.+36     	; 0x12ac <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1288:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    128a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <Serial+0x19>
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8f 73       	andi	r24, 0x3F	; 63
=======
    1bac:	e0 91 84 03 	lds	r30, 0x0384	; 0x800384 <Serial+0x10>
    1bb0:	f0 91 85 03 	lds	r31, 0x0385	; 0x800385 <Serial+0x11>
    1bb4:	80 81       	ld	r24, Z
    1bb6:	e0 91 8a 03 	lds	r30, 0x038A	; 0x80038a <Serial+0x16>
    1bba:	f0 91 8b 03 	lds	r31, 0x038B	; 0x80038b <Serial+0x17>
    1bbe:	82 fd       	sbrc	r24, 2
    1bc0:	12 c0       	rjmp	.+36     	; 0x1be6 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1bc2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1bc4:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <Serial+0x19>
    1bc8:	8f 5f       	subi	r24, 0xFF	; 255
    1bca:	8f 73       	andi	r24, 0x3F	; 63
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
<<<<<<< HEAD
    1292:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <Serial+0x1a>
    1296:	82 17       	cp	r24, r18
    1298:	51 f0       	breq	.+20     	; 0x12ae <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    129a:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <Serial+0x19>
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ec 58       	subi	r30, 0x8C	; 140
    12a2:	fc 4f       	sbci	r31, 0xFC	; 252
    12a4:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    12a6:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Serial+0x19>
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <__vector_18+0x50>
=======
    1bcc:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <Serial+0x1a>
    1bd0:	82 17       	cp	r24, r18
    1bd2:	51 f0       	breq	.+20     	; 0x1be8 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1bd4:	e0 91 8d 03 	lds	r30, 0x038D	; 0x80038d <Serial+0x19>
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	ec 58       	subi	r30, 0x8C	; 140
    1bdc:	fc 4f       	sbci	r31, 0xFC	; 252
    1bde:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1be0:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <Serial+0x19>
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <__vector_18+0x50>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
<<<<<<< HEAD
    12ac:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_19>:
=======
    1be6:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1be8:	ff 91       	pop	r31
    1bea:	ef 91       	pop	r30
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_19>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
<<<<<<< HEAD
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	4f 93       	push	r20
    12d2:	5f 93       	push	r21
    12d4:	6f 93       	push	r22
    12d6:	7f 93       	push	r23
    12d8:	8f 93       	push	r24
    12da:	9f 93       	push	r25
    12dc:	af 93       	push	r26
    12de:	bf 93       	push	r27
    12e0:	ef 93       	push	r30
    12e2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    12e4:	84 e7       	ldi	r24, 0x74	; 116
    12e6:	93 e0       	ldi	r25, 0x03	; 3
    12e8:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <_Z17Serial0_availablev>:
=======
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1c1e:	84 e7       	ldi	r24, 0x74	; 116
    1c20:	93 e0       	ldi	r25, 0x03	; 3
    1c22:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c26:	ff 91       	pop	r31
    1c28:	ef 91       	pop	r30
    1c2a:	bf 91       	pop	r27
    1c2c:	af 91       	pop	r26
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	7f 91       	pop	r23
    1c34:	6f 91       	pop	r22
    1c36:	5f 91       	pop	r21
    1c38:	4f 91       	pop	r20
    1c3a:	3f 91       	pop	r19
    1c3c:	2f 91       	pop	r18
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <_Z17Serial0_availablev>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
<<<<<<< HEAD
    130e:	84 e7       	ldi	r24, 0x74	; 116
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN14HardwareSerial9availableEv>
    1316:	21 e0       	ldi	r18, 0x01	; 1
    1318:	89 2b       	or	r24, r25
    131a:	09 f4       	brne	.+2      	; 0x131e <_Z17Serial0_availablev+0x10>
    131c:	20 e0       	ldi	r18, 0x00	; 0
}
    131e:	82 2f       	mov	r24, r18
    1320:	08 95       	ret

00001322 <_GLOBAL__sub_I___vector_18>:
=======
    1c48:	84 e7       	ldi	r24, 0x74	; 116
    1c4a:	93 e0       	ldi	r25, 0x03	; 3
    1c4c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN14HardwareSerial9availableEv>
    1c50:	21 e0       	ldi	r18, 0x01	; 1
    1c52:	89 2b       	or	r24, r25
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <_Z17Serial0_availablev+0x10>
    1c56:	20 e0       	ldi	r18, 0x00	; 0
}
    1c58:	82 2f       	mov	r24, r18
    1c5a:	08 95       	ret

00001c5c <_GLOBAL__sub_I___vector_18>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
<<<<<<< HEAD
    1322:	e4 e7       	ldi	r30, 0x74	; 116
    1324:	f3 e0       	ldi	r31, 0x03	; 3
    1326:	13 82       	std	Z+3, r1	; 0x03
    1328:	12 82       	std	Z+2, r1	; 0x02
=======
    1c5c:	e4 e7       	ldi	r30, 0x74	; 116
    1c5e:	f3 e0       	ldi	r31, 0x03	; 3
    1c60:	13 82       	std	Z+3, r1	; 0x03
    1c62:	12 82       	std	Z+2, r1	; 0x02
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
<<<<<<< HEAD
    132a:	88 ee       	ldi	r24, 0xE8	; 232
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	84 83       	std	Z+4, r24	; 0x04
    1334:	95 83       	std	Z+5, r25	; 0x05
    1336:	a6 83       	std	Z+6, r26	; 0x06
    1338:	b7 83       	std	Z+7, r27	; 0x07
=======
    1c64:	88 ee       	ldi	r24, 0xE8	; 232
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	a0 e0       	ldi	r26, 0x00	; 0
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	84 83       	std	Z+4, r24	; 0x04
    1c6e:	95 83       	std	Z+5, r25	; 0x05
    1c70:	a6 83       	std	Z+6, r26	; 0x06
    1c72:	b7 83       	std	Z+7, r27	; 0x07
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
<<<<<<< HEAD
    133a:	85 e1       	ldi	r24, 0x15	; 21
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	85 ec       	ldi	r24, 0xC5	; 197
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	95 87       	std	Z+13, r25	; 0x0d
    1348:	84 87       	std	Z+12, r24	; 0x0c
    134a:	84 ec       	ldi	r24, 0xC4	; 196
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	97 87       	std	Z+15, r25	; 0x0f
    1350:	86 87       	std	Z+14, r24	; 0x0e
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	91 8b       	std	Z+17, r25	; 0x11
    1358:	80 8b       	std	Z+16, r24	; 0x10
    135a:	81 ec       	ldi	r24, 0xC1	; 193
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	93 8b       	std	Z+19, r25	; 0x13
    1360:	82 8b       	std	Z+18, r24	; 0x12
    1362:	82 ec       	ldi	r24, 0xC2	; 194
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	95 8b       	std	Z+21, r25	; 0x15
    1368:	84 8b       	std	Z+20, r24	; 0x14
    136a:	86 ec       	ldi	r24, 0xC6	; 198
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	97 8b       	std	Z+23, r25	; 0x17
    1370:	86 8b       	std	Z+22, r24	; 0x16
    1372:	11 8e       	std	Z+25, r1	; 0x19
    1374:	12 8e       	std	Z+26, r1	; 0x1a
    1376:	13 8e       	std	Z+27, r1	; 0x1b
    1378:	14 8e       	std	Z+28, r1	; 0x1c
    137a:	08 95       	ret

0000137c <main>:
=======
    1c74:	8f e0       	ldi	r24, 0x0F	; 15
    1c76:	92 e0       	ldi	r25, 0x02	; 2
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
    1c7c:	85 ec       	ldi	r24, 0xC5	; 197
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	95 87       	std	Z+13, r25	; 0x0d
    1c82:	84 87       	std	Z+12, r24	; 0x0c
    1c84:	84 ec       	ldi	r24, 0xC4	; 196
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	97 87       	std	Z+15, r25	; 0x0f
    1c8a:	86 87       	std	Z+14, r24	; 0x0e
    1c8c:	80 ec       	ldi	r24, 0xC0	; 192
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	91 8b       	std	Z+17, r25	; 0x11
    1c92:	80 8b       	std	Z+16, r24	; 0x10
    1c94:	81 ec       	ldi	r24, 0xC1	; 193
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	93 8b       	std	Z+19, r25	; 0x13
    1c9a:	82 8b       	std	Z+18, r24	; 0x12
    1c9c:	82 ec       	ldi	r24, 0xC2	; 194
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	95 8b       	std	Z+21, r25	; 0x15
    1ca2:	84 8b       	std	Z+20, r24	; 0x14
    1ca4:	86 ec       	ldi	r24, 0xC6	; 198
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	97 8b       	std	Z+23, r25	; 0x17
    1caa:	86 8b       	std	Z+22, r24	; 0x16
    1cac:	11 8e       	std	Z+25, r1	; 0x19
    1cae:	12 8e       	std	Z+26, r1	; 0x1a
    1cb0:	13 8e       	std	Z+27, r1	; 0x1b
    1cb2:	14 8e       	std	Z+28, r1	; 0x1c
    1cb4:	08 95       	ret

00001cb6 <main>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
<<<<<<< HEAD
    137c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <init>

	initVariant();
    1380:	0e 94 93 17 	call	0x2f26	; 0x2f26 <initVariant>
=======
    1cb6:	0e 94 9b 11 	call	0x2336	; 0x2336 <init>

	initVariant();
    1cba:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <initVariant>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
<<<<<<< HEAD
    1384:	0e 94 2b 05 	call	0xa56	; 0xa56 <setup>
=======
    1cbe:	0e 94 ac 07 	call	0xf58	; 0xf58 <setup>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
<<<<<<< HEAD
    1388:	cb e2       	ldi	r28, 0x2B	; 43
    138a:	d8 e0       	ldi	r29, 0x08	; 8
=======
    1cc2:	c8 ec       	ldi	r28, 0xC8	; 200
    1cc4:	dc e0       	ldi	r29, 0x0C	; 12
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#endif
	
	setup();
    
	for (;;) {
		loop();
<<<<<<< HEAD
    138c:	0e 94 68 05 	call	0xad0	; 0xad0 <loop>
		if (serialEventRun) serialEventRun();
    1390:	20 97       	sbiw	r28, 0x00	; 0
    1392:	e1 f3       	breq	.-8      	; 0x138c <main+0x10>
    1394:	0e 94 2b 08 	call	0x1056	; 0x1056 <_Z14serialEventRunv>
    1398:	f9 cf       	rjmp	.-14     	; 0x138c <main+0x10>

0000139a <_ZN5Print5writeEPKhj>:
=======
    1cc6:	0e 94 1f 08 	call	0x103e	; 0x103e <loop>
		if (serialEventRun) serialEventRun();
    1cca:	20 97       	sbiw	r28, 0x00	; 0
    1ccc:	e1 f3       	breq	.-8      	; 0x1cc6 <main+0x10>
    1cce:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_Z14serialEventRunv>
    1cd2:	f9 cf       	rjmp	.-14     	; 0x1cc6 <main+0x10>

00001cd4 <_ZN5Print5writeEPKhj>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
<<<<<<< HEAD
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	6c 01       	movw	r12, r24
    13ac:	7a 01       	movw	r14, r20
    13ae:	8b 01       	movw	r16, r22
    13b0:	c0 e0       	ldi	r28, 0x00	; 0
    13b2:	d0 e0       	ldi	r29, 0x00	; 0
    13b4:	ce 15       	cp	r28, r14
    13b6:	df 05       	cpc	r29, r15
    13b8:	81 f0       	breq	.+32     	; 0x13da <_ZN5Print5writeEPKhj+0x40>
    13ba:	d8 01       	movw	r26, r16
    13bc:	6d 91       	ld	r22, X+
    13be:	8d 01       	movw	r16, r26
    13c0:	d6 01       	movw	r26, r12
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	01 90       	ld	r0, Z+
    13c8:	f0 81       	ld	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	c6 01       	movw	r24, r12
    13ce:	09 95       	icall
    13d0:	89 2b       	or	r24, r25
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <_ZN5Print5writeEPKhj+0x3e>
    13d4:	21 96       	adiw	r28, 0x01	; 1
    13d6:	ee cf       	rjmp	.-36     	; 0x13b4 <_ZN5Print5writeEPKhj+0x1a>
    13d8:	7e 01       	movw	r14, r28
    13da:	c7 01       	movw	r24, r14
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	cf 90       	pop	r12
    13ec:	08 95       	ret

000013ee <_ZN5Print5printEPK19__FlashStringHelper>:
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	8c 01       	movw	r16, r24
    13fc:	7b 01       	movw	r14, r22
    13fe:	c0 e0       	ldi	r28, 0x00	; 0
    1400:	d0 e0       	ldi	r29, 0x00	; 0
    1402:	f7 01       	movw	r30, r14
    1404:	ec 0f       	add	r30, r28
    1406:	fd 1f       	adc	r31, r29
    1408:	64 91       	lpm	r22, Z
    140a:	66 23       	and	r22, r22
    140c:	61 f0       	breq	.+24     	; 0x1426 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    140e:	d8 01       	movw	r26, r16
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	01 90       	ld	r0, Z+
    1416:	f0 81       	ld	r31, Z
    1418:	e0 2d       	mov	r30, r0
    141a:	c8 01       	movw	r24, r16
    141c:	09 95       	icall
    141e:	89 2b       	or	r24, r25
    1420:	11 f0       	breq	.+4      	; 0x1426 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1422:	21 96       	adiw	r28, 0x01	; 1
    1424:	ee cf       	rjmp	.-36     	; 0x1402 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1426:	ce 01       	movw	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	08 95       	ret

00001436 <_ZN5Print5printEPKc>:
    1436:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>

0000143a <_ZN5Print5printEc>:
    143a:	dc 01       	movw	r26, r24
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	01 90       	ld	r0, Z+
    1442:	f0 81       	ld	r31, Z
    1444:	e0 2d       	mov	r30, r0
    1446:	09 94       	ijmp

00001448 <_ZN5Print7printlnEv>:
    1448:	63 e2       	ldi	r22, 0x23	; 35
    144a:	72 e0       	ldi	r23, 0x02	; 2
    144c:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>

00001450 <_ZN5Print11printNumberEmh>:
    1450:	8f 92       	push	r8
    1452:	9f 92       	push	r9
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	a1 97       	sbiw	r28, 0x21	; 33
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	7c 01       	movw	r14, r24
    1476:	fa 01       	movw	r30, r20
    1478:	cb 01       	movw	r24, r22
    147a:	19 a2       	std	Y+33, r1	; 0x21
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	08 f4       	brcc	.+2      	; 0x1482 <_ZN5Print11printNumberEmh+0x32>
    1480:	2a e0       	ldi	r18, 0x0A	; 10
    1482:	8e 01       	movw	r16, r28
    1484:	0f 5d       	subi	r16, 0xDF	; 223
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	82 2e       	mov	r8, r18
    148a:	91 2c       	mov	r9, r1
    148c:	a1 2c       	mov	r10, r1
    148e:	b1 2c       	mov	r11, r1
    1490:	bf 01       	movw	r22, r30
    1492:	a5 01       	movw	r20, r10
    1494:	94 01       	movw	r18, r8
    1496:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    149a:	f9 01       	movw	r30, r18
    149c:	ca 01       	movw	r24, r20
    149e:	01 50       	subi	r16, 0x01	; 1
    14a0:	11 09       	sbc	r17, r1
    14a2:	6a 30       	cpi	r22, 0x0A	; 10
    14a4:	10 f4       	brcc	.+4      	; 0x14aa <_ZN5Print11printNumberEmh+0x5a>
    14a6:	60 5d       	subi	r22, 0xD0	; 208
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <_ZN5Print11printNumberEmh+0x5c>
    14aa:	69 5c       	subi	r22, 0xC9	; 201
    14ac:	d8 01       	movw	r26, r16
    14ae:	6c 93       	st	X, r22
    14b0:	23 2b       	or	r18, r19
    14b2:	24 2b       	or	r18, r20
    14b4:	25 2b       	or	r18, r21
    14b6:	61 f7       	brne	.-40     	; 0x1490 <_ZN5Print11printNumberEmh+0x40>
    14b8:	b8 01       	movw	r22, r16
    14ba:	c7 01       	movw	r24, r14
    14bc:	0e 94 81 01 	call	0x302	; 0x302 <_ZN5Print5writeEPKc>
    14c0:	a1 96       	adiw	r28, 0x21	; 33
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	08 95       	ret

000014e2 <_ZN5Print5printEmi>:
    14e2:	21 15       	cp	r18, r1
    14e4:	31 05       	cpc	r19, r1
    14e6:	41 f4       	brne	.+16     	; 0x14f8 <_ZN5Print5printEmi+0x16>
    14e8:	dc 01       	movw	r26, r24
    14ea:	ed 91       	ld	r30, X+
    14ec:	fc 91       	ld	r31, X
    14ee:	01 90       	ld	r0, Z+
    14f0:	f0 81       	ld	r31, Z
    14f2:	e0 2d       	mov	r30, r0
    14f4:	64 2f       	mov	r22, r20
    14f6:	09 94       	ijmp
    14f8:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>

000014fc <_ZN5Print5printEhi>:
    14fc:	9a 01       	movw	r18, r20
    14fe:	46 2f       	mov	r20, r22
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5printEmi>

0000150a <_ZN5Print5printEji>:
    150a:	9a 01       	movw	r18, r20
    150c:	ab 01       	movw	r20, r22
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	70 e0       	ldi	r23, 0x00	; 0
    1512:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_ZN5Print5printEmi>

00001516 <_ZN5Print5printEli>:
    1516:	cf 92       	push	r12
    1518:	df 92       	push	r13
    151a:	ef 92       	push	r14
    151c:	ff 92       	push	r15
    151e:	0f 93       	push	r16
    1520:	1f 93       	push	r17
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	21 15       	cp	r18, r1
    1528:	31 05       	cpc	r19, r1
    152a:	81 f4       	brne	.+32     	; 0x154c <_ZN5Print5printEli+0x36>
    152c:	dc 01       	movw	r26, r24
    152e:	ed 91       	ld	r30, X+
    1530:	fc 91       	ld	r31, X
    1532:	01 90       	ld	r0, Z+
    1534:	f0 81       	ld	r31, Z
    1536:	e0 2d       	mov	r30, r0
    1538:	64 2f       	mov	r22, r20
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	09 94       	ijmp
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	31 05       	cpc	r19, r1
    1550:	01 f5       	brne	.+64     	; 0x1592 <_ZN5Print5printEli+0x7c>
    1552:	77 ff       	sbrs	r23, 7
    1554:	1d c0       	rjmp	.+58     	; 0x1590 <_ZN5Print5printEli+0x7a>
    1556:	6a 01       	movw	r12, r20
    1558:	7b 01       	movw	r14, r22
    155a:	ec 01       	movw	r28, r24
    155c:	6d e2       	ldi	r22, 0x2D	; 45
    155e:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    1562:	8c 01       	movw	r16, r24
    1564:	44 27       	eor	r20, r20
    1566:	55 27       	eor	r21, r21
    1568:	ba 01       	movw	r22, r20
    156a:	4c 19       	sub	r20, r12
    156c:	5d 09       	sbc	r21, r13
    156e:	6e 09       	sbc	r22, r14
    1570:	7f 09       	sbc	r23, r15
    1572:	2a e0       	ldi	r18, 0x0A	; 10
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>
    157a:	80 0f       	add	r24, r16
    157c:	91 1f       	adc	r25, r17
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	08 95       	ret
    1590:	2a e0       	ldi	r18, 0x0A	; 10
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	ff 90       	pop	r15
    159c:	ef 90       	pop	r14
    159e:	df 90       	pop	r13
    15a0:	cf 90       	pop	r12
    15a2:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>

000015a6 <_ZN5Print5printEii>:
    15a6:	9a 01       	movw	r18, r20
    15a8:	ab 01       	movw	r20, r22
    15aa:	77 0f       	add	r23, r23
    15ac:	66 0b       	sbc	r22, r22
    15ae:	77 0b       	sbc	r23, r23
    15b0:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <_ZN5Print5printEli>

000015b4 <_ZN5Print7printlnEii>:
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	ec 01       	movw	r28, r24
    15be:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <_ZN5Print5printEii>
    15c2:	8c 01       	movw	r16, r24
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN5Print7printlnEv>
    15ca:	80 0f       	add	r24, r16
    15cc:	91 1f       	adc	r25, r17
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <_ZN5Print10printFloatEdh>:
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	8c 01       	movw	r16, r24
    15f4:	6a 01       	movw	r12, r20
    15f6:	7b 01       	movw	r14, r22
    15f8:	72 2e       	mov	r7, r18
    15fa:	9a 01       	movw	r18, r20
    15fc:	ab 01       	movw	r20, r22
    15fe:	c7 01       	movw	r24, r14
    1600:	b6 01       	movw	r22, r12
    1602:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__unordsf2>
    1606:	88 23       	and	r24, r24
    1608:	19 f0       	breq	.+6      	; 0x1610 <_ZN5Print10printFloatEdh+0x38>
    160a:	66 e2       	ldi	r22, 0x26	; 38
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	27 c0       	rjmp	.+78     	; 0x165e <_ZN5Print10printFloatEdh+0x86>
    1610:	46 01       	movw	r8, r12
    1612:	57 01       	movw	r10, r14
    1614:	e8 94       	clt
    1616:	b7 f8       	bld	r11, 7
    1618:	2f ef       	ldi	r18, 0xFF	; 255
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	5f e7       	ldi	r21, 0x7F	; 127
    1620:	c5 01       	movw	r24, r10
    1622:	b4 01       	movw	r22, r8
    1624:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__unordsf2>
    1628:	81 11       	cpse	r24, r1
    162a:	0d c0       	rjmp	.+26     	; 0x1646 <_ZN5Print10printFloatEdh+0x6e>
    162c:	2f ef       	ldi	r18, 0xFF	; 255
    162e:	3f ef       	ldi	r19, 0xFF	; 255
    1630:	4f e7       	ldi	r20, 0x7F	; 127
    1632:	5f e7       	ldi	r21, 0x7F	; 127
    1634:	c5 01       	movw	r24, r10
    1636:	b4 01       	movw	r22, r8
    1638:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    163c:	18 16       	cp	r1, r24
    163e:	1c f4       	brge	.+6      	; 0x1646 <_ZN5Print10printFloatEdh+0x6e>
    1640:	6a e2       	ldi	r22, 0x2A	; 42
    1642:	72 e0       	ldi	r23, 0x02	; 2
    1644:	0c c0       	rjmp	.+24     	; 0x165e <_ZN5Print10printFloatEdh+0x86>
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	4f e7       	ldi	r20, 0x7F	; 127
    164c:	5f e4       	ldi	r21, 0x4F	; 79
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 7c 07 	call	0xef8	; 0xef8 <__gesf2>
    1656:	18 16       	cp	r1, r24
    1658:	94 f4       	brge	.+36     	; 0x167e <_ZN5Print10printFloatEdh+0xa6>
    165a:	6e e2       	ldi	r22, 0x2E	; 46
    165c:	72 e0       	ldi	r23, 0x02	; 2
    165e:	c8 01       	movw	r24, r16
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	df 90       	pop	r13
    166e:	cf 90       	pop	r12
    1670:	bf 90       	pop	r11
    1672:	af 90       	pop	r10
    1674:	9f 90       	pop	r9
    1676:	8f 90       	pop	r8
    1678:	7f 90       	pop	r7
    167a:	0c 94 81 01 	jmp	0x302	; 0x302 <_ZN5Print5writeEPKc>
    167e:	2f ef       	ldi	r18, 0xFF	; 255
    1680:	3f ef       	ldi	r19, 0xFF	; 255
    1682:	4f e7       	ldi	r20, 0x7F	; 127
    1684:	5f ec       	ldi	r21, 0xCF	; 207
    1686:	c7 01       	movw	r24, r14
    1688:	b6 01       	movw	r22, r12
    168a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    168e:	87 fd       	sbrc	r24, 7
    1690:	e4 cf       	rjmp	.-56     	; 0x165a <_ZN5Print10printFloatEdh+0x82>
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	a9 01       	movw	r20, r18
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__cmpsf2>
    16a0:	87 ff       	sbrs	r24, 7
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <_ZN5Print10printFloatEdh+0xe0>
    16a4:	6d e2       	ldi	r22, 0x2D	; 45
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    16ac:	ec 01       	movw	r28, r24
    16ae:	f7 fa       	bst	r15, 7
    16b0:	f0 94       	com	r15
    16b2:	f7 f8       	bld	r15, 7
    16b4:	f0 94       	com	r15
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN5Print10printFloatEdh+0xe4>
    16b8:	c0 e0       	ldi	r28, 0x00	; 0
    16ba:	d0 e0       	ldi	r29, 0x00	; 0
    16bc:	b1 2c       	mov	r11, r1
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	9f e3       	ldi	r25, 0x3F	; 63
    16c6:	7b 14       	cp	r7, r11
    16c8:	41 f0       	breq	.+16     	; 0x16da <_ZN5Print10printFloatEdh+0x102>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 22 06 	call	0xc44	; 0xc44 <__divsf3>
    16d6:	b3 94       	inc	r11
    16d8:	f6 cf       	rjmp	.-20     	; 0x16c6 <_ZN5Print10printFloatEdh+0xee>
    16da:	a7 01       	movw	r20, r14
    16dc:	96 01       	movw	r18, r12
    16de:	0e 94 b1 05 	call	0xb62	; 0xb62 <__addsf3>
    16e2:	6b 01       	movw	r12, r22
    16e4:	7c 01       	movw	r14, r24
    16e6:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
    16ea:	4b 01       	movw	r8, r22
    16ec:	5c 01       	movw	r10, r24
    16ee:	2a e0       	ldi	r18, 0x0A	; 10
    16f0:	ab 01       	movw	r20, r22
    16f2:	bc 01       	movw	r22, r24
    16f4:	c8 01       	movw	r24, r16
    16f6:	0e 94 28 0a 	call	0x1450	; 0x1450 <_ZN5Print11printNumberEmh>
    16fa:	c8 0f       	add	r28, r24
    16fc:	d9 1f       	adc	r29, r25
    16fe:	77 20       	and	r7, r7
    1700:	b9 f1       	breq	.+110    	; 0x1770 <_ZN5Print10printFloatEdh+0x198>
    1702:	c5 01       	movw	r24, r10
    1704:	b4 01       	movw	r22, r8
    1706:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
    170a:	9b 01       	movw	r18, r22
    170c:	ac 01       	movw	r20, r24
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 b0 05 	call	0xb60	; 0xb60 <__subsf3>
    1716:	6b 01       	movw	r12, r22
    1718:	7c 01       	movw	r14, r24
    171a:	6e e2       	ldi	r22, 0x2E	; 46
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 1d 0a 	call	0x143a	; 0x143a <_ZN5Print5printEc>
    1722:	c8 0f       	add	r28, r24
    1724:	d9 1f       	adc	r29, r25
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	0e 94 81 07 	call	0xf02	; 0xf02 <__mulsf3>
    1736:	4b 01       	movw	r8, r22
    1738:	5c 01       	movw	r10, r24
    173a:	0e 94 9b 06 	call	0xd36	; 0xd36 <__fixunssfsi>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	4a e0       	ldi	r20, 0x0A	; 10
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	c8 01       	movw	r24, r16
    1748:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN5Print5printEji>
    174c:	c8 0f       	add	r28, r24
    174e:	d9 1f       	adc	r29, r25
    1750:	b6 01       	movw	r22, r12
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 ca 06 	call	0xd94	; 0xd94 <__floatunsisf>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	c5 01       	movw	r24, r10
    1760:	b4 01       	movw	r22, r8
    1762:	0e 94 b0 05 	call	0xb60	; 0xb60 <__subsf3>
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
    176a:	7a 94       	dec	r7
    176c:	71 10       	cpse	r7, r1
    176e:	db cf       	rjmp	.-74     	; 0x1726 <_ZN5Print10printFloatEdh+0x14e>
    1770:	ce 01       	movw	r24, r28
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	df 90       	pop	r13
    1780:	cf 90       	pop	r12
    1782:	bf 90       	pop	r11
    1784:	af 90       	pop	r10
    1786:	9f 90       	pop	r9
    1788:	8f 90       	pop	r8
    178a:	7f 90       	pop	r7
    178c:	08 95       	ret

0000178e <_ZN5Print7printlnEdi>:
=======
    1cd4:	cf 92       	push	r12
    1cd6:	df 92       	push	r13
    1cd8:	ef 92       	push	r14
    1cda:	ff 92       	push	r15
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	6c 01       	movw	r12, r24
    1ce6:	7a 01       	movw	r14, r20
    1ce8:	8b 01       	movw	r16, r22
    1cea:	c0 e0       	ldi	r28, 0x00	; 0
    1cec:	d0 e0       	ldi	r29, 0x00	; 0
    1cee:	ce 15       	cp	r28, r14
    1cf0:	df 05       	cpc	r29, r15
    1cf2:	81 f0       	breq	.+32     	; 0x1d14 <_ZN5Print5writeEPKhj+0x40>
    1cf4:	d8 01       	movw	r26, r16
    1cf6:	6d 91       	ld	r22, X+
    1cf8:	8d 01       	movw	r16, r26
    1cfa:	d6 01       	movw	r26, r12
    1cfc:	ed 91       	ld	r30, X+
    1cfe:	fc 91       	ld	r31, X
    1d00:	01 90       	ld	r0, Z+
    1d02:	f0 81       	ld	r31, Z
    1d04:	e0 2d       	mov	r30, r0
    1d06:	c6 01       	movw	r24, r12
    1d08:	09 95       	icall
    1d0a:	89 2b       	or	r24, r25
    1d0c:	11 f0       	breq	.+4      	; 0x1d12 <_ZN5Print5writeEPKhj+0x3e>
    1d0e:	21 96       	adiw	r28, 0x01	; 1
    1d10:	ee cf       	rjmp	.-36     	; 0x1cee <_ZN5Print5writeEPKhj+0x1a>
    1d12:	7e 01       	movw	r14, r28
    1d14:	c7 01       	movw	r24, r14
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	08 95       	ret

00001d28 <_ZN5Print5printEPK19__FlashStringHelper>:
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	8c 01       	movw	r16, r24
    1d36:	7b 01       	movw	r14, r22
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	f7 01       	movw	r30, r14
    1d3e:	ec 0f       	add	r30, r28
    1d40:	fd 1f       	adc	r31, r29
    1d42:	64 91       	lpm	r22, Z
    1d44:	66 23       	and	r22, r22
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d48:	d8 01       	movw	r26, r16
    1d4a:	ed 91       	ld	r30, X+
    1d4c:	fc 91       	ld	r31, X
    1d4e:	01 90       	ld	r0, Z+
    1d50:	f0 81       	ld	r31, Z
    1d52:	e0 2d       	mov	r30, r0
    1d54:	c8 01       	movw	r24, r16
    1d56:	09 95       	icall
    1d58:	89 2b       	or	r24, r25
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1d5c:	21 96       	adiw	r28, 0x01	; 1
    1d5e:	ee cf       	rjmp	.-36     	; 0x1d3c <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1d60:	ce 01       	movw	r24, r28
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	08 95       	ret

00001d70 <_ZN5Print5printEPKc>:
    1d70:	0c 94 19 02 	jmp	0x432	; 0x432 <_ZN5Print5writeEPKc>

00001d74 <_ZN5Print5printEc>:
    1d74:	dc 01       	movw	r26, r24
    1d76:	ed 91       	ld	r30, X+
    1d78:	fc 91       	ld	r31, X
    1d7a:	01 90       	ld	r0, Z+
    1d7c:	f0 81       	ld	r31, Z
    1d7e:	e0 2d       	mov	r30, r0
    1d80:	09 94       	ijmp

00001d82 <_ZN5Print7printlnEv>:
    1d82:	6d e1       	ldi	r22, 0x1D	; 29
    1d84:	72 e0       	ldi	r23, 0x02	; 2
    1d86:	0c 94 19 02 	jmp	0x432	; 0x432 <_ZN5Print5writeEPKc>

00001d8a <_ZN5Print7printlnEPKc>:
    1d8a:	0f 93       	push	r16
    1d8c:	1f 93       	push	r17
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	ec 01       	movw	r28, r24
    1d94:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
    1d98:	8c 01       	movw	r16, r24
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZN5Print7printlnEv>
    1da0:	80 0f       	add	r24, r16
    1da2:	91 1f       	adc	r25, r17
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <_ZN5Print11printNumberEmh>:
    1dae:	8f 92       	push	r8
    1db0:	9f 92       	push	r9
    1db2:	af 92       	push	r10
    1db4:	bf 92       	push	r11
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	a1 97       	sbiw	r28, 0x21	; 33
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	7c 01       	movw	r14, r24
    1dd4:	fa 01       	movw	r30, r20
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	19 a2       	std	Y+33, r1	; 0x21
    1dda:	22 30       	cpi	r18, 0x02	; 2
    1ddc:	08 f4       	brcc	.+2      	; 0x1de0 <_ZN5Print11printNumberEmh+0x32>
    1dde:	2a e0       	ldi	r18, 0x0A	; 10
    1de0:	8e 01       	movw	r16, r28
    1de2:	0f 5d       	subi	r16, 0xDF	; 223
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	82 2e       	mov	r8, r18
    1de8:	91 2c       	mov	r9, r1
    1dea:	a1 2c       	mov	r10, r1
    1dec:	b1 2c       	mov	r11, r1
    1dee:	bf 01       	movw	r22, r30
    1df0:	a5 01       	movw	r20, r10
    1df2:	94 01       	movw	r18, r8
    1df4:	0e 94 24 23 	call	0x4648	; 0x4648 <__udivmodsi4>
    1df8:	f9 01       	movw	r30, r18
    1dfa:	ca 01       	movw	r24, r20
    1dfc:	01 50       	subi	r16, 0x01	; 1
    1dfe:	11 09       	sbc	r17, r1
    1e00:	6a 30       	cpi	r22, 0x0A	; 10
    1e02:	10 f4       	brcc	.+4      	; 0x1e08 <_ZN5Print11printNumberEmh+0x5a>
    1e04:	60 5d       	subi	r22, 0xD0	; 208
    1e06:	01 c0       	rjmp	.+2      	; 0x1e0a <_ZN5Print11printNumberEmh+0x5c>
    1e08:	69 5c       	subi	r22, 0xC9	; 201
    1e0a:	d8 01       	movw	r26, r16
    1e0c:	6c 93       	st	X, r22
    1e0e:	23 2b       	or	r18, r19
    1e10:	24 2b       	or	r18, r20
    1e12:	25 2b       	or	r18, r21
    1e14:	61 f7       	brne	.-40     	; 0x1dee <_ZN5Print11printNumberEmh+0x40>
    1e16:	b8 01       	movw	r22, r16
    1e18:	c7 01       	movw	r24, r14
    1e1a:	0e 94 19 02 	call	0x432	; 0x432 <_ZN5Print5writeEPKc>
    1e1e:	a1 96       	adiw	r28, 0x21	; 33
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	bf 90       	pop	r11
    1e38:	af 90       	pop	r10
    1e3a:	9f 90       	pop	r9
    1e3c:	8f 90       	pop	r8
    1e3e:	08 95       	ret

00001e40 <_ZN5Print5printEmi>:
    1e40:	21 15       	cp	r18, r1
    1e42:	31 05       	cpc	r19, r1
    1e44:	41 f4       	brne	.+16     	; 0x1e56 <_ZN5Print5printEmi+0x16>
    1e46:	dc 01       	movw	r26, r24
    1e48:	ed 91       	ld	r30, X+
    1e4a:	fc 91       	ld	r31, X
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	f0 81       	ld	r31, Z
    1e50:	e0 2d       	mov	r30, r0
    1e52:	64 2f       	mov	r22, r20
    1e54:	09 94       	ijmp
    1e56:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <_ZN5Print11printNumberEmh>

00001e5a <_ZN5Print5printEhi>:
    1e5a:	9a 01       	movw	r18, r20
    1e5c:	46 2f       	mov	r20, r22
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_ZN5Print5printEmi>

00001e68 <_ZN5Print5printEji>:
    1e68:	9a 01       	movw	r18, r20
    1e6a:	ab 01       	movw	r20, r22
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <_ZN5Print5printEmi>

00001e74 <_ZN5Print5printEli>:
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	21 15       	cp	r18, r1
    1e86:	31 05       	cpc	r19, r1
    1e88:	81 f4       	brne	.+32     	; 0x1eaa <_ZN5Print5printEli+0x36>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	fc 91       	ld	r31, X
    1e90:	01 90       	ld	r0, Z+
    1e92:	f0 81       	ld	r31, Z
    1e94:	e0 2d       	mov	r30, r0
    1e96:	64 2f       	mov	r22, r20
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	09 94       	ijmp
    1eaa:	2a 30       	cpi	r18, 0x0A	; 10
    1eac:	31 05       	cpc	r19, r1
    1eae:	01 f5       	brne	.+64     	; 0x1ef0 <_ZN5Print5printEli+0x7c>
    1eb0:	77 ff       	sbrs	r23, 7
    1eb2:	1d c0       	rjmp	.+58     	; 0x1eee <_ZN5Print5printEli+0x7a>
    1eb4:	6a 01       	movw	r12, r20
    1eb6:	7b 01       	movw	r14, r22
    1eb8:	ec 01       	movw	r28, r24
    1eba:	6d e2       	ldi	r22, 0x2D	; 45
    1ebc:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN5Print5printEc>
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	44 27       	eor	r20, r20
    1ec4:	55 27       	eor	r21, r21
    1ec6:	ba 01       	movw	r22, r20
    1ec8:	4c 19       	sub	r20, r12
    1eca:	5d 09       	sbc	r21, r13
    1ecc:	6e 09       	sbc	r22, r14
    1ece:	7f 09       	sbc	r23, r15
    1ed0:	2a e0       	ldi	r18, 0x0A	; 10
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print11printNumberEmh>
    1ed8:	80 0f       	add	r24, r16
    1eda:	91 1f       	adc	r25, r17
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	08 95       	ret
    1eee:	2a e0       	ldi	r18, 0x0A	; 10
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	1f 91       	pop	r17
    1ef6:	0f 91       	pop	r16
    1ef8:	ff 90       	pop	r15
    1efa:	ef 90       	pop	r14
    1efc:	df 90       	pop	r13
    1efe:	cf 90       	pop	r12
    1f00:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <_ZN5Print11printNumberEmh>

00001f04 <_ZN5Print5printEii>:
    1f04:	9a 01       	movw	r18, r20
    1f06:	ab 01       	movw	r20, r22
    1f08:	77 0f       	add	r23, r23
    1f0a:	66 0b       	sbc	r22, r22
    1f0c:	77 0b       	sbc	r23, r23
    1f0e:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_ZN5Print5printEli>

00001f12 <_ZN5Print10printFloatEdh>:
    1f12:	7f 92       	push	r7
    1f14:	8f 92       	push	r8
    1f16:	9f 92       	push	r9
    1f18:	af 92       	push	r10
    1f1a:	bf 92       	push	r11
    1f1c:	cf 92       	push	r12
    1f1e:	df 92       	push	r13
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	6a 01       	movw	r12, r20
    1f30:	7b 01       	movw	r14, r22
    1f32:	72 2e       	mov	r7, r18
    1f34:	9a 01       	movw	r18, r20
    1f36:	ab 01       	movw	r20, r22
    1f38:	c7 01       	movw	r24, r14
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	0e 94 0b 23 	call	0x4616	; 0x4616 <__unordsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	19 f0       	breq	.+6      	; 0x1f4a <_ZN5Print10printFloatEdh+0x38>
    1f44:	60 e2       	ldi	r22, 0x20	; 32
    1f46:	72 e0       	ldi	r23, 0x02	; 2
    1f48:	27 c0       	rjmp	.+78     	; 0x1f98 <_ZN5Print10printFloatEdh+0x86>
    1f4a:	46 01       	movw	r8, r12
    1f4c:	57 01       	movw	r10, r14
    1f4e:	e8 94       	clt
    1f50:	b7 f8       	bld	r11, 7
    1f52:	2f ef       	ldi	r18, 0xFF	; 255
    1f54:	3f ef       	ldi	r19, 0xFF	; 255
    1f56:	4f e7       	ldi	r20, 0x7F	; 127
    1f58:	5f e7       	ldi	r21, 0x7F	; 127
    1f5a:	c5 01       	movw	r24, r10
    1f5c:	b4 01       	movw	r22, r8
    1f5e:	0e 94 0b 23 	call	0x4616	; 0x4616 <__unordsf2>
    1f62:	81 11       	cpse	r24, r1
    1f64:	0d c0       	rjmp	.+26     	; 0x1f80 <_ZN5Print10printFloatEdh+0x6e>
    1f66:	2f ef       	ldi	r18, 0xFF	; 255
    1f68:	3f ef       	ldi	r19, 0xFF	; 255
    1f6a:	4f e7       	ldi	r20, 0x7F	; 127
    1f6c:	5f e7       	ldi	r21, 0x7F	; 127
    1f6e:	c5 01       	movw	r24, r10
    1f70:	b4 01       	movw	r22, r8
    1f72:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	1c f4       	brge	.+6      	; 0x1f80 <_ZN5Print10printFloatEdh+0x6e>
    1f7a:	64 e2       	ldi	r22, 0x24	; 36
    1f7c:	72 e0       	ldi	r23, 0x02	; 2
    1f7e:	0c c0       	rjmp	.+24     	; 0x1f98 <_ZN5Print10printFloatEdh+0x86>
    1f80:	2f ef       	ldi	r18, 0xFF	; 255
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	5f e4       	ldi	r21, 0x4F	; 79
    1f88:	c7 01       	movw	r24, r14
    1f8a:	b6 01       	movw	r22, r12
    1f8c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__gesf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	94 f4       	brge	.+36     	; 0x1fb8 <_ZN5Print10printFloatEdh+0xa6>
    1f94:	68 e2       	ldi	r22, 0x28	; 40
    1f96:	72 e0       	ldi	r23, 0x02	; 2
    1f98:	c8 01       	movw	r24, r16
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	9f 90       	pop	r9
    1fb0:	8f 90       	pop	r8
    1fb2:	7f 90       	pop	r7
    1fb4:	0c 94 19 02 	jmp	0x432	; 0x432 <_ZN5Print5writeEPKc>
    1fb8:	2f ef       	ldi	r18, 0xFF	; 255
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	5f ec       	ldi	r21, 0xCF	; 207
    1fc0:	c7 01       	movw	r24, r14
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
    1fc8:	87 fd       	sbrc	r24, 7
    1fca:	e4 cf       	rjmp	.-56     	; 0x1f94 <_ZN5Print10printFloatEdh+0x82>
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	a9 01       	movw	r20, r18
    1fd2:	c7 01       	movw	r24, r14
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
    1fda:	87 ff       	sbrs	r24, 7
    1fdc:	0a c0       	rjmp	.+20     	; 0x1ff2 <_ZN5Print10printFloatEdh+0xe0>
    1fde:	6d e2       	ldi	r22, 0x2D	; 45
    1fe0:	c8 01       	movw	r24, r16
    1fe2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN5Print5printEc>
    1fe6:	ec 01       	movw	r28, r24
    1fe8:	f7 fa       	bst	r15, 7
    1fea:	f0 94       	com	r15
    1fec:	f7 f8       	bld	r15, 7
    1fee:	f0 94       	com	r15
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <_ZN5Print10printFloatEdh+0xe4>
    1ff2:	c0 e0       	ldi	r28, 0x00	; 0
    1ff4:	d0 e0       	ldi	r29, 0x00	; 0
    1ff6:	b1 2c       	mov	r11, r1
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	70 e0       	ldi	r23, 0x00	; 0
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	9f e3       	ldi	r25, 0x3F	; 63
    2000:	7b 14       	cp	r7, r11
    2002:	41 f0       	breq	.+16     	; 0x2014 <_ZN5Print10printFloatEdh+0x102>
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e2       	ldi	r20, 0x20	; 32
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 bf 0a 	call	0x157e	; 0x157e <__divsf3>
    2010:	b3 94       	inc	r11
    2012:	f6 cf       	rjmp	.-20     	; 0x2000 <_ZN5Print10printFloatEdh+0xee>
    2014:	a7 01       	movw	r20, r14
    2016:	96 01       	movw	r18, r12
    2018:	0e 94 4e 0a 	call	0x149c	; 0x149c <__addsf3>
    201c:	6b 01       	movw	r12, r22
    201e:	7c 01       	movw	r14, r24
    2020:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fixunssfsi>
    2024:	4b 01       	movw	r8, r22
    2026:	5c 01       	movw	r10, r24
    2028:	2a e0       	ldi	r18, 0x0A	; 10
    202a:	ab 01       	movw	r20, r22
    202c:	bc 01       	movw	r22, r24
    202e:	c8 01       	movw	r24, r16
    2030:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN5Print11printNumberEmh>
    2034:	c8 0f       	add	r28, r24
    2036:	d9 1f       	adc	r29, r25
    2038:	77 20       	and	r7, r7
    203a:	b9 f1       	breq	.+110    	; 0x20aa <_ZN5Print10printFloatEdh+0x198>
    203c:	c5 01       	movw	r24, r10
    203e:	b4 01       	movw	r22, r8
    2040:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
    2044:	9b 01       	movw	r18, r22
    2046:	ac 01       	movw	r20, r24
    2048:	c7 01       	movw	r24, r14
    204a:	b6 01       	movw	r22, r12
    204c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
    2050:	6b 01       	movw	r12, r22
    2052:	7c 01       	movw	r14, r24
    2054:	6e e2       	ldi	r22, 0x2E	; 46
    2056:	c8 01       	movw	r24, r16
    2058:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <_ZN5Print5printEc>
    205c:	c8 0f       	add	r28, r24
    205e:	d9 1f       	adc	r29, r25
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	c7 01       	movw	r24, r14
    206a:	b6 01       	movw	r22, r12
    206c:	0e 94 1e 0c 	call	0x183c	; 0x183c <__mulsf3>
    2070:	4b 01       	movw	r8, r22
    2072:	5c 01       	movw	r10, r24
    2074:	0e 94 38 0b 	call	0x1670	; 0x1670 <__fixunssfsi>
    2078:	6b 01       	movw	r12, r22
    207a:	7c 01       	movw	r14, r24
    207c:	4a e0       	ldi	r20, 0x0A	; 10
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	c8 01       	movw	r24, r16
    2082:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN5Print5printEji>
    2086:	c8 0f       	add	r28, r24
    2088:	d9 1f       	adc	r29, r25
    208a:	b6 01       	movw	r22, r12
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__floatunsisf>
    2094:	9b 01       	movw	r18, r22
    2096:	ac 01       	movw	r20, r24
    2098:	c5 01       	movw	r24, r10
    209a:	b4 01       	movw	r22, r8
    209c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__subsf3>
    20a0:	6b 01       	movw	r12, r22
    20a2:	7c 01       	movw	r14, r24
    20a4:	7a 94       	dec	r7
    20a6:	71 10       	cpse	r7, r1
    20a8:	db cf       	rjmp	.-74     	; 0x2060 <_ZN5Print10printFloatEdh+0x14e>
    20aa:	ce 01       	movw	r24, r28
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	7f 90       	pop	r7
    20c6:	08 95       	ret

000020c8 <_ZN5Print7printlnEdi>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
<<<<<<< HEAD
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	ec 01       	movw	r28, r24
=======
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	ec 01       	movw	r28, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
<<<<<<< HEAD
    1798:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <_ZN5Print10printFloatEdh>
    179c:	8c 01       	movw	r16, r24
=======
    20d2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <_ZN5Print10printFloatEdh>
    20d6:	8c 01       	movw	r16, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
<<<<<<< HEAD
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 24 0a 	call	0x1448	; 0x1448 <_ZN5Print7printlnEv>
  return n;
}
    17a4:	80 0f       	add	r24, r16
    17a6:	91 1f       	adc	r25, r17
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <nothing>:
=======
    20d8:	ce 01       	movw	r24, r28
    20da:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_ZN5Print7printlnEv>
  return n;
}
    20de:	80 0f       	add	r24, r16
    20e0:	91 1f       	adc	r25, r17
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	08 95       	ret

000020ec <nothing>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
<<<<<<< HEAD
    17b2:	08 95       	ret

000017b4 <attachInterrupt>:
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	e8 f4       	brcc	.+58     	; 0x17f2 <attachInterrupt+0x3e>
    17b8:	e8 2f       	mov	r30, r24
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	e4 5d       	subi	r30, 0xD4	; 212
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	71 83       	std	Z+1, r23	; 0x01
    17c6:	60 83       	st	Z, r22
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	41 f0       	breq	.+16     	; 0x17dc <attachInterrupt+0x28>
    17cc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17d0:	8c 7f       	andi	r24, 0xFC	; 252
    17d2:	48 2b       	or	r20, r24
    17d4:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17d8:	e8 9a       	sbi	0x1d, 0	; 29
    17da:	08 95       	ret
    17dc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17e0:	83 7f       	andi	r24, 0xF3	; 243
    17e2:	44 0f       	add	r20, r20
    17e4:	55 1f       	adc	r21, r21
    17e6:	44 0f       	add	r20, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	48 2b       	or	r20, r24
    17ec:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    17f0:	e9 9a       	sbi	0x1d, 1	; 29
    17f2:	08 95       	ret

000017f4 <__vector_1>:
=======
    20ec:	08 95       	ret

000020ee <attachInterrupt>:
    20ee:	82 30       	cpi	r24, 0x02	; 2
    20f0:	e8 f4       	brcc	.+58     	; 0x212c <attachInterrupt+0x3e>
    20f2:	e8 2f       	mov	r30, r24
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	e4 5d       	subi	r30, 0xD4	; 212
    20fc:	fe 4f       	sbci	r31, 0xFE	; 254
    20fe:	71 83       	std	Z+1, r23	; 0x01
    2100:	60 83       	st	Z, r22
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	41 f0       	breq	.+16     	; 0x2116 <attachInterrupt+0x28>
    2106:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    210a:	8c 7f       	andi	r24, 0xFC	; 252
    210c:	48 2b       	or	r20, r24
    210e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    2112:	e8 9a       	sbi	0x1d, 0	; 29
    2114:	08 95       	ret
    2116:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    211a:	83 7f       	andi	r24, 0xF3	; 243
    211c:	44 0f       	add	r20, r20
    211e:	55 1f       	adc	r21, r21
    2120:	44 0f       	add	r20, r20
    2122:	55 1f       	adc	r21, r21
    2124:	48 2b       	or	r20, r24
    2126:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    212a:	e9 9a       	sbi	0x1d, 1	; 29
    212c:	08 95       	ret

0000212e <__vector_1>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
<<<<<<< HEAD
    17f4:	1f 92       	push	r1
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	2f 93       	push	r18
    1800:	3f 93       	push	r19
    1802:	4f 93       	push	r20
    1804:	5f 93       	push	r21
    1806:	6f 93       	push	r22
    1808:	7f 93       	push	r23
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	af 93       	push	r26
    1810:	bf 93       	push	r27
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <intFunc>
    181a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <intFunc+0x1>
    181e:	09 95       	icall
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <intFunc+0x2>
    1868:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <intFunc+0x3>
    186c:	09 95       	icall
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_16>:
=======
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	2f 93       	push	r18
    213a:	3f 93       	push	r19
    213c:	4f 93       	push	r20
    213e:	5f 93       	push	r21
    2140:	6f 93       	push	r22
    2142:	7f 93       	push	r23
    2144:	8f 93       	push	r24
    2146:	9f 93       	push	r25
    2148:	af 93       	push	r26
    214a:	bf 93       	push	r27
    214c:	ef 93       	push	r30
    214e:	ff 93       	push	r31
    2150:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <intFunc>
    2154:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <intFunc+0x1>
    2158:	09 95       	icall
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	7f 91       	pop	r23
    2168:	6f 91       	pop	r22
    216a:	5f 91       	pop	r21
    216c:	4f 91       	pop	r20
    216e:	3f 91       	pop	r19
    2170:	2f 91       	pop	r18
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    217c:	1f 92       	push	r1
    217e:	0f 92       	push	r0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	0f 92       	push	r0
    2184:	11 24       	eor	r1, r1
    2186:	2f 93       	push	r18
    2188:	3f 93       	push	r19
    218a:	4f 93       	push	r20
    218c:	5f 93       	push	r21
    218e:	6f 93       	push	r22
    2190:	7f 93       	push	r23
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
    219e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <intFunc+0x2>
    21a2:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <intFunc+0x3>
    21a6:	09 95       	icall
    21a8:	ff 91       	pop	r31
    21aa:	ef 91       	pop	r30
    21ac:	bf 91       	pop	r27
    21ae:	af 91       	pop	r26
    21b0:	9f 91       	pop	r25
    21b2:	8f 91       	pop	r24
    21b4:	7f 91       	pop	r23
    21b6:	6f 91       	pop	r22
    21b8:	5f 91       	pop	r21
    21ba:	4f 91       	pop	r20
    21bc:	3f 91       	pop	r19
    21be:	2f 91       	pop	r18
    21c0:	0f 90       	pop	r0
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	0f 90       	pop	r0
    21c6:	1f 90       	pop	r1
    21c8:	18 95       	reti

000021ca <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    21ca:	1f 92       	push	r1
    21cc:	0f 92       	push	r0
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	0f 92       	push	r0
    21d2:	11 24       	eor	r1, r1
    21d4:	2f 93       	push	r18
    21d6:	3f 93       	push	r19
    21d8:	8f 93       	push	r24
    21da:	9f 93       	push	r25
    21dc:	af 93       	push	r26
    21de:	bf 93       	push	r27
    21e0:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <timer0_millis>
    21e4:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <timer0_millis+0x1>
    21e8:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <timer0_millis+0x2>
    21ec:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <timer0_millis+0x3>
    21f0:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <timer0_fract>
    21f4:	23 e0       	ldi	r18, 0x03	; 3
    21f6:	23 0f       	add	r18, r19
    21f8:	2d 37       	cpi	r18, 0x7D	; 125
    21fa:	20 f4       	brcc	.+8      	; 0x2204 <__vector_16+0x3a>
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	a1 1d       	adc	r26, r1
    2200:	b1 1d       	adc	r27, r1
    2202:	05 c0       	rjmp	.+10     	; 0x220e <__vector_16+0x44>
    2204:	26 e8       	ldi	r18, 0x86	; 134
    2206:	23 0f       	add	r18, r19
    2208:	02 96       	adiw	r24, 0x02	; 2
    220a:	a1 1d       	adc	r26, r1
    220c:	b1 1d       	adc	r27, r1
    220e:	20 93 11 04 	sts	0x0411, r18	; 0x800411 <timer0_fract>
    2212:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <timer0_millis>
    2216:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <timer0_millis+0x1>
    221a:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <timer0_millis+0x2>
    221e:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <timer0_millis+0x3>
    2222:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    2226:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    222a:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    222e:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	a1 1d       	adc	r26, r1
    2236:	b1 1d       	adc	r27, r1
    2238:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <timer0_overflow_count>
    223c:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <timer0_overflow_count+0x1>
    2240:	a0 93 18 04 	sts	0x0418, r26	; 0x800418 <timer0_overflow_count+0x2>
    2244:	b0 93 19 04 	sts	0x0419, r27	; 0x800419 <timer0_overflow_count+0x3>
    2248:	bf 91       	pop	r27
    224a:	af 91       	pop	r26
    224c:	9f 91       	pop	r25
    224e:	8f 91       	pop	r24
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	0f 90       	pop	r0
    225a:	1f 90       	pop	r1
    225c:	18 95       	reti

0000225e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    225e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2260:	f8 94       	cli
	m = timer0_overflow_count;
    2262:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    2266:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    226a:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    226e:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2272:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2274:	a8 9b       	sbis	0x15, 0	; 21
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <micros+0x24>
    2278:	2f 3f       	cpi	r18, 0xFF	; 255
    227a:	19 f0       	breq	.+6      	; 0x2282 <micros+0x24>
		m++;
    227c:	01 96       	adiw	r24, 0x01	; 1
    227e:	a1 1d       	adc	r26, r1
    2280:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2282:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2284:	ba 2f       	mov	r27, r26
    2286:	a9 2f       	mov	r26, r25
    2288:	98 2f       	mov	r25, r24
    228a:	88 27       	eor	r24, r24
    228c:	82 0f       	add	r24, r18
    228e:	91 1d       	adc	r25, r1
    2290:	a1 1d       	adc	r26, r1
    2292:	b1 1d       	adc	r27, r1
    2294:	bc 01       	movw	r22, r24
    2296:	cd 01       	movw	r24, r26
    2298:	42 e0       	ldi	r20, 0x02	; 2
    229a:	66 0f       	add	r22, r22
    229c:	77 1f       	adc	r23, r23
    229e:	88 1f       	adc	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	4a 95       	dec	r20
    22a4:	d1 f7       	brne	.-12     	; 0x229a <micros+0x3c>
}
    22a6:	08 95       	ret

000022a8 <delay>:

void delay(unsigned long ms)
{
    22a8:	8f 92       	push	r8
    22aa:	9f 92       	push	r9
    22ac:	af 92       	push	r10
    22ae:	bf 92       	push	r11
    22b0:	cf 92       	push	r12
    22b2:	df 92       	push	r13
    22b4:	ef 92       	push	r14
    22b6:	ff 92       	push	r15
    22b8:	6b 01       	movw	r12, r22
    22ba:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    22bc:	0e 94 2f 11 	call	0x225e	; 0x225e <micros>
    22c0:	4b 01       	movw	r8, r22
    22c2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    22c4:	c1 14       	cp	r12, r1
    22c6:	d1 04       	cpc	r13, r1
    22c8:	e1 04       	cpc	r14, r1
    22ca:	f1 04       	cpc	r15, r1
    22cc:	01 f1       	breq	.+64     	; 0x230e <delay+0x66>
		yield();
    22ce:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    22d2:	0e 94 2f 11 	call	0x225e	; 0x225e <micros>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	88 19       	sub	r24, r8
    22dc:	99 09       	sbc	r25, r9
    22de:	aa 09       	sbc	r26, r10
    22e0:	bb 09       	sbc	r27, r11
    22e2:	88 3e       	cpi	r24, 0xE8	; 232
    22e4:	93 40       	sbci	r25, 0x03	; 3
    22e6:	a1 05       	cpc	r26, r1
    22e8:	b1 05       	cpc	r27, r1
    22ea:	60 f3       	brcs	.-40     	; 0x22c4 <delay+0x1c>
			ms--;
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	c2 1a       	sub	r12, r18
    22f0:	d1 08       	sbc	r13, r1
    22f2:	e1 08       	sbc	r14, r1
    22f4:	f1 08       	sbc	r15, r1
			start += 1000;
    22f6:	88 ee       	ldi	r24, 0xE8	; 232
    22f8:	88 0e       	add	r8, r24
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	98 1e       	adc	r9, r24
    22fe:	a1 1c       	adc	r10, r1
    2300:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2302:	c1 14       	cp	r12, r1
    2304:	d1 04       	cpc	r13, r1
    2306:	e1 04       	cpc	r14, r1
    2308:	f1 04       	cpc	r15, r1
    230a:	19 f7       	brne	.-58     	; 0x22d2 <delay+0x2a>
    230c:	db cf       	rjmp	.-74     	; 0x22c4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    230e:	ff 90       	pop	r15
    2310:	ef 90       	pop	r14
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	bf 90       	pop	r11
    2318:	af 90       	pop	r10
    231a:	9f 90       	pop	r9
    231c:	8f 90       	pop	r8
    231e:	08 95       	ret

00002320 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	91 05       	cpc	r25, r1
    2324:	38 f0       	brcs	.+14     	; 0x2334 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    232e:	05 97       	sbiw	r24, 0x05	; 5
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	

#endif

	// busy wait
	__asm__ __volatile__ (
<<<<<<< HEAD
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	af 93       	push	r26
    18a4:	bf 93       	push	r27
    18a6:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <timer0_millis>
    18aa:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <timer0_millis+0x1>
    18ae:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <timer0_millis+0x2>
    18b2:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <timer0_millis+0x3>
    18b6:	30 91 11 04 	lds	r19, 0x0411	; 0x800411 <timer0_fract>
    18ba:	23 e0       	ldi	r18, 0x03	; 3
    18bc:	23 0f       	add	r18, r19
    18be:	2d 37       	cpi	r18, 0x7D	; 125
    18c0:	20 f4       	brcc	.+8      	; 0x18ca <__vector_16+0x3a>
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	b1 1d       	adc	r27, r1
    18c8:	05 c0       	rjmp	.+10     	; 0x18d4 <__vector_16+0x44>
    18ca:	26 e8       	ldi	r18, 0x86	; 134
    18cc:	23 0f       	add	r18, r19
    18ce:	02 96       	adiw	r24, 0x02	; 2
    18d0:	a1 1d       	adc	r26, r1
    18d2:	b1 1d       	adc	r27, r1
    18d4:	20 93 11 04 	sts	0x0411, r18	; 0x800411 <timer0_fract>
    18d8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <timer0_millis>
    18dc:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <timer0_millis+0x1>
    18e0:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <timer0_millis+0x2>
    18e4:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <timer0_millis+0x3>
    18e8:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    18ec:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    18f0:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    18f4:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	a1 1d       	adc	r26, r1
    18fc:	b1 1d       	adc	r27, r1
    18fe:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <timer0_overflow_count>
    1902:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <timer0_overflow_count+0x1>
    1906:	a0 93 18 04 	sts	0x0418, r26	; 0x800418 <timer0_overflow_count+0x2>
    190a:	b0 93 19 04 	sts	0x0419, r27	; 0x800419 <timer0_overflow_count+0x3>
    190e:	bf 91       	pop	r27
    1910:	af 91       	pop	r26
    1912:	9f 91       	pop	r25
    1914:	8f 91       	pop	r24
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	0f 90       	pop	r0
    1920:	1f 90       	pop	r1
    1922:	18 95       	reti

00001924 <micros>:
    1924:	3f b7       	in	r19, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <timer0_overflow_count>
    192c:	90 91 17 04 	lds	r25, 0x0417	; 0x800417 <timer0_overflow_count+0x1>
    1930:	a0 91 18 04 	lds	r26, 0x0418	; 0x800418 <timer0_overflow_count+0x2>
    1934:	b0 91 19 04 	lds	r27, 0x0419	; 0x800419 <timer0_overflow_count+0x3>
    1938:	26 b5       	in	r18, 0x26	; 38
    193a:	a8 9b       	sbis	0x15, 0	; 21
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <micros+0x24>
    193e:	2f 3f       	cpi	r18, 0xFF	; 255
    1940:	19 f0       	breq	.+6      	; 0x1948 <micros+0x24>
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	a1 1d       	adc	r26, r1
    1946:	b1 1d       	adc	r27, r1
    1948:	3f bf       	out	0x3f, r19	; 63
    194a:	ba 2f       	mov	r27, r26
    194c:	a9 2f       	mov	r26, r25
    194e:	98 2f       	mov	r25, r24
    1950:	88 27       	eor	r24, r24
    1952:	82 0f       	add	r24, r18
    1954:	91 1d       	adc	r25, r1
    1956:	a1 1d       	adc	r26, r1
    1958:	b1 1d       	adc	r27, r1
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	42 e0       	ldi	r20, 0x02	; 2
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	4a 95       	dec	r20
    196a:	d1 f7       	brne	.-12     	; 0x1960 <micros+0x3c>
    196c:	08 95       	ret

0000196e <delay>:
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	6b 01       	movw	r12, r22
    1980:	7c 01       	movw	r14, r24
    1982:	0e 94 92 0c 	call	0x1924	; 0x1924 <micros>
    1986:	4b 01       	movw	r8, r22
    1988:	5c 01       	movw	r10, r24
    198a:	c1 14       	cp	r12, r1
    198c:	d1 04       	cpc	r13, r1
    198e:	e1 04       	cpc	r14, r1
    1990:	f1 04       	cpc	r15, r1
    1992:	01 f1       	breq	.+64     	; 0x19d4 <delay+0x66>
    1994:	0e 94 36 19 	call	0x326c	; 0x326c <yield>
    1998:	0e 94 92 0c 	call	0x1924	; 0x1924 <micros>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	88 19       	sub	r24, r8
    19a2:	99 09       	sbc	r25, r9
    19a4:	aa 09       	sbc	r26, r10
    19a6:	bb 09       	sbc	r27, r11
    19a8:	88 3e       	cpi	r24, 0xE8	; 232
    19aa:	93 40       	sbci	r25, 0x03	; 3
    19ac:	a1 05       	cpc	r26, r1
    19ae:	b1 05       	cpc	r27, r1
    19b0:	60 f3       	brcs	.-40     	; 0x198a <delay+0x1c>
    19b2:	21 e0       	ldi	r18, 0x01	; 1
    19b4:	c2 1a       	sub	r12, r18
    19b6:	d1 08       	sbc	r13, r1
    19b8:	e1 08       	sbc	r14, r1
    19ba:	f1 08       	sbc	r15, r1
    19bc:	88 ee       	ldi	r24, 0xE8	; 232
    19be:	88 0e       	add	r8, r24
    19c0:	83 e0       	ldi	r24, 0x03	; 3
    19c2:	98 1e       	adc	r9, r24
    19c4:	a1 1c       	adc	r10, r1
    19c6:	b1 1c       	adc	r11, r1
    19c8:	c1 14       	cp	r12, r1
    19ca:	d1 04       	cpc	r13, r1
    19cc:	e1 04       	cpc	r14, r1
    19ce:	f1 04       	cpc	r15, r1
    19d0:	19 f7       	brne	.-58     	; 0x1998 <delay+0x2a>
    19d2:	db cf       	rjmp	.-74     	; 0x198a <delay+0x1c>
    19d4:	ff 90       	pop	r15
    19d6:	ef 90       	pop	r14
    19d8:	df 90       	pop	r13
    19da:	cf 90       	pop	r12
    19dc:	bf 90       	pop	r11
    19de:	af 90       	pop	r10
    19e0:	9f 90       	pop	r9
    19e2:	8f 90       	pop	r8
    19e4:	08 95       	ret

000019e6 <init>:
=======
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <delayMicroseconds+0x10>
    2334:	08 95       	ret

00002336 <init>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
<<<<<<< HEAD
    19e6:	78 94       	sei
=======
    2336:	78 94       	sei
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
<<<<<<< HEAD
    19e8:	84 b5       	in	r24, 0x24	; 36
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    19ee:	84 b5       	in	r24, 0x24	; 36
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	84 bd       	out	0x24, r24	; 36
=======
    2338:	84 b5       	in	r24, 0x24	; 36
    233a:	82 60       	ori	r24, 0x02	; 2
    233c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    233e:	84 b5       	in	r24, 0x24	; 36
    2340:	81 60       	ori	r24, 0x01	; 1
    2342:	84 bd       	out	0x24, r24	; 36
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
<<<<<<< HEAD
    19f4:	85 b5       	in	r24, 0x25	; 37
    19f6:	82 60       	ori	r24, 0x02	; 2
    19f8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    19fa:	85 b5       	in	r24, 0x25	; 37
    19fc:	81 60       	ori	r24, 0x01	; 1
    19fe:	85 bd       	out	0x25, r24	; 37
=======
    2344:	85 b5       	in	r24, 0x25	; 37
    2346:	82 60       	ori	r24, 0x02	; 2
    2348:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    234a:	85 b5       	in	r24, 0x25	; 37
    234c:	81 60       	ori	r24, 0x01	; 1
    234e:	85 bd       	out	0x25, r24	; 37
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
<<<<<<< HEAD
    1a00:	ee e6       	ldi	r30, 0x6E	; 110
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	80 83       	st	Z, r24
=======
    2350:	ee e6       	ldi	r30, 0x6E	; 110
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	81 60       	ori	r24, 0x01	; 1
    2358:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
<<<<<<< HEAD
    1a0a:	e1 e8       	ldi	r30, 0x81	; 129
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a10:	80 81       	ld	r24, Z
    1a12:	82 60       	ori	r24, 0x02	; 2
    1a14:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a16:	80 81       	ld	r24, Z
    1a18:	81 60       	ori	r24, 0x01	; 1
    1a1a:	80 83       	st	Z, r24
=======
    235a:	e1 e8       	ldi	r30, 0x81	; 129
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2360:	80 81       	ld	r24, Z
    2362:	82 60       	ori	r24, 0x02	; 2
    2364:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2366:	80 81       	ld	r24, Z
    2368:	81 60       	ori	r24, 0x01	; 1
    236a:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
<<<<<<< HEAD
    1a1c:	e0 e8       	ldi	r30, 0x80	; 128
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	81 60       	ori	r24, 0x01	; 1
    1a24:	80 83       	st	Z, r24
=======
    236c:	e0 e8       	ldi	r30, 0x80	; 128
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	81 60       	ori	r24, 0x01	; 1
    2374:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
<<<<<<< HEAD
    1a26:	e1 eb       	ldi	r30, 0xB1	; 177
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	84 60       	ori	r24, 0x04	; 4
    1a2e:	80 83       	st	Z, r24
=======
    2376:	e1 eb       	ldi	r30, 0xB1	; 177
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	84 60       	ori	r24, 0x04	; 4
    237e:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
<<<<<<< HEAD
    1a30:	e0 eb       	ldi	r30, 0xB0	; 176
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	81 60       	ori	r24, 0x01	; 1
    1a38:	80 83       	st	Z, r24
=======
    2380:	e0 eb       	ldi	r30, 0xB0	; 176
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	81 60       	ori	r24, 0x01	; 1
    2388:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
<<<<<<< HEAD
    1a3a:	ea e7       	ldi	r30, 0x7A	; 122
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	84 60       	ori	r24, 0x04	; 4
    1a42:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1a44:	80 81       	ld	r24, Z
    1a46:	82 60       	ori	r24, 0x02	; 2
    1a48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 60       	ori	r24, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
=======
    238a:	ea e7       	ldi	r30, 0x7A	; 122
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	84 60       	ori	r24, 0x04	; 4
    2392:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2394:	80 81       	ld	r24, Z
    2396:	82 60       	ori	r24, 0x02	; 2
    2398:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    239a:	80 81       	ld	r24, Z
    239c:	81 60       	ori	r24, 0x01	; 1
    239e:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
<<<<<<< HEAD
    1a50:	80 81       	ld	r24, Z
    1a52:	80 68       	ori	r24, 0x80	; 128
    1a54:	80 83       	st	Z, r24
=======
    23a0:	80 81       	ld	r24, Z
    23a2:	80 68       	ori	r24, 0x80	; 128
    23a4:	80 83       	st	Z, r24
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
<<<<<<< HEAD
    1a56:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1a5a:	08 95       	ret

00001a5c <analogWrite>:
=======
    23a6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    23aa:	08 95       	ret

000023ac <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    23ac:	8e 30       	cpi	r24, 0x0E	; 14
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <analogRead+0x6>
    23b0:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    23b2:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <analog_reference>
    23b6:	90 e4       	ldi	r25, 0x40	; 64
    23b8:	29 9f       	mul	r18, r25
    23ba:	90 01       	movw	r18, r0
    23bc:	11 24       	eor	r1, r1
    23be:	87 70       	andi	r24, 0x07	; 7
    23c0:	82 2b       	or	r24, r18
    23c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    23c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23ca:	80 64       	ori	r24, 0x40	; 64
    23cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    23d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    23d4:	86 fd       	sbrc	r24, 6
    23d6:	fc cf       	rjmp	.-8      	; 0x23d0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    23d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    23dc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    23e0:	90 e0       	ldi	r25, 0x00	; 0
}
    23e2:	92 2b       	or	r25, r18
    23e4:	08 95       	ret

000023e6 <analogWrite>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
<<<<<<< HEAD
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	18 2f       	mov	r17, r24
    1a64:	eb 01       	movw	r28, r22
=======
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	18 2f       	mov	r17, r24
    23ee:	eb 01       	movw	r28, r22
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
<<<<<<< HEAD
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <pinMode>
	if (val == 0)
    1a6c:	20 97       	sbiw	r28, 0x00	; 0
    1a6e:	11 f4       	brne	.+4      	; 0x1a74 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <analogWrite+0x20>
	}
	else if (val == 255)
    1a74:	cf 3f       	cpi	r28, 0xFF	; 255
    1a76:	d1 05       	cpc	r29, r1
    1a78:	39 f4       	brne	.+14     	; 0x1a88 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	81 2f       	mov	r24, r17
=======
    23f0:	61 e0       	ldi	r22, 0x01	; 1
    23f2:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <pinMode>
	if (val == 0)
    23f6:	20 97       	sbiw	r28, 0x00	; 0
    23f8:	11 f4       	brne	.+4      	; 0x23fe <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <analogWrite+0x20>
	}
	else if (val == 255)
    23fe:	cf 3f       	cpi	r28, 0xFF	; 255
    2400:	d1 05       	cpc	r29, r1
    2402:	39 f4       	brne	.+14     	; 0x2412 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	81 2f       	mov	r24, r17
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
<<<<<<< HEAD
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
=======
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	1f 91       	pop	r17
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
<<<<<<< HEAD
    1a84:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
=======
    240e:	0c 94 b7 12 	jmp	0x256e	; 0x256e <digitalWrite>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	}
	else
	{
		switch(digitalPinToTimer(pin))
<<<<<<< HEAD
    1a88:	e1 2f       	mov	r30, r17
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	ee 56       	subi	r30, 0x6E	; 110
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	e4 91       	lpm	r30, Z
    1a92:	e3 30       	cpi	r30, 0x03	; 3
    1a94:	f9 f0       	breq	.+62     	; 0x1ad4 <analogWrite+0x78>
    1a96:	48 f4       	brcc	.+18     	; 0x1aaa <analogWrite+0x4e>
    1a98:	e1 30       	cpi	r30, 0x01	; 1
    1a9a:	b9 f0       	breq	.+46     	; 0x1aca <analogWrite+0x6e>
    1a9c:	e2 30       	cpi	r30, 0x02	; 2
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <analogWrite+0xac>
=======
    2412:	e1 2f       	mov	r30, r17
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	ee 54       	subi	r30, 0x4E	; 78
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	e4 91       	lpm	r30, Z
    241c:	e3 30       	cpi	r30, 0x03	; 3
    241e:	f9 f0       	breq	.+62     	; 0x245e <analogWrite+0x78>
    2420:	48 f4       	brcc	.+18     	; 0x2434 <analogWrite+0x4e>
    2422:	e1 30       	cpi	r30, 0x01	; 1
    2424:	b9 f0       	breq	.+46     	; 0x2454 <analogWrite+0x6e>
    2426:	e2 30       	cpi	r30, 0x02	; 2
    2428:	a1 f5       	brne	.+104    	; 0x2492 <analogWrite+0xac>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
<<<<<<< HEAD
    1aa0:	84 b5       	in	r24, 0x24	; 36
    1aa2:	80 62       	ori	r24, 0x20	; 32
    1aa4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1aa6:	c8 bd       	out	0x28, r28	; 40
				break;
    1aa8:	34 c0       	rjmp	.+104    	; 0x1b12 <analogWrite+0xb6>
=======
    242a:	84 b5       	in	r24, 0x24	; 36
    242c:	80 62       	ori	r24, 0x20	; 32
    242e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2430:	c8 bd       	out	0x28, r28	; 40
				break;
    2432:	34 c0       	rjmp	.+104    	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
<<<<<<< HEAD
    1aaa:	e7 30       	cpi	r30, 0x07	; 7
    1aac:	e9 f0       	breq	.+58     	; 0x1ae8 <analogWrite+0x8c>
    1aae:	e8 30       	cpi	r30, 0x08	; 8
    1ab0:	19 f1       	breq	.+70     	; 0x1af8 <analogWrite+0x9c>
    1ab2:	e4 30       	cpi	r30, 0x04	; 4
    1ab4:	49 f5       	brne	.+82     	; 0x1b08 <analogWrite+0xac>
=======
    2434:	e7 30       	cpi	r30, 0x07	; 7
    2436:	e9 f0       	breq	.+58     	; 0x2472 <analogWrite+0x8c>
    2438:	e8 30       	cpi	r30, 0x08	; 8
    243a:	19 f1       	breq	.+70     	; 0x2482 <analogWrite+0x9c>
    243c:	e4 30       	cpi	r30, 0x04	; 4
    243e:	49 f5       	brne	.+82     	; 0x2492 <analogWrite+0xac>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
<<<<<<< HEAD
    1ab6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    1ac0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1ac4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    1ac8:	24 c0       	rjmp	.+72     	; 0x1b12 <analogWrite+0xb6>
=======
    2440:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2444:	80 62       	ori	r24, 0x20	; 32
    2446:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1B = val; // set pwm duty
    244a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    244e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				break;
    2452:	24 c0       	rjmp	.+72     	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
<<<<<<< HEAD
    1aca:	84 b5       	in	r24, 0x24	; 36
    1acc:	80 68       	ori	r24, 0x80	; 128
    1ace:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1ad0:	c7 bd       	out	0x27, r28	; 39
				break;
    1ad2:	1f c0       	rjmp	.+62     	; 0x1b12 <analogWrite+0xb6>
=======
    2454:	84 b5       	in	r24, 0x24	; 36
    2456:	80 68       	ori	r24, 0x80	; 128
    2458:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    245a:	c7 bd       	out	0x27, r28	; 39
				break;
    245c:	1f c0       	rjmp	.+62     	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
<<<<<<< HEAD
    1ad4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1ad8:	80 68       	ori	r24, 0x80	; 128
    1ada:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    1ade:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1ae2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    1ae6:	15 c0       	rjmp	.+42     	; 0x1b12 <analogWrite+0xb6>
=======
    245e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2462:	80 68       	ori	r24, 0x80	; 128
    2464:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
				OCR1A = val; // set pwm duty
    2468:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    246c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
				break;
    2470:	15 c0       	rjmp	.+42     	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
<<<<<<< HEAD
    1ae8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    1af2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    1af6:	0d c0       	rjmp	.+26     	; 0x1b12 <analogWrite+0xb6>
=======
    2472:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2A = val; // set pwm duty
    247c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
				break;
    2480:	0d c0       	rjmp	.+26     	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
<<<<<<< HEAD
    1af8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1afc:	80 62       	ori	r24, 0x20	; 32
    1afe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    1b02:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <analogWrite+0xb6>
=======
    2482:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2486:	80 62       	ori	r24, 0x20	; 32
    2488:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
				OCR2B = val; // set pwm duty
    248c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
				break;
    2490:	05 c0       	rjmp	.+10     	; 0x249c <analogWrite+0xb6>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
<<<<<<< HEAD
    1b08:	c0 38       	cpi	r28, 0x80	; 128
    1b0a:	d1 05       	cpc	r29, r1
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <analogWrite+0xb4>
    1b0e:	b5 cf       	rjmp	.-150    	; 0x1a7a <analogWrite+0x1e>
    1b10:	af cf       	rjmp	.-162    	; 0x1a70 <analogWrite+0x14>
=======
    2492:	c0 38       	cpi	r28, 0x80	; 128
    2494:	d1 05       	cpc	r29, r1
    2496:	0c f0       	brlt	.+2      	; 0x249a <analogWrite+0xb4>
    2498:	b5 cf       	rjmp	.-150    	; 0x2404 <analogWrite+0x1e>
    249a:	af cf       	rjmp	.-162    	; 0x23fa <analogWrite+0x14>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
<<<<<<< HEAD
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	1f 91       	pop	r17
    1b18:	08 95       	ret

00001b1a <turnOffPWM>:
=======
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	08 95       	ret

000024a4 <turnOffPWM>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
<<<<<<< HEAD
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <turnOffPWM+0x24>
    1b1e:	28 f4       	brcc	.+10     	; 0x1b2a <turnOffPWM+0x10>
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	99 f0       	breq	.+38     	; 0x1b4a <turnOffPWM+0x30>
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	a1 f0       	breq	.+40     	; 0x1b50 <turnOffPWM+0x36>
    1b28:	08 95       	ret
    1b2a:	87 30       	cpi	r24, 0x07	; 7
    1b2c:	a9 f0       	breq	.+42     	; 0x1b58 <turnOffPWM+0x3e>
    1b2e:	88 30       	cpi	r24, 0x08	; 8
    1b30:	b9 f0       	breq	.+46     	; 0x1b60 <turnOffPWM+0x46>
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	d1 f4       	brne	.+52     	; 0x1b6a <turnOffPWM+0x50>
=======
    24a4:	83 30       	cpi	r24, 0x03	; 3
    24a6:	81 f0       	breq	.+32     	; 0x24c8 <turnOffPWM+0x24>
    24a8:	28 f4       	brcc	.+10     	; 0x24b4 <turnOffPWM+0x10>
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	99 f0       	breq	.+38     	; 0x24d4 <turnOffPWM+0x30>
    24ae:	82 30       	cpi	r24, 0x02	; 2
    24b0:	a1 f0       	breq	.+40     	; 0x24da <turnOffPWM+0x36>
    24b2:	08 95       	ret
    24b4:	87 30       	cpi	r24, 0x07	; 7
    24b6:	a9 f0       	breq	.+42     	; 0x24e2 <turnOffPWM+0x3e>
    24b8:	88 30       	cpi	r24, 0x08	; 8
    24ba:	b9 f0       	breq	.+46     	; 0x24ea <turnOffPWM+0x46>
    24bc:	84 30       	cpi	r24, 0x04	; 4
    24be:	d1 f4       	brne	.+52     	; 0x24f4 <turnOffPWM+0x50>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
<<<<<<< HEAD
    1b36:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b3a:	8f 7d       	andi	r24, 0xDF	; 223
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <turnOffPWM+0x2a>
=======
    24c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24c4:	8f 7d       	andi	r24, 0xDF	; 223
    24c6:	03 c0       	rjmp	.+6      	; 0x24ce <turnOffPWM+0x2a>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
<<<<<<< HEAD
    1b3e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b42:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b44:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1b48:	08 95       	ret
=======
    24c8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24cc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24d2:	08 95       	ret
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
<<<<<<< HEAD
    1b4a:	84 b5       	in	r24, 0x24	; 36
    1b4c:	8f 77       	andi	r24, 0x7F	; 127
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <turnOffPWM+0x3a>
=======
    24d4:	84 b5       	in	r24, 0x24	; 36
    24d6:	8f 77       	andi	r24, 0x7F	; 127
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <turnOffPWM+0x3a>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
<<<<<<< HEAD
    1b50:	84 b5       	in	r24, 0x24	; 36
    1b52:	8f 7d       	andi	r24, 0xDF	; 223
    1b54:	84 bd       	out	0x24, r24	; 36
    1b56:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b58:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b5c:	8f 77       	andi	r24, 0x7F	; 127
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b60:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b64:	8f 7d       	andi	r24, 0xDF	; 223
    1b66:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1b6a:	08 95       	ret

00001b6c <pinMode>:
=======
    24da:	84 b5       	in	r24, 0x24	; 36
    24dc:	8f 7d       	andi	r24, 0xDF	; 223
    24de:	84 bd       	out	0x24, r24	; 36
    24e0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    24e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24e6:	8f 77       	andi	r24, 0x7F	; 127
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    24ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24ee:	8f 7d       	andi	r24, 0xDF	; 223
    24f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24f4:	08 95       	ret

000024f6 <pinMode>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
<<<<<<< HEAD
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	fc 01       	movw	r30, r24
    1b74:	ea 55       	subi	r30, 0x5A	; 90
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	e6 54       	subi	r30, 0x46	; 70
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b82:	88 23       	and	r24, r24
    1b84:	61 f1       	breq	.+88     	; 0x1bde <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	88 0f       	add	r24, r24
    1b8a:	99 1f       	adc	r25, r25
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	ee 51       	subi	r30, 0x1E	; 30
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	c5 91       	lpm	r28, Z+
    1b94:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b96:	fc 01       	movw	r30, r24
    1b98:	e8 52       	subi	r30, 0x28	; 40
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	a5 91       	lpm	r26, Z+
    1b9e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1ba0:	61 11       	cpse	r22, r1
    1ba2:	09 c0       	rjmp	.+18     	; 0x1bb6 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1ba4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ba6:	f8 94       	cli
		*reg &= ~bit;
    1ba8:	88 81       	ld	r24, Y
    1baa:	20 95       	com	r18
    1bac:	82 23       	and	r24, r18
    1bae:	88 83       	st	Y, r24
		*out &= ~bit;
    1bb0:	ec 91       	ld	r30, X
    1bb2:	2e 23       	and	r18, r30
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1bb6:	62 30       	cpi	r22, 0x02	; 2
    1bb8:	61 f4       	brne	.+24     	; 0x1bd2 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1bba:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1bbc:	f8 94       	cli
		*reg &= ~bit;
    1bbe:	88 81       	ld	r24, Y
    1bc0:	32 2f       	mov	r19, r18
    1bc2:	30 95       	com	r19
    1bc4:	83 23       	and	r24, r19
    1bc6:	88 83       	st	Y, r24
		*out |= bit;
    1bc8:	ec 91       	ld	r30, X
    1bca:	2e 2b       	or	r18, r30
    1bcc:	2c 93       	st	X, r18
		SREG = oldSREG;
    1bce:	9f bf       	out	0x3f, r25	; 63
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1bd2:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1bd4:	f8 94       	cli
		*reg |= bit;
    1bd6:	e8 81       	ld	r30, Y
    1bd8:	2e 2b       	or	r18, r30
    1bda:	28 83       	st	Y, r18
		SREG = oldSREG;
    1bdc:	8f bf       	out	0x3f, r24	; 63
	}
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <digitalWrite>:
=======
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	fc 01       	movw	r30, r24
    24fe:	ea 53       	subi	r30, 0x3A	; 58
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2504:	fc 01       	movw	r30, r24
    2506:	e6 52       	subi	r30, 0x26	; 38
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    250c:	88 23       	and	r24, r24
    250e:	61 f1       	breq	.+88     	; 0x2568 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	fc 01       	movw	r30, r24
    2518:	ee 5f       	subi	r30, 0xFE	; 254
    251a:	fe 4f       	sbci	r31, 0xFE	; 254
    251c:	c5 91       	lpm	r28, Z+
    251e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2520:	fc 01       	movw	r30, r24
    2522:	e8 50       	subi	r30, 0x08	; 8
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	a5 91       	lpm	r26, Z+
    2528:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    252a:	61 11       	cpse	r22, r1
    252c:	09 c0       	rjmp	.+18     	; 0x2540 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    252e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2530:	f8 94       	cli
		*reg &= ~bit;
    2532:	88 81       	ld	r24, Y
    2534:	20 95       	com	r18
    2536:	82 23       	and	r24, r18
    2538:	88 83       	st	Y, r24
		*out &= ~bit;
    253a:	ec 91       	ld	r30, X
    253c:	2e 23       	and	r18, r30
    253e:	0b c0       	rjmp	.+22     	; 0x2556 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2540:	62 30       	cpi	r22, 0x02	; 2
    2542:	61 f4       	brne	.+24     	; 0x255c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2544:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2546:	f8 94       	cli
		*reg &= ~bit;
    2548:	88 81       	ld	r24, Y
    254a:	32 2f       	mov	r19, r18
    254c:	30 95       	com	r19
    254e:	83 23       	and	r24, r19
    2550:	88 83       	st	Y, r24
		*out |= bit;
    2552:	ec 91       	ld	r30, X
    2554:	2e 2b       	or	r18, r30
    2556:	2c 93       	st	X, r18
		SREG = oldSREG;
    2558:	9f bf       	out	0x3f, r25	; 63
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    255c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    255e:	f8 94       	cli
		*reg |= bit;
    2560:	e8 81       	ld	r30, Y
    2562:	2e 2b       	or	r18, r30
    2564:	28 83       	st	Y, r18
		SREG = oldSREG;
    2566:	8f bf       	out	0x3f, r24	; 63
	}
}
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <digitalWrite>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
<<<<<<< HEAD
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	f9 01       	movw	r30, r18
    1bf0:	ee 56       	subi	r30, 0x6E	; 110
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bf6:	f9 01       	movw	r30, r18
    1bf8:	ea 55       	subi	r30, 0x5A	; 90
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bfe:	f9 01       	movw	r30, r18
    1c00:	e6 54       	subi	r30, 0x46	; 70
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c06:	cc 23       	and	r28, r28
    1c08:	c1 f0       	breq	.+48     	; 0x1c3a <digitalWrite+0x56>
    1c0a:	16 2f       	mov	r17, r22
=======
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	f9 01       	movw	r30, r18
    257a:	ee 54       	subi	r30, 0x4E	; 78
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2580:	f9 01       	movw	r30, r18
    2582:	ea 53       	subi	r30, 0x3A	; 58
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2588:	f9 01       	movw	r30, r18
    258a:	e6 52       	subi	r30, 0x26	; 38
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2590:	cc 23       	and	r28, r28
    2592:	c1 f0       	breq	.+48     	; 0x25c4 <digitalWrite+0x56>
    2594:	16 2f       	mov	r17, r22
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
<<<<<<< HEAD
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <turnOffPWM>

	out = portOutputRegister(port);
    1c12:	ec 2f       	mov	r30, r28
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	ee 0f       	add	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	e8 52       	subi	r30, 0x28	; 40
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	a5 91       	lpm	r26, Z+
    1c20:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c22:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c24:	f8 94       	cli

	if (val == LOW) {
    1c26:	11 11       	cpse	r17, r1
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <digitalWrite+0x4e>
		*out &= ~bit;
    1c2a:	8c 91       	ld	r24, X
    1c2c:	d0 95       	com	r29
    1c2e:	d8 23       	and	r29, r24
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1c32:	ec 91       	ld	r30, X
    1c34:	de 2b       	or	r29, r30
    1c36:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c38:	9f bf       	out	0x3f, r25	; 63
}
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	08 95       	ret

00001c42 <prvIsQueueEmpty>:
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	0f 92       	push	r0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c4c:	0f 90       	pop	r0
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	91 11       	cpse	r25, r1
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	08 95       	ret

00001c58 <prvCopyDataToQueue>:
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ec 01       	movw	r28, r24
    1c62:	04 2f       	mov	r16, r20
    1c64:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1c66:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1c68:	41 11       	cpse	r20, r1
    1c6a:	0b c0       	rjmp	.+22     	; 0x1c82 <prvCopyDataToQueue+0x2a>
    1c6c:	88 81       	ld	r24, Y
    1c6e:	99 81       	ldd	r25, Y+1	; 0x01
    1c70:	89 2b       	or	r24, r25
    1c72:	e9 f5       	brne	.+122    	; 0x1cee <prvCopyDataToQueue+0x96>
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <xTaskPriorityDisinherit>
    1c7c:	1d 82       	std	Y+5, r1	; 0x05
    1c7e:	1c 82       	std	Y+4, r1	; 0x04
    1c80:	37 c0       	rjmp	.+110    	; 0x1cf0 <prvCopyDataToQueue+0x98>
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	01 11       	cpse	r16, r1
    1c86:	15 c0       	rjmp	.+42     	; 0x1cb2 <prvCopyDataToQueue+0x5a>
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <memcpy>
    1c90:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	82 0f       	add	r24, r18
    1c98:	91 1d       	adc	r25, r1
    1c9a:	9b 83       	std	Y+3, r25	; 0x03
    1c9c:	8a 83       	std	Y+2, r24	; 0x02
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	82 17       	cp	r24, r18
    1ca4:	93 07       	cpc	r25, r19
    1ca6:	18 f1       	brcs	.+70     	; 0x1cee <prvCopyDataToQueue+0x96>
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	9b 83       	std	Y+3, r25	; 0x03
    1cae:	8a 83       	std	Y+2, r24	; 0x02
    1cb0:	1e c0       	rjmp	.+60     	; 0x1cee <prvCopyDataToQueue+0x96>
    1cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb6:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <memcpy>
    1cba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	91 95       	neg	r25
    1cc0:	81 95       	neg	r24
    1cc2:	91 09       	sbc	r25, r1
    1cc4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc8:	28 0f       	add	r18, r24
    1cca:	39 1f       	adc	r19, r25
    1ccc:	3f 83       	std	Y+7, r19	; 0x07
    1cce:	2e 83       	std	Y+6, r18	; 0x06
    1cd0:	48 81       	ld	r20, Y
    1cd2:	59 81       	ldd	r21, Y+1	; 0x01
    1cd4:	24 17       	cp	r18, r20
    1cd6:	35 07       	cpc	r19, r21
    1cd8:	30 f4       	brcc	.+12     	; 0x1ce6 <prvCopyDataToQueue+0x8e>
    1cda:	2c 81       	ldd	r18, Y+4	; 0x04
    1cdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cde:	82 0f       	add	r24, r18
    1ce0:	93 1f       	adc	r25, r19
    1ce2:	9f 83       	std	Y+7, r25	; 0x07
    1ce4:	8e 83       	std	Y+6, r24	; 0x06
    1ce6:	02 30       	cpi	r16, 0x02	; 2
    1ce8:	11 f4       	brne	.+4      	; 0x1cee <prvCopyDataToQueue+0x96>
    1cea:	11 11       	cpse	r17, r1
    1cec:	11 50       	subi	r17, 0x01	; 1
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	1f 5f       	subi	r17, 0xFF	; 255
    1cf2:	1a 8f       	std	Y+26, r17	; 0x1a
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	08 95       	ret

00001cfe <prvCopyDataFromQueue>:
    1cfe:	fc 01       	movw	r30, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	44 8d       	ldd	r20, Z+28	; 0x1c
    1d04:	44 23       	and	r20, r20
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <prvCopyDataFromQueue+0x32>
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	26 81       	ldd	r18, Z+6	; 0x06
    1d0c:	37 81       	ldd	r19, Z+7	; 0x07
    1d0e:	24 0f       	add	r18, r20
    1d10:	35 1f       	adc	r19, r21
    1d12:	37 83       	std	Z+7, r19	; 0x07
    1d14:	26 83       	std	Z+6, r18	; 0x06
    1d16:	64 81       	ldd	r22, Z+4	; 0x04
    1d18:	75 81       	ldd	r23, Z+5	; 0x05
    1d1a:	26 17       	cp	r18, r22
    1d1c:	37 07       	cpc	r19, r23
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <prvCopyDataFromQueue+0x2a>
    1d20:	20 81       	ld	r18, Z
    1d22:	31 81       	ldd	r19, Z+1	; 0x01
    1d24:	37 83       	std	Z+7, r19	; 0x07
    1d26:	26 83       	std	Z+6, r18	; 0x06
    1d28:	66 81       	ldd	r22, Z+6	; 0x06
    1d2a:	77 81       	ldd	r23, Z+7	; 0x07
    1d2c:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <memcpy>
    1d30:	08 95       	ret

00001d32 <prvUnlockQueue>:
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	0f 92       	push	r0
    1d44:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1d46:	7c 01       	movw	r14, r24
    1d48:	81 e1       	ldi	r24, 0x11	; 17
    1d4a:	e8 0e       	add	r14, r24
    1d4c:	f1 1c       	adc	r15, r1
    1d4e:	11 16       	cp	r1, r17
    1d50:	5c f4       	brge	.+22     	; 0x1d68 <prvUnlockQueue+0x36>
    1d52:	89 89       	ldd	r24, Y+17	; 0x11
    1d54:	88 23       	and	r24, r24
    1d56:	41 f0       	breq	.+16     	; 0x1d68 <prvUnlockQueue+0x36>
    1d58:	c7 01       	movw	r24, r14
    1d5a:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	0e 94 41 15 	call	0x2a82	; 0x2a82 <vTaskMissedYield>
    1d64:	11 50       	subi	r17, 0x01	; 1
    1d66:	f3 cf       	rjmp	.-26     	; 0x1d4e <prvUnlockQueue+0x1c>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	0f 92       	push	r0
    1d76:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1d78:	7e 01       	movw	r14, r28
    1d7a:	88 e0       	ldi	r24, 0x08	; 8
    1d7c:	e8 0e       	add	r14, r24
    1d7e:	f1 1c       	adc	r15, r1
    1d80:	11 16       	cp	r1, r17
    1d82:	5c f4       	brge	.+22     	; 0x1d9a <prvUnlockQueue+0x68>
    1d84:	88 85       	ldd	r24, Y+8	; 0x08
    1d86:	88 23       	and	r24, r24
    1d88:	41 f0       	breq	.+16     	; 0x1d9a <prvUnlockQueue+0x68>
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1d90:	81 11       	cpse	r24, r1
    1d92:	0e 94 41 15 	call	0x2a82	; 0x2a82 <vTaskMissedYield>
    1d96:	11 50       	subi	r17, 0x01	; 1
    1d98:	f3 cf       	rjmp	.-26     	; 0x1d80 <prvUnlockQueue+0x4e>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	1f 91       	pop	r17
    1da8:	ff 90       	pop	r15
    1daa:	ef 90       	pop	r14
    1dac:	08 95       	ret

00001dae <xQueueGenericReset>:
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	ec 01       	movw	r28, r24
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	0f 92       	push	r0
    1dba:	48 81       	ld	r20, Y
    1dbc:	59 81       	ldd	r21, Y+1	; 0x01
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1dc2:	9a 01       	movw	r18, r20
    1dc4:	87 9f       	mul	r24, r23
    1dc6:	20 0d       	add	r18, r0
    1dc8:	31 1d       	adc	r19, r1
    1dca:	11 24       	eor	r1, r1
    1dcc:	3d 83       	std	Y+5, r19	; 0x05
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	1a 8e       	std	Y+26, r1	; 0x1a
    1dd2:	5b 83       	std	Y+3, r21	; 0x03
    1dd4:	4a 83       	std	Y+2, r20	; 0x02
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	78 9f       	mul	r23, r24
    1ddc:	90 01       	movw	r18, r0
    1dde:	79 9f       	mul	r23, r25
    1de0:	30 0d       	add	r19, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	ca 01       	movw	r24, r20
    1de6:	82 0f       	add	r24, r18
    1de8:	93 1f       	adc	r25, r19
    1dea:	9f 83       	std	Y+7, r25	; 0x07
    1dec:	8e 83       	std	Y+6, r24	; 0x06
    1dee:	8f ef       	ldi	r24, 0xFF	; 255
    1df0:	8d 8f       	std	Y+29, r24	; 0x1d
    1df2:	8e 8f       	std	Y+30, r24	; 0x1e
    1df4:	61 11       	cpse	r22, r1
    1df6:	0c c0       	rjmp	.+24     	; 0x1e10 <xQueueGenericReset+0x62>
    1df8:	88 85       	ldd	r24, Y+8	; 0x08
    1dfa:	88 23       	and	r24, r24
    1dfc:	89 f0       	breq	.+34     	; 0x1e20 <xQueueGenericReset+0x72>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	08 96       	adiw	r24, 0x08	; 8
    1e02:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1e06:	88 23       	and	r24, r24
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <xQueueGenericReset+0x72>
    1e0a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <xQueueGenericReset+0x72>
    1e10:	ce 01       	movw	r24, r28
    1e12:	08 96       	adiw	r24, 0x08	; 8
    1e14:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    1e18:	ce 01       	movw	r24, r28
    1e1a:	41 96       	adiw	r24, 0x11	; 17
    1e1c:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <xQueueGenericCreate>:
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	08 2f       	mov	r16, r24
    1e36:	16 2f       	mov	r17, r22
    1e38:	66 23       	and	r22, r22
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <xQueueGenericCreate+0x18>
    1e3c:	86 9f       	mul	r24, r22
    1e3e:	c0 01       	movw	r24, r0
    1e40:	11 24       	eor	r1, r1
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <xQueueGenericCreate+0x1c>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	4f 96       	adiw	r24, 0x1f	; 31
    1e4a:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    1e4e:	ec 01       	movw	r28, r24
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	71 f0       	breq	.+28     	; 0x1e70 <xQueueGenericCreate+0x44>
    1e54:	11 11       	cpse	r17, r1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <xQueueGenericCreate+0x32>
    1e58:	99 83       	std	Y+1, r25	; 0x01
    1e5a:	88 83       	st	Y, r24
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <xQueueGenericCreate+0x38>
    1e5e:	4f 96       	adiw	r24, 0x1f	; 31
    1e60:	99 83       	std	Y+1, r25	; 0x01
    1e62:	88 83       	st	Y, r24
    1e64:	0b 8f       	std	Y+27, r16	; 0x1b
    1e66:	1c 8f       	std	Y+28, r17	; 0x1c
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xQueueGenericReset>
    1e70:	ce 01       	movw	r24, r28
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <xQueueGenericSend>:
    1e7c:	af 92       	push	r10
    1e7e:	bf 92       	push	r11
    1e80:	cf 92       	push	r12
    1e82:	df 92       	push	r13
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <xQueueGenericSend+0x14>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <xQueueGenericSend+0x16>
    1e92:	1f 92       	push	r1
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	8c 01       	movw	r16, r24
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	5d 83       	std	Y+5, r21	; 0x05
    1e9e:	4c 83       	std	Y+4, r20	; 0x04
    1ea0:	f2 2e       	mov	r15, r18
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	58 01       	movw	r10, r16
    1ea6:	98 e0       	ldi	r25, 0x08	; 8
    1ea8:	a9 0e       	add	r10, r25
    1eaa:	b1 1c       	adc	r11, r1
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	0f 92       	push	r0
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    1eb8:	29 17       	cp	r18, r25
    1eba:	18 f0       	brcs	.+6      	; 0x1ec2 <xQueueGenericSend+0x46>
    1ebc:	f2 e0       	ldi	r31, 0x02	; 2
    1ebe:	ff 12       	cpse	r15, r31
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <xQueueGenericSend+0x6e>
    1ec2:	4f 2d       	mov	r20, r15
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <prvCopyDataToQueue>
    1ecc:	f8 01       	movw	r30, r16
    1ece:	91 89       	ldd	r25, Z+17	; 0x11
    1ed0:	99 23       	and	r25, r25
    1ed2:	21 f0       	breq	.+8      	; 0x1edc <xQueueGenericSend+0x60>
    1ed4:	c8 01       	movw	r24, r16
    1ed6:	41 96       	adiw	r24, 0x11	; 17
    1ed8:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1edc:	81 11       	cpse	r24, r1
    1ede:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	50 c0       	rjmp	.+160    	; 0x1f8a <xQueueGenericSend+0x10e>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	23 2b       	or	r18, r19
    1ef0:	19 f4       	brne	.+6      	; 0x1ef8 <xQueueGenericSend+0x7c>
    1ef2:	0f 90       	pop	r0
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	48 c0       	rjmp	.+144    	; 0x1f88 <xQueueGenericSend+0x10c>
    1ef8:	81 11       	cpse	r24, r1
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <xQueueGenericSend+0x88>
    1efc:	ce 01       	movw	r24, r28
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    1f04:	0f 90       	pop	r0
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	0f 92       	push	r0
    1f12:	f8 01       	movw	r30, r16
    1f14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f16:	8f 3f       	cpi	r24, 0xFF	; 255
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <xQueueGenericSend+0xa0>
    1f1a:	15 8e       	std	Z+29, r1	; 0x1d
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f20:	8f 3f       	cpi	r24, 0xFF	; 255
    1f22:	09 f4       	brne	.+2      	; 0x1f26 <xQueueGenericSend+0xaa>
    1f24:	16 8e       	std	Z+30, r1	; 0x1e
    1f26:	0f 90       	pop	r0
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	be 01       	movw	r22, r28
    1f2c:	6c 5f       	subi	r22, 0xFC	; 252
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f30:	ce 01       	movw	r24, r28
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <xTaskCheckForTimeOut>
    1f38:	81 11       	cpse	r24, r1
    1f3a:	21 c0       	rjmp	.+66     	; 0x1f7e <xQueueGenericSend+0x102>
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	f8 01       	movw	r30, r16
    1f44:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f46:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	98 13       	cpse	r25, r24
    1f4e:	11 c0       	rjmp	.+34     	; 0x1f72 <xQueueGenericSend+0xf6>
    1f50:	6c 81       	ldd	r22, Y+4	; 0x04
    1f52:	7d 81       	ldd	r23, Y+5	; 0x05
    1f54:	c5 01       	movw	r24, r10
    1f56:	0e 94 9a 14 	call	0x2934	; 0x2934 <vTaskPlaceOnEventList>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f60:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f64:	88 23       	and	r24, r24
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <xQueueGenericSend+0xf0>
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	a0 cf       	rjmp	.-192    	; 0x1eac <xQueueGenericSend+0x30>
    1f6c:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    1f70:	fb cf       	rjmp	.-10     	; 0x1f68 <xQueueGenericSend+0xec>
    1f72:	c8 01       	movw	r24, r16
    1f74:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f78:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f7c:	f5 cf       	rjmp	.-22     	; 0x1f68 <xQueueGenericSend+0xec>
    1f7e:	c8 01       	movw	r24, r16
    1f80:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    1f84:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	ff 90       	pop	r15
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	08 95       	ret

00001fa8 <xQueueGenericSendFromISR>:
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb8:	98 17       	cp	r25, r24
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <xQueueGenericSendFromISR+0x18>
    1fbc:	22 30       	cpi	r18, 0x02	; 2
    1fbe:	e1 f4       	brne	.+56     	; 0x1ff8 <xQueueGenericSendFromISR+0x50>
    1fc0:	7a 01       	movw	r14, r20
    1fc2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1fc4:	42 2f       	mov	r20, r18
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <prvCopyDataToQueue>
    1fcc:	1f 3f       	cpi	r17, 0xFF	; 255
    1fce:	81 f4       	brne	.+32     	; 0x1ff0 <xQueueGenericSendFromISR+0x48>
    1fd0:	89 89       	ldd	r24, Y+17	; 0x11
    1fd2:	88 23       	and	r24, r24
    1fd4:	79 f0       	breq	.+30     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	41 96       	adiw	r24, 0x11	; 17
    1fda:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    1fde:	88 23       	and	r24, r24
    1fe0:	49 f0       	breq	.+18     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fe2:	e1 14       	cp	r14, r1
    1fe4:	f1 04       	cpc	r15, r1
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <xQueueGenericSendFromISR+0x4c>
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	f7 01       	movw	r30, r14
    1fec:	80 83       	st	Z, r24
    1fee:	05 c0       	rjmp	.+10     	; 0x1ffa <xQueueGenericSendFromISR+0x52>
    1ff0:	1f 5f       	subi	r17, 0xFF	; 255
    1ff2:	1e 8f       	std	Y+30, r17	; 0x1e
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xQueueGenericSendFromISR+0x52>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	ff 90       	pop	r15
    2002:	ef 90       	pop	r14
    2004:	08 95       	ret

00002006 <xQueueReceive>:
    2006:	af 92       	push	r10
    2008:	bf 92       	push	r11
    200a:	cf 92       	push	r12
    200c:	df 92       	push	r13
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	00 d0       	rcall	.+0      	; 0x201a <xQueueReceive+0x14>
    201a:	00 d0       	rcall	.+0      	; 0x201c <xQueueReceive+0x16>
    201c:	1f 92       	push	r1
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	8c 01       	movw	r16, r24
    2024:	6b 01       	movw	r12, r22
    2026:	5d 83       	std	Y+5, r21	; 0x05
    2028:	4c 83       	std	Y+4, r20	; 0x04
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	58 01       	movw	r10, r16
    202e:	91 e1       	ldi	r25, 0x11	; 17
    2030:	a9 0e       	add	r10, r25
    2032:	b1 1c       	adc	r11, r1
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	0f 92       	push	r0
    203a:	f8 01       	movw	r30, r16
    203c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    203e:	ff 20       	and	r15, r15
    2040:	a9 f0       	breq	.+42     	; 0x206c <xQueueReceive+0x66>
    2042:	b6 01       	movw	r22, r12
    2044:	c8 01       	movw	r24, r16
    2046:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <prvCopyDataFromQueue>
    204a:	fa 94       	dec	r15
    204c:	f8 01       	movw	r30, r16
    204e:	f2 8e       	std	Z+26, r15	; 0x1a
    2050:	80 85       	ldd	r24, Z+8	; 0x08
    2052:	88 23       	and	r24, r24
    2054:	39 f0       	breq	.+14     	; 0x2064 <xQueueReceive+0x5e>
    2056:	c8 01       	movw	r24, r16
    2058:	08 96       	adiw	r24, 0x08	; 8
    205a:	0e 94 c3 14 	call	0x2986	; 0x2986 <xTaskRemoveFromEventList>
    205e:	81 11       	cpse	r24, r1
    2060:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	50 c0       	rjmp	.+160    	; 0x210c <xQueueReceive+0x106>
    206c:	2c 81       	ldd	r18, Y+4	; 0x04
    206e:	3d 81       	ldd	r19, Y+5	; 0x05
    2070:	23 2b       	or	r18, r19
    2072:	19 f4       	brne	.+6      	; 0x207a <xQueueReceive+0x74>
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	48 c0       	rjmp	.+144    	; 0x210a <xQueueReceive+0x104>
    207a:	81 11       	cpse	r24, r1
    207c:	04 c0       	rjmp	.+8      	; 0x2086 <xQueueReceive+0x80>
    207e:	ce 01       	movw	r24, r28
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    2086:	0f 90       	pop	r0
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	0f 92       	push	r0
    2094:	f8 01       	movw	r30, r16
    2096:	85 8d       	ldd	r24, Z+29	; 0x1d
    2098:	8f 3f       	cpi	r24, 0xFF	; 255
    209a:	09 f4       	brne	.+2      	; 0x209e <xQueueReceive+0x98>
    209c:	15 8e       	std	Z+29, r1	; 0x1d
    209e:	f8 01       	movw	r30, r16
    20a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    20a2:	8f 3f       	cpi	r24, 0xFF	; 255
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <xQueueReceive+0xa2>
    20a6:	16 8e       	std	Z+30, r1	; 0x1e
    20a8:	0f 90       	pop	r0
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	be 01       	movw	r22, r28
    20ae:	6c 5f       	subi	r22, 0xFC	; 252
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <xTaskCheckForTimeOut>
    20ba:	81 11       	cpse	r24, r1
    20bc:	1c c0       	rjmp	.+56     	; 0x20f6 <xQueueReceive+0xf0>
    20be:	c8 01       	movw	r24, r16
    20c0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <prvIsQueueEmpty>
    20c4:	88 23       	and	r24, r24
    20c6:	89 f0       	breq	.+34     	; 0x20ea <xQueueReceive+0xe4>
    20c8:	6c 81       	ldd	r22, Y+4	; 0x04
    20ca:	7d 81       	ldd	r23, Y+5	; 0x05
    20cc:	c5 01       	movw	r24, r10
    20ce:	0e 94 9a 14 	call	0x2934	; 0x2934 <vTaskPlaceOnEventList>
    20d2:	c8 01       	movw	r24, r16
    20d4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20d8:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    20dc:	88 23       	and	r24, r24
    20de:	11 f0       	breq	.+4      	; 0x20e4 <xQueueReceive+0xde>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	a8 cf       	rjmp	.-176    	; 0x2034 <xQueueReceive+0x2e>
    20e4:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    20e8:	fb cf       	rjmp	.-10     	; 0x20e0 <xQueueReceive+0xda>
    20ea:	c8 01       	movw	r24, r16
    20ec:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20f0:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    20f4:	f5 cf       	rjmp	.-22     	; 0x20e0 <xQueueReceive+0xda>
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvUnlockQueue>
    20fc:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2100:	c8 01       	movw	r24, r16
    2102:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <prvIsQueueEmpty>
    2106:	88 23       	and	r24, r24
    2108:	59 f3       	breq	.-42     	; 0x20e0 <xQueueReceive+0xda>
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	08 95       	ret

0000212a <vQueueWaitForMessageRestricted>:
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	ec 01       	movw	r28, r24
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	0f 92       	push	r0
    2136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2138:	8f 3f       	cpi	r24, 0xFF	; 255
    213a:	09 f4       	brne	.+2      	; 0x213e <vQueueWaitForMessageRestricted+0x14>
    213c:	1d 8e       	std	Y+29, r1	; 0x1d
    213e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2140:	8f 3f       	cpi	r24, 0xFF	; 255
    2142:	09 f4       	brne	.+2      	; 0x2146 <vQueueWaitForMessageRestricted+0x1c>
    2144:	1e 8e       	std	Y+30, r1	; 0x1e
    2146:	0f 90       	pop	r0
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    214c:	81 11       	cpse	r24, r1
    214e:	04 c0       	rjmp	.+8      	; 0x2158 <vQueueWaitForMessageRestricted+0x2e>
    2150:	ce 01       	movw	r24, r28
    2152:	41 96       	adiw	r24, 0x11	; 17
    2154:	0e 94 ab 14 	call	0x2956	; 0x2956 <vTaskPlaceOnEventListRestricted>
    2158:	ce 01       	movw	r24, r28
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <prvUnlockQueue>

00002162 <prvResetNextTaskUnblockTime>:
    2162:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    2166:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    216a:	80 81       	ld	r24, Z
    216c:	81 11       	cpse	r24, r1
    216e:	03 c0       	rjmp	.+6      	; 0x2176 <prvResetNextTaskUnblockTime+0x14>
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	9f ef       	ldi	r25, 0xFF	; 255
    2174:	0c c0       	rjmp	.+24     	; 0x218e <prvResetNextTaskUnblockTime+0x2c>
    2176:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    217a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    217e:	05 80       	ldd	r0, Z+5	; 0x05
    2180:	f6 81       	ldd	r31, Z+6	; 0x06
    2182:	e0 2d       	mov	r30, r0
    2184:	06 80       	ldd	r0, Z+6	; 0x06
    2186:	f7 81       	ldd	r31, Z+7	; 0x07
    2188:	e0 2d       	mov	r30, r0
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    2192:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    2196:	08 95       	ret

00002198 <prvAddCurrentTaskToDelayedList>:
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	ec 01       	movw	r28, r24
    21a4:	f6 2e       	mov	r15, r22
    21a6:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    21aa:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    21ae:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    21b2:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21b6:	02 96       	adiw	r24, 0x02	; 2
    21b8:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    21bc:	cf 3f       	cpi	r28, 0xFF	; 255
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	d8 07       	cpc	r29, r24
    21c2:	89 f4       	brne	.+34     	; 0x21e6 <prvAddCurrentTaskToDelayedList+0x4e>
    21c4:	ff 20       	and	r15, r15
    21c6:	79 f0       	breq	.+30     	; 0x21e6 <prvAddCurrentTaskToDelayedList+0x4e>
    21c8:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    21cc:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21d0:	6e 5f       	subi	r22, 0xFE	; 254
    21d2:	7f 4f       	sbci	r23, 0xFF	; 255
    21d4:	88 e2       	ldi	r24, 0x28	; 40
    21d6:	94 e0       	ldi	r25, 0x04	; 4
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	0c 94 6d 19 	jmp	0x32da	; 0x32da <vListInsertEnd>
    21e6:	c0 0f       	add	r28, r16
    21e8:	d1 1f       	adc	r29, r17
    21ea:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    21ee:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21f2:	d3 83       	std	Z+3, r29	; 0x03
    21f4:	c2 83       	std	Z+2, r28	; 0x02
    21f6:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    21fa:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    21fe:	c0 17       	cp	r28, r16
    2200:	d1 07       	cpc	r29, r17
    2202:	68 f4       	brcc	.+26     	; 0x221e <prvAddCurrentTaskToDelayedList+0x86>
    2204:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    2208:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    220c:	6e 5f       	subi	r22, 0xFE	; 254
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	ff 90       	pop	r15
    221a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <vListInsert>
    221e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    2222:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2226:	6e 5f       	subi	r22, 0xFE	; 254
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    222e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    2232:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    2236:	c8 17       	cp	r28, r24
    2238:	d9 07       	cpc	r29, r25
    223a:	20 f4       	brcc	.+8      	; 0x2244 <prvAddCurrentTaskToDelayedList+0xac>
    223c:	d0 93 1e 04 	sts	0x041E, r29	; 0x80041e <xNextTaskUnblockTime+0x1>
    2240:	c0 93 1d 04 	sts	0x041D, r28	; 0x80041d <xNextTaskUnblockTime>
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	ff 90       	pop	r15
    224e:	08 95       	ret

00002250 <prvIdleTask>:
    2250:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2254:	88 23       	and	r24, r24
    2256:	09 f1       	breq	.+66     	; 0x229a <prvIdleTask+0x4a>
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	0f 92       	push	r0
    225e:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <xTasksWaitingTermination+0x5>
    2262:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <xTasksWaitingTermination+0x6>
    2266:	c6 81       	ldd	r28, Z+6	; 0x06
    2268:	d7 81       	ldd	r29, Z+7	; 0x07
    226a:	ce 01       	movw	r24, r28
    226c:	02 96       	adiw	r24, 0x02	; 2
    226e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2272:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2276:	81 50       	subi	r24, 0x01	; 1
    2278:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    227c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2286:	0f 90       	pop	r0
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	8f 89       	ldd	r24, Y+23	; 0x17
    228c:	98 8d       	ldd	r25, Y+24	; 0x18
    228e:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2292:	ce 01       	movw	r24, r28
    2294:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2298:	db cf       	rjmp	.-74     	; 0x2250 <prvIdleTask>
    229a:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <pxReadyTasksLists>
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	10 f0       	brcs	.+4      	; 0x22a6 <prvIdleTask+0x56>
    22a2:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    22a6:	0e 94 98 17 	call	0x2f30	; 0x2f30 <vApplicationIdleHook>
    22aa:	d2 cf       	rjmp	.-92     	; 0x2250 <prvIdleTask>

000022ac <xTaskCreate>:
    22ac:	5f 92       	push	r5
    22ae:	6f 92       	push	r6
    22b0:	7f 92       	push	r7
    22b2:	8f 92       	push	r8
    22b4:	9f 92       	push	r9
    22b6:	af 92       	push	r10
    22b8:	bf 92       	push	r11
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	0f 93       	push	r16
    22c4:	1f 93       	push	r17
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	3c 01       	movw	r6, r24
    22cc:	6b 01       	movw	r12, r22
    22ce:	5a 01       	movw	r10, r20
    22d0:	49 01       	movw	r8, r18
    22d2:	50 2e       	mov	r5, r16
    22d4:	ca 01       	movw	r24, r20
    22d6:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    22da:	8c 01       	movw	r16, r24
    22dc:	89 2b       	or	r24, r25
    22de:	09 f4       	brne	.+2      	; 0x22e2 <xTaskCreate+0x36>
    22e0:	e0 c0       	rjmp	.+448    	; 0x24a2 <xTaskCreate+0x1f6>
    22e2:	88 e2       	ldi	r24, 0x28	; 40
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 37 19 	call	0x326e	; 0x326e <pvPortMalloc>
    22ea:	ec 01       	movw	r28, r24
    22ec:	89 2b       	or	r24, r25
    22ee:	c9 f0       	breq	.+50     	; 0x2322 <xTaskCreate+0x76>
    22f0:	18 8f       	std	Y+24, r17	; 0x18
    22f2:	0f 8b       	std	Y+23, r16	; 0x17
    22f4:	a5 01       	movw	r20, r10
    22f6:	65 ea       	ldi	r22, 0xA5	; 165
    22f8:	70 e0       	ldi	r23, 0x00	; 0
    22fa:	c8 01       	movw	r24, r16
    22fc:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <memset>
    2300:	21 e0       	ldi	r18, 0x01	; 1
    2302:	a2 1a       	sub	r10, r18
    2304:	b1 08       	sbc	r11, r1
    2306:	8f 89       	ldd	r24, Y+23	; 0x17
    2308:	98 8d       	ldd	r25, Y+24	; 0x18
    230a:	a8 0e       	add	r10, r24
    230c:	b9 1e       	adc	r11, r25
    230e:	c1 14       	cp	r12, r1
    2310:	d1 04       	cpc	r13, r1
    2312:	c9 f0       	breq	.+50     	; 0x2346 <xTaskCreate+0x9a>
    2314:	be 01       	movw	r22, r28
    2316:	67 5e       	subi	r22, 0xE7	; 231
    2318:	7f 4f       	sbci	r23, 0xFF	; 255
    231a:	f6 01       	movw	r30, r12
    231c:	c6 01       	movw	r24, r12
    231e:	08 96       	adiw	r24, 0x08	; 8
    2320:	07 c0       	rjmp	.+14     	; 0x2330 <xTaskCreate+0x84>
    2322:	c8 01       	movw	r24, r16
    2324:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2328:	bc c0       	rjmp	.+376    	; 0x24a2 <xTaskCreate+0x1f6>
    232a:	e8 17       	cp	r30, r24
    232c:	f9 07       	cpc	r31, r25
    232e:	49 f0       	breq	.+18     	; 0x2342 <xTaskCreate+0x96>
    2330:	9f 01       	movw	r18, r30
    2332:	41 91       	ld	r20, Z+
    2334:	db 01       	movw	r26, r22
    2336:	4d 93       	st	X+, r20
    2338:	bd 01       	movw	r22, r26
    233a:	d9 01       	movw	r26, r18
    233c:	2c 91       	ld	r18, X
    233e:	21 11       	cpse	r18, r1
    2340:	f4 cf       	rjmp	.-24     	; 0x232a <xTaskCreate+0x7e>
    2342:	18 a2       	std	Y+32, r1	; 0x20
    2344:	01 c0       	rjmp	.+2      	; 0x2348 <xTaskCreate+0x9c>
    2346:	19 8e       	std	Y+25, r1	; 0x19
    2348:	05 2d       	mov	r16, r5
    234a:	04 30       	cpi	r16, 0x04	; 4
    234c:	08 f0       	brcs	.+2      	; 0x2350 <xTaskCreate+0xa4>
    234e:	03 e0       	ldi	r16, 0x03	; 3
    2350:	0e 8b       	std	Y+22, r16	; 0x16
    2352:	09 a3       	std	Y+33, r16	; 0x21
    2354:	1a a2       	std	Y+34, r1	; 0x22
    2356:	6e 01       	movw	r12, r28
    2358:	b2 e0       	ldi	r27, 0x02	; 2
    235a:	cb 0e       	add	r12, r27
    235c:	d1 1c       	adc	r13, r1
    235e:	c6 01       	movw	r24, r12
    2360:	0e 94 69 19 	call	0x32d2	; 0x32d2 <vListInitialiseItem>
    2364:	ce 01       	movw	r24, r28
    2366:	0c 96       	adiw	r24, 0x0c	; 12
    2368:	0e 94 69 19 	call	0x32d2	; 0x32d2 <vListInitialiseItem>
    236c:	d9 87       	std	Y+9, r29	; 0x09
    236e:	c8 87       	std	Y+8, r28	; 0x08
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	80 1b       	sub	r24, r16
    2376:	91 09       	sbc	r25, r1
    2378:	9d 87       	std	Y+13, r25	; 0x0d
    237a:	8c 87       	std	Y+12, r24	; 0x0c
    237c:	db 8b       	std	Y+19, r29	; 0x13
    237e:	ca 8b       	std	Y+18, r28	; 0x12
    2380:	1b a2       	std	Y+35, r1	; 0x23
    2382:	1c a2       	std	Y+36, r1	; 0x24
    2384:	1d a2       	std	Y+37, r1	; 0x25
    2386:	1e a2       	std	Y+38, r1	; 0x26
    2388:	1f a2       	std	Y+39, r1	; 0x27
    238a:	a4 01       	movw	r20, r8
    238c:	b3 01       	movw	r22, r6
    238e:	c5 01       	movw	r24, r10
    2390:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <pxPortInitialiseStack>
    2394:	99 83       	std	Y+1, r25	; 0x01
    2396:	88 83       	st	Y, r24
    2398:	e1 14       	cp	r14, r1
    239a:	f1 04       	cpc	r15, r1
    239c:	19 f0       	breq	.+6      	; 0x23a4 <xTaskCreate+0xf8>
    239e:	f7 01       	movw	r30, r14
    23a0:	d1 83       	std	Z+1, r29	; 0x01
    23a2:	c0 83       	st	Z, r28
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	0f 92       	push	r0
    23aa:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    23b4:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    23b8:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    23bc:	89 2b       	or	r24, r25
    23be:	d1 f5       	brne	.+116    	; 0x2434 <xTaskCreate+0x188>
    23c0:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    23c4:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    23c8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <xTaskCreate+0x126>
    23d0:	41 c0       	rjmp	.+130    	; 0x2454 <xTaskCreate+0x1a8>
    23d2:	8a e5       	ldi	r24, 0x5A	; 90
    23d4:	94 e0       	ldi	r25, 0x04	; 4
    23d6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23da:	83 e6       	ldi	r24, 0x63	; 99
    23dc:	94 e0       	ldi	r25, 0x04	; 4
    23de:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23e2:	8c e6       	ldi	r24, 0x6C	; 108
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23ea:	85 e7       	ldi	r24, 0x75	; 117
    23ec:	94 e0       	ldi	r25, 0x04	; 4
    23ee:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23f2:	81 e5       	ldi	r24, 0x51	; 81
    23f4:	94 e0       	ldi	r25, 0x04	; 4
    23f6:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    23fa:	88 e4       	ldi	r24, 0x48	; 72
    23fc:	94 e0       	ldi	r25, 0x04	; 4
    23fe:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2402:	8b e3       	ldi	r24, 0x3B	; 59
    2404:	94 e0       	ldi	r25, 0x04	; 4
    2406:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    240a:	82 e3       	ldi	r24, 0x32	; 50
    240c:	94 e0       	ldi	r25, 0x04	; 4
    240e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2412:	88 e2       	ldi	r24, 0x28	; 40
    2414:	94 e0       	ldi	r25, 0x04	; 4
    2416:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    241a:	81 e5       	ldi	r24, 0x51	; 81
    241c:	94 e0       	ldi	r25, 0x04	; 4
    241e:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <pxDelayedTaskList+0x1>
    2422:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <pxDelayedTaskList>
    2426:	88 e4       	ldi	r24, 0x48	; 72
    2428:	94 e0       	ldi	r25, 0x04	; 4
    242a:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    242e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    2432:	10 c0       	rjmp	.+32     	; 0x2454 <xTaskCreate+0x1a8>
    2434:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2438:	81 11       	cpse	r24, r1
    243a:	0c c0       	rjmp	.+24     	; 0x2454 <xTaskCreate+0x1a8>
    243c:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2440:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2444:	96 89       	ldd	r25, Z+22	; 0x16
    2446:	8e 89       	ldd	r24, Y+22	; 0x16
    2448:	89 17       	cp	r24, r25
    244a:	20 f0       	brcs	.+8      	; 0x2454 <xTaskCreate+0x1a8>
    244c:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    2450:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    2454:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <uxTaskNumber>
    2458:	8f 5f       	subi	r24, 0xFF	; 255
    245a:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <uxTaskNumber>
    245e:	8e 89       	ldd	r24, Y+22	; 0x16
    2460:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2464:	98 17       	cp	r25, r24
    2466:	10 f4       	brcc	.+4      	; 0x246c <xTaskCreate+0x1c0>
    2468:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    246c:	f9 e0       	ldi	r31, 0x09	; 9
    246e:	8f 9f       	mul	r24, r31
    2470:	c0 01       	movw	r24, r0
    2472:	11 24       	eor	r1, r1
    2474:	b6 01       	movw	r22, r12
    2476:	86 5a       	subi	r24, 0xA6	; 166
    2478:	9b 4f       	sbci	r25, 0xFB	; 251
    247a:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2486:	88 23       	and	r24, r24
    2488:	51 f0       	breq	.+20     	; 0x249e <xTaskCreate+0x1f2>
    248a:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    248e:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2492:	96 89       	ldd	r25, Z+22	; 0x16
    2494:	8e 89       	ldd	r24, Y+22	; 0x16
    2496:	98 17       	cp	r25, r24
    2498:	10 f4       	brcc	.+4      	; 0x249e <xTaskCreate+0x1f2>
    249a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <xTaskCreate+0x1f8>
    24a2:	8f ef       	ldi	r24, 0xFF	; 255
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	1f 91       	pop	r17
    24aa:	0f 91       	pop	r16
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	df 90       	pop	r13
    24b2:	cf 90       	pop	r12
    24b4:	bf 90       	pop	r11
    24b6:	af 90       	pop	r10
    24b8:	9f 90       	pop	r9
    24ba:	8f 90       	pop	r8
    24bc:	7f 90       	pop	r7
    24be:	6f 90       	pop	r6
    24c0:	5f 90       	pop	r5
    24c2:	08 95       	ret

000024c4 <vTaskResume>:
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	20 91 7e 04 	lds	r18, 0x047E	; 0x80047e <pxCurrentTCB>
    24d0:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    24d4:	82 17       	cp	r24, r18
    24d6:	93 07       	cpc	r25, r19
    24d8:	09 f4       	brne	.+2      	; 0x24dc <vTaskResume+0x18>
    24da:	38 c0       	rjmp	.+112    	; 0x254c <vTaskResume+0x88>
    24dc:	00 97       	sbiw	r24, 0x00	; 0
    24de:	09 f4       	brne	.+2      	; 0x24e2 <vTaskResume+0x1e>
    24e0:	35 c0       	rjmp	.+106    	; 0x254c <vTaskResume+0x88>
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	0f 92       	push	r0
    24e8:	fc 01       	movw	r30, r24
    24ea:	22 85       	ldd	r18, Z+10	; 0x0a
    24ec:	33 85       	ldd	r19, Z+11	; 0x0b
    24ee:	28 52       	subi	r18, 0x28	; 40
    24f0:	34 40       	sbci	r19, 0x04	; 4
    24f2:	51 f5       	brne	.+84     	; 0x2548 <vTaskResume+0x84>
    24f4:	fc 01       	movw	r30, r24
    24f6:	24 89       	ldd	r18, Z+20	; 0x14
    24f8:	35 89       	ldd	r19, Z+21	; 0x15
    24fa:	f4 e0       	ldi	r31, 0x04	; 4
    24fc:	2b 33       	cpi	r18, 0x3B	; 59
    24fe:	3f 07       	cpc	r19, r31
    2500:	19 f1       	breq	.+70     	; 0x2548 <vTaskResume+0x84>
    2502:	23 2b       	or	r18, r19
    2504:	09 f5       	brne	.+66     	; 0x2548 <vTaskResume+0x84>
    2506:	ec 01       	movw	r28, r24
    2508:	8c 01       	movw	r16, r24
    250a:	0e 5f       	subi	r16, 0xFE	; 254
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2514:	8e 89       	ldd	r24, Y+22	; 0x16
    2516:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    251a:	98 17       	cp	r25, r24
    251c:	10 f4       	brcc	.+4      	; 0x2522 <vTaskResume+0x5e>
    251e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2522:	29 e0       	ldi	r18, 0x09	; 9
    2524:	82 9f       	mul	r24, r18
    2526:	c0 01       	movw	r24, r0
    2528:	11 24       	eor	r1, r1
    252a:	b8 01       	movw	r22, r16
    252c:	86 5a       	subi	r24, 0xA6	; 166
    252e:	9b 4f       	sbci	r25, 0xFB	; 251
    2530:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2534:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2538:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    253c:	9e 89       	ldd	r25, Y+22	; 0x16
    253e:	86 89       	ldd	r24, Z+22	; 0x16
    2540:	98 17       	cp	r25, r24
    2542:	10 f0       	brcs	.+4      	; 0x2548 <vTaskResume+0x84>
    2544:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2548:	0f 90       	pop	r0
    254a:	0f be       	out	0x3f, r0	; 63
    254c:	df 91       	pop	r29
    254e:	cf 91       	pop	r28
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	08 95       	ret

00002556 <vTaskStartScheduler>:
    2556:	ef 92       	push	r14
    2558:	ff 92       	push	r15
    255a:	0f 93       	push	r16
    255c:	8b e1       	ldi	r24, 0x1B	; 27
    255e:	e8 2e       	mov	r14, r24
    2560:	84 e0       	ldi	r24, 0x04	; 4
    2562:	f8 2e       	mov	r15, r24
    2564:	00 e0       	ldi	r16, 0x00	; 0
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 ec       	ldi	r20, 0xC0	; 192
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	62 e3       	ldi	r22, 0x32	; 50
    2570:	72 e0       	ldi	r23, 0x02	; 2
    2572:	88 e2       	ldi	r24, 0x28	; 40
    2574:	91 e1       	ldi	r25, 0x11	; 17
    2576:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
    257a:	81 30       	cpi	r24, 0x01	; 1
    257c:	b1 f4       	brne	.+44     	; 0x25aa <vTaskStartScheduler+0x54>
    257e:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <xTimerCreateTimerTask>
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	91 f4       	brne	.+36     	; 0x25aa <vTaskStartScheduler+0x54>
    2586:	f8 94       	cli
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	3f ef       	ldi	r19, 0xFF	; 255
    258c:	30 93 1e 04 	sts	0x041E, r19	; 0x80041e <xNextTaskUnblockTime+0x1>
    2590:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <xNextTaskUnblockTime>
    2594:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <xSchedulerRunning>
    2598:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <xTickCount+0x1>
    259c:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <xTickCount>
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	0c 94 56 1a 	jmp	0x34ac	; 0x34ac <xPortStartScheduler>
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	08 95       	ret

000025b2 <vTaskSuspendAll>:
    25b2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    25b6:	8f 5f       	subi	r24, 0xFF	; 255
    25b8:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    25bc:	08 95       	ret

000025be <xTaskGetTickCount>:
    25be:	0f b6       	in	r0, 0x3f	; 63
    25c0:	f8 94       	cli
    25c2:	0f 92       	push	r0
    25c4:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTickCount>
    25c8:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTickCount+0x1>
    25cc:	0f 90       	pop	r0
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	08 95       	ret

000025d2 <xTaskIncrementTick>:
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    25e6:	81 11       	cpse	r24, r1
    25e8:	8c c0       	rjmp	.+280    	; 0x2702 <xTaskIncrementTick+0x130>
    25ea:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    25ee:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    25f2:	0f 5f       	subi	r16, 0xFF	; 255
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
    25f6:	10 93 26 04 	sts	0x0426, r17	; 0x800426 <xTickCount+0x1>
    25fa:	00 93 25 04 	sts	0x0425, r16	; 0x800425 <xTickCount>
    25fe:	01 15       	cp	r16, r1
    2600:	11 05       	cpc	r17, r1
    2602:	b9 f4       	brne	.+46     	; 0x2632 <xTaskIncrementTick+0x60>
    2604:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    2608:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    260c:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    2610:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2614:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <pxDelayedTaskList+0x1>
    2618:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <pxDelayedTaskList>
    261c:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2620:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    2624:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <xNumOfOverflows>
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <xNumOfOverflows>
    262e:	0e 94 b1 10 	call	0x2162	; 0x2162 <prvResetNextTaskUnblockTime>
    2632:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    2636:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    263a:	c0 e0       	ldi	r28, 0x00	; 0
    263c:	08 17       	cp	r16, r24
    263e:	19 07       	cpc	r17, r25
    2640:	08 f4       	brcc	.+2      	; 0x2644 <xTaskIncrementTick+0x72>
    2642:	4f c0       	rjmp	.+158    	; 0x26e2 <xTaskIncrementTick+0x110>
    2644:	d9 e0       	ldi	r29, 0x09	; 9
    2646:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    264a:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    264e:	80 81       	ld	r24, Z
    2650:	81 11       	cpse	r24, r1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <xTaskIncrementTick+0x88>
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	9f ef       	ldi	r25, 0xFF	; 255
    2658:	11 c0       	rjmp	.+34     	; 0x267c <xTaskIncrementTick+0xaa>
    265a:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    265e:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2662:	05 80       	ldd	r0, Z+5	; 0x05
    2664:	f6 81       	ldd	r31, Z+6	; 0x06
    2666:	e0 2d       	mov	r30, r0
    2668:	e6 80       	ldd	r14, Z+6	; 0x06
    266a:	f7 80       	ldd	r15, Z+7	; 0x07
    266c:	d7 01       	movw	r26, r14
    266e:	12 96       	adiw	r26, 0x02	; 2
    2670:	8d 91       	ld	r24, X+
    2672:	9c 91       	ld	r25, X
    2674:	13 97       	sbiw	r26, 0x03	; 3
    2676:	08 17       	cp	r16, r24
    2678:	19 07       	cpc	r17, r25
    267a:	28 f4       	brcc	.+10     	; 0x2686 <xTaskIncrementTick+0xb4>
    267c:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    2680:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    2684:	2e c0       	rjmp	.+92     	; 0x26e2 <xTaskIncrementTick+0x110>
    2686:	67 01       	movw	r12, r14
    2688:	b2 e0       	ldi	r27, 0x02	; 2
    268a:	cb 0e       	add	r12, r27
    268c:	d1 1c       	adc	r13, r1
    268e:	c6 01       	movw	r24, r12
    2690:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2694:	f7 01       	movw	r30, r14
    2696:	84 89       	ldd	r24, Z+20	; 0x14
    2698:	95 89       	ldd	r25, Z+21	; 0x15
    269a:	89 2b       	or	r24, r25
    269c:	21 f0       	breq	.+8      	; 0x26a6 <xTaskIncrementTick+0xd4>
    269e:	c7 01       	movw	r24, r14
    26a0:	0c 96       	adiw	r24, 0x0c	; 12
    26a2:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    26a6:	d7 01       	movw	r26, r14
    26a8:	56 96       	adiw	r26, 0x16	; 22
    26aa:	8c 91       	ld	r24, X
    26ac:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    26b0:	98 17       	cp	r25, r24
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <xTaskIncrementTick+0xe6>
    26b4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    26b8:	d8 9f       	mul	r29, r24
    26ba:	c0 01       	movw	r24, r0
    26bc:	11 24       	eor	r1, r1
    26be:	b6 01       	movw	r22, r12
    26c0:	86 5a       	subi	r24, 0xA6	; 166
    26c2:	9b 4f       	sbci	r25, 0xFB	; 251
    26c4:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    26c8:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    26cc:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    26d0:	d7 01       	movw	r26, r14
    26d2:	56 96       	adiw	r26, 0x16	; 22
    26d4:	9c 91       	ld	r25, X
    26d6:	86 89       	ldd	r24, Z+22	; 0x16
    26d8:	98 17       	cp	r25, r24
    26da:	08 f4       	brcc	.+2      	; 0x26de <xTaskIncrementTick+0x10c>
    26dc:	b4 cf       	rjmp	.-152    	; 0x2646 <xTaskIncrementTick+0x74>
    26de:	c1 e0       	ldi	r28, 0x01	; 1
    26e0:	b2 cf       	rjmp	.-156    	; 0x2646 <xTaskIncrementTick+0x74>
    26e2:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    26e6:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    26ea:	e6 89       	ldd	r30, Z+22	; 0x16
    26ec:	b9 e0       	ldi	r27, 0x09	; 9
    26ee:	eb 9f       	mul	r30, r27
    26f0:	f0 01       	movw	r30, r0
    26f2:	11 24       	eor	r1, r1
    26f4:	e6 5a       	subi	r30, 0xA6	; 166
    26f6:	fb 4f       	sbci	r31, 0xFB	; 251
    26f8:	80 81       	ld	r24, Z
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	40 f0       	brcs	.+16     	; 0x270e <xTaskIncrementTick+0x13c>
    26fe:	c1 e0       	ldi	r28, 0x01	; 1
    2700:	06 c0       	rjmp	.+12     	; 0x270e <xTaskIncrementTick+0x13c>
    2702:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxPendedTicks>
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxPendedTicks>
    270c:	c0 e0       	ldi	r28, 0x00	; 0
    270e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    2712:	81 11       	cpse	r24, r1
    2714:	c1 e0       	ldi	r28, 0x01	; 1
    2716:	8c 2f       	mov	r24, r28
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	08 95       	ret

0000272a <xTaskResumeAll>:
    272a:	ef 92       	push	r14
    272c:	ff 92       	push	r15
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	0f 92       	push	r0
    273c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    2746:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    274a:	88 23       	and	r24, r24
    274c:	11 f0       	breq	.+4      	; 0x2752 <xTaskResumeAll+0x28>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	52 c0       	rjmp	.+164    	; 0x27f6 <xTaskResumeAll+0xcc>
    2752:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2756:	88 23       	and	r24, r24
    2758:	d1 f3       	breq	.-12     	; 0x274e <xTaskResumeAll+0x24>
    275a:	c0 e0       	ldi	r28, 0x00	; 0
    275c:	d0 e0       	ldi	r29, 0x00	; 0
    275e:	89 e0       	ldi	r24, 0x09	; 9
    2760:	f8 2e       	mov	r15, r24
    2762:	ee 24       	eor	r14, r14
    2764:	e3 94       	inc	r14
    2766:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <xPendingReadyList>
    276a:	88 23       	and	r24, r24
    276c:	51 f1       	breq	.+84     	; 0x27c2 <xTaskResumeAll+0x98>
    276e:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <xPendingReadyList+0x5>
    2772:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <xPendingReadyList+0x6>
    2776:	c6 81       	ldd	r28, Z+6	; 0x06
    2778:	d7 81       	ldd	r29, Z+7	; 0x07
    277a:	ce 01       	movw	r24, r28
    277c:	0c 96       	adiw	r24, 0x0c	; 12
    277e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2782:	8e 01       	movw	r16, r28
    2784:	0e 5f       	subi	r16, 0xFE	; 254
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
    2788:	c8 01       	movw	r24, r16
    278a:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    278e:	8e 89       	ldd	r24, Y+22	; 0x16
    2790:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2794:	98 17       	cp	r25, r24
    2796:	10 f4       	brcc	.+4      	; 0x279c <xTaskResumeAll+0x72>
    2798:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    279c:	f8 9e       	mul	r15, r24
    279e:	c0 01       	movw	r24, r0
    27a0:	11 24       	eor	r1, r1
    27a2:	b8 01       	movw	r22, r16
    27a4:	86 5a       	subi	r24, 0xA6	; 166
    27a6:	9b 4f       	sbci	r25, 0xFB	; 251
    27a8:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    27ac:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    27b0:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    27b4:	9e 89       	ldd	r25, Y+22	; 0x16
    27b6:	86 89       	ldd	r24, Z+22	; 0x16
    27b8:	98 17       	cp	r25, r24
    27ba:	a8 f2       	brcs	.-86     	; 0x2766 <xTaskResumeAll+0x3c>
    27bc:	e0 92 21 04 	sts	0x0421, r14	; 0x800421 <xYieldPending>
    27c0:	d2 cf       	rjmp	.-92     	; 0x2766 <xTaskResumeAll+0x3c>
    27c2:	cd 2b       	or	r28, r29
    27c4:	11 f0       	breq	.+4      	; 0x27ca <xTaskResumeAll+0xa0>
    27c6:	0e 94 b1 10 	call	0x2162	; 0x2162 <prvResetNextTaskUnblockTime>
    27ca:	c0 91 22 04 	lds	r28, 0x0422	; 0x800422 <uxPendedTicks>
    27ce:	cc 23       	and	r28, r28
    27d0:	51 f0       	breq	.+20     	; 0x27e6 <xTaskResumeAll+0xbc>
    27d2:	d1 e0       	ldi	r29, 0x01	; 1
    27d4:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <xTaskIncrementTick>
    27d8:	81 11       	cpse	r24, r1
    27da:	d0 93 21 04 	sts	0x0421, r29	; 0x800421 <xYieldPending>
    27de:	c1 50       	subi	r28, 0x01	; 1
    27e0:	c9 f7       	brne	.-14     	; 0x27d4 <xTaskResumeAll+0xaa>
    27e2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <uxPendedTicks>
    27e6:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <xTaskResumeAll+0xc6>
    27ee:	af cf       	rjmp	.-162    	; 0x274e <xTaskResumeAll+0x24>
    27f0:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	0f 90       	pop	r0
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	08 95       	ret

00002808 <vTaskDelayUntil>:
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	8c 01       	movw	r16, r24
    2812:	eb 01       	movw	r28, r22
    2814:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    2818:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    281c:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    2820:	f8 01       	movw	r30, r16
    2822:	20 81       	ld	r18, Z
    2824:	31 81       	ldd	r19, Z+1	; 0x01
    2826:	c9 01       	movw	r24, r18
    2828:	8c 0f       	add	r24, r28
    282a:	9d 1f       	adc	r25, r29
    282c:	42 17       	cp	r20, r18
    282e:	53 07       	cpc	r21, r19
    2830:	20 f4       	brcc	.+8      	; 0x283a <vTaskDelayUntil+0x32>
    2832:	82 17       	cp	r24, r18
    2834:	93 07       	cpc	r25, r19
    2836:	40 f4       	brcc	.+16     	; 0x2848 <vTaskDelayUntil+0x40>
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <vTaskDelayUntil+0x38>
    283a:	82 17       	cp	r24, r18
    283c:	93 07       	cpc	r25, r19
    283e:	30 f0       	brcs	.+12     	; 0x284c <vTaskDelayUntil+0x44>
    2840:	21 e0       	ldi	r18, 0x01	; 1
    2842:	48 17       	cp	r20, r24
    2844:	59 07       	cpc	r21, r25
    2846:	18 f0       	brcs	.+6      	; 0x284e <vTaskDelayUntil+0x46>
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	01 c0       	rjmp	.+2      	; 0x284e <vTaskDelayUntil+0x46>
    284c:	21 e0       	ldi	r18, 0x01	; 1
    284e:	f8 01       	movw	r30, r16
    2850:	91 83       	std	Z+1, r25	; 0x01
    2852:	80 83       	st	Z, r24
    2854:	22 23       	and	r18, r18
    2856:	29 f0       	breq	.+10     	; 0x2862 <vTaskDelayUntil+0x5a>
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	84 1b       	sub	r24, r20
    285c:	95 0b       	sbc	r25, r21
    285e:	0e 94 cc 10 	call	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>
    2862:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2866:	81 11       	cpse	r24, r1
    2868:	02 c0       	rjmp	.+4      	; 0x286e <vTaskDelayUntil+0x66>
    286a:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	08 95       	ret

00002878 <vTaskSwitchContext>:
    2878:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    287c:	88 23       	and	r24, r24
    287e:	21 f0       	breq	.+8      	; 0x2888 <vTaskSwitchContext+0x10>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    2886:	08 95       	ret
    2888:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <xYieldPending>
    288c:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    2890:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2894:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2898:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    289c:	2d 91       	ld	r18, X+
    289e:	3c 91       	ld	r19, X
    28a0:	87 89       	ldd	r24, Z+23	; 0x17
    28a2:	90 8d       	ldd	r25, Z+24	; 0x18
    28a4:	82 17       	cp	r24, r18
    28a6:	93 07       	cpc	r25, r19
    28a8:	60 f0       	brcs	.+24     	; 0x28c2 <vTaskSwitchContext+0x4a>
    28aa:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    28ae:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    28b2:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    28b6:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    28ba:	67 5e       	subi	r22, 0xE7	; 231
    28bc:	7f 4f       	sbci	r23, 0xFF	; 255
    28be:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <vApplicationStackOverflowHook>
    28c2:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <uxTopReadyPriority>
    28c6:	69 e0       	ldi	r22, 0x09	; 9
    28c8:	48 2f       	mov	r20, r24
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	64 9f       	mul	r22, r20
    28ce:	90 01       	movw	r18, r0
    28d0:	65 9f       	mul	r22, r21
    28d2:	30 0d       	add	r19, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	f9 01       	movw	r30, r18
    28d8:	e6 5a       	subi	r30, 0xA6	; 166
    28da:	fb 4f       	sbci	r31, 0xFB	; 251
    28dc:	90 81       	ld	r25, Z
    28de:	91 11       	cpse	r25, r1
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <vTaskSwitchContext+0x6e>
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	f1 cf       	rjmp	.-30     	; 0x28c8 <vTaskSwitchContext+0x50>
    28e6:	a1 81       	ldd	r26, Z+1	; 0x01
    28e8:	b2 81       	ldd	r27, Z+2	; 0x02
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	0d 90       	ld	r0, X+
    28ee:	bc 91       	ld	r27, X
    28f0:	a0 2d       	mov	r26, r0
    28f2:	b2 83       	std	Z+2, r27	; 0x02
    28f4:	a1 83       	std	Z+1, r26	; 0x01
    28f6:	23 5a       	subi	r18, 0xA3	; 163
    28f8:	3b 4f       	sbci	r19, 0xFB	; 251
    28fa:	a2 17       	cp	r26, r18
    28fc:	b3 07       	cpc	r27, r19
    28fe:	31 f4       	brne	.+12     	; 0x290c <vTaskSwitchContext+0x94>
    2900:	12 96       	adiw	r26, 0x02	; 2
    2902:	2d 91       	ld	r18, X+
    2904:	3c 91       	ld	r19, X
    2906:	13 97       	sbiw	r26, 0x03	; 3
    2908:	32 83       	std	Z+2, r19	; 0x02
    290a:	21 83       	std	Z+1, r18	; 0x01
    290c:	99 e0       	ldi	r25, 0x09	; 9
    290e:	94 9f       	mul	r25, r20
    2910:	f0 01       	movw	r30, r0
    2912:	95 9f       	mul	r25, r21
    2914:	f0 0d       	add	r31, r0
    2916:	11 24       	eor	r1, r1
    2918:	e6 5a       	subi	r30, 0xA6	; 166
    291a:	fb 4f       	sbci	r31, 0xFB	; 251
    291c:	01 80       	ldd	r0, Z+1	; 0x01
    291e:	f2 81       	ldd	r31, Z+2	; 0x02
    2920:	e0 2d       	mov	r30, r0
    2922:	26 81       	ldd	r18, Z+6	; 0x06
    2924:	37 81       	ldd	r19, Z+7	; 0x07
    2926:	30 93 7f 04 	sts	0x047F, r19	; 0x80047f <pxCurrentTCB+0x1>
    292a:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <pxCurrentTCB>
    292e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2932:	08 95       	ret

00002934 <vTaskPlaceOnEventList>:
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	eb 01       	movw	r28, r22
    293a:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    293e:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2942:	64 5f       	subi	r22, 0xF4	; 244
    2944:	7f 4f       	sbci	r23, 0xFF	; 255
    2946:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	ce 01       	movw	r24, r28
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>

00002956 <vTaskPlaceOnEventListRestricted>:
    2956:	1f 93       	push	r17
    2958:	cf 93       	push	r28
    295a:	df 93       	push	r29
    295c:	eb 01       	movw	r28, r22
    295e:	14 2f       	mov	r17, r20
    2960:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    2964:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2968:	64 5f       	subi	r22, 0xF4	; 244
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2970:	11 23       	and	r17, r17
    2972:	11 f0       	breq	.+4      	; 0x2978 <vTaskPlaceOnEventListRestricted+0x22>
    2974:	cf ef       	ldi	r28, 0xFF	; 255
    2976:	df ef       	ldi	r29, 0xFF	; 255
    2978:	61 2f       	mov	r22, r17
    297a:	ce 01       	movw	r24, r28
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0c 94 cc 10 	jmp	0x2198	; 0x2198 <prvAddCurrentTaskToDelayedList>

00002986 <xTaskRemoveFromEventList>:
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	dc 01       	movw	r26, r24
    2990:	15 96       	adiw	r26, 0x05	; 5
    2992:	ed 91       	ld	r30, X+
    2994:	fc 91       	ld	r31, X
    2996:	16 97       	sbiw	r26, 0x06	; 6
    2998:	c6 81       	ldd	r28, Z+6	; 0x06
    299a:	d7 81       	ldd	r29, Z+7	; 0x07
    299c:	8e 01       	movw	r16, r28
    299e:	04 5f       	subi	r16, 0xF4	; 244
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	c8 01       	movw	r24, r16
    29a4:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    29a8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    29ac:	81 11       	cpse	r24, r1
    29ae:	14 c0       	rjmp	.+40     	; 0x29d8 <xTaskRemoveFromEventList+0x52>
    29b0:	0a 50       	subi	r16, 0x0A	; 10
    29b2:	11 09       	sbc	r17, r1
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    29ba:	8e 89       	ldd	r24, Y+22	; 0x16
    29bc:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    29c0:	98 17       	cp	r25, r24
    29c2:	10 f4       	brcc	.+4      	; 0x29c8 <xTaskRemoveFromEventList+0x42>
    29c4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    29c8:	b9 e0       	ldi	r27, 0x09	; 9
    29ca:	8b 9f       	mul	r24, r27
    29cc:	c0 01       	movw	r24, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	b8 01       	movw	r22, r16
    29d2:	86 5a       	subi	r24, 0xA6	; 166
    29d4:	9b 4f       	sbci	r25, 0xFB	; 251
    29d6:	03 c0       	rjmp	.+6      	; 0x29de <xTaskRemoveFromEventList+0x58>
    29d8:	b8 01       	movw	r22, r16
    29da:	8b e3       	ldi	r24, 0x3B	; 59
    29dc:	94 e0       	ldi	r25, 0x04	; 4
    29de:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    29e2:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    29e6:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    29ea:	9e 89       	ldd	r25, Y+22	; 0x16
    29ec:	86 89       	ldd	r24, Z+22	; 0x16
    29ee:	89 17       	cp	r24, r25
    29f0:	20 f4       	brcc	.+8      	; 0x29fa <xTaskRemoveFromEventList+0x74>
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <xTaskRemoveFromEventList+0x76>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	08 95       	ret

00002a06 <vTaskInternalSetTimeOutState>:
    2a06:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <xNumOfOverflows>
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	20 83       	st	Z, r18
    2a0e:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <xTickCount>
    2a12:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <xTickCount+0x1>
    2a16:	32 83       	std	Z+2, r19	; 0x02
    2a18:	21 83       	std	Z+1, r18	; 0x01
    2a1a:	08 95       	ret

00002a1c <xTaskCheckForTimeOut>:
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	0f 92       	push	r0
    2a26:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    2a2a:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    2a2e:	db 01       	movw	r26, r22
    2a30:	2d 91       	ld	r18, X+
    2a32:	3c 91       	ld	r19, X
    2a34:	2f 3f       	cpi	r18, 0xFF	; 255
    2a36:	bf ef       	ldi	r27, 0xFF	; 255
    2a38:	3b 07       	cpc	r19, r27
    2a3a:	d9 f0       	breq	.+54     	; 0x2a72 <xTaskCheckForTimeOut+0x56>
    2a3c:	ec 01       	movw	r28, r24
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	fa 81       	ldd	r31, Y+2	; 0x02
    2a42:	a0 91 20 04 	lds	r26, 0x0420	; 0x800420 <xNumOfOverflows>
    2a46:	b8 81       	ld	r27, Y
    2a48:	ba 17       	cp	r27, r26
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <xTaskCheckForTimeOut+0x36>
    2a4c:	4e 17       	cp	r20, r30
    2a4e:	5f 07       	cpc	r21, r31
    2a50:	90 f4       	brcc	.+36     	; 0x2a76 <xTaskCheckForTimeOut+0x5a>
    2a52:	4e 1b       	sub	r20, r30
    2a54:	5f 0b       	sbc	r21, r31
    2a56:	fb 01       	movw	r30, r22
    2a58:	42 17       	cp	r20, r18
    2a5a:	53 07       	cpc	r21, r19
    2a5c:	38 f4       	brcc	.+14     	; 0x2a6c <xTaskCheckForTimeOut+0x50>
    2a5e:	24 1b       	sub	r18, r20
    2a60:	35 0b       	sbc	r19, r21
    2a62:	31 83       	std	Z+1, r19	; 0x01
    2a64:	20 83       	st	Z, r18
    2a66:	0e 94 03 15 	call	0x2a06	; 0x2a06 <vTaskInternalSetTimeOutState>
    2a6a:	03 c0       	rjmp	.+6      	; 0x2a72 <xTaskCheckForTimeOut+0x56>
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <xTaskCheckForTimeOut+0x5a>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <xTaskCheckForTimeOut+0x5c>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	df 91       	pop	r29
    2a7e:	cf 91       	pop	r28
    2a80:	08 95       	ret

00002a82 <vTaskMissedYield>:
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    2a88:	08 95       	ret

00002a8a <xTaskGetSchedulerState>:
    2a8a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2a8e:	88 23       	and	r24, r24
    2a90:	31 f0       	breq	.+12     	; 0x2a9e <xTaskGetSchedulerState+0x14>
    2a92:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    2a96:	88 23       	and	r24, r24
    2a98:	21 f0       	breq	.+8      	; 0x2aa2 <xTaskGetSchedulerState+0x18>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	08 95       	ret
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	08 95       	ret
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	08 95       	ret

00002aa6 <xTaskPriorityDisinherit>:
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	fc 01       	movw	r30, r24
    2ab0:	89 2b       	or	r24, r25
    2ab2:	11 f4       	brne	.+4      	; 0x2ab8 <xTaskPriorityDisinherit+0x12>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	2c c0       	rjmp	.+88     	; 0x2b10 <xTaskPriorityDisinherit+0x6a>
    2ab8:	82 a1       	ldd	r24, Z+34	; 0x22
    2aba:	81 50       	subi	r24, 0x01	; 1
    2abc:	82 a3       	std	Z+34, r24	; 0x22
    2abe:	26 89       	ldd	r18, Z+22	; 0x16
    2ac0:	91 a1       	ldd	r25, Z+33	; 0x21
    2ac2:	29 17       	cp	r18, r25
    2ac4:	b9 f3       	breq	.-18     	; 0x2ab4 <xTaskPriorityDisinherit+0xe>
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	f5 cf       	rjmp	.-22     	; 0x2ab4 <xTaskPriorityDisinherit+0xe>
    2aca:	ef 01       	movw	r28, r30
    2acc:	8f 01       	movw	r16, r30
    2ace:	0e 5f       	subi	r16, 0xFE	; 254
    2ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	8e 8b       	std	Y+22, r24	; 0x16
    2adc:	48 2f       	mov	r20, r24
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	24 e0       	ldi	r18, 0x04	; 4
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	24 1b       	sub	r18, r20
    2ae6:	35 0b       	sbc	r19, r21
    2ae8:	3d 87       	std	Y+13, r19	; 0x0d
    2aea:	2c 87       	std	Y+12, r18	; 0x0c
    2aec:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2af0:	98 17       	cp	r25, r24
    2af2:	10 f4       	brcc	.+4      	; 0x2af8 <xTaskPriorityDisinherit+0x52>
    2af4:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2af8:	29 e0       	ldi	r18, 0x09	; 9
    2afa:	24 9f       	mul	r18, r20
    2afc:	c0 01       	movw	r24, r0
    2afe:	25 9f       	mul	r18, r21
    2b00:	90 0d       	add	r25, r0
    2b02:	11 24       	eor	r1, r1
    2b04:	b8 01       	movw	r22, r16
    2b06:	86 5a       	subi	r24, 0xA6	; 166
    2b08:	9b 4f       	sbci	r25, 0xFB	; 251
    2b0a:	0e 94 6d 19 	call	0x32da	; 0x32da <vListInsertEnd>
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	1f 91       	pop	r17
    2b16:	0f 91       	pop	r16
    2b18:	08 95       	ret

00002b1a <prvCheckForValidListAndQueue>:
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	0f 92       	push	r0
    2b20:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2b24:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2b28:	89 2b       	or	r24, r25
    2b2a:	e9 f4       	brne	.+58     	; 0x2b66 <prvCheckForValidListAndQueue+0x4c>
    2b2c:	83 e9       	ldi	r24, 0x93	; 147
    2b2e:	94 e0       	ldi	r25, 0x04	; 4
    2b30:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2b34:	8a e8       	ldi	r24, 0x8A	; 138
    2b36:	94 e0       	ldi	r25, 0x04	; 4
    2b38:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <vListInitialise>
    2b3c:	83 e9       	ldi	r24, 0x93	; 147
    2b3e:	94 e0       	ldi	r25, 0x04	; 4
    2b40:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    2b44:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    2b48:	8a e8       	ldi	r24, 0x8A	; 138
    2b4a:	94 e0       	ldi	r25, 0x04	; 4
    2b4c:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <pxOverflowTimerList+0x1>
    2b50:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <pxOverflowTimerList>
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	65 e0       	ldi	r22, 0x05	; 5
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <xQueueGenericCreate>
    2b5e:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <xTimerQueue+0x1>
    2b62:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <xTimerQueue>
    2b66:	0f 90       	pop	r0
    2b68:	0f be       	out	0x3f, r0	; 63
    2b6a:	08 95       	ret

00002b6c <prvInsertTimerInActiveList>:
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	73 83       	std	Z+3, r23	; 0x03
    2b70:	62 83       	std	Z+2, r22	; 0x02
    2b72:	91 87       	std	Z+9, r25	; 0x09
    2b74:	80 87       	std	Z+8, r24	; 0x08
    2b76:	46 17       	cp	r20, r22
    2b78:	57 07       	cpc	r21, r23
    2b7a:	78 f0       	brcs	.+30     	; 0x2b9a <prvInsertTimerInActiveList+0x2e>
    2b7c:	42 1b       	sub	r20, r18
    2b7e:	53 0b       	sbc	r21, r19
    2b80:	84 85       	ldd	r24, Z+12	; 0x0c
    2b82:	95 85       	ldd	r25, Z+13	; 0x0d
    2b84:	48 17       	cp	r20, r24
    2b86:	59 07       	cpc	r21, r25
    2b88:	c8 f4       	brcc	.+50     	; 0x2bbc <prvInsertTimerInActiveList+0x50>
    2b8a:	bf 01       	movw	r22, r30
    2b8c:	6e 5f       	subi	r22, 0xFE	; 254
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    2b94:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <prvInsertTimerInActiveList+0x48>
    2b9a:	42 17       	cp	r20, r18
    2b9c:	53 07       	cpc	r21, r19
    2b9e:	18 f4       	brcc	.+6      	; 0x2ba6 <prvInsertTimerInActiveList+0x3a>
    2ba0:	62 17       	cp	r22, r18
    2ba2:	73 07       	cpc	r23, r19
    2ba4:	58 f4       	brcc	.+22     	; 0x2bbc <prvInsertTimerInActiveList+0x50>
    2ba6:	bf 01       	movw	r22, r30
    2ba8:	6e 5f       	subi	r22, 0xFE	; 254
    2baa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bac:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    2bb0:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2bb4:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	08 95       	ret
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	08 95       	ret

00002bc0 <xTimerCreateTimerTask>:
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <prvCheckForValidListAndQueue>
    2bca:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2bce:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2bd2:	89 2b       	or	r24, r25
    2bd4:	81 f0       	breq	.+32     	; 0x2bf6 <xTimerCreateTimerTask+0x36>
    2bd6:	82 e8       	ldi	r24, 0x82	; 130
    2bd8:	e8 2e       	mov	r14, r24
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	f8 2e       	mov	r15, r24
    2bde:	03 e0       	ldi	r16, 0x03	; 3
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	45 e5       	ldi	r20, 0x55	; 85
    2be6:	50 e0       	ldi	r21, 0x00	; 0
    2be8:	67 e3       	ldi	r22, 0x37	; 55
    2bea:	72 e0       	ldi	r23, 0x02	; 2
    2bec:	80 e9       	ldi	r24, 0x90	; 144
    2bee:	96 e1       	ldi	r25, 0x16	; 22
    2bf0:	0e 94 56 11 	call	0x22ac	; 0x22ac <xTaskCreate>
    2bf4:	01 c0       	rjmp	.+2      	; 0x2bf8 <xTimerCreateTimerTask+0x38>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	0f 91       	pop	r16
    2bfa:	ff 90       	pop	r15
    2bfc:	ef 90       	pop	r14
    2bfe:	08 95       	ret

00002c00 <xTimerGenericCommand>:
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	00 d0       	rcall	.+0      	; 0x2c0a <xTimerGenericCommand+0xa>
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <xTimerGenericCommand+0xc>
    2c0c:	1f 92       	push	r1
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <xTimerQueue>
    2c16:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2c1a:	10 97       	sbiw	r26, 0x00	; 0
    2c1c:	29 f1       	breq	.+74     	; 0x2c68 <xTimerGenericCommand+0x68>
    2c1e:	f9 01       	movw	r30, r18
    2c20:	69 83       	std	Y+1, r22	; 0x01
    2c22:	5b 83       	std	Y+3, r21	; 0x03
    2c24:	4a 83       	std	Y+2, r20	; 0x02
    2c26:	9d 83       	std	Y+5, r25	; 0x05
    2c28:	8c 83       	std	Y+4, r24	; 0x04
    2c2a:	66 30       	cpi	r22, 0x06	; 6
    2c2c:	a4 f4       	brge	.+40     	; 0x2c56 <xTimerGenericCommand+0x56>
    2c2e:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <xTaskGetSchedulerState>
    2c32:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <xTimerQueue>
    2c36:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	82 30       	cpi	r24, 0x02	; 2
    2c3e:	11 f4       	brne	.+4      	; 0x2c44 <xTimerGenericCommand+0x44>
    2c40:	a8 01       	movw	r20, r16
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <xTimerGenericCommand+0x48>
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	50 e0       	ldi	r21, 0x00	; 0
    2c48:	be 01       	movw	r22, r28
    2c4a:	6f 5f       	subi	r22, 0xFF	; 255
    2c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4e:	cf 01       	movw	r24, r30
    2c50:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <xQueueGenericSend>
    2c54:	0a c0       	rjmp	.+20     	; 0x2c6a <xTimerGenericCommand+0x6a>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	af 01       	movw	r20, r30
    2c5a:	be 01       	movw	r22, r28
    2c5c:	6f 5f       	subi	r22, 0xFF	; 255
    2c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <xQueueGenericSendFromISR>
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <xTimerGenericCommand+0x6a>
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <prvSwitchTimerLists>:
    2c7e:	ef 92       	push	r14
    2c80:	ff 92       	push	r15
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	cf 93       	push	r28
    2c88:	df 93       	push	r29
    2c8a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2c8e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2c92:	80 81       	ld	r24, Z
    2c94:	88 23       	and	r24, r24
    2c96:	89 f1       	breq	.+98     	; 0x2cfa <prvSwitchTimerLists+0x7c>
    2c98:	05 80       	ldd	r0, Z+5	; 0x05
    2c9a:	f6 81       	ldd	r31, Z+6	; 0x06
    2c9c:	e0 2d       	mov	r30, r0
    2c9e:	e0 80       	ld	r14, Z
    2ca0:	f1 80       	ldd	r15, Z+1	; 0x01
    2ca2:	c6 81       	ldd	r28, Z+6	; 0x06
    2ca4:	d7 81       	ldd	r29, Z+7	; 0x07
    2ca6:	8e 01       	movw	r16, r28
    2ca8:	0e 5f       	subi	r16, 0xFE	; 254
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	c8 01       	movw	r24, r16
    2cae:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2cb2:	e8 89       	ldd	r30, Y+16	; 0x10
    2cb4:	f9 89       	ldd	r31, Y+17	; 0x11
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	09 95       	icall
    2cba:	8a 89       	ldd	r24, Y+18	; 0x12
    2cbc:	82 ff       	sbrs	r24, 2
    2cbe:	e5 cf       	rjmp	.-54     	; 0x2c8a <prvSwitchTimerLists+0xc>
    2cc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc4:	8e 0d       	add	r24, r14
    2cc6:	9f 1d       	adc	r25, r15
    2cc8:	e8 16       	cp	r14, r24
    2cca:	f9 06       	cpc	r15, r25
    2ccc:	60 f4       	brcc	.+24     	; 0x2ce6 <prvSwitchTimerLists+0x68>
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	d9 87       	std	Y+9, r29	; 0x09
    2cd4:	c8 87       	std	Y+8, r28	; 0x08
    2cd6:	b8 01       	movw	r22, r16
    2cd8:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    2cdc:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2ce0:	0e 94 8e 19 	call	0x331c	; 0x331c <vListInsert>
    2ce4:	d2 cf       	rjmp	.-92     	; 0x2c8a <prvSwitchTimerLists+0xc>
    2ce6:	00 e0       	ldi	r16, 0x00	; 0
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	a7 01       	movw	r20, r14
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2cf8:	c8 cf       	rjmp	.-112    	; 0x2c8a <prvSwitchTimerLists+0xc>
    2cfa:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    2cfe:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2d02:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    2d06:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    2d0a:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <pxOverflowTimerList+0x1>
    2d0e:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <pxOverflowTimerList>
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	ef 90       	pop	r14
    2d1e:	08 95       	ret

00002d20 <prvTimerTask>:
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <prvTimerTask+0x6>
    2d26:	00 d0       	rcall	.+0      	; 0x2d28 <prvTimerTask+0x8>
    2d28:	1f 92       	push	r1
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2d32:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2d36:	d0 80       	ld	r13, Z
    2d38:	dd 20       	and	r13, r13
    2d3a:	31 f0       	breq	.+12     	; 0x2d48 <prvTimerTask+0x28>
    2d3c:	05 80       	ldd	r0, Z+5	; 0x05
    2d3e:	f6 81       	ldd	r31, Z+6	; 0x06
    2d40:	e0 2d       	mov	r30, r0
    2d42:	e0 80       	ld	r14, Z
    2d44:	f1 80       	ldd	r15, Z+1	; 0x01
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <prvTimerTask+0x2c>
    2d48:	e1 2c       	mov	r14, r1
    2d4a:	f1 2c       	mov	r15, r1
    2d4c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    2d50:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
    2d54:	8c 01       	movw	r16, r24
    2d56:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    2d5a:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    2d5e:	08 17       	cp	r16, r24
    2d60:	19 07       	cpc	r17, r25
    2d62:	20 f4       	brcc	.+8      	; 0x2d6c <prvTimerTask+0x4c>
    2d64:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <prvSwitchTimerLists>
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <prvTimerTask+0x4e>
    2d6c:	80 e0       	ldi	r24, 0x00	; 0
    2d6e:	10 93 81 04 	sts	0x0481, r17	; 0x800481 <xLastTime.2412+0x1>
    2d72:	00 93 80 04 	sts	0x0480, r16	; 0x800480 <xLastTime.2412>
    2d76:	81 11       	cpse	r24, r1
    2d78:	55 c0       	rjmp	.+170    	; 0x2e24 <prvTimerTask+0x104>
    2d7a:	dd 20       	and	r13, r13
    2d7c:	d9 f1       	breq	.+118    	; 0x2df4 <prvTimerTask+0xd4>
    2d7e:	0e 15       	cp	r16, r14
    2d80:	1f 05       	cpc	r17, r15
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <prvTimerTask+0x66>
    2d84:	3e c0       	rjmp	.+124    	; 0x2e02 <prvTimerTask+0xe2>
    2d86:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2d8a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    2d8e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    2d92:	05 80       	ldd	r0, Z+5	; 0x05
    2d94:	f6 81       	ldd	r31, Z+6	; 0x06
    2d96:	e0 2d       	mov	r30, r0
    2d98:	c6 80       	ldd	r12, Z+6	; 0x06
    2d9a:	d7 80       	ldd	r13, Z+7	; 0x07
    2d9c:	c6 01       	movw	r24, r12
    2d9e:	02 96       	adiw	r24, 0x02	; 2
    2da0:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2da4:	d6 01       	movw	r26, r12
    2da6:	52 96       	adiw	r26, 0x12	; 18
    2da8:	8c 91       	ld	r24, X
    2daa:	52 97       	sbiw	r26, 0x12	; 18
    2dac:	82 ff       	sbrs	r24, 2
    2dae:	17 c0       	rjmp	.+46     	; 0x2dde <prvTimerTask+0xbe>
    2db0:	1c 96       	adiw	r26, 0x0c	; 12
    2db2:	6d 91       	ld	r22, X+
    2db4:	7c 91       	ld	r23, X
    2db6:	1d 97       	sbiw	r26, 0x0d	; 13
    2db8:	6e 0d       	add	r22, r14
    2dba:	7f 1d       	adc	r23, r15
    2dbc:	97 01       	movw	r18, r14
    2dbe:	a8 01       	movw	r20, r16
    2dc0:	c6 01       	movw	r24, r12
    2dc2:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2dc6:	88 23       	and	r24, r24
    2dc8:	69 f0       	breq	.+26     	; 0x2de4 <prvTimerTask+0xc4>
    2dca:	00 e0       	ldi	r16, 0x00	; 0
    2dcc:	10 e0       	ldi	r17, 0x00	; 0
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	a7 01       	movw	r20, r14
    2dd4:	60 e0       	ldi	r22, 0x00	; 0
    2dd6:	c6 01       	movw	r24, r12
    2dd8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2ddc:	03 c0       	rjmp	.+6      	; 0x2de4 <prvTimerTask+0xc4>
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	f6 01       	movw	r30, r12
    2de2:	82 8b       	std	Z+18, r24	; 0x12
    2de4:	d6 01       	movw	r26, r12
    2de6:	50 96       	adiw	r26, 0x10	; 16
    2de8:	ed 91       	ld	r30, X+
    2dea:	fc 91       	ld	r31, X
    2dec:	51 97       	sbiw	r26, 0x11	; 17
    2dee:	c6 01       	movw	r24, r12
    2df0:	09 95       	icall
    2df2:	1e c0       	rjmp	.+60     	; 0x2e30 <prvTimerTask+0x110>
    2df4:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxOverflowTimerList>
    2df8:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    2dfc:	80 81       	ld	r24, Z
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	81 11       	cpse	r24, r1
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	b7 01       	movw	r22, r14
    2e06:	60 1b       	sub	r22, r16
    2e08:	71 0b       	sbc	r23, r17
    2e0a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2e0e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2e12:	0e 94 95 10 	call	0x212a	; 0x212a <vQueueWaitForMessageRestricted>
    2e16:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2e1a:	81 11       	cpse	r24, r1
    2e1c:	09 c0       	rjmp	.+18     	; 0x2e30 <prvTimerTask+0x110>
    2e1e:	0e 94 8e 1a 	call	0x351c	; 0x351c <vPortYield>
    2e22:	06 c0       	rjmp	.+12     	; 0x2e30 <prvTimerTask+0x110>
    2e24:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <prvTimerTask+0x110>
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	87 ff       	sbrs	r24, 7
    2e2e:	0e c0       	rjmp	.+28     	; 0x2e4c <prvTimerTask+0x12c>
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	be 01       	movw	r22, r28
    2e36:	6f 5f       	subi	r22, 0xFF	; 255
    2e38:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3a:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    2e3e:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    2e42:	0e 94 03 10 	call	0x2006	; 0x2006 <xQueueReceive>
    2e46:	81 11       	cpse	r24, r1
    2e48:	f0 cf       	rjmp	.-32     	; 0x2e2a <prvTimerTask+0x10a>
    2e4a:	71 cf       	rjmp	.-286    	; 0x2d2e <prvTimerTask+0xe>
    2e4c:	ec 80       	ldd	r14, Y+4	; 0x04
    2e4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e50:	f7 01       	movw	r30, r14
    2e52:	82 85       	ldd	r24, Z+10	; 0x0a
    2e54:	93 85       	ldd	r25, Z+11	; 0x0b
    2e56:	89 2b       	or	r24, r25
    2e58:	21 f0       	breq	.+8      	; 0x2e62 <prvTimerTask+0x142>
    2e5a:	c7 01       	movw	r24, r14
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	0e 94 c6 19 	call	0x338c	; 0x338c <uxListRemove>
    2e62:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskGetTickCount>
    2e66:	6c 01       	movw	r12, r24
    2e68:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    2e6c:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    2e70:	c8 16       	cp	r12, r24
    2e72:	d9 06       	cpc	r13, r25
    2e74:	10 f4       	brcc	.+4      	; 0x2e7a <prvTimerTask+0x15a>
    2e76:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <prvSwitchTimerLists>
    2e7a:	d0 92 81 04 	sts	0x0481, r13	; 0x800481 <xLastTime.2412+0x1>
    2e7e:	c0 92 80 04 	sts	0x0480, r12	; 0x800480 <xLastTime.2412>
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	0e 2e       	mov	r0, r30
    2e86:	00 0c       	add	r0, r0
    2e88:	ff 0b       	sbc	r31, r31
    2e8a:	ea 30       	cpi	r30, 0x0A	; 10
    2e8c:	f1 05       	cpc	r31, r1
    2e8e:	80 f6       	brcc	.-96     	; 0x2e30 <prvTimerTask+0x110>
    2e90:	ec 5c       	subi	r30, 0xCC	; 204
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	d7 01       	movw	r26, r14
    2e96:	52 96       	adiw	r26, 0x12	; 18
    2e98:	8c 91       	ld	r24, X
    2e9a:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__tablejump2__>
    2e9e:	81 60       	ori	r24, 0x01	; 1
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	82 8b       	std	Z+18, r24	; 0x12
    2ea4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ea8:	64 85       	ldd	r22, Z+12	; 0x0c
    2eaa:	75 85       	ldd	r23, Z+13	; 0x0d
    2eac:	62 0f       	add	r22, r18
    2eae:	73 1f       	adc	r23, r19
    2eb0:	a6 01       	movw	r20, r12
    2eb2:	c7 01       	movw	r24, r14
    2eb4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <prvTimerTask+0x19e>
    2ebc:	b9 cf       	rjmp	.-142    	; 0x2e30 <prvTimerTask+0x110>
    2ebe:	d7 01       	movw	r26, r14
    2ec0:	50 96       	adiw	r26, 0x10	; 16
    2ec2:	ed 91       	ld	r30, X+
    2ec4:	fc 91       	ld	r31, X
    2ec6:	51 97       	sbiw	r26, 0x11	; 17
    2ec8:	c7 01       	movw	r24, r14
    2eca:	09 95       	icall
    2ecc:	f7 01       	movw	r30, r14
    2ece:	82 89       	ldd	r24, Z+18	; 0x12
    2ed0:	82 ff       	sbrs	r24, 2
    2ed2:	ae cf       	rjmp	.-164    	; 0x2e30 <prvTimerTask+0x110>
    2ed4:	4a 81       	ldd	r20, Y+2	; 0x02
    2ed6:	5b 81       	ldd	r21, Y+3	; 0x03
    2ed8:	84 85       	ldd	r24, Z+12	; 0x0c
    2eda:	95 85       	ldd	r25, Z+13	; 0x0d
    2edc:	48 0f       	add	r20, r24
    2ede:	59 1f       	adc	r21, r25
    2ee0:	00 e0       	ldi	r16, 0x00	; 0
    2ee2:	10 e0       	ldi	r17, 0x00	; 0
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	c7 01       	movw	r24, r14
    2eec:	0e 94 00 16 	call	0x2c00	; 0x2c00 <xTimerGenericCommand>
    2ef0:	9f cf       	rjmp	.-194    	; 0x2e30 <prvTimerTask+0x110>
    2ef2:	81 60       	ori	r24, 0x01	; 1
    2ef4:	f7 01       	movw	r30, r14
    2ef6:	82 8b       	std	Z+18, r24	; 0x12
    2ef8:	6a 81       	ldd	r22, Y+2	; 0x02
    2efa:	7b 81       	ldd	r23, Y+3	; 0x03
    2efc:	75 87       	std	Z+13, r23	; 0x0d
    2efe:	64 87       	std	Z+12, r22	; 0x0c
    2f00:	6c 0d       	add	r22, r12
    2f02:	7d 1d       	adc	r23, r13
    2f04:	96 01       	movw	r18, r12
    2f06:	a6 01       	movw	r20, r12
    2f08:	c7 01       	movw	r24, r14
    2f0a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <prvInsertTimerInActiveList>
    2f0e:	90 cf       	rjmp	.-224    	; 0x2e30 <prvTimerTask+0x110>
    2f10:	81 fd       	sbrc	r24, 1
    2f12:	04 c0       	rjmp	.+8      	; 0x2f1c <prvTimerTask+0x1fc>
    2f14:	c7 01       	movw	r24, r14
    2f16:	0e 94 4a 19 	call	0x3294	; 0x3294 <vPortFree>
    2f1a:	8a cf       	rjmp	.-236    	; 0x2e30 <prvTimerTask+0x110>
    2f1c:	8e 7f       	andi	r24, 0xFE	; 254
    2f1e:	d7 01       	movw	r26, r14
    2f20:	52 96       	adiw	r26, 0x12	; 18
    2f22:	8c 93       	st	X, r24
    2f24:	85 cf       	rjmp	.-246    	; 0x2e30 <prvTimerTask+0x110>

00002f26 <initVariant>:
    2f26:	0e 94 2b 05 	call	0xa56	; 0xa56 <setup>
    2f2a:	0e 94 ab 12 	call	0x2556	; 0x2556 <vTaskStartScheduler>
    2f2e:	08 95       	ret

00002f30 <vApplicationIdleHook>:
    2f30:	0e 94 68 05 	call	0xad0	; 0xad0 <loop>
    2f34:	8b e2       	ldi	r24, 0x2B	; 43
    2f36:	98 e0       	ldi	r25, 0x08	; 8
    2f38:	89 2b       	or	r24, r25
    2f3a:	11 f0       	breq	.+4      	; 0x2f40 <vApplicationIdleHook+0x10>
    2f3c:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <_Z14serialEventRunv>
    2f40:	08 95       	ret

00002f42 <vApplicationMallocFailedHook>:
    2f42:	25 9a       	sbi	0x04, 5	; 4
    2f44:	2d 9a       	sbi	0x05, 5	; 5
=======
    2596:	81 11       	cpse	r24, r1
    2598:	0e 94 52 12 	call	0x24a4	; 0x24a4 <turnOffPWM>

	out = portOutputRegister(port);
    259c:	ec 2f       	mov	r30, r28
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e8 50       	subi	r30, 0x08	; 8
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	a5 91       	lpm	r26, Z+
    25aa:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25ac:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25ae:	f8 94       	cli

	if (val == LOW) {
    25b0:	11 11       	cpse	r17, r1
    25b2:	04 c0       	rjmp	.+8      	; 0x25bc <digitalWrite+0x4e>
		*out &= ~bit;
    25b4:	8c 91       	ld	r24, X
    25b6:	d0 95       	com	r29
    25b8:	d8 23       	and	r29, r24
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    25bc:	ec 91       	ld	r30, X
    25be:	de 2b       	or	r29, r30
    25c0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25c2:	9f bf       	out	0x3f, r25	; 63
}
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	08 95       	ret

000025cc <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	0f 92       	push	r0
    25d2:	fc 01       	movw	r30, r24
    25d4:	92 8d       	ldd	r25, Z+26	; 0x1a
    25d6:	0f 90       	pop	r0
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	91 11       	cpse	r25, r1
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	08 95       	ret

000025e2 <prvCopyDataToQueue>:
    25e2:	0f 93       	push	r16
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	ec 01       	movw	r28, r24
    25ec:	04 2f       	mov	r16, r20
    25ee:	1a 8d       	ldd	r17, Y+26	; 0x1a
    25f0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25f2:	41 11       	cpse	r20, r1
    25f4:	0b c0       	rjmp	.+22     	; 0x260c <prvCopyDataToQueue+0x2a>
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	89 2b       	or	r24, r25
    25fc:	e9 f5       	brne	.+122    	; 0x2678 <prvCopyDataToQueue+0x96>
    25fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2600:	9d 81       	ldd	r25, Y+5	; 0x05
    2602:	0e 94 a8 1b 	call	0x3750	; 0x3750 <xTaskPriorityDisinherit>
    2606:	1d 82       	std	Y+5, r1	; 0x05
    2608:	1c 82       	std	Y+4, r1	; 0x04
    260a:	37 c0       	rjmp	.+110    	; 0x267a <prvCopyDataToQueue+0x98>
    260c:	50 e0       	ldi	r21, 0x00	; 0
    260e:	01 11       	cpse	r16, r1
    2610:	15 c0       	rjmp	.+42     	; 0x263c <prvCopyDataToQueue+0x5a>
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	0e 94 ba 24 	call	0x4974	; 0x4974 <memcpy>
    261a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	9b 81       	ldd	r25, Y+3	; 0x03
    2620:	82 0f       	add	r24, r18
    2622:	91 1d       	adc	r25, r1
    2624:	9b 83       	std	Y+3, r25	; 0x03
    2626:	8a 83       	std	Y+2, r24	; 0x02
    2628:	2c 81       	ldd	r18, Y+4	; 0x04
    262a:	3d 81       	ldd	r19, Y+5	; 0x05
    262c:	82 17       	cp	r24, r18
    262e:	93 07       	cpc	r25, r19
    2630:	18 f1       	brcs	.+70     	; 0x2678 <prvCopyDataToQueue+0x96>
    2632:	88 81       	ld	r24, Y
    2634:	99 81       	ldd	r25, Y+1	; 0x01
    2636:	9b 83       	std	Y+3, r25	; 0x03
    2638:	8a 83       	std	Y+2, r24	; 0x02
    263a:	1e c0       	rjmp	.+60     	; 0x2678 <prvCopyDataToQueue+0x96>
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	9f 81       	ldd	r25, Y+7	; 0x07
    2640:	0e 94 ba 24 	call	0x4974	; 0x4974 <memcpy>
    2644:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	91 95       	neg	r25
    264a:	81 95       	neg	r24
    264c:	91 09       	sbc	r25, r1
    264e:	2e 81       	ldd	r18, Y+6	; 0x06
    2650:	3f 81       	ldd	r19, Y+7	; 0x07
    2652:	28 0f       	add	r18, r24
    2654:	39 1f       	adc	r19, r25
    2656:	3f 83       	std	Y+7, r19	; 0x07
    2658:	2e 83       	std	Y+6, r18	; 0x06
    265a:	48 81       	ld	r20, Y
    265c:	59 81       	ldd	r21, Y+1	; 0x01
    265e:	24 17       	cp	r18, r20
    2660:	35 07       	cpc	r19, r21
    2662:	30 f4       	brcc	.+12     	; 0x2670 <prvCopyDataToQueue+0x8e>
    2664:	2c 81       	ldd	r18, Y+4	; 0x04
    2666:	3d 81       	ldd	r19, Y+5	; 0x05
    2668:	82 0f       	add	r24, r18
    266a:	93 1f       	adc	r25, r19
    266c:	9f 83       	std	Y+7, r25	; 0x07
    266e:	8e 83       	std	Y+6, r24	; 0x06
    2670:	02 30       	cpi	r16, 0x02	; 2
    2672:	11 f4       	brne	.+4      	; 0x2678 <prvCopyDataToQueue+0x96>
    2674:	11 11       	cpse	r17, r1
    2676:	11 50       	subi	r17, 0x01	; 1
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	1f 5f       	subi	r17, 0xFF	; 255
    267c:	1a 8f       	std	Y+26, r17	; 0x1a
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	08 95       	ret

00002688 <prvCopyDataFromQueue>:
    2688:	fc 01       	movw	r30, r24
    268a:	cb 01       	movw	r24, r22
    268c:	44 8d       	ldd	r20, Z+28	; 0x1c
    268e:	44 23       	and	r20, r20
    2690:	a1 f0       	breq	.+40     	; 0x26ba <prvCopyDataFromQueue+0x32>
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	26 81       	ldd	r18, Z+6	; 0x06
    2696:	37 81       	ldd	r19, Z+7	; 0x07
    2698:	24 0f       	add	r18, r20
    269a:	35 1f       	adc	r19, r21
    269c:	37 83       	std	Z+7, r19	; 0x07
    269e:	26 83       	std	Z+6, r18	; 0x06
    26a0:	64 81       	ldd	r22, Z+4	; 0x04
    26a2:	75 81       	ldd	r23, Z+5	; 0x05
    26a4:	26 17       	cp	r18, r22
    26a6:	37 07       	cpc	r19, r23
    26a8:	20 f0       	brcs	.+8      	; 0x26b2 <prvCopyDataFromQueue+0x2a>
    26aa:	20 81       	ld	r18, Z
    26ac:	31 81       	ldd	r19, Z+1	; 0x01
    26ae:	37 83       	std	Z+7, r19	; 0x07
    26b0:	26 83       	std	Z+6, r18	; 0x06
    26b2:	66 81       	ldd	r22, Z+6	; 0x06
    26b4:	77 81       	ldd	r23, Z+7	; 0x07
    26b6:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <memcpy>
    26ba:	08 95       	ret

000026bc <prvUnlockQueue>:
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	1f 93       	push	r17
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	ec 01       	movw	r28, r24
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	0f 92       	push	r0
    26ce:	1e 8d       	ldd	r17, Y+30	; 0x1e
    26d0:	7c 01       	movw	r14, r24
    26d2:	81 e1       	ldi	r24, 0x11	; 17
    26d4:	e8 0e       	add	r14, r24
    26d6:	f1 1c       	adc	r15, r1
    26d8:	11 16       	cp	r1, r17
    26da:	5c f4       	brge	.+22     	; 0x26f2 <prvUnlockQueue+0x36>
    26dc:	89 89       	ldd	r24, Y+17	; 0x11
    26de:	88 23       	and	r24, r24
    26e0:	41 f0       	breq	.+16     	; 0x26f2 <prvUnlockQueue+0x36>
    26e2:	c7 01       	movw	r24, r14
    26e4:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    26e8:	81 11       	cpse	r24, r1
    26ea:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskMissedYield>
    26ee:	11 50       	subi	r17, 0x01	; 1
    26f0:	f3 cf       	rjmp	.-26     	; 0x26d8 <prvUnlockQueue+0x1c>
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	8e 8f       	std	Y+30, r24	; 0x1e
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	0f 92       	push	r0
    2700:	1d 8d       	ldd	r17, Y+29	; 0x1d
    2702:	7e 01       	movw	r14, r28
    2704:	88 e0       	ldi	r24, 0x08	; 8
    2706:	e8 0e       	add	r14, r24
    2708:	f1 1c       	adc	r15, r1
    270a:	11 16       	cp	r1, r17
    270c:	5c f4       	brge	.+22     	; 0x2724 <prvUnlockQueue+0x68>
    270e:	88 85       	ldd	r24, Y+8	; 0x08
    2710:	88 23       	and	r24, r24
    2712:	41 f0       	breq	.+16     	; 0x2724 <prvUnlockQueue+0x68>
    2714:	c7 01       	movw	r24, r14
    2716:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    271a:	81 11       	cpse	r24, r1
    271c:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskMissedYield>
    2720:	11 50       	subi	r17, 0x01	; 1
    2722:	f3 cf       	rjmp	.-26     	; 0x270a <prvUnlockQueue+0x4e>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	8d 8f       	std	Y+29, r24	; 0x1d
    2728:	0f 90       	pop	r0
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	ff 90       	pop	r15
    2734:	ef 90       	pop	r14
    2736:	08 95       	ret

00002738 <xQueueGenericReset>:
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	ec 01       	movw	r28, r24
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	0f 92       	push	r0
    2744:	48 81       	ld	r20, Y
    2746:	59 81       	ldd	r21, Y+1	; 0x01
    2748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    274c:	9a 01       	movw	r18, r20
    274e:	87 9f       	mul	r24, r23
    2750:	20 0d       	add	r18, r0
    2752:	31 1d       	adc	r19, r1
    2754:	11 24       	eor	r1, r1
    2756:	3d 83       	std	Y+5, r19	; 0x05
    2758:	2c 83       	std	Y+4, r18	; 0x04
    275a:	1a 8e       	std	Y+26, r1	; 0x1a
    275c:	5b 83       	std	Y+3, r21	; 0x03
    275e:	4a 83       	std	Y+2, r20	; 0x02
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	78 9f       	mul	r23, r24
    2766:	90 01       	movw	r18, r0
    2768:	79 9f       	mul	r23, r25
    276a:	30 0d       	add	r19, r0
    276c:	11 24       	eor	r1, r1
    276e:	ca 01       	movw	r24, r20
    2770:	82 0f       	add	r24, r18
    2772:	93 1f       	adc	r25, r19
    2774:	9f 83       	std	Y+7, r25	; 0x07
    2776:	8e 83       	std	Y+6, r24	; 0x06
    2778:	8f ef       	ldi	r24, 0xFF	; 255
    277a:	8d 8f       	std	Y+29, r24	; 0x1d
    277c:	8e 8f       	std	Y+30, r24	; 0x1e
    277e:	61 11       	cpse	r22, r1
    2780:	0c c0       	rjmp	.+24     	; 0x279a <xQueueGenericReset+0x62>
    2782:	88 85       	ldd	r24, Y+8	; 0x08
    2784:	88 23       	and	r24, r24
    2786:	89 f0       	breq	.+34     	; 0x27aa <xQueueGenericReset+0x72>
    2788:	ce 01       	movw	r24, r28
    278a:	08 96       	adiw	r24, 0x08	; 8
    278c:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    2790:	88 23       	and	r24, r24
    2792:	59 f0       	breq	.+22     	; 0x27aa <xQueueGenericReset+0x72>
    2794:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2798:	08 c0       	rjmp	.+16     	; 0x27aa <xQueueGenericReset+0x72>
    279a:	ce 01       	movw	r24, r28
    279c:	08 96       	adiw	r24, 0x08	; 8
    279e:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    27a2:	ce 01       	movw	r24, r28
    27a4:	41 96       	adiw	r24, 0x11	; 17
    27a6:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <xQueueGenericCreate>:
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	08 2f       	mov	r16, r24
    27c0:	16 2f       	mov	r17, r22
    27c2:	66 23       	and	r22, r22
    27c4:	21 f0       	breq	.+8      	; 0x27ce <xQueueGenericCreate+0x18>
    27c6:	86 9f       	mul	r24, r22
    27c8:	c0 01       	movw	r24, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <xQueueGenericCreate+0x1c>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	4f 96       	adiw	r24, 0x1f	; 31
    27d4:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <pvPortMalloc>
    27d8:	ec 01       	movw	r28, r24
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	71 f0       	breq	.+28     	; 0x27fa <xQueueGenericCreate+0x44>
    27de:	11 11       	cpse	r17, r1
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <xQueueGenericCreate+0x32>
    27e2:	99 83       	std	Y+1, r25	; 0x01
    27e4:	88 83       	st	Y, r24
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <xQueueGenericCreate+0x38>
    27e8:	4f 96       	adiw	r24, 0x1f	; 31
    27ea:	99 83       	std	Y+1, r25	; 0x01
    27ec:	88 83       	st	Y, r24
    27ee:	0b 8f       	std	Y+27, r16	; 0x1b
    27f0:	1c 8f       	std	Y+28, r17	; 0x1c
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	ce 01       	movw	r24, r28
    27f6:	0e 94 9c 13 	call	0x2738	; 0x2738 <xQueueGenericReset>
    27fa:	ce 01       	movw	r24, r28
    27fc:	df 91       	pop	r29
    27fe:	cf 91       	pop	r28
    2800:	1f 91       	pop	r17
    2802:	0f 91       	pop	r16
    2804:	08 95       	ret

00002806 <xQueueGenericSend>:
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	00 d0       	rcall	.+0      	; 0x281a <xQueueGenericSend+0x14>
    281a:	00 d0       	rcall	.+0      	; 0x281c <xQueueGenericSend+0x16>
    281c:	1f 92       	push	r1
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	8c 01       	movw	r16, r24
    2824:	6b 01       	movw	r12, r22
    2826:	5d 83       	std	Y+5, r21	; 0x05
    2828:	4c 83       	std	Y+4, r20	; 0x04
    282a:	f2 2e       	mov	r15, r18
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	58 01       	movw	r10, r16
    2830:	98 e0       	ldi	r25, 0x08	; 8
    2832:	a9 0e       	add	r10, r25
    2834:	b1 1c       	adc	r11, r1
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	0f 92       	push	r0
    283c:	f8 01       	movw	r30, r16
    283e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2840:	93 8d       	ldd	r25, Z+27	; 0x1b
    2842:	29 17       	cp	r18, r25
    2844:	18 f0       	brcs	.+6      	; 0x284c <xQueueGenericSend+0x46>
    2846:	f2 e0       	ldi	r31, 0x02	; 2
    2848:	ff 12       	cpse	r15, r31
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <xQueueGenericSend+0x6e>
    284c:	4f 2d       	mov	r20, r15
    284e:	b6 01       	movw	r22, r12
    2850:	c8 01       	movw	r24, r16
    2852:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <prvCopyDataToQueue>
    2856:	f8 01       	movw	r30, r16
    2858:	91 89       	ldd	r25, Z+17	; 0x11
    285a:	99 23       	and	r25, r25
    285c:	21 f0       	breq	.+8      	; 0x2866 <xQueueGenericSend+0x60>
    285e:	c8 01       	movw	r24, r16
    2860:	41 96       	adiw	r24, 0x11	; 17
    2862:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    2866:	81 11       	cpse	r24, r1
    2868:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    286c:	0f 90       	pop	r0
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	50 c0       	rjmp	.+160    	; 0x2914 <xQueueGenericSend+0x10e>
    2874:	2c 81       	ldd	r18, Y+4	; 0x04
    2876:	3d 81       	ldd	r19, Y+5	; 0x05
    2878:	23 2b       	or	r18, r19
    287a:	19 f4       	brne	.+6      	; 0x2882 <xQueueGenericSend+0x7c>
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	48 c0       	rjmp	.+144    	; 0x2912 <xQueueGenericSend+0x10c>
    2882:	81 11       	cpse	r24, r1
    2884:	04 c0       	rjmp	.+8      	; 0x288e <xQueueGenericSend+0x88>
    2886:	ce 01       	movw	r24, r28
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskInternalSetTimeOutState>
    288e:	0f 90       	pop	r0
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    2896:	0f b6       	in	r0, 0x3f	; 63
    2898:	f8 94       	cli
    289a:	0f 92       	push	r0
    289c:	f8 01       	movw	r30, r16
    289e:	85 8d       	ldd	r24, Z+29	; 0x1d
    28a0:	8f 3f       	cpi	r24, 0xFF	; 255
    28a2:	09 f4       	brne	.+2      	; 0x28a6 <xQueueGenericSend+0xa0>
    28a4:	15 8e       	std	Z+29, r1	; 0x1d
    28a6:	f8 01       	movw	r30, r16
    28a8:	86 8d       	ldd	r24, Z+30	; 0x1e
    28aa:	8f 3f       	cpi	r24, 0xFF	; 255
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <xQueueGenericSend+0xaa>
    28ae:	16 8e       	std	Z+30, r1	; 0x1e
    28b0:	0f 90       	pop	r0
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	be 01       	movw	r22, r28
    28b6:	6c 5f       	subi	r22, 0xFC	; 252
    28b8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ba:	ce 01       	movw	r24, r28
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	0e 94 00 1b 	call	0x3600	; 0x3600 <xTaskCheckForTimeOut>
    28c2:	81 11       	cpse	r24, r1
    28c4:	21 c0       	rjmp	.+66     	; 0x2908 <xQueueGenericSend+0x102>
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	0f 92       	push	r0
    28cc:	f8 01       	movw	r30, r16
    28ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    28d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    28d2:	0f 90       	pop	r0
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	98 13       	cpse	r25, r24
    28d8:	11 c0       	rjmp	.+34     	; 0x28fc <xQueueGenericSend+0xf6>
    28da:	6c 81       	ldd	r22, Y+4	; 0x04
    28dc:	7d 81       	ldd	r23, Y+5	; 0x05
    28de:	c5 01       	movw	r24, r10
    28e0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskPlaceOnEventList>
    28e4:	c8 01       	movw	r24, r16
    28e6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    28ea:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    28ee:	88 23       	and	r24, r24
    28f0:	11 f0       	breq	.+4      	; 0x28f6 <xQueueGenericSend+0xf0>
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	a0 cf       	rjmp	.-192    	; 0x2836 <xQueueGenericSend+0x30>
    28f6:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    28fa:	fb cf       	rjmp	.-10     	; 0x28f2 <xQueueGenericSend+0xec>
    28fc:	c8 01       	movw	r24, r16
    28fe:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2902:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2906:	f5 cf       	rjmp	.-22     	; 0x28f2 <xQueueGenericSend+0xec>
    2908:	c8 01       	movw	r24, r16
    290a:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    290e:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	bf 90       	pop	r11
    292e:	af 90       	pop	r10
    2930:	08 95       	ret

00002932 <xQueueGenericSendFromISR>:
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	ec 01       	movw	r28, r24
    293e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2942:	98 17       	cp	r25, r24
    2944:	10 f0       	brcs	.+4      	; 0x294a <xQueueGenericSendFromISR+0x18>
    2946:	22 30       	cpi	r18, 0x02	; 2
    2948:	e1 f4       	brne	.+56     	; 0x2982 <xQueueGenericSendFromISR+0x50>
    294a:	7a 01       	movw	r14, r20
    294c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    294e:	42 2f       	mov	r20, r18
    2950:	ce 01       	movw	r24, r28
    2952:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <prvCopyDataToQueue>
    2956:	1f 3f       	cpi	r17, 0xFF	; 255
    2958:	81 f4       	brne	.+32     	; 0x297a <xQueueGenericSendFromISR+0x48>
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	88 23       	and	r24, r24
    295e:	79 f0       	breq	.+30     	; 0x297e <xQueueGenericSendFromISR+0x4c>
    2960:	ce 01       	movw	r24, r28
    2962:	41 96       	adiw	r24, 0x11	; 17
    2964:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    2968:	88 23       	and	r24, r24
    296a:	49 f0       	breq	.+18     	; 0x297e <xQueueGenericSendFromISR+0x4c>
    296c:	e1 14       	cp	r14, r1
    296e:	f1 04       	cpc	r15, r1
    2970:	31 f0       	breq	.+12     	; 0x297e <xQueueGenericSendFromISR+0x4c>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	f7 01       	movw	r30, r14
    2976:	80 83       	st	Z, r24
    2978:	05 c0       	rjmp	.+10     	; 0x2984 <xQueueGenericSendFromISR+0x52>
    297a:	1f 5f       	subi	r17, 0xFF	; 255
    297c:	1e 8f       	std	Y+30, r17	; 0x1e
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <xQueueGenericSendFromISR+0x52>
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	ff 90       	pop	r15
    298c:	ef 90       	pop	r14
    298e:	08 95       	ret

00002990 <xQueueReceive>:
    2990:	af 92       	push	r10
    2992:	bf 92       	push	r11
    2994:	cf 92       	push	r12
    2996:	df 92       	push	r13
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <xQueueReceive+0x14>
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <xQueueReceive+0x16>
    29a6:	1f 92       	push	r1
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	8c 01       	movw	r16, r24
    29ae:	6b 01       	movw	r12, r22
    29b0:	5d 83       	std	Y+5, r21	; 0x05
    29b2:	4c 83       	std	Y+4, r20	; 0x04
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	58 01       	movw	r10, r16
    29b8:	91 e1       	ldi	r25, 0x11	; 17
    29ba:	a9 0e       	add	r10, r25
    29bc:	b1 1c       	adc	r11, r1
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	0f 92       	push	r0
    29c4:	f8 01       	movw	r30, r16
    29c6:	f2 8c       	ldd	r15, Z+26	; 0x1a
    29c8:	ff 20       	and	r15, r15
    29ca:	a9 f0       	breq	.+42     	; 0x29f6 <xQueueReceive+0x66>
    29cc:	b6 01       	movw	r22, r12
    29ce:	c8 01       	movw	r24, r16
    29d0:	0e 94 44 13 	call	0x2688	; 0x2688 <prvCopyDataFromQueue>
    29d4:	fa 94       	dec	r15
    29d6:	f8 01       	movw	r30, r16
    29d8:	f2 8e       	std	Z+26, r15	; 0x1a
    29da:	80 85       	ldd	r24, Z+8	; 0x08
    29dc:	88 23       	and	r24, r24
    29de:	39 f0       	breq	.+14     	; 0x29ee <xQueueReceive+0x5e>
    29e0:	c8 01       	movw	r24, r16
    29e2:	08 96       	adiw	r24, 0x08	; 8
    29e4:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    29e8:	81 11       	cpse	r24, r1
    29ea:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    29ee:	0f 90       	pop	r0
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	50 c0       	rjmp	.+160    	; 0x2a96 <xQueueReceive+0x106>
    29f6:	2c 81       	ldd	r18, Y+4	; 0x04
    29f8:	3d 81       	ldd	r19, Y+5	; 0x05
    29fa:	23 2b       	or	r18, r19
    29fc:	19 f4       	brne	.+6      	; 0x2a04 <xQueueReceive+0x74>
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	48 c0       	rjmp	.+144    	; 0x2a94 <xQueueReceive+0x104>
    2a04:	81 11       	cpse	r24, r1
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <xQueueReceive+0x80>
    2a08:	ce 01       	movw	r24, r28
    2a0a:	01 96       	adiw	r24, 0x01	; 1
    2a0c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskInternalSetTimeOutState>
    2a10:	0f 90       	pop	r0
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	0f 92       	push	r0
    2a1e:	f8 01       	movw	r30, r16
    2a20:	85 8d       	ldd	r24, Z+29	; 0x1d
    2a22:	8f 3f       	cpi	r24, 0xFF	; 255
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <xQueueReceive+0x98>
    2a26:	15 8e       	std	Z+29, r1	; 0x1d
    2a28:	f8 01       	movw	r30, r16
    2a2a:	86 8d       	ldd	r24, Z+30	; 0x1e
    2a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <xQueueReceive+0xa2>
    2a30:	16 8e       	std	Z+30, r1	; 0x1e
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	be 01       	movw	r22, r28
    2a38:	6c 5f       	subi	r22, 0xFC	; 252
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	0e 94 00 1b 	call	0x3600	; 0x3600 <xTaskCheckForTimeOut>
    2a44:	81 11       	cpse	r24, r1
    2a46:	1c c0       	rjmp	.+56     	; 0x2a80 <xQueueReceive+0xf0>
    2a48:	c8 01       	movw	r24, r16
    2a4a:	0e 94 e6 12 	call	0x25cc	; 0x25cc <prvIsQueueEmpty>
    2a4e:	88 23       	and	r24, r24
    2a50:	89 f0       	breq	.+34     	; 0x2a74 <xQueueReceive+0xe4>
    2a52:	6c 81       	ldd	r22, Y+4	; 0x04
    2a54:	7d 81       	ldd	r23, Y+5	; 0x05
    2a56:	c5 01       	movw	r24, r10
    2a58:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskPlaceOnEventList>
    2a5c:	c8 01       	movw	r24, r16
    2a5e:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2a62:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2a66:	88 23       	and	r24, r24
    2a68:	11 f0       	breq	.+4      	; 0x2a6e <xQueueReceive+0xde>
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	a8 cf       	rjmp	.-176    	; 0x29be <xQueueReceive+0x2e>
    2a6e:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2a72:	fb cf       	rjmp	.-10     	; 0x2a6a <xQueueReceive+0xda>
    2a74:	c8 01       	movw	r24, r16
    2a76:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2a7a:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2a7e:	f5 cf       	rjmp	.-22     	; 0x2a6a <xQueueReceive+0xda>
    2a80:	c8 01       	movw	r24, r16
    2a82:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2a86:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <prvIsQueueEmpty>
    2a90:	88 23       	and	r24, r24
    2a92:	59 f3       	breq	.-42     	; 0x2a6a <xQueueReceive+0xda>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	df 90       	pop	r13
    2aac:	cf 90       	pop	r12
    2aae:	bf 90       	pop	r11
    2ab0:	af 90       	pop	r10
    2ab2:	08 95       	ret

00002ab4 <xQueueSemaphoreTake>:
    2ab4:	cf 92       	push	r12
    2ab6:	df 92       	push	r13
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <xQueueSemaphoreTake+0x10>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <xQueueSemaphoreTake+0x12>
    2ac6:	1f 92       	push	r1
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	8c 01       	movw	r16, r24
    2ace:	7d 83       	std	Y+5, r23	; 0x05
    2ad0:	6c 83       	std	Y+4, r22	; 0x04
    2ad2:	f1 2c       	mov	r15, r1
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	68 01       	movw	r12, r16
    2ad8:	81 e1       	ldi	r24, 0x11	; 17
    2ada:	c8 0e       	add	r12, r24
    2adc:	d1 1c       	adc	r13, r1
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	0f 92       	push	r0
    2ae4:	d8 01       	movw	r26, r16
    2ae6:	5a 96       	adiw	r26, 0x1a	; 26
    2ae8:	8c 91       	ld	r24, X
    2aea:	5a 97       	sbiw	r26, 0x1a	; 26
    2aec:	88 23       	and	r24, r24
    2aee:	e9 f0       	breq	.+58     	; 0x2b2a <xQueueSemaphoreTake+0x76>
    2af0:	81 50       	subi	r24, 0x01	; 1
    2af2:	5a 96       	adiw	r26, 0x1a	; 26
    2af4:	8c 93       	st	X, r24
    2af6:	5a 97       	sbiw	r26, 0x1a	; 26
    2af8:	8d 91       	ld	r24, X+
    2afa:	9c 91       	ld	r25, X
    2afc:	89 2b       	or	r24, r25
    2afe:	29 f4       	brne	.+10     	; 0x2b0a <xQueueSemaphoreTake+0x56>
    2b00:	0e 94 29 1c 	call	0x3852	; 0x3852 <pvTaskIncrementMutexHeldCount>
    2b04:	f8 01       	movw	r30, r16
    2b06:	95 83       	std	Z+5, r25	; 0x05
    2b08:	84 83       	std	Z+4, r24	; 0x04
    2b0a:	d8 01       	movw	r26, r16
    2b0c:	18 96       	adiw	r26, 0x08	; 8
    2b0e:	8c 91       	ld	r24, X
    2b10:	88 23       	and	r24, r24
    2b12:	39 f0       	breq	.+14     	; 0x2b22 <xQueueSemaphoreTake+0x6e>
    2b14:	c8 01       	movw	r24, r16
    2b16:	08 96       	adiw	r24, 0x08	; 8
    2b18:	0e 94 b5 1a 	call	0x356a	; 0x356a <xTaskRemoveFromEventList>
    2b1c:	81 11       	cpse	r24, r1
    2b1e:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2b22:	0f 90       	pop	r0
    2b24:	0f be       	out	0x3f, r0	; 63
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	7a c0       	rjmp	.+244    	; 0x2c1e <xQueueSemaphoreTake+0x16a>
    2b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b2e:	23 2b       	or	r18, r19
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <xQueueSemaphoreTake+0x80>
    2b32:	72 c0       	rjmp	.+228    	; 0x2c18 <xQueueSemaphoreTake+0x164>
    2b34:	91 11       	cpse	r25, r1
    2b36:	04 c0       	rjmp	.+8      	; 0x2b40 <xQueueSemaphoreTake+0x8c>
    2b38:	ce 01       	movw	r24, r28
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskInternalSetTimeOutState>
    2b40:	0f 90       	pop	r0
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	0f 92       	push	r0
    2b4e:	f8 01       	movw	r30, r16
    2b50:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <xQueueSemaphoreTake+0xa4>
    2b56:	15 8e       	std	Z+29, r1	; 0x1d
    2b58:	d8 01       	movw	r26, r16
    2b5a:	5e 96       	adiw	r26, 0x1e	; 30
    2b5c:	8c 91       	ld	r24, X
    2b5e:	5e 97       	sbiw	r26, 0x1e	; 30
    2b60:	8f 3f       	cpi	r24, 0xFF	; 255
    2b62:	11 f4       	brne	.+4      	; 0x2b68 <xQueueSemaphoreTake+0xb4>
    2b64:	5e 96       	adiw	r26, 0x1e	; 30
    2b66:	1c 92       	st	X, r1
    2b68:	0f 90       	pop	r0
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	be 01       	movw	r22, r28
    2b6e:	6c 5f       	subi	r22, 0xFC	; 252
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	ce 01       	movw	r24, r28
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	0e 94 00 1b 	call	0x3600	; 0x3600 <xTaskCheckForTimeOut>
    2b7a:	81 11       	cpse	r24, r1
    2b7c:	2b c0       	rjmp	.+86     	; 0x2bd4 <xQueueSemaphoreTake+0x120>
    2b7e:	c8 01       	movw	r24, r16
    2b80:	0e 94 e6 12 	call	0x25cc	; 0x25cc <prvIsQueueEmpty>
    2b84:	88 23       	and	r24, r24
    2b86:	01 f1       	breq	.+64     	; 0x2bc8 <xQueueSemaphoreTake+0x114>
    2b88:	f8 01       	movw	r30, r16
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	89 2b       	or	r24, r25
    2b90:	51 f4       	brne	.+20     	; 0x2ba6 <xQueueSemaphoreTake+0xf2>
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	0f 92       	push	r0
    2b98:	84 81       	ldd	r24, Z+4	; 0x04
    2b9a:	95 81       	ldd	r25, Z+5	; 0x05
    2b9c:	0e 94 45 1b 	call	0x368a	; 0x368a <xTaskPriorityInherit>
    2ba0:	f8 2e       	mov	r15, r24
    2ba2:	0f 90       	pop	r0
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	6c 81       	ldd	r22, Y+4	; 0x04
    2ba8:	7d 81       	ldd	r23, Y+5	; 0x05
    2baa:	c6 01       	movw	r24, r12
    2bac:	0e 94 8c 1a 	call	0x3518	; 0x3518 <vTaskPlaceOnEventList>
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2bb6:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2bba:	88 23       	and	r24, r24
    2bbc:	11 f0       	breq	.+4      	; 0x2bc2 <xQueueSemaphoreTake+0x10e>
    2bbe:	91 e0       	ldi	r25, 0x01	; 1
    2bc0:	8e cf       	rjmp	.-228    	; 0x2ade <xQueueSemaphoreTake+0x2a>
    2bc2:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2bc6:	fb cf       	rjmp	.-10     	; 0x2bbe <xQueueSemaphoreTake+0x10a>
    2bc8:	c8 01       	movw	r24, r16
    2bca:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2bce:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2bd2:	f5 cf       	rjmp	.-22     	; 0x2bbe <xQueueSemaphoreTake+0x10a>
    2bd4:	c8 01       	movw	r24, r16
    2bd6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <prvUnlockQueue>
    2bda:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    2bde:	c8 01       	movw	r24, r16
    2be0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <prvIsQueueEmpty>
    2be4:	88 23       	and	r24, r24
    2be6:	59 f3       	breq	.-42     	; 0x2bbe <xQueueSemaphoreTake+0x10a>
    2be8:	ff 20       	and	r15, r15
    2bea:	c1 f0       	breq	.+48     	; 0x2c1c <xQueueSemaphoreTake+0x168>
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	0f 92       	push	r0
    2bf2:	f8 01       	movw	r30, r16
    2bf4:	81 89       	ldd	r24, Z+17	; 0x11
    2bf6:	88 23       	and	r24, r24
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <xQueueSemaphoreTake+0x154>
    2bfa:	06 88       	ldd	r0, Z+22	; 0x16
    2bfc:	f7 89       	ldd	r31, Z+23	; 0x17
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	80 81       	ld	r24, Z
    2c02:	64 e0       	ldi	r22, 0x04	; 4
    2c04:	68 1b       	sub	r22, r24
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <xQueueSemaphoreTake+0x156>
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	d8 01       	movw	r26, r16
    2c0c:	14 96       	adiw	r26, 0x04	; 4
    2c0e:	8d 91       	ld	r24, X+
    2c10:	9c 91       	ld	r25, X
    2c12:	15 97       	sbiw	r26, 0x05	; 5
    2c14:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <vTaskPriorityDisinheritAfterTimeout>
    2c18:	0f 90       	pop	r0
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	df 90       	pop	r13
    2c34:	cf 90       	pop	r12
    2c36:	08 95       	ret

00002c38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    2c38:	cf 93       	push	r28
    2c3a:	df 93       	push	r29
    2c3c:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	0f 92       	push	r0
    2c44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c46:	8f 3f       	cpi	r24, 0xFF	; 255
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <vQueueWaitForMessageRestricted+0x14>
    2c4a:	1d 8e       	std	Y+29, r1	; 0x1d
    2c4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <vQueueWaitForMessageRestricted+0x1c>
    2c52:	1e 8e       	std	Y+30, r1	; 0x1e
    2c54:	0f 90       	pop	r0
    2c56:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    2c58:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	04 c0       	rjmp	.+8      	; 0x2c66 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    2c5e:	ce 01       	movw	r24, r28
    2c60:	41 96       	adiw	r24, 0x11	; 17
    2c62:	0e 94 9d 1a 	call	0x353a	; 0x353a <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2c66:	ce 01       	movw	r24, r28
    }
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    2c6c:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <prvUnlockQueue>

00002c70 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    2c70:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    2c74:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2c78:	80 81       	ld	r24, Z
    2c7a:	81 11       	cpse	r24, r1
    2c7c:	03 c0       	rjmp	.+6      	; 0x2c84 <prvResetNextTaskUnblockTime+0x14>
    2c7e:	8f ef       	ldi	r24, 0xFF	; 255
    2c80:	9f ef       	ldi	r25, 0xFF	; 255
    2c82:	0c c0       	rjmp	.+24     	; 0x2c9c <prvResetNextTaskUnblockTime+0x2c>
    2c84:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    2c88:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2c8c:	05 80       	ldd	r0, Z+5	; 0x05
    2c8e:	f6 81       	ldd	r31, Z+6	; 0x06
    2c90:	e0 2d       	mov	r30, r0
    2c92:	06 80       	ldd	r0, Z+6	; 0x06
    2c94:	f7 81       	ldd	r31, Z+7	; 0x07
    2c96:	e0 2d       	mov	r30, r0
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    2ca0:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    2ca4:	08 95       	ret

00002ca6 <prvAddCurrentTaskToDelayedList>:
    2ca6:	ff 92       	push	r15
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
    2cb2:	f6 2e       	mov	r15, r22
    2cb4:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    2cb8:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    2cbc:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    2cc0:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2cc4:	02 96       	adiw	r24, 0x02	; 2
    2cc6:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    2cca:	cf 3f       	cpi	r28, 0xFF	; 255
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	d8 07       	cpc	r29, r24
    2cd0:	89 f4       	brne	.+34     	; 0x2cf4 <prvAddCurrentTaskToDelayedList+0x4e>
    2cd2:	ff 20       	and	r15, r15
    2cd4:	79 f0       	breq	.+30     	; 0x2cf4 <prvAddCurrentTaskToDelayedList+0x4e>
    2cd6:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    2cda:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2cde:	6e 5f       	subi	r22, 0xFE	; 254
    2ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce2:	88 e2       	ldi	r24, 0x28	; 40
    2ce4:	94 e0       	ldi	r25, 0x04	; 4
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ff 90       	pop	r15
    2cf0:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <vListInsertEnd>
    2cf4:	c0 0f       	add	r28, r16
    2cf6:	d1 1f       	adc	r29, r17
    2cf8:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2cfc:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2d00:	d3 83       	std	Z+3, r29	; 0x03
    2d02:	c2 83       	std	Z+2, r28	; 0x02
    2d04:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    2d08:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2d0c:	c0 17       	cp	r28, r16
    2d0e:	d1 07       	cpc	r29, r17
    2d10:	68 f4       	brcc	.+26     	; 0x2d2c <prvAddCurrentTaskToDelayedList+0x86>
    2d12:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    2d16:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2d1a:	6e 5f       	subi	r22, 0xFE	; 254
    2d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <vListInsert>
    2d2c:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    2d30:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    2d34:	6e 5f       	subi	r22, 0xFE	; 254
    2d36:	7f 4f       	sbci	r23, 0xFF	; 255
    2d38:	0e 94 3c 20 	call	0x4078	; 0x4078 <vListInsert>
    2d3c:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    2d40:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    2d44:	c8 17       	cp	r28, r24
    2d46:	d9 07       	cpc	r29, r25
    2d48:	20 f4       	brcc	.+8      	; 0x2d52 <prvAddCurrentTaskToDelayedList+0xac>
    2d4a:	d0 93 1e 04 	sts	0x041E, r29	; 0x80041e <xNextTaskUnblockTime+0x1>
    2d4e:	c0 93 1d 04 	sts	0x041D, r28	; 0x80041d <xNextTaskUnblockTime>
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	08 95       	ret

00002d5e <prvIdleTask>:
    2d5e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2d62:	88 23       	and	r24, r24
    2d64:	09 f1       	breq	.+66     	; 0x2da8 <prvIdleTask+0x4a>
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	0f 92       	push	r0
    2d6c:	e0 91 37 04 	lds	r30, 0x0437	; 0x800437 <xTasksWaitingTermination+0x5>
    2d70:	f0 91 38 04 	lds	r31, 0x0438	; 0x800438 <xTasksWaitingTermination+0x6>
    2d74:	c6 81       	ldd	r28, Z+6	; 0x06
    2d76:	d7 81       	ldd	r29, Z+7	; 0x07
    2d78:	ce 01       	movw	r24, r28
    2d7a:	02 96       	adiw	r24, 0x02	; 2
    2d7c:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    2d80:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    2d8a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2d8e:	81 50       	subi	r24, 0x01	; 1
    2d90:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <uxDeletedTasksWaitingCleanUp>
    2d94:	0f 90       	pop	r0
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <vPortFree>
    2da0:	ce 01       	movw	r24, r28
    2da2:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <vPortFree>
    2da6:	db cf       	rjmp	.-74     	; 0x2d5e <prvIdleTask>
    2da8:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <pxReadyTasksLists>
    2dac:	82 30       	cpi	r24, 0x02	; 2
    2dae:	10 f0       	brcs	.+4      	; 0x2db4 <prvIdleTask+0x56>
    2db0:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2db4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <vApplicationIdleHook>
    2db8:	d2 cf       	rjmp	.-92     	; 0x2d5e <prvIdleTask>

00002dba <xTaskCreate>:
    2dba:	5f 92       	push	r5
    2dbc:	6f 92       	push	r6
    2dbe:	7f 92       	push	r7
    2dc0:	8f 92       	push	r8
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	3c 01       	movw	r6, r24
    2dda:	6b 01       	movw	r12, r22
    2ddc:	5a 01       	movw	r10, r20
    2dde:	49 01       	movw	r8, r18
    2de0:	50 2e       	mov	r5, r16
    2de2:	ca 01       	movw	r24, r20
    2de4:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <pvPortMalloc>
    2de8:	8c 01       	movw	r16, r24
    2dea:	89 2b       	or	r24, r25
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <xTaskCreate+0x36>
    2dee:	e0 c0       	rjmp	.+448    	; 0x2fb0 <xTaskCreate+0x1f6>
    2df0:	88 e2       	ldi	r24, 0x28	; 40
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 e5 1f 	call	0x3fca	; 0x3fca <pvPortMalloc>
    2df8:	ec 01       	movw	r28, r24
    2dfa:	89 2b       	or	r24, r25
    2dfc:	c9 f0       	breq	.+50     	; 0x2e30 <xTaskCreate+0x76>
    2dfe:	18 8f       	std	Y+24, r17	; 0x18
    2e00:	0f 8b       	std	Y+23, r16	; 0x17
    2e02:	a5 01       	movw	r20, r10
    2e04:	65 ea       	ldi	r22, 0xA5	; 165
    2e06:	70 e0       	ldi	r23, 0x00	; 0
    2e08:	c8 01       	movw	r24, r16
    2e0a:	0e 94 c3 24 	call	0x4986	; 0x4986 <memset>
    2e0e:	21 e0       	ldi	r18, 0x01	; 1
    2e10:	a2 1a       	sub	r10, r18
    2e12:	b1 08       	sbc	r11, r1
    2e14:	8f 89       	ldd	r24, Y+23	; 0x17
    2e16:	98 8d       	ldd	r25, Y+24	; 0x18
    2e18:	a8 0e       	add	r10, r24
    2e1a:	b9 1e       	adc	r11, r25
    2e1c:	c1 14       	cp	r12, r1
    2e1e:	d1 04       	cpc	r13, r1
    2e20:	c9 f0       	breq	.+50     	; 0x2e54 <xTaskCreate+0x9a>
    2e22:	be 01       	movw	r22, r28
    2e24:	67 5e       	subi	r22, 0xE7	; 231
    2e26:	7f 4f       	sbci	r23, 0xFF	; 255
    2e28:	f6 01       	movw	r30, r12
    2e2a:	c6 01       	movw	r24, r12
    2e2c:	08 96       	adiw	r24, 0x08	; 8
    2e2e:	07 c0       	rjmp	.+14     	; 0x2e3e <xTaskCreate+0x84>
    2e30:	c8 01       	movw	r24, r16
    2e32:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <vPortFree>
    2e36:	bc c0       	rjmp	.+376    	; 0x2fb0 <xTaskCreate+0x1f6>
    2e38:	e8 17       	cp	r30, r24
    2e3a:	f9 07       	cpc	r31, r25
    2e3c:	49 f0       	breq	.+18     	; 0x2e50 <xTaskCreate+0x96>
    2e3e:	9f 01       	movw	r18, r30
    2e40:	41 91       	ld	r20, Z+
    2e42:	db 01       	movw	r26, r22
    2e44:	4d 93       	st	X+, r20
    2e46:	bd 01       	movw	r22, r26
    2e48:	d9 01       	movw	r26, r18
    2e4a:	2c 91       	ld	r18, X
    2e4c:	21 11       	cpse	r18, r1
    2e4e:	f4 cf       	rjmp	.-24     	; 0x2e38 <xTaskCreate+0x7e>
    2e50:	18 a2       	std	Y+32, r1	; 0x20
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <xTaskCreate+0x9c>
    2e54:	19 8e       	std	Y+25, r1	; 0x19
    2e56:	05 2d       	mov	r16, r5
    2e58:	04 30       	cpi	r16, 0x04	; 4
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <xTaskCreate+0xa4>
    2e5c:	03 e0       	ldi	r16, 0x03	; 3
    2e5e:	0e 8b       	std	Y+22, r16	; 0x16
    2e60:	09 a3       	std	Y+33, r16	; 0x21
    2e62:	1a a2       	std	Y+34, r1	; 0x22
    2e64:	6e 01       	movw	r12, r28
    2e66:	b2 e0       	ldi	r27, 0x02	; 2
    2e68:	cb 0e       	add	r12, r27
    2e6a:	d1 1c       	adc	r13, r1
    2e6c:	c6 01       	movw	r24, r12
    2e6e:	0e 94 17 20 	call	0x402e	; 0x402e <vListInitialiseItem>
    2e72:	ce 01       	movw	r24, r28
    2e74:	0c 96       	adiw	r24, 0x0c	; 12
    2e76:	0e 94 17 20 	call	0x402e	; 0x402e <vListInitialiseItem>
    2e7a:	d9 87       	std	Y+9, r29	; 0x09
    2e7c:	c8 87       	std	Y+8, r28	; 0x08
    2e7e:	84 e0       	ldi	r24, 0x04	; 4
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	80 1b       	sub	r24, r16
    2e84:	91 09       	sbc	r25, r1
    2e86:	9d 87       	std	Y+13, r25	; 0x0d
    2e88:	8c 87       	std	Y+12, r24	; 0x0c
    2e8a:	db 8b       	std	Y+19, r29	; 0x13
    2e8c:	ca 8b       	std	Y+18, r28	; 0x12
    2e8e:	1b a2       	std	Y+35, r1	; 0x23
    2e90:	1c a2       	std	Y+36, r1	; 0x24
    2e92:	1d a2       	std	Y+37, r1	; 0x25
    2e94:	1e a2       	std	Y+38, r1	; 0x26
    2e96:	1f a2       	std	Y+39, r1	; 0x27
    2e98:	a4 01       	movw	r20, r8
    2e9a:	b3 01       	movw	r22, r6
    2e9c:	c5 01       	movw	r24, r10
    2e9e:	0e 94 98 20 	call	0x4130	; 0x4130 <pxPortInitialiseStack>
    2ea2:	99 83       	std	Y+1, r25	; 0x01
    2ea4:	88 83       	st	Y, r24
    2ea6:	e1 14       	cp	r14, r1
    2ea8:	f1 04       	cpc	r15, r1
    2eaa:	19 f0       	breq	.+6      	; 0x2eb2 <xTaskCreate+0xf8>
    2eac:	f7 01       	movw	r30, r14
    2eae:	d1 83       	std	Z+1, r29	; 0x01
    2eb0:	c0 83       	st	Z, r28
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	0f 92       	push	r0
    2eb8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2ebc:	8f 5f       	subi	r24, 0xFF	; 255
    2ebe:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <uxCurrentNumberOfTasks>
    2ec2:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    2ec6:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2eca:	89 2b       	or	r24, r25
    2ecc:	d1 f5       	brne	.+116    	; 0x2f42 <xTaskCreate+0x188>
    2ece:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    2ed2:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    2ed6:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    2eda:	81 30       	cpi	r24, 0x01	; 1
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <xTaskCreate+0x126>
    2ede:	41 c0       	rjmp	.+130    	; 0x2f62 <xTaskCreate+0x1a8>
    2ee0:	8a e5       	ldi	r24, 0x5A	; 90
    2ee2:	94 e0       	ldi	r25, 0x04	; 4
    2ee4:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2ee8:	83 e6       	ldi	r24, 0x63	; 99
    2eea:	94 e0       	ldi	r25, 0x04	; 4
    2eec:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2ef0:	8c e6       	ldi	r24, 0x6C	; 108
    2ef2:	94 e0       	ldi	r25, 0x04	; 4
    2ef4:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2ef8:	85 e7       	ldi	r24, 0x75	; 117
    2efa:	94 e0       	ldi	r25, 0x04	; 4
    2efc:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f00:	81 e5       	ldi	r24, 0x51	; 81
    2f02:	94 e0       	ldi	r25, 0x04	; 4
    2f04:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f08:	88 e4       	ldi	r24, 0x48	; 72
    2f0a:	94 e0       	ldi	r25, 0x04	; 4
    2f0c:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f10:	8b e3       	ldi	r24, 0x3B	; 59
    2f12:	94 e0       	ldi	r25, 0x04	; 4
    2f14:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f18:	82 e3       	ldi	r24, 0x32	; 50
    2f1a:	94 e0       	ldi	r25, 0x04	; 4
    2f1c:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f20:	88 e2       	ldi	r24, 0x28	; 40
    2f22:	94 e0       	ldi	r25, 0x04	; 4
    2f24:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    2f28:	81 e5       	ldi	r24, 0x51	; 81
    2f2a:	94 e0       	ldi	r25, 0x04	; 4
    2f2c:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <pxDelayedTaskList+0x1>
    2f30:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <pxDelayedTaskList>
    2f34:	88 e4       	ldi	r24, 0x48	; 72
    2f36:	94 e0       	ldi	r25, 0x04	; 4
    2f38:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    2f3c:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    2f40:	10 c0       	rjmp	.+32     	; 0x2f62 <xTaskCreate+0x1a8>
    2f42:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2f46:	81 11       	cpse	r24, r1
    2f48:	0c c0       	rjmp	.+24     	; 0x2f62 <xTaskCreate+0x1a8>
    2f4a:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2f4e:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2f52:	96 89       	ldd	r25, Z+22	; 0x16
    2f54:	8e 89       	ldd	r24, Y+22	; 0x16
    2f56:	89 17       	cp	r24, r25
    2f58:	20 f0       	brcs	.+8      	; 0x2f62 <xTaskCreate+0x1a8>
    2f5a:	d0 93 7f 04 	sts	0x047F, r29	; 0x80047f <pxCurrentTCB+0x1>
    2f5e:	c0 93 7e 04 	sts	0x047E, r28	; 0x80047e <pxCurrentTCB>
    2f62:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <uxTaskNumber>
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <uxTaskNumber>
    2f6c:	8e 89       	ldd	r24, Y+22	; 0x16
    2f6e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    2f72:	98 17       	cp	r25, r24
    2f74:	10 f4       	brcc	.+4      	; 0x2f7a <xTaskCreate+0x1c0>
    2f76:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    2f7a:	f9 e0       	ldi	r31, 0x09	; 9
    2f7c:	8f 9f       	mul	r24, r31
    2f7e:	c0 01       	movw	r24, r0
    2f80:	11 24       	eor	r1, r1
    2f82:	b6 01       	movw	r22, r12
    2f84:	86 5a       	subi	r24, 0xA6	; 166
    2f86:	9b 4f       	sbci	r25, 0xFB	; 251
    2f88:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    2f8c:	0f 90       	pop	r0
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    2f94:	88 23       	and	r24, r24
    2f96:	51 f0       	breq	.+20     	; 0x2fac <xTaskCreate+0x1f2>
    2f98:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    2f9c:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2fa0:	96 89       	ldd	r25, Z+22	; 0x16
    2fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    2fa4:	98 17       	cp	r25, r24
    2fa6:	10 f4       	brcc	.+4      	; 0x2fac <xTaskCreate+0x1f2>
    2fa8:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <xTaskCreate+0x1f8>
    2fb0:	8f ef       	ldi	r24, 0xFF	; 255
    2fb2:	df 91       	pop	r29
    2fb4:	cf 91       	pop	r28
    2fb6:	1f 91       	pop	r17
    2fb8:	0f 91       	pop	r16
    2fba:	ff 90       	pop	r15
    2fbc:	ef 90       	pop	r14
    2fbe:	df 90       	pop	r13
    2fc0:	cf 90       	pop	r12
    2fc2:	bf 90       	pop	r11
    2fc4:	af 90       	pop	r10
    2fc6:	9f 90       	pop	r9
    2fc8:	8f 90       	pop	r8
    2fca:	7f 90       	pop	r7
    2fcc:	6f 90       	pop	r6
    2fce:	5f 90       	pop	r5
    2fd0:	08 95       	ret

00002fd2 <vTaskResume>:
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	20 91 7e 04 	lds	r18, 0x047E	; 0x80047e <pxCurrentTCB>
    2fde:	30 91 7f 04 	lds	r19, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    2fe2:	82 17       	cp	r24, r18
    2fe4:	93 07       	cpc	r25, r19
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <vTaskResume+0x18>
    2fe8:	38 c0       	rjmp	.+112    	; 0x305a <vTaskResume+0x88>
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <vTaskResume+0x1e>
    2fee:	35 c0       	rjmp	.+106    	; 0x305a <vTaskResume+0x88>
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	0f 92       	push	r0
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	22 85       	ldd	r18, Z+10	; 0x0a
    2ffa:	33 85       	ldd	r19, Z+11	; 0x0b
    2ffc:	28 52       	subi	r18, 0x28	; 40
    2ffe:	34 40       	sbci	r19, 0x04	; 4
    3000:	51 f5       	brne	.+84     	; 0x3056 <vTaskResume+0x84>
    3002:	fc 01       	movw	r30, r24
    3004:	24 89       	ldd	r18, Z+20	; 0x14
    3006:	35 89       	ldd	r19, Z+21	; 0x15
    3008:	f4 e0       	ldi	r31, 0x04	; 4
    300a:	2b 33       	cpi	r18, 0x3B	; 59
    300c:	3f 07       	cpc	r19, r31
    300e:	19 f1       	breq	.+70     	; 0x3056 <vTaskResume+0x84>
    3010:	23 2b       	or	r18, r19
    3012:	09 f5       	brne	.+66     	; 0x3056 <vTaskResume+0x84>
    3014:	ec 01       	movw	r28, r24
    3016:	8c 01       	movw	r16, r24
    3018:	0e 5f       	subi	r16, 0xFE	; 254
    301a:	1f 4f       	sbci	r17, 0xFF	; 255
    301c:	c8 01       	movw	r24, r16
    301e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    3022:	8e 89       	ldd	r24, Y+22	; 0x16
    3024:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    3028:	98 17       	cp	r25, r24
    302a:	10 f4       	brcc	.+4      	; 0x3030 <vTaskResume+0x5e>
    302c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    3030:	29 e0       	ldi	r18, 0x09	; 9
    3032:	82 9f       	mul	r24, r18
    3034:	c0 01       	movw	r24, r0
    3036:	11 24       	eor	r1, r1
    3038:	b8 01       	movw	r22, r16
    303a:	86 5a       	subi	r24, 0xA6	; 166
    303c:	9b 4f       	sbci	r25, 0xFB	; 251
    303e:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    3042:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    3046:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    304a:	9e 89       	ldd	r25, Y+22	; 0x16
    304c:	86 89       	ldd	r24, Z+22	; 0x16
    304e:	98 17       	cp	r25, r24
    3050:	10 f0       	brcs	.+4      	; 0x3056 <vTaskResume+0x84>
    3052:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    3056:	0f 90       	pop	r0
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	df 91       	pop	r29
    305c:	cf 91       	pop	r28
    305e:	1f 91       	pop	r17
    3060:	0f 91       	pop	r16
    3062:	08 95       	ret

00003064 <vTaskStartScheduler>:
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	8b e1       	ldi	r24, 0x1B	; 27
    306c:	e8 2e       	mov	r14, r24
    306e:	84 e0       	ldi	r24, 0x04	; 4
    3070:	f8 2e       	mov	r15, r24
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 ec       	ldi	r20, 0xC0	; 192
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	6c e2       	ldi	r22, 0x2C	; 44
    307e:	72 e0       	ldi	r23, 0x02	; 2
    3080:	8f ea       	ldi	r24, 0xAF	; 175
    3082:	96 e1       	ldi	r25, 0x16	; 22
    3084:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	b1 f4       	brne	.+44     	; 0x30b8 <vTaskStartScheduler+0x54>
    308c:	0e 94 8e 1c 	call	0x391c	; 0x391c <xTimerCreateTimerTask>
    3090:	81 30       	cpi	r24, 0x01	; 1
    3092:	91 f4       	brne	.+36     	; 0x30b8 <vTaskStartScheduler+0x54>
    3094:	f8 94       	cli
    3096:	2f ef       	ldi	r18, 0xFF	; 255
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	30 93 1e 04 	sts	0x041E, r19	; 0x80041e <xNextTaskUnblockTime+0x1>
    309e:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <xNextTaskUnblockTime>
    30a2:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <xSchedulerRunning>
    30a6:	10 92 26 04 	sts	0x0426, r1	; 0x800426 <xTickCount+0x1>
    30aa:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <xTickCount>
    30ae:	0f 91       	pop	r16
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	0c 94 04 21 	jmp	0x4208	; 0x4208 <xPortStartScheduler>
    30b8:	0f 91       	pop	r16
    30ba:	ff 90       	pop	r15
    30bc:	ef 90       	pop	r14
    30be:	08 95       	ret

000030c0 <vTaskSuspendAll>:
    30c0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    30ca:	08 95       	ret

000030cc <xTaskGetTickCount>:
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	0f 92       	push	r0
    30d2:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <xTickCount>
    30d6:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <xTickCount+0x1>
    30da:	0f 90       	pop	r0
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	08 95       	ret

000030e0 <xTaskIncrementTick>:
    30e0:	cf 92       	push	r12
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    30f4:	81 11       	cpse	r24, r1
    30f6:	8c c0       	rjmp	.+280    	; 0x3210 <xTaskIncrementTick+0x130>
    30f8:	00 91 25 04 	lds	r16, 0x0425	; 0x800425 <xTickCount>
    30fc:	10 91 26 04 	lds	r17, 0x0426	; 0x800426 <xTickCount+0x1>
    3100:	0f 5f       	subi	r16, 0xFF	; 255
    3102:	1f 4f       	sbci	r17, 0xFF	; 255
    3104:	10 93 26 04 	sts	0x0426, r17	; 0x800426 <xTickCount+0x1>
    3108:	00 93 25 04 	sts	0x0425, r16	; 0x800425 <xTickCount>
    310c:	01 15       	cp	r16, r1
    310e:	11 05       	cpc	r17, r1
    3110:	b9 f4       	brne	.+46     	; 0x3140 <xTaskIncrementTick+0x60>
    3112:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <pxDelayedTaskList>
    3116:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    311a:	20 91 44 04 	lds	r18, 0x0444	; 0x800444 <pxOverflowDelayedTaskList>
    311e:	30 91 45 04 	lds	r19, 0x0445	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    3122:	30 93 47 04 	sts	0x0447, r19	; 0x800447 <pxDelayedTaskList+0x1>
    3126:	20 93 46 04 	sts	0x0446, r18	; 0x800446 <pxDelayedTaskList>
    312a:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxOverflowDelayedTaskList+0x1>
    312e:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxOverflowDelayedTaskList>
    3132:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <xNumOfOverflows>
    3136:	8f 5f       	subi	r24, 0xFF	; 255
    3138:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <xNumOfOverflows>
    313c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <prvResetNextTaskUnblockTime>
    3140:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <xNextTaskUnblockTime>
    3144:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <xNextTaskUnblockTime+0x1>
    3148:	c0 e0       	ldi	r28, 0x00	; 0
    314a:	08 17       	cp	r16, r24
    314c:	19 07       	cpc	r17, r25
    314e:	08 f4       	brcc	.+2      	; 0x3152 <xTaskIncrementTick+0x72>
    3150:	4f c0       	rjmp	.+158    	; 0x31f0 <xTaskIncrementTick+0x110>
    3152:	d9 e0       	ldi	r29, 0x09	; 9
    3154:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    3158:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    315c:	80 81       	ld	r24, Z
    315e:	81 11       	cpse	r24, r1
    3160:	03 c0       	rjmp	.+6      	; 0x3168 <xTaskIncrementTick+0x88>
    3162:	8f ef       	ldi	r24, 0xFF	; 255
    3164:	9f ef       	ldi	r25, 0xFF	; 255
    3166:	11 c0       	rjmp	.+34     	; 0x318a <xTaskIncrementTick+0xaa>
    3168:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <pxDelayedTaskList>
    316c:	f0 91 47 04 	lds	r31, 0x0447	; 0x800447 <pxDelayedTaskList+0x1>
    3170:	05 80       	ldd	r0, Z+5	; 0x05
    3172:	f6 81       	ldd	r31, Z+6	; 0x06
    3174:	e0 2d       	mov	r30, r0
    3176:	e6 80       	ldd	r14, Z+6	; 0x06
    3178:	f7 80       	ldd	r15, Z+7	; 0x07
    317a:	d7 01       	movw	r26, r14
    317c:	12 96       	adiw	r26, 0x02	; 2
    317e:	8d 91       	ld	r24, X+
    3180:	9c 91       	ld	r25, X
    3182:	13 97       	sbiw	r26, 0x03	; 3
    3184:	08 17       	cp	r16, r24
    3186:	19 07       	cpc	r17, r25
    3188:	28 f4       	brcc	.+10     	; 0x3194 <xTaskIncrementTick+0xb4>
    318a:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <xNextTaskUnblockTime+0x1>
    318e:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <xNextTaskUnblockTime>
    3192:	2e c0       	rjmp	.+92     	; 0x31f0 <xTaskIncrementTick+0x110>
    3194:	67 01       	movw	r12, r14
    3196:	b2 e0       	ldi	r27, 0x02	; 2
    3198:	cb 0e       	add	r12, r27
    319a:	d1 1c       	adc	r13, r1
    319c:	c6 01       	movw	r24, r12
    319e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    31a2:	f7 01       	movw	r30, r14
    31a4:	84 89       	ldd	r24, Z+20	; 0x14
    31a6:	95 89       	ldd	r25, Z+21	; 0x15
    31a8:	89 2b       	or	r24, r25
    31aa:	21 f0       	breq	.+8      	; 0x31b4 <xTaskIncrementTick+0xd4>
    31ac:	c7 01       	movw	r24, r14
    31ae:	0c 96       	adiw	r24, 0x0c	; 12
    31b0:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    31b4:	d7 01       	movw	r26, r14
    31b6:	56 96       	adiw	r26, 0x16	; 22
    31b8:	8c 91       	ld	r24, X
    31ba:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    31be:	98 17       	cp	r25, r24
    31c0:	10 f4       	brcc	.+4      	; 0x31c6 <xTaskIncrementTick+0xe6>
    31c2:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    31c6:	d8 9f       	mul	r29, r24
    31c8:	c0 01       	movw	r24, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	b6 01       	movw	r22, r12
    31ce:	86 5a       	subi	r24, 0xA6	; 166
    31d0:	9b 4f       	sbci	r25, 0xFB	; 251
    31d2:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    31d6:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    31da:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    31de:	d7 01       	movw	r26, r14
    31e0:	56 96       	adiw	r26, 0x16	; 22
    31e2:	9c 91       	ld	r25, X
    31e4:	86 89       	ldd	r24, Z+22	; 0x16
    31e6:	98 17       	cp	r25, r24
    31e8:	08 f4       	brcc	.+2      	; 0x31ec <xTaskIncrementTick+0x10c>
    31ea:	b4 cf       	rjmp	.-152    	; 0x3154 <xTaskIncrementTick+0x74>
    31ec:	c1 e0       	ldi	r28, 0x01	; 1
    31ee:	b2 cf       	rjmp	.-156    	; 0x3154 <xTaskIncrementTick+0x74>
    31f0:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    31f4:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    31f8:	e6 89       	ldd	r30, Z+22	; 0x16
    31fa:	b9 e0       	ldi	r27, 0x09	; 9
    31fc:	eb 9f       	mul	r30, r27
    31fe:	f0 01       	movw	r30, r0
    3200:	11 24       	eor	r1, r1
    3202:	e6 5a       	subi	r30, 0xA6	; 166
    3204:	fb 4f       	sbci	r31, 0xFB	; 251
    3206:	80 81       	ld	r24, Z
    3208:	82 30       	cpi	r24, 0x02	; 2
    320a:	40 f0       	brcs	.+16     	; 0x321c <xTaskIncrementTick+0x13c>
    320c:	c1 e0       	ldi	r28, 0x01	; 1
    320e:	06 c0       	rjmp	.+12     	; 0x321c <xTaskIncrementTick+0x13c>
    3210:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxPendedTicks>
    3214:	8f 5f       	subi	r24, 0xFF	; 255
    3216:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxPendedTicks>
    321a:	c0 e0       	ldi	r28, 0x00	; 0
    321c:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    3220:	81 11       	cpse	r24, r1
    3222:	c1 e0       	ldi	r28, 0x01	; 1
    3224:	8c 2f       	mov	r24, r28
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	1f 91       	pop	r17
    322c:	0f 91       	pop	r16
    322e:	ff 90       	pop	r15
    3230:	ef 90       	pop	r14
    3232:	df 90       	pop	r13
    3234:	cf 90       	pop	r12
    3236:	08 95       	ret

00003238 <xTaskResumeAll>:
    3238:	ef 92       	push	r14
    323a:	ff 92       	push	r15
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	0f 92       	push	r0
    324a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    324e:	81 50       	subi	r24, 0x01	; 1
    3250:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <uxSchedulerSuspended>
    3254:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    3258:	88 23       	and	r24, r24
    325a:	11 f0       	breq	.+4      	; 0x3260 <xTaskResumeAll+0x28>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	52 c0       	rjmp	.+164    	; 0x3304 <xTaskResumeAll+0xcc>
    3260:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    3264:	88 23       	and	r24, r24
    3266:	d1 f3       	breq	.-12     	; 0x325c <xTaskResumeAll+0x24>
    3268:	c0 e0       	ldi	r28, 0x00	; 0
    326a:	d0 e0       	ldi	r29, 0x00	; 0
    326c:	89 e0       	ldi	r24, 0x09	; 9
    326e:	f8 2e       	mov	r15, r24
    3270:	ee 24       	eor	r14, r14
    3272:	e3 94       	inc	r14
    3274:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <xPendingReadyList>
    3278:	88 23       	and	r24, r24
    327a:	51 f1       	breq	.+84     	; 0x32d0 <xTaskResumeAll+0x98>
    327c:	e0 91 40 04 	lds	r30, 0x0440	; 0x800440 <xPendingReadyList+0x5>
    3280:	f0 91 41 04 	lds	r31, 0x0441	; 0x800441 <xPendingReadyList+0x6>
    3284:	c6 81       	ldd	r28, Z+6	; 0x06
    3286:	d7 81       	ldd	r29, Z+7	; 0x07
    3288:	ce 01       	movw	r24, r28
    328a:	0c 96       	adiw	r24, 0x0c	; 12
    328c:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    3290:	8e 01       	movw	r16, r28
    3292:	0e 5f       	subi	r16, 0xFE	; 254
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	c8 01       	movw	r24, r16
    3298:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    329c:	8e 89       	ldd	r24, Y+22	; 0x16
    329e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    32a2:	98 17       	cp	r25, r24
    32a4:	10 f4       	brcc	.+4      	; 0x32aa <xTaskResumeAll+0x72>
    32a6:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    32aa:	f8 9e       	mul	r15, r24
    32ac:	c0 01       	movw	r24, r0
    32ae:	11 24       	eor	r1, r1
    32b0:	b8 01       	movw	r22, r16
    32b2:	86 5a       	subi	r24, 0xA6	; 166
    32b4:	9b 4f       	sbci	r25, 0xFB	; 251
    32b6:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    32ba:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    32be:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    32c2:	9e 89       	ldd	r25, Y+22	; 0x16
    32c4:	86 89       	ldd	r24, Z+22	; 0x16
    32c6:	98 17       	cp	r25, r24
    32c8:	a8 f2       	brcs	.-86     	; 0x3274 <xTaskResumeAll+0x3c>
    32ca:	e0 92 21 04 	sts	0x0421, r14	; 0x800421 <xYieldPending>
    32ce:	d2 cf       	rjmp	.-92     	; 0x3274 <xTaskResumeAll+0x3c>
    32d0:	cd 2b       	or	r28, r29
    32d2:	11 f0       	breq	.+4      	; 0x32d8 <xTaskResumeAll+0xa0>
    32d4:	0e 94 38 16 	call	0x2c70	; 0x2c70 <prvResetNextTaskUnblockTime>
    32d8:	c0 91 22 04 	lds	r28, 0x0422	; 0x800422 <uxPendedTicks>
    32dc:	cc 23       	and	r28, r28
    32de:	51 f0       	breq	.+20     	; 0x32f4 <xTaskResumeAll+0xbc>
    32e0:	d1 e0       	ldi	r29, 0x01	; 1
    32e2:	0e 94 70 18 	call	0x30e0	; 0x30e0 <xTaskIncrementTick>
    32e6:	81 11       	cpse	r24, r1
    32e8:	d0 93 21 04 	sts	0x0421, r29	; 0x800421 <xYieldPending>
    32ec:	c1 50       	subi	r28, 0x01	; 1
    32ee:	c9 f7       	brne	.-14     	; 0x32e2 <xTaskResumeAll+0xaa>
    32f0:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <uxPendedTicks>
    32f4:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xYieldPending>
    32f8:	88 23       	and	r24, r24
    32fa:	09 f4       	brne	.+2      	; 0x32fe <xTaskResumeAll+0xc6>
    32fc:	af cf       	rjmp	.-162    	; 0x325c <xTaskResumeAll+0x24>
    32fe:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	0f 90       	pop	r0
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	df 91       	pop	r29
    330a:	cf 91       	pop	r28
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	ff 90       	pop	r15
    3312:	ef 90       	pop	r14
    3314:	08 95       	ret

00003316 <vTaskDelayUntil>:
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	8c 01       	movw	r16, r24
    3320:	eb 01       	movw	r28, r22
    3322:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    3326:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    332a:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    332e:	f8 01       	movw	r30, r16
    3330:	20 81       	ld	r18, Z
    3332:	31 81       	ldd	r19, Z+1	; 0x01
    3334:	c9 01       	movw	r24, r18
    3336:	8c 0f       	add	r24, r28
    3338:	9d 1f       	adc	r25, r29
    333a:	42 17       	cp	r20, r18
    333c:	53 07       	cpc	r21, r19
    333e:	20 f4       	brcc	.+8      	; 0x3348 <vTaskDelayUntil+0x32>
    3340:	82 17       	cp	r24, r18
    3342:	93 07       	cpc	r25, r19
    3344:	40 f4       	brcc	.+16     	; 0x3356 <vTaskDelayUntil+0x40>
    3346:	03 c0       	rjmp	.+6      	; 0x334e <vTaskDelayUntil+0x38>
    3348:	82 17       	cp	r24, r18
    334a:	93 07       	cpc	r25, r19
    334c:	30 f0       	brcs	.+12     	; 0x335a <vTaskDelayUntil+0x44>
    334e:	21 e0       	ldi	r18, 0x01	; 1
    3350:	48 17       	cp	r20, r24
    3352:	59 07       	cpc	r21, r25
    3354:	18 f0       	brcs	.+6      	; 0x335c <vTaskDelayUntil+0x46>
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	01 c0       	rjmp	.+2      	; 0x335c <vTaskDelayUntil+0x46>
    335a:	21 e0       	ldi	r18, 0x01	; 1
    335c:	f8 01       	movw	r30, r16
    335e:	91 83       	std	Z+1, r25	; 0x01
    3360:	80 83       	st	Z, r24
    3362:	22 23       	and	r18, r18
    3364:	29 f0       	breq	.+10     	; 0x3370 <vTaskDelayUntil+0x5a>
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	84 1b       	sub	r24, r20
    336a:	95 0b       	sbc	r25, r21
    336c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <prvAddCurrentTaskToDelayedList>
    3370:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    3374:	81 11       	cpse	r24, r1
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vTaskDelayUntil+0x66>
    3378:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	08 95       	ret

00003386 <vTaskDelay>:
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	ec 01       	movw	r28, r24
    338c:	89 2b       	or	r24, r25
    338e:	19 f4       	brne	.+6      	; 0x3396 <vTaskDelay+0x10>
    3390:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    3394:	0a c0       	rjmp	.+20     	; 0x33aa <vTaskDelay+0x24>
    3396:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	ce 01       	movw	r24, r28
    339e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <prvAddCurrentTaskToDelayedList>
    33a2:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    33a6:	88 23       	and	r24, r24
    33a8:	99 f3       	breq	.-26     	; 0x3390 <vTaskDelay+0xa>
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <vTaskSwitchContext>:
    33b0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    33b4:	88 23       	and	r24, r24
    33b6:	21 f0       	breq	.+8      	; 0x33c0 <vTaskSwitchContext+0x10>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    33be:	08 95       	ret
    33c0:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <xYieldPending>
    33c4:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    33c8:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    33cc:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    33d0:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    33d4:	2d 91       	ld	r18, X+
    33d6:	3c 91       	ld	r19, X
    33d8:	87 89       	ldd	r24, Z+23	; 0x17
    33da:	90 8d       	ldd	r25, Z+24	; 0x18
    33dc:	82 17       	cp	r24, r18
    33de:	93 07       	cpc	r25, r19
    33e0:	60 f0       	brcs	.+24     	; 0x33fa <vTaskSwitchContext+0x4a>
    33e2:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    33e6:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    33ea:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    33ee:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    33f2:	67 5e       	subi	r22, 0xE7	; 231
    33f4:	7f 4f       	sbci	r23, 0xFF	; 255
    33f6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <vApplicationStackOverflowHook>
    33fa:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <uxTopReadyPriority>
    33fe:	69 e0       	ldi	r22, 0x09	; 9
    3400:	48 2f       	mov	r20, r24
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	64 9f       	mul	r22, r20
    3406:	90 01       	movw	r18, r0
    3408:	65 9f       	mul	r22, r21
    340a:	30 0d       	add	r19, r0
    340c:	11 24       	eor	r1, r1
    340e:	f9 01       	movw	r30, r18
    3410:	e6 5a       	subi	r30, 0xA6	; 166
    3412:	fb 4f       	sbci	r31, 0xFB	; 251
    3414:	90 81       	ld	r25, Z
    3416:	91 11       	cpse	r25, r1
    3418:	02 c0       	rjmp	.+4      	; 0x341e <vTaskSwitchContext+0x6e>
    341a:	81 50       	subi	r24, 0x01	; 1
    341c:	f1 cf       	rjmp	.-30     	; 0x3400 <vTaskSwitchContext+0x50>
    341e:	a1 81       	ldd	r26, Z+1	; 0x01
    3420:	b2 81       	ldd	r27, Z+2	; 0x02
    3422:	12 96       	adiw	r26, 0x02	; 2
    3424:	0d 90       	ld	r0, X+
    3426:	bc 91       	ld	r27, X
    3428:	a0 2d       	mov	r26, r0
    342a:	b2 83       	std	Z+2, r27	; 0x02
    342c:	a1 83       	std	Z+1, r26	; 0x01
    342e:	23 5a       	subi	r18, 0xA3	; 163
    3430:	3b 4f       	sbci	r19, 0xFB	; 251
    3432:	a2 17       	cp	r26, r18
    3434:	b3 07       	cpc	r27, r19
    3436:	31 f4       	brne	.+12     	; 0x3444 <vTaskSwitchContext+0x94>
    3438:	12 96       	adiw	r26, 0x02	; 2
    343a:	2d 91       	ld	r18, X+
    343c:	3c 91       	ld	r19, X
    343e:	13 97       	sbiw	r26, 0x03	; 3
    3440:	32 83       	std	Z+2, r19	; 0x02
    3442:	21 83       	std	Z+1, r18	; 0x01
    3444:	99 e0       	ldi	r25, 0x09	; 9
    3446:	94 9f       	mul	r25, r20
    3448:	f0 01       	movw	r30, r0
    344a:	95 9f       	mul	r25, r21
    344c:	f0 0d       	add	r31, r0
    344e:	11 24       	eor	r1, r1
    3450:	e6 5a       	subi	r30, 0xA6	; 166
    3452:	fb 4f       	sbci	r31, 0xFB	; 251
    3454:	01 80       	ldd	r0, Z+1	; 0x01
    3456:	f2 81       	ldd	r31, Z+2	; 0x02
    3458:	e0 2d       	mov	r30, r0
    345a:	26 81       	ldd	r18, Z+6	; 0x06
    345c:	37 81       	ldd	r19, Z+7	; 0x07
    345e:	30 93 7f 04 	sts	0x047F, r19	; 0x80047f <pxCurrentTCB+0x1>
    3462:	20 93 7e 04 	sts	0x047E, r18	; 0x80047e <pxCurrentTCB>
    3466:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    346a:	08 95       	ret

0000346c <vTaskSuspend>:
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	ec 01       	movw	r28, r24
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	0f 92       	push	r0
    347c:	89 2b       	or	r24, r25
    347e:	21 f4       	brne	.+8      	; 0x3488 <vTaskSuspend+0x1c>
    3480:	c0 91 7e 04 	lds	r28, 0x047E	; 0x80047e <pxCurrentTCB>
    3484:	d0 91 7f 04 	lds	r29, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3488:	8e 01       	movw	r16, r28
    348a:	0e 5f       	subi	r16, 0xFE	; 254
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	c8 01       	movw	r24, r16
    3490:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    3494:	8c 89       	ldd	r24, Y+20	; 0x14
    3496:	9d 89       	ldd	r25, Y+21	; 0x15
    3498:	89 2b       	or	r24, r25
    349a:	21 f0       	breq	.+8      	; 0x34a4 <vTaskSuspend+0x38>
    349c:	ce 01       	movw	r24, r28
    349e:	0c 96       	adiw	r24, 0x0c	; 12
    34a0:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    34a4:	b8 01       	movw	r22, r16
    34a6:	88 e2       	ldi	r24, 0x28	; 40
    34a8:	94 e0       	ldi	r25, 0x04	; 4
    34aa:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    34ae:	8f a1       	ldd	r24, Y+39	; 0x27
    34b0:	81 30       	cpi	r24, 0x01	; 1
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <vTaskSuspend+0x4a>
    34b4:	1f a2       	std	Y+39, r1	; 0x27
    34b6:	0f 90       	pop	r0
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    34be:	88 23       	and	r24, r24
    34c0:	39 f0       	breq	.+14     	; 0x34d0 <vTaskSuspend+0x64>
    34c2:	0f b6       	in	r0, 0x3f	; 63
    34c4:	f8 94       	cli
    34c6:	0f 92       	push	r0
    34c8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <prvResetNextTaskUnblockTime>
    34cc:	0f 90       	pop	r0
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    34d4:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    34d8:	c8 17       	cp	r28, r24
    34da:	d9 07       	cpc	r29, r25
    34dc:	c1 f4       	brne	.+48     	; 0x350e <vTaskSuspend+0xa2>
    34de:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    34e2:	88 23       	and	r24, r24
    34e4:	19 f0       	breq	.+6      	; 0x34ec <vTaskSuspend+0x80>
    34e6:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    34ea:	11 c0       	rjmp	.+34     	; 0x350e <vTaskSuspend+0xa2>
    34ec:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <xSuspendedTaskList>
    34f0:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <uxCurrentNumberOfTasks>
    34f4:	98 13       	cpse	r25, r24
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <vTaskSuspend+0x96>
    34f8:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <pxCurrentTCB+0x1>
    34fc:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <pxCurrentTCB>
    3500:	06 c0       	rjmp	.+12     	; 0x350e <vTaskSuspend+0xa2>
    3502:	df 91       	pop	r29
    3504:	cf 91       	pop	r28
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <vTaskSwitchContext>
    350e:	df 91       	pop	r29
    3510:	cf 91       	pop	r28
    3512:	1f 91       	pop	r17
    3514:	0f 91       	pop	r16
    3516:	08 95       	ret

00003518 <vTaskPlaceOnEventList>:
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	eb 01       	movw	r28, r22
    351e:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    3522:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3526:	64 5f       	subi	r22, 0xF4	; 244
    3528:	7f 4f       	sbci	r23, 0xFF	; 255
    352a:	0e 94 3c 20 	call	0x4078	; 0x4078 <vListInsert>
    352e:	61 e0       	ldi	r22, 0x01	; 1
    3530:	ce 01       	movw	r24, r28
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <prvAddCurrentTaskToDelayedList>

0000353a <vTaskPlaceOnEventListRestricted>:
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	eb 01       	movw	r28, r22
    3542:	14 2f       	mov	r17, r20
    3544:	60 91 7e 04 	lds	r22, 0x047E	; 0x80047e <pxCurrentTCB>
    3548:	70 91 7f 04 	lds	r23, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    354c:	64 5f       	subi	r22, 0xF4	; 244
    354e:	7f 4f       	sbci	r23, 0xFF	; 255
    3550:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    3554:	11 23       	and	r17, r17
    3556:	11 f0       	breq	.+4      	; 0x355c <vTaskPlaceOnEventListRestricted+0x22>
    3558:	cf ef       	ldi	r28, 0xFF	; 255
    355a:	df ef       	ldi	r29, 0xFF	; 255
    355c:	61 2f       	mov	r22, r17
    355e:	ce 01       	movw	r24, r28
    3560:	df 91       	pop	r29
    3562:	cf 91       	pop	r28
    3564:	1f 91       	pop	r17
    3566:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <prvAddCurrentTaskToDelayedList>

0000356a <xTaskRemoveFromEventList>:
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	dc 01       	movw	r26, r24
    3574:	15 96       	adiw	r26, 0x05	; 5
    3576:	ed 91       	ld	r30, X+
    3578:	fc 91       	ld	r31, X
    357a:	16 97       	sbiw	r26, 0x06	; 6
    357c:	c6 81       	ldd	r28, Z+6	; 0x06
    357e:	d7 81       	ldd	r29, Z+7	; 0x07
    3580:	8e 01       	movw	r16, r28
    3582:	04 5f       	subi	r16, 0xF4	; 244
    3584:	1f 4f       	sbci	r17, 0xFF	; 255
    3586:	c8 01       	movw	r24, r16
    3588:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    358c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    3590:	81 11       	cpse	r24, r1
    3592:	14 c0       	rjmp	.+40     	; 0x35bc <xTaskRemoveFromEventList+0x52>
    3594:	0a 50       	subi	r16, 0x0A	; 10
    3596:	11 09       	sbc	r17, r1
    3598:	c8 01       	movw	r24, r16
    359a:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    359e:	8e 89       	ldd	r24, Y+22	; 0x16
    35a0:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    35a4:	98 17       	cp	r25, r24
    35a6:	10 f4       	brcc	.+4      	; 0x35ac <xTaskRemoveFromEventList+0x42>
    35a8:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    35ac:	b9 e0       	ldi	r27, 0x09	; 9
    35ae:	8b 9f       	mul	r24, r27
    35b0:	c0 01       	movw	r24, r0
    35b2:	11 24       	eor	r1, r1
    35b4:	b8 01       	movw	r22, r16
    35b6:	86 5a       	subi	r24, 0xA6	; 166
    35b8:	9b 4f       	sbci	r25, 0xFB	; 251
    35ba:	03 c0       	rjmp	.+6      	; 0x35c2 <xTaskRemoveFromEventList+0x58>
    35bc:	b8 01       	movw	r22, r16
    35be:	8b e3       	ldi	r24, 0x3B	; 59
    35c0:	94 e0       	ldi	r25, 0x04	; 4
    35c2:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    35c6:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    35ca:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    35ce:	9e 89       	ldd	r25, Y+22	; 0x16
    35d0:	86 89       	ldd	r24, Z+22	; 0x16
    35d2:	89 17       	cp	r24, r25
    35d4:	20 f4       	brcc	.+8      	; 0x35de <xTaskRemoveFromEventList+0x74>
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    35dc:	01 c0       	rjmp	.+2      	; 0x35e0 <xTaskRemoveFromEventList+0x76>
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	08 95       	ret

000035ea <vTaskInternalSetTimeOutState>:
    35ea:	20 91 20 04 	lds	r18, 0x0420	; 0x800420 <xNumOfOverflows>
    35ee:	fc 01       	movw	r30, r24
    35f0:	20 83       	st	Z, r18
    35f2:	20 91 25 04 	lds	r18, 0x0425	; 0x800425 <xTickCount>
    35f6:	30 91 26 04 	lds	r19, 0x0426	; 0x800426 <xTickCount+0x1>
    35fa:	32 83       	std	Z+2, r19	; 0x02
    35fc:	21 83       	std	Z+1, r18	; 0x01
    35fe:	08 95       	ret

00003600 <xTaskCheckForTimeOut>:
    3600:	cf 93       	push	r28
    3602:	df 93       	push	r29
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	0f 92       	push	r0
    360a:	40 91 25 04 	lds	r20, 0x0425	; 0x800425 <xTickCount>
    360e:	50 91 26 04 	lds	r21, 0x0426	; 0x800426 <xTickCount+0x1>
    3612:	db 01       	movw	r26, r22
    3614:	2d 91       	ld	r18, X+
    3616:	3c 91       	ld	r19, X
    3618:	2f 3f       	cpi	r18, 0xFF	; 255
    361a:	bf ef       	ldi	r27, 0xFF	; 255
    361c:	3b 07       	cpc	r19, r27
    361e:	d9 f0       	breq	.+54     	; 0x3656 <xTaskCheckForTimeOut+0x56>
    3620:	ec 01       	movw	r28, r24
    3622:	e9 81       	ldd	r30, Y+1	; 0x01
    3624:	fa 81       	ldd	r31, Y+2	; 0x02
    3626:	a0 91 20 04 	lds	r26, 0x0420	; 0x800420 <xNumOfOverflows>
    362a:	b8 81       	ld	r27, Y
    362c:	ba 17       	cp	r27, r26
    362e:	19 f0       	breq	.+6      	; 0x3636 <xTaskCheckForTimeOut+0x36>
    3630:	4e 17       	cp	r20, r30
    3632:	5f 07       	cpc	r21, r31
    3634:	90 f4       	brcc	.+36     	; 0x365a <xTaskCheckForTimeOut+0x5a>
    3636:	4e 1b       	sub	r20, r30
    3638:	5f 0b       	sbc	r21, r31
    363a:	fb 01       	movw	r30, r22
    363c:	42 17       	cp	r20, r18
    363e:	53 07       	cpc	r21, r19
    3640:	38 f4       	brcc	.+14     	; 0x3650 <xTaskCheckForTimeOut+0x50>
    3642:	24 1b       	sub	r18, r20
    3644:	35 0b       	sbc	r19, r21
    3646:	31 83       	std	Z+1, r19	; 0x01
    3648:	20 83       	st	Z, r18
    364a:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskInternalSetTimeOutState>
    364e:	03 c0       	rjmp	.+6      	; 0x3656 <xTaskCheckForTimeOut+0x56>
    3650:	11 82       	std	Z+1, r1	; 0x01
    3652:	10 82       	st	Z, r1
    3654:	02 c0       	rjmp	.+4      	; 0x365a <xTaskCheckForTimeOut+0x5a>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	01 c0       	rjmp	.+2      	; 0x365c <xTaskCheckForTimeOut+0x5c>
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	0f 90       	pop	r0
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	df 91       	pop	r29
    3662:	cf 91       	pop	r28
    3664:	08 95       	ret

00003666 <vTaskMissedYield>:
    3666:	81 e0       	ldi	r24, 0x01	; 1
    3668:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xYieldPending>
    366c:	08 95       	ret

0000366e <xTaskGetSchedulerState>:
    366e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xSchedulerRunning>
    3672:	88 23       	and	r24, r24
    3674:	31 f0       	breq	.+12     	; 0x3682 <xTaskGetSchedulerState+0x14>
    3676:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <uxSchedulerSuspended>
    367a:	88 23       	and	r24, r24
    367c:	21 f0       	breq	.+8      	; 0x3686 <xTaskGetSchedulerState+0x18>
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	08 95       	ret
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	08 95       	ret
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	08 95       	ret

0000368a <xTaskPriorityInherit>:
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	fc 01       	movw	r30, r24
    3694:	89 2b       	or	r24, r25
    3696:	09 f4       	brne	.+2      	; 0x369a <xTaskPriorityInherit+0x10>
    3698:	55 c0       	rjmp	.+170    	; 0x3744 <xTaskPriorityInherit+0xba>
    369a:	86 89       	ldd	r24, Z+22	; 0x16
    369c:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    36a0:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    36a4:	56 96       	adiw	r26, 0x16	; 22
    36a6:	9c 91       	ld	r25, X
    36a8:	89 17       	cp	r24, r25
    36aa:	08 f0       	brcs	.+2      	; 0x36ae <xTaskPriorityInherit+0x24>
    36ac:	41 c0       	rjmp	.+130    	; 0x3730 <xTaskPriorityInherit+0xa6>
    36ae:	24 85       	ldd	r18, Z+12	; 0x0c
    36b0:	35 85       	ldd	r19, Z+13	; 0x0d
    36b2:	37 fd       	sbrc	r19, 7
    36b4:	0c c0       	rjmp	.+24     	; 0x36ce <xTaskPriorityInherit+0x44>
    36b6:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    36ba:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    36be:	56 96       	adiw	r26, 0x16	; 22
    36c0:	9c 91       	ld	r25, X
    36c2:	24 e0       	ldi	r18, 0x04	; 4
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	29 1b       	sub	r18, r25
    36c8:	31 09       	sbc	r19, r1
    36ca:	35 87       	std	Z+13, r19	; 0x0d
    36cc:	24 87       	std	Z+12, r18	; 0x0c
    36ce:	29 e0       	ldi	r18, 0x09	; 9
    36d0:	82 9f       	mul	r24, r18
    36d2:	c0 01       	movw	r24, r0
    36d4:	11 24       	eor	r1, r1
    36d6:	86 5a       	subi	r24, 0xA6	; 166
    36d8:	9b 4f       	sbci	r25, 0xFB	; 251
    36da:	22 85       	ldd	r18, Z+10	; 0x0a
    36dc:	33 85       	ldd	r19, Z+11	; 0x0b
    36de:	28 17       	cp	r18, r24
    36e0:	39 07       	cpc	r19, r25
    36e2:	e9 f4       	brne	.+58     	; 0x371e <xTaskPriorityInherit+0x94>
    36e4:	8f 01       	movw	r16, r30
    36e6:	ef 01       	movw	r28, r30
    36e8:	22 96       	adiw	r28, 0x02	; 2
    36ea:	ce 01       	movw	r24, r28
    36ec:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    36f0:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    36f4:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    36f8:	86 89       	ldd	r24, Z+22	; 0x16
    36fa:	f8 01       	movw	r30, r16
    36fc:	86 8b       	std	Z+22, r24	; 0x16
    36fe:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    3702:	98 17       	cp	r25, r24
    3704:	10 f4       	brcc	.+4      	; 0x370a <xTaskPriorityInherit+0x80>
    3706:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    370a:	f9 e0       	ldi	r31, 0x09	; 9
    370c:	8f 9f       	mul	r24, r31
    370e:	c0 01       	movw	r24, r0
    3710:	11 24       	eor	r1, r1
    3712:	be 01       	movw	r22, r28
    3714:	86 5a       	subi	r24, 0xA6	; 166
    3716:	9b 4f       	sbci	r25, 0xFB	; 251
    3718:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    371c:	07 c0       	rjmp	.+14     	; 0x372c <xTaskPriorityInherit+0xa2>
    371e:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3722:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3726:	56 96       	adiw	r26, 0x16	; 22
    3728:	8c 91       	ld	r24, X
    372a:	86 8b       	std	Z+22, r24	; 0x16
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	0b c0       	rjmp	.+22     	; 0x3746 <xTaskPriorityInherit+0xbc>
    3730:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3734:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	21 a1       	ldd	r18, Z+33	; 0x21
    373c:	56 96       	adiw	r26, 0x16	; 22
    373e:	9c 91       	ld	r25, X
    3740:	29 17       	cp	r18, r25
    3742:	08 f0       	brcs	.+2      	; 0x3746 <xTaskPriorityInherit+0xbc>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	df 91       	pop	r29
    3748:	cf 91       	pop	r28
    374a:	1f 91       	pop	r17
    374c:	0f 91       	pop	r16
    374e:	08 95       	ret

00003750 <xTaskPriorityDisinherit>:
    3750:	0f 93       	push	r16
    3752:	1f 93       	push	r17
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
    3758:	fc 01       	movw	r30, r24
    375a:	89 2b       	or	r24, r25
    375c:	11 f4       	brne	.+4      	; 0x3762 <xTaskPriorityDisinherit+0x12>
    375e:	80 e0       	ldi	r24, 0x00	; 0
    3760:	2c c0       	rjmp	.+88     	; 0x37ba <xTaskPriorityDisinherit+0x6a>
    3762:	82 a1       	ldd	r24, Z+34	; 0x22
    3764:	81 50       	subi	r24, 0x01	; 1
    3766:	82 a3       	std	Z+34, r24	; 0x22
    3768:	26 89       	ldd	r18, Z+22	; 0x16
    376a:	91 a1       	ldd	r25, Z+33	; 0x21
    376c:	29 17       	cp	r18, r25
    376e:	b9 f3       	breq	.-18     	; 0x375e <xTaskPriorityDisinherit+0xe>
    3770:	81 11       	cpse	r24, r1
    3772:	f5 cf       	rjmp	.-22     	; 0x375e <xTaskPriorityDisinherit+0xe>
    3774:	ef 01       	movw	r28, r30
    3776:	8f 01       	movw	r16, r30
    3778:	0e 5f       	subi	r16, 0xFE	; 254
    377a:	1f 4f       	sbci	r17, 0xFF	; 255
    377c:	c8 01       	movw	r24, r16
    377e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    3782:	89 a1       	ldd	r24, Y+33	; 0x21
    3784:	8e 8b       	std	Y+22, r24	; 0x16
    3786:	48 2f       	mov	r20, r24
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	24 e0       	ldi	r18, 0x04	; 4
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	24 1b       	sub	r18, r20
    3790:	35 0b       	sbc	r19, r21
    3792:	3d 87       	std	Y+13, r19	; 0x0d
    3794:	2c 87       	std	Y+12, r18	; 0x0c
    3796:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    379a:	98 17       	cp	r25, r24
    379c:	10 f4       	brcc	.+4      	; 0x37a2 <xTaskPriorityDisinherit+0x52>
    379e:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    37a2:	29 e0       	ldi	r18, 0x09	; 9
    37a4:	24 9f       	mul	r18, r20
    37a6:	c0 01       	movw	r24, r0
    37a8:	25 9f       	mul	r18, r21
    37aa:	90 0d       	add	r25, r0
    37ac:	11 24       	eor	r1, r1
    37ae:	b8 01       	movw	r22, r16
    37b0:	86 5a       	subi	r24, 0xA6	; 166
    37b2:	9b 4f       	sbci	r25, 0xFB	; 251
    37b4:	0e 94 1b 20 	call	0x4036	; 0x4036 <vListInsertEnd>
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	08 95       	ret

000037c4 <vTaskPriorityDisinheritAfterTimeout>:
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	fc 01       	movw	r30, r24
    37ce:	89 2b       	or	r24, r25
    37d0:	d9 f1       	breq	.+118    	; 0x3848 <vTaskPriorityDisinheritAfterTimeout+0x84>
    37d2:	91 a1       	ldd	r25, Z+33	; 0x21
    37d4:	96 17       	cp	r25, r22
    37d6:	08 f4       	brcc	.+2      	; 0x37da <vTaskPriorityDisinheritAfterTimeout+0x16>
    37d8:	96 2f       	mov	r25, r22
    37da:	86 89       	ldd	r24, Z+22	; 0x16
    37dc:	89 17       	cp	r24, r25
    37de:	a1 f1       	breq	.+104    	; 0x3848 <vTaskPriorityDisinheritAfterTimeout+0x84>
    37e0:	22 a1       	ldd	r18, Z+34	; 0x22
    37e2:	21 30       	cpi	r18, 0x01	; 1
    37e4:	89 f5       	brne	.+98     	; 0x3848 <vTaskPriorityDisinheritAfterTimeout+0x84>
    37e6:	96 8b       	std	Z+22, r25	; 0x16
    37e8:	24 85       	ldd	r18, Z+12	; 0x0c
    37ea:	35 85       	ldd	r19, Z+13	; 0x0d
    37ec:	37 fd       	sbrc	r19, 7
    37ee:	06 c0       	rjmp	.+12     	; 0x37fc <vTaskPriorityDisinheritAfterTimeout+0x38>
    37f0:	24 e0       	ldi	r18, 0x04	; 4
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	29 1b       	sub	r18, r25
    37f6:	31 09       	sbc	r19, r1
    37f8:	35 87       	std	Z+13, r19	; 0x0d
    37fa:	24 87       	std	Z+12, r18	; 0x0c
    37fc:	29 e0       	ldi	r18, 0x09	; 9
    37fe:	82 9f       	mul	r24, r18
    3800:	c0 01       	movw	r24, r0
    3802:	11 24       	eor	r1, r1
    3804:	86 5a       	subi	r24, 0xA6	; 166
    3806:	9b 4f       	sbci	r25, 0xFB	; 251
    3808:	22 85       	ldd	r18, Z+10	; 0x0a
    380a:	33 85       	ldd	r19, Z+11	; 0x0b
    380c:	28 17       	cp	r18, r24
    380e:	39 07       	cpc	r19, r25
    3810:	d9 f4       	brne	.+54     	; 0x3848 <vTaskPriorityDisinheritAfterTimeout+0x84>
    3812:	ef 01       	movw	r28, r30
    3814:	8f 01       	movw	r16, r30
    3816:	0e 5f       	subi	r16, 0xFE	; 254
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	c8 01       	movw	r24, r16
    381c:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    3820:	8e 89       	ldd	r24, Y+22	; 0x16
    3822:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <uxTopReadyPriority>
    3826:	98 17       	cp	r25, r24
    3828:	10 f4       	brcc	.+4      	; 0x382e <vTaskPriorityDisinheritAfterTimeout+0x6a>
    382a:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <uxTopReadyPriority>
    382e:	29 e0       	ldi	r18, 0x09	; 9
    3830:	82 9f       	mul	r24, r18
    3832:	c0 01       	movw	r24, r0
    3834:	11 24       	eor	r1, r1
    3836:	b8 01       	movw	r22, r16
    3838:	86 5a       	subi	r24, 0xA6	; 166
    383a:	9b 4f       	sbci	r25, 0xFB	; 251
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <vListInsertEnd>
    3848:	df 91       	pop	r29
    384a:	cf 91       	pop	r28
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	08 95       	ret

00003852 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    3852:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    3856:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    385a:	89 2b       	or	r24, r25
    385c:	39 f0       	breq	.+14     	; 0x386c <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    385e:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <pxCurrentTCB>
    3862:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3866:	82 a1       	ldd	r24, Z+34	; 0x22
    3868:	8f 5f       	subi	r24, 0xFF	; 255
    386a:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    386c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <pxCurrentTCB>
    3870:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    }
    3874:	08 95       	ret

00003876 <prvCheckForValidListAndQueue>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	0f 92       	push	r0
    387c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    3880:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    3884:	89 2b       	or	r24, r25
    3886:	e9 f4       	brne	.+58     	; 0x38c2 <prvCheckForValidListAndQueue+0x4c>
    3888:	83 e9       	ldi	r24, 0x93	; 147
    388a:	94 e0       	ldi	r25, 0x04	; 4
    388c:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    3890:	8a e8       	ldi	r24, 0x8A	; 138
    3892:	94 e0       	ldi	r25, 0x04	; 4
    3894:	0e 94 09 20 	call	0x4012	; 0x4012 <vListInitialise>
    3898:	83 e9       	ldi	r24, 0x93	; 147
    389a:	94 e0       	ldi	r25, 0x04	; 4
    389c:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    38a0:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    38a4:	8a e8       	ldi	r24, 0x8A	; 138
    38a6:	94 e0       	ldi	r25, 0x04	; 4
    38a8:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <pxOverflowTimerList+0x1>
    38ac:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <pxOverflowTimerList>
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	65 e0       	ldi	r22, 0x05	; 5
    38b4:	8a e0       	ldi	r24, 0x0A	; 10
    38b6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xQueueGenericCreate>
    38ba:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <xTimerQueue+0x1>
    38be:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <xTimerQueue>
    38c2:	0f 90       	pop	r0
    38c4:	0f be       	out	0x3f, r0	; 63
    38c6:	08 95       	ret

000038c8 <prvInsertTimerInActiveList>:
    38c8:	fc 01       	movw	r30, r24
    38ca:	73 83       	std	Z+3, r23	; 0x03
    38cc:	62 83       	std	Z+2, r22	; 0x02
    38ce:	91 87       	std	Z+9, r25	; 0x09
    38d0:	80 87       	std	Z+8, r24	; 0x08
    38d2:	46 17       	cp	r20, r22
    38d4:	57 07       	cpc	r21, r23
    38d6:	78 f0       	brcs	.+30     	; 0x38f6 <prvInsertTimerInActiveList+0x2e>
    38d8:	42 1b       	sub	r20, r18
    38da:	53 0b       	sbc	r21, r19
    38dc:	84 85       	ldd	r24, Z+12	; 0x0c
    38de:	95 85       	ldd	r25, Z+13	; 0x0d
    38e0:	48 17       	cp	r20, r24
    38e2:	59 07       	cpc	r21, r25
    38e4:	c8 f4       	brcc	.+50     	; 0x3918 <prvInsertTimerInActiveList+0x50>
    38e6:	bf 01       	movw	r22, r30
    38e8:	6e 5f       	subi	r22, 0xFE	; 254
    38ea:	7f 4f       	sbci	r23, 0xFF	; 255
    38ec:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    38f0:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    38f4:	0d c0       	rjmp	.+26     	; 0x3910 <prvInsertTimerInActiveList+0x48>
    38f6:	42 17       	cp	r20, r18
    38f8:	53 07       	cpc	r21, r19
    38fa:	18 f4       	brcc	.+6      	; 0x3902 <prvInsertTimerInActiveList+0x3a>
    38fc:	62 17       	cp	r22, r18
    38fe:	73 07       	cpc	r23, r19
    3900:	58 f4       	brcc	.+22     	; 0x3918 <prvInsertTimerInActiveList+0x50>
    3902:	bf 01       	movw	r22, r30
    3904:	6e 5f       	subi	r22, 0xFE	; 254
    3906:	7f 4f       	sbci	r23, 0xFF	; 255
    3908:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    390c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    3910:	0e 94 3c 20 	call	0x4078	; 0x4078 <vListInsert>
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	08 95       	ret
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	08 95       	ret

0000391c <xTimerCreateTimerTask>:
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	0e 94 3b 1c 	call	0x3876	; 0x3876 <prvCheckForValidListAndQueue>
    3926:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    392a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    392e:	89 2b       	or	r24, r25
    3930:	81 f0       	breq	.+32     	; 0x3952 <xTimerCreateTimerTask+0x36>
    3932:	82 e8       	ldi	r24, 0x82	; 130
    3934:	e8 2e       	mov	r14, r24
    3936:	84 e0       	ldi	r24, 0x04	; 4
    3938:	f8 2e       	mov	r15, r24
    393a:	03 e0       	ldi	r16, 0x03	; 3
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	45 e5       	ldi	r20, 0x55	; 85
    3942:	50 e0       	ldi	r21, 0x00	; 0
    3944:	61 e3       	ldi	r22, 0x31	; 49
    3946:	72 e0       	ldi	r23, 0x02	; 2
    3948:	8e e3       	ldi	r24, 0x3E	; 62
    394a:	9d e1       	ldi	r25, 0x1D	; 29
    394c:	0e 94 dd 16 	call	0x2dba	; 0x2dba <xTaskCreate>
    3950:	01 c0       	rjmp	.+2      	; 0x3954 <xTimerCreateTimerTask+0x38>
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	0f 91       	pop	r16
    3956:	ff 90       	pop	r15
    3958:	ef 90       	pop	r14
    395a:	08 95       	ret

0000395c <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    395c:	0f 93       	push	r16
    395e:	1f 93       	push	r17
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	00 d0       	rcall	.+0      	; 0x3966 <xTimerGenericCommand+0xa>
    3966:	00 d0       	rcall	.+0      	; 0x3968 <xTimerGenericCommand+0xc>
    3968:	1f 92       	push	r1
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    396e:	a0 91 84 04 	lds	r26, 0x0484	; 0x800484 <xTimerQueue>
    3972:	b0 91 85 04 	lds	r27, 0x0485	; 0x800485 <xTimerQueue+0x1>
    3976:	10 97       	sbiw	r26, 0x00	; 0
    3978:	29 f1       	breq	.+74     	; 0x39c4 <xTimerGenericCommand+0x68>
    397a:	f9 01       	movw	r30, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    397c:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    397e:	5b 83       	std	Y+3, r21	; 0x03
    3980:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    3982:	9d 83       	std	Y+5, r25	; 0x05
    3984:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    3986:	66 30       	cpi	r22, 0x06	; 6
    3988:	a4 f4       	brge	.+40     	; 0x39b2 <xTimerGenericCommand+0x56>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    398a:	0e 94 37 1b 	call	0x366e	; 0x366e <xTaskGetSchedulerState>
    398e:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <xTimerQueue>
    3992:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <xTimerQueue+0x1>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    3996:	20 e0       	ldi	r18, 0x00	; 0
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
        xMessage.u.xTimerParameters.pxTimer = xTimer;

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    3998:	82 30       	cpi	r24, 0x02	; 2
    399a:	11 f4       	brne	.+4      	; 0x39a0 <xTimerGenericCommand+0x44>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    399c:	a8 01       	movw	r20, r16
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <xTimerGenericCommand+0x48>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	50 e0       	ldi	r21, 0x00	; 0
    39a4:	be 01       	movw	r22, r28
    39a6:	6f 5f       	subi	r22, 0xFF	; 255
    39a8:	7f 4f       	sbci	r23, 0xFF	; 255
    39aa:	cf 01       	movw	r24, r30
    39ac:	0e 94 03 14 	call	0x2806	; 0x2806 <xQueueGenericSend>
    39b0:	0a c0       	rjmp	.+20     	; 0x39c6 <xTimerGenericCommand+0x6a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	af 01       	movw	r20, r30
    39b6:	be 01       	movw	r22, r28
    39b8:	6f 5f       	subi	r22, 0xFF	; 255
    39ba:	7f 4f       	sbci	r23, 0xFF	; 255
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 99 14 	call	0x2932	; 0x2932 <xQueueGenericSendFromISR>
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <xTimerGenericCommand+0x6a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	08 95       	ret

000039da <prvSwitchTimerLists>:
    }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    39e2:	cf 93       	push	r28
    39e4:	df 93       	push	r29

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    39e6:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    39ea:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    39ee:	80 81       	ld	r24, Z
    39f0:	88 23       	and	r24, r24
    39f2:	89 f1       	breq	.+98     	; 0x3a56 <prvSwitchTimerLists+0x7c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    39f4:	05 80       	ldd	r0, Z+5	; 0x05
    39f6:	f6 81       	ldd	r31, Z+6	; 0x06
    39f8:	e0 2d       	mov	r30, r0
    39fa:	e0 80       	ld	r14, Z
    39fc:	f1 80       	ldd	r15, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    39fe:	c6 81       	ldd	r28, Z+6	; 0x06
    3a00:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3a02:	8e 01       	movw	r16, r28
    3a04:	0e 5f       	subi	r16, 0xFE	; 254
    3a06:	1f 4f       	sbci	r17, 0xFF	; 255
    3a08:	c8 01       	movw	r24, r16
    3a0a:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3a0e:	e8 89       	ldd	r30, Y+16	; 0x10
    3a10:	f9 89       	ldd	r31, Y+17	; 0x11
    3a12:	ce 01       	movw	r24, r28
    3a14:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3a16:	8a 89       	ldd	r24, Y+18	; 0x12
    3a18:	82 ff       	sbrs	r24, 2
    3a1a:	e5 cf       	rjmp	.-54     	; 0x39e6 <prvSwitchTimerLists+0xc>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    3a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a20:	8e 0d       	add	r24, r14
    3a22:	9f 1d       	adc	r25, r15
            if( xReloadTime > xNextExpireTime )
    3a24:	e8 16       	cp	r14, r24
    3a26:	f9 06       	cpc	r15, r25
    3a28:	60 f4       	brcc	.+24     	; 0x3a42 <prvSwitchTimerLists+0x68>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    3a2a:	9b 83       	std	Y+3, r25	; 0x03
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3a2e:	d9 87       	std	Y+9, r29	; 0x09
    3a30:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3a32:	b8 01       	movw	r22, r16
    3a34:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <pxCurrentTimerList>
    3a38:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    3a3c:	0e 94 3c 20 	call	0x4078	; 0x4078 <vListInsert>
    3a40:	d2 cf       	rjmp	.-92     	; 0x39e6 <prvSwitchTimerLists+0xc>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3a42:	00 e0       	ldi	r16, 0x00	; 0
    3a44:	10 e0       	ldi	r17, 0x00	; 0
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	a7 01       	movw	r20, r14
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	ce 01       	movw	r24, r28
    3a50:	0e 94 ae 1c 	call	0x395c	; 0x395c <xTimerGenericCommand>
    3a54:	c8 cf       	rjmp	.-112    	; 0x39e6 <prvSwitchTimerLists+0xc>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    3a56:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxOverflowTimerList>
    3a5a:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    3a5e:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <pxCurrentTimerList+0x1>
    3a62:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    3a66:	f0 93 87 04 	sts	0x0487, r31	; 0x800487 <pxOverflowTimerList+0x1>
    3a6a:	e0 93 86 04 	sts	0x0486, r30	; 0x800486 <pxOverflowTimerList>
}
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	08 95       	ret

00003a7c <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <prvTimerTask+0x6>
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <prvTimerTask+0x8>
    3a84:	1f 92       	push	r1
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3a8a:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    3a8e:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    3a92:	d0 80       	ld	r13, Z
    if( *pxListWasEmpty == pdFALSE )
    3a94:	dd 20       	and	r13, r13
    3a96:	31 f0       	breq	.+12     	; 0x3aa4 <prvTimerTask+0x28>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3a98:	05 80       	ldd	r0, Z+5	; 0x05
    3a9a:	f6 81       	ldd	r31, Z+6	; 0x06
    3a9c:	e0 2d       	mov	r30, r0
    3a9e:	e0 80       	ld	r14, Z
    3aa0:	f1 80       	ldd	r15, Z+1	; 0x01
    3aa2:	02 c0       	rjmp	.+4      	; 0x3aa8 <prvTimerTask+0x2c>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3aa4:	e1 2c       	mov	r14, r1
    3aa6:	f1 2c       	mov	r15, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3aa8:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3aac:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
    3ab0:	8c 01       	movw	r16, r24

    if( xTimeNow < xLastTime )
    3ab2:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    3ab6:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    3aba:	08 17       	cp	r16, r24
    3abc:	19 07       	cpc	r17, r25
    3abe:	20 f4       	brcc	.+8      	; 0x3ac8 <prvTimerTask+0x4c>
    {
        prvSwitchTimerLists();
    3ac0:	0e 94 ed 1c 	call	0x39da	; 0x39da <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	01 c0       	rjmp	.+2      	; 0x3aca <prvTimerTask+0x4e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    }

    xLastTime = xTimeNow;
    3aca:	10 93 81 04 	sts	0x0481, r17	; 0x800481 <xLastTime.2412+0x1>
    3ace:	00 93 80 04 	sts	0x0480, r16	; 0x800480 <xLastTime.2412>
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
    3ad2:	81 11       	cpse	r24, r1
    3ad4:	55 c0       	rjmp	.+170    	; 0x3b80 <prvTimerTask+0x104>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3ad6:	dd 20       	and	r13, r13
    3ad8:	d9 f1       	breq	.+118    	; 0x3b50 <prvTimerTask+0xd4>
    3ada:	0e 15       	cp	r16, r14
    3adc:	1f 05       	cpc	r17, r15
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <prvTimerTask+0x66>
    3ae0:	3e c0       	rjmp	.+124    	; 0x3b5e <prvTimerTask+0xe2>
            {
                ( void ) xTaskResumeAll();
    3ae2:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3ae6:	e0 91 88 04 	lds	r30, 0x0488	; 0x800488 <pxCurrentTimerList>
    3aea:	f0 91 89 04 	lds	r31, 0x0489	; 0x800489 <pxCurrentTimerList+0x1>
    3aee:	05 80       	ldd	r0, Z+5	; 0x05
    3af0:	f6 81       	ldd	r31, Z+6	; 0x06
    3af2:	e0 2d       	mov	r30, r0
    3af4:	c6 80       	ldd	r12, Z+6	; 0x06
    3af6:	d7 80       	ldd	r13, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3af8:	c6 01       	movw	r24, r12
    3afa:	02 96       	adiw	r24, 0x02	; 2
    3afc:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b00:	d6 01       	movw	r26, r12
    3b02:	52 96       	adiw	r26, 0x12	; 18
    3b04:	8c 91       	ld	r24, X
    3b06:	52 97       	sbiw	r26, 0x12	; 18
    3b08:	82 ff       	sbrs	r24, 2
    3b0a:	17 c0       	rjmp	.+46     	; 0x3b3a <prvTimerTask+0xbe>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3b0c:	1c 96       	adiw	r26, 0x0c	; 12
    3b0e:	6d 91       	ld	r22, X+
    3b10:	7c 91       	ld	r23, X
    3b12:	1d 97       	sbiw	r26, 0x0d	; 13
    3b14:	6e 0d       	add	r22, r14
    3b16:	7f 1d       	adc	r23, r15
    3b18:	97 01       	movw	r18, r14
    3b1a:	a8 01       	movw	r20, r16
    3b1c:	c6 01       	movw	r24, r12
    3b1e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <prvInsertTimerInActiveList>
    3b22:	88 23       	and	r24, r24
    3b24:	69 f0       	breq	.+26     	; 0x3b40 <prvTimerTask+0xc4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3b26:	00 e0       	ldi	r16, 0x00	; 0
    3b28:	10 e0       	ldi	r17, 0x00	; 0
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	a7 01       	movw	r20, r14
    3b30:	60 e0       	ldi	r22, 0x00	; 0
    3b32:	c6 01       	movw	r24, r12
    3b34:	0e 94 ae 1c 	call	0x395c	; 0x395c <xTimerGenericCommand>
    3b38:	03 c0       	rjmp	.+6      	; 0x3b40 <prvTimerTask+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3b3a:	8e 7f       	andi	r24, 0xFE	; 254
    3b3c:	f6 01       	movw	r30, r12
    3b3e:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3b40:	d6 01       	movw	r26, r12
    3b42:	50 96       	adiw	r26, 0x10	; 16
    3b44:	ed 91       	ld	r30, X+
    3b46:	fc 91       	ld	r31, X
    3b48:	51 97       	sbiw	r26, 0x11	; 17
    3b4a:	c6 01       	movw	r24, r12
    3b4c:	09 95       	icall
    3b4e:	1e c0       	rjmp	.+60     	; 0x3b8c <prvTimerTask+0x110>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3b50:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxOverflowTimerList>
    3b54:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxOverflowTimerList+0x1>
    3b58:	80 81       	ld	r24, Z
    3b5a:	41 e0       	ldi	r20, 0x01	; 1
    3b5c:	81 11       	cpse	r24, r1
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3b5e:	40 e0       	ldi	r20, 0x00	; 0
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3b60:	b7 01       	movw	r22, r14
    3b62:	60 1b       	sub	r22, r16
    3b64:	71 0b       	sbc	r23, r17
    3b66:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    3b6a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    3b6e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3b72:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    3b76:	81 11       	cpse	r24, r1
    3b78:	09 c0       	rjmp	.+18     	; 0x3b8c <prvTimerTask+0x110>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3b7a:	0e 94 3c 21 	call	0x4278	; 0x4278 <vPortYield>
    3b7e:	06 c0       	rjmp	.+12     	; 0x3b8c <prvTimerTask+0x110>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3b80:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>
    3b84:	03 c0       	rjmp	.+6      	; 0x3b8c <prvTimerTask+0x110>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	87 ff       	sbrs	r24, 7
    3b8a:	0e c0       	rjmp	.+28     	; 0x3ba8 <prvTimerTask+0x12c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	be 01       	movw	r22, r28
    3b92:	6f 5f       	subi	r22, 0xFF	; 255
    3b94:	7f 4f       	sbci	r23, 0xFF	; 255
    3b96:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <xTimerQueue>
    3b9a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <xTimerQueue+0x1>
    3b9e:	0e 94 c8 14 	call	0x2990	; 0x2990 <xQueueReceive>
    3ba2:	81 11       	cpse	r24, r1
    3ba4:	f0 cf       	rjmp	.-32     	; 0x3b86 <prvTimerTask+0x10a>
    3ba6:	71 cf       	rjmp	.-286    	; 0x3a8a <prvTimerTask+0xe>
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3ba8:	ec 80       	ldd	r14, Y+4	; 0x04
    3baa:	fd 80       	ldd	r15, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3bac:	f7 01       	movw	r30, r14
    3bae:	82 85       	ldd	r24, Z+10	; 0x0a
    3bb0:	93 85       	ldd	r25, Z+11	; 0x0b
    3bb2:	89 2b       	or	r24, r25
    3bb4:	21 f0       	breq	.+8      	; 0x3bbe <prvTimerTask+0x142>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3bb6:	c7 01       	movw	r24, r14
    3bb8:	02 96       	adiw	r24, 0x02	; 2
    3bba:	0e 94 74 20 	call	0x40e8	; 0x40e8 <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3bbe:	0e 94 66 18 	call	0x30cc	; 0x30cc <xTaskGetTickCount>
    3bc2:	6c 01       	movw	r12, r24

    if( xTimeNow < xLastTime )
    3bc4:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <xLastTime.2412>
    3bc8:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <xLastTime.2412+0x1>
    3bcc:	c8 16       	cp	r12, r24
    3bce:	d9 06       	cpc	r13, r25
    3bd0:	10 f4       	brcc	.+4      	; 0x3bd6 <prvTimerTask+0x15a>
    {
        prvSwitchTimerLists();
    3bd2:	0e 94 ed 1c 	call	0x39da	; 0x39da <prvSwitchTimerLists>
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    }

    xLastTime = xTimeNow;
    3bd6:	d0 92 81 04 	sts	0x0481, r13	; 0x800481 <xLastTime.2412+0x1>
    3bda:	c0 92 80 04 	sts	0x0480, r12	; 0x800480 <xLastTime.2412>
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            switch( xMessage.xMessageID )
    3bde:	e9 81       	ldd	r30, Y+1	; 0x01
    3be0:	0e 2e       	mov	r0, r30
    3be2:	00 0c       	add	r0, r0
    3be4:	ff 0b       	sbc	r31, r31
    3be6:	ea 30       	cpi	r30, 0x0A	; 10
    3be8:	f1 05       	cpc	r31, r1
    3bea:	80 f6       	brcc	.-96     	; 0x3b8c <prvTimerTask+0x110>
    3bec:	ec 5c       	subi	r30, 0xCC	; 204
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	d7 01       	movw	r26, r14
    3bf2:	52 96       	adiw	r26, 0x12	; 18
    3bf4:	8c 91       	ld	r24, X
    3bf6:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3bfa:	81 60       	ori	r24, 0x01	; 1
    3bfc:	f7 01       	movw	r30, r14
    3bfe:	82 8b       	std	Z+18, r24	; 0x12
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3c00:	2a 81       	ldd	r18, Y+2	; 0x02
    3c02:	3b 81       	ldd	r19, Y+3	; 0x03
    3c04:	64 85       	ldd	r22, Z+12	; 0x0c
    3c06:	75 85       	ldd	r23, Z+13	; 0x0d
    3c08:	62 0f       	add	r22, r18
    3c0a:	73 1f       	adc	r23, r19
    3c0c:	a6 01       	movw	r20, r12
    3c0e:	c7 01       	movw	r24, r14
    3c10:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <prvInsertTimerInActiveList>
    3c14:	88 23       	and	r24, r24
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <prvTimerTask+0x19e>
    3c18:	b9 cf       	rjmp	.-142    	; 0x3b8c <prvTimerTask+0x110>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3c1a:	d7 01       	movw	r26, r14
    3c1c:	50 96       	adiw	r26, 0x10	; 16
    3c1e:	ed 91       	ld	r30, X+
    3c20:	fc 91       	ld	r31, X
    3c22:	51 97       	sbiw	r26, 0x11	; 17
    3c24:	c7 01       	movw	r24, r14
    3c26:	09 95       	icall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3c28:	f7 01       	movw	r30, r14
    3c2a:	82 89       	ldd	r24, Z+18	; 0x12
    3c2c:	82 ff       	sbrs	r24, 2
    3c2e:	ae cf       	rjmp	.-164    	; 0x3b8c <prvTimerTask+0x110>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3c30:	4a 81       	ldd	r20, Y+2	; 0x02
    3c32:	5b 81       	ldd	r21, Y+3	; 0x03
    3c34:	84 85       	ldd	r24, Z+12	; 0x0c
    3c36:	95 85       	ldd	r25, Z+13	; 0x0d
    3c38:	48 0f       	add	r20, r24
    3c3a:	59 1f       	adc	r21, r25
    3c3c:	00 e0       	ldi	r16, 0x00	; 0
    3c3e:	10 e0       	ldi	r17, 0x00	; 0
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	60 e0       	ldi	r22, 0x00	; 0
    3c46:	c7 01       	movw	r24, r14
    3c48:	0e 94 ae 1c 	call	0x395c	; 0x395c <xTimerGenericCommand>
    3c4c:	9f cf       	rjmp	.-194    	; 0x3b8c <prvTimerTask+0x110>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3c4e:	81 60       	ori	r24, 0x01	; 1
    3c50:	f7 01       	movw	r30, r14
    3c52:	82 8b       	std	Z+18, r24	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3c54:	6a 81       	ldd	r22, Y+2	; 0x02
    3c56:	7b 81       	ldd	r23, Y+3	; 0x03
    3c58:	75 87       	std	Z+13, r23	; 0x0d
    3c5a:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3c5c:	6c 0d       	add	r22, r12
    3c5e:	7d 1d       	adc	r23, r13
    3c60:	96 01       	movw	r18, r12
    3c62:	a6 01       	movw	r20, r12
    3c64:	c7 01       	movw	r24, r14
    3c66:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <prvInsertTimerInActiveList>
    3c6a:	90 cf       	rjmp	.-224    	; 0x3b8c <prvTimerTask+0x110>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3c6c:	81 fd       	sbrc	r24, 1
    3c6e:	04 c0       	rjmp	.+8      	; 0x3c78 <prvTimerTask+0x1fc>
                        {
                            vPortFree( pxTimer );
    3c70:	c7 01       	movw	r24, r14
    3c72:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <vPortFree>
    3c76:	8a cf       	rjmp	.-236    	; 0x3b8c <prvTimerTask+0x110>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3c78:	8e 7f       	andi	r24, 0xFE	; 254
    3c7a:	d7 01       	movw	r26, r14
    3c7c:	52 96       	adiw	r26, 0x12	; 18
    3c7e:	8c 93       	st	X, r24
    3c80:	85 cf       	rjmp	.-246    	; 0x3b8c <prvTimerTask+0x110>

00003c82 <initVariant>:
{
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    3c82:	0e 94 ac 07 	call	0xf58	; 0xf58 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    3c86:	0e 94 32 18 	call	0x3064	; 0x3064 <vTaskStartScheduler>
    3c8a:	08 95       	ret

00003c8c <vApplicationIdleHook>:
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    loop();        // the normal Arduino loop() function is run here.
    3c8c:	0e 94 1f 08 	call	0x103e	; 0x103e <loop>
    if (serialEventRun) serialEventRun();
    3c90:	88 ec       	ldi	r24, 0xC8	; 200
    3c92:	9c e0       	ldi	r25, 0x0C	; 12
    3c94:	89 2b       	or	r24, r25
    3c96:	11 f0       	breq	.+4      	; 0x3c9c <vApplicationIdleHook+0x10>
    3c98:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <_Z14serialEventRunv>
    3c9c:	08 95       	ret

00003c9e <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    3c9e:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    3ca0:	2d 9a       	sbi	0x05, 5	; 5
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< HEAD
    2f46:	2f ef       	ldi	r18, 0xFF	; 255
    2f48:	80 e7       	ldi	r24, 0x70	; 112
    2f4a:	92 e0       	ldi	r25, 0x02	; 2
    2f4c:	21 50       	subi	r18, 0x01	; 1
    2f4e:	80 40       	sbci	r24, 0x00	; 0
    2f50:	90 40       	sbci	r25, 0x00	; 0
    2f52:	e1 f7       	brne	.-8      	; 0x2f4c <vApplicationMallocFailedHook+0xa>
    2f54:	00 c0       	rjmp	.+0      	; 0x2f56 <vApplicationMallocFailedHook+0x14>
    2f56:	00 00       	nop
    2f58:	1d 9a       	sbi	0x03, 5	; 3
    2f5a:	f5 cf       	rjmp	.-22     	; 0x2f46 <vApplicationMallocFailedHook+0x4>

00002f5c <vApplicationStackOverflowHook>:
    2f5c:	25 9a       	sbi	0x04, 5	; 4
    2f5e:	2d 9a       	sbi	0x05, 5	; 5
    2f60:	2f ef       	ldi	r18, 0xFF	; 255
    2f62:	87 ea       	ldi	r24, 0xA7	; 167
    2f64:	91 e6       	ldi	r25, 0x61	; 97
    2f66:	21 50       	subi	r18, 0x01	; 1
    2f68:	80 40       	sbci	r24, 0x00	; 0
    2f6a:	90 40       	sbci	r25, 0x00	; 0
    2f6c:	e1 f7       	brne	.-8      	; 0x2f66 <vApplicationStackOverflowHook+0xa>
    2f6e:	00 c0       	rjmp	.+0      	; 0x2f70 <vApplicationStackOverflowHook+0x14>
    2f70:	00 00       	nop
    2f72:	1d 9a       	sbi	0x03, 5	; 3
    2f74:	f5 cf       	rjmp	.-22     	; 0x2f60 <vApplicationStackOverflowHook+0x4>

00002f76 <_ZN9MD_TCS23010initialiseEv>:
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	80 83       	st	Z, r24
    2f80:	81 83       	std	Z+1, r24	; 0x01
    2f82:	82 83       	std	Z+2, r24	; 0x02
    2f84:	83 83       	std	Z+3, r24	; 0x03
    2f86:	84 83       	std	Z+4, r24	; 0x04
    2f88:	8a e0       	ldi	r24, 0x0A	; 10
    2f8a:	85 83       	std	Z+5, r24	; 0x05
    2f8c:	16 82       	std	Z+6, r1	; 0x06
    2f8e:	df 01       	movw	r26, r30
    2f90:	17 96       	adiw	r26, 0x07	; 7
    2f92:	73 96       	adiw	r30, 0x13	; 19
    2f94:	00 e7       	ldi	r16, 0x70	; 112
    2f96:	17 e1       	ldi	r17, 0x17	; 23
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	48 ed       	ldi	r20, 0xD8	; 216
    2f9e:	56 ed       	ldi	r21, 0xD6	; 214
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	0d 93       	st	X+, r16
    2fa6:	1d 93       	st	X+, r17
    2fa8:	2d 93       	st	X+, r18
    2faa:	3d 93       	st	X+, r19
    2fac:	18 96       	adiw	r26, 0x08	; 8
    2fae:	4d 93       	st	X+, r20
    2fb0:	5d 93       	st	X+, r21
    2fb2:	6d 93       	st	X+, r22
    2fb4:	7c 93       	st	X, r23
    2fb6:	1b 97       	sbiw	r26, 0x0b	; 11
    2fb8:	ae 17       	cp	r26, r30
    2fba:	bf 07       	cpc	r27, r31
    2fbc:	99 f7       	brne	.-26     	; 0x2fa4 <_ZN9MD_TCS23010initialiseEv+0x2e>
    2fbe:	1f 91       	pop	r17
    2fc0:	0f 91       	pop	r16
    2fc2:	08 95       	ret

00002fc4 <_ZN9MD_TCS230C1Ehhh>:
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	ec 01       	movw	r28, r24
    2fd0:	f6 2e       	mov	r15, r22
    2fd2:	04 2f       	mov	r16, r20
    2fd4:	12 2f       	mov	r17, r18
    2fd6:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <_ZN9MD_TCS23010initialiseEv>
    2fda:	fb 82       	std	Y+3, r15	; 0x03
    2fdc:	0c 83       	std	Y+4, r16	; 0x04
    2fde:	18 83       	st	Y, r17
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	08 95       	ret

00002fec <_ZN9MD_TCS230D1Ev>:
    2fec:	08 95       	ret

00002fee <_ZN9MD_TCS2309setFilterEh>:
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	ec 01       	movw	r28, r24
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff8:	e9 f0       	breq	.+58     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	9f 3f       	cpi	r25, 0xFF	; 255
    2ffe:	d1 f0       	breq	.+52     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    3000:	61 30       	cpi	r22, 0x01	; 1
    3002:	49 f0       	breq	.+18     	; 0x3016 <_ZN9MD_TCS2309setFilterEh+0x28>
    3004:	30 f0       	brcs	.+12     	; 0x3012 <_ZN9MD_TCS2309setFilterEh+0x24>
    3006:	62 30       	cpi	r22, 0x02	; 2
    3008:	41 f0       	breq	.+16     	; 0x301a <_ZN9MD_TCS2309setFilterEh+0x2c>
    300a:	63 30       	cpi	r22, 0x03	; 3
    300c:	99 f4       	brne	.+38     	; 0x3034 <_ZN9MD_TCS2309setFilterEh+0x46>
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <_ZN9MD_TCS2309setFilterEh+0x36>
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <_ZN9MD_TCS2309setFilterEh+0x36>
    3016:	61 e0       	ldi	r22, 0x01	; 1
    3018:	01 c0       	rjmp	.+2      	; 0x301c <_ZN9MD_TCS2309setFilterEh+0x2e>
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3020:	61 e0       	ldi	r22, 0x01	; 1
    3022:	03 c0       	rjmp	.+6      	; 0x302a <_ZN9MD_TCS2309setFilterEh+0x3c>
    3024:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	8c 81       	ldd	r24, Y+4	; 0x04
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	08 95       	ret

0000303a <_ZN9MD_TCS23013setFrequency2Eh>:
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	ec 01       	movw	r28, r24
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	8f 3f       	cpi	r24, 0xFF	; 255
    3044:	e9 f0       	breq	.+58     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	9f 3f       	cpi	r25, 0xFF	; 255
    304a:	d1 f0       	breq	.+52     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    304c:	61 30       	cpi	r22, 0x01	; 1
    304e:	49 f0       	breq	.+18     	; 0x3062 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3050:	30 f0       	brcs	.+12     	; 0x305e <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3052:	62 30       	cpi	r22, 0x02	; 2
    3054:	41 f0       	breq	.+16     	; 0x3066 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    3056:	63 30       	cpi	r22, 0x03	; 3
    3058:	99 f4       	brne	.+38     	; 0x3080 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	09 c0       	rjmp	.+18     	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	03 c0       	rjmp	.+6      	; 0x3068 <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3066:	60 e0       	ldi	r22, 0x00	; 0
    3068:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	03 c0       	rjmp	.+6      	; 0x3076 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    3070:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <digitalWrite>
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	08 95       	ret

00003086 <_ZN9MD_TCS2309setEnableEb>:
    3086:	fc 01       	movw	r30, r24
    3088:	20 81       	ld	r18, Z
    308a:	2f 3f       	cpi	r18, 0xFF	; 255
    308c:	29 f0       	breq	.+10     	; 0x3098 <_ZN9MD_TCS2309setEnableEb+0x12>
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	69 27       	eor	r22, r25
    3092:	82 2f       	mov	r24, r18
    3094:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <digitalWrite>
    3098:	66 23       	and	r22, r22
    309a:	19 f0       	breq	.+6      	; 0x30a2 <_ZN9MD_TCS2309setEnableEb+0x1c>
    309c:	fc 01       	movw	r30, r24
    309e:	66 81       	ldd	r22, Z+6	; 0x06
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <_ZN9MD_TCS2309setEnableEb+0x1e>
    30a2:	63 e0       	ldi	r22, 0x03	; 3
    30a4:	0c 94 1d 18 	jmp	0x303a	; 0x303a <_ZN9MD_TCS23013setFrequency2Eh>

000030a8 <_ZN9MD_TCS2306getRGBEP9colorData>:
    30a8:	dc 01       	movw	r26, r24
    30aa:	fb 01       	movw	r30, r22
    30ac:	30 97       	sbiw	r30, 0x00	; 0
    30ae:	59 f0       	breq	.+22     	; 0x30c6 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    30b0:	9b 96       	adiw	r26, 0x2b	; 43
    30b2:	8c 91       	ld	r24, X
    30b4:	9b 97       	sbiw	r26, 0x2b	; 43
    30b6:	80 83       	st	Z, r24
    30b8:	9c 96       	adiw	r26, 0x2c	; 44
    30ba:	8c 91       	ld	r24, X
    30bc:	9c 97       	sbiw	r26, 0x2c	; 44
    30be:	81 83       	std	Z+1, r24	; 0x01
    30c0:	9d 96       	adiw	r26, 0x2d	; 45
    30c2:	8c 91       	ld	r24, X
    30c4:	82 83       	std	Z+2, r24	; 0x02
    30c6:	08 95       	ret

000030c8 <_ZN9MD_TCS23017RGBTransformationEv>:
    30c8:	4f 92       	push	r4
    30ca:	5f 92       	push	r5
    30cc:	6f 92       	push	r6
    30ce:	7f 92       	push	r7
    30d0:	8f 92       	push	r8
    30d2:	9f 92       	push	r9
    30d4:	af 92       	push	r10
    30d6:	bf 92       	push	r11
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	8c 01       	movw	r16, r24
    30e8:	09 5f       	subi	r16, 0xF9	; 249
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	ec 01       	movw	r28, r24
    30ee:	7c 01       	movw	r14, r24
    30f0:	83 e1       	ldi	r24, 0x13	; 19
    30f2:	e8 0e       	add	r14, r24
    30f4:	f1 1c       	adc	r15, r1
    30f6:	dd 24       	eor	r13, r13
    30f8:	da 94       	dec	r13
    30fa:	f8 01       	movw	r30, r16
    30fc:	d8 01       	movw	r26, r16
    30fe:	8d 90       	ld	r8, X+
    3100:	9d 90       	ld	r9, X+
    3102:	ad 90       	ld	r10, X+
    3104:	bd 90       	ld	r11, X+
    3106:	8d 01       	movw	r16, r26
    3108:	80 8d       	ldd	r24, Z+24	; 0x18
    310a:	91 8d       	ldd	r25, Z+25	; 0x19
    310c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    310e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3110:	9c 01       	movw	r18, r24
    3112:	ad 01       	movw	r20, r26
    3114:	28 19       	sub	r18, r8
    3116:	39 09       	sbc	r19, r9
    3118:	4a 09       	sbc	r20, r10
    311a:	5b 09       	sbc	r21, r11
    311c:	af ef       	ldi	r26, 0xFF	; 255
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	0e 94 bd 1c 	call	0x397a	; 0x397a <__muluhisi3>
    3124:	f8 01       	movw	r30, r16
    3126:	40 84       	ldd	r4, Z+8	; 0x08
    3128:	51 84       	ldd	r5, Z+9	; 0x09
    312a:	62 84       	ldd	r6, Z+10	; 0x0a
    312c:	73 84       	ldd	r7, Z+11	; 0x0b
    312e:	a3 01       	movw	r20, r6
    3130:	92 01       	movw	r18, r4
    3132:	28 19       	sub	r18, r8
    3134:	39 09       	sbc	r19, r9
    3136:	4a 09       	sbc	r20, r10
    3138:	5b 09       	sbc	r21, r11
    313a:	0e 94 98 1c 	call	0x3930	; 0x3930 <__divmodsi4>
    313e:	57 ff       	sbrs	r21, 7
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    3142:	1b a6       	std	Y+43, r1	; 0x2b
    3144:	09 c0       	rjmp	.+18     	; 0x3158 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3146:	2f 3f       	cpi	r18, 0xFF	; 255
    3148:	31 05       	cpc	r19, r1
    314a:	41 05       	cpc	r20, r1
    314c:	51 05       	cpc	r21, r1
    314e:	19 f0       	breq	.+6      	; 0x3156 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3150:	14 f0       	brlt	.+4      	; 0x3156 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3152:	db a6       	std	Y+43, r13	; 0x2b
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    3156:	2b a7       	std	Y+43, r18	; 0x2b
    3158:	21 96       	adiw	r28, 0x01	; 1
    315a:	0e 15       	cp	r16, r14
    315c:	1f 05       	cpc	r17, r15
    315e:	69 f6       	brne	.-102    	; 0x30fa <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	df 90       	pop	r13
    316e:	bf 90       	pop	r11
    3170:	af 90       	pop	r10
    3172:	9f 90       	pop	r9
    3174:	8f 90       	pop	r8
    3176:	7f 90       	pop	r7
    3178:	6f 90       	pop	r6
    317a:	5f 90       	pop	r5
    317c:	4f 90       	pop	r4
    317e:	08 95       	ret

00003180 <_ZN9MD_TCS2307readFSMEh>:
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	8c 01       	movw	r16, r24
    318a:	c6 2f       	mov	r28, r22
    318c:	61 30       	cpi	r22, 0x01	; 1
    318e:	49 f0       	breq	.+18     	; 0x31a2 <_ZN9MD_TCS2307readFSMEh+0x22>
    3190:	18 f0       	brcs	.+6      	; 0x3198 <_ZN9MD_TCS2307readFSMEh+0x18>
    3192:	62 30       	cpi	r22, 0x02	; 2
    3194:	d9 f0       	breq	.+54     	; 0x31cc <_ZN9MD_TCS2307readFSMEh+0x4c>
    3196:	4c c0       	rjmp	.+152    	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    3198:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    319c:	61 e0       	ldi	r22, 0x01	; 1
    319e:	0e 94 43 18 	call	0x3086	; 0x3086 <_ZN9MD_TCS2309setEnableEb>
    31a2:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	e1 5c       	subi	r30, 0xC1	; 193
    31aa:	fd 4f       	sbci	r31, 0xFD	; 253
    31ac:	60 81       	ld	r22, Z
    31ae:	c8 01       	movw	r24, r16
    31b0:	0e 94 f7 17 	call	0x2fee	; 0x2fee <_ZN9MD_TCS2309setFilterEh>
    31b4:	f8 01       	movw	r30, r16
    31b6:	65 81       	ldd	r22, Z+5	; 0x05
    31b8:	70 e0       	ldi	r23, 0x00	; 0
    31ba:	88 ee       	ldi	r24, 0xE8	; 232
    31bc:	93 e0       	ldi	r25, 0x03	; 3
    31be:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__divmodhi4>
    31c2:	cb 01       	movw	r24, r22
    31c4:	0e 94 47 1b 	call	0x368e	; 0x368e <_ZN14FreqCountClass5beginEj>
    31c8:	c2 e0       	ldi	r28, 0x02	; 2
    31ca:	32 c0       	rjmp	.+100    	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    31cc:	0e 94 bf 1b 	call	0x377e	; 0x377e <_ZN14FreqCountClass9availableEv>
    31d0:	88 23       	and	r24, r24
    31d2:	71 f1       	breq	.+92     	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    31d4:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	8e 0f       	add	r24, r30
    31dc:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	e1 5c       	subi	r30, 0xC1	; 193
    31e4:	fd 4f       	sbci	r31, 0xFD	; 253
    31e6:	c0 81       	ld	r28, Z
    31e8:	d0 e0       	ldi	r29, 0x00	; 0
    31ea:	0e 94 c2 1b 	call	0x3784	; 0x3784 <_ZN14FreqCountClass4readEv>
    31ee:	9b 01       	movw	r18, r22
    31f0:	ac 01       	movw	r20, r24
    31f2:	cc 0f       	add	r28, r28
    31f4:	dd 1f       	adc	r29, r29
    31f6:	cc 0f       	add	r28, r28
    31f8:	dd 1f       	adc	r29, r29
    31fa:	c0 0f       	add	r28, r16
    31fc:	d1 1f       	adc	r29, r17
    31fe:	f8 01       	movw	r30, r16
    3200:	a5 81       	ldd	r26, Z+5	; 0x05
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	0e 94 bd 1c 	call	0x397a	; 0x397a <__muluhisi3>
    3208:	6f 8f       	std	Y+31, r22	; 0x1f
    320a:	78 a3       	std	Y+32, r23	; 0x20
    320c:	89 a3       	std	Y+33, r24	; 0x21
    320e:	9a a3       	std	Y+34, r25	; 0x22
    3210:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3214:	83 30       	cpi	r24, 0x03	; 3
    3216:	58 f0       	brcs	.+22     	; 0x322e <_ZN9MD_TCS2307readFSMEh+0xae>
    3218:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <_ZN14FreqCountClass3endEv>
    321c:	60 e0       	ldi	r22, 0x00	; 0
    321e:	c8 01       	movw	r24, r16
    3220:	0e 94 43 18 	call	0x3086	; 0x3086 <_ZN9MD_TCS2309setEnableEb>
    3224:	c8 01       	movw	r24, r16
    3226:	0e 94 64 18 	call	0x30c8	; 0x30c8 <_ZN9MD_TCS23017RGBTransformationEv>
    322a:	c0 e0       	ldi	r28, 0x00	; 0
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <_ZN9MD_TCS2307readFSMEh+0xb0>
    322e:	c1 e0       	ldi	r28, 0x01	; 1
    3230:	8c 2f       	mov	r24, r28
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	08 95       	ret

0000323c <_ZN9MD_TCS2304readEv>:
    323c:	cf 93       	push	r28
    323e:	df 93       	push	r29
    3240:	ec 01       	movw	r28, r24
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN9MD_TCS2307readFSMEh>
    3248:	8e a7       	std	Y+46, r24	; 0x2e
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	08 95       	ret

00003250 <_ZN9MD_TCS2309availableEv>:
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	ec 01       	movw	r28, r24
    3256:	6e a5       	ldd	r22, Y+46	; 0x2e
    3258:	0e 94 c0 18 	call	0x3180	; 0x3180 <_ZN9MD_TCS2307readFSMEh>
    325c:	98 2f       	mov	r25, r24
    325e:	8e a7       	std	Y+46, r24	; 0x2e
    3260:	81 e0       	ldi	r24, 0x01	; 1
    3262:	91 11       	cpse	r25, r1
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	08 95       	ret

0000326c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    326c:	08 95       	ret

0000326e <pvPortMalloc>:
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	ec 01       	movw	r28, r24
    3274:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    3278:	ce 01       	movw	r24, r28
    327a:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <malloc>
    327e:	ec 01       	movw	r28, r24
    3280:	0e 94 95 13 	call	0x272a	; 0x272a <xTaskResumeAll>
    3284:	20 97       	sbiw	r28, 0x00	; 0
    3286:	11 f4       	brne	.+4      	; 0x328c <pvPortMalloc+0x1e>
    3288:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <vApplicationMallocFailedHook>
    328c:	ce 01       	movw	r24, r28
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	08 95       	ret

00003294 <vPortFree>:
    3294:	cf 93       	push	r28
    3296:	df 93       	push	r29
    3298:	00 97       	sbiw	r24, 0x00	; 0
    329a:	51 f0       	breq	.+20     	; 0x32b0 <vPortFree+0x1c>
    329c:	ec 01       	movw	r28, r24
    329e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <vTaskSuspendAll>
    32a2:	ce 01       	movw	r24, r28
    32a4:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <free>
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	0c 94 95 13 	jmp	0x272a	; 0x272a <xTaskResumeAll>
    32b0:	df 91       	pop	r29
    32b2:	cf 91       	pop	r28
    32b4:	08 95       	ret

000032b6 <vListInitialise>:
    32b6:	fc 01       	movw	r30, r24
    32b8:	03 96       	adiw	r24, 0x03	; 3
    32ba:	92 83       	std	Z+2, r25	; 0x02
    32bc:	81 83       	std	Z+1, r24	; 0x01
    32be:	2f ef       	ldi	r18, 0xFF	; 255
    32c0:	3f ef       	ldi	r19, 0xFF	; 255
    32c2:	34 83       	std	Z+4, r19	; 0x04
    32c4:	23 83       	std	Z+3, r18	; 0x03
    32c6:	96 83       	std	Z+6, r25	; 0x06
    32c8:	85 83       	std	Z+5, r24	; 0x05
    32ca:	90 87       	std	Z+8, r25	; 0x08
    32cc:	87 83       	std	Z+7, r24	; 0x07
    32ce:	10 82       	st	Z, r1
    32d0:	08 95       	ret

000032d2 <vListInitialiseItem>:
    32d2:	fc 01       	movw	r30, r24
    32d4:	11 86       	std	Z+9, r1	; 0x09
    32d6:	10 86       	std	Z+8, r1	; 0x08
    32d8:	08 95       	ret

000032da <vListInsertEnd>:
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	9c 01       	movw	r18, r24
    32e0:	fb 01       	movw	r30, r22
    32e2:	dc 01       	movw	r26, r24
    32e4:	11 96       	adiw	r26, 0x01	; 1
    32e6:	cd 91       	ld	r28, X+
    32e8:	dc 91       	ld	r29, X
    32ea:	12 97       	sbiw	r26, 0x02	; 2
    32ec:	d3 83       	std	Z+3, r29	; 0x03
    32ee:	c2 83       	std	Z+2, r28	; 0x02
    32f0:	8c 81       	ldd	r24, Y+4	; 0x04
    32f2:	9d 81       	ldd	r25, Y+5	; 0x05
    32f4:	95 83       	std	Z+5, r25	; 0x05
    32f6:	84 83       	std	Z+4, r24	; 0x04
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	9d 81       	ldd	r25, Y+5	; 0x05
    32fc:	dc 01       	movw	r26, r24
    32fe:	13 96       	adiw	r26, 0x03	; 3
    3300:	7c 93       	st	X, r23
    3302:	6e 93       	st	-X, r22
    3304:	12 97       	sbiw	r26, 0x02	; 2
    3306:	7d 83       	std	Y+5, r23	; 0x05
    3308:	6c 83       	std	Y+4, r22	; 0x04
    330a:	31 87       	std	Z+9, r19	; 0x09
    330c:	20 87       	std	Z+8, r18	; 0x08
    330e:	f9 01       	movw	r30, r18
    3310:	80 81       	ld	r24, Z
    3312:	8f 5f       	subi	r24, 0xFF	; 255
    3314:	80 83       	st	Z, r24
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	08 95       	ret

0000331c <vListInsert>:
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	8c 01       	movw	r16, r24
    3326:	fb 01       	movw	r30, r22
    3328:	80 81       	ld	r24, Z
    332a:	91 81       	ldd	r25, Z+1	; 0x01
    332c:	8f 3f       	cpi	r24, 0xFF	; 255
    332e:	2f ef       	ldi	r18, 0xFF	; 255
    3330:	92 07       	cpc	r25, r18
    3332:	21 f4       	brne	.+8      	; 0x333c <vListInsert+0x20>
    3334:	e8 01       	movw	r28, r16
    3336:	af 81       	ldd	r26, Y+7	; 0x07
    3338:	b8 85       	ldd	r27, Y+8	; 0x08
    333a:	0e c0       	rjmp	.+28     	; 0x3358 <vListInsert+0x3c>
    333c:	d8 01       	movw	r26, r16
    333e:	13 96       	adiw	r26, 0x03	; 3
    3340:	12 96       	adiw	r26, 0x02	; 2
    3342:	2d 91       	ld	r18, X+
    3344:	3c 91       	ld	r19, X
    3346:	13 97       	sbiw	r26, 0x03	; 3
    3348:	e9 01       	movw	r28, r18
    334a:	48 81       	ld	r20, Y
    334c:	59 81       	ldd	r21, Y+1	; 0x01
    334e:	84 17       	cp	r24, r20
    3350:	95 07       	cpc	r25, r21
    3352:	10 f0       	brcs	.+4      	; 0x3358 <vListInsert+0x3c>
    3354:	d9 01       	movw	r26, r18
    3356:	f4 cf       	rjmp	.-24     	; 0x3340 <vListInsert+0x24>
    3358:	12 96       	adiw	r26, 0x02	; 2
    335a:	8d 91       	ld	r24, X+
    335c:	9c 91       	ld	r25, X
    335e:	13 97       	sbiw	r26, 0x03	; 3
    3360:	93 83       	std	Z+3, r25	; 0x03
    3362:	82 83       	std	Z+2, r24	; 0x02
    3364:	ec 01       	movw	r28, r24
    3366:	fd 83       	std	Y+5, r31	; 0x05
    3368:	ec 83       	std	Y+4, r30	; 0x04
    336a:	b5 83       	std	Z+5, r27	; 0x05
    336c:	a4 83       	std	Z+4, r26	; 0x04
    336e:	13 96       	adiw	r26, 0x03	; 3
    3370:	fc 93       	st	X, r31
    3372:	ee 93       	st	-X, r30
    3374:	12 97       	sbiw	r26, 0x02	; 2
    3376:	11 87       	std	Z+9, r17	; 0x09
    3378:	00 87       	std	Z+8, r16	; 0x08
    337a:	f8 01       	movw	r30, r16
    337c:	80 81       	ld	r24, Z
    337e:	8f 5f       	subi	r24, 0xFF	; 255
    3380:	80 83       	st	Z, r24
    3382:	df 91       	pop	r29
    3384:	cf 91       	pop	r28
    3386:	1f 91       	pop	r17
    3388:	0f 91       	pop	r16
    338a:	08 95       	ret

0000338c <uxListRemove>:
    338c:	cf 93       	push	r28
    338e:	df 93       	push	r29
    3390:	fc 01       	movw	r30, r24
    3392:	a0 85       	ldd	r26, Z+8	; 0x08
    3394:	b1 85       	ldd	r27, Z+9	; 0x09
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	24 81       	ldd	r18, Z+4	; 0x04
    339c:	35 81       	ldd	r19, Z+5	; 0x05
    339e:	ec 01       	movw	r28, r24
    33a0:	3d 83       	std	Y+5, r19	; 0x05
    33a2:	2c 83       	std	Y+4, r18	; 0x04
    33a4:	c4 81       	ldd	r28, Z+4	; 0x04
    33a6:	d5 81       	ldd	r29, Z+5	; 0x05
    33a8:	9b 83       	std	Y+3, r25	; 0x03
    33aa:	8a 83       	std	Y+2, r24	; 0x02
    33ac:	11 96       	adiw	r26, 0x01	; 1
    33ae:	8d 91       	ld	r24, X+
    33b0:	9c 91       	ld	r25, X
    33b2:	12 97       	sbiw	r26, 0x02	; 2
    33b4:	e8 17       	cp	r30, r24
    33b6:	f9 07       	cpc	r31, r25
    33b8:	21 f4       	brne	.+8      	; 0x33c2 <uxListRemove+0x36>
    33ba:	12 96       	adiw	r26, 0x02	; 2
    33bc:	dc 93       	st	X, r29
    33be:	ce 93       	st	-X, r28
    33c0:	11 97       	sbiw	r26, 0x01	; 1
    33c2:	11 86       	std	Z+9, r1	; 0x09
    33c4:	10 86       	std	Z+8, r1	; 0x08
    33c6:	8c 91       	ld	r24, X
    33c8:	81 50       	subi	r24, 0x01	; 1
    33ca:	8c 93       	st	X, r24
    33cc:	8c 91       	ld	r24, X
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	08 95       	ret

000033d4 <pxPortInitialiseStack>:
=======
    3ca2:	2f ef       	ldi	r18, 0xFF	; 255
    3ca4:	80 e7       	ldi	r24, 0x70	; 112
    3ca6:	92 e0       	ldi	r25, 0x02	; 2
    3ca8:	21 50       	subi	r18, 0x01	; 1
    3caa:	80 40       	sbci	r24, 0x00	; 0
    3cac:	90 40       	sbci	r25, 0x00	; 0
    3cae:	e1 f7       	brne	.-8      	; 0x3ca8 <vApplicationMallocFailedHook+0xa>
    3cb0:	00 c0       	rjmp	.+0      	; 0x3cb2 <vApplicationMallocFailedHook+0x14>
    3cb2:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED fast blink.
    3cb4:	1d 9a       	sbi	0x03, 5	; 3
    3cb6:	f5 cf       	rjmp	.-22     	; 0x3ca2 <vApplicationMallocFailedHook+0x4>

00003cb8 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    3cb8:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    3cba:	2d 9a       	sbi	0x05, 5	; 5
    3cbc:	2f ef       	ldi	r18, 0xFF	; 255
    3cbe:	87 ea       	ldi	r24, 0xA7	; 167
    3cc0:	91 e6       	ldi	r25, 0x61	; 97
    3cc2:	21 50       	subi	r18, 0x01	; 1
    3cc4:	80 40       	sbci	r24, 0x00	; 0
    3cc6:	90 40       	sbci	r25, 0x00	; 0
    3cc8:	e1 f7       	brne	.-8      	; 0x3cc2 <vApplicationStackOverflowHook+0xa>
    3cca:	00 c0       	rjmp	.+0      	; 0x3ccc <vApplicationStackOverflowHook+0x14>
    3ccc:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED slow blink.
    3cce:	1d 9a       	sbi	0x03, 5	; 3
    3cd0:	f5 cf       	rjmp	.-22     	; 0x3cbc <vApplicationStackOverflowHook+0x4>

00003cd2 <_ZN9MD_TCS23010initialiseEv>:
  }
  FreqCount.end();      // stop
  DUMP("VALUE ", FreqCount.read());

  return(FreqCount.read() * _readDiv);
}
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	8f ef       	ldi	r24, 0xFF	; 255
    3cda:	80 83       	st	Z, r24
    3cdc:	81 83       	std	Z+1, r24	; 0x01
    3cde:	82 83       	std	Z+2, r24	; 0x02
    3ce0:	83 83       	std	Z+3, r24	; 0x03
    3ce2:	84 83       	std	Z+4, r24	; 0x04
    3ce4:	8a e0       	ldi	r24, 0x0A	; 10
    3ce6:	85 83       	std	Z+5, r24	; 0x05
    3ce8:	16 82       	std	Z+6, r1	; 0x06
    3cea:	df 01       	movw	r26, r30
    3cec:	17 96       	adiw	r26, 0x07	; 7
    3cee:	73 96       	adiw	r30, 0x13	; 19
    3cf0:	00 e7       	ldi	r16, 0x70	; 112
    3cf2:	17 e1       	ldi	r17, 0x17	; 23
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	48 ed       	ldi	r20, 0xD8	; 216
    3cfa:	56 ed       	ldi	r21, 0xD6	; 214
    3cfc:	60 e0       	ldi	r22, 0x00	; 0
    3cfe:	70 e0       	ldi	r23, 0x00	; 0
    3d00:	0d 93       	st	X+, r16
    3d02:	1d 93       	st	X+, r17
    3d04:	2d 93       	st	X+, r18
    3d06:	3d 93       	st	X+, r19
    3d08:	18 96       	adiw	r26, 0x08	; 8
    3d0a:	4d 93       	st	X+, r20
    3d0c:	5d 93       	st	X+, r21
    3d0e:	6d 93       	st	X+, r22
    3d10:	7c 93       	st	X, r23
    3d12:	1b 97       	sbiw	r26, 0x0b	; 11
    3d14:	ae 17       	cp	r26, r30
    3d16:	bf 07       	cpc	r27, r31
    3d18:	99 f7       	brne	.-26     	; 0x3d00 <_ZN9MD_TCS23010initialiseEv+0x2e>
    3d1a:	1f 91       	pop	r17
    3d1c:	0f 91       	pop	r16
    3d1e:	08 95       	ret

00003d20 <_ZN9MD_TCS230C1Ehhh>:
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	ec 01       	movw	r28, r24
    3d2c:	f6 2e       	mov	r15, r22
    3d2e:	04 2f       	mov	r16, r20
    3d30:	12 2f       	mov	r17, r18
    3d32:	0e 94 69 1e 	call	0x3cd2	; 0x3cd2 <_ZN9MD_TCS23010initialiseEv>
    3d36:	fb 82       	std	Y+3, r15	; 0x03
    3d38:	0c 83       	std	Y+4, r16	; 0x04
    3d3a:	18 83       	st	Y, r17
    3d3c:	df 91       	pop	r29
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	ff 90       	pop	r15
    3d46:	08 95       	ret

00003d48 <_ZN9MD_TCS230D1Ev>:
    3d48:	08 95       	ret

00003d4a <_ZN9MD_TCS2309setFilterEh>:
    3d4a:	cf 93       	push	r28
    3d4c:	df 93       	push	r29
    3d4e:	ec 01       	movw	r28, r24
    3d50:	8b 81       	ldd	r24, Y+3	; 0x03
    3d52:	8f 3f       	cpi	r24, 0xFF	; 255
    3d54:	e9 f0       	breq	.+58     	; 0x3d90 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d56:	9c 81       	ldd	r25, Y+4	; 0x04
    3d58:	9f 3f       	cpi	r25, 0xFF	; 255
    3d5a:	d1 f0       	breq	.+52     	; 0x3d90 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d5c:	61 30       	cpi	r22, 0x01	; 1
    3d5e:	49 f0       	breq	.+18     	; 0x3d72 <_ZN9MD_TCS2309setFilterEh+0x28>
    3d60:	30 f0       	brcs	.+12     	; 0x3d6e <_ZN9MD_TCS2309setFilterEh+0x24>
    3d62:	62 30       	cpi	r22, 0x02	; 2
    3d64:	41 f0       	breq	.+16     	; 0x3d76 <_ZN9MD_TCS2309setFilterEh+0x2c>
    3d66:	63 30       	cpi	r22, 0x03	; 3
    3d68:	99 f4       	brne	.+38     	; 0x3d90 <_ZN9MD_TCS2309setFilterEh+0x46>
    3d6a:	61 e0       	ldi	r22, 0x01	; 1
    3d6c:	09 c0       	rjmp	.+18     	; 0x3d80 <_ZN9MD_TCS2309setFilterEh+0x36>
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	07 c0       	rjmp	.+14     	; 0x3d80 <_ZN9MD_TCS2309setFilterEh+0x36>
    3d72:	61 e0       	ldi	r22, 0x01	; 1
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <_ZN9MD_TCS2309setFilterEh+0x2e>
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
    3d7c:	61 e0       	ldi	r22, 0x01	; 1
    3d7e:	03 c0       	rjmp	.+6      	; 0x3d86 <_ZN9MD_TCS2309setFilterEh+0x3c>
    3d80:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
    3d84:	60 e0       	ldi	r22, 0x00	; 0
    3d86:	8c 81       	ldd	r24, Y+4	; 0x04
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	0c 94 b7 12 	jmp	0x256e	; 0x256e <digitalWrite>
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	08 95       	ret

00003d96 <_ZN9MD_TCS23013setFrequency2Eh>:
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	ec 01       	movw	r28, r24
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3da0:	e9 f0       	breq	.+58     	; 0x3ddc <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3da2:	9a 81       	ldd	r25, Y+2	; 0x02
    3da4:	9f 3f       	cpi	r25, 0xFF	; 255
    3da6:	d1 f0       	breq	.+52     	; 0x3ddc <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3da8:	61 30       	cpi	r22, 0x01	; 1
    3daa:	49 f0       	breq	.+18     	; 0x3dbe <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3dac:	30 f0       	brcs	.+12     	; 0x3dba <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3dae:	62 30       	cpi	r22, 0x02	; 2
    3db0:	41 f0       	breq	.+16     	; 0x3dc2 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    3db2:	63 30       	cpi	r22, 0x03	; 3
    3db4:	99 f4       	brne	.+38     	; 0x3ddc <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3db6:	60 e0       	ldi	r22, 0x00	; 0
    3db8:	09 c0       	rjmp	.+18     	; 0x3dcc <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	03 c0       	rjmp	.+6      	; 0x3dc4 <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3dbe:	61 e0       	ldi	r22, 0x01	; 1
    3dc0:	05 c0       	rjmp	.+10     	; 0x3dcc <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	03 c0       	rjmp	.+6      	; 0x3dd2 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    3dcc:	0e 94 b7 12 	call	0x256e	; 0x256e <digitalWrite>
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	df 91       	pop	r29
    3dd6:	cf 91       	pop	r28
    3dd8:	0c 94 b7 12 	jmp	0x256e	; 0x256e <digitalWrite>
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	08 95       	ret

00003de2 <_ZN9MD_TCS2309setEnableEb>:
    3de2:	fc 01       	movw	r30, r24
    3de4:	20 81       	ld	r18, Z
    3de6:	2f 3f       	cpi	r18, 0xFF	; 255
    3de8:	29 f0       	breq	.+10     	; 0x3df4 <_ZN9MD_TCS2309setEnableEb+0x12>
    3dea:	91 e0       	ldi	r25, 0x01	; 1
    3dec:	69 27       	eor	r22, r25
    3dee:	82 2f       	mov	r24, r18
    3df0:	0c 94 b7 12 	jmp	0x256e	; 0x256e <digitalWrite>
    3df4:	66 23       	and	r22, r22
    3df6:	19 f0       	breq	.+6      	; 0x3dfe <_ZN9MD_TCS2309setEnableEb+0x1c>
    3df8:	fc 01       	movw	r30, r24
    3dfa:	66 81       	ldd	r22, Z+6	; 0x06
    3dfc:	01 c0       	rjmp	.+2      	; 0x3e00 <_ZN9MD_TCS2309setEnableEb+0x1e>
    3dfe:	63 e0       	ldi	r22, 0x03	; 3
    3e00:	0c 94 cb 1e 	jmp	0x3d96	; 0x3d96 <_ZN9MD_TCS23013setFrequency2Eh>

00003e04 <_ZN9MD_TCS2306getRGBEP9colorData>:
    3e04:	dc 01       	movw	r26, r24
    3e06:	fb 01       	movw	r30, r22
    3e08:	30 97       	sbiw	r30, 0x00	; 0
    3e0a:	59 f0       	breq	.+22     	; 0x3e22 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    3e0c:	9b 96       	adiw	r26, 0x2b	; 43
    3e0e:	8c 91       	ld	r24, X
    3e10:	9b 97       	sbiw	r26, 0x2b	; 43
    3e12:	80 83       	st	Z, r24
    3e14:	9c 96       	adiw	r26, 0x2c	; 44
    3e16:	8c 91       	ld	r24, X
    3e18:	9c 97       	sbiw	r26, 0x2c	; 44
    3e1a:	81 83       	std	Z+1, r24	; 0x01
    3e1c:	9d 96       	adiw	r26, 0x2d	; 45
    3e1e:	8c 91       	ld	r24, X
    3e20:	82 83       	std	Z+2, r24	; 0x02
    3e22:	08 95       	ret

00003e24 <_ZN9MD_TCS23017RGBTransformationEv>:
  return(s);
}

void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
    3e24:	4f 92       	push	r4
    3e26:	5f 92       	push	r5
    3e28:	6f 92       	push	r6
    3e2a:	7f 92       	push	r7
    3e2c:	8f 92       	push	r8
    3e2e:	9f 92       	push	r9
    3e30:	af 92       	push	r10
    3e32:	bf 92       	push	r11
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	8c 01       	movw	r16, r24
    3e44:	09 5f       	subi	r16, 0xF9	; 249
    3e46:	1f 4f       	sbci	r17, 0xFF	; 255
    3e48:	ec 01       	movw	r28, r24
    3e4a:	7c 01       	movw	r14, r24
    3e4c:	83 e1       	ldi	r24, 0x13	; 19
    3e4e:	e8 0e       	add	r14, r24
    3e50:	f1 1c       	adc	r15, r1
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    x /= (_Fw.value[i] - _Fd.value[i]);

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    3e52:	dd 24       	eor	r13, r13
    3e54:	da 94       	dec	r13
    3e56:	f8 01       	movw	r30, r16
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
  {
    x = (_Fo.value[i] - _Fd.value[i]) * 255;
    3e58:	d8 01       	movw	r26, r16
    3e5a:	8d 90       	ld	r8, X+
    3e5c:	9d 90       	ld	r9, X+
    3e5e:	ad 90       	ld	r10, X+
    3e60:	bd 90       	ld	r11, X+
    3e62:	8d 01       	movw	r16, r26
    3e64:	80 8d       	ldd	r24, Z+24	; 0x18
    3e66:	91 8d       	ldd	r25, Z+25	; 0x19
    3e68:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3e6a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3e6c:	9c 01       	movw	r18, r24
    3e6e:	ad 01       	movw	r20, r26
    3e70:	28 19       	sub	r18, r8
    3e72:	39 09       	sbc	r19, r9
    3e74:	4a 09       	sbc	r20, r10
    3e76:	5b 09       	sbc	r21, r11
    3e78:	af ef       	ldi	r26, 0xFF	; 255
    3e7a:	b0 e0       	ldi	r27, 0x00	; 0
    3e7c:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <__muluhisi3>
    x /= (_Fw.value[i] - _Fd.value[i]);
    3e80:	f8 01       	movw	r30, r16
    3e82:	40 84       	ldd	r4, Z+8	; 0x08
    3e84:	51 84       	ldd	r5, Z+9	; 0x09
    3e86:	62 84       	ldd	r6, Z+10	; 0x0a
    3e88:	73 84       	ldd	r7, Z+11	; 0x0b
    3e8a:	a3 01       	movw	r20, r6
    3e8c:	92 01       	movw	r18, r4
    3e8e:	28 19       	sub	r18, r8
    3e90:	39 09       	sbc	r19, r9
    3e92:	4a 09       	sbc	r20, r10
    3e94:	5b 09       	sbc	r21, r11
    3e96:	0e 94 46 23 	call	0x468c	; 0x468c <__divmodsi4>

    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    3e9a:	57 ff       	sbrs	r21, 7
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    3e9e:	1b a6       	std	Y+43, r1	; 0x2b
    3ea0:	09 c0       	rjmp	.+18     	; 0x3eb4 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else if (x > 255) _rgb.value[i] = 255;
    3ea2:	2f 3f       	cpi	r18, 0xFF	; 255
    3ea4:	31 05       	cpc	r19, r1
    3ea6:	41 05       	cpc	r20, r1
    3ea8:	51 05       	cpc	r21, r1
    3eaa:	19 f0       	breq	.+6      	; 0x3eb2 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3eac:	14 f0       	brlt	.+4      	; 0x3eb2 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    3eae:	db a6       	std	Y+43, r13	; 0x2b
    3eb0:	01 c0       	rjmp	.+2      	; 0x3eb4 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    else _rgb.value[i] = x;
    3eb2:	2b a7       	std	Y+43, r18	; 0x2b
    3eb4:	21 96       	adiw	r28, 0x01	; 1
void MD_TCS230::RGBTransformation(void)
// Exploiting linear relationship to remap the range 
{
  int32_t x;

  for (uint8_t i=0; i<RGB_SIZE; i++)
    3eb6:	0e 15       	cp	r16, r14
    3eb8:	1f 05       	cpc	r17, r15
    3eba:	69 f6       	brne	.-102    	; 0x3e56 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    // copy results back into the global structures
    if (x < 0) _rgb.value[i] = 0; 
    else if (x > 255) _rgb.value[i] = 255;
    else _rgb.value[i] = x;
  }
}
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	1f 91       	pop	r17
    3ec2:	0f 91       	pop	r16
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	df 90       	pop	r13
    3eca:	bf 90       	pop	r11
    3ecc:	af 90       	pop	r10
    3ece:	9f 90       	pop	r9
    3ed0:	8f 90       	pop	r8
    3ed2:	7f 90       	pop	r7
    3ed4:	6f 90       	pop	r6
    3ed6:	5f 90       	pop	r5
    3ed8:	4f 90       	pop	r4
    3eda:	08 95       	ret

00003edc <_ZN9MD_TCS2307readFSMEh>:
  return(_readState == 0);
}

uint8_t MD_TCS230::readFSM(uint8_t s)
// Finite State Machine to read a value (internal function)
{
    3edc:	0f 93       	push	r16
    3ede:	1f 93       	push	r17
    3ee0:	cf 93       	push	r28
    3ee2:	df 93       	push	r29
    3ee4:	8c 01       	movw	r16, r24
    3ee6:	c6 2f       	mov	r28, r22
  static const uint8_t seq[] = { TCS230_RGB_R, TCS230_RGB_G, TCS230_RGB_B };
  static uint8_t       currCol;  // index for seq above

  switch(s)
    3ee8:	61 30       	cpi	r22, 0x01	; 1
    3eea:	49 f0       	breq	.+18     	; 0x3efe <_ZN9MD_TCS2307readFSMEh+0x22>
    3eec:	18 f0       	brcs	.+6      	; 0x3ef4 <_ZN9MD_TCS2307readFSMEh+0x18>
    3eee:	62 30       	cpi	r22, 0x02	; 2
    3ef0:	d9 f0       	breq	.+54     	; 0x3f28 <_ZN9MD_TCS2307readFSMEh+0x4c>
    3ef2:	4c c0       	rjmp	.+152    	; 0x3f8c <_ZN9MD_TCS2307readFSMEh+0xb0>
  {
  case 0: // enable the hardware for reading
    DUMPS("\n0");
    currCol = 0;  // RGB_R but we don't care
    3ef4:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    setEnable(true);
    3ef8:	61 e0       	ldi	r22, 0x01	; 1
    3efa:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <_ZN9MD_TCS2309setEnableEb>
    s++;
    // fall through to the next state

  case 1: // select a filter and start a reading
    DUMPS("\n1");
    setFilter(seq[currCol]);
    3efe:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	e7 5c       	subi	r30, 0xC7	; 199
    3f06:	fd 4f       	sbci	r31, 0xFD	; 253
    3f08:	60 81       	ld	r22, Z
    3f0a:	c8 01       	movw	r24, r16
    3f0c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <_ZN9MD_TCS2309setFilterEh>
    FreqCount.begin(1000/_readDiv);
    3f10:	f8 01       	movw	r30, r16
    3f12:	65 81       	ldd	r22, Z+5	; 0x05
    3f14:	70 e0       	ldi	r23, 0x00	; 0
    3f16:	88 ee       	ldi	r24, 0xE8	; 232
    3f18:	93 e0       	ldi	r25, 0x03	; 3
    3f1a:	0e 94 10 23 	call	0x4620	; 0x4620 <__divmodhi4>
    3f1e:	cb 01       	movw	r24, r22
    3f20:	0e 94 f5 21 	call	0x43ea	; 0x43ea <_ZN14FreqCountClass5beginEj>
    s++;
    3f24:	c2 e0       	ldi	r28, 0x02	; 2
    break;
    3f26:	32 c0       	rjmp	.+100    	; 0x3f8c <_ZN9MD_TCS2307readFSMEh+0xb0>

  case 2: // see if a value is available
    DUMPS("2");
    if (FreqCount.available())
    3f28:	0e 94 6d 22 	call	0x44da	; 0x44da <_ZN14FreqCountClass9availableEv>
    3f2c:	88 23       	and	r24, r24
    3f2e:	71 f1       	breq	.+92     	; 0x3f8c <_ZN9MD_TCS2307readFSMEh+0xb0>
    {
      DUMP(" VALUE ", FreqCount.read());
      // read the value and save it 
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;
    3f30:	e0 91 9c 04 	lds	r30, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	8e 0f       	add	r24, r30
    3f38:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	e7 5c       	subi	r30, 0xC7	; 199
    3f40:	fd 4f       	sbci	r31, 0xFD	; 253
    3f42:	c0 81       	ld	r28, Z
    3f44:	d0 e0       	ldi	r29, 0x00	; 0
    3f46:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_ZN14FreqCountClass4readEv>
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	cc 0f       	add	r28, r28
    3f50:	dd 1f       	adc	r29, r29
    3f52:	cc 0f       	add	r28, r28
    3f54:	dd 1f       	adc	r29, r29
    3f56:	c0 0f       	add	r28, r16
    3f58:	d1 1f       	adc	r29, r17
    3f5a:	f8 01       	movw	r30, r16
    3f5c:	a5 81       	ldd	r26, Z+5	; 0x05
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <__muluhisi3>
    3f64:	6f 8f       	std	Y+31, r22	; 0x1f
    3f66:	78 a3       	std	Y+32, r23	; 0x20
    3f68:	89 a3       	std	Y+33, r24	; 0x21
    3f6a:	9a a3       	std	Y+34, r25	; 0x22

      if (currCol < RGB_SIZE)
    3f6c:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3f70:	83 30       	cpi	r24, 0x03	; 3
    3f72:	58 f0       	brcs	.+22     	; 0x3f8a <_ZN9MD_TCS2307readFSMEh+0xae>
        s--;
      }
      else
      {
        // end this reading session
        FreqCount.end();
    3f74:	0e 94 7e 22 	call	0x44fc	; 0x44fc <_ZN14FreqCountClass3endEv>
        setEnable(false);
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	c8 01       	movw	r24, r16
    3f7c:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <_ZN9MD_TCS2309setEnableEb>
        RGBTransformation();
    3f80:	c8 01       	movw	r24, r16
    3f82:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <_ZN9MD_TCS23017RGBTransformationEv>
        s = 0;
    3f86:	c0 e0       	ldi	r28, 0x00	; 0
    3f88:	01 c0       	rjmp	.+2      	; 0x3f8c <_ZN9MD_TCS2307readFSMEh+0xb0>
      _Fo.value[seq[currCol++]] = FreqCount.read() * _readDiv;

      if (currCol < RGB_SIZE)
      {
        // loop around again on next call to available()
        s--;
    3f8a:	c1 e0       	ldi	r28, 0x01	; 1
    }
    break;
  }

  return(s);
}
    3f8c:	8c 2f       	mov	r24, r28
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
    3f92:	1f 91       	pop	r17
    3f94:	0f 91       	pop	r16
    3f96:	08 95       	ret

00003f98 <_ZN9MD_TCS2304readEv>:
  return(FreqCount.read() * _readDiv);
}

void MD_TCS230::read(void)
// initiate the finite state machine for reading a value
{
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ec 01       	movw	r28, r24
  _readState = readFSM(0);
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <_ZN9MD_TCS2307readFSMEh>
    3fa4:	8e a7       	std	Y+46, r24	; 0x2e
}
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	08 95       	ret

00003fac <_ZN9MD_TCS2309availableEv>:

bool MD_TCS230::available(void)
// check if a value is ready. Called repeatedly until it is!
{
    3fac:	cf 93       	push	r28
    3fae:	df 93       	push	r29
    3fb0:	ec 01       	movw	r28, r24
  _readState = readFSM(_readState);
    3fb2:	6e a5       	ldd	r22, Y+46	; 0x2e
    3fb4:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <_ZN9MD_TCS2307readFSMEh>
    3fb8:	98 2f       	mov	r25, r24
    3fba:	8e a7       	std	Y+46, r24	; 0x2e

  return(_readState == 0);
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	91 11       	cpse	r25, r1
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
}
    3fc2:	df 91       	pop	r29
    3fc4:	cf 91       	pop	r28
    3fc6:	08 95       	ret

00003fc8 <yield>:
    3fc8:	08 95       	ret

00003fca <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3fca:	cf 93       	push	r28
    3fcc:	df 93       	push	r29
    3fce:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    3fd0:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    3fd4:	ce 01       	movw	r24, r28
    3fd6:	0e 94 99 23 	call	0x4732	; 0x4732 <malloc>
    3fda:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    3fdc:	0e 94 1c 19 	call	0x3238	; 0x3238 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    3fe0:	20 97       	sbiw	r28, 0x00	; 0
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    3fe4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    3fe8:	ce 01       	movw	r24, r28
    3fea:	df 91       	pop	r29
    3fec:	cf 91       	pop	r28
    3fee:	08 95       	ret

00003ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    3ff0:	cf 93       	push	r28
    3ff2:	df 93       	push	r29
    if( pv )
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	51 f0       	breq	.+20     	; 0x400c <vPortFree+0x1c>
    3ff8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    3ffa:	0e 94 60 18 	call	0x30c0	; 0x30c0 <vTaskSuspendAll>
        {
            free( pv );
    3ffe:	ce 01       	movw	r24, r28
    4000:	0e 94 31 24 	call	0x4862	; 0x4862 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    4008:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <xTaskResumeAll>
    }
}
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	08 95       	ret

00004012 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    4012:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4014:	03 96       	adiw	r24, 0x03	; 3
    4016:	92 83       	std	Z+2, r25	; 0x02
    4018:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    401a:	2f ef       	ldi	r18, 0xFF	; 255
    401c:	3f ef       	ldi	r19, 0xFF	; 255
    401e:	34 83       	std	Z+4, r19	; 0x04
    4020:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4022:	96 83       	std	Z+6, r25	; 0x06
    4024:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    4026:	90 87       	std	Z+8, r25	; 0x08
    4028:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    402a:	10 82       	st	Z, r1
    402c:	08 95       	ret

0000402e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    402e:	fc 01       	movw	r30, r24
    4030:	11 86       	std	Z+9, r1	; 0x09
    4032:	10 86       	std	Z+8, r1	; 0x08
    4034:	08 95       	ret

00004036 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4036:	cf 93       	push	r28
    4038:	df 93       	push	r29
    403a:	9c 01       	movw	r18, r24
    403c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    403e:	dc 01       	movw	r26, r24
    4040:	11 96       	adiw	r26, 0x01	; 1
    4042:	cd 91       	ld	r28, X+
    4044:	dc 91       	ld	r29, X
    4046:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    4048:	d3 83       	std	Z+3, r29	; 0x03
    404a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    404c:	8c 81       	ldd	r24, Y+4	; 0x04
    404e:	9d 81       	ldd	r25, Y+5	; 0x05
    4050:	95 83       	std	Z+5, r25	; 0x05
    4052:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    4054:	8c 81       	ldd	r24, Y+4	; 0x04
    4056:	9d 81       	ldd	r25, Y+5	; 0x05
    4058:	dc 01       	movw	r26, r24
    405a:	13 96       	adiw	r26, 0x03	; 3
    405c:	7c 93       	st	X, r23
    405e:	6e 93       	st	-X, r22
    4060:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    4062:	7d 83       	std	Y+5, r23	; 0x05
    4064:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    4066:	31 87       	std	Z+9, r19	; 0x09
    4068:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    406a:	f9 01       	movw	r30, r18
    406c:	80 81       	ld	r24, Z
    406e:	8f 5f       	subi	r24, 0xFF	; 255
    4070:	80 83       	st	Z, r24
}
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	08 95       	ret

00004078 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	8c 01       	movw	r16, r24
    4082:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    4084:	80 81       	ld	r24, Z
    4086:	91 81       	ldd	r25, Z+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    4088:	8f 3f       	cpi	r24, 0xFF	; 255
    408a:	2f ef       	ldi	r18, 0xFF	; 255
    408c:	92 07       	cpc	r25, r18
    408e:	21 f4       	brne	.+8      	; 0x4098 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    4090:	e8 01       	movw	r28, r16
    4092:	af 81       	ldd	r26, Y+7	; 0x07
    4094:	b8 85       	ldd	r27, Y+8	; 0x08
    4096:	0e c0       	rjmp	.+28     	; 0x40b4 <vListInsert+0x3c>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    4098:	d8 01       	movw	r26, r16
    409a:	13 96       	adiw	r26, 0x03	; 3
    409c:	12 96       	adiw	r26, 0x02	; 2
    409e:	2d 91       	ld	r18, X+
    40a0:	3c 91       	ld	r19, X
    40a2:	13 97       	sbiw	r26, 0x03	; 3
    40a4:	e9 01       	movw	r28, r18
    40a6:	48 81       	ld	r20, Y
    40a8:	59 81       	ldd	r21, Y+1	; 0x01
    40aa:	84 17       	cp	r24, r20
    40ac:	95 07       	cpc	r25, r21
    40ae:	10 f0       	brcs	.+4      	; 0x40b4 <vListInsert+0x3c>
    40b0:	d9 01       	movw	r26, r18
    40b2:	f4 cf       	rjmp	.-24     	; 0x409c <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    40b4:	12 96       	adiw	r26, 0x02	; 2
    40b6:	8d 91       	ld	r24, X+
    40b8:	9c 91       	ld	r25, X
    40ba:	13 97       	sbiw	r26, 0x03	; 3
    40bc:	93 83       	std	Z+3, r25	; 0x03
    40be:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    40c0:	ec 01       	movw	r28, r24
    40c2:	fd 83       	std	Y+5, r31	; 0x05
    40c4:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    40c6:	b5 83       	std	Z+5, r27	; 0x05
    40c8:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    40ca:	13 96       	adiw	r26, 0x03	; 3
    40cc:	fc 93       	st	X, r31
    40ce:	ee 93       	st	-X, r30
    40d0:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    40d2:	11 87       	std	Z+9, r17	; 0x09
    40d4:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    40d6:	f8 01       	movw	r30, r16
    40d8:	80 81       	ld	r24, Z
    40da:	8f 5f       	subi	r24, 0xFF	; 255
    40dc:	80 83       	st	Z, r24
}
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	1f 91       	pop	r17
    40e4:	0f 91       	pop	r16
    40e6:	08 95       	ret

000040e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    40e8:	cf 93       	push	r28
    40ea:	df 93       	push	r29
    40ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    40ee:	a0 85       	ldd	r26, Z+8	; 0x08
    40f0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	24 81       	ldd	r18, Z+4	; 0x04
    40f8:	35 81       	ldd	r19, Z+5	; 0x05
    40fa:	ec 01       	movw	r28, r24
    40fc:	3d 83       	std	Y+5, r19	; 0x05
    40fe:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4100:	c4 81       	ldd	r28, Z+4	; 0x04
    4102:	d5 81       	ldd	r29, Z+5	; 0x05
    4104:	9b 83       	std	Y+3, r25	; 0x03
    4106:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    4108:	11 96       	adiw	r26, 0x01	; 1
    410a:	8d 91       	ld	r24, X+
    410c:	9c 91       	ld	r25, X
    410e:	12 97       	sbiw	r26, 0x02	; 2
    4110:	e8 17       	cp	r30, r24
    4112:	f9 07       	cpc	r31, r25
    4114:	21 f4       	brne	.+8      	; 0x411e <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    4116:	12 96       	adiw	r26, 0x02	; 2
    4118:	dc 93       	st	X, r29
    411a:	ce 93       	st	-X, r28
    411c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    411e:	11 86       	std	Z+9, r1	; 0x09
    4120:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    4122:	8c 91       	ld	r24, X
    4124:	81 50       	subi	r24, 0x01	; 1
    4126:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    4128:	8c 91       	ld	r24, X
}
    412a:	df 91       	pop	r29
    412c:	cf 91       	pop	r28
    412e:	08 95       	ret

00004130 <pxPortInitialiseStack>:
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
<<<<<<< HEAD
    33d4:	31 e1       	ldi	r19, 0x11	; 17
    33d6:	fc 01       	movw	r30, r24
    33d8:	30 83       	st	Z, r19
    33da:	31 97       	sbiw	r30, 0x01	; 1
    33dc:	22 e2       	ldi	r18, 0x22	; 34
    33de:	20 83       	st	Z, r18
    33e0:	31 97       	sbiw	r30, 0x01	; 1
    33e2:	a3 e3       	ldi	r26, 0x33	; 51
    33e4:	a0 83       	st	Z, r26
    33e6:	31 97       	sbiw	r30, 0x01	; 1
    33e8:	60 83       	st	Z, r22
    33ea:	31 97       	sbiw	r30, 0x01	; 1
    33ec:	70 83       	st	Z, r23
    33ee:	31 97       	sbiw	r30, 0x01	; 1
    33f0:	10 82       	st	Z, r1
    33f2:	31 97       	sbiw	r30, 0x01	; 1
    33f4:	60 e8       	ldi	r22, 0x80	; 128
    33f6:	60 83       	st	Z, r22
    33f8:	31 97       	sbiw	r30, 0x01	; 1
    33fa:	10 82       	st	Z, r1
    33fc:	31 97       	sbiw	r30, 0x01	; 1
    33fe:	62 e0       	ldi	r22, 0x02	; 2
    3400:	60 83       	st	Z, r22
    3402:	31 97       	sbiw	r30, 0x01	; 1
    3404:	63 e0       	ldi	r22, 0x03	; 3
    3406:	60 83       	st	Z, r22
    3408:	31 97       	sbiw	r30, 0x01	; 1
    340a:	64 e0       	ldi	r22, 0x04	; 4
    340c:	60 83       	st	Z, r22
    340e:	31 97       	sbiw	r30, 0x01	; 1
    3410:	65 e0       	ldi	r22, 0x05	; 5
    3412:	60 83       	st	Z, r22
    3414:	31 97       	sbiw	r30, 0x01	; 1
    3416:	66 e0       	ldi	r22, 0x06	; 6
    3418:	60 83       	st	Z, r22
    341a:	31 97       	sbiw	r30, 0x01	; 1
    341c:	67 e0       	ldi	r22, 0x07	; 7
    341e:	60 83       	st	Z, r22
    3420:	31 97       	sbiw	r30, 0x01	; 1
    3422:	68 e0       	ldi	r22, 0x08	; 8
    3424:	60 83       	st	Z, r22
    3426:	31 97       	sbiw	r30, 0x01	; 1
    3428:	69 e0       	ldi	r22, 0x09	; 9
    342a:	60 83       	st	Z, r22
    342c:	31 97       	sbiw	r30, 0x01	; 1
    342e:	60 e1       	ldi	r22, 0x10	; 16
    3430:	60 83       	st	Z, r22
    3432:	31 97       	sbiw	r30, 0x01	; 1
    3434:	30 83       	st	Z, r19
    3436:	31 97       	sbiw	r30, 0x01	; 1
    3438:	32 e1       	ldi	r19, 0x12	; 18
    343a:	30 83       	st	Z, r19
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	33 e1       	ldi	r19, 0x13	; 19
    3440:	30 83       	st	Z, r19
    3442:	31 97       	sbiw	r30, 0x01	; 1
    3444:	34 e1       	ldi	r19, 0x14	; 20
    3446:	30 83       	st	Z, r19
    3448:	31 97       	sbiw	r30, 0x01	; 1
    344a:	35 e1       	ldi	r19, 0x15	; 21
    344c:	30 83       	st	Z, r19
    344e:	31 97       	sbiw	r30, 0x01	; 1
    3450:	36 e1       	ldi	r19, 0x16	; 22
    3452:	30 83       	st	Z, r19
    3454:	31 97       	sbiw	r30, 0x01	; 1
    3456:	37 e1       	ldi	r19, 0x17	; 23
    3458:	30 83       	st	Z, r19
    345a:	31 97       	sbiw	r30, 0x01	; 1
    345c:	38 e1       	ldi	r19, 0x18	; 24
    345e:	30 83       	st	Z, r19
    3460:	31 97       	sbiw	r30, 0x01	; 1
    3462:	39 e1       	ldi	r19, 0x19	; 25
    3464:	30 83       	st	Z, r19
    3466:	31 97       	sbiw	r30, 0x01	; 1
    3468:	30 e2       	ldi	r19, 0x20	; 32
    346a:	30 83       	st	Z, r19
    346c:	31 97       	sbiw	r30, 0x01	; 1
    346e:	31 e2       	ldi	r19, 0x21	; 33
    3470:	30 83       	st	Z, r19
    3472:	31 97       	sbiw	r30, 0x01	; 1
    3474:	20 83       	st	Z, r18
    3476:	31 97       	sbiw	r30, 0x01	; 1
    3478:	23 e2       	ldi	r18, 0x23	; 35
    347a:	20 83       	st	Z, r18
    347c:	31 97       	sbiw	r30, 0x01	; 1
    347e:	40 83       	st	Z, r20
    3480:	31 97       	sbiw	r30, 0x01	; 1
    3482:	50 83       	st	Z, r21
    3484:	31 97       	sbiw	r30, 0x01	; 1
    3486:	26 e2       	ldi	r18, 0x26	; 38
    3488:	20 83       	st	Z, r18
    348a:	31 97       	sbiw	r30, 0x01	; 1
    348c:	27 e2       	ldi	r18, 0x27	; 39
    348e:	20 83       	st	Z, r18
    3490:	31 97       	sbiw	r30, 0x01	; 1
    3492:	28 e2       	ldi	r18, 0x28	; 40
    3494:	20 83       	st	Z, r18
    3496:	31 97       	sbiw	r30, 0x01	; 1
    3498:	29 e2       	ldi	r18, 0x29	; 41
    349a:	20 83       	st	Z, r18
    349c:	31 97       	sbiw	r30, 0x01	; 1
    349e:	20 e3       	ldi	r18, 0x30	; 48
    34a0:	20 83       	st	Z, r18
    34a2:	31 97       	sbiw	r30, 0x01	; 1
    34a4:	21 e3       	ldi	r18, 0x31	; 49
    34a6:	20 83       	st	Z, r18
    34a8:	86 97       	sbiw	r24, 0x26	; 38
    34aa:	08 95       	ret

000034ac <xPortStartScheduler>:
    34ac:	a8 95       	wdr
    34ae:	90 ec       	ldi	r25, 0xC0	; 192
    34b0:	88 e1       	ldi	r24, 0x18	; 24
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	a8 95       	wdr
    34b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    34c2:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    34c6:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    34ca:	cd 91       	ld	r28, X+
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	dd 91       	ld	r29, X+
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	ff 91       	pop	r31
    34d4:	ef 91       	pop	r30
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	bf 91       	pop	r27
    34dc:	af 91       	pop	r26
    34de:	9f 91       	pop	r25
    34e0:	8f 91       	pop	r24
    34e2:	7f 91       	pop	r23
    34e4:	6f 91       	pop	r22
    34e6:	5f 91       	pop	r21
    34e8:	4f 91       	pop	r20
    34ea:	3f 91       	pop	r19
    34ec:	2f 91       	pop	r18
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	bf 90       	pop	r11
    34fc:	af 90       	pop	r10
    34fe:	9f 90       	pop	r9
    3500:	8f 90       	pop	r8
    3502:	7f 90       	pop	r7
    3504:	6f 90       	pop	r6
    3506:	5f 90       	pop	r5
    3508:	4f 90       	pop	r4
    350a:	3f 90       	pop	r3
    350c:	2f 90       	pop	r2
    350e:	1f 90       	pop	r1
    3510:	0f 90       	pop	r0
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	0f 90       	pop	r0
    3516:	08 95       	ret
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	08 95       	ret

0000351c <vPortYield>:
    351c:	0f 92       	push	r0
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	0f 92       	push	r0
    3524:	1f 92       	push	r1
    3526:	11 24       	eor	r1, r1
    3528:	2f 92       	push	r2
    352a:	3f 92       	push	r3
    352c:	4f 92       	push	r4
    352e:	5f 92       	push	r5
    3530:	6f 92       	push	r6
    3532:	7f 92       	push	r7
    3534:	8f 92       	push	r8
    3536:	9f 92       	push	r9
    3538:	af 92       	push	r10
    353a:	bf 92       	push	r11
    353c:	cf 92       	push	r12
    353e:	df 92       	push	r13
    3540:	ef 92       	push	r14
    3542:	ff 92       	push	r15
    3544:	0f 93       	push	r16
    3546:	1f 93       	push	r17
    3548:	2f 93       	push	r18
    354a:	3f 93       	push	r19
    354c:	4f 93       	push	r20
    354e:	5f 93       	push	r21
    3550:	6f 93       	push	r22
    3552:	7f 93       	push	r23
    3554:	8f 93       	push	r24
    3556:	9f 93       	push	r25
    3558:	af 93       	push	r26
    355a:	bf 93       	push	r27
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	ef 93       	push	r30
    3562:	ff 93       	push	r31
    3564:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3568:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    356c:	0d b6       	in	r0, 0x3d	; 61
    356e:	0d 92       	st	X+, r0
    3570:	0e b6       	in	r0, 0x3e	; 62
    3572:	0d 92       	st	X+, r0
    3574:	0e 94 3c 14 	call	0x2878	; 0x2878 <vTaskSwitchContext>
    3578:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    357c:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    3580:	cd 91       	ld	r28, X+
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	dd 91       	ld	r29, X+
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	ff 91       	pop	r31
    358a:	ef 91       	pop	r30
    358c:	df 91       	pop	r29
    358e:	cf 91       	pop	r28
    3590:	bf 91       	pop	r27
    3592:	af 91       	pop	r26
    3594:	9f 91       	pop	r25
    3596:	8f 91       	pop	r24
    3598:	7f 91       	pop	r23
    359a:	6f 91       	pop	r22
    359c:	5f 91       	pop	r21
    359e:	4f 91       	pop	r20
    35a0:	3f 91       	pop	r19
    35a2:	2f 91       	pop	r18
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	ff 90       	pop	r15
    35aa:	ef 90       	pop	r14
    35ac:	df 90       	pop	r13
    35ae:	cf 90       	pop	r12
    35b0:	bf 90       	pop	r11
    35b2:	af 90       	pop	r10
    35b4:	9f 90       	pop	r9
    35b6:	8f 90       	pop	r8
    35b8:	7f 90       	pop	r7
    35ba:	6f 90       	pop	r6
    35bc:	5f 90       	pop	r5
    35be:	4f 90       	pop	r4
    35c0:	3f 90       	pop	r3
    35c2:	2f 90       	pop	r2
    35c4:	1f 90       	pop	r1
    35c6:	0f 90       	pop	r0
    35c8:	0f be       	out	0x3f, r0	; 63
    35ca:	0f 90       	pop	r0
    35cc:	08 95       	ret

000035ce <vPortYieldFromTick>:
    35ce:	0f 92       	push	r0
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	0f 92       	push	r0
    35d6:	1f 92       	push	r1
    35d8:	11 24       	eor	r1, r1
    35da:	2f 92       	push	r2
    35dc:	3f 92       	push	r3
    35de:	4f 92       	push	r4
    35e0:	5f 92       	push	r5
    35e2:	6f 92       	push	r6
    35e4:	7f 92       	push	r7
    35e6:	8f 92       	push	r8
    35e8:	9f 92       	push	r9
    35ea:	af 92       	push	r10
    35ec:	bf 92       	push	r11
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	2f 93       	push	r18
    35fc:	3f 93       	push	r19
    35fe:	4f 93       	push	r20
    3600:	5f 93       	push	r21
    3602:	6f 93       	push	r22
    3604:	7f 93       	push	r23
    3606:	8f 93       	push	r24
    3608:	9f 93       	push	r25
    360a:	af 93       	push	r26
    360c:	bf 93       	push	r27
    360e:	cf 93       	push	r28
    3610:	df 93       	push	r29
    3612:	ef 93       	push	r30
    3614:	ff 93       	push	r31
    3616:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    361a:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    361e:	0d b6       	in	r0, 0x3d	; 61
    3620:	0d 92       	st	X+, r0
    3622:	0e b6       	in	r0, 0x3e	; 62
    3624:	0d 92       	st	X+, r0
    3626:	13 be       	out	0x33, r1	; 51
    3628:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <xTaskIncrementTick>
    362c:	81 11       	cpse	r24, r1
    362e:	0e 94 3c 14 	call	0x2878	; 0x2878 <vTaskSwitchContext>
    3632:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    3636:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    363a:	cd 91       	ld	r28, X+
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	dd 91       	ld	r29, X+
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	ff 91       	pop	r31
    3644:	ef 91       	pop	r30
    3646:	df 91       	pop	r29
    3648:	cf 91       	pop	r28
    364a:	bf 91       	pop	r27
    364c:	af 91       	pop	r26
    364e:	9f 91       	pop	r25
    3650:	8f 91       	pop	r24
    3652:	7f 91       	pop	r23
    3654:	6f 91       	pop	r22
    3656:	5f 91       	pop	r21
    3658:	4f 91       	pop	r20
    365a:	3f 91       	pop	r19
    365c:	2f 91       	pop	r18
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	df 90       	pop	r13
    3668:	cf 90       	pop	r12
    366a:	bf 90       	pop	r11
    366c:	af 90       	pop	r10
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	7f 90       	pop	r7
    3674:	6f 90       	pop	r6
    3676:	5f 90       	pop	r5
    3678:	4f 90       	pop	r4
    367a:	3f 90       	pop	r3
    367c:	2f 90       	pop	r2
    367e:	1f 90       	pop	r1
    3680:	0f 90       	pop	r0
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	0f 90       	pop	r0
    3686:	08 95       	ret

00003688 <__vector_6>:
    3688:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <vPortYieldFromTick>
    368c:	18 95       	reti

0000368e <_ZN14FreqCountClass5beginEj>:
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	09 f4       	brne	.+2      	; 0x3694 <_ZN14FreqCountClass5beginEj+0x6>
    3692:	74 c0       	rjmp	.+232    	; 0x377c <L_130_loop+0xc>
    3694:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    3698:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
    369c:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZL9count_msw+0x1>
    36a0:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL9count_msw>
    36a4:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZL10count_prev>
    36a8:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZL10count_prev+0x1>
    36ac:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZL10count_prev+0x2>
    36b0:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10count_prev+0x3>
    36b4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>
    36b8:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36bc:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <_ZL10saveTCCR1A>
    36c0:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    36c4:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <_ZL10saveTCCR1B>
    36c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    36cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    36d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    36d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    36d8:	21 e0       	ldi	r18, 0x01	; 1
    36da:	26 bb       	out	0x16, r18	; 22
    36dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    36e0:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36e4:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <_ZL10saveTCCR2A>
    36e8:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    36ec:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <_ZL10saveTCCR2B>
    36f0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    36f4:	22 e0       	ldi	r18, 0x02	; 2
    36f6:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    36fa:	9c 01       	movw	r18, r24
    36fc:	27 70       	andi	r18, 0x07	; 7
    36fe:	33 27       	eor	r19, r19
    3700:	23 2b       	or	r18, r19
    3702:	51 f4       	brne	.+20     	; 0x3718 <_ZN14FreqCountClass5beginEj+0x8a>
    3704:	43 e0       	ldi	r20, 0x03	; 3
    3706:	96 95       	lsr	r25
    3708:	87 95       	ror	r24
    370a:	4a 95       	dec	r20
    370c:	e1 f7       	brne	.-8      	; 0x3706 <_ZN14FreqCountClass5beginEj+0x78>
    370e:	2c e7       	ldi	r18, 0x7C	; 124
    3710:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    3714:	27 e0       	ldi	r18, 0x07	; 7
    3716:	18 c0       	rjmp	.+48     	; 0x3748 <_ZN14FreqCountClass5beginEj+0xba>
    3718:	9c 01       	movw	r18, r24
    371a:	23 70       	andi	r18, 0x03	; 3
    371c:	33 27       	eor	r19, r19
    371e:	23 2b       	or	r18, r19
    3720:	31 f4       	brne	.+12     	; 0x372e <_ZN14FreqCountClass5beginEj+0xa0>
    3722:	96 95       	lsr	r25
    3724:	87 95       	ror	r24
    3726:	96 95       	lsr	r25
    3728:	87 95       	ror	r24
    372a:	29 ef       	ldi	r18, 0xF9	; 249
    372c:	05 c0       	rjmp	.+10     	; 0x3738 <_ZN14FreqCountClass5beginEj+0xaa>
    372e:	80 fd       	sbrc	r24, 0
    3730:	07 c0       	rjmp	.+14     	; 0x3740 <_ZN14FreqCountClass5beginEj+0xb2>
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	2c e7       	ldi	r18, 0x7C	; 124
    3738:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    373c:	26 e0       	ldi	r18, 0x06	; 6
    373e:	04 c0       	rjmp	.+8      	; 0x3748 <_ZN14FreqCountClass5beginEj+0xba>
    3740:	2c e7       	ldi	r18, 0x7C	; 124
    3742:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    3746:	25 e0       	ldi	r18, 0x05	; 5
    3748:	20 93 ac 04 	sts	0x04AC, r18	; 0x8004ac <_ZL11startTCCR2B>
    374c:	22 e0       	ldi	r18, 0x02	; 2
    374e:	27 bb       	out	0x17, r18	; 23
    3750:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    3754:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZL11gate_length+0x1>
    3758:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZL11gate_length>
    375c:	9f b7       	in	r25, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	23 bd       	out	0x23, r18	; 35
    3762:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <_ZL11startTCCR2B>
    3766:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    376a:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    376e:	8b e0       	ldi	r24, 0x0B	; 11

00003770 <L_130_loop>:
    3770:	81 50       	subi	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <L_130_loop>
    3774:	87 e0       	ldi	r24, 0x07	; 7
    3776:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    377a:	9f bf       	out	0x3f, r25	; 63
    377c:	08 95       	ret

0000377e <_ZN14FreqCountClass9availableEv>:
    377e:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZL11count_ready>
    3782:	08 95       	ret

00003784 <_ZN14FreqCountClass4readEv>:
    3784:	2f b7       	in	r18, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <_ZL12count_output>
    378c:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <_ZL12count_output+0x1>
    3790:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZL12count_output+0x2>
    3794:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <_ZL12count_output+0x3>
    3798:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>
    379c:	2f bf       	out	0x3f, r18	; 63
    379e:	08 95       	ret

000037a0 <_ZN14FreqCountClass3endEv>:
    37a0:	e1 eb       	ldi	r30, 0xB1	; 177
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	10 82       	st	Z, r1
    37a6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    37aa:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZL10saveTCCR2A>
    37ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    37b2:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL10saveTCCR2B>
    37b6:	80 83       	st	Z, r24
    37b8:	e1 e8       	ldi	r30, 0x81	; 129
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	10 82       	st	Z, r1
    37be:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZL10saveTCCR1A>
    37c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    37c6:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZL10saveTCCR1B>
    37ca:	80 83       	st	Z, r24
    37cc:	08 95       	ret

000037ce <__vector_7>:
    37ce:	1f 92       	push	r1
    37d0:	0f 92       	push	r0
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	0f 92       	push	r0
    37d6:	11 24       	eor	r1, r1
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	2f 93       	push	r18
    37de:	3f 93       	push	r19
    37e0:	4f 93       	push	r20
    37e2:	5f 93       	push	r21
    37e4:	6f 93       	push	r22
    37e6:	7f 93       	push	r23
    37e8:	8f 93       	push	r24
    37ea:	9f 93       	push	r25
    37ec:	af 93       	push	r26
    37ee:	bf 93       	push	r27
    37f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    37f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    37f8:	b0 9b       	sbis	0x16, 0	; 22
    37fa:	0b c0       	rjmp	.+22     	; 0x3812 <__vector_7+0x44>
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	86 bb       	out	0x16, r24	; 22
    3800:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    3804:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <_ZL9count_msw+0x1>
    380e:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_ZL9count_msw>
    3812:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZL10gate_index>
    3816:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZL10gate_index+0x1>
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <_ZL11gate_length>
    3820:	50 91 a0 04 	lds	r21, 0x04A0	; 0x8004a0 <_ZL11gate_length+0x1>
    3824:	84 17       	cp	r24, r20
    3826:	95 07       	cpc	r25, r21
    3828:	98 f1       	brcs	.+102    	; 0x3890 <__vector_7+0xc2>
    382a:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    382e:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
    3832:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    3836:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    383a:	a0 e0       	ldi	r26, 0x00	; 0
    383c:	b0 e0       	ldi	r27, 0x00	; 0
    383e:	dc 01       	movw	r26, r24
    3840:	99 27       	eor	r25, r25
    3842:	88 27       	eor	r24, r24
    3844:	82 0f       	add	r24, r18
    3846:	93 1f       	adc	r25, r19
    3848:	a1 1d       	adc	r26, r1
    384a:	b1 1d       	adc	r27, r1
    384c:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <_ZL10count_prev>
    3850:	50 91 a7 04 	lds	r21, 0x04A7	; 0x8004a7 <_ZL10count_prev+0x1>
    3854:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <_ZL10count_prev+0x2>
    3858:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <_ZL10count_prev+0x3>
    385c:	8c 01       	movw	r16, r24
    385e:	9d 01       	movw	r18, r26
    3860:	04 1b       	sub	r16, r20
    3862:	15 0b       	sbc	r17, r21
    3864:	26 0b       	sbc	r18, r22
    3866:	37 0b       	sbc	r19, r23
    3868:	00 93 a2 04 	sts	0x04A2, r16	; 0x8004a2 <_ZL12count_output>
    386c:	10 93 a3 04 	sts	0x04A3, r17	; 0x8004a3 <_ZL12count_output+0x1>
    3870:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <_ZL12count_output+0x2>
    3874:	30 93 a5 04 	sts	0x04A5, r19	; 0x8004a5 <_ZL12count_output+0x3>
    3878:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_ZL10count_prev>
    387c:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <_ZL10count_prev+0x1>
    3880:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <_ZL10count_prev+0x2>
    3884:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <_ZL10count_prev+0x3>
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZL11count_ready>
    388e:	04 c0       	rjmp	.+8      	; 0x3898 <__vector_7+0xca>
    3890:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZL10gate_index+0x1>
    3894:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZL10gate_index>
    3898:	bf 91       	pop	r27
    389a:	af 91       	pop	r26
    389c:	9f 91       	pop	r25
    389e:	8f 91       	pop	r24
    38a0:	7f 91       	pop	r23
    38a2:	6f 91       	pop	r22
    38a4:	5f 91       	pop	r21
    38a6:	4f 91       	pop	r20
    38a8:	3f 91       	pop	r19
    38aa:	2f 91       	pop	r18
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f 90       	pop	r0
    38b6:	1f 90       	pop	r1
    38b8:	18 95       	reti

000038ba <__unordsf2>:
    38ba:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fp_cmp>
    38be:	88 0b       	sbc	r24, r24
    38c0:	99 0b       	sbc	r25, r25
    38c2:	08 95       	ret

000038c4 <__divmodhi4>:
    38c4:	97 fb       	bst	r25, 7
    38c6:	07 2e       	mov	r0, r23
    38c8:	16 f4       	brtc	.+4      	; 0x38ce <__divmodhi4+0xa>
    38ca:	00 94       	com	r0
    38cc:	07 d0       	rcall	.+14     	; 0x38dc <__divmodhi4_neg1>
    38ce:	77 fd       	sbrc	r23, 7
    38d0:	09 d0       	rcall	.+18     	; 0x38e4 <__divmodhi4_neg2>
    38d2:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__udivmodhi4>
    38d6:	07 fc       	sbrc	r0, 7
    38d8:	05 d0       	rcall	.+10     	; 0x38e4 <__divmodhi4_neg2>
    38da:	3e f4       	brtc	.+14     	; 0x38ea <__divmodhi4_exit>

000038dc <__divmodhi4_neg1>:
    38dc:	90 95       	com	r25
    38de:	81 95       	neg	r24
    38e0:	9f 4f       	sbci	r25, 0xFF	; 255
    38e2:	08 95       	ret

000038e4 <__divmodhi4_neg2>:
    38e4:	70 95       	com	r23
    38e6:	61 95       	neg	r22
    38e8:	7f 4f       	sbci	r23, 0xFF	; 255

000038ea <__divmodhi4_exit>:
    38ea:	08 95       	ret

000038ec <__udivmodsi4>:
    38ec:	a1 e2       	ldi	r26, 0x21	; 33
    38ee:	1a 2e       	mov	r1, r26
    38f0:	aa 1b       	sub	r26, r26
    38f2:	bb 1b       	sub	r27, r27
    38f4:	fd 01       	movw	r30, r26
    38f6:	0d c0       	rjmp	.+26     	; 0x3912 <__udivmodsi4_ep>

000038f8 <__udivmodsi4_loop>:
    38f8:	aa 1f       	adc	r26, r26
    38fa:	bb 1f       	adc	r27, r27
    38fc:	ee 1f       	adc	r30, r30
    38fe:	ff 1f       	adc	r31, r31
    3900:	a2 17       	cp	r26, r18
    3902:	b3 07       	cpc	r27, r19
    3904:	e4 07       	cpc	r30, r20
    3906:	f5 07       	cpc	r31, r21
    3908:	20 f0       	brcs	.+8      	; 0x3912 <__udivmodsi4_ep>
    390a:	a2 1b       	sub	r26, r18
    390c:	b3 0b       	sbc	r27, r19
    390e:	e4 0b       	sbc	r30, r20
    3910:	f5 0b       	sbc	r31, r21

00003912 <__udivmodsi4_ep>:
    3912:	66 1f       	adc	r22, r22
    3914:	77 1f       	adc	r23, r23
    3916:	88 1f       	adc	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	1a 94       	dec	r1
    391c:	69 f7       	brne	.-38     	; 0x38f8 <__udivmodsi4_loop>
    391e:	60 95       	com	r22
    3920:	70 95       	com	r23
    3922:	80 95       	com	r24
    3924:	90 95       	com	r25
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	bd 01       	movw	r22, r26
    392c:	cf 01       	movw	r24, r30
    392e:	08 95       	ret

00003930 <__divmodsi4>:
    3930:	05 2e       	mov	r0, r21
    3932:	97 fb       	bst	r25, 7
    3934:	1e f4       	brtc	.+6      	; 0x393c <__divmodsi4+0xc>
    3936:	00 94       	com	r0
    3938:	0e 94 af 1c 	call	0x395e	; 0x395e <__negsi2>
    393c:	57 fd       	sbrc	r21, 7
    393e:	07 d0       	rcall	.+14     	; 0x394e <__divmodsi4_neg2>
    3940:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodsi4>
    3944:	07 fc       	sbrc	r0, 7
    3946:	03 d0       	rcall	.+6      	; 0x394e <__divmodsi4_neg2>
    3948:	4e f4       	brtc	.+18     	; 0x395c <__divmodsi4_exit>
    394a:	0c 94 af 1c 	jmp	0x395e	; 0x395e <__negsi2>

0000394e <__divmodsi4_neg2>:
    394e:	50 95       	com	r21
    3950:	40 95       	com	r20
    3952:	30 95       	com	r19
    3954:	21 95       	neg	r18
    3956:	3f 4f       	sbci	r19, 0xFF	; 255
    3958:	4f 4f       	sbci	r20, 0xFF	; 255
    395a:	5f 4f       	sbci	r21, 0xFF	; 255

0000395c <__divmodsi4_exit>:
    395c:	08 95       	ret

0000395e <__negsi2>:
    395e:	90 95       	com	r25
    3960:	80 95       	com	r24
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	8f 4f       	sbci	r24, 0xFF	; 255
    396a:	9f 4f       	sbci	r25, 0xFF	; 255
    396c:	08 95       	ret

0000396e <__tablejump2__>:
    396e:	ee 0f       	add	r30, r30
    3970:	ff 1f       	adc	r31, r31
    3972:	05 90       	lpm	r0, Z+
    3974:	f4 91       	lpm	r31, Z
    3976:	e0 2d       	mov	r30, r0
    3978:	09 94       	ijmp

0000397a <__muluhisi3>:
    397a:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <__umulhisi3>
    397e:	a5 9f       	mul	r26, r21
    3980:	90 0d       	add	r25, r0
    3982:	b4 9f       	mul	r27, r20
    3984:	90 0d       	add	r25, r0
    3986:	a4 9f       	mul	r26, r20
    3988:	80 0d       	add	r24, r0
    398a:	91 1d       	adc	r25, r1
    398c:	11 24       	eor	r1, r1
    398e:	08 95       	ret

00003990 <__udivmodhi4>:
    3990:	aa 1b       	sub	r26, r26
    3992:	bb 1b       	sub	r27, r27
    3994:	51 e1       	ldi	r21, 0x11	; 17
    3996:	07 c0       	rjmp	.+14     	; 0x39a6 <__udivmodhi4_ep>

00003998 <__udivmodhi4_loop>:
    3998:	aa 1f       	adc	r26, r26
    399a:	bb 1f       	adc	r27, r27
    399c:	a6 17       	cp	r26, r22
    399e:	b7 07       	cpc	r27, r23
    39a0:	10 f0       	brcs	.+4      	; 0x39a6 <__udivmodhi4_ep>
    39a2:	a6 1b       	sub	r26, r22
    39a4:	b7 0b       	sbc	r27, r23

000039a6 <__udivmodhi4_ep>:
    39a6:	88 1f       	adc	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	5a 95       	dec	r21
    39ac:	a9 f7       	brne	.-22     	; 0x3998 <__udivmodhi4_loop>
    39ae:	80 95       	com	r24
    39b0:	90 95       	com	r25
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	08 95       	ret

000039b8 <__umulhisi3>:
    39b8:	a2 9f       	mul	r26, r18
    39ba:	b0 01       	movw	r22, r0
    39bc:	b3 9f       	mul	r27, r19
    39be:	c0 01       	movw	r24, r0
    39c0:	a3 9f       	mul	r26, r19
    39c2:	70 0d       	add	r23, r0
    39c4:	81 1d       	adc	r24, r1
    39c6:	11 24       	eor	r1, r1
    39c8:	91 1d       	adc	r25, r1
    39ca:	b2 9f       	mul	r27, r18
    39cc:	70 0d       	add	r23, r0
    39ce:	81 1d       	adc	r24, r1
    39d0:	11 24       	eor	r1, r1
    39d2:	91 1d       	adc	r25, r1
    39d4:	08 95       	ret

000039d6 <malloc>:
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	82 30       	cpi	r24, 0x02	; 2
    39e0:	91 05       	cpc	r25, r1
    39e2:	10 f4       	brcc	.+4      	; 0x39e8 <malloc+0x12>
    39e4:	82 e0       	ldi	r24, 0x02	; 2
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <__flp>
    39ec:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <__flp+0x1>
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	a0 e0       	ldi	r26, 0x00	; 0
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	30 97       	sbiw	r30, 0x00	; 0
    39fa:	19 f1       	breq	.+70     	; 0x3a42 <malloc+0x6c>
    39fc:	40 81       	ld	r20, Z
    39fe:	51 81       	ldd	r21, Z+1	; 0x01
    3a00:	02 81       	ldd	r16, Z+2	; 0x02
    3a02:	13 81       	ldd	r17, Z+3	; 0x03
    3a04:	48 17       	cp	r20, r24
    3a06:	59 07       	cpc	r21, r25
    3a08:	c8 f0       	brcs	.+50     	; 0x3a3c <malloc+0x66>
    3a0a:	84 17       	cp	r24, r20
    3a0c:	95 07       	cpc	r25, r21
    3a0e:	69 f4       	brne	.+26     	; 0x3a2a <malloc+0x54>
    3a10:	10 97       	sbiw	r26, 0x00	; 0
    3a12:	31 f0       	breq	.+12     	; 0x3a20 <malloc+0x4a>
    3a14:	12 96       	adiw	r26, 0x02	; 2
    3a16:	0c 93       	st	X, r16
    3a18:	12 97       	sbiw	r26, 0x02	; 2
    3a1a:	13 96       	adiw	r26, 0x03	; 3
    3a1c:	1c 93       	st	X, r17
    3a1e:	27 c0       	rjmp	.+78     	; 0x3a6e <malloc+0x98>
    3a20:	00 93 b3 04 	sts	0x04B3, r16	; 0x8004b3 <__flp>
    3a24:	10 93 b4 04 	sts	0x04B4, r17	; 0x8004b4 <__flp+0x1>
    3a28:	22 c0       	rjmp	.+68     	; 0x3a6e <malloc+0x98>
    3a2a:	21 15       	cp	r18, r1
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <malloc+0x60>
    3a30:	42 17       	cp	r20, r18
    3a32:	53 07       	cpc	r21, r19
    3a34:	18 f4       	brcc	.+6      	; 0x3a3c <malloc+0x66>
    3a36:	9a 01       	movw	r18, r20
    3a38:	bd 01       	movw	r22, r26
    3a3a:	ef 01       	movw	r28, r30
    3a3c:	df 01       	movw	r26, r30
    3a3e:	f8 01       	movw	r30, r16
    3a40:	db cf       	rjmp	.-74     	; 0x39f8 <malloc+0x22>
    3a42:	21 15       	cp	r18, r1
    3a44:	31 05       	cpc	r19, r1
    3a46:	f9 f0       	breq	.+62     	; 0x3a86 <malloc+0xb0>
    3a48:	28 1b       	sub	r18, r24
    3a4a:	39 0b       	sbc	r19, r25
    3a4c:	24 30       	cpi	r18, 0x04	; 4
    3a4e:	31 05       	cpc	r19, r1
    3a50:	80 f4       	brcc	.+32     	; 0x3a72 <malloc+0x9c>
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	9b 81       	ldd	r25, Y+3	; 0x03
    3a56:	61 15       	cp	r22, r1
    3a58:	71 05       	cpc	r23, r1
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <malloc+0x8e>
    3a5c:	fb 01       	movw	r30, r22
    3a5e:	93 83       	std	Z+3, r25	; 0x03
    3a60:	82 83       	std	Z+2, r24	; 0x02
    3a62:	04 c0       	rjmp	.+8      	; 0x3a6c <malloc+0x96>
    3a64:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <__flp+0x1>
    3a68:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <__flp>
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	32 96       	adiw	r30, 0x02	; 2
    3a70:	44 c0       	rjmp	.+136    	; 0x3afa <malloc+0x124>
    3a72:	fe 01       	movw	r30, r28
    3a74:	e2 0f       	add	r30, r18
    3a76:	f3 1f       	adc	r31, r19
    3a78:	81 93       	st	Z+, r24
    3a7a:	91 93       	st	Z+, r25
    3a7c:	22 50       	subi	r18, 0x02	; 2
    3a7e:	31 09       	sbc	r19, r1
    3a80:	39 83       	std	Y+1, r19	; 0x01
    3a82:	28 83       	st	Y, r18
    3a84:	3a c0       	rjmp	.+116    	; 0x3afa <malloc+0x124>
    3a86:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3a8a:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3a8e:	23 2b       	or	r18, r19
    3a90:	41 f4       	brne	.+16     	; 0x3aa2 <malloc+0xcc>
    3a92:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a96:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a9a:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <__brkval+0x1>
    3a9e:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <__brkval>
    3aa2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3aa6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3aaa:	21 15       	cp	r18, r1
    3aac:	31 05       	cpc	r19, r1
    3aae:	41 f4       	brne	.+16     	; 0x3ac0 <malloc+0xea>
    3ab0:	2d b7       	in	r18, 0x3d	; 61
    3ab2:	3e b7       	in	r19, 0x3e	; 62
    3ab4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3ab8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3abc:	24 1b       	sub	r18, r20
    3abe:	35 0b       	sbc	r19, r21
    3ac0:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <__brkval>
    3ac4:	f0 91 b2 04 	lds	r31, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3ac8:	e2 17       	cp	r30, r18
    3aca:	f3 07       	cpc	r31, r19
    3acc:	a0 f4       	brcc	.+40     	; 0x3af6 <malloc+0x120>
    3ace:	2e 1b       	sub	r18, r30
    3ad0:	3f 0b       	sbc	r19, r31
    3ad2:	28 17       	cp	r18, r24
    3ad4:	39 07       	cpc	r19, r25
    3ad6:	78 f0       	brcs	.+30     	; 0x3af6 <malloc+0x120>
    3ad8:	ac 01       	movw	r20, r24
    3ada:	4e 5f       	subi	r20, 0xFE	; 254
    3adc:	5f 4f       	sbci	r21, 0xFF	; 255
    3ade:	24 17       	cp	r18, r20
    3ae0:	35 07       	cpc	r19, r21
    3ae2:	48 f0       	brcs	.+18     	; 0x3af6 <malloc+0x120>
    3ae4:	4e 0f       	add	r20, r30
    3ae6:	5f 1f       	adc	r21, r31
    3ae8:	50 93 b2 04 	sts	0x04B2, r21	; 0x8004b2 <__brkval+0x1>
    3aec:	40 93 b1 04 	sts	0x04B1, r20	; 0x8004b1 <__brkval>
    3af0:	81 93       	st	Z+, r24
    3af2:	91 93       	st	Z+, r25
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <malloc+0x124>
    3af6:	e0 e0       	ldi	r30, 0x00	; 0
    3af8:	f0 e0       	ldi	r31, 0x00	; 0
    3afa:	cf 01       	movw	r24, r30
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	08 95       	ret

00003b06 <free>:
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <free+0xa>
    3b0e:	81 c0       	rjmp	.+258    	; 0x3c12 <free+0x10c>
    3b10:	fc 01       	movw	r30, r24
    3b12:	32 97       	sbiw	r30, 0x02	; 2
    3b14:	13 82       	std	Z+3, r1	; 0x03
    3b16:	12 82       	std	Z+2, r1	; 0x02
    3b18:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <__flp>
    3b1c:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <__flp+0x1>
    3b20:	10 97       	sbiw	r26, 0x00	; 0
    3b22:	81 f4       	brne	.+32     	; 0x3b44 <free+0x3e>
    3b24:	20 81       	ld	r18, Z
    3b26:	31 81       	ldd	r19, Z+1	; 0x01
    3b28:	82 0f       	add	r24, r18
    3b2a:	93 1f       	adc	r25, r19
    3b2c:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3b30:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3b34:	28 17       	cp	r18, r24
    3b36:	39 07       	cpc	r19, r25
    3b38:	51 f5       	brne	.+84     	; 0x3b8e <free+0x88>
    3b3a:	f0 93 b2 04 	sts	0x04B2, r31	; 0x8004b2 <__brkval+0x1>
    3b3e:	e0 93 b1 04 	sts	0x04B1, r30	; 0x8004b1 <__brkval>
    3b42:	67 c0       	rjmp	.+206    	; 0x3c12 <free+0x10c>
    3b44:	ed 01       	movw	r28, r26
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	ce 17       	cp	r28, r30
    3b4c:	df 07       	cpc	r29, r31
    3b4e:	40 f4       	brcc	.+16     	; 0x3b60 <free+0x5a>
    3b50:	4a 81       	ldd	r20, Y+2	; 0x02
    3b52:	5b 81       	ldd	r21, Y+3	; 0x03
    3b54:	9e 01       	movw	r18, r28
    3b56:	41 15       	cp	r20, r1
    3b58:	51 05       	cpc	r21, r1
    3b5a:	f1 f0       	breq	.+60     	; 0x3b98 <free+0x92>
    3b5c:	ea 01       	movw	r28, r20
    3b5e:	f5 cf       	rjmp	.-22     	; 0x3b4a <free+0x44>
    3b60:	d3 83       	std	Z+3, r29	; 0x03
    3b62:	c2 83       	std	Z+2, r28	; 0x02
    3b64:	40 81       	ld	r20, Z
    3b66:	51 81       	ldd	r21, Z+1	; 0x01
    3b68:	84 0f       	add	r24, r20
    3b6a:	95 1f       	adc	r25, r21
    3b6c:	c8 17       	cp	r28, r24
    3b6e:	d9 07       	cpc	r29, r25
    3b70:	59 f4       	brne	.+22     	; 0x3b88 <free+0x82>
    3b72:	88 81       	ld	r24, Y
    3b74:	99 81       	ldd	r25, Y+1	; 0x01
    3b76:	84 0f       	add	r24, r20
    3b78:	95 1f       	adc	r25, r21
    3b7a:	02 96       	adiw	r24, 0x02	; 2
    3b7c:	91 83       	std	Z+1, r25	; 0x01
    3b7e:	80 83       	st	Z, r24
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	9b 81       	ldd	r25, Y+3	; 0x03
    3b84:	93 83       	std	Z+3, r25	; 0x03
    3b86:	82 83       	std	Z+2, r24	; 0x02
    3b88:	21 15       	cp	r18, r1
    3b8a:	31 05       	cpc	r19, r1
    3b8c:	29 f4       	brne	.+10     	; 0x3b98 <free+0x92>
    3b8e:	f0 93 b4 04 	sts	0x04B4, r31	; 0x8004b4 <__flp+0x1>
    3b92:	e0 93 b3 04 	sts	0x04B3, r30	; 0x8004b3 <__flp>
    3b96:	3d c0       	rjmp	.+122    	; 0x3c12 <free+0x10c>
    3b98:	e9 01       	movw	r28, r18
    3b9a:	fb 83       	std	Y+3, r31	; 0x03
    3b9c:	ea 83       	std	Y+2, r30	; 0x02
    3b9e:	49 91       	ld	r20, Y+
    3ba0:	59 91       	ld	r21, Y+
    3ba2:	c4 0f       	add	r28, r20
    3ba4:	d5 1f       	adc	r29, r21
    3ba6:	ec 17       	cp	r30, r28
    3ba8:	fd 07       	cpc	r31, r29
    3baa:	61 f4       	brne	.+24     	; 0x3bc4 <free+0xbe>
    3bac:	80 81       	ld	r24, Z
    3bae:	91 81       	ldd	r25, Z+1	; 0x01
    3bb0:	84 0f       	add	r24, r20
    3bb2:	95 1f       	adc	r25, r21
    3bb4:	02 96       	adiw	r24, 0x02	; 2
    3bb6:	e9 01       	movw	r28, r18
    3bb8:	99 83       	std	Y+1, r25	; 0x01
    3bba:	88 83       	st	Y, r24
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	9b 83       	std	Y+3, r25	; 0x03
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
    3bc4:	e0 e0       	ldi	r30, 0x00	; 0
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	12 96       	adiw	r26, 0x02	; 2
    3bca:	8d 91       	ld	r24, X+
    3bcc:	9c 91       	ld	r25, X
    3bce:	13 97       	sbiw	r26, 0x03	; 3
    3bd0:	00 97       	sbiw	r24, 0x00	; 0
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <free+0xd4>
    3bd4:	fd 01       	movw	r30, r26
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	f7 cf       	rjmp	.-18     	; 0x3bc8 <free+0xc2>
    3bda:	8d 91       	ld	r24, X+
    3bdc:	9c 91       	ld	r25, X
    3bde:	11 97       	sbiw	r26, 0x01	; 1
    3be0:	9d 01       	movw	r18, r26
    3be2:	2e 5f       	subi	r18, 0xFE	; 254
    3be4:	3f 4f       	sbci	r19, 0xFF	; 255
    3be6:	82 0f       	add	r24, r18
    3be8:	93 1f       	adc	r25, r19
    3bea:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    3bee:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    3bf2:	28 17       	cp	r18, r24
    3bf4:	39 07       	cpc	r19, r25
    3bf6:	69 f4       	brne	.+26     	; 0x3c12 <free+0x10c>
    3bf8:	30 97       	sbiw	r30, 0x00	; 0
    3bfa:	29 f4       	brne	.+10     	; 0x3c06 <free+0x100>
    3bfc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <__flp+0x1>
    3c00:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <__flp>
    3c04:	02 c0       	rjmp	.+4      	; 0x3c0a <free+0x104>
    3c06:	13 82       	std	Z+3, r1	; 0x03
    3c08:	12 82       	std	Z+2, r1	; 0x02
    3c0a:	b0 93 b2 04 	sts	0x04B2, r27	; 0x8004b2 <__brkval+0x1>
    3c0e:	a0 93 b1 04 	sts	0x04B1, r26	; 0x8004b1 <__brkval>
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	08 95       	ret

00003c18 <memcpy>:
    3c18:	fb 01       	movw	r30, r22
    3c1a:	dc 01       	movw	r26, r24
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <memcpy+0xa>
    3c1e:	01 90       	ld	r0, Z+
    3c20:	0d 92       	st	X+, r0
    3c22:	41 50       	subi	r20, 0x01	; 1
    3c24:	50 40       	sbci	r21, 0x00	; 0
    3c26:	d8 f7       	brcc	.-10     	; 0x3c1e <memcpy+0x6>
    3c28:	08 95       	ret

00003c2a <memset>:
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	01 c0       	rjmp	.+2      	; 0x3c30 <memset+0x6>
    3c2e:	6d 93       	st	X+, r22
    3c30:	41 50       	subi	r20, 0x01	; 1
    3c32:	50 40       	sbci	r21, 0x00	; 0
    3c34:	e0 f7       	brcc	.-8      	; 0x3c2e <memset+0x4>
    3c36:	08 95       	ret

00003c38 <eeprom_read_byte>:
    3c38:	f9 99       	sbic	0x1f, 1	; 31
    3c3a:	fe cf       	rjmp	.-4      	; 0x3c38 <eeprom_read_byte>
    3c3c:	92 bd       	out	0x22, r25	; 34
    3c3e:	81 bd       	out	0x21, r24	; 33
    3c40:	f8 9a       	sbi	0x1f, 0	; 31
    3c42:	99 27       	eor	r25, r25
    3c44:	80 b5       	in	r24, 0x20	; 32
    3c46:	08 95       	ret

00003c48 <eeprom_write_byte>:
    3c48:	26 2f       	mov	r18, r22

00003c4a <eeprom_write_r18>:
    3c4a:	f9 99       	sbic	0x1f, 1	; 31
    3c4c:	fe cf       	rjmp	.-4      	; 0x3c4a <eeprom_write_r18>
    3c4e:	1f ba       	out	0x1f, r1	; 31
    3c50:	92 bd       	out	0x22, r25	; 34
    3c52:	81 bd       	out	0x21, r24	; 33
    3c54:	20 bd       	out	0x20, r18	; 32
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	fa 9a       	sbi	0x1f, 2	; 31
    3c5c:	f9 9a       	sbi	0x1f, 1	; 31
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	08 95       	ret

00003c64 <__do_global_dtors>:
    3c64:	10 e0       	ldi	r17, 0x00	; 0
    3c66:	c8 e7       	ldi	r28, 0x78	; 120
    3c68:	d0 e0       	ldi	r29, 0x00	; 0
    3c6a:	04 c0       	rjmp	.+8      	; 0x3c74 <__do_global_dtors+0x10>
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	0e 94 b7 1c 	call	0x396e	; 0x396e <__tablejump2__>
    3c72:	21 96       	adiw	r28, 0x01	; 1
    3c74:	c9 37       	cpi	r28, 0x79	; 121
    3c76:	d1 07       	cpc	r29, r17
    3c78:	c9 f7       	brne	.-14     	; 0x3c6c <__do_global_dtors+0x8>
    3c7a:	f8 94       	cli

00003c7c <__stop_program>:
    3c7c:	ff cf       	rjmp	.-2      	; 0x3c7c <__stop_program>
=======
    4130:	31 e1       	ldi	r19, 0x11	; 17
    4132:	fc 01       	movw	r30, r24
    4134:	30 83       	st	Z, r19
    4136:	31 97       	sbiw	r30, 0x01	; 1
    4138:	22 e2       	ldi	r18, 0x22	; 34
    413a:	20 83       	st	Z, r18
    413c:	31 97       	sbiw	r30, 0x01	; 1
    413e:	a3 e3       	ldi	r26, 0x33	; 51
    4140:	a0 83       	st	Z, r26
    4142:	31 97       	sbiw	r30, 0x01	; 1
    4144:	60 83       	st	Z, r22
    4146:	31 97       	sbiw	r30, 0x01	; 1
    4148:	70 83       	st	Z, r23
    414a:	31 97       	sbiw	r30, 0x01	; 1
    414c:	10 82       	st	Z, r1
    414e:	31 97       	sbiw	r30, 0x01	; 1
    4150:	60 e8       	ldi	r22, 0x80	; 128
    4152:	60 83       	st	Z, r22
    4154:	31 97       	sbiw	r30, 0x01	; 1
    4156:	10 82       	st	Z, r1
    4158:	31 97       	sbiw	r30, 0x01	; 1
    415a:	62 e0       	ldi	r22, 0x02	; 2
    415c:	60 83       	st	Z, r22
    415e:	31 97       	sbiw	r30, 0x01	; 1
    4160:	63 e0       	ldi	r22, 0x03	; 3
    4162:	60 83       	st	Z, r22
    4164:	31 97       	sbiw	r30, 0x01	; 1
    4166:	64 e0       	ldi	r22, 0x04	; 4
    4168:	60 83       	st	Z, r22
    416a:	31 97       	sbiw	r30, 0x01	; 1
    416c:	65 e0       	ldi	r22, 0x05	; 5
    416e:	60 83       	st	Z, r22
    4170:	31 97       	sbiw	r30, 0x01	; 1
    4172:	66 e0       	ldi	r22, 0x06	; 6
    4174:	60 83       	st	Z, r22
    4176:	31 97       	sbiw	r30, 0x01	; 1
    4178:	67 e0       	ldi	r22, 0x07	; 7
    417a:	60 83       	st	Z, r22
    417c:	31 97       	sbiw	r30, 0x01	; 1
    417e:	68 e0       	ldi	r22, 0x08	; 8
    4180:	60 83       	st	Z, r22
    4182:	31 97       	sbiw	r30, 0x01	; 1
    4184:	69 e0       	ldi	r22, 0x09	; 9
    4186:	60 83       	st	Z, r22
    4188:	31 97       	sbiw	r30, 0x01	; 1
    418a:	60 e1       	ldi	r22, 0x10	; 16
    418c:	60 83       	st	Z, r22
    418e:	31 97       	sbiw	r30, 0x01	; 1
    4190:	30 83       	st	Z, r19
    4192:	31 97       	sbiw	r30, 0x01	; 1
    4194:	32 e1       	ldi	r19, 0x12	; 18
    4196:	30 83       	st	Z, r19
    4198:	31 97       	sbiw	r30, 0x01	; 1
    419a:	33 e1       	ldi	r19, 0x13	; 19
    419c:	30 83       	st	Z, r19
    419e:	31 97       	sbiw	r30, 0x01	; 1
    41a0:	34 e1       	ldi	r19, 0x14	; 20
    41a2:	30 83       	st	Z, r19
    41a4:	31 97       	sbiw	r30, 0x01	; 1
    41a6:	35 e1       	ldi	r19, 0x15	; 21
    41a8:	30 83       	st	Z, r19
    41aa:	31 97       	sbiw	r30, 0x01	; 1
    41ac:	36 e1       	ldi	r19, 0x16	; 22
    41ae:	30 83       	st	Z, r19
    41b0:	31 97       	sbiw	r30, 0x01	; 1
    41b2:	37 e1       	ldi	r19, 0x17	; 23
    41b4:	30 83       	st	Z, r19
    41b6:	31 97       	sbiw	r30, 0x01	; 1
    41b8:	38 e1       	ldi	r19, 0x18	; 24
    41ba:	30 83       	st	Z, r19
    41bc:	31 97       	sbiw	r30, 0x01	; 1
    41be:	39 e1       	ldi	r19, 0x19	; 25
    41c0:	30 83       	st	Z, r19
    41c2:	31 97       	sbiw	r30, 0x01	; 1
    41c4:	30 e2       	ldi	r19, 0x20	; 32
    41c6:	30 83       	st	Z, r19
    41c8:	31 97       	sbiw	r30, 0x01	; 1
    41ca:	31 e2       	ldi	r19, 0x21	; 33
    41cc:	30 83       	st	Z, r19
    41ce:	31 97       	sbiw	r30, 0x01	; 1
    41d0:	20 83       	st	Z, r18
    41d2:	31 97       	sbiw	r30, 0x01	; 1
    41d4:	23 e2       	ldi	r18, 0x23	; 35
    41d6:	20 83       	st	Z, r18
    41d8:	31 97       	sbiw	r30, 0x01	; 1
    41da:	40 83       	st	Z, r20
    41dc:	31 97       	sbiw	r30, 0x01	; 1
    41de:	50 83       	st	Z, r21
    41e0:	31 97       	sbiw	r30, 0x01	; 1
    41e2:	26 e2       	ldi	r18, 0x26	; 38
    41e4:	20 83       	st	Z, r18
    41e6:	31 97       	sbiw	r30, 0x01	; 1
    41e8:	27 e2       	ldi	r18, 0x27	; 39
    41ea:	20 83       	st	Z, r18
    41ec:	31 97       	sbiw	r30, 0x01	; 1
    41ee:	28 e2       	ldi	r18, 0x28	; 40
    41f0:	20 83       	st	Z, r18
    41f2:	31 97       	sbiw	r30, 0x01	; 1
    41f4:	29 e2       	ldi	r18, 0x29	; 41
    41f6:	20 83       	st	Z, r18
    41f8:	31 97       	sbiw	r30, 0x01	; 1
    41fa:	20 e3       	ldi	r18, 0x30	; 48
    41fc:	20 83       	st	Z, r18
    41fe:	31 97       	sbiw	r30, 0x01	; 1
    4200:	21 e3       	ldi	r18, 0x31	; 49
    4202:	20 83       	st	Z, r18
    4204:	86 97       	sbiw	r24, 0x26	; 38
    4206:	08 95       	ret

00004208 <xPortStartScheduler>:
    4208:	a8 95       	wdr
    420a:	90 ec       	ldi	r25, 0xC0	; 192
    420c:	88 e1       	ldi	r24, 0x18	; 24
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	a8 95       	wdr
    4214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    421e:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    4222:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    4226:	cd 91       	ld	r28, X+
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	dd 91       	ld	r29, X+
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	ff 91       	pop	r31
    4230:	ef 91       	pop	r30
    4232:	df 91       	pop	r29
    4234:	cf 91       	pop	r28
    4236:	bf 91       	pop	r27
    4238:	af 91       	pop	r26
    423a:	9f 91       	pop	r25
    423c:	8f 91       	pop	r24
    423e:	7f 91       	pop	r23
    4240:	6f 91       	pop	r22
    4242:	5f 91       	pop	r21
    4244:	4f 91       	pop	r20
    4246:	3f 91       	pop	r19
    4248:	2f 91       	pop	r18
    424a:	1f 91       	pop	r17
    424c:	0f 91       	pop	r16
    424e:	ff 90       	pop	r15
    4250:	ef 90       	pop	r14
    4252:	df 90       	pop	r13
    4254:	cf 90       	pop	r12
    4256:	bf 90       	pop	r11
    4258:	af 90       	pop	r10
    425a:	9f 90       	pop	r9
    425c:	8f 90       	pop	r8
    425e:	7f 90       	pop	r7
    4260:	6f 90       	pop	r6
    4262:	5f 90       	pop	r5
    4264:	4f 90       	pop	r4
    4266:	3f 90       	pop	r3
    4268:	2f 90       	pop	r2
    426a:	1f 90       	pop	r1
    426c:	0f 90       	pop	r0
    426e:	0f be       	out	0x3f, r0	; 63
    4270:	0f 90       	pop	r0
    4272:	08 95       	ret
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	08 95       	ret

00004278 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    4278:	0f 92       	push	r0
    427a:	0f b6       	in	r0, 0x3f	; 63
    427c:	f8 94       	cli
    427e:	0f 92       	push	r0
    4280:	1f 92       	push	r1
    4282:	11 24       	eor	r1, r1
    4284:	2f 92       	push	r2
    4286:	3f 92       	push	r3
    4288:	4f 92       	push	r4
    428a:	5f 92       	push	r5
    428c:	6f 92       	push	r6
    428e:	7f 92       	push	r7
    4290:	8f 92       	push	r8
    4292:	9f 92       	push	r9
    4294:	af 92       	push	r10
    4296:	bf 92       	push	r11
    4298:	cf 92       	push	r12
    429a:	df 92       	push	r13
    429c:	ef 92       	push	r14
    429e:	ff 92       	push	r15
    42a0:	0f 93       	push	r16
    42a2:	1f 93       	push	r17
    42a4:	2f 93       	push	r18
    42a6:	3f 93       	push	r19
    42a8:	4f 93       	push	r20
    42aa:	5f 93       	push	r21
    42ac:	6f 93       	push	r22
    42ae:	7f 93       	push	r23
    42b0:	8f 93       	push	r24
    42b2:	9f 93       	push	r25
    42b4:	af 93       	push	r26
    42b6:	bf 93       	push	r27
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	ef 93       	push	r30
    42be:	ff 93       	push	r31
    42c0:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    42c4:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    42c8:	0d b6       	in	r0, 0x3d	; 61
    42ca:	0d 92       	st	X+, r0
    42cc:	0e b6       	in	r0, 0x3e	; 62
    42ce:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    42d0:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    42d4:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    42d8:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    42dc:	cd 91       	ld	r28, X+
    42de:	cd bf       	out	0x3d, r28	; 61
    42e0:	dd 91       	ld	r29, X+
    42e2:	de bf       	out	0x3e, r29	; 62
    42e4:	ff 91       	pop	r31
    42e6:	ef 91       	pop	r30
    42e8:	df 91       	pop	r29
    42ea:	cf 91       	pop	r28
    42ec:	bf 91       	pop	r27
    42ee:	af 91       	pop	r26
    42f0:	9f 91       	pop	r25
    42f2:	8f 91       	pop	r24
    42f4:	7f 91       	pop	r23
    42f6:	6f 91       	pop	r22
    42f8:	5f 91       	pop	r21
    42fa:	4f 91       	pop	r20
    42fc:	3f 91       	pop	r19
    42fe:	2f 91       	pop	r18
    4300:	1f 91       	pop	r17
    4302:	0f 91       	pop	r16
    4304:	ff 90       	pop	r15
    4306:	ef 90       	pop	r14
    4308:	df 90       	pop	r13
    430a:	cf 90       	pop	r12
    430c:	bf 90       	pop	r11
    430e:	af 90       	pop	r10
    4310:	9f 90       	pop	r9
    4312:	8f 90       	pop	r8
    4314:	7f 90       	pop	r7
    4316:	6f 90       	pop	r6
    4318:	5f 90       	pop	r5
    431a:	4f 90       	pop	r4
    431c:	3f 90       	pop	r3
    431e:	2f 90       	pop	r2
    4320:	1f 90       	pop	r1
    4322:	0f 90       	pop	r0
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    4328:	08 95       	ret

0000432a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    432a:	0f 92       	push	r0
    432c:	0f b6       	in	r0, 0x3f	; 63
    432e:	f8 94       	cli
    4330:	0f 92       	push	r0
    4332:	1f 92       	push	r1
    4334:	11 24       	eor	r1, r1
    4336:	2f 92       	push	r2
    4338:	3f 92       	push	r3
    433a:	4f 92       	push	r4
    433c:	5f 92       	push	r5
    433e:	6f 92       	push	r6
    4340:	7f 92       	push	r7
    4342:	8f 92       	push	r8
    4344:	9f 92       	push	r9
    4346:	af 92       	push	r10
    4348:	bf 92       	push	r11
    434a:	cf 92       	push	r12
    434c:	df 92       	push	r13
    434e:	ef 92       	push	r14
    4350:	ff 92       	push	r15
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	2f 93       	push	r18
    4358:	3f 93       	push	r19
    435a:	4f 93       	push	r20
    435c:	5f 93       	push	r21
    435e:	6f 93       	push	r22
    4360:	7f 93       	push	r23
    4362:	8f 93       	push	r24
    4364:	9f 93       	push	r25
    4366:	af 93       	push	r26
    4368:	bf 93       	push	r27
    436a:	cf 93       	push	r28
    436c:	df 93       	push	r29
    436e:	ef 93       	push	r30
    4370:	ff 93       	push	r31
    4372:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    4376:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    437a:	0d b6       	in	r0, 0x3d	; 61
    437c:	0d 92       	st	X+, r0
    437e:	0e b6       	in	r0, 0x3e	; 62
    4380:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    4382:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    4384:	0e 94 70 18 	call	0x30e0	; 0x30e0 <xTaskIncrementTick>
    4388:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    438a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    438e:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <pxCurrentTCB>
    4392:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <pxCurrentTCB+0x1>
    4396:	cd 91       	ld	r28, X+
    4398:	cd bf       	out	0x3d, r28	; 61
    439a:	dd 91       	ld	r29, X+
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	ff 91       	pop	r31
    43a0:	ef 91       	pop	r30
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	bf 91       	pop	r27
    43a8:	af 91       	pop	r26
    43aa:	9f 91       	pop	r25
    43ac:	8f 91       	pop	r24
    43ae:	7f 91       	pop	r23
    43b0:	6f 91       	pop	r22
    43b2:	5f 91       	pop	r21
    43b4:	4f 91       	pop	r20
    43b6:	3f 91       	pop	r19
    43b8:	2f 91       	pop	r18
    43ba:	1f 91       	pop	r17
    43bc:	0f 91       	pop	r16
    43be:	ff 90       	pop	r15
    43c0:	ef 90       	pop	r14
    43c2:	df 90       	pop	r13
    43c4:	cf 90       	pop	r12
    43c6:	bf 90       	pop	r11
    43c8:	af 90       	pop	r10
    43ca:	9f 90       	pop	r9
    43cc:	8f 90       	pop	r8
    43ce:	7f 90       	pop	r7
    43d0:	6f 90       	pop	r6
    43d2:	5f 90       	pop	r5
    43d4:	4f 90       	pop	r4
    43d6:	3f 90       	pop	r3
    43d8:	2f 90       	pop	r2
    43da:	1f 90       	pop	r1
    43dc:	0f 90       	pop	r0
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    43e2:	08 95       	ret

000043e4 <__vector_6>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    43e4:	0e 94 95 21 	call	0x432a	; 0x432a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    43e8:	18 95       	reti

000043ea <_ZN14FreqCountClass5beginEj>:
static uint16_t gate_index;


void FreqCountClass::begin(uint16_t msec)
{
	if (msec < 1) return;
    43ea:	00 97       	sbiw	r24, 0x00	; 0
    43ec:	09 f4       	brne	.+2      	; 0x43f0 <_ZN14FreqCountClass5beginEj+0x6>
    43ee:	74 c0       	rjmp	.+232    	; 0x44d8 <L_130_loop+0xc>
	gate_index = 0;
    43f0:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    43f4:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
	count_msw = 0;
    43f8:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <_ZL9count_msw+0x1>
    43fc:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <_ZL9count_msw>
	count_prev = 0;
    4400:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <_ZL10count_prev>
    4404:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <_ZL10count_prev+0x1>
    4408:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <_ZL10count_prev+0x2>
    440c:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <_ZL10count_prev+0x3>
	count_ready = 0;
    4410:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>

static uint8_t saveTCCR1A, saveTCCR1B;

static inline void counter_init(void)
{
	saveTCCR1A = TCCR1A;
    4414:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4418:	20 93 b0 04 	sts	0x04B0, r18	; 0x8004b0 <_ZL10saveTCCR1A>
	saveTCCR1B = TCCR1B;
    441c:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    4420:	20 93 af 04 	sts	0x04AF, r18	; 0x8004af <_ZL10saveTCCR1B>
	TCCR1B = 0;
    4424:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1A = 0;
    4428:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCNT1 = 0;
    442c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4430:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 = (1<<TOV1);
    4434:	21 e0       	ldi	r18, 0x01	; 1
    4436:	26 bb       	out	0x16, r18	; 22
	TIMSK1 = 0;
    4438:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

static inline uint16_t timer_init(uint16_t msec)
{
	uint16_t gate_len;

	saveTCCR2A = TCCR2A;
    443c:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4440:	20 93 ae 04 	sts	0x04AE, r18	; 0x8004ae <_ZL10saveTCCR2A>
	saveTCCR2B = TCCR2B;
    4444:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    4448:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <_ZL10saveTCCR2B>
	TCCR2B = 0;
    444c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCCR2A = (1<<WGM21);
    4450:	22 e0       	ldi	r18, 0x02	; 2
    4452:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	if ((msec & 7) == 0) {
    4456:	9c 01       	movw	r18, r24
    4458:	27 70       	andi	r18, 0x07	; 7
    445a:	33 27       	eor	r19, r19
    445c:	23 2b       	or	r18, r19
    445e:	51 f4       	brne	.+20     	; 0x4474 <_ZN14FreqCountClass5beginEj+0x8a>
		gate_len = msec >> 3;
    4460:	43 e0       	ldi	r20, 0x03	; 3
    4462:	96 95       	lsr	r25
    4464:	87 95       	ror	r24
    4466:	4a 95       	dec	r20
    4468:	e1 f7       	brne	.-8      	; 0x4462 <_ZN14FreqCountClass5beginEj+0x78>
		OCR2A = TIMER2_OCR2A_8MS_VAL;
    446a:	2c e7       	ldi	r18, 0x7C	; 124
    446c:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		startTCCR2B = TIMER2_TCCR2B_8MS_VAL;
    4470:	27 e0       	ldi	r18, 0x07	; 7
    4472:	18 c0       	rjmp	.+48     	; 0x44a4 <_ZN14FreqCountClass5beginEj+0xba>
	} else if ((msec & 3) == 0) {
    4474:	9c 01       	movw	r18, r24
    4476:	23 70       	andi	r18, 0x03	; 3
    4478:	33 27       	eor	r19, r19
    447a:	23 2b       	or	r18, r19
    447c:	31 f4       	brne	.+12     	; 0x448a <_ZN14FreqCountClass5beginEj+0xa0>
		gate_len = msec >> 2;
    447e:	96 95       	lsr	r25
    4480:	87 95       	ror	r24
    4482:	96 95       	lsr	r25
    4484:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_4MS_VAL;
    4486:	29 ef       	ldi	r18, 0xF9	; 249
    4488:	05 c0       	rjmp	.+10     	; 0x4494 <_ZN14FreqCountClass5beginEj+0xaa>
		startTCCR2B = TIMER2_TCCR2B_4MS_VAL;
	} else if ((msec & 1) == 0) {
    448a:	80 fd       	sbrc	r24, 0
    448c:	07 c0       	rjmp	.+14     	; 0x449c <_ZN14FreqCountClass5beginEj+0xb2>
		gate_len = msec >> 1;
    448e:	96 95       	lsr	r25
    4490:	87 95       	ror	r24
		OCR2A = TIMER2_OCR2A_2MS_VAL;
    4492:	2c e7       	ldi	r18, 0x7C	; 124
    4494:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		startTCCR2B = TIMER2_TCCR2B_2MS_VAL;
    4498:	26 e0       	ldi	r18, 0x06	; 6
    449a:	04 c0       	rjmp	.+8      	; 0x44a4 <_ZN14FreqCountClass5beginEj+0xba>
	} else {
		gate_len = msec;
		OCR2A = TIMER2_OCR2A_1MS_VAL;
    449c:	2c e7       	ldi	r18, 0x7C	; 124
    449e:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		startTCCR2B = TIMER2_TCCR2B_1MS_VAL;
    44a2:	25 e0       	ldi	r18, 0x05	; 5
    44a4:	20 93 ac 04 	sts	0x04AC, r18	; 0x8004ac <_ZL11startTCCR2B>
	}
	TIFR2 = (1<<OCF2A);
    44a8:	22 e0       	ldi	r18, 0x02	; 2
    44aa:	27 bb       	out	0x17, r18	; 23
	TCNT2 = 0;
    44ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	counter_init();
	gate_length = timer_init(msec);
    44b0:	90 93 a0 04 	sts	0x04A0, r25	; 0x8004a0 <_ZL11gate_length+0x1>
    44b4:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <_ZL11gate_length>
	uint8_t status = SREG;
    44b8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    44ba:	f8 94       	cli
	return gate_len;
}

static inline void timer_start(void)
{
	GTCCR = (1<<PSRASY);
    44bc:	23 bd       	out	0x23, r18	; 35
	TCCR2B = startTCCR2B;
    44be:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <_ZL11startTCCR2B>
    44c2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1<<OCIE2A);
    44c6:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
		"L_%=_loop:"
		"subi   %0, 1"		"\n\t"
		"brne   L_%=_loop"	"\n\t"
		: "+d" (cycles_times_3)
		: "0" (cycles_times_3)
	);
    44ca:	8b e0       	ldi	r24, 0x0B	; 11

000044cc <L_130_loop>:
    44cc:	81 50       	subi	r24, 0x01	; 1
    44ce:	f1 f7       	brne	.-4      	; 0x44cc <L_130_loop>
	TIMSK1 = 0;
}

static inline void counter_start(void)
{
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
    44d0:	87 e0       	ldi	r24, 0x07	; 7
    44d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	timer_start();
	timer_isr_latency_delay();
	counter_start();
	SREG = status;
    44d6:	9f bf       	out	0x3f, r25	; 63
    44d8:	08 95       	ret

000044da <_ZN14FreqCountClass9availableEv>:
}

uint8_t FreqCountClass::available(void)
{
	return count_ready;
    44da:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <_ZL11count_ready>
}
    44de:	08 95       	ret

000044e0 <_ZN14FreqCountClass4readEv>:
uint32_t FreqCountClass::read(void)
{
	uint32_t count;
	uint8_t status;

	status = SREG;
    44e0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    44e2:	f8 94       	cli
	count = count_output;
    44e4:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <_ZL12count_output>
    44e8:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <_ZL12count_output+0x1>
    44ec:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <_ZL12count_output+0x2>
    44f0:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <_ZL12count_output+0x3>
	count_ready = 0;
    44f4:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <_ZL11count_ready>
	SREG = status;
    44f8:	2f bf       	out	0x3f, r18	; 63
	return count;
}
    44fa:	08 95       	ret

000044fc <_ZN14FreqCountClass3endEv>:
	TIMSK2 = (1<<OCIE2A);
}

static inline void timer_shutdown(void)
{
	TCCR2B = 0;
    44fc:	e1 eb       	ldi	r30, 0xB1	; 177
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	10 82       	st	Z, r1
	TIMSK2 = 0;
    4502:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCCR2A = saveTCCR2A;
    4506:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <_ZL10saveTCCR2A>
    450a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B = saveTCCR2B;
    450e:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <_ZL10saveTCCR2B>
    4512:	80 83       	st	Z, r24
	TCCR1B = (1<<CS12) | (1<<CS11) | (1<<CS10);
}

static inline void counter_shutdown(void)
{
	TCCR1B = 0;
    4514:	e1 e8       	ldi	r30, 0x81	; 129
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	10 82       	st	Z, r1
	TCCR1A = saveTCCR1A;
    451a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <_ZL10saveTCCR1A>
    451e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = saveTCCR1B;
    4522:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <_ZL10saveTCCR1B>
    4526:	80 83       	st	Z, r24
    4528:	08 95       	ret

0000452a <__vector_7>:
	counter_shutdown();
}


ISR(TIMER_ISR_VECTOR)
{
    452a:	1f 92       	push	r1
    452c:	0f 92       	push	r0
    452e:	0f b6       	in	r0, 0x3f	; 63
    4530:	0f 92       	push	r0
    4532:	11 24       	eor	r1, r1
    4534:	0f 93       	push	r16
    4536:	1f 93       	push	r17
    4538:	2f 93       	push	r18
    453a:	3f 93       	push	r19
    453c:	4f 93       	push	r20
    453e:	5f 93       	push	r21
    4540:	6f 93       	push	r22
    4542:	7f 93       	push	r23
    4544:	8f 93       	push	r24
    4546:	9f 93       	push	r25
    4548:	af 93       	push	r26
    454a:	bf 93       	push	r27
}

static inline uint16_t counter_read(void)
{
	return TCNT1;
    454c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    4550:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	uint16_t count_lsw;
	uint32_t count;
	uint16_t index, length;

	count_lsw = counter_read();
	if (counter_overflow()) {
    4554:	b0 9b       	sbis	0x16, 0	; 22
    4556:	0b c0       	rjmp	.+22     	; 0x456e <__vector_7+0x44>
	return TIFR1 & (1<<TOV1);
}

static inline void counter_overflow_reset(void)
{
	TIFR1 = (1<<TOV1);
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	86 bb       	out	0x16, r24	; 22
		counter_overflow_reset();
		count_msw++;
    455c:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    4560:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    4564:	01 96       	adiw	r24, 0x01	; 1
    4566:	90 93 ab 04 	sts	0x04AB, r25	; 0x8004ab <_ZL9count_msw+0x1>
    456a:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <_ZL9count_msw>
	}
	index = gate_index + 1;
    456e:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <_ZL10gate_index>
    4572:	90 91 9e 04 	lds	r25, 0x049E	; 0x80049e <_ZL10gate_index+0x1>
    4576:	01 96       	adiw	r24, 0x01	; 1
	length = gate_length;
	if (index >= length) {
    4578:	40 91 9f 04 	lds	r20, 0x049F	; 0x80049f <_ZL11gate_length>
    457c:	50 91 a0 04 	lds	r21, 0x04A0	; 0x8004a0 <_ZL11gate_length+0x1>
    4580:	84 17       	cp	r24, r20
    4582:	95 07       	cpc	r25, r21
    4584:	98 f1       	brcs	.+102    	; 0x45ec <__vector_7+0xc2>
		gate_index = 0;
    4586:	10 92 9e 04 	sts	0x049E, r1	; 0x80049e <_ZL10gate_index+0x1>
    458a:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <_ZL10gate_index>
		count = ((uint32_t)count_msw << 16) + count_lsw;
    458e:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <_ZL9count_msw>
    4592:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <_ZL9count_msw+0x1>
    4596:	a0 e0       	ldi	r26, 0x00	; 0
    4598:	b0 e0       	ldi	r27, 0x00	; 0
    459a:	dc 01       	movw	r26, r24
    459c:	99 27       	eor	r25, r25
    459e:	88 27       	eor	r24, r24
    45a0:	82 0f       	add	r24, r18
    45a2:	93 1f       	adc	r25, r19
    45a4:	a1 1d       	adc	r26, r1
    45a6:	b1 1d       	adc	r27, r1
		count_output = count - count_prev;
    45a8:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <_ZL10count_prev>
    45ac:	50 91 a7 04 	lds	r21, 0x04A7	; 0x8004a7 <_ZL10count_prev+0x1>
    45b0:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <_ZL10count_prev+0x2>
    45b4:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <_ZL10count_prev+0x3>
    45b8:	8c 01       	movw	r16, r24
    45ba:	9d 01       	movw	r18, r26
    45bc:	04 1b       	sub	r16, r20
    45be:	15 0b       	sbc	r17, r21
    45c0:	26 0b       	sbc	r18, r22
    45c2:	37 0b       	sbc	r19, r23
    45c4:	00 93 a2 04 	sts	0x04A2, r16	; 0x8004a2 <_ZL12count_output>
    45c8:	10 93 a3 04 	sts	0x04A3, r17	; 0x8004a3 <_ZL12count_output+0x1>
    45cc:	20 93 a4 04 	sts	0x04A4, r18	; 0x8004a4 <_ZL12count_output+0x2>
    45d0:	30 93 a5 04 	sts	0x04A5, r19	; 0x8004a5 <_ZL12count_output+0x3>
		count_prev = count;
    45d4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <_ZL10count_prev>
    45d8:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <_ZL10count_prev+0x1>
    45dc:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <_ZL10count_prev+0x2>
    45e0:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <_ZL10count_prev+0x3>
		count_ready = 1;
    45e4:	81 e0       	ldi	r24, 0x01	; 1
    45e6:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_ZL11count_ready>
    45ea:	04 c0       	rjmp	.+8      	; 0x45f4 <__vector_7+0xca>
		restore_other_interrupts();
	} else {
		if (index == length - 1) disable_other_interrupts();
		gate_index = index;
    45ec:	90 93 9e 04 	sts	0x049E, r25	; 0x80049e <_ZL10gate_index+0x1>
    45f0:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <_ZL10gate_index>
	}
}
    45f4:	bf 91       	pop	r27
    45f6:	af 91       	pop	r26
    45f8:	9f 91       	pop	r25
    45fa:	8f 91       	pop	r24
    45fc:	7f 91       	pop	r23
    45fe:	6f 91       	pop	r22
    4600:	5f 91       	pop	r21
    4602:	4f 91       	pop	r20
    4604:	3f 91       	pop	r19
    4606:	2f 91       	pop	r18
    4608:	1f 91       	pop	r17
    460a:	0f 91       	pop	r16
    460c:	0f 90       	pop	r0
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	0f 90       	pop	r0
    4612:	1f 90       	pop	r1
    4614:	18 95       	reti

00004616 <__unordsf2>:
    4616:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__fp_cmp>
    461a:	88 0b       	sbc	r24, r24
    461c:	99 0b       	sbc	r25, r25
    461e:	08 95       	ret

00004620 <__divmodhi4>:
    4620:	97 fb       	bst	r25, 7
    4622:	07 2e       	mov	r0, r23
    4624:	16 f4       	brtc	.+4      	; 0x462a <__divmodhi4+0xa>
    4626:	00 94       	com	r0
    4628:	07 d0       	rcall	.+14     	; 0x4638 <__divmodhi4_neg1>
    462a:	77 fd       	sbrc	r23, 7
    462c:	09 d0       	rcall	.+18     	; 0x4640 <__divmodhi4_neg2>
    462e:	0e 94 76 23 	call	0x46ec	; 0x46ec <__udivmodhi4>
    4632:	07 fc       	sbrc	r0, 7
    4634:	05 d0       	rcall	.+10     	; 0x4640 <__divmodhi4_neg2>
    4636:	3e f4       	brtc	.+14     	; 0x4646 <__divmodhi4_exit>

00004638 <__divmodhi4_neg1>:
    4638:	90 95       	com	r25
    463a:	81 95       	neg	r24
    463c:	9f 4f       	sbci	r25, 0xFF	; 255
    463e:	08 95       	ret

00004640 <__divmodhi4_neg2>:
    4640:	70 95       	com	r23
    4642:	61 95       	neg	r22
    4644:	7f 4f       	sbci	r23, 0xFF	; 255

00004646 <__divmodhi4_exit>:
    4646:	08 95       	ret

00004648 <__udivmodsi4>:
    4648:	a1 e2       	ldi	r26, 0x21	; 33
    464a:	1a 2e       	mov	r1, r26
    464c:	aa 1b       	sub	r26, r26
    464e:	bb 1b       	sub	r27, r27
    4650:	fd 01       	movw	r30, r26
    4652:	0d c0       	rjmp	.+26     	; 0x466e <__udivmodsi4_ep>

00004654 <__udivmodsi4_loop>:
    4654:	aa 1f       	adc	r26, r26
    4656:	bb 1f       	adc	r27, r27
    4658:	ee 1f       	adc	r30, r30
    465a:	ff 1f       	adc	r31, r31
    465c:	a2 17       	cp	r26, r18
    465e:	b3 07       	cpc	r27, r19
    4660:	e4 07       	cpc	r30, r20
    4662:	f5 07       	cpc	r31, r21
    4664:	20 f0       	brcs	.+8      	; 0x466e <__udivmodsi4_ep>
    4666:	a2 1b       	sub	r26, r18
    4668:	b3 0b       	sbc	r27, r19
    466a:	e4 0b       	sbc	r30, r20
    466c:	f5 0b       	sbc	r31, r21

0000466e <__udivmodsi4_ep>:
    466e:	66 1f       	adc	r22, r22
    4670:	77 1f       	adc	r23, r23
    4672:	88 1f       	adc	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	1a 94       	dec	r1
    4678:	69 f7       	brne	.-38     	; 0x4654 <__udivmodsi4_loop>
    467a:	60 95       	com	r22
    467c:	70 95       	com	r23
    467e:	80 95       	com	r24
    4680:	90 95       	com	r25
    4682:	9b 01       	movw	r18, r22
    4684:	ac 01       	movw	r20, r24
    4686:	bd 01       	movw	r22, r26
    4688:	cf 01       	movw	r24, r30
    468a:	08 95       	ret

0000468c <__divmodsi4>:
    468c:	05 2e       	mov	r0, r21
    468e:	97 fb       	bst	r25, 7
    4690:	1e f4       	brtc	.+6      	; 0x4698 <__divmodsi4+0xc>
    4692:	00 94       	com	r0
    4694:	0e 94 5d 23 	call	0x46ba	; 0x46ba <__negsi2>
    4698:	57 fd       	sbrc	r21, 7
    469a:	07 d0       	rcall	.+14     	; 0x46aa <__divmodsi4_neg2>
    469c:	0e 94 24 23 	call	0x4648	; 0x4648 <__udivmodsi4>
    46a0:	07 fc       	sbrc	r0, 7
    46a2:	03 d0       	rcall	.+6      	; 0x46aa <__divmodsi4_neg2>
    46a4:	4e f4       	brtc	.+18     	; 0x46b8 <__divmodsi4_exit>
    46a6:	0c 94 5d 23 	jmp	0x46ba	; 0x46ba <__negsi2>

000046aa <__divmodsi4_neg2>:
    46aa:	50 95       	com	r21
    46ac:	40 95       	com	r20
    46ae:	30 95       	com	r19
    46b0:	21 95       	neg	r18
    46b2:	3f 4f       	sbci	r19, 0xFF	; 255
    46b4:	4f 4f       	sbci	r20, 0xFF	; 255
    46b6:	5f 4f       	sbci	r21, 0xFF	; 255

000046b8 <__divmodsi4_exit>:
    46b8:	08 95       	ret

000046ba <__negsi2>:
    46ba:	90 95       	com	r25
    46bc:	80 95       	com	r24
    46be:	70 95       	com	r23
    46c0:	61 95       	neg	r22
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	8f 4f       	sbci	r24, 0xFF	; 255
    46c6:	9f 4f       	sbci	r25, 0xFF	; 255
    46c8:	08 95       	ret

000046ca <__tablejump2__>:
    46ca:	ee 0f       	add	r30, r30
    46cc:	ff 1f       	adc	r31, r31
    46ce:	05 90       	lpm	r0, Z+
    46d0:	f4 91       	lpm	r31, Z
    46d2:	e0 2d       	mov	r30, r0
    46d4:	09 94       	ijmp

000046d6 <__muluhisi3>:
    46d6:	0e 94 8a 23 	call	0x4714	; 0x4714 <__umulhisi3>
    46da:	a5 9f       	mul	r26, r21
    46dc:	90 0d       	add	r25, r0
    46de:	b4 9f       	mul	r27, r20
    46e0:	90 0d       	add	r25, r0
    46e2:	a4 9f       	mul	r26, r20
    46e4:	80 0d       	add	r24, r0
    46e6:	91 1d       	adc	r25, r1
    46e8:	11 24       	eor	r1, r1
    46ea:	08 95       	ret

000046ec <__udivmodhi4>:
    46ec:	aa 1b       	sub	r26, r26
    46ee:	bb 1b       	sub	r27, r27
    46f0:	51 e1       	ldi	r21, 0x11	; 17
    46f2:	07 c0       	rjmp	.+14     	; 0x4702 <__udivmodhi4_ep>

000046f4 <__udivmodhi4_loop>:
    46f4:	aa 1f       	adc	r26, r26
    46f6:	bb 1f       	adc	r27, r27
    46f8:	a6 17       	cp	r26, r22
    46fa:	b7 07       	cpc	r27, r23
    46fc:	10 f0       	brcs	.+4      	; 0x4702 <__udivmodhi4_ep>
    46fe:	a6 1b       	sub	r26, r22
    4700:	b7 0b       	sbc	r27, r23

00004702 <__udivmodhi4_ep>:
    4702:	88 1f       	adc	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	5a 95       	dec	r21
    4708:	a9 f7       	brne	.-22     	; 0x46f4 <__udivmodhi4_loop>
    470a:	80 95       	com	r24
    470c:	90 95       	com	r25
    470e:	bc 01       	movw	r22, r24
    4710:	cd 01       	movw	r24, r26
    4712:	08 95       	ret

00004714 <__umulhisi3>:
    4714:	a2 9f       	mul	r26, r18
    4716:	b0 01       	movw	r22, r0
    4718:	b3 9f       	mul	r27, r19
    471a:	c0 01       	movw	r24, r0
    471c:	a3 9f       	mul	r26, r19
    471e:	70 0d       	add	r23, r0
    4720:	81 1d       	adc	r24, r1
    4722:	11 24       	eor	r1, r1
    4724:	91 1d       	adc	r25, r1
    4726:	b2 9f       	mul	r27, r18
    4728:	70 0d       	add	r23, r0
    472a:	81 1d       	adc	r24, r1
    472c:	11 24       	eor	r1, r1
    472e:	91 1d       	adc	r25, r1
    4730:	08 95       	ret

00004732 <malloc>:
    4732:	0f 93       	push	r16
    4734:	1f 93       	push	r17
    4736:	cf 93       	push	r28
    4738:	df 93       	push	r29
    473a:	82 30       	cpi	r24, 0x02	; 2
    473c:	91 05       	cpc	r25, r1
    473e:	10 f4       	brcc	.+4      	; 0x4744 <malloc+0x12>
    4740:	82 e0       	ldi	r24, 0x02	; 2
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	e0 91 b3 04 	lds	r30, 0x04B3	; 0x8004b3 <__flp>
    4748:	f0 91 b4 04 	lds	r31, 0x04B4	; 0x8004b4 <__flp+0x1>
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	a0 e0       	ldi	r26, 0x00	; 0
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	30 97       	sbiw	r30, 0x00	; 0
    4756:	19 f1       	breq	.+70     	; 0x479e <malloc+0x6c>
    4758:	40 81       	ld	r20, Z
    475a:	51 81       	ldd	r21, Z+1	; 0x01
    475c:	02 81       	ldd	r16, Z+2	; 0x02
    475e:	13 81       	ldd	r17, Z+3	; 0x03
    4760:	48 17       	cp	r20, r24
    4762:	59 07       	cpc	r21, r25
    4764:	c8 f0       	brcs	.+50     	; 0x4798 <malloc+0x66>
    4766:	84 17       	cp	r24, r20
    4768:	95 07       	cpc	r25, r21
    476a:	69 f4       	brne	.+26     	; 0x4786 <malloc+0x54>
    476c:	10 97       	sbiw	r26, 0x00	; 0
    476e:	31 f0       	breq	.+12     	; 0x477c <malloc+0x4a>
    4770:	12 96       	adiw	r26, 0x02	; 2
    4772:	0c 93       	st	X, r16
    4774:	12 97       	sbiw	r26, 0x02	; 2
    4776:	13 96       	adiw	r26, 0x03	; 3
    4778:	1c 93       	st	X, r17
    477a:	27 c0       	rjmp	.+78     	; 0x47ca <malloc+0x98>
    477c:	00 93 b3 04 	sts	0x04B3, r16	; 0x8004b3 <__flp>
    4780:	10 93 b4 04 	sts	0x04B4, r17	; 0x8004b4 <__flp+0x1>
    4784:	22 c0       	rjmp	.+68     	; 0x47ca <malloc+0x98>
    4786:	21 15       	cp	r18, r1
    4788:	31 05       	cpc	r19, r1
    478a:	19 f0       	breq	.+6      	; 0x4792 <malloc+0x60>
    478c:	42 17       	cp	r20, r18
    478e:	53 07       	cpc	r21, r19
    4790:	18 f4       	brcc	.+6      	; 0x4798 <malloc+0x66>
    4792:	9a 01       	movw	r18, r20
    4794:	bd 01       	movw	r22, r26
    4796:	ef 01       	movw	r28, r30
    4798:	df 01       	movw	r26, r30
    479a:	f8 01       	movw	r30, r16
    479c:	db cf       	rjmp	.-74     	; 0x4754 <malloc+0x22>
    479e:	21 15       	cp	r18, r1
    47a0:	31 05       	cpc	r19, r1
    47a2:	f9 f0       	breq	.+62     	; 0x47e2 <malloc+0xb0>
    47a4:	28 1b       	sub	r18, r24
    47a6:	39 0b       	sbc	r19, r25
    47a8:	24 30       	cpi	r18, 0x04	; 4
    47aa:	31 05       	cpc	r19, r1
    47ac:	80 f4       	brcc	.+32     	; 0x47ce <malloc+0x9c>
    47ae:	8a 81       	ldd	r24, Y+2	; 0x02
    47b0:	9b 81       	ldd	r25, Y+3	; 0x03
    47b2:	61 15       	cp	r22, r1
    47b4:	71 05       	cpc	r23, r1
    47b6:	21 f0       	breq	.+8      	; 0x47c0 <malloc+0x8e>
    47b8:	fb 01       	movw	r30, r22
    47ba:	93 83       	std	Z+3, r25	; 0x03
    47bc:	82 83       	std	Z+2, r24	; 0x02
    47be:	04 c0       	rjmp	.+8      	; 0x47c8 <malloc+0x96>
    47c0:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <__flp+0x1>
    47c4:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <__flp>
    47c8:	fe 01       	movw	r30, r28
    47ca:	32 96       	adiw	r30, 0x02	; 2
    47cc:	44 c0       	rjmp	.+136    	; 0x4856 <malloc+0x124>
    47ce:	fe 01       	movw	r30, r28
    47d0:	e2 0f       	add	r30, r18
    47d2:	f3 1f       	adc	r31, r19
    47d4:	81 93       	st	Z+, r24
    47d6:	91 93       	st	Z+, r25
    47d8:	22 50       	subi	r18, 0x02	; 2
    47da:	31 09       	sbc	r19, r1
    47dc:	39 83       	std	Y+1, r19	; 0x01
    47de:	28 83       	st	Y, r18
    47e0:	3a c0       	rjmp	.+116    	; 0x4856 <malloc+0x124>
    47e2:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    47e6:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    47ea:	23 2b       	or	r18, r19
    47ec:	41 f4       	brne	.+16     	; 0x47fe <malloc+0xcc>
    47ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    47f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    47f6:	30 93 b2 04 	sts	0x04B2, r19	; 0x8004b2 <__brkval+0x1>
    47fa:	20 93 b1 04 	sts	0x04B1, r18	; 0x8004b1 <__brkval>
    47fe:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4802:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4806:	21 15       	cp	r18, r1
    4808:	31 05       	cpc	r19, r1
    480a:	41 f4       	brne	.+16     	; 0x481c <malloc+0xea>
    480c:	2d b7       	in	r18, 0x3d	; 61
    480e:	3e b7       	in	r19, 0x3e	; 62
    4810:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4814:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4818:	24 1b       	sub	r18, r20
    481a:	35 0b       	sbc	r19, r21
    481c:	e0 91 b1 04 	lds	r30, 0x04B1	; 0x8004b1 <__brkval>
    4820:	f0 91 b2 04 	lds	r31, 0x04B2	; 0x8004b2 <__brkval+0x1>
    4824:	e2 17       	cp	r30, r18
    4826:	f3 07       	cpc	r31, r19
    4828:	a0 f4       	brcc	.+40     	; 0x4852 <malloc+0x120>
    482a:	2e 1b       	sub	r18, r30
    482c:	3f 0b       	sbc	r19, r31
    482e:	28 17       	cp	r18, r24
    4830:	39 07       	cpc	r19, r25
    4832:	78 f0       	brcs	.+30     	; 0x4852 <malloc+0x120>
    4834:	ac 01       	movw	r20, r24
    4836:	4e 5f       	subi	r20, 0xFE	; 254
    4838:	5f 4f       	sbci	r21, 0xFF	; 255
    483a:	24 17       	cp	r18, r20
    483c:	35 07       	cpc	r19, r21
    483e:	48 f0       	brcs	.+18     	; 0x4852 <malloc+0x120>
    4840:	4e 0f       	add	r20, r30
    4842:	5f 1f       	adc	r21, r31
    4844:	50 93 b2 04 	sts	0x04B2, r21	; 0x8004b2 <__brkval+0x1>
    4848:	40 93 b1 04 	sts	0x04B1, r20	; 0x8004b1 <__brkval>
    484c:	81 93       	st	Z+, r24
    484e:	91 93       	st	Z+, r25
    4850:	02 c0       	rjmp	.+4      	; 0x4856 <malloc+0x124>
    4852:	e0 e0       	ldi	r30, 0x00	; 0
    4854:	f0 e0       	ldi	r31, 0x00	; 0
    4856:	cf 01       	movw	r24, r30
    4858:	df 91       	pop	r29
    485a:	cf 91       	pop	r28
    485c:	1f 91       	pop	r17
    485e:	0f 91       	pop	r16
    4860:	08 95       	ret

00004862 <free>:
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	09 f4       	brne	.+2      	; 0x486c <free+0xa>
    486a:	81 c0       	rjmp	.+258    	; 0x496e <free+0x10c>
    486c:	fc 01       	movw	r30, r24
    486e:	32 97       	sbiw	r30, 0x02	; 2
    4870:	13 82       	std	Z+3, r1	; 0x03
    4872:	12 82       	std	Z+2, r1	; 0x02
    4874:	a0 91 b3 04 	lds	r26, 0x04B3	; 0x8004b3 <__flp>
    4878:	b0 91 b4 04 	lds	r27, 0x04B4	; 0x8004b4 <__flp+0x1>
    487c:	10 97       	sbiw	r26, 0x00	; 0
    487e:	81 f4       	brne	.+32     	; 0x48a0 <free+0x3e>
    4880:	20 81       	ld	r18, Z
    4882:	31 81       	ldd	r19, Z+1	; 0x01
    4884:	82 0f       	add	r24, r18
    4886:	93 1f       	adc	r25, r19
    4888:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    488c:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    4890:	28 17       	cp	r18, r24
    4892:	39 07       	cpc	r19, r25
    4894:	51 f5       	brne	.+84     	; 0x48ea <free+0x88>
    4896:	f0 93 b2 04 	sts	0x04B2, r31	; 0x8004b2 <__brkval+0x1>
    489a:	e0 93 b1 04 	sts	0x04B1, r30	; 0x8004b1 <__brkval>
    489e:	67 c0       	rjmp	.+206    	; 0x496e <free+0x10c>
    48a0:	ed 01       	movw	r28, r26
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	ce 17       	cp	r28, r30
    48a8:	df 07       	cpc	r29, r31
    48aa:	40 f4       	brcc	.+16     	; 0x48bc <free+0x5a>
    48ac:	4a 81       	ldd	r20, Y+2	; 0x02
    48ae:	5b 81       	ldd	r21, Y+3	; 0x03
    48b0:	9e 01       	movw	r18, r28
    48b2:	41 15       	cp	r20, r1
    48b4:	51 05       	cpc	r21, r1
    48b6:	f1 f0       	breq	.+60     	; 0x48f4 <free+0x92>
    48b8:	ea 01       	movw	r28, r20
    48ba:	f5 cf       	rjmp	.-22     	; 0x48a6 <free+0x44>
    48bc:	d3 83       	std	Z+3, r29	; 0x03
    48be:	c2 83       	std	Z+2, r28	; 0x02
    48c0:	40 81       	ld	r20, Z
    48c2:	51 81       	ldd	r21, Z+1	; 0x01
    48c4:	84 0f       	add	r24, r20
    48c6:	95 1f       	adc	r25, r21
    48c8:	c8 17       	cp	r28, r24
    48ca:	d9 07       	cpc	r29, r25
    48cc:	59 f4       	brne	.+22     	; 0x48e4 <free+0x82>
    48ce:	88 81       	ld	r24, Y
    48d0:	99 81       	ldd	r25, Y+1	; 0x01
    48d2:	84 0f       	add	r24, r20
    48d4:	95 1f       	adc	r25, r21
    48d6:	02 96       	adiw	r24, 0x02	; 2
    48d8:	91 83       	std	Z+1, r25	; 0x01
    48da:	80 83       	st	Z, r24
    48dc:	8a 81       	ldd	r24, Y+2	; 0x02
    48de:	9b 81       	ldd	r25, Y+3	; 0x03
    48e0:	93 83       	std	Z+3, r25	; 0x03
    48e2:	82 83       	std	Z+2, r24	; 0x02
    48e4:	21 15       	cp	r18, r1
    48e6:	31 05       	cpc	r19, r1
    48e8:	29 f4       	brne	.+10     	; 0x48f4 <free+0x92>
    48ea:	f0 93 b4 04 	sts	0x04B4, r31	; 0x8004b4 <__flp+0x1>
    48ee:	e0 93 b3 04 	sts	0x04B3, r30	; 0x8004b3 <__flp>
    48f2:	3d c0       	rjmp	.+122    	; 0x496e <free+0x10c>
    48f4:	e9 01       	movw	r28, r18
    48f6:	fb 83       	std	Y+3, r31	; 0x03
    48f8:	ea 83       	std	Y+2, r30	; 0x02
    48fa:	49 91       	ld	r20, Y+
    48fc:	59 91       	ld	r21, Y+
    48fe:	c4 0f       	add	r28, r20
    4900:	d5 1f       	adc	r29, r21
    4902:	ec 17       	cp	r30, r28
    4904:	fd 07       	cpc	r31, r29
    4906:	61 f4       	brne	.+24     	; 0x4920 <free+0xbe>
    4908:	80 81       	ld	r24, Z
    490a:	91 81       	ldd	r25, Z+1	; 0x01
    490c:	84 0f       	add	r24, r20
    490e:	95 1f       	adc	r25, r21
    4910:	02 96       	adiw	r24, 0x02	; 2
    4912:	e9 01       	movw	r28, r18
    4914:	99 83       	std	Y+1, r25	; 0x01
    4916:	88 83       	st	Y, r24
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	93 81       	ldd	r25, Z+3	; 0x03
    491c:	9b 83       	std	Y+3, r25	; 0x03
    491e:	8a 83       	std	Y+2, r24	; 0x02
    4920:	e0 e0       	ldi	r30, 0x00	; 0
    4922:	f0 e0       	ldi	r31, 0x00	; 0
    4924:	12 96       	adiw	r26, 0x02	; 2
    4926:	8d 91       	ld	r24, X+
    4928:	9c 91       	ld	r25, X
    492a:	13 97       	sbiw	r26, 0x03	; 3
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	19 f0       	breq	.+6      	; 0x4936 <free+0xd4>
    4930:	fd 01       	movw	r30, r26
    4932:	dc 01       	movw	r26, r24
    4934:	f7 cf       	rjmp	.-18     	; 0x4924 <free+0xc2>
    4936:	8d 91       	ld	r24, X+
    4938:	9c 91       	ld	r25, X
    493a:	11 97       	sbiw	r26, 0x01	; 1
    493c:	9d 01       	movw	r18, r26
    493e:	2e 5f       	subi	r18, 0xFE	; 254
    4940:	3f 4f       	sbci	r19, 0xFF	; 255
    4942:	82 0f       	add	r24, r18
    4944:	93 1f       	adc	r25, r19
    4946:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <__brkval>
    494a:	30 91 b2 04 	lds	r19, 0x04B2	; 0x8004b2 <__brkval+0x1>
    494e:	28 17       	cp	r18, r24
    4950:	39 07       	cpc	r19, r25
    4952:	69 f4       	brne	.+26     	; 0x496e <free+0x10c>
    4954:	30 97       	sbiw	r30, 0x00	; 0
    4956:	29 f4       	brne	.+10     	; 0x4962 <free+0x100>
    4958:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <__flp+0x1>
    495c:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <__flp>
    4960:	02 c0       	rjmp	.+4      	; 0x4966 <free+0x104>
    4962:	13 82       	std	Z+3, r1	; 0x03
    4964:	12 82       	std	Z+2, r1	; 0x02
    4966:	b0 93 b2 04 	sts	0x04B2, r27	; 0x8004b2 <__brkval+0x1>
    496a:	a0 93 b1 04 	sts	0x04B1, r26	; 0x8004b1 <__brkval>
    496e:	df 91       	pop	r29
    4970:	cf 91       	pop	r28
    4972:	08 95       	ret

00004974 <memcpy>:
    4974:	fb 01       	movw	r30, r22
    4976:	dc 01       	movw	r26, r24
    4978:	02 c0       	rjmp	.+4      	; 0x497e <memcpy+0xa>
    497a:	01 90       	ld	r0, Z+
    497c:	0d 92       	st	X+, r0
    497e:	41 50       	subi	r20, 0x01	; 1
    4980:	50 40       	sbci	r21, 0x00	; 0
    4982:	d8 f7       	brcc	.-10     	; 0x497a <memcpy+0x6>
    4984:	08 95       	ret

00004986 <memset>:
    4986:	dc 01       	movw	r26, r24
    4988:	01 c0       	rjmp	.+2      	; 0x498c <memset+0x6>
    498a:	6d 93       	st	X+, r22
    498c:	41 50       	subi	r20, 0x01	; 1
    498e:	50 40       	sbci	r21, 0x00	; 0
    4990:	e0 f7       	brcc	.-8      	; 0x498a <memset+0x4>
    4992:	08 95       	ret

00004994 <eeprom_read_byte>:
    4994:	f9 99       	sbic	0x1f, 1	; 31
    4996:	fe cf       	rjmp	.-4      	; 0x4994 <eeprom_read_byte>
    4998:	92 bd       	out	0x22, r25	; 34
    499a:	81 bd       	out	0x21, r24	; 33
    499c:	f8 9a       	sbi	0x1f, 0	; 31
    499e:	99 27       	eor	r25, r25
    49a0:	80 b5       	in	r24, 0x20	; 32
    49a2:	08 95       	ret

000049a4 <eeprom_write_byte>:
    49a4:	26 2f       	mov	r18, r22

000049a6 <eeprom_write_r18>:
    49a6:	f9 99       	sbic	0x1f, 1	; 31
    49a8:	fe cf       	rjmp	.-4      	; 0x49a6 <eeprom_write_r18>
    49aa:	1f ba       	out	0x1f, r1	; 31
    49ac:	92 bd       	out	0x22, r25	; 34
    49ae:	81 bd       	out	0x21, r24	; 33
    49b0:	20 bd       	out	0x20, r18	; 32
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	f8 94       	cli
    49b6:	fa 9a       	sbi	0x1f, 2	; 31
    49b8:	f9 9a       	sbi	0x1f, 1	; 31
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	01 96       	adiw	r24, 0x01	; 1
    49be:	08 95       	ret

000049c0 <__do_global_dtors>:
    49c0:	10 e0       	ldi	r17, 0x00	; 0
    49c2:	c9 e8       	ldi	r28, 0x89	; 137
    49c4:	d0 e0       	ldi	r29, 0x00	; 0
    49c6:	04 c0       	rjmp	.+8      	; 0x49d0 <__do_global_dtors+0x10>
    49c8:	fe 01       	movw	r30, r28
    49ca:	0e 94 65 23 	call	0x46ca	; 0x46ca <__tablejump2__>
    49ce:	21 96       	adiw	r28, 0x01	; 1
    49d0:	cb 38       	cpi	r28, 0x8B	; 139
    49d2:	d1 07       	cpc	r29, r17
    49d4:	c9 f7       	brne	.-14     	; 0x49c8 <__do_global_dtors+0x8>
    49d6:	f8 94       	cli

000049d8 <__stop_program>:
    49d8:	ff cf       	rjmp	.-2      	; 0x49d8 <__stop_program>
>>>>>>> 32f81c74b73b95b3b856d020b501870d932ec41e
