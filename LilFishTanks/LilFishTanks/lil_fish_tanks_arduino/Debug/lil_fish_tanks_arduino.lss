
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  000032c0  00003354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000271  0080019e  0080019e  000033f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000033f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000970  00000000  00000000  00003464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012a0c  00000000  00000000  00003dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003983  00000000  00000000  000167e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000064b1  00000000  00000000  0001a163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e18  00000000  00000000  00020614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b3f  00000000  00000000  0002242c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b520  00000000  00000000  00026f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  0003248b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__dtors_end>
       4:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_1>
       8:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_2>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__vector_6>
      1c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__vector_7>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_18>
      4c:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	fc 0f       	add	r31, r28
      6a:	fc 0f       	add	r31, r28
      6c:	fc 0f       	add	r31, r28
      6e:	3b 10       	cpse	r3, r11
      70:	26 10       	cpse	r2, r6
      72:	35 10       	cpse	r3, r5
      74:	fc 0f       	add	r31, r28
      76:	fc 0f       	add	r31, r28
      78:	3b 10       	cpse	r3, r11
      7a:	26 10       	cpse	r2, r6

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      a2:	00 00 00 00                                         ....

000000a6 <digital_pin_to_bit_mask_PGM>:
      a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      b6:	04 08 10 20                                         ... 

000000ba <digital_pin_to_port_PGM>:
      ba:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ca:	03 03 03 03                                         ....

000000ce <port_to_input_PGM>:
      ce:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000d8 <port_to_output_PGM>:
      d8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e2 <port_to_mode_PGM>:
      e2:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000ec <__ctors_start>:
      ec:	39 04       	cpc	r3, r9
      ee:	23 06       	cpc	r2, r19

000000f0 <__ctors_end>:
      f0:	49 04       	cpc	r4, r9

000000f2 <__dtors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d8 e0       	ldi	r29, 0x08	; 8
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
      fe:	11 e0       	ldi	r17, 0x01	; 1
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	e0 ec       	ldi	r30, 0xC0	; 192
     106:	f2 e3       	ldi	r31, 0x32	; 50
     108:	02 c0       	rjmp	.+4      	; 0x10e <__do_copy_data+0x10>
     10a:	05 90       	lpm	r0, Z+
     10c:	0d 92       	st	X+, r0
     10e:	ae 39       	cpi	r26, 0x9E	; 158
     110:	b1 07       	cpc	r27, r17
     112:	d9 f7       	brne	.-10     	; 0x10a <__do_copy_data+0xc>

00000114 <__do_clear_bss>:
     114:	24 e0       	ldi	r18, 0x04	; 4
     116:	ae e9       	ldi	r26, 0x9E	; 158
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	01 c0       	rjmp	.+2      	; 0x11e <.do_clear_bss_start>

0000011c <.do_clear_bss_loop>:
     11c:	1d 92       	st	X+, r1

0000011e <.do_clear_bss_start>:
     11e:	af 30       	cpi	r26, 0x0F	; 15
     120:	b2 07       	cpc	r27, r18
     122:	e1 f7       	brne	.-8      	; 0x11c <.do_clear_bss_loop>

00000124 <__do_global_ctors>:
     124:	10 e0       	ldi	r17, 0x00	; 0
     126:	c8 e7       	ldi	r28, 0x78	; 120
     128:	d0 e0       	ldi	r29, 0x00	; 0
     12a:	04 c0       	rjmp	.+8      	; 0x134 <__do_global_ctors+0x10>
     12c:	21 97       	sbiw	r28, 0x01	; 1
     12e:	fe 01       	movw	r30, r28
     130:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__tablejump2__>
     134:	c6 37       	cpi	r28, 0x76	; 118
     136:	d1 07       	cpc	r29, r17
     138:	c9 f7       	brne	.-14     	; 0x12c <__do_global_ctors+0x8>
     13a:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
     13e:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__do_global_dtors>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <_ZN10DFRobot_PHC1Ev>:
#define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);}

#define PHVALUEADDR 0x00    //the start address of the pH calibration parameters stored in the EEPROM


DFRobot_PH::DFRobot_PH()
     146:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	a8 ec       	ldi	r26, 0xC8	; 200
     14e:	b1 e4       	ldi	r27, 0x41	; 65
     150:	80 8b       	std	Z+16, r24	; 0x10
     152:	91 8b       	std	Z+17, r25	; 0x11
     154:	a2 8b       	std	Z+18, r26	; 0x12
     156:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	a0 ee       	ldi	r26, 0xE0	; 224
     15e:	b0 e4       	ldi	r27, 0x40	; 64
     160:	80 83       	st	Z, r24
     162:	91 83       	std	Z+1, r25	; 0x01
     164:	a2 83       	std	Z+2, r26	; 0x02
     166:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     168:	84 e1       	ldi	r24, 0x14	; 20
     16a:	9e e0       	ldi	r25, 0x0E	; 14
     16c:	ae ef       	ldi	r26, 0xFE	; 254
     16e:	b4 e4       	ldi	r27, 0x44	; 68
     170:	84 83       	std	Z+4, r24	; 0x04
     172:	95 83       	std	Z+5, r25	; 0x05
     174:	a6 83       	std	Z+6, r26	; 0x06
     176:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e8       	ldi	r25, 0x80	; 128
     17c:	ab eb       	ldi	r26, 0xBB	; 187
     17e:	b4 e4       	ldi	r27, 0x44	; 68
     180:	80 87       	std	Z+8, r24	; 0x08
     182:	91 87       	std	Z+9, r25	; 0x09
     184:	a2 87       	std	Z+10, r26	; 0x0a
     186:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     188:	84 87       	std	Z+12, r24	; 0x0c
     18a:	95 87       	std	Z+13, r25	; 0x0d
     18c:	a6 87       	std	Z+14, r26	; 0x0e
     18e:	b7 87       	std	Z+15, r27	; 0x0f
     190:	08 95       	ret

00000192 <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     192:	08 95       	ret

00000194 <_Z8fromWifiv>:
	Serial.print(temp);
	
	// TODO: transmit to Wifi
	setLED(Off);
    // check temperature every 2 min
    vTaskDelayUntil( &xLastWakeTime, 7500 / portTICK_PERIOD_MS );
     194:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__data_end>
     198:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__data_end+0x1>
     19c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <vTaskResume>

000001a0 <_Z9addColorsv>:
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	cd e8       	ldi	r28, 0x8D	; 141
     1aa:	d2 e0       	ldi	r29, 0x02	; 2
     1ac:	18 82       	st	Y, r1
     1ae:	19 82       	std	Y+1, r1	; 0x01
     1b0:	1a 82       	std	Y+2, r1	; 0x02
     1b2:	1b 82       	std	Y+3, r1	; 0x03
     1b4:	1d 82       	std	Y+5, r1	; 0x05
     1b6:	1c 82       	std	Y+4, r1	; 0x04
     1b8:	1f 82       	std	Y+7, r1	; 0x07
     1ba:	1e 82       	std	Y+6, r1	; 0x06
     1bc:	19 86       	std	Y+9, r1	; 0x09
     1be:	18 86       	std	Y+8, r1	; 0x08
     1c0:	a7 e4       	ldi	r26, 0x47	; 71
     1c2:	b2 e0       	ldi	r27, 0x02	; 2
     1c4:	1d 92       	st	X+, r1
     1c6:	1d 92       	st	X+, r1
     1c8:	1d 92       	st	X+, r1
     1ca:	1c 92       	st	X, r1
     1cc:	13 97       	sbiw	r26, 0x03	; 3
     1ce:	15 96       	adiw	r26, 0x05	; 5
     1d0:	1c 92       	st	X, r1
     1d2:	1e 92       	st	-X, r1
     1d4:	14 97       	sbiw	r26, 0x04	; 4
     1d6:	17 96       	adiw	r26, 0x07	; 7
     1d8:	1c 92       	st	X, r1
     1da:	1e 92       	st	-X, r1
     1dc:	16 97       	sbiw	r26, 0x06	; 6
     1de:	19 96       	adiw	r26, 0x09	; 9
     1e0:	1c 92       	st	X, r1
     1e2:	1e 92       	st	-X, r1
     1e4:	18 97       	sbiw	r26, 0x08	; 8
     1e6:	e1 e0       	ldi	r30, 0x01	; 1
     1e8:	f2 e0       	ldi	r31, 0x02	; 2
     1ea:	10 82       	st	Z, r1
     1ec:	11 82       	std	Z+1, r1	; 0x01
     1ee:	12 82       	std	Z+2, r1	; 0x02
     1f0:	13 82       	std	Z+3, r1	; 0x03
     1f2:	15 82       	std	Z+5, r1	; 0x05
     1f4:	14 82       	std	Z+4, r1	; 0x04
     1f6:	17 82       	std	Z+7, r1	; 0x07
     1f8:	16 82       	std	Z+6, r1	; 0x06
     1fa:	11 86       	std	Z+9, r1	; 0x09
     1fc:	10 86       	std	Z+8, r1	; 0x08
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	60 e8       	ldi	r22, 0x80	; 128
     204:	7e e3       	ldi	r23, 0x3E	; 62
     206:	4a 87       	std	Y+10, r20	; 0x0a
     208:	5b 87       	std	Y+11, r21	; 0x0b
     20a:	6c 87       	std	Y+12, r22	; 0x0c
     20c:	7d 87       	std	Y+13, r23	; 0x0d
     20e:	1f 86       	std	Y+15, r1	; 0x0f
     210:	1e 86       	std	Y+14, r1	; 0x0e
     212:	19 8a       	std	Y+17, r1	; 0x11
     214:	18 8a       	std	Y+16, r1	; 0x10
     216:	1b 8a       	std	Y+19, r1	; 0x13
     218:	1a 8a       	std	Y+18, r1	; 0x12
     21a:	4a e9       	ldi	r20, 0x9A	; 154
     21c:	59 e9       	ldi	r21, 0x99	; 153
     21e:	69 e1       	ldi	r22, 0x19	; 25
     220:	7e e3       	ldi	r23, 0x3E	; 62
     222:	1a 96       	adiw	r26, 0x0a	; 10
     224:	4d 93       	st	X+, r20
     226:	5d 93       	st	X+, r21
     228:	6d 93       	st	X+, r22
     22a:	7c 93       	st	X, r23
     22c:	1d 97       	sbiw	r26, 0x0d	; 13
     22e:	1f 96       	adiw	r26, 0x0f	; 15
     230:	1c 92       	st	X, r1
     232:	1e 92       	st	-X, r1
     234:	1e 97       	sbiw	r26, 0x0e	; 14
     236:	51 96       	adiw	r26, 0x11	; 17
     238:	1c 92       	st	X, r1
     23a:	1e 92       	st	-X, r1
     23c:	50 97       	sbiw	r26, 0x10	; 16
     23e:	53 96       	adiw	r26, 0x13	; 19
     240:	1c 92       	st	X, r1
     242:	1e 92       	st	-X, r1
     244:	52 97       	sbiw	r26, 0x12	; 18
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	7f e3       	ldi	r23, 0x3F	; 63
     24e:	42 87       	std	Z+10, r20	; 0x0a
     250:	53 87       	std	Z+11, r21	; 0x0b
     252:	64 87       	std	Z+12, r22	; 0x0c
     254:	75 87       	std	Z+13, r23	; 0x0d
     256:	17 86       	std	Z+15, r1	; 0x0f
     258:	16 86       	std	Z+14, r1	; 0x0e
     25a:	11 8a       	std	Z+17, r1	; 0x11
     25c:	10 8a       	std	Z+16, r1	; 0x10
     25e:	13 8a       	std	Z+19, r1	; 0x13
     260:	12 8a       	std	Z+18, r1	; 0x12
     262:	4c 8b       	std	Y+20, r20	; 0x14
     264:	5d 8b       	std	Y+21, r21	; 0x15
     266:	6e 8b       	std	Y+22, r22	; 0x16
     268:	7f 8b       	std	Y+23, r23	; 0x17
     26a:	19 8e       	std	Y+25, r1	; 0x19
     26c:	18 8e       	std	Y+24, r1	; 0x18
     26e:	1b 8e       	std	Y+27, r1	; 0x1b
     270:	1a 8e       	std	Y+26, r1	; 0x1a
     272:	1d 8e       	std	Y+29, r1	; 0x1d
     274:	1c 8e       	std	Y+28, r1	; 0x1c
     276:	4a e9       	ldi	r20, 0x9A	; 154
     278:	59 e9       	ldi	r21, 0x99	; 153
     27a:	69 e9       	ldi	r22, 0x99	; 153
     27c:	7e e3       	ldi	r23, 0x3E	; 62
     27e:	54 96       	adiw	r26, 0x14	; 20
     280:	4d 93       	st	X+, r20
     282:	5d 93       	st	X+, r21
     284:	6d 93       	st	X+, r22
     286:	7c 93       	st	X, r23
     288:	57 97       	sbiw	r26, 0x17	; 23
     28a:	59 96       	adiw	r26, 0x19	; 25
     28c:	1c 92       	st	X, r1
     28e:	1e 92       	st	-X, r1
     290:	58 97       	sbiw	r26, 0x18	; 24
     292:	5b 96       	adiw	r26, 0x1b	; 27
     294:	1c 92       	st	X, r1
     296:	1e 92       	st	-X, r1
     298:	5a 97       	sbiw	r26, 0x1a	; 26
     29a:	5d 96       	adiw	r26, 0x1d	; 29
     29c:	1c 92       	st	X, r1
     29e:	1e 92       	st	-X, r1
     2a0:	5c 97       	sbiw	r26, 0x1c	; 28
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e4       	ldi	r23, 0x40	; 64
     2aa:	44 8b       	std	Z+20, r20	; 0x14
     2ac:	55 8b       	std	Z+21, r21	; 0x15
     2ae:	66 8b       	std	Z+22, r22	; 0x16
     2b0:	77 8b       	std	Z+23, r23	; 0x17
     2b2:	11 8e       	std	Z+25, r1	; 0x19
     2b4:	10 8e       	std	Z+24, r1	; 0x18
     2b6:	13 8e       	std	Z+27, r1	; 0x1b
     2b8:	12 8e       	std	Z+26, r1	; 0x1a
     2ba:	15 8e       	std	Z+29, r1	; 0x1d
     2bc:	14 8e       	std	Z+28, r1	; 0x1c
     2be:	00 e0       	ldi	r16, 0x00	; 0
     2c0:	10 e0       	ldi	r17, 0x00	; 0
     2c2:	20 e4       	ldi	r18, 0x40	; 64
     2c4:	30 e4       	ldi	r19, 0x40	; 64
     2c6:	0e 8f       	std	Y+30, r16	; 0x1e
     2c8:	1f 8f       	std	Y+31, r17	; 0x1f
     2ca:	28 a3       	std	Y+32, r18	; 0x20
     2cc:	39 a3       	std	Y+33, r19	; 0x21
     2ce:	1b a2       	std	Y+35, r1	; 0x23
     2d0:	1a a2       	std	Y+34, r1	; 0x22
     2d2:	1d a2       	std	Y+37, r1	; 0x25
     2d4:	1c a2       	std	Y+36, r1	; 0x24
     2d6:	1f a2       	std	Y+39, r1	; 0x27
     2d8:	1e a2       	std	Y+38, r1	; 0x26
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	60 e8       	ldi	r22, 0x80	; 128
     2e0:	7f e3       	ldi	r23, 0x3F	; 63
     2e2:	5e 96       	adiw	r26, 0x1e	; 30
     2e4:	4d 93       	st	X+, r20
     2e6:	5d 93       	st	X+, r21
     2e8:	6d 93       	st	X+, r22
     2ea:	7c 93       	st	X, r23
     2ec:	91 97       	sbiw	r26, 0x21	; 33
     2ee:	93 96       	adiw	r26, 0x23	; 35
     2f0:	1c 92       	st	X, r1
     2f2:	1e 92       	st	-X, r1
     2f4:	92 97       	sbiw	r26, 0x22	; 34
     2f6:	95 96       	adiw	r26, 0x25	; 37
     2f8:	1c 92       	st	X, r1
     2fa:	1e 92       	st	-X, r1
     2fc:	94 97       	sbiw	r26, 0x24	; 36
     2fe:	97 96       	adiw	r26, 0x27	; 39
     300:	1c 92       	st	X, r1
     302:	1e 92       	st	-X, r1
     304:	96 97       	sbiw	r26, 0x26	; 38
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	60 ea       	ldi	r22, 0xA0	; 160
     30c:	70 e4       	ldi	r23, 0x40	; 64
     30e:	46 8f       	std	Z+30, r20	; 0x1e
     310:	57 8f       	std	Z+31, r21	; 0x1f
     312:	60 a3       	std	Z+32, r22	; 0x20
     314:	71 a3       	std	Z+33, r23	; 0x21
     316:	13 a2       	std	Z+35, r1	; 0x23
     318:	12 a2       	std	Z+34, r1	; 0x22
     31a:	15 a2       	std	Z+37, r1	; 0x25
     31c:	14 a2       	std	Z+36, r1	; 0x24
     31e:	17 a2       	std	Z+39, r1	; 0x27
     320:	16 a2       	std	Z+38, r1	; 0x26
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 ec       	ldi	r22, 0xC0	; 192
     328:	70 e4       	ldi	r23, 0x40	; 64
     32a:	48 a7       	std	Y+40, r20	; 0x28
     32c:	59 a7       	std	Y+41, r21	; 0x29
     32e:	6a a7       	std	Y+42, r22	; 0x2a
     330:	7b a7       	std	Y+43, r23	; 0x2b
     332:	1d a6       	std	Y+45, r1	; 0x2d
     334:	1c a6       	std	Y+44, r1	; 0x2c
     336:	1f a6       	std	Y+47, r1	; 0x2f
     338:	1e a6       	std	Y+46, r1	; 0x2e
     33a:	19 aa       	std	Y+49, r1	; 0x31
     33c:	18 aa       	std	Y+48, r1	; 0x30
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	60 ec       	ldi	r22, 0xC0	; 192
     344:	7f e3       	ldi	r23, 0x3F	; 63
     346:	98 96       	adiw	r26, 0x28	; 40
     348:	4d 93       	st	X+, r20
     34a:	5d 93       	st	X+, r21
     34c:	6d 93       	st	X+, r22
     34e:	7c 93       	st	X, r23
     350:	9b 97       	sbiw	r26, 0x2b	; 43
     352:	9d 96       	adiw	r26, 0x2d	; 45
     354:	1c 92       	st	X, r1
     356:	1e 92       	st	-X, r1
     358:	9c 97       	sbiw	r26, 0x2c	; 44
     35a:	9f 96       	adiw	r26, 0x2f	; 47
     35c:	1c 92       	st	X, r1
     35e:	1e 92       	st	-X, r1
     360:	9e 97       	sbiw	r26, 0x2e	; 46
     362:	d1 96       	adiw	r26, 0x31	; 49
     364:	1c 92       	st	X, r1
     366:	1e 92       	st	-X, r1
     368:	d0 97       	sbiw	r26, 0x30	; 48
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	60 e2       	ldi	r22, 0x20	; 32
     370:	71 e4       	ldi	r23, 0x41	; 65
     372:	40 a7       	std	Z+40, r20	; 0x28
     374:	51 a7       	std	Z+41, r21	; 0x29
     376:	62 a7       	std	Z+42, r22	; 0x2a
     378:	73 a7       	std	Z+43, r23	; 0x2b
     37a:	15 a6       	std	Z+45, r1	; 0x2d
     37c:	14 a6       	std	Z+44, r1	; 0x2c
     37e:	17 a6       	std	Z+47, r1	; 0x2f
     380:	16 a6       	std	Z+46, r1	; 0x2e
     382:	11 aa       	std	Z+49, r1	; 0x31
     384:	10 aa       	std	Z+48, r1	; 0x30
     386:	d2 96       	adiw	r26, 0x32	; 50
     388:	0d 93       	st	X+, r16
     38a:	1d 93       	st	X+, r17
     38c:	2d 93       	st	X+, r18
     38e:	3c 93       	st	X, r19
     390:	d5 97       	sbiw	r26, 0x35	; 53
     392:	d7 96       	adiw	r26, 0x37	; 55
     394:	1c 92       	st	X, r1
     396:	1e 92       	st	-X, r1
     398:	d6 97       	sbiw	r26, 0x36	; 54
     39a:	d9 96       	adiw	r26, 0x39	; 57
     39c:	1c 92       	st	X, r1
     39e:	1e 92       	st	-X, r1
     3a0:	d8 97       	sbiw	r26, 0x38	; 56
     3a2:	db 96       	adiw	r26, 0x3b	; 59
     3a4:	1c 92       	st	X, r1
     3a6:	1e 92       	st	-X, r1
     3a8:	da 97       	sbiw	r26, 0x3a	; 58
     3aa:	00 e0       	ldi	r16, 0x00	; 0
     3ac:	10 e0       	ldi	r17, 0x00	; 0
     3ae:	20 ea       	ldi	r18, 0xA0	; 160
     3b0:	31 e4       	ldi	r19, 0x41	; 65
     3b2:	02 ab       	std	Z+50, r16	; 0x32
     3b4:	13 ab       	std	Z+51, r17	; 0x33
     3b6:	24 ab       	std	Z+52, r18	; 0x34
     3b8:	35 ab       	std	Z+53, r19	; 0x35
     3ba:	17 aa       	std	Z+55, r1	; 0x37
     3bc:	16 aa       	std	Z+54, r1	; 0x36
     3be:	11 ae       	std	Z+57, r1	; 0x39
     3c0:	10 ae       	std	Z+56, r1	; 0x38
     3c2:	13 ae       	std	Z+59, r1	; 0x3b
     3c4:	12 ae       	std	Z+58, r1	; 0x3a
     3c6:	dc 96       	adiw	r26, 0x3c	; 60
     3c8:	4d 93       	st	X+, r20
     3ca:	5d 93       	st	X+, r21
     3cc:	6d 93       	st	X+, r22
     3ce:	7c 93       	st	X, r23
     3d0:	df 97       	sbiw	r26, 0x3f	; 63
     3d2:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <Nitrite+0x41>
     3d6:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <Nitrite+0x40>
     3da:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <Nitrite+0x43>
     3de:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <Nitrite+0x42>
     3e2:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <Nitrite+0x45>
     3e6:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <Nitrite+0x44>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	a8 e4       	ldi	r26, 0x48	; 72
     3f0:	b2 e4       	ldi	r27, 0x42	; 66
     3f2:	84 af       	std	Z+60, r24	; 0x3c
     3f4:	95 af       	std	Z+61, r25	; 0x3d
     3f6:	a6 af       	std	Z+62, r26	; 0x3e
     3f8:	b7 af       	std	Z+63, r27	; 0x3f
     3fa:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <Nitrate+0x41>
     3fe:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <Nitrate+0x40>
     402:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <Nitrate+0x43>
     406:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <Nitrate+0x42>
     40a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <Nitrate+0x45>
     40e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <Nitrate+0x44>
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <_Z9SameColorv>:
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	10 91 fe 01 	lds	r17, 0x01FE	; 0x8001fe <rgb>
     426:	d0 91 ff 01 	lds	r29, 0x01FF	; 0x8001ff <rgb+0x1>
     42a:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <rgb+0x2>
     42e:	63 e6       	ldi	r22, 0x63	; 99
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	8e ec       	ldi	r24, 0xCE	; 206
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     43a:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <c+0x4>
     43e:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <c+0x5>
     442:	4a e0       	ldi	r20, 0x0A	; 10
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	8e ec       	ldi	r24, 0xCE	; 206
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN5Print5printEii>
     44e:	65 e6       	ldi	r22, 0x65	; 101
     450:	71 e0       	ldi	r23, 0x01	; 1
     452:	8e ec       	ldi	r24, 0xCE	; 206
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     45a:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <c+0x6>
     45e:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <c+0x7>
     462:	4a e0       	ldi	r20, 0x0A	; 10
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	8e ec       	ldi	r24, 0xCE	; 206
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN5Print5printEii>
     46e:	65 e6       	ldi	r22, 0x65	; 101
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	8e ec       	ldi	r24, 0xCE	; 206
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     47a:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <c+0x8>
     47e:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <c+0x9>
     482:	4a e0       	ldi	r20, 0x0A	; 10
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	8e ec       	ldi	r24, 0xCE	; 206
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN5Print5printEii>
     48e:	67 e6       	ldi	r22, 0x67	; 103
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	8e ec       	ldi	r24, 0xCE	; 206
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     49a:	4a e0       	ldi	r20, 0x0A	; 10
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	61 2f       	mov	r22, r17
     4a0:	8e ec       	ldi	r24, 0xCE	; 206
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN5Print5printEhi>
     4a8:	65 e6       	ldi	r22, 0x65	; 101
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	8e ec       	ldi	r24, 0xCE	; 206
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     4b4:	4a e0       	ldi	r20, 0x0A	; 10
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	6d 2f       	mov	r22, r29
     4ba:	8e ec       	ldi	r24, 0xCE	; 206
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN5Print5printEhi>
     4c2:	65 e6       	ldi	r22, 0x65	; 101
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	8e ec       	ldi	r24, 0xCE	; 206
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     4ce:	4a e0       	ldi	r20, 0x0A	; 10
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	6c 2f       	mov	r22, r28
     4d4:	8e ec       	ldi	r24, 0xCE	; 206
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	0e 94 21 07 	call	0xe42	; 0xe42 <_ZN5Print5printEhi>
     4dc:	61 2f       	mov	r22, r17
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <c+0x4>
     4e4:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <c+0x5>
     4e8:	9c 01       	movw	r18, r24
     4ea:	24 51       	subi	r18, 0x14	; 20
     4ec:	31 09       	sbc	r19, r1
     4ee:	62 17       	cp	r22, r18
     4f0:	73 07       	cpc	r23, r19
     4f2:	64 f1       	brlt	.+88     	; 0x54c <_Z9SameColorv+0x130>
     4f4:	44 96       	adiw	r24, 0x14	; 20
     4f6:	86 17       	cp	r24, r22
     4f8:	97 07       	cpc	r25, r23
     4fa:	44 f1       	brlt	.+80     	; 0x54c <_Z9SameColorv+0x130>
     4fc:	6d 2f       	mov	r22, r29
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <c+0x6>
     504:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <c+0x7>
     508:	9c 01       	movw	r18, r24
     50a:	24 51       	subi	r18, 0x14	; 20
     50c:	31 09       	sbc	r19, r1
     50e:	62 17       	cp	r22, r18
     510:	73 07       	cpc	r23, r19
     512:	e4 f0       	brlt	.+56     	; 0x54c <_Z9SameColorv+0x130>
     514:	44 96       	adiw	r24, 0x14	; 20
     516:	86 17       	cp	r24, r22
     518:	97 07       	cpc	r25, r23
     51a:	c4 f0       	brlt	.+48     	; 0x54c <_Z9SameColorv+0x130>
     51c:	6c 2f       	mov	r22, r28
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <c+0x8>
     524:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <c+0x9>
     528:	9c 01       	movw	r18, r24
     52a:	24 51       	subi	r18, 0x14	; 20
     52c:	31 09       	sbc	r19, r1
     52e:	62 17       	cp	r22, r18
     530:	73 07       	cpc	r23, r19
     532:	64 f0       	brlt	.+24     	; 0x54c <_Z9SameColorv+0x130>
     534:	44 96       	adiw	r24, 0x14	; 20
     536:	86 17       	cp	r24, r22
     538:	97 07       	cpc	r25, r23
     53a:	44 f0       	brlt	.+16     	; 0x54c <_Z9SameColorv+0x130>
     53c:	6c e7       	ldi	r22, 0x7C	; 124
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	8e ec       	ldi	r24, 0xCE	; 206
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 9e 06 	call	0xd3c	; 0xd3c <_ZN5Print5printEPK19__FlashStringHelper>
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <_Z9SameColorv+0x132>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <_Z9FindMatchv>:
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <typeToRead>
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	09 f4       	brne	.+2      	; 0x568 <_Z9FindMatchv+0x12>
     566:	48 c0       	rjmp	.+144    	; 0x5f8 <_Z9FindMatchv+0xa2>
     568:	40 f0       	brcs	.+16     	; 0x57a <_Z9FindMatchv+0x24>
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	09 f0       	breq	.+2      	; 0x570 <_Z9FindMatchv+0x1a>
     56e:	6e c0       	rjmp	.+220    	; 0x64c <_Z9FindMatchv+0xf6>
     570:	07 e4       	ldi	r16, 0x47	; 71
     572:	12 e0       	ldi	r17, 0x02	; 2
     574:	c6 e0       	ldi	r28, 0x06	; 6
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	29 c0       	rjmp	.+82     	; 0x5cc <_Z9FindMatchv+0x76>
     57a:	0d e8       	ldi	r16, 0x8D	; 141
     57c:	12 e0       	ldi	r17, 0x02	; 2
     57e:	c4 e0       	ldi	r28, 0x04	; 4
     580:	d0 e0       	ldi	r29, 0x00	; 0
     582:	8a e0       	ldi	r24, 0x0A	; 10
     584:	f8 01       	movw	r30, r16
     586:	b8 96       	adiw	r30, 0x28	; 40
     588:	a4 ef       	ldi	r26, 0xF4	; 244
     58a:	b1 e0       	ldi	r27, 0x01	; 1
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <_Z9FindMatchv+0x36>
     594:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z9SameColorv>
     598:	88 23       	and	r24, r24
     59a:	49 f0       	breq	.+18     	; 0x5ae <_Z9FindMatchv+0x58>
     59c:	8a e0       	ldi	r24, 0x0A	; 10
     59e:	8c 9f       	mul	r24, r28
     5a0:	f0 01       	movw	r30, r0
     5a2:	8d 9f       	mul	r24, r29
     5a4:	f0 0d       	add	r31, r0
     5a6:	11 24       	eor	r1, r1
     5a8:	e3 57       	subi	r30, 0x73	; 115
     5aa:	fd 4f       	sbci	r31, 0xFD	; 253
     5ac:	3e c0       	rjmp	.+124    	; 0x62a <_Z9FindMatchv+0xd4>
     5ae:	21 97       	sbiw	r28, 0x01	; 1
     5b0:	0a 50       	subi	r16, 0x0A	; 10
     5b2:	11 09       	sbc	r17, r1
     5b4:	cf 3f       	cpi	r28, 0xFF	; 255
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	d8 07       	cpc	r29, r24
     5ba:	19 f7       	brne	.-58     	; 0x582 <_Z9FindMatchv+0x2c>
     5bc:	42 c0       	rjmp	.+132    	; 0x642 <_Z9FindMatchv+0xec>
     5be:	21 97       	sbiw	r28, 0x01	; 1
     5c0:	0a 50       	subi	r16, 0x0A	; 10
     5c2:	11 09       	sbc	r17, r1
     5c4:	cf 3f       	cpi	r28, 0xFF	; 255
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	d8 07       	cpc	r29, r24
     5ca:	d9 f1       	breq	.+118    	; 0x642 <_Z9FindMatchv+0xec>
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	f8 01       	movw	r30, r16
     5d0:	fc 96       	adiw	r30, 0x3c	; 60
     5d2:	a4 ef       	ldi	r26, 0xF4	; 244
     5d4:	b1 e0       	ldi	r27, 0x01	; 1
     5d6:	01 90       	ld	r0, Z+
     5d8:	0d 92       	st	X+, r0
     5da:	8a 95       	dec	r24
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <_Z9FindMatchv+0x80>
     5de:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z9SameColorv>
     5e2:	88 23       	and	r24, r24
     5e4:	61 f3       	breq	.-40     	; 0x5be <_Z9FindMatchv+0x68>
     5e6:	8a e0       	ldi	r24, 0x0A	; 10
     5e8:	8c 9f       	mul	r24, r28
     5ea:	f0 01       	movw	r30, r0
     5ec:	8d 9f       	mul	r24, r29
     5ee:	f0 0d       	add	r31, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e9 5b       	subi	r30, 0xB9	; 185
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
     5f6:	19 c0       	rjmp	.+50     	; 0x62a <_Z9FindMatchv+0xd4>
     5f8:	01 e0       	ldi	r16, 0x01	; 1
     5fa:	12 e0       	ldi	r17, 0x02	; 2
     5fc:	c6 e0       	ldi	r28, 0x06	; 6
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
     600:	8a e0       	ldi	r24, 0x0A	; 10
     602:	f8 01       	movw	r30, r16
     604:	fc 96       	adiw	r30, 0x3c	; 60
     606:	a4 ef       	ldi	r26, 0xF4	; 244
     608:	b1 e0       	ldi	r27, 0x01	; 1
     60a:	01 90       	ld	r0, Z+
     60c:	0d 92       	st	X+, r0
     60e:	8a 95       	dec	r24
     610:	e1 f7       	brne	.-8      	; 0x60a <_Z9FindMatchv+0xb4>
     612:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z9SameColorv>
     616:	88 23       	and	r24, r24
     618:	69 f0       	breq	.+26     	; 0x634 <_Z9FindMatchv+0xde>
     61a:	8a e0       	ldi	r24, 0x0A	; 10
     61c:	8c 9f       	mul	r24, r28
     61e:	f0 01       	movw	r30, r0
     620:	8d 9f       	mul	r24, r29
     622:	f0 0d       	add	r31, r0
     624:	11 24       	eor	r1, r1
     626:	ef 5f       	subi	r30, 0xFF	; 255
     628:	fd 4f       	sbci	r31, 0xFD	; 253
     62a:	30 81       	ld	r19, Z
     62c:	21 81       	ldd	r18, Z+1	; 0x01
     62e:	92 81       	ldd	r25, Z+2	; 0x02
     630:	83 81       	ldd	r24, Z+3	; 0x03
     632:	0b c0       	rjmp	.+22     	; 0x64a <_Z9FindMatchv+0xf4>
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0a 50       	subi	r16, 0x0A	; 10
     638:	11 09       	sbc	r17, r1
     63a:	cf 3f       	cpi	r28, 0xFF	; 255
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	d8 07       	cpc	r29, r24
     640:	f9 f6       	brne	.-66     	; 0x600 <_Z9FindMatchv+0xaa>
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	90 e8       	ldi	r25, 0x80	; 128
     648:	8f eb       	ldi	r24, 0xBF	; 191
     64a:	ac 01       	movw	r20, r24
     64c:	63 2f       	mov	r22, r19
     64e:	72 2f       	mov	r23, r18
     650:	85 2f       	mov	r24, r21
     652:	94 2f       	mov	r25, r20
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <_Z9ScanColorv>:
     65e:	85 ec       	ldi	r24, 0xC5	; 197
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN9MD_TCS2304readEv>
     666:	85 ec       	ldi	r24, 0xC5	; 197
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN9MD_TCS2309availableEv>
     66e:	88 23       	and	r24, r24
     670:	d1 f3       	breq	.-12     	; 0x666 <_Z9ScanColorv+0x8>
     672:	6e ef       	ldi	r22, 0xFE	; 254
     674:	71 e0       	ldi	r23, 0x01	; 1
     676:	85 ec       	ldi	r24, 0xC5	; 197
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 01 11 	call	0x2202	; 0x2202 <_ZN9MD_TCS2306getRGBEP9colorData>
     67e:	0c 94 ab 02 	jmp	0x556	; 0x556 <_Z9FindMatchv>

00000682 <_Z13findTestStripv>:
     682:	cf 93       	push	r28
     684:	85 ec       	ldi	r24, 0xC5	; 197
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 cb 11 	call	0x2396	; 0x2396 <_ZN9MD_TCS2304readEv>
     68c:	85 ec       	ldi	r24, 0xC5	; 197
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN9MD_TCS2309availableEv>
     694:	88 23       	and	r24, r24
     696:	d1 f3       	breq	.-12     	; 0x68c <_Z13findTestStripv+0xa>
     698:	6e ef       	ldi	r22, 0xFE	; 254
     69a:	71 e0       	ldi	r23, 0x01	; 1
     69c:	85 ec       	ldi	r24, 0xC5	; 197
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	0e 94 01 11 	call	0x2202	; 0x2202 <_ZN9MD_TCS2306getRGBEP9colorData>
     6a4:	8a e0       	ldi	r24, 0x0A	; 10
     6a6:	ec e1       	ldi	r30, 0x1C	; 28
     6a8:	f1 e0       	ldi	r31, 0x01	; 1
     6aa:	a4 ef       	ldi	r26, 0xF4	; 244
     6ac:	b1 e0       	ldi	r27, 0x01	; 1
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	8a 95       	dec	r24
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <_Z13findTestStripv+0x2c>
     6b6:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z9SameColorv>
     6ba:	c8 2f       	mov	r28, r24
     6bc:	8a e0       	ldi	r24, 0x0A	; 10
     6be:	e2 e1       	ldi	r30, 0x12	; 18
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	a4 ef       	ldi	r26, 0xF4	; 244
     6c4:	b1 e0       	ldi	r27, 0x01	; 1
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	8a 95       	dec	r24
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <_Z13findTestStripv+0x44>
     6ce:	c1 11       	cpse	r28, r1
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <_Z13findTestStripv+0x56>
     6d2:	0e 94 0e 02 	call	0x41c	; 0x41c <_Z9SameColorv>
     6d6:	c8 2f       	mov	r28, r24
     6d8:	6c 2f       	mov	r22, r28
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	4a e0       	ldi	r20, 0x0A	; 10
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	8e ec       	ldi	r24, 0xCE	; 206
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN5Print5printEii>
     6e8:	61 e7       	ldi	r22, 0x71	; 113
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	8e ec       	ldi	r24, 0xCE	; 206
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 c2 06 	call	0xd84	; 0xd84 <_ZN5Print5printEPKc>
     6f4:	8c 2f       	mov	r24, r28
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_Z6setLED8LEDColor>:
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	00 d0       	rcall	.+0      	; 0x700 <_Z6setLED8LEDColor+0x6>
     700:	00 d0       	rcall	.+0      	; 0x702 <_Z6setLED8LEDColor+0x8>
     702:	00 d0       	rcall	.+0      	; 0x704 <_Z6setLED8LEDColor+0xa>
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
     708:	49 83       	std	Y+1, r20	; 0x01
     70a:	5a 83       	std	Y+2, r21	; 0x02
     70c:	6b 83       	std	Y+3, r22	; 0x03
     70e:	7c 83       	std	Y+4, r23	; 0x04
     710:	8d 83       	std	Y+5, r24	; 0x05
     712:	9e 83       	std	Y+6, r25	; 0x06
     714:	69 81       	ldd	r22, Y+1	; 0x01
     716:	7a 81       	ldd	r23, Y+2	; 0x02
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <analogWrite>
     71e:	6b 81       	ldd	r22, Y+3	; 0x03
     720:	7c 81       	ldd	r23, Y+4	; 0x04
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <analogWrite>
     728:	6d 81       	ldd	r22, Y+5	; 0x05
     72a:	7e 81       	ldd	r23, Y+6	; 0x06
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	26 96       	adiw	r28, 0x06	; 6
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <analogWrite>

00000742 <_Z15TaskAmmoniaReadPv>:
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <_Z15TaskAmmoniaReadPv+0x6>
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskGetTickCount>
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	8d e0       	ldi	r24, 0x0D	; 13
     758:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
     764:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Blue>
     768:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Blue+0x1>
     76c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Blue+0x2>
     770:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Blue+0x3>
     774:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Blue+0x4>
     778:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <Blue+0x5>
     77c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z6setLED8LEDColor>
     780:	0e 94 41 03 	call	0x682	; 0x682 <_Z13findTestStripv>
     784:	81 11       	cpse	r24, r1
     786:	fc cf       	rjmp	.-8      	; 0x780 <_Z15TaskAmmoniaReadPv+0x3e>
     788:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <Green>
     78c:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <Green+0x1>
     790:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <Green+0x2>
     794:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <Green+0x3>
     798:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Green+0x4>
     79c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Green+0x5>
     7a0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z6setLED8LEDColor>
     7a4:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <typeToRead>
     7a8:	0e 94 2f 03 	call	0x65e	; 0x65e <_Z9ScanColorv>
     7ac:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <Off>
     7b0:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <Off+0x1>
     7b4:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <Off+0x2>
     7b8:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <Off+0x3>
     7bc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <Off+0x4>
     7c0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <Off+0x5>
     7c4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_Z6setLED8LEDColor>
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	89 e0       	ldi	r24, 0x09	; 9
     7cc:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
     7d0:	68 e3       	ldi	r22, 0x38	; 56
     7d2:	71 e0       	ldi	r23, 0x01	; 1
     7d4:	ce 01       	movw	r24, r28
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <vTaskDelayUntil>
     7dc:	bf cf       	rjmp	.-130    	; 0x75c <_Z15TaskAmmoniaReadPv+0x1a>

000007de <_Z8setupLEDv>:
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	84 e0       	ldi	r24, 0x04	; 4
     7f2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
     7f6:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <Off>
     7fa:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <Off+0x1>
     7fe:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <Off+0x2>
     802:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <Off+0x3>
     806:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <Off+0x4>
     80a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <Off+0x5>
     80e:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_Z6setLED8LEDColor>

00000812 <setup>:
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	26 e0       	ldi	r18, 0x06	; 6
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	55 e2       	ldi	r21, 0x25	; 37
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	8e ec       	ldi	r24, 0xCE	; 206
     824:	92 e0       	ldi	r25, 0x02	; 2
     826:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN14HardwareSerial5beginEmh>
     82a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9addColorsv>
     82e:	0e 94 ef 03 	call	0x7de	; 0x7de <_Z8setupLEDv>
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
     83a:	43 e0       	ldi	r20, 0x03	; 3
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	6a ec       	ldi	r22, 0xCA	; 202
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	0e 94 78 07 	call	0xef0	; 0xef0 <attachInterrupt>
     848:	8e e9       	ldi	r24, 0x9E	; 158
     84a:	e8 2e       	mov	r14, r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	f8 2e       	mov	r15, r24
     850:	02 e0       	ldi	r16, 0x02	; 2
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	40 e8       	ldi	r20, 0x80	; 128
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	63 e7       	ldi	r22, 0x73	; 115
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	81 ea       	ldi	r24, 0xA1	; 161
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0e 94 03 0a 	call	0x1406	; 0x1406 <xTaskCreate>
     866:	0f 91       	pop	r16
     868:	ff 90       	pop	r15
     86a:	ef 90       	pop	r14
     86c:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <vTaskStartScheduler>

00000870 <loop>:
     870:	08 95       	ret

00000872 <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     872:	67 e0       	ldi	r22, 0x07	; 7
     874:	80 ec       	ldi	r24, 0xC0	; 192
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN7OneWire5beginEh>
Color WhiteTestStrip {0, {255, 81, 84}};

colorData rgb;
Color c;

MD_TCS230  CS(S2, S3, OE);
     87c:	28 e0       	ldi	r18, 0x08	; 8
     87e:	4d e0       	ldi	r20, 0x0D	; 13
     880:	6c e0       	ldi	r22, 0x0C	; 12
     882:	85 ec       	ldi	r24, 0xC5	; 197
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 8f 10 	call	0x211e	; 0x211e <_ZN9MD_TCS230C1Ehhh>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define PH_PIN A1
float voltage, phValue, temperature = 25;
DFRobot_PH ph;
     88a:	80 ea       	ldi	r24, 0xA0	; 160
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0c 94 a3 00 	jmp	0x146	; 0x146 <_ZN10DFRobot_PHC1Ev>

00000892 <_GLOBAL__sub_D_ds>:
     892:	80 ea       	ldi	r24, 0xA0	; 160
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 c9 00 	call	0x192	; 0x192 <_ZN10DFRobot_PHD1Ev>
     89a:	85 ec       	ldi	r24, 0xC5	; 197
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0c 94 a3 10 	jmp	0x2146	; 0x2146 <_ZN9MD_TCS230D1Ev>

000008a2 <_ZN7OneWire12reset_searchEv>:
     8a2:	fc 01       	movw	r30, r24
     8a4:	13 86       	std	Z+11, r1	; 0x0b
     8a6:	15 86       	std	Z+13, r1	; 0x0d
     8a8:	14 86       	std	Z+12, r1	; 0x0c
     8aa:	dc 01       	movw	r26, r24
     8ac:	1b 96       	adiw	r26, 0x0b	; 11
     8ae:	33 96       	adiw	r30, 0x03	; 3
     8b0:	1e 92       	st	-X, r1
     8b2:	ae 17       	cp	r26, r30
     8b4:	bf 07       	cpc	r27, r31
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <_ZN7OneWire12reset_searchEv+0xe>
     8b8:	08 95       	ret

000008ba <_ZN7OneWire5beginEh>:
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
     8c2:	16 2f       	mov	r17, r22
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	81 2f       	mov	r24, r17
     8c8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
     8cc:	61 2f       	mov	r22, r17
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	fb 01       	movw	r30, r22
     8d2:	ea 55       	subi	r30, 0x5A	; 90
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	e4 91       	lpm	r30, Z
     8d8:	e8 83       	st	Y, r30
     8da:	fb 01       	movw	r30, r22
     8dc:	e6 54       	subi	r30, 0x46	; 70
     8de:	ff 4f       	sbci	r31, 0xFF	; 255
     8e0:	e4 91       	lpm	r30, Z
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	ee 0f       	add	r30, r30
     8e6:	ff 1f       	adc	r31, r31
     8e8:	e2 53       	subi	r30, 0x32	; 50
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	85 91       	lpm	r24, Z+
     8ee:	94 91       	lpm	r25, Z
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	ce 01       	movw	r24, r28
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	1f 91       	pop	r17
     8fc:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <_ZN7OneWire12reset_searchEv>

00000900 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     900:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     902:	91 8d       	ldd	r25, Z+25	; 0x19
     904:	22 8d       	ldd	r18, Z+26	; 0x1a
     906:	89 2f       	mov	r24, r25
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	80 5c       	subi	r24, 0xC0	; 192
     90c:	9f 4f       	sbci	r25, 0xFF	; 255
     90e:	82 1b       	sub	r24, r18
     910:	91 09       	sbc	r25, r1
}
     912:	8f 73       	andi	r24, 0x3F	; 63
     914:	99 27       	eor	r25, r25
     916:	08 95       	ret

00000918 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     918:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     91a:	91 8d       	ldd	r25, Z+25	; 0x19
     91c:	82 8d       	ldd	r24, Z+26	; 0x1a
     91e:	98 17       	cp	r25, r24
     920:	31 f0       	breq	.+12     	; 0x92e <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     922:	82 8d       	ldd	r24, Z+26	; 0x1a
     924:	e8 0f       	add	r30, r24
     926:	f1 1d       	adc	r31, r1
     928:	85 8d       	ldd	r24, Z+29	; 0x1d
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     932:	08 95       	ret

00000934 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     934:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     936:	91 8d       	ldd	r25, Z+25	; 0x19
     938:	82 8d       	ldd	r24, Z+26	; 0x1a
     93a:	98 17       	cp	r25, r24
     93c:	61 f0       	breq	.+24     	; 0x956 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     93e:	82 8d       	ldd	r24, Z+26	; 0x1a
     940:	df 01       	movw	r26, r30
     942:	a8 0f       	add	r26, r24
     944:	b1 1d       	adc	r27, r1
     946:	5d 96       	adiw	r26, 0x1d	; 29
     948:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     94a:	92 8d       	ldd	r25, Z+26	; 0x1a
     94c:	9f 5f       	subi	r25, 0xFF	; 255
     94e:	9f 73       	andi	r25, 0x3F	; 63
     950:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     95a:	08 95       	ret

0000095c <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     95c:	fc 01       	movw	r30, r24
     95e:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     960:	44 8d       	ldd	r20, Z+28	; 0x1c
     962:	25 2f       	mov	r18, r21
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	84 2f       	mov	r24, r20
     968:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     96a:	82 1b       	sub	r24, r18
     96c:	93 0b       	sbc	r25, r19
     96e:	54 17       	cp	r21, r20
     970:	10 f0       	brcs	.+4      	; 0x976 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     972:	cf 96       	adiw	r24, 0x3f	; 63
     974:	08 95       	ret
  return tail - head - 1;
     976:	01 97       	sbiw	r24, 0x01	; 1
}
     978:	08 95       	ret

0000097a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     97a:	89 e1       	ldi	r24, 0x19	; 25
     97c:	96 e0       	ldi	r25, 0x06	; 6
     97e:	89 2b       	or	r24, r25
     980:	49 f0       	breq	.+18     	; 0x994 <_Z14serialEventRunv+0x1a>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	89 2b       	or	r24, r25
     988:	29 f0       	breq	.+10     	; 0x994 <_Z14serialEventRunv+0x1a>
     98a:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z17Serial0_availablev>
     98e:	81 11       	cpse	r24, r1
     990:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     994:	08 95       	ret

00000996 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     996:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     998:	84 8d       	ldd	r24, Z+28	; 0x1c
     99a:	df 01       	movw	r26, r30
     99c:	a8 0f       	add	r26, r24
     99e:	b1 1d       	adc	r27, r1
     9a0:	a3 5a       	subi	r26, 0xA3	; 163
     9a2:	bf 4f       	sbci	r27, 0xFF	; 255
     9a4:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     9a6:	84 8d       	ldd	r24, Z+28	; 0x1c
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	8f 73       	andi	r24, 0x3F	; 63
     9ae:	99 27       	eor	r25, r25
     9b0:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     9b2:	a6 89       	ldd	r26, Z+22	; 0x16
     9b4:	b7 89       	ldd	r27, Z+23	; 0x17
     9b6:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9b8:	a0 89       	ldd	r26, Z+16	; 0x10
     9ba:	b1 89       	ldd	r27, Z+17	; 0x11
     9bc:	8c 91       	ld	r24, X
     9be:	83 70       	andi	r24, 0x03	; 3
     9c0:	80 64       	ori	r24, 0x40	; 64
     9c2:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     9c4:	93 8d       	ldd	r25, Z+27	; 0x1b
     9c6:	84 8d       	ldd	r24, Z+28	; 0x1c
     9c8:	98 13       	cpse	r25, r24
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9cc:	02 88       	ldd	r0, Z+18	; 0x12
     9ce:	f3 89       	ldd	r31, Z+19	; 0x13
     9d0:	e0 2d       	mov	r30, r0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	80 83       	st	Z, r24
     9d8:	08 95       	ret

000009da <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9da:	ef 92       	push	r14
     9dc:	ff 92       	push	r15
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	ec 01       	movw	r28, r24
  _written = true;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9f0:	98 13       	cpse	r25, r24
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <_ZN14HardwareSerial5writeEh+0x24>
     9f4:	e8 89       	ldd	r30, Y+16	; 0x10
     9f6:	f9 89       	ldd	r31, Y+17	; 0x11
     9f8:	80 81       	ld	r24, Z
     9fa:	85 fd       	sbrc	r24, 5
     9fc:	26 c0       	rjmp	.+76     	; 0xa4a <_ZN14HardwareSerial5writeEh+0x70>
     9fe:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     a00:	0b 8d       	ldd	r16, Y+27	; 0x1b
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	0f 5f       	subi	r16, 0xFF	; 255
     a06:	1f 4f       	sbci	r17, 0xFF	; 255
     a08:	0f 73       	andi	r16, 0x3F	; 63
     a0a:	11 27       	eor	r17, r17
     a0c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     a0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a10:	e8 12       	cpse	r14, r24
     a12:	0c c0       	rjmp	.+24     	; 0xa2c <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	07 fc       	sbrc	r0, 7
     a18:	fa cf       	rjmp	.-12     	; 0xa0e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a1a:	e8 89       	ldd	r30, Y+16	; 0x10
     a1c:	f9 89       	ldd	r31, Y+17	; 0x11
     a1e:	80 81       	ld	r24, Z
     a20:	85 ff       	sbrs	r24, 5
     a22:	f5 cf       	rjmp	.-22     	; 0xa0e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a24:	ce 01       	movw	r24, r28
     a26:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a2a:	f1 cf       	rjmp	.-30     	; 0xa0e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a2e:	fe 01       	movw	r30, r28
     a30:	e8 0f       	add	r30, r24
     a32:	f1 1d       	adc	r31, r1
     a34:	e3 5a       	subi	r30, 0xA3	; 163
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a3a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a3c:	f8 94       	cli
    _tx_buffer_head = i;
     a3e:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a40:	ea 89       	ldd	r30, Y+18	; 0x12
     a42:	fb 89       	ldd	r31, Y+19	; 0x13
     a44:	80 81       	ld	r24, Z
     a46:	80 62       	ori	r24, 0x20	; 32
     a48:	0a c0       	rjmp	.+20     	; 0xa5e <_ZN14HardwareSerial5writeEh+0x84>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a4a:	9f b7       	in	r25, 0x3f	; 63
     a4c:	f8 94       	cli
      *_udr = c;
     a4e:	ee 89       	ldd	r30, Y+22	; 0x16
     a50:	ff 89       	ldd	r31, Y+23	; 0x17
     a52:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a54:	e8 89       	ldd	r30, Y+16	; 0x10
     a56:	f9 89       	ldd	r31, Y+17	; 0x11
     a58:	80 81       	ld	r24, Z
     a5a:	83 70       	andi	r24, 0x03	; 3
     a5c:	80 64       	ori	r24, 0x40	; 64
     a5e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a60:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	08 95       	ret

00000a74 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a7a:	88 8d       	ldd	r24, Y+24	; 0x18
     a7c:	88 23       	and	r24, r24
     a7e:	c9 f0       	breq	.+50     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a80:	ea 89       	ldd	r30, Y+18	; 0x12
     a82:	fb 89       	ldd	r31, Y+19	; 0x13
     a84:	80 81       	ld	r24, Z
     a86:	85 fd       	sbrc	r24, 5
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <_ZN14HardwareSerial5flushEv+0x20>
     a8a:	a8 89       	ldd	r26, Y+16	; 0x10
     a8c:	b9 89       	ldd	r27, Y+17	; 0x11
     a8e:	8c 91       	ld	r24, X
     a90:	86 fd       	sbrc	r24, 6
     a92:	0f c0       	rjmp	.+30     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	07 fc       	sbrc	r0, 7
     a98:	f5 cf       	rjmp	.-22     	; 0xa84 <_ZN14HardwareSerial5flushEv+0x10>
     a9a:	80 81       	ld	r24, Z
     a9c:	85 ff       	sbrs	r24, 5
     a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     aa0:	a8 89       	ldd	r26, Y+16	; 0x10
     aa2:	b9 89       	ldd	r27, Y+17	; 0x11
     aa4:	8c 91       	ld	r24, X
     aa6:	85 ff       	sbrs	r24, 5
     aa8:	ed cf       	rjmp	.-38     	; 0xa84 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ab0:	e7 cf       	rjmp	.-50     	; 0xa80 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	ec 01       	movw	r28, r24
     ac8:	6a 01       	movw	r12, r20
     aca:	7b 01       	movw	r14, r22
     acc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ace:	e8 89       	ldd	r30, Y+16	; 0x10
     ad0:	f9 89       	ldd	r31, Y+17	; 0x11
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     ad6:	41 15       	cp	r20, r1
     ad8:	51 4e       	sbci	r21, 0xE1	; 225
     ada:	61 05       	cpc	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	b1 f0       	breq	.+44     	; 0xb0c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	79 e0       	ldi	r23, 0x09	; 9
     ae4:	8d e3       	ldi	r24, 0x3D	; 61
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a7 01       	movw	r20, r14
     aea:	96 01       	movw	r18, r12
     aec:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodsi4>
     af0:	da 01       	movw	r26, r20
     af2:	c9 01       	movw	r24, r18
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	a1 09       	sbc	r26, r1
     af8:	b1 09       	sbc	r27, r1
     afa:	b6 95       	lsr	r27
     afc:	a7 95       	ror	r26
     afe:	97 95       	ror	r25
     b00:	87 95       	ror	r24
     b02:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b04:	21 15       	cp	r18, r1
     b06:	80 e1       	ldi	r24, 0x10	; 16
     b08:	38 07       	cpc	r19, r24
     b0a:	a8 f0       	brcs	.+42     	; 0xb36 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     b0c:	e8 89       	ldd	r30, Y+16	; 0x10
     b0e:	f9 89       	ldd	r31, Y+17	; 0x11
     b10:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     b12:	60 e8       	ldi	r22, 0x80	; 128
     b14:	74 e8       	ldi	r23, 0x84	; 132
     b16:	8e e1       	ldi	r24, 0x1E	; 30
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a7 01       	movw	r20, r14
     b1c:	96 01       	movw	r18, r12
     b1e:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodsi4>
     b22:	da 01       	movw	r26, r20
     b24:	c9 01       	movw	r24, r18
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	a1 09       	sbc	r26, r1
     b2a:	b1 09       	sbc	r27, r1
     b2c:	b6 95       	lsr	r27
     b2e:	a7 95       	ror	r26
     b30:	97 95       	ror	r25
     b32:	87 95       	ror	r24
     b34:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b36:	ec 85       	ldd	r30, Y+12	; 0x0c
     b38:	fd 85       	ldd	r31, Y+13	; 0x0d
     b3a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b3c:	ee 85       	ldd	r30, Y+14	; 0x0e
     b3e:	ff 85       	ldd	r31, Y+15	; 0x0f
     b40:	20 83       	st	Z, r18

  _written = false;
     b42:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b44:	ec 89       	ldd	r30, Y+20	; 0x14
     b46:	fd 89       	ldd	r31, Y+21	; 0x15
     b48:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b4a:	ea 89       	ldd	r30, Y+18	; 0x12
     b4c:	fb 89       	ldd	r31, Y+19	; 0x13
     b4e:	80 81       	ld	r24, Z
     b50:	80 61       	ori	r24, 0x10	; 16
     b52:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b54:	ea 89       	ldd	r30, Y+18	; 0x12
     b56:	fb 89       	ldd	r31, Y+19	; 0x13
     b58:	80 81       	ld	r24, Z
     b5a:	88 60       	ori	r24, 0x08	; 8
     b5c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b5e:	ea 89       	ldd	r30, Y+18	; 0x12
     b60:	fb 89       	ldd	r31, Y+19	; 0x13
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b68:	ea 89       	ldd	r30, Y+18	; 0x12
     b6a:	fb 89       	ldd	r31, Y+19	; 0x13
     b6c:	80 81       	ld	r24, Z
     b6e:	8f 7d       	andi	r24, 0xDF	; 223
     b70:	80 83       	st	Z, r24
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	08 95       	ret

00000b82 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b96:	e0 91 de 02 	lds	r30, 0x02DE	; 0x8002de <Serial+0x10>
     b9a:	f0 91 df 02 	lds	r31, 0x02DF	; 0x8002df <Serial+0x11>
     b9e:	80 81       	ld	r24, Z
     ba0:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <Serial+0x16>
     ba4:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <Serial+0x17>
     ba8:	82 fd       	sbrc	r24, 2
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     bac:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     bae:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <Serial+0x19>
     bb2:	8f 5f       	subi	r24, 0xFF	; 255
     bb4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     bb6:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <Serial+0x1a>
     bba:	82 17       	cp	r24, r18
     bbc:	51 f0       	breq	.+20     	; 0xbd2 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     bbe:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <Serial+0x19>
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	e2 53       	subi	r30, 0x32	; 50
     bc6:	fd 4f       	sbci	r31, 0xFD	; 253
     bc8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bca:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <Serial+0x19>
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bd0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bd2:	ff 91       	pop	r31
     bd4:	ef 91       	pop	r30
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	2f 91       	pop	r18
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	2f 93       	push	r18
     bf2:	3f 93       	push	r19
     bf4:	4f 93       	push	r20
     bf6:	5f 93       	push	r21
     bf8:	6f 93       	push	r22
     bfa:	7f 93       	push	r23
     bfc:	8f 93       	push	r24
     bfe:	9f 93       	push	r25
     c00:	af 93       	push	r26
     c02:	bf 93       	push	r27
     c04:	ef 93       	push	r30
     c06:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c08:	8e ec       	ldi	r24, 0xCE	; 206
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	0e 94 cb 04 	call	0x996	; 0x996 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti

00000c32 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c32:	8e ec       	ldi	r24, 0xCE	; 206
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 80 04 	call	0x900	; 0x900 <_ZN14HardwareSerial9availableEv>
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	89 2b       	or	r24, r25
     c3e:	09 f4       	brne	.+2      	; 0xc42 <_Z17Serial0_availablev+0x10>
     c40:	20 e0       	ldi	r18, 0x00	; 0
}
     c42:	82 2f       	mov	r24, r18
     c44:	08 95       	ret

00000c46 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c46:	ee ec       	ldi	r30, 0xCE	; 206
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	13 82       	std	Z+3, r1	; 0x03
     c4c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c4e:	88 ee       	ldi	r24, 0xE8	; 232
     c50:	93 e0       	ldi	r25, 0x03	; 3
     c52:	a0 e0       	ldi	r26, 0x00	; 0
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	84 83       	std	Z+4, r24	; 0x04
     c58:	95 83       	std	Z+5, r25	; 0x05
     c5a:	a6 83       	std	Z+6, r26	; 0x06
     c5c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c5e:	8f e7       	ldi	r24, 0x7F	; 127
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	85 ec       	ldi	r24, 0xC5	; 197
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	95 87       	std	Z+13, r25	; 0x0d
     c6c:	84 87       	std	Z+12, r24	; 0x0c
     c6e:	84 ec       	ldi	r24, 0xC4	; 196
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	97 87       	std	Z+15, r25	; 0x0f
     c74:	86 87       	std	Z+14, r24	; 0x0e
     c76:	80 ec       	ldi	r24, 0xC0	; 192
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	91 8b       	std	Z+17, r25	; 0x11
     c7c:	80 8b       	std	Z+16, r24	; 0x10
     c7e:	81 ec       	ldi	r24, 0xC1	; 193
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	93 8b       	std	Z+19, r25	; 0x13
     c84:	82 8b       	std	Z+18, r24	; 0x12
     c86:	82 ec       	ldi	r24, 0xC2	; 194
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	95 8b       	std	Z+21, r25	; 0x15
     c8c:	84 8b       	std	Z+20, r24	; 0x14
     c8e:	86 ec       	ldi	r24, 0xC6	; 198
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	97 8b       	std	Z+23, r25	; 0x17
     c94:	86 8b       	std	Z+22, r24	; 0x16
     c96:	11 8e       	std	Z+25, r1	; 0x19
     c98:	12 8e       	std	Z+26, r1	; 0x1a
     c9a:	13 8e       	std	Z+27, r1	; 0x1b
     c9c:	14 8e       	std	Z+28, r1	; 0x1c
     c9e:	08 95       	ret

00000ca0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     ca0:	0e 94 30 08 	call	0x1060	; 0x1060 <init>

	initVariant();
     ca4:	0e 94 40 10 	call	0x2080	; 0x2080 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     ca8:	0e 94 09 04 	call	0x812	; 0x812 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     cac:	cd eb       	ldi	r28, 0xBD	; 189
     cae:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     cb0:	0e 94 38 04 	call	0x870	; 0x870 <loop>
		if (serialEventRun) serialEventRun();
     cb4:	20 97       	sbiw	r28, 0x00	; 0
     cb6:	e1 f3       	breq	.-8      	; 0xcb0 <main+0x10>
     cb8:	0e 94 bd 04 	call	0x97a	; 0x97a <_Z14serialEventRunv>
     cbc:	f9 cf       	rjmp	.-14     	; 0xcb0 <main+0x10>

00000cbe <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	6c 01       	movw	r12, r24
     cd0:	7a 01       	movw	r14, r20
     cd2:	8b 01       	movw	r16, r22
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	ce 15       	cp	r28, r14
     cda:	df 05       	cpc	r29, r15
     cdc:	81 f0       	breq	.+32     	; 0xcfe <_ZN5Print5writeEPKhj+0x40>
     cde:	d8 01       	movw	r26, r16
     ce0:	6d 91       	ld	r22, X+
     ce2:	8d 01       	movw	r16, r26
     ce4:	d6 01       	movw	r26, r12
     ce6:	ed 91       	ld	r30, X+
     ce8:	fc 91       	ld	r31, X
     cea:	01 90       	ld	r0, Z+
     cec:	f0 81       	ld	r31, Z
     cee:	e0 2d       	mov	r30, r0
     cf0:	c6 01       	movw	r24, r12
     cf2:	09 95       	icall
     cf4:	89 2b       	or	r24, r25
     cf6:	11 f0       	breq	.+4      	; 0xcfc <_ZN5Print5writeEPKhj+0x3e>
     cf8:	21 96       	adiw	r28, 0x01	; 1
     cfa:	ee cf       	rjmp	.-36     	; 0xcd8 <_ZN5Print5writeEPKhj+0x1a>
     cfc:	7e 01       	movw	r14, r28
     cfe:	c7 01       	movw	r24, r14
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	ff 90       	pop	r15
     d0a:	ef 90       	pop	r14
     d0c:	df 90       	pop	r13
     d0e:	cf 90       	pop	r12
     d10:	08 95       	ret

00000d12 <_ZN5Print5writeEPKc>:
     d12:	61 15       	cp	r22, r1
     d14:	71 05       	cpc	r23, r1
     d16:	79 f0       	breq	.+30     	; 0xd36 <_ZN5Print5writeEPKc+0x24>
     d18:	fb 01       	movw	r30, r22
     d1a:	01 90       	ld	r0, Z+
     d1c:	00 20       	and	r0, r0
     d1e:	e9 f7       	brne	.-6      	; 0xd1a <_ZN5Print5writeEPKc+0x8>
     d20:	31 97       	sbiw	r30, 0x01	; 1
     d22:	af 01       	movw	r20, r30
     d24:	46 1b       	sub	r20, r22
     d26:	57 0b       	sbc	r21, r23
     d28:	dc 01       	movw	r26, r24
     d2a:	ed 91       	ld	r30, X+
     d2c:	fc 91       	ld	r31, X
     d2e:	02 80       	ldd	r0, Z+2	; 0x02
     d30:	f3 81       	ldd	r31, Z+3	; 0x03
     d32:	e0 2d       	mov	r30, r0
     d34:	09 94       	ijmp
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	08 95       	ret

00000d3c <_ZN5Print5printEPK19__FlashStringHelper>:
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	8c 01       	movw	r16, r24
     d4a:	7b 01       	movw	r14, r22
     d4c:	c0 e0       	ldi	r28, 0x00	; 0
     d4e:	d0 e0       	ldi	r29, 0x00	; 0
     d50:	f7 01       	movw	r30, r14
     d52:	ec 0f       	add	r30, r28
     d54:	fd 1f       	adc	r31, r29
     d56:	64 91       	lpm	r22, Z
     d58:	66 23       	and	r22, r22
     d5a:	61 f0       	breq	.+24     	; 0xd74 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     d5c:	d8 01       	movw	r26, r16
     d5e:	ed 91       	ld	r30, X+
     d60:	fc 91       	ld	r31, X
     d62:	01 90       	ld	r0, Z+
     d64:	f0 81       	ld	r31, Z
     d66:	e0 2d       	mov	r30, r0
     d68:	c8 01       	movw	r24, r16
     d6a:	09 95       	icall
     d6c:	89 2b       	or	r24, r25
     d6e:	11 f0       	breq	.+4      	; 0xd74 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     d70:	21 96       	adiw	r28, 0x01	; 1
     d72:	ee cf       	rjmp	.-36     	; 0xd50 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     d74:	ce 01       	movw	r24, r28
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	08 95       	ret

00000d84 <_ZN5Print5printEPKc>:
     d84:	0c 94 89 06 	jmp	0xd12	; 0xd12 <_ZN5Print5writeEPKc>

00000d88 <_ZN5Print5printEc>:
     d88:	dc 01       	movw	r26, r24
     d8a:	ed 91       	ld	r30, X+
     d8c:	fc 91       	ld	r31, X
     d8e:	01 90       	ld	r0, Z+
     d90:	f0 81       	ld	r31, Z
     d92:	e0 2d       	mov	r30, r0
     d94:	09 94       	ijmp

00000d96 <_ZN5Print11printNumberEmh>:
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	a1 97       	sbiw	r28, 0x21	; 33
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	7c 01       	movw	r14, r24
     dbc:	fa 01       	movw	r30, r20
     dbe:	cb 01       	movw	r24, r22
     dc0:	19 a2       	std	Y+33, r1	; 0x21
     dc2:	22 30       	cpi	r18, 0x02	; 2
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <_ZN5Print11printNumberEmh+0x32>
     dc6:	2a e0       	ldi	r18, 0x0A	; 10
     dc8:	8e 01       	movw	r16, r28
     dca:	0f 5d       	subi	r16, 0xDF	; 223
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	82 2e       	mov	r8, r18
     dd0:	91 2c       	mov	r9, r1
     dd2:	a1 2c       	mov	r10, r1
     dd4:	b1 2c       	mov	r11, r1
     dd6:	bf 01       	movw	r22, r30
     dd8:	a5 01       	movw	r20, r10
     dda:	94 01       	movw	r18, r8
     ddc:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodsi4>
     de0:	f9 01       	movw	r30, r18
     de2:	ca 01       	movw	r24, r20
     de4:	01 50       	subi	r16, 0x01	; 1
     de6:	11 09       	sbc	r17, r1
     de8:	6a 30       	cpi	r22, 0x0A	; 10
     dea:	10 f4       	brcc	.+4      	; 0xdf0 <_ZN5Print11printNumberEmh+0x5a>
     dec:	60 5d       	subi	r22, 0xD0	; 208
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <_ZN5Print11printNumberEmh+0x5c>
     df0:	69 5c       	subi	r22, 0xC9	; 201
     df2:	d8 01       	movw	r26, r16
     df4:	6c 93       	st	X, r22
     df6:	23 2b       	or	r18, r19
     df8:	24 2b       	or	r18, r20
     dfa:	25 2b       	or	r18, r21
     dfc:	61 f7       	brne	.-40     	; 0xdd6 <_ZN5Print11printNumberEmh+0x40>
     dfe:	b8 01       	movw	r22, r16
     e00:	c7 01       	movw	r24, r14
     e02:	0e 94 89 06 	call	0xd12	; 0xd12 <_ZN5Print5writeEPKc>
     e06:	a1 96       	adiw	r28, 0x21	; 33
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	bf 90       	pop	r11
     e20:	af 90       	pop	r10
     e22:	9f 90       	pop	r9
     e24:	8f 90       	pop	r8
     e26:	08 95       	ret

00000e28 <_ZN5Print5printEmi>:
     e28:	21 15       	cp	r18, r1
     e2a:	31 05       	cpc	r19, r1
     e2c:	41 f4       	brne	.+16     	; 0xe3e <_ZN5Print5printEmi+0x16>
     e2e:	dc 01       	movw	r26, r24
     e30:	ed 91       	ld	r30, X+
     e32:	fc 91       	ld	r31, X
     e34:	01 90       	ld	r0, Z+
     e36:	f0 81       	ld	r31, Z
     e38:	e0 2d       	mov	r30, r0
     e3a:	64 2f       	mov	r22, r20
     e3c:	09 94       	ijmp
     e3e:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_ZN5Print11printNumberEmh>

00000e42 <_ZN5Print5printEhi>:
     e42:	9a 01       	movw	r18, r20
     e44:	46 2f       	mov	r20, r22
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_ZN5Print5printEmi>

00000e50 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
  if (base == 0) {
     e60:	21 15       	cp	r18, r1
     e62:	31 05       	cpc	r19, r1
     e64:	81 f4       	brne	.+32     	; 0xe86 <_ZN5Print5printEli+0x36>
    return write(n);
     e66:	dc 01       	movw	r26, r24
     e68:	ed 91       	ld	r30, X+
     e6a:	fc 91       	ld	r31, X
     e6c:	01 90       	ld	r0, Z+
     e6e:	f0 81       	ld	r31, Z
     e70:	e0 2d       	mov	r30, r0
     e72:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     e84:	09 94       	ijmp
  } else if (base == 10) {
     e86:	2a 30       	cpi	r18, 0x0A	; 10
     e88:	31 05       	cpc	r19, r1
     e8a:	01 f5       	brne	.+64     	; 0xecc <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     e8c:	77 ff       	sbrs	r23, 7
     e8e:	1d c0       	rjmp	.+58     	; 0xeca <_ZN5Print5printEli+0x7a>
     e90:	6a 01       	movw	r12, r20
     e92:	7b 01       	movw	r14, r22
     e94:	ec 01       	movw	r28, r24
      int t = print('-');
     e96:	6d e2       	ldi	r22, 0x2D	; 45
     e98:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN5Print5printEc>
     e9c:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e9e:	44 27       	eor	r20, r20
     ea0:	55 27       	eor	r21, r21
     ea2:	ba 01       	movw	r22, r20
     ea4:	4c 19       	sub	r20, r12
     ea6:	5d 09       	sbc	r21, r13
     ea8:	6e 09       	sbc	r22, r14
     eaa:	7f 09       	sbc	r23, r15
     eac:	2a e0       	ldi	r18, 0x0A	; 10
     eae:	ce 01       	movw	r24, r28
     eb0:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN5Print11printNumberEmh>
     eb4:	80 0f       	add	r24, r16
     eb6:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     eca:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     edc:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_ZN5Print11printNumberEmh>

00000ee0 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     ee0:	9a 01       	movw	r18, r20
  return print((long) n, base);
     ee2:	ab 01       	movw	r20, r22
     ee4:	77 0f       	add	r23, r23
     ee6:	66 0b       	sbc	r22, r22
     ee8:	77 0b       	sbc	r23, r23
     eea:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_ZN5Print5printEli>

00000eee <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     eee:	08 95       	ret

00000ef0 <attachInterrupt>:
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	e8 f4       	brcc	.+58     	; 0xf2e <attachInterrupt+0x3e>
     ef4:	e8 2f       	mov	r30, r24
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ee 0f       	add	r30, r30
     efa:	ff 1f       	adc	r31, r31
     efc:	ea 5d       	subi	r30, 0xDA	; 218
     efe:	fe 4f       	sbci	r31, 0xFE	; 254
     f00:	71 83       	std	Z+1, r23	; 0x01
     f02:	60 83       	st	Z, r22
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	41 f0       	breq	.+16     	; 0xf18 <attachInterrupt+0x28>
     f08:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     f0c:	8c 7f       	andi	r24, 0xFC	; 252
     f0e:	48 2b       	or	r20, r24
     f10:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     f14:	e8 9a       	sbi	0x1d, 0	; 29
     f16:	08 95       	ret
     f18:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     f1c:	83 7f       	andi	r24, 0xF3	; 243
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	44 0f       	add	r20, r20
     f24:	55 1f       	adc	r21, r21
     f26:	48 2b       	or	r20, r24
     f28:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
     f2c:	e9 9a       	sbi	0x1d, 1	; 29
     f2e:	08 95       	ret

00000f30 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
     f52:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc>
     f56:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x1>
     f5a:	09 95       	icall
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	2f 93       	push	r18
     f8a:	3f 93       	push	r19
     f8c:	4f 93       	push	r20
     f8e:	5f 93       	push	r21
     f90:	6f 93       	push	r22
     f92:	7f 93       	push	r23
     f94:	8f 93       	push	r24
     f96:	9f 93       	push	r25
     f98:	af 93       	push	r26
     f9a:	bf 93       	push	r27
     f9c:	ef 93       	push	r30
     f9e:	ff 93       	push	r31
     fa0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <intFunc+0x2>
     fa4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <intFunc+0x3>
     fa8:	09 95       	icall
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	8f 93       	push	r24
     fdc:	9f 93       	push	r25
     fde:	af 93       	push	r26
     fe0:	bf 93       	push	r27
     fe2:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <timer0_millis>
     fe6:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <timer0_millis+0x1>
     fea:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <timer0_millis+0x2>
     fee:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <timer0_millis+0x3>
     ff2:	30 91 6b 03 	lds	r19, 0x036B	; 0x80036b <timer0_fract>
     ff6:	23 e0       	ldi	r18, 0x03	; 3
     ff8:	23 0f       	add	r18, r19
     ffa:	2d 37       	cpi	r18, 0x7D	; 125
     ffc:	20 f4       	brcc	.+8      	; 0x1006 <__vector_16+0x3a>
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	a1 1d       	adc	r26, r1
    1002:	b1 1d       	adc	r27, r1
    1004:	05 c0       	rjmp	.+10     	; 0x1010 <__vector_16+0x44>
    1006:	26 e8       	ldi	r18, 0x86	; 134
    1008:	23 0f       	add	r18, r19
    100a:	02 96       	adiw	r24, 0x02	; 2
    100c:	a1 1d       	adc	r26, r1
    100e:	b1 1d       	adc	r27, r1
    1010:	20 93 6b 03 	sts	0x036B, r18	; 0x80036b <timer0_fract>
    1014:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <timer0_millis>
    1018:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <timer0_millis+0x1>
    101c:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <timer0_millis+0x2>
    1020:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <timer0_millis+0x3>
    1024:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <timer0_overflow_count>
    1028:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <timer0_overflow_count+0x1>
    102c:	a0 91 72 03 	lds	r26, 0x0372	; 0x800372 <timer0_overflow_count+0x2>
    1030:	b0 91 73 03 	lds	r27, 0x0373	; 0x800373 <timer0_overflow_count+0x3>
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	a1 1d       	adc	r26, r1
    1038:	b1 1d       	adc	r27, r1
    103a:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <timer0_overflow_count>
    103e:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <timer0_overflow_count+0x1>
    1042:	a0 93 72 03 	sts	0x0372, r26	; 0x800372 <timer0_overflow_count+0x2>
    1046:	b0 93 73 03 	sts	0x0373, r27	; 0x800373 <timer0_overflow_count+0x3>
    104a:	bf 91       	pop	r27
    104c:	af 91       	pop	r26
    104e:	9f 91       	pop	r25
    1050:	8f 91       	pop	r24
    1052:	3f 91       	pop	r19
    1054:	2f 91       	pop	r18
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1060:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1062:	84 b5       	in	r24, 0x24	; 36
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1068:	84 b5       	in	r24, 0x24	; 36
    106a:	81 60       	ori	r24, 0x01	; 1
    106c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    106e:	85 b5       	in	r24, 0x25	; 37
    1070:	82 60       	ori	r24, 0x02	; 2
    1072:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1074:	85 b5       	in	r24, 0x25	; 37
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    107a:	ee e6       	ldi	r30, 0x6E	; 110
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1084:	e1 e8       	ldi	r30, 0x81	; 129
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    108a:	80 81       	ld	r24, Z
    108c:	82 60       	ori	r24, 0x02	; 2
    108e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1090:	80 81       	ld	r24, Z
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1096:	e0 e8       	ldi	r30, 0x80	; 128
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 60       	ori	r24, 0x01	; 1
    109e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    10a0:	e1 eb       	ldi	r30, 0xB1	; 177
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	84 60       	ori	r24, 0x04	; 4
    10a8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    10aa:	e0 eb       	ldi	r30, 0xB0	; 176
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    10b4:	ea e7       	ldi	r30, 0x7A	; 122
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	84 60       	ori	r24, 0x04	; 4
    10bc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    10c4:	80 81       	ld	r24, Z
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    10d0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    10d4:	08 95       	ret

000010d6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	18 2f       	mov	r17, r24
    10de:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <pinMode>
	if (val == 0)
    10e6:	20 97       	sbiw	r28, 0x00	; 0
    10e8:	11 f4       	brne	.+4      	; 0x10ee <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <analogWrite+0x20>
	}
	else if (val == 255)
    10ee:	cf 3f       	cpi	r28, 0xFF	; 255
    10f0:	d1 05       	cpc	r29, r1
    10f2:	39 f4       	brne	.+14     	; 0x1102 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    10fe:	0c 94 2f 09 	jmp	0x125e	; 0x125e <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1102:	e1 2f       	mov	r30, r17
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	ee 56       	subi	r30, 0x6E	; 110
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	e4 91       	lpm	r30, Z
    110c:	e3 30       	cpi	r30, 0x03	; 3
    110e:	f9 f0       	breq	.+62     	; 0x114e <analogWrite+0x78>
    1110:	48 f4       	brcc	.+18     	; 0x1124 <analogWrite+0x4e>
    1112:	e1 30       	cpi	r30, 0x01	; 1
    1114:	b9 f0       	breq	.+46     	; 0x1144 <analogWrite+0x6e>
    1116:	e2 30       	cpi	r30, 0x02	; 2
    1118:	a1 f5       	brne	.+104    	; 0x1182 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    111a:	84 b5       	in	r24, 0x24	; 36
    111c:	80 62       	ori	r24, 0x20	; 32
    111e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1120:	c8 bd       	out	0x28, r28	; 40
				break;
    1122:	34 c0       	rjmp	.+104    	; 0x118c <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1124:	e7 30       	cpi	r30, 0x07	; 7
    1126:	e9 f0       	breq	.+58     	; 0x1162 <analogWrite+0x8c>
    1128:	e8 30       	cpi	r30, 0x08	; 8
    112a:	19 f1       	breq	.+70     	; 0x1172 <analogWrite+0x9c>
    112c:	e4 30       	cpi	r30, 0x04	; 4
    112e:	49 f5       	brne	.+82     	; 0x1182 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1130:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1134:	80 62       	ori	r24, 0x20	; 32
    1136:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    113a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    113e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    1142:	24 c0       	rjmp	.+72     	; 0x118c <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1144:	84 b5       	in	r24, 0x24	; 36
    1146:	80 68       	ori	r24, 0x80	; 128
    1148:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    114a:	c7 bd       	out	0x27, r28	; 39
				break;
    114c:	1f c0       	rjmp	.+62     	; 0x118c <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    114e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1152:	80 68       	ori	r24, 0x80	; 128
    1154:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    1158:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    115c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    1160:	15 c0       	rjmp	.+42     	; 0x118c <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1162:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1166:	80 68       	ori	r24, 0x80	; 128
    1168:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    116c:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    1170:	0d c0       	rjmp	.+26     	; 0x118c <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1172:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1176:	80 62       	ori	r24, 0x20	; 32
    1178:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    117c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    1180:	05 c0       	rjmp	.+10     	; 0x118c <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1182:	c0 38       	cpi	r28, 0x80	; 128
    1184:	d1 05       	cpc	r29, r1
    1186:	0c f0       	brlt	.+2      	; 0x118a <analogWrite+0xb4>
    1188:	b5 cf       	rjmp	.-150    	; 0x10f4 <analogWrite+0x1e>
    118a:	af cf       	rjmp	.-162    	; 0x10ea <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	81 f0       	breq	.+32     	; 0x11b8 <turnOffPWM+0x24>
    1198:	28 f4       	brcc	.+10     	; 0x11a4 <turnOffPWM+0x10>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	99 f0       	breq	.+38     	; 0x11c4 <turnOffPWM+0x30>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	a1 f0       	breq	.+40     	; 0x11ca <turnOffPWM+0x36>
    11a2:	08 95       	ret
    11a4:	87 30       	cpi	r24, 0x07	; 7
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <turnOffPWM+0x3e>
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	b9 f0       	breq	.+46     	; 0x11da <turnOffPWM+0x46>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	d1 f4       	brne	.+52     	; 0x11e4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11b0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    11b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    11bc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    11be:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    11c2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    11c4:	84 b5       	in	r24, 0x24	; 36
    11c6:	8f 77       	andi	r24, 0x7F	; 127
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    11ca:	84 b5       	in	r24, 0x24	; 36
    11cc:	8f 7d       	andi	r24, 0xDF	; 223
    11ce:	84 bd       	out	0x24, r24	; 36
    11d0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    11d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    11d6:	8f 77       	andi	r24, 0x7F	; 127
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    11da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    11de:	8f 7d       	andi	r24, 0xDF	; 223
    11e0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    11e4:	08 95       	ret

000011e6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	ea 55       	subi	r30, 0x5A	; 90
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    11f4:	fc 01       	movw	r30, r24
    11f6:	e6 54       	subi	r30, 0x46	; 70
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    11fc:	88 23       	and	r24, r24
    11fe:	61 f1       	breq	.+88     	; 0x1258 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	fc 01       	movw	r30, r24
    1208:	ee 51       	subi	r30, 0x1E	; 30
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	c5 91       	lpm	r28, Z+
    120e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1210:	fc 01       	movw	r30, r24
    1212:	e8 52       	subi	r30, 0x28	; 40
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	a5 91       	lpm	r26, Z+
    1218:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    121a:	61 11       	cpse	r22, r1
    121c:	09 c0       	rjmp	.+18     	; 0x1230 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    121e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1220:	f8 94       	cli
		*reg &= ~bit;
    1222:	88 81       	ld	r24, Y
    1224:	20 95       	com	r18
    1226:	82 23       	and	r24, r18
    1228:	88 83       	st	Y, r24
		*out &= ~bit;
    122a:	ec 91       	ld	r30, X
    122c:	2e 23       	and	r18, r30
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1230:	62 30       	cpi	r22, 0x02	; 2
    1232:	61 f4       	brne	.+24     	; 0x124c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1234:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1236:	f8 94       	cli
		*reg &= ~bit;
    1238:	88 81       	ld	r24, Y
    123a:	32 2f       	mov	r19, r18
    123c:	30 95       	com	r19
    123e:	83 23       	and	r24, r19
    1240:	88 83       	st	Y, r24
		*out |= bit;
    1242:	ec 91       	ld	r30, X
    1244:	2e 2b       	or	r18, r30
    1246:	2c 93       	st	X, r18
		SREG = oldSREG;
    1248:	9f bf       	out	0x3f, r25	; 63
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    124c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    124e:	f8 94       	cli
		*reg |= bit;
    1250:	e8 81       	ld	r30, Y
    1252:	2e 2b       	or	r18, r30
    1254:	28 83       	st	Y, r18
		SREG = oldSREG;
    1256:	8f bf       	out	0x3f, r24	; 63
	}
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	f9 01       	movw	r30, r18
    126a:	ee 56       	subi	r30, 0x6E	; 110
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1270:	f9 01       	movw	r30, r18
    1272:	ea 55       	subi	r30, 0x5A	; 90
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1278:	f9 01       	movw	r30, r18
    127a:	e6 54       	subi	r30, 0x46	; 70
    127c:	ff 4f       	sbci	r31, 0xFF	; 255
    127e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1280:	cc 23       	and	r28, r28
    1282:	c1 f0       	breq	.+48     	; 0x12b4 <digitalWrite+0x56>
    1284:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1286:	81 11       	cpse	r24, r1
    1288:	0e 94 ca 08 	call	0x1194	; 0x1194 <turnOffPWM>

	out = portOutputRegister(port);
    128c:	ec 2f       	mov	r30, r28
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	e8 52       	subi	r30, 0x28	; 40
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	a5 91       	lpm	r26, Z+
    129a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    129c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    129e:	f8 94       	cli

	if (val == LOW) {
    12a0:	11 11       	cpse	r17, r1
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <digitalWrite+0x4e>
		*out &= ~bit;
    12a4:	8c 91       	ld	r24, X
    12a6:	d0 95       	com	r29
    12a8:	d8 23       	and	r29, r24
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    12ac:	ec 91       	ld	r30, X
    12ae:	de 2b       	or	r29, r30
    12b0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    12b2:	9f bf       	out	0x3f, r25	; 63
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	08 95       	ret

000012bc <prvResetNextTaskUnblockTime>:
    12bc:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    12c0:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    12c4:	80 81       	ld	r24, Z
    12c6:	81 11       	cpse	r24, r1
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <prvResetNextTaskUnblockTime+0x14>
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	9f ef       	ldi	r25, 0xFF	; 255
    12ce:	0c c0       	rjmp	.+24     	; 0x12e8 <prvResetNextTaskUnblockTime+0x2c>
    12d0:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    12d4:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    12d8:	05 80       	ldd	r0, Z+5	; 0x05
    12da:	f6 81       	ldd	r31, Z+6	; 0x06
    12dc:	e0 2d       	mov	r30, r0
    12de:	06 80       	ldd	r0, Z+6	; 0x06
    12e0:	f7 81       	ldd	r31, Z+7	; 0x07
    12e2:	e0 2d       	mov	r30, r0
    12e4:	82 81       	ldd	r24, Z+2	; 0x02
    12e6:	93 81       	ldd	r25, Z+3	; 0x03
    12e8:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <xNextTaskUnblockTime+0x1>
    12ec:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <xNextTaskUnblockTime>
    12f0:	08 95       	ret

000012f2 <prvAddCurrentTaskToDelayedList>:
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	ec 01       	movw	r28, r24
    12fe:	f6 2e       	mov	r15, r22
    1300:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <xTickCount>
    1304:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <xTickCount+0x1>
    1308:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    130c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1310:	02 96       	adiw	r24, 0x02	; 2
    1312:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1316:	cf 3f       	cpi	r28, 0xFF	; 255
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	d8 07       	cpc	r29, r24
    131c:	89 f4       	brne	.+34     	; 0x1340 <prvAddCurrentTaskToDelayedList+0x4e>
    131e:	ff 20       	and	r15, r15
    1320:	79 f0       	breq	.+30     	; 0x1340 <prvAddCurrentTaskToDelayedList+0x4e>
    1322:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1326:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    132a:	6e 5f       	subi	r22, 0xFE	; 254
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	82 e8       	ldi	r24, 0x82	; 130
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	0c 94 19 12 	jmp	0x2432	; 0x2432 <vListInsertEnd>
    1340:	c0 0f       	add	r28, r16
    1342:	d1 1f       	adc	r29, r17
    1344:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1348:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    134c:	d3 83       	std	Z+3, r29	; 0x03
    134e:	c2 83       	std	Z+2, r28	; 0x02
    1350:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1354:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1358:	c0 17       	cp	r28, r16
    135a:	d1 07       	cpc	r29, r17
    135c:	68 f4       	brcc	.+26     	; 0x1378 <prvAddCurrentTaskToDelayedList+0x86>
    135e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <pxOverflowDelayedTaskList>
    1362:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <pxOverflowDelayedTaskList+0x1>
    1366:	6e 5f       	subi	r22, 0xFE	; 254
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <vListInsert>
    1378:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    137c:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    1380:	6e 5f       	subi	r22, 0xFE	; 254
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	0e 94 3a 12 	call	0x2474	; 0x2474 <vListInsert>
    1388:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <xNextTaskUnblockTime>
    138c:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <xNextTaskUnblockTime+0x1>
    1390:	c8 17       	cp	r28, r24
    1392:	d9 07       	cpc	r29, r25
    1394:	20 f4       	brcc	.+8      	; 0x139e <prvAddCurrentTaskToDelayedList+0xac>
    1396:	d0 93 78 03 	sts	0x0378, r29	; 0x800378 <xNextTaskUnblockTime+0x1>
    139a:	c0 93 77 03 	sts	0x0377, r28	; 0x800377 <xNextTaskUnblockTime>
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	08 95       	ret

000013aa <prvIdleTask>:
    13aa:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <uxDeletedTasksWaitingCleanUp>
    13ae:	88 23       	and	r24, r24
    13b0:	09 f1       	breq	.+66     	; 0x13f4 <prvIdleTask+0x4a>
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	0f 92       	push	r0
    13b8:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <xTasksWaitingTermination+0x5>
    13bc:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <xTasksWaitingTermination+0x6>
    13c0:	c6 81       	ldd	r28, Z+6	; 0x06
    13c2:	d7 81       	ldd	r29, Z+7	; 0x07
    13c4:	ce 01       	movw	r24, r28
    13c6:	02 96       	adiw	r24, 0x02	; 2
    13c8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    13cc:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <uxCurrentNumberOfTasks>
    13d0:	81 50       	subi	r24, 0x01	; 1
    13d2:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <uxCurrentNumberOfTasks>
    13d6:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <uxDeletedTasksWaitingCleanUp>
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <uxDeletedTasksWaitingCleanUp>
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	8f 89       	ldd	r24, Y+23	; 0x17
    13e6:	98 8d       	ldd	r25, Y+24	; 0x18
    13e8:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vPortFree>
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vPortFree>
    13f2:	db cf       	rjmp	.-74     	; 0x13aa <prvIdleTask>
    13f4:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <pxReadyTasksLists>
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	10 f0       	brcs	.+4      	; 0x1400 <prvIdleTask+0x56>
    13fc:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    1400:	0e 94 45 10 	call	0x208a	; 0x208a <vApplicationIdleHook>
    1404:	d2 cf       	rjmp	.-92     	; 0x13aa <prvIdleTask>

00001406 <xTaskCreate>:
    1406:	5f 92       	push	r5
    1408:	6f 92       	push	r6
    140a:	7f 92       	push	r7
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	3c 01       	movw	r6, r24
    1426:	6b 01       	movw	r12, r22
    1428:	5a 01       	movw	r10, r20
    142a:	49 01       	movw	r8, r18
    142c:	50 2e       	mov	r5, r16
    142e:	ca 01       	movw	r24, r20
    1430:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <pvPortMalloc>
    1434:	8c 01       	movw	r16, r24
    1436:	89 2b       	or	r24, r25
    1438:	09 f4       	brne	.+2      	; 0x143c <xTaskCreate+0x36>
    143a:	e0 c0       	rjmp	.+448    	; 0x15fc <xTaskCreate+0x1f6>
    143c:	88 e2       	ldi	r24, 0x28	; 40
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <pvPortMalloc>
    1444:	ec 01       	movw	r28, r24
    1446:	89 2b       	or	r24, r25
    1448:	c9 f0       	breq	.+50     	; 0x147c <xTaskCreate+0x76>
    144a:	18 8f       	std	Y+24, r17	; 0x18
    144c:	0f 8b       	std	Y+23, r16	; 0x17
    144e:	a5 01       	movw	r20, r10
    1450:	65 ea       	ldi	r22, 0xA5	; 165
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	c8 01       	movw	r24, r16
    1456:	0e 94 4c 19 	call	0x3298	; 0x3298 <memset>
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	a2 1a       	sub	r10, r18
    145e:	b1 08       	sbc	r11, r1
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	a8 0e       	add	r10, r24
    1466:	b9 1e       	adc	r11, r25
    1468:	c1 14       	cp	r12, r1
    146a:	d1 04       	cpc	r13, r1
    146c:	c9 f0       	breq	.+50     	; 0x14a0 <xTaskCreate+0x9a>
    146e:	be 01       	movw	r22, r28
    1470:	67 5e       	subi	r22, 0xE7	; 231
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	f6 01       	movw	r30, r12
    1476:	c6 01       	movw	r24, r12
    1478:	08 96       	adiw	r24, 0x08	; 8
    147a:	07 c0       	rjmp	.+14     	; 0x148a <xTaskCreate+0x84>
    147c:	c8 01       	movw	r24, r16
    147e:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vPortFree>
    1482:	bc c0       	rjmp	.+376    	; 0x15fc <xTaskCreate+0x1f6>
    1484:	e8 17       	cp	r30, r24
    1486:	f9 07       	cpc	r31, r25
    1488:	49 f0       	breq	.+18     	; 0x149c <xTaskCreate+0x96>
    148a:	9f 01       	movw	r18, r30
    148c:	41 91       	ld	r20, Z+
    148e:	db 01       	movw	r26, r22
    1490:	4d 93       	st	X+, r20
    1492:	bd 01       	movw	r22, r26
    1494:	d9 01       	movw	r26, r18
    1496:	2c 91       	ld	r18, X
    1498:	21 11       	cpse	r18, r1
    149a:	f4 cf       	rjmp	.-24     	; 0x1484 <xTaskCreate+0x7e>
    149c:	18 a2       	std	Y+32, r1	; 0x20
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <xTaskCreate+0x9c>
    14a0:	19 8e       	std	Y+25, r1	; 0x19
    14a2:	05 2d       	mov	r16, r5
    14a4:	04 30       	cpi	r16, 0x04	; 4
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <xTaskCreate+0xa4>
    14a8:	03 e0       	ldi	r16, 0x03	; 3
    14aa:	0e 8b       	std	Y+22, r16	; 0x16
    14ac:	09 a3       	std	Y+33, r16	; 0x21
    14ae:	1a a2       	std	Y+34, r1	; 0x22
    14b0:	6e 01       	movw	r12, r28
    14b2:	b2 e0       	ldi	r27, 0x02	; 2
    14b4:	cb 0e       	add	r12, r27
    14b6:	d1 1c       	adc	r13, r1
    14b8:	c6 01       	movw	r24, r12
    14ba:	0e 94 15 12 	call	0x242a	; 0x242a <vListInitialiseItem>
    14be:	ce 01       	movw	r24, r28
    14c0:	0c 96       	adiw	r24, 0x0c	; 12
    14c2:	0e 94 15 12 	call	0x242a	; 0x242a <vListInitialiseItem>
    14c6:	d9 87       	std	Y+9, r29	; 0x09
    14c8:	c8 87       	std	Y+8, r28	; 0x08
    14ca:	84 e0       	ldi	r24, 0x04	; 4
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	80 1b       	sub	r24, r16
    14d0:	91 09       	sbc	r25, r1
    14d2:	9d 87       	std	Y+13, r25	; 0x0d
    14d4:	8c 87       	std	Y+12, r24	; 0x0c
    14d6:	db 8b       	std	Y+19, r29	; 0x13
    14d8:	ca 8b       	std	Y+18, r28	; 0x12
    14da:	1b a2       	std	Y+35, r1	; 0x23
    14dc:	1c a2       	std	Y+36, r1	; 0x24
    14de:	1d a2       	std	Y+37, r1	; 0x25
    14e0:	1e a2       	std	Y+38, r1	; 0x26
    14e2:	1f a2       	std	Y+39, r1	; 0x27
    14e4:	a4 01       	movw	r20, r8
    14e6:	b3 01       	movw	r22, r6
    14e8:	c5 01       	movw	r24, r10
    14ea:	0e 94 96 12 	call	0x252c	; 0x252c <pxPortInitialiseStack>
    14ee:	99 83       	std	Y+1, r25	; 0x01
    14f0:	88 83       	st	Y, r24
    14f2:	e1 14       	cp	r14, r1
    14f4:	f1 04       	cpc	r15, r1
    14f6:	19 f0       	breq	.+6      	; 0x14fe <xTaskCreate+0xf8>
    14f8:	f7 01       	movw	r30, r14
    14fa:	d1 83       	std	Z+1, r29	; 0x01
    14fc:	c0 83       	st	Z, r28
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	0f 92       	push	r0
    1504:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <uxCurrentNumberOfTasks>
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <uxCurrentNumberOfTasks>
    150e:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1512:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1516:	89 2b       	or	r24, r25
    1518:	d1 f5       	brne	.+116    	; 0x158e <xTaskCreate+0x188>
    151a:	d0 93 d9 03 	sts	0x03D9, r29	; 0x8003d9 <pxCurrentTCB+0x1>
    151e:	c0 93 d8 03 	sts	0x03D8, r28	; 0x8003d8 <pxCurrentTCB>
    1522:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <uxCurrentNumberOfTasks>
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	09 f0       	breq	.+2      	; 0x152c <xTaskCreate+0x126>
    152a:	41 c0       	rjmp	.+130    	; 0x15ae <xTaskCreate+0x1a8>
    152c:	84 eb       	ldi	r24, 0xB4	; 180
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1534:	8d eb       	ldi	r24, 0xBD	; 189
    1536:	93 e0       	ldi	r25, 0x03	; 3
    1538:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    153c:	86 ec       	ldi	r24, 0xC6	; 198
    153e:	93 e0       	ldi	r25, 0x03	; 3
    1540:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1544:	8f ec       	ldi	r24, 0xCF	; 207
    1546:	93 e0       	ldi	r25, 0x03	; 3
    1548:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    154c:	8b ea       	ldi	r24, 0xAB	; 171
    154e:	93 e0       	ldi	r25, 0x03	; 3
    1550:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1554:	82 ea       	ldi	r24, 0xA2	; 162
    1556:	93 e0       	ldi	r25, 0x03	; 3
    1558:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    155c:	85 e9       	ldi	r24, 0x95	; 149
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1564:	8c e8       	ldi	r24, 0x8C	; 140
    1566:	93 e0       	ldi	r25, 0x03	; 3
    1568:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    156c:	82 e8       	ldi	r24, 0x82	; 130
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1574:	8b ea       	ldi	r24, 0xAB	; 171
    1576:	93 e0       	ldi	r25, 0x03	; 3
    1578:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <pxDelayedTaskList+0x1>
    157c:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <pxDelayedTaskList>
    1580:	82 ea       	ldi	r24, 0xA2	; 162
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <pxOverflowDelayedTaskList+0x1>
    1588:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <pxOverflowDelayedTaskList>
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <xTaskCreate+0x1a8>
    158e:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <xSchedulerRunning>
    1592:	81 11       	cpse	r24, r1
    1594:	0c c0       	rjmp	.+24     	; 0x15ae <xTaskCreate+0x1a8>
    1596:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    159a:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    159e:	96 89       	ldd	r25, Z+22	; 0x16
    15a0:	8e 89       	ldd	r24, Y+22	; 0x16
    15a2:	89 17       	cp	r24, r25
    15a4:	20 f0       	brcs	.+8      	; 0x15ae <xTaskCreate+0x1a8>
    15a6:	d0 93 d9 03 	sts	0x03D9, r29	; 0x8003d9 <pxCurrentTCB+0x1>
    15aa:	c0 93 d8 03 	sts	0x03D8, r28	; 0x8003d8 <pxCurrentTCB>
    15ae:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <uxTaskNumber>
    15b2:	8f 5f       	subi	r24, 0xFF	; 255
    15b4:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <uxTaskNumber>
    15b8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ba:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    15be:	98 17       	cp	r25, r24
    15c0:	10 f4       	brcc	.+4      	; 0x15c6 <xTaskCreate+0x1c0>
    15c2:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    15c6:	f9 e0       	ldi	r31, 0x09	; 9
    15c8:	8f 9f       	mul	r24, r31
    15ca:	c0 01       	movw	r24, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	b6 01       	movw	r22, r12
    15d0:	8c 54       	subi	r24, 0x4C	; 76
    15d2:	9c 4f       	sbci	r25, 0xFC	; 252
    15d4:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    15d8:	0f 90       	pop	r0
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <xSchedulerRunning>
    15e0:	88 23       	and	r24, r24
    15e2:	51 f0       	breq	.+20     	; 0x15f8 <xTaskCreate+0x1f2>
    15e4:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    15e8:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    15ec:	96 89       	ldd	r25, Z+22	; 0x16
    15ee:	8e 89       	ldd	r24, Y+22	; 0x16
    15f0:	98 17       	cp	r25, r24
    15f2:	10 f4       	brcc	.+4      	; 0x15f8 <xTaskCreate+0x1f2>
    15f4:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <xTaskCreate+0x1f8>
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	8f 90       	pop	r8
    1616:	7f 90       	pop	r7
    1618:	6f 90       	pop	r6
    161a:	5f 90       	pop	r5
    161c:	08 95       	ret

0000161e <vTaskResume>:
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    162a:	30 91 d9 03 	lds	r19, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    162e:	82 17       	cp	r24, r18
    1630:	93 07       	cpc	r25, r19
    1632:	09 f4       	brne	.+2      	; 0x1636 <vTaskResume+0x18>
    1634:	38 c0       	rjmp	.+112    	; 0x16a6 <vTaskResume+0x88>
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	09 f4       	brne	.+2      	; 0x163c <vTaskResume+0x1e>
    163a:	35 c0       	rjmp	.+106    	; 0x16a6 <vTaskResume+0x88>
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	0f 92       	push	r0
    1642:	fc 01       	movw	r30, r24
    1644:	22 85       	ldd	r18, Z+10	; 0x0a
    1646:	33 85       	ldd	r19, Z+11	; 0x0b
    1648:	22 58       	subi	r18, 0x82	; 130
    164a:	33 40       	sbci	r19, 0x03	; 3
    164c:	51 f5       	brne	.+84     	; 0x16a2 <vTaskResume+0x84>
    164e:	fc 01       	movw	r30, r24
    1650:	24 89       	ldd	r18, Z+20	; 0x14
    1652:	35 89       	ldd	r19, Z+21	; 0x15
    1654:	f3 e0       	ldi	r31, 0x03	; 3
    1656:	25 39       	cpi	r18, 0x95	; 149
    1658:	3f 07       	cpc	r19, r31
    165a:	19 f1       	breq	.+70     	; 0x16a2 <vTaskResume+0x84>
    165c:	23 2b       	or	r18, r19
    165e:	09 f5       	brne	.+66     	; 0x16a2 <vTaskResume+0x84>
    1660:	ec 01       	movw	r28, r24
    1662:	8c 01       	movw	r16, r24
    1664:	0e 5f       	subi	r16, 0xFE	; 254
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	c8 01       	movw	r24, r16
    166a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    166e:	8e 89       	ldd	r24, Y+22	; 0x16
    1670:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    1674:	98 17       	cp	r25, r24
    1676:	10 f4       	brcc	.+4      	; 0x167c <vTaskResume+0x5e>
    1678:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    167c:	29 e0       	ldi	r18, 0x09	; 9
    167e:	82 9f       	mul	r24, r18
    1680:	c0 01       	movw	r24, r0
    1682:	11 24       	eor	r1, r1
    1684:	b8 01       	movw	r22, r16
    1686:	8c 54       	subi	r24, 0x4C	; 76
    1688:	9c 4f       	sbci	r25, 0xFC	; 252
    168a:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    168e:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1692:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1696:	9e 89       	ldd	r25, Y+22	; 0x16
    1698:	86 89       	ldd	r24, Z+22	; 0x16
    169a:	98 17       	cp	r25, r24
    169c:	10 f0       	brcs	.+4      	; 0x16a2 <vTaskResume+0x84>
    169e:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <vTaskStartScheduler>:
    16b0:	ef 92       	push	r14
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	85 e7       	ldi	r24, 0x75	; 117
    16b8:	e8 2e       	mov	r14, r24
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	f8 2e       	mov	r15, r24
    16be:	00 e0       	ldi	r16, 0x00	; 0
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 ec       	ldi	r20, 0xC0	; 192
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	6d e8       	ldi	r22, 0x8D	; 141
    16ca:	71 e0       	ldi	r23, 0x01	; 1
    16cc:	85 ed       	ldi	r24, 0xD5	; 213
    16ce:	99 e0       	ldi	r25, 0x09	; 9
    16d0:	0e 94 03 0a 	call	0x1406	; 0x1406 <xTaskCreate>
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	b1 f4       	brne	.+44     	; 0x1704 <vTaskStartScheduler+0x54>
    16d8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTimerCreateTimerTask>
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 f4       	brne	.+36     	; 0x1704 <vTaskStartScheduler+0x54>
    16e0:	f8 94       	cli
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	3f ef       	ldi	r19, 0xFF	; 255
    16e6:	30 93 78 03 	sts	0x0378, r19	; 0x800378 <xNextTaskUnblockTime+0x1>
    16ea:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <xNextTaskUnblockTime>
    16ee:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <xSchedulerRunning>
    16f2:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <xTickCount+0x1>
    16f6:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <xTickCount>
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	0c 94 02 13 	jmp	0x2604	; 0x2604 <xPortStartScheduler>
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret

0000170c <vTaskSuspendAll>:
    170c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <uxSchedulerSuspended>
    1716:	08 95       	ret

00001718 <xTaskGetTickCount>:
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	0f 92       	push	r0
    171e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <xTickCount>
    1722:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <xTickCount+0x1>
    1726:	0f 90       	pop	r0
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	08 95       	ret

0000172c <xTaskIncrementTick>:
    172c:	cf 92       	push	r12
    172e:	df 92       	push	r13
    1730:	ef 92       	push	r14
    1732:	ff 92       	push	r15
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    1740:	81 11       	cpse	r24, r1
    1742:	8c c0       	rjmp	.+280    	; 0x185c <xTaskIncrementTick+0x130>
    1744:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <xTickCount>
    1748:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <xTickCount+0x1>
    174c:	0f 5f       	subi	r16, 0xFF	; 255
    174e:	1f 4f       	sbci	r17, 0xFF	; 255
    1750:	10 93 80 03 	sts	0x0380, r17	; 0x800380 <xTickCount+0x1>
    1754:	00 93 7f 03 	sts	0x037F, r16	; 0x80037f <xTickCount>
    1758:	01 15       	cp	r16, r1
    175a:	11 05       	cpc	r17, r1
    175c:	b9 f4       	brne	.+46     	; 0x178c <xTaskIncrementTick+0x60>
    175e:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    1762:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    1766:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <pxOverflowDelayedTaskList>
    176a:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <pxOverflowDelayedTaskList+0x1>
    176e:	30 93 a1 03 	sts	0x03A1, r19	; 0x8003a1 <pxDelayedTaskList+0x1>
    1772:	20 93 a0 03 	sts	0x03A0, r18	; 0x8003a0 <pxDelayedTaskList>
    1776:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <pxOverflowDelayedTaskList+0x1>
    177a:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <pxOverflowDelayedTaskList>
    177e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <xNumOfOverflows>
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <xNumOfOverflows>
    1788:	0e 94 5e 09 	call	0x12bc	; 0x12bc <prvResetNextTaskUnblockTime>
    178c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <xNextTaskUnblockTime>
    1790:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <xNextTaskUnblockTime+0x1>
    1794:	c0 e0       	ldi	r28, 0x00	; 0
    1796:	08 17       	cp	r16, r24
    1798:	19 07       	cpc	r17, r25
    179a:	08 f4       	brcc	.+2      	; 0x179e <xTaskIncrementTick+0x72>
    179c:	4f c0       	rjmp	.+158    	; 0x183c <xTaskIncrementTick+0x110>
    179e:	d9 e0       	ldi	r29, 0x09	; 9
    17a0:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    17a4:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    17a8:	80 81       	ld	r24, Z
    17aa:	81 11       	cpse	r24, r1
    17ac:	03 c0       	rjmp	.+6      	; 0x17b4 <xTaskIncrementTick+0x88>
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	11 c0       	rjmp	.+34     	; 0x17d6 <xTaskIncrementTick+0xaa>
    17b4:	e0 91 a0 03 	lds	r30, 0x03A0	; 0x8003a0 <pxDelayedTaskList>
    17b8:	f0 91 a1 03 	lds	r31, 0x03A1	; 0x8003a1 <pxDelayedTaskList+0x1>
    17bc:	05 80       	ldd	r0, Z+5	; 0x05
    17be:	f6 81       	ldd	r31, Z+6	; 0x06
    17c0:	e0 2d       	mov	r30, r0
    17c2:	e6 80       	ldd	r14, Z+6	; 0x06
    17c4:	f7 80       	ldd	r15, Z+7	; 0x07
    17c6:	d7 01       	movw	r26, r14
    17c8:	12 96       	adiw	r26, 0x02	; 2
    17ca:	8d 91       	ld	r24, X+
    17cc:	9c 91       	ld	r25, X
    17ce:	13 97       	sbiw	r26, 0x03	; 3
    17d0:	08 17       	cp	r16, r24
    17d2:	19 07       	cpc	r17, r25
    17d4:	28 f4       	brcc	.+10     	; 0x17e0 <xTaskIncrementTick+0xb4>
    17d6:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <xNextTaskUnblockTime+0x1>
    17da:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <xNextTaskUnblockTime>
    17de:	2e c0       	rjmp	.+92     	; 0x183c <xTaskIncrementTick+0x110>
    17e0:	67 01       	movw	r12, r14
    17e2:	b2 e0       	ldi	r27, 0x02	; 2
    17e4:	cb 0e       	add	r12, r27
    17e6:	d1 1c       	adc	r13, r1
    17e8:	c6 01       	movw	r24, r12
    17ea:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    17ee:	f7 01       	movw	r30, r14
    17f0:	84 89       	ldd	r24, Z+20	; 0x14
    17f2:	95 89       	ldd	r25, Z+21	; 0x15
    17f4:	89 2b       	or	r24, r25
    17f6:	21 f0       	breq	.+8      	; 0x1800 <xTaskIncrementTick+0xd4>
    17f8:	c7 01       	movw	r24, r14
    17fa:	0c 96       	adiw	r24, 0x0c	; 12
    17fc:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1800:	d7 01       	movw	r26, r14
    1802:	56 96       	adiw	r26, 0x16	; 22
    1804:	8c 91       	ld	r24, X
    1806:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    180a:	98 17       	cp	r25, r24
    180c:	10 f4       	brcc	.+4      	; 0x1812 <xTaskIncrementTick+0xe6>
    180e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    1812:	d8 9f       	mul	r29, r24
    1814:	c0 01       	movw	r24, r0
    1816:	11 24       	eor	r1, r1
    1818:	b6 01       	movw	r22, r12
    181a:	8c 54       	subi	r24, 0x4C	; 76
    181c:	9c 4f       	sbci	r25, 0xFC	; 252
    181e:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    1822:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1826:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    182a:	d7 01       	movw	r26, r14
    182c:	56 96       	adiw	r26, 0x16	; 22
    182e:	9c 91       	ld	r25, X
    1830:	86 89       	ldd	r24, Z+22	; 0x16
    1832:	98 17       	cp	r25, r24
    1834:	08 f4       	brcc	.+2      	; 0x1838 <xTaskIncrementTick+0x10c>
    1836:	b4 cf       	rjmp	.-152    	; 0x17a0 <xTaskIncrementTick+0x74>
    1838:	c1 e0       	ldi	r28, 0x01	; 1
    183a:	b2 cf       	rjmp	.-156    	; 0x17a0 <xTaskIncrementTick+0x74>
    183c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1840:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1844:	e6 89       	ldd	r30, Z+22	; 0x16
    1846:	b9 e0       	ldi	r27, 0x09	; 9
    1848:	eb 9f       	mul	r30, r27
    184a:	f0 01       	movw	r30, r0
    184c:	11 24       	eor	r1, r1
    184e:	ec 54       	subi	r30, 0x4C	; 76
    1850:	fc 4f       	sbci	r31, 0xFC	; 252
    1852:	80 81       	ld	r24, Z
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	40 f0       	brcs	.+16     	; 0x1868 <xTaskIncrementTick+0x13c>
    1858:	c1 e0       	ldi	r28, 0x01	; 1
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <xTaskIncrementTick+0x13c>
    185c:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <uxPendedTicks>
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <uxPendedTicks>
    1866:	c0 e0       	ldi	r28, 0x00	; 0
    1868:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <xYieldPending>
    186c:	81 11       	cpse	r24, r1
    186e:	c1 e0       	ldi	r28, 0x01	; 1
    1870:	8c 2f       	mov	r24, r28
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	08 95       	ret

00001884 <xTaskResumeAll>:
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	0f 92       	push	r0
    1896:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    189a:	81 50       	subi	r24, 0x01	; 1
    189c:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <uxSchedulerSuspended>
    18a0:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    18a4:	88 23       	and	r24, r24
    18a6:	11 f0       	breq	.+4      	; 0x18ac <xTaskResumeAll+0x28>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	52 c0       	rjmp	.+164    	; 0x1950 <xTaskResumeAll+0xcc>
    18ac:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <uxCurrentNumberOfTasks>
    18b0:	88 23       	and	r24, r24
    18b2:	d1 f3       	breq	.-12     	; 0x18a8 <xTaskResumeAll+0x24>
    18b4:	c0 e0       	ldi	r28, 0x00	; 0
    18b6:	d0 e0       	ldi	r29, 0x00	; 0
    18b8:	89 e0       	ldi	r24, 0x09	; 9
    18ba:	f8 2e       	mov	r15, r24
    18bc:	ee 24       	eor	r14, r14
    18be:	e3 94       	inc	r14
    18c0:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <xPendingReadyList>
    18c4:	88 23       	and	r24, r24
    18c6:	51 f1       	breq	.+84     	; 0x191c <xTaskResumeAll+0x98>
    18c8:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <xPendingReadyList+0x5>
    18cc:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <xPendingReadyList+0x6>
    18d0:	c6 81       	ldd	r28, Z+6	; 0x06
    18d2:	d7 81       	ldd	r29, Z+7	; 0x07
    18d4:	ce 01       	movw	r24, r28
    18d6:	0c 96       	adiw	r24, 0x0c	; 12
    18d8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    18dc:	8e 01       	movw	r16, r28
    18de:	0e 5f       	subi	r16, 0xFE	; 254
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	c8 01       	movw	r24, r16
    18e4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    18e8:	8e 89       	ldd	r24, Y+22	; 0x16
    18ea:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    18ee:	98 17       	cp	r25, r24
    18f0:	10 f4       	brcc	.+4      	; 0x18f6 <xTaskResumeAll+0x72>
    18f2:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    18f6:	f8 9e       	mul	r15, r24
    18f8:	c0 01       	movw	r24, r0
    18fa:	11 24       	eor	r1, r1
    18fc:	b8 01       	movw	r22, r16
    18fe:	8c 54       	subi	r24, 0x4C	; 76
    1900:	9c 4f       	sbci	r25, 0xFC	; 252
    1902:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    1906:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    190a:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    190e:	9e 89       	ldd	r25, Y+22	; 0x16
    1910:	86 89       	ldd	r24, Z+22	; 0x16
    1912:	98 17       	cp	r25, r24
    1914:	a8 f2       	brcs	.-86     	; 0x18c0 <xTaskResumeAll+0x3c>
    1916:	e0 92 7b 03 	sts	0x037B, r14	; 0x80037b <xYieldPending>
    191a:	d2 cf       	rjmp	.-92     	; 0x18c0 <xTaskResumeAll+0x3c>
    191c:	cd 2b       	or	r28, r29
    191e:	11 f0       	breq	.+4      	; 0x1924 <xTaskResumeAll+0xa0>
    1920:	0e 94 5e 09 	call	0x12bc	; 0x12bc <prvResetNextTaskUnblockTime>
    1924:	c0 91 7c 03 	lds	r28, 0x037C	; 0x80037c <uxPendedTicks>
    1928:	cc 23       	and	r28, r28
    192a:	51 f0       	breq	.+20     	; 0x1940 <xTaskResumeAll+0xbc>
    192c:	d1 e0       	ldi	r29, 0x01	; 1
    192e:	0e 94 96 0b 	call	0x172c	; 0x172c <xTaskIncrementTick>
    1932:	81 11       	cpse	r24, r1
    1934:	d0 93 7b 03 	sts	0x037B, r29	; 0x80037b <xYieldPending>
    1938:	c1 50       	subi	r28, 0x01	; 1
    193a:	c9 f7       	brne	.-14     	; 0x192e <xTaskResumeAll+0xaa>
    193c:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <uxPendedTicks>
    1940:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <xYieldPending>
    1944:	88 23       	and	r24, r24
    1946:	09 f4       	brne	.+2      	; 0x194a <xTaskResumeAll+0xc6>
    1948:	af cf       	rjmp	.-162    	; 0x18a8 <xTaskResumeAll+0x24>
    194a:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	08 95       	ret

00001962 <vTaskDelayUntil>:
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	8c 01       	movw	r16, r24
    196c:	eb 01       	movw	r28, r22
    196e:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    1972:	40 91 7f 03 	lds	r20, 0x037F	; 0x80037f <xTickCount>
    1976:	50 91 80 03 	lds	r21, 0x0380	; 0x800380 <xTickCount+0x1>
    197a:	f8 01       	movw	r30, r16
    197c:	20 81       	ld	r18, Z
    197e:	31 81       	ldd	r19, Z+1	; 0x01
    1980:	c9 01       	movw	r24, r18
    1982:	8c 0f       	add	r24, r28
    1984:	9d 1f       	adc	r25, r29
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	20 f4       	brcc	.+8      	; 0x1994 <vTaskDelayUntil+0x32>
    198c:	82 17       	cp	r24, r18
    198e:	93 07       	cpc	r25, r19
    1990:	40 f4       	brcc	.+16     	; 0x19a2 <vTaskDelayUntil+0x40>
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vTaskDelayUntil+0x38>
    1994:	82 17       	cp	r24, r18
    1996:	93 07       	cpc	r25, r19
    1998:	30 f0       	brcs	.+12     	; 0x19a6 <vTaskDelayUntil+0x44>
    199a:	21 e0       	ldi	r18, 0x01	; 1
    199c:	48 17       	cp	r20, r24
    199e:	59 07       	cpc	r21, r25
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <vTaskDelayUntil+0x46>
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <vTaskDelayUntil+0x46>
    19a6:	21 e0       	ldi	r18, 0x01	; 1
    19a8:	f8 01       	movw	r30, r16
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	22 23       	and	r18, r18
    19b0:	29 f0       	breq	.+10     	; 0x19bc <vTaskDelayUntil+0x5a>
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	84 1b       	sub	r24, r20
    19b6:	95 0b       	sbc	r25, r21
    19b8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <prvAddCurrentTaskToDelayedList>
    19bc:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    19c0:	81 11       	cpse	r24, r1
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <vTaskDelayUntil+0x66>
    19c4:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	08 95       	ret

000019d2 <vTaskSwitchContext>:
    19d2:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    19d6:	88 23       	and	r24, r24
    19d8:	21 f0       	breq	.+8      	; 0x19e2 <vTaskSwitchContext+0x10>
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <xYieldPending>
    19e0:	08 95       	ret
    19e2:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <xYieldPending>
    19e6:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    19ea:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    19ee:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    19f2:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    19f6:	2d 91       	ld	r18, X+
    19f8:	3c 91       	ld	r19, X
    19fa:	87 89       	ldd	r24, Z+23	; 0x17
    19fc:	90 8d       	ldd	r25, Z+24	; 0x18
    19fe:	82 17       	cp	r24, r18
    1a00:	93 07       	cpc	r25, r19
    1a02:	60 f0       	brcs	.+24     	; 0x1a1c <vTaskSwitchContext+0x4a>
    1a04:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1a08:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1a0c:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1a10:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1a14:	67 5e       	subi	r22, 0xE7	; 231
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <vApplicationStackOverflowHook>
    1a1c:	80 91 7e 03 	lds	r24, 0x037E	; 0x80037e <uxTopReadyPriority>
    1a20:	69 e0       	ldi	r22, 0x09	; 9
    1a22:	48 2f       	mov	r20, r24
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	64 9f       	mul	r22, r20
    1a28:	90 01       	movw	r18, r0
    1a2a:	65 9f       	mul	r22, r21
    1a2c:	30 0d       	add	r19, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	f9 01       	movw	r30, r18
    1a32:	ec 54       	subi	r30, 0x4C	; 76
    1a34:	fc 4f       	sbci	r31, 0xFC	; 252
    1a36:	90 81       	ld	r25, Z
    1a38:	91 11       	cpse	r25, r1
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <vTaskSwitchContext+0x6e>
    1a3c:	81 50       	subi	r24, 0x01	; 1
    1a3e:	f1 cf       	rjmp	.-30     	; 0x1a22 <vTaskSwitchContext+0x50>
    1a40:	a1 81       	ldd	r26, Z+1	; 0x01
    1a42:	b2 81       	ldd	r27, Z+2	; 0x02
    1a44:	12 96       	adiw	r26, 0x02	; 2
    1a46:	0d 90       	ld	r0, X+
    1a48:	bc 91       	ld	r27, X
    1a4a:	a0 2d       	mov	r26, r0
    1a4c:	b2 83       	std	Z+2, r27	; 0x02
    1a4e:	a1 83       	std	Z+1, r26	; 0x01
    1a50:	29 54       	subi	r18, 0x49	; 73
    1a52:	3c 4f       	sbci	r19, 0xFC	; 252
    1a54:	a2 17       	cp	r26, r18
    1a56:	b3 07       	cpc	r27, r19
    1a58:	31 f4       	brne	.+12     	; 0x1a66 <vTaskSwitchContext+0x94>
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	2d 91       	ld	r18, X+
    1a5e:	3c 91       	ld	r19, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	32 83       	std	Z+2, r19	; 0x02
    1a64:	21 83       	std	Z+1, r18	; 0x01
    1a66:	99 e0       	ldi	r25, 0x09	; 9
    1a68:	94 9f       	mul	r25, r20
    1a6a:	f0 01       	movw	r30, r0
    1a6c:	95 9f       	mul	r25, r21
    1a6e:	f0 0d       	add	r31, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	ec 54       	subi	r30, 0x4C	; 76
    1a74:	fc 4f       	sbci	r31, 0xFC	; 252
    1a76:	01 80       	ldd	r0, Z+1	; 0x01
    1a78:	f2 81       	ldd	r31, Z+2	; 0x02
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	26 81       	ldd	r18, Z+6	; 0x06
    1a7e:	37 81       	ldd	r19, Z+7	; 0x07
    1a80:	30 93 d9 03 	sts	0x03D9, r19	; 0x8003d9 <pxCurrentTCB+0x1>
    1a84:	20 93 d8 03 	sts	0x03D8, r18	; 0x8003d8 <pxCurrentTCB>
    1a88:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    1a8c:	08 95       	ret

00001a8e <vTaskPlaceOnEventList>:
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	eb 01       	movw	r28, r22
    1a94:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1a98:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1a9c:	64 5f       	subi	r22, 0xF4	; 244
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	0e 94 3a 12 	call	0x2474	; 0x2474 <vListInsert>
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <prvAddCurrentTaskToDelayedList>

00001ab0 <vTaskPlaceOnEventListRestricted>:
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	eb 01       	movw	r28, r22
    1ab8:	14 2f       	mov	r17, r20
    1aba:	60 91 d8 03 	lds	r22, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1abe:	70 91 d9 03 	lds	r23, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1ac2:	64 5f       	subi	r22, 0xF4	; 244
    1ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac6:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    1aca:	11 23       	and	r17, r17
    1acc:	11 f0       	breq	.+4      	; 0x1ad2 <vTaskPlaceOnEventListRestricted+0x22>
    1ace:	cf ef       	ldi	r28, 0xFF	; 255
    1ad0:	df ef       	ldi	r29, 0xFF	; 255
    1ad2:	61 2f       	mov	r22, r17
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <prvAddCurrentTaskToDelayedList>

00001ae0 <xTaskRemoveFromEventList>:
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	dc 01       	movw	r26, r24
    1aea:	15 96       	adiw	r26, 0x05	; 5
    1aec:	ed 91       	ld	r30, X+
    1aee:	fc 91       	ld	r31, X
    1af0:	16 97       	sbiw	r26, 0x06	; 6
    1af2:	c6 81       	ldd	r28, Z+6	; 0x06
    1af4:	d7 81       	ldd	r29, Z+7	; 0x07
    1af6:	8e 01       	movw	r16, r28
    1af8:	04 5f       	subi	r16, 0xF4	; 244
    1afa:	1f 4f       	sbci	r17, 0xFF	; 255
    1afc:	c8 01       	movw	r24, r16
    1afe:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1b02:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    1b06:	81 11       	cpse	r24, r1
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <xTaskRemoveFromEventList+0x52>
    1b0a:	0a 50       	subi	r16, 0x0A	; 10
    1b0c:	11 09       	sbc	r17, r1
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1b14:	8e 89       	ldd	r24, Y+22	; 0x16
    1b16:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    1b1a:	98 17       	cp	r25, r24
    1b1c:	10 f4       	brcc	.+4      	; 0x1b22 <xTaskRemoveFromEventList+0x42>
    1b1e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    1b22:	b9 e0       	ldi	r27, 0x09	; 9
    1b24:	8b 9f       	mul	r24, r27
    1b26:	c0 01       	movw	r24, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	b8 01       	movw	r22, r16
    1b2c:	8c 54       	subi	r24, 0x4C	; 76
    1b2e:	9c 4f       	sbci	r25, 0xFC	; 252
    1b30:	03 c0       	rjmp	.+6      	; 0x1b38 <xTaskRemoveFromEventList+0x58>
    1b32:	b8 01       	movw	r22, r16
    1b34:	85 e9       	ldi	r24, 0x95	; 149
    1b36:	93 e0       	ldi	r25, 0x03	; 3
    1b38:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    1b3c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    1b40:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    1b44:	9e 89       	ldd	r25, Y+22	; 0x16
    1b46:	86 89       	ldd	r24, Z+22	; 0x16
    1b48:	89 17       	cp	r24, r25
    1b4a:	20 f4       	brcc	.+8      	; 0x1b54 <xTaskRemoveFromEventList+0x74>
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <xYieldPending>
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <xTaskRemoveFromEventList+0x76>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <vTaskInternalSetTimeOutState>:
    1b60:	20 91 7a 03 	lds	r18, 0x037A	; 0x80037a <xNumOfOverflows>
    1b64:	fc 01       	movw	r30, r24
    1b66:	20 83       	st	Z, r18
    1b68:	20 91 7f 03 	lds	r18, 0x037F	; 0x80037f <xTickCount>
    1b6c:	30 91 80 03 	lds	r19, 0x0380	; 0x800380 <xTickCount+0x1>
    1b70:	32 83       	std	Z+2, r19	; 0x02
    1b72:	21 83       	std	Z+1, r18	; 0x01
    1b74:	08 95       	ret

00001b76 <xTaskCheckForTimeOut>:
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	0f 92       	push	r0
    1b80:	40 91 7f 03 	lds	r20, 0x037F	; 0x80037f <xTickCount>
    1b84:	50 91 80 03 	lds	r21, 0x0380	; 0x800380 <xTickCount+0x1>
    1b88:	db 01       	movw	r26, r22
    1b8a:	2d 91       	ld	r18, X+
    1b8c:	3c 91       	ld	r19, X
    1b8e:	2f 3f       	cpi	r18, 0xFF	; 255
    1b90:	bf ef       	ldi	r27, 0xFF	; 255
    1b92:	3b 07       	cpc	r19, r27
    1b94:	d9 f0       	breq	.+54     	; 0x1bcc <xTaskCheckForTimeOut+0x56>
    1b96:	ec 01       	movw	r28, r24
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	a0 91 7a 03 	lds	r26, 0x037A	; 0x80037a <xNumOfOverflows>
    1ba0:	b8 81       	ld	r27, Y
    1ba2:	ba 17       	cp	r27, r26
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <xTaskCheckForTimeOut+0x36>
    1ba6:	4e 17       	cp	r20, r30
    1ba8:	5f 07       	cpc	r21, r31
    1baa:	90 f4       	brcc	.+36     	; 0x1bd0 <xTaskCheckForTimeOut+0x5a>
    1bac:	4e 1b       	sub	r20, r30
    1bae:	5f 0b       	sbc	r21, r31
    1bb0:	fb 01       	movw	r30, r22
    1bb2:	42 17       	cp	r20, r18
    1bb4:	53 07       	cpc	r21, r19
    1bb6:	38 f4       	brcc	.+14     	; 0x1bc6 <xTaskCheckForTimeOut+0x50>
    1bb8:	24 1b       	sub	r18, r20
    1bba:	35 0b       	sbc	r19, r21
    1bbc:	31 83       	std	Z+1, r19	; 0x01
    1bbe:	20 83       	st	Z, r18
    1bc0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <vTaskInternalSetTimeOutState>
    1bc4:	03 c0       	rjmp	.+6      	; 0x1bcc <xTaskCheckForTimeOut+0x56>
    1bc6:	11 82       	std	Z+1, r1	; 0x01
    1bc8:	10 82       	st	Z, r1
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <xTaskCheckForTimeOut+0x5a>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <xTaskCheckForTimeOut+0x5c>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <vTaskMissedYield>:
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <xYieldPending>
    1be2:	08 95       	ret

00001be4 <xTaskGetSchedulerState>:
    1be4:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <xSchedulerRunning>
    1be8:	88 23       	and	r24, r24
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <xTaskGetSchedulerState+0x14>
    1bec:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <uxSchedulerSuspended>
    1bf0:	88 23       	and	r24, r24
    1bf2:	21 f0       	breq	.+8      	; 0x1bfc <xTaskGetSchedulerState+0x18>
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	08 95       	ret
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	08 95       	ret
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	08 95       	ret

00001c00 <xTaskPriorityDisinherit>:
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	fc 01       	movw	r30, r24
    1c0a:	89 2b       	or	r24, r25
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <xTaskPriorityDisinherit+0x12>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	2c c0       	rjmp	.+88     	; 0x1c6a <xTaskPriorityDisinherit+0x6a>
    1c12:	82 a1       	ldd	r24, Z+34	; 0x22
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	82 a3       	std	Z+34, r24	; 0x22
    1c18:	26 89       	ldd	r18, Z+22	; 0x16
    1c1a:	91 a1       	ldd	r25, Z+33	; 0x21
    1c1c:	29 17       	cp	r18, r25
    1c1e:	b9 f3       	breq	.-18     	; 0x1c0e <xTaskPriorityDisinherit+0xe>
    1c20:	81 11       	cpse	r24, r1
    1c22:	f5 cf       	rjmp	.-22     	; 0x1c0e <xTaskPriorityDisinherit+0xe>
    1c24:	ef 01       	movw	r28, r30
    1c26:	8f 01       	movw	r16, r30
    1c28:	0e 5f       	subi	r16, 0xFE	; 254
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	8e 8b       	std	Y+22, r24	; 0x16
    1c36:	48 2f       	mov	r20, r24
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	24 e0       	ldi	r18, 0x04	; 4
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	24 1b       	sub	r18, r20
    1c40:	35 0b       	sbc	r19, r21
    1c42:	3d 87       	std	Y+13, r19	; 0x0d
    1c44:	2c 87       	std	Y+12, r18	; 0x0c
    1c46:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <uxTopReadyPriority>
    1c4a:	98 17       	cp	r25, r24
    1c4c:	10 f4       	brcc	.+4      	; 0x1c52 <xTaskPriorityDisinherit+0x52>
    1c4e:	80 93 7e 03 	sts	0x037E, r24	; 0x80037e <uxTopReadyPriority>
    1c52:	29 e0       	ldi	r18, 0x09	; 9
    1c54:	24 9f       	mul	r18, r20
    1c56:	c0 01       	movw	r24, r0
    1c58:	25 9f       	mul	r18, r21
    1c5a:	90 0d       	add	r25, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	b8 01       	movw	r22, r16
    1c60:	8c 54       	subi	r24, 0x4C	; 76
    1c62:	9c 4f       	sbci	r25, 0xFC	; 252
    1c64:	0e 94 19 12 	call	0x2432	; 0x2432 <vListInsertEnd>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	1f 91       	pop	r17
    1c70:	0f 91       	pop	r16
    1c72:	08 95       	ret

00001c74 <prvCheckForValidListAndQueue>:
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	0f 92       	push	r0
    1c7a:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <xTimerQueue>
    1c7e:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1c82:	89 2b       	or	r24, r25
    1c84:	e9 f4       	brne	.+58     	; 0x1cc0 <prvCheckForValidListAndQueue+0x4c>
    1c86:	8d ee       	ldi	r24, 0xED	; 237
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1c8e:	84 ee       	ldi	r24, 0xE4	; 228
    1c90:	93 e0       	ldi	r25, 0x03	; 3
    1c92:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    1c96:	8d ee       	ldi	r24, 0xED	; 237
    1c98:	93 e0       	ldi	r25, 0x03	; 3
    1c9a:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <pxCurrentTimerList+0x1>
    1c9e:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <pxCurrentTimerList>
    1ca2:	84 ee       	ldi	r24, 0xE4	; 228
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <pxOverflowTimerList+0x1>
    1caa:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <pxOverflowTimerList>
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	65 e0       	ldi	r22, 0x05	; 5
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <xQueueGenericCreate>
    1cb8:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <xTimerQueue+0x1>
    1cbc:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <xTimerQueue>
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	08 95       	ret

00001cc6 <prvInsertTimerInActiveList>:
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	73 83       	std	Z+3, r23	; 0x03
    1cca:	62 83       	std	Z+2, r22	; 0x02
    1ccc:	91 87       	std	Z+9, r25	; 0x09
    1cce:	80 87       	std	Z+8, r24	; 0x08
    1cd0:	46 17       	cp	r20, r22
    1cd2:	57 07       	cpc	r21, r23
    1cd4:	78 f0       	brcs	.+30     	; 0x1cf4 <prvInsertTimerInActiveList+0x2e>
    1cd6:	42 1b       	sub	r20, r18
    1cd8:	53 0b       	sbc	r21, r19
    1cda:	84 85       	ldd	r24, Z+12	; 0x0c
    1cdc:	95 85       	ldd	r25, Z+13	; 0x0d
    1cde:	48 17       	cp	r20, r24
    1ce0:	59 07       	cpc	r21, r25
    1ce2:	c8 f4       	brcc	.+50     	; 0x1d16 <prvInsertTimerInActiveList+0x50>
    1ce4:	bf 01       	movw	r22, r30
    1ce6:	6e 5f       	subi	r22, 0xFE	; 254
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <pxOverflowTimerList>
    1cee:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <pxOverflowTimerList+0x1>
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <prvInsertTimerInActiveList+0x48>
    1cf4:	42 17       	cp	r20, r18
    1cf6:	53 07       	cpc	r21, r19
    1cf8:	18 f4       	brcc	.+6      	; 0x1d00 <prvInsertTimerInActiveList+0x3a>
    1cfa:	62 17       	cp	r22, r18
    1cfc:	73 07       	cpc	r23, r19
    1cfe:	58 f4       	brcc	.+22     	; 0x1d16 <prvInsertTimerInActiveList+0x50>
    1d00:	bf 01       	movw	r22, r30
    1d02:	6e 5f       	subi	r22, 0xFE	; 254
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <pxCurrentTimerList>
    1d0a:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <pxCurrentTimerList+0x1>
    1d0e:	0e 94 3a 12 	call	0x2474	; 0x2474 <vListInsert>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	08 95       	ret
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	08 95       	ret

00001d1a <xTimerCreateTimerTask>:
    1d1a:	ef 92       	push	r14
    1d1c:	ff 92       	push	r15
    1d1e:	0f 93       	push	r16
    1d20:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <prvCheckForValidListAndQueue>
    1d24:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <xTimerQueue>
    1d28:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1d2c:	89 2b       	or	r24, r25
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <xTimerCreateTimerTask+0x36>
    1d30:	8c ed       	ldi	r24, 0xDC	; 220
    1d32:	e8 2e       	mov	r14, r24
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	f8 2e       	mov	r15, r24
    1d38:	03 e0       	ldi	r16, 0x03	; 3
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	45 e5       	ldi	r20, 0x55	; 85
    1d40:	50 e0       	ldi	r21, 0x00	; 0
    1d42:	62 e9       	ldi	r22, 0x92	; 146
    1d44:	71 e0       	ldi	r23, 0x01	; 1
    1d46:	8d e3       	ldi	r24, 0x3D	; 61
    1d48:	9f e0       	ldi	r25, 0x0F	; 15
    1d4a:	0e 94 03 0a 	call	0x1406	; 0x1406 <xTaskCreate>
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <xTimerCreateTimerTask+0x38>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	08 95       	ret

00001d5a <xTimerGenericCommand>:
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <xTimerGenericCommand+0xa>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <xTimerGenericCommand+0xc>
    1d66:	1f 92       	push	r1
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	a0 91 de 03 	lds	r26, 0x03DE	; 0x8003de <xTimerQueue>
    1d70:	b0 91 df 03 	lds	r27, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1d74:	10 97       	sbiw	r26, 0x00	; 0
    1d76:	29 f1       	breq	.+74     	; 0x1dc2 <xTimerGenericCommand+0x68>
    1d78:	f9 01       	movw	r30, r18
    1d7a:	69 83       	std	Y+1, r22	; 0x01
    1d7c:	5b 83       	std	Y+3, r21	; 0x03
    1d7e:	4a 83       	std	Y+2, r20	; 0x02
    1d80:	9d 83       	std	Y+5, r25	; 0x05
    1d82:	8c 83       	std	Y+4, r24	; 0x04
    1d84:	66 30       	cpi	r22, 0x06	; 6
    1d86:	a4 f4       	brge	.+40     	; 0x1db0 <xTimerGenericCommand+0x56>
    1d88:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <xTaskGetSchedulerState>
    1d8c:	e0 91 de 03 	lds	r30, 0x03DE	; 0x8003de <xTimerQueue>
    1d90:	f0 91 df 03 	lds	r31, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <xTimerGenericCommand+0x44>
    1d9a:	a8 01       	movw	r20, r16
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <xTimerGenericCommand+0x48>
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	be 01       	movw	r22, r28
    1da4:	6f 5f       	subi	r22, 0xFF	; 255
    1da6:	7f 4f       	sbci	r23, 0xFF	; 255
    1da8:	cf 01       	movw	r24, r30
    1daa:	0e 94 10 15 	call	0x2a20	; 0x2a20 <xQueueGenericSend>
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <xTimerGenericCommand+0x6a>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	af 01       	movw	r20, r30
    1db4:	be 01       	movw	r22, r28
    1db6:	6f 5f       	subi	r22, 0xFF	; 255
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	cd 01       	movw	r24, r26
    1dbc:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <xQueueGenericSendFromISR>
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <xTimerGenericCommand+0x6a>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <prvSwitchTimerLists>:
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <pxCurrentTimerList>
    1de8:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <pxCurrentTimerList+0x1>
    1dec:	80 81       	ld	r24, Z
    1dee:	88 23       	and	r24, r24
    1df0:	89 f1       	breq	.+98     	; 0x1e54 <prvSwitchTimerLists+0x7c>
    1df2:	05 80       	ldd	r0, Z+5	; 0x05
    1df4:	f6 81       	ldd	r31, Z+6	; 0x06
    1df6:	e0 2d       	mov	r30, r0
    1df8:	e0 80       	ld	r14, Z
    1dfa:	f1 80       	ldd	r15, Z+1	; 0x01
    1dfc:	c6 81       	ldd	r28, Z+6	; 0x06
    1dfe:	d7 81       	ldd	r29, Z+7	; 0x07
    1e00:	8e 01       	movw	r16, r28
    1e02:	0e 5f       	subi	r16, 0xFE	; 254
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1e0c:	e8 89       	ldd	r30, Y+16	; 0x10
    1e0e:	f9 89       	ldd	r31, Y+17	; 0x11
    1e10:	ce 01       	movw	r24, r28
    1e12:	09 95       	icall
    1e14:	8a 89       	ldd	r24, Y+18	; 0x12
    1e16:	82 ff       	sbrs	r24, 2
    1e18:	e5 cf       	rjmp	.-54     	; 0x1de4 <prvSwitchTimerLists+0xc>
    1e1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e1c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e1e:	8e 0d       	add	r24, r14
    1e20:	9f 1d       	adc	r25, r15
    1e22:	e8 16       	cp	r14, r24
    1e24:	f9 06       	cpc	r15, r25
    1e26:	60 f4       	brcc	.+24     	; 0x1e40 <prvSwitchTimerLists+0x68>
    1e28:	9b 83       	std	Y+3, r25	; 0x03
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	d9 87       	std	Y+9, r29	; 0x09
    1e2e:	c8 87       	std	Y+8, r28	; 0x08
    1e30:	b8 01       	movw	r22, r16
    1e32:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <pxCurrentTimerList>
    1e36:	90 91 e3 03 	lds	r25, 0x03E3	; 0x8003e3 <pxCurrentTimerList+0x1>
    1e3a:	0e 94 3a 12 	call	0x2474	; 0x2474 <vListInsert>
    1e3e:	d2 cf       	rjmp	.-92     	; 0x1de4 <prvSwitchTimerLists+0xc>
    1e40:	00 e0       	ldi	r16, 0x00	; 0
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	a7 01       	movw	r20, r14
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xTimerGenericCommand>
    1e52:	c8 cf       	rjmp	.-112    	; 0x1de4 <prvSwitchTimerLists+0xc>
    1e54:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <pxOverflowTimerList>
    1e58:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <pxOverflowTimerList+0x1>
    1e5c:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <pxCurrentTimerList+0x1>
    1e60:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <pxCurrentTimerList>
    1e64:	f0 93 e1 03 	sts	0x03E1, r31	; 0x8003e1 <pxOverflowTimerList+0x1>
    1e68:	e0 93 e0 03 	sts	0x03E0, r30	; 0x8003e0 <pxOverflowTimerList>
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	08 95       	ret

00001e7a <prvTimerTask>:
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <prvTimerTask+0x6>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <prvTimerTask+0x8>
    1e82:	1f 92       	push	r1
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <pxCurrentTimerList>
    1e8c:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <pxCurrentTimerList+0x1>
    1e90:	d0 80       	ld	r13, Z
    1e92:	dd 20       	and	r13, r13
    1e94:	31 f0       	breq	.+12     	; 0x1ea2 <prvTimerTask+0x28>
    1e96:	05 80       	ldd	r0, Z+5	; 0x05
    1e98:	f6 81       	ldd	r31, Z+6	; 0x06
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	e0 80       	ld	r14, Z
    1e9e:	f1 80       	ldd	r15, Z+1	; 0x01
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <prvTimerTask+0x2c>
    1ea2:	e1 2c       	mov	r14, r1
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    1eaa:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskGetTickCount>
    1eae:	8c 01       	movw	r16, r24
    1eb0:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <xLastTime.2412>
    1eb4:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <xLastTime.2412+0x1>
    1eb8:	08 17       	cp	r16, r24
    1eba:	19 07       	cpc	r17, r25
    1ebc:	20 f4       	brcc	.+8      	; 0x1ec6 <prvTimerTask+0x4c>
    1ebe:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <prvSwitchTimerLists>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <prvTimerTask+0x4e>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	10 93 db 03 	sts	0x03DB, r17	; 0x8003db <xLastTime.2412+0x1>
    1ecc:	00 93 da 03 	sts	0x03DA, r16	; 0x8003da <xLastTime.2412>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	55 c0       	rjmp	.+170    	; 0x1f7e <prvTimerTask+0x104>
    1ed4:	dd 20       	and	r13, r13
    1ed6:	d9 f1       	breq	.+118    	; 0x1f4e <prvTimerTask+0xd4>
    1ed8:	0e 15       	cp	r16, r14
    1eda:	1f 05       	cpc	r17, r15
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <prvTimerTask+0x66>
    1ede:	3e c0       	rjmp	.+124    	; 0x1f5c <prvTimerTask+0xe2>
    1ee0:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    1ee4:	e0 91 e2 03 	lds	r30, 0x03E2	; 0x8003e2 <pxCurrentTimerList>
    1ee8:	f0 91 e3 03 	lds	r31, 0x03E3	; 0x8003e3 <pxCurrentTimerList+0x1>
    1eec:	05 80       	ldd	r0, Z+5	; 0x05
    1eee:	f6 81       	ldd	r31, Z+6	; 0x06
    1ef0:	e0 2d       	mov	r30, r0
    1ef2:	c6 80       	ldd	r12, Z+6	; 0x06
    1ef4:	d7 80       	ldd	r13, Z+7	; 0x07
    1ef6:	c6 01       	movw	r24, r12
    1ef8:	02 96       	adiw	r24, 0x02	; 2
    1efa:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1efe:	d6 01       	movw	r26, r12
    1f00:	52 96       	adiw	r26, 0x12	; 18
    1f02:	8c 91       	ld	r24, X
    1f04:	52 97       	sbiw	r26, 0x12	; 18
    1f06:	82 ff       	sbrs	r24, 2
    1f08:	17 c0       	rjmp	.+46     	; 0x1f38 <prvTimerTask+0xbe>
    1f0a:	1c 96       	adiw	r26, 0x0c	; 12
    1f0c:	6d 91       	ld	r22, X+
    1f0e:	7c 91       	ld	r23, X
    1f10:	1d 97       	sbiw	r26, 0x0d	; 13
    1f12:	6e 0d       	add	r22, r14
    1f14:	7f 1d       	adc	r23, r15
    1f16:	97 01       	movw	r18, r14
    1f18:	a8 01       	movw	r20, r16
    1f1a:	c6 01       	movw	r24, r12
    1f1c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <prvInsertTimerInActiveList>
    1f20:	88 23       	and	r24, r24
    1f22:	69 f0       	breq	.+26     	; 0x1f3e <prvTimerTask+0xc4>
    1f24:	00 e0       	ldi	r16, 0x00	; 0
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	a7 01       	movw	r20, r14
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xTimerGenericCommand>
    1f36:	03 c0       	rjmp	.+6      	; 0x1f3e <prvTimerTask+0xc4>
    1f38:	8e 7f       	andi	r24, 0xFE	; 254
    1f3a:	f6 01       	movw	r30, r12
    1f3c:	82 8b       	std	Z+18, r24	; 0x12
    1f3e:	d6 01       	movw	r26, r12
    1f40:	50 96       	adiw	r26, 0x10	; 16
    1f42:	ed 91       	ld	r30, X+
    1f44:	fc 91       	ld	r31, X
    1f46:	51 97       	sbiw	r26, 0x11	; 17
    1f48:	c6 01       	movw	r24, r12
    1f4a:	09 95       	icall
    1f4c:	1e c0       	rjmp	.+60     	; 0x1f8a <prvTimerTask+0x110>
    1f4e:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <pxOverflowTimerList>
    1f52:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <pxOverflowTimerList+0x1>
    1f56:	80 81       	ld	r24, Z
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	b7 01       	movw	r22, r14
    1f60:	60 1b       	sub	r22, r16
    1f62:	71 0b       	sbc	r23, r17
    1f64:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <xTimerQueue>
    1f68:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1f6c:	0e 94 67 16 	call	0x2cce	; 0x2cce <vQueueWaitForMessageRestricted>
    1f70:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    1f74:	81 11       	cpse	r24, r1
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <prvTimerTask+0x110>
    1f78:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    1f7c:	06 c0       	rjmp	.+12     	; 0x1f8a <prvTimerTask+0x110>
    1f7e:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <prvTimerTask+0x110>
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	87 ff       	sbrs	r24, 7
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <prvTimerTask+0x12c>
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	be 01       	movw	r22, r28
    1f90:	6f 5f       	subi	r22, 0xFF	; 255
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <xTimerQueue>
    1f98:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <xTimerQueue+0x1>
    1f9c:	0e 94 d5 15 	call	0x2baa	; 0x2baa <xQueueReceive>
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	f0 cf       	rjmp	.-32     	; 0x1f84 <prvTimerTask+0x10a>
    1fa4:	71 cf       	rjmp	.-286    	; 0x1e88 <prvTimerTask+0xe>
    1fa6:	ec 80       	ldd	r14, Y+4	; 0x04
    1fa8:	fd 80       	ldd	r15, Y+5	; 0x05
    1faa:	f7 01       	movw	r30, r14
    1fac:	82 85       	ldd	r24, Z+10	; 0x0a
    1fae:	93 85       	ldd	r25, Z+11	; 0x0b
    1fb0:	89 2b       	or	r24, r25
    1fb2:	21 f0       	breq	.+8      	; 0x1fbc <prvTimerTask+0x142>
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	02 96       	adiw	r24, 0x02	; 2
    1fb8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <uxListRemove>
    1fbc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xTaskGetTickCount>
    1fc0:	6c 01       	movw	r12, r24
    1fc2:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <xLastTime.2412>
    1fc6:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <xLastTime.2412+0x1>
    1fca:	c8 16       	cp	r12, r24
    1fcc:	d9 06       	cpc	r13, r25
    1fce:	10 f4       	brcc	.+4      	; 0x1fd4 <prvTimerTask+0x15a>
    1fd0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <prvSwitchTimerLists>
    1fd4:	d0 92 db 03 	sts	0x03DB, r13	; 0x8003db <xLastTime.2412+0x1>
    1fd8:	c0 92 da 03 	sts	0x03DA, r12	; 0x8003da <xLastTime.2412>
    1fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1fde:	0e 2e       	mov	r0, r30
    1fe0:	00 0c       	add	r0, r0
    1fe2:	ff 0b       	sbc	r31, r31
    1fe4:	ea 30       	cpi	r30, 0x0A	; 10
    1fe6:	f1 05       	cpc	r31, r1
    1fe8:	80 f6       	brcc	.-96     	; 0x1f8a <prvTimerTask+0x110>
    1fea:	ec 5c       	subi	r30, 0xCC	; 204
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	d7 01       	movw	r26, r14
    1ff0:	52 96       	adiw	r26, 0x12	; 18
    1ff2:	8c 91       	ld	r24, X
    1ff4:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__tablejump2__>
    1ff8:	81 60       	ori	r24, 0x01	; 1
    1ffa:	f7 01       	movw	r30, r14
    1ffc:	82 8b       	std	Z+18, r24	; 0x12
    1ffe:	2a 81       	ldd	r18, Y+2	; 0x02
    2000:	3b 81       	ldd	r19, Y+3	; 0x03
    2002:	64 85       	ldd	r22, Z+12	; 0x0c
    2004:	75 85       	ldd	r23, Z+13	; 0x0d
    2006:	62 0f       	add	r22, r18
    2008:	73 1f       	adc	r23, r19
    200a:	a6 01       	movw	r20, r12
    200c:	c7 01       	movw	r24, r14
    200e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <prvInsertTimerInActiveList>
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <prvTimerTask+0x19e>
    2016:	b9 cf       	rjmp	.-142    	; 0x1f8a <prvTimerTask+0x110>
    2018:	d7 01       	movw	r26, r14
    201a:	50 96       	adiw	r26, 0x10	; 16
    201c:	ed 91       	ld	r30, X+
    201e:	fc 91       	ld	r31, X
    2020:	51 97       	sbiw	r26, 0x11	; 17
    2022:	c7 01       	movw	r24, r14
    2024:	09 95       	icall
    2026:	f7 01       	movw	r30, r14
    2028:	82 89       	ldd	r24, Z+18	; 0x12
    202a:	82 ff       	sbrs	r24, 2
    202c:	ae cf       	rjmp	.-164    	; 0x1f8a <prvTimerTask+0x110>
    202e:	4a 81       	ldd	r20, Y+2	; 0x02
    2030:	5b 81       	ldd	r21, Y+3	; 0x03
    2032:	84 85       	ldd	r24, Z+12	; 0x0c
    2034:	95 85       	ldd	r25, Z+13	; 0x0d
    2036:	48 0f       	add	r20, r24
    2038:	59 1f       	adc	r21, r25
    203a:	00 e0       	ldi	r16, 0x00	; 0
    203c:	10 e0       	ldi	r17, 0x00	; 0
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	c7 01       	movw	r24, r14
    2046:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <xTimerGenericCommand>
    204a:	9f cf       	rjmp	.-194    	; 0x1f8a <prvTimerTask+0x110>
    204c:	81 60       	ori	r24, 0x01	; 1
    204e:	f7 01       	movw	r30, r14
    2050:	82 8b       	std	Z+18, r24	; 0x12
    2052:	6a 81       	ldd	r22, Y+2	; 0x02
    2054:	7b 81       	ldd	r23, Y+3	; 0x03
    2056:	75 87       	std	Z+13, r23	; 0x0d
    2058:	64 87       	std	Z+12, r22	; 0x0c
    205a:	6c 0d       	add	r22, r12
    205c:	7d 1d       	adc	r23, r13
    205e:	96 01       	movw	r18, r12
    2060:	a6 01       	movw	r20, r12
    2062:	c7 01       	movw	r24, r14
    2064:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <prvInsertTimerInActiveList>
    2068:	90 cf       	rjmp	.-224    	; 0x1f8a <prvTimerTask+0x110>
    206a:	81 fd       	sbrc	r24, 1
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <prvTimerTask+0x1fc>
    206e:	c7 01       	movw	r24, r14
    2070:	0e 94 f6 11 	call	0x23ec	; 0x23ec <vPortFree>
    2074:	8a cf       	rjmp	.-236    	; 0x1f8a <prvTimerTask+0x110>
    2076:	8e 7f       	andi	r24, 0xFE	; 254
    2078:	d7 01       	movw	r26, r14
    207a:	52 96       	adiw	r26, 0x12	; 18
    207c:	8c 93       	st	X, r24
    207e:	85 cf       	rjmp	.-246    	; 0x1f8a <prvTimerTask+0x110>

00002080 <initVariant>:
    2080:	0e 94 09 04 	call	0x812	; 0x812 <setup>
    2084:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <vTaskStartScheduler>
    2088:	08 95       	ret

0000208a <vApplicationIdleHook>:
    208a:	0e 94 38 04 	call	0x870	; 0x870 <loop>
    208e:	8d eb       	ldi	r24, 0xBD	; 189
    2090:	94 e0       	ldi	r25, 0x04	; 4
    2092:	89 2b       	or	r24, r25
    2094:	11 f0       	breq	.+4      	; 0x209a <vApplicationIdleHook+0x10>
    2096:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_Z14serialEventRunv>
    209a:	08 95       	ret

0000209c <vApplicationMallocFailedHook>:
    209c:	25 9a       	sbi	0x04, 5	; 4
    209e:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	80 e7       	ldi	r24, 0x70	; 112
    20a4:	92 e0       	ldi	r25, 0x02	; 2
    20a6:	21 50       	subi	r18, 0x01	; 1
    20a8:	80 40       	sbci	r24, 0x00	; 0
    20aa:	90 40       	sbci	r25, 0x00	; 0
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <vApplicationMallocFailedHook+0xa>
    20ae:	00 c0       	rjmp	.+0      	; 0x20b0 <vApplicationMallocFailedHook+0x14>
    20b0:	00 00       	nop
    20b2:	1d 9a       	sbi	0x03, 5	; 3
    20b4:	f5 cf       	rjmp	.-22     	; 0x20a0 <vApplicationMallocFailedHook+0x4>

000020b6 <vApplicationStackOverflowHook>:
    20b6:	25 9a       	sbi	0x04, 5	; 4
    20b8:	2d 9a       	sbi	0x05, 5	; 5
    20ba:	2f ef       	ldi	r18, 0xFF	; 255
    20bc:	87 ea       	ldi	r24, 0xA7	; 167
    20be:	91 e6       	ldi	r25, 0x61	; 97
    20c0:	21 50       	subi	r18, 0x01	; 1
    20c2:	80 40       	sbci	r24, 0x00	; 0
    20c4:	90 40       	sbci	r25, 0x00	; 0
    20c6:	e1 f7       	brne	.-8      	; 0x20c0 <vApplicationStackOverflowHook+0xa>
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <vApplicationStackOverflowHook+0x14>
    20ca:	00 00       	nop
    20cc:	1d 9a       	sbi	0x03, 5	; 3
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <vApplicationStackOverflowHook+0x4>

000020d0 <_ZN9MD_TCS23010initialiseEv>:
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	fc 01       	movw	r30, r24
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	80 83       	st	Z, r24
    20da:	81 83       	std	Z+1, r24	; 0x01
    20dc:	82 83       	std	Z+2, r24	; 0x02
    20de:	83 83       	std	Z+3, r24	; 0x03
    20e0:	84 83       	std	Z+4, r24	; 0x04
    20e2:	8a e0       	ldi	r24, 0x0A	; 10
    20e4:	85 83       	std	Z+5, r24	; 0x05
    20e6:	16 82       	std	Z+6, r1	; 0x06
    20e8:	df 01       	movw	r26, r30
    20ea:	17 96       	adiw	r26, 0x07	; 7
    20ec:	73 96       	adiw	r30, 0x13	; 19
    20ee:	00 e7       	ldi	r16, 0x70	; 112
    20f0:	17 e1       	ldi	r17, 0x17	; 23
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	48 ed       	ldi	r20, 0xD8	; 216
    20f8:	56 ed       	ldi	r21, 0xD6	; 214
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	0d 93       	st	X+, r16
    2100:	1d 93       	st	X+, r17
    2102:	2d 93       	st	X+, r18
    2104:	3d 93       	st	X+, r19
    2106:	18 96       	adiw	r26, 0x08	; 8
    2108:	4d 93       	st	X+, r20
    210a:	5d 93       	st	X+, r21
    210c:	6d 93       	st	X+, r22
    210e:	7c 93       	st	X, r23
    2110:	1b 97       	sbiw	r26, 0x0b	; 11
    2112:	ae 17       	cp	r26, r30
    2114:	bf 07       	cpc	r27, r31
    2116:	99 f7       	brne	.-26     	; 0x20fe <_ZN9MD_TCS23010initialiseEv+0x2e>
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	08 95       	ret

0000211e <_ZN9MD_TCS230C1Ehhh>:
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ec 01       	movw	r28, r24
    212a:	f6 2e       	mov	r15, r22
    212c:	04 2f       	mov	r16, r20
    212e:	12 2f       	mov	r17, r18
    2130:	0e 94 68 10 	call	0x20d0	; 0x20d0 <_ZN9MD_TCS23010initialiseEv>
    2134:	fb 82       	std	Y+3, r15	; 0x03
    2136:	0c 83       	std	Y+4, r16	; 0x04
    2138:	18 83       	st	Y, r17
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	08 95       	ret

00002146 <_ZN9MD_TCS230D1Ev>:
    2146:	08 95       	ret

00002148 <_ZN9MD_TCS2309setFilterEh>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	ec 01       	movw	r28, r24
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	8f 3f       	cpi	r24, 0xFF	; 255
    2152:	e9 f0       	breq	.+58     	; 0x218e <_ZN9MD_TCS2309setFilterEh+0x46>
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	9f 3f       	cpi	r25, 0xFF	; 255
    2158:	d1 f0       	breq	.+52     	; 0x218e <_ZN9MD_TCS2309setFilterEh+0x46>
    215a:	61 30       	cpi	r22, 0x01	; 1
    215c:	49 f0       	breq	.+18     	; 0x2170 <_ZN9MD_TCS2309setFilterEh+0x28>
    215e:	30 f0       	brcs	.+12     	; 0x216c <_ZN9MD_TCS2309setFilterEh+0x24>
    2160:	62 30       	cpi	r22, 0x02	; 2
    2162:	41 f0       	breq	.+16     	; 0x2174 <_ZN9MD_TCS2309setFilterEh+0x2c>
    2164:	63 30       	cpi	r22, 0x03	; 3
    2166:	99 f4       	brne	.+38     	; 0x218e <_ZN9MD_TCS2309setFilterEh+0x46>
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	09 c0       	rjmp	.+18     	; 0x217e <_ZN9MD_TCS2309setFilterEh+0x36>
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	07 c0       	rjmp	.+14     	; 0x217e <_ZN9MD_TCS2309setFilterEh+0x36>
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <_ZN9MD_TCS2309setFilterEh+0x2e>
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <_ZN9MD_TCS2309setFilterEh+0x3c>
    217e:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <digitalWrite>
    218e:	df 91       	pop	r29
    2190:	cf 91       	pop	r28
    2192:	08 95       	ret

00002194 <_ZN9MD_TCS23013setFrequency2Eh>:
    2194:	cf 93       	push	r28
    2196:	df 93       	push	r29
    2198:	ec 01       	movw	r28, r24
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	8f 3f       	cpi	r24, 0xFF	; 255
    219e:	e9 f0       	breq	.+58     	; 0x21da <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	9f 3f       	cpi	r25, 0xFF	; 255
    21a4:	d1 f0       	breq	.+52     	; 0x21da <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    21a6:	61 30       	cpi	r22, 0x01	; 1
    21a8:	49 f0       	breq	.+18     	; 0x21bc <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    21aa:	30 f0       	brcs	.+12     	; 0x21b8 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    21ac:	62 30       	cpi	r22, 0x02	; 2
    21ae:	41 f0       	breq	.+16     	; 0x21c0 <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    21b0:	63 30       	cpi	r22, 0x03	; 3
    21b2:	99 f4       	brne	.+38     	; 0x21da <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	03 c0       	rjmp	.+6      	; 0x21c2 <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	05 c0       	rjmp	.+10     	; 0x21ca <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
    21c6:	61 e0       	ldi	r22, 0x01	; 1
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    21ca:	0e 94 2f 09 	call	0x125e	; 0x125e <digitalWrite>
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	0c 94 2f 09 	jmp	0x125e	; 0x125e <digitalWrite>
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <_ZN9MD_TCS2309setEnableEb>:
    21e0:	fc 01       	movw	r30, r24
    21e2:	20 81       	ld	r18, Z
    21e4:	2f 3f       	cpi	r18, 0xFF	; 255
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <_ZN9MD_TCS2309setEnableEb+0x12>
    21e8:	91 e0       	ldi	r25, 0x01	; 1
    21ea:	69 27       	eor	r22, r25
    21ec:	82 2f       	mov	r24, r18
    21ee:	0c 94 2f 09 	jmp	0x125e	; 0x125e <digitalWrite>
    21f2:	66 23       	and	r22, r22
    21f4:	19 f0       	breq	.+6      	; 0x21fc <_ZN9MD_TCS2309setEnableEb+0x1c>
    21f6:	fc 01       	movw	r30, r24
    21f8:	66 81       	ldd	r22, Z+6	; 0x06
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <_ZN9MD_TCS2309setEnableEb+0x1e>
    21fc:	63 e0       	ldi	r22, 0x03	; 3
    21fe:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <_ZN9MD_TCS23013setFrequency2Eh>

00002202 <_ZN9MD_TCS2306getRGBEP9colorData>:
    2202:	dc 01       	movw	r26, r24
    2204:	fb 01       	movw	r30, r22
    2206:	30 97       	sbiw	r30, 0x00	; 0
    2208:	59 f0       	breq	.+22     	; 0x2220 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    220a:	9b 96       	adiw	r26, 0x2b	; 43
    220c:	8c 91       	ld	r24, X
    220e:	9b 97       	sbiw	r26, 0x2b	; 43
    2210:	80 83       	st	Z, r24
    2212:	9c 96       	adiw	r26, 0x2c	; 44
    2214:	8c 91       	ld	r24, X
    2216:	9c 97       	sbiw	r26, 0x2c	; 44
    2218:	81 83       	std	Z+1, r24	; 0x01
    221a:	9d 96       	adiw	r26, 0x2d	; 45
    221c:	8c 91       	ld	r24, X
    221e:	82 83       	std	Z+2, r24	; 0x02
    2220:	08 95       	ret

00002222 <_ZN9MD_TCS23017RGBTransformationEv>:
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	df 92       	push	r13
    2234:	ef 92       	push	r14
    2236:	ff 92       	push	r15
    2238:	0f 93       	push	r16
    223a:	1f 93       	push	r17
    223c:	cf 93       	push	r28
    223e:	df 93       	push	r29
    2240:	8c 01       	movw	r16, r24
    2242:	09 5f       	subi	r16, 0xF9	; 249
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	ec 01       	movw	r28, r24
    2248:	7c 01       	movw	r14, r24
    224a:	83 e1       	ldi	r24, 0x13	; 19
    224c:	e8 0e       	add	r14, r24
    224e:	f1 1c       	adc	r15, r1
    2250:	dd 24       	eor	r13, r13
    2252:	da 94       	dec	r13
    2254:	f8 01       	movw	r30, r16
    2256:	d8 01       	movw	r26, r16
    2258:	8d 90       	ld	r8, X+
    225a:	9d 90       	ld	r9, X+
    225c:	ad 90       	ld	r10, X+
    225e:	bd 90       	ld	r11, X+
    2260:	8d 01       	movw	r16, r26
    2262:	80 8d       	ldd	r24, Z+24	; 0x18
    2264:	91 8d       	ldd	r25, Z+25	; 0x19
    2266:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2268:	b3 8d       	ldd	r27, Z+27	; 0x1b
    226a:	9c 01       	movw	r18, r24
    226c:	ad 01       	movw	r20, r26
    226e:	28 19       	sub	r18, r8
    2270:	39 09       	sbc	r19, r9
    2272:	4a 09       	sbc	r20, r10
    2274:	5b 09       	sbc	r21, r11
    2276:	af ef       	ldi	r26, 0xFF	; 255
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__muluhisi3>
    227e:	f8 01       	movw	r30, r16
    2280:	40 84       	ldd	r4, Z+8	; 0x08
    2282:	51 84       	ldd	r5, Z+9	; 0x09
    2284:	62 84       	ldd	r6, Z+10	; 0x0a
    2286:	73 84       	ldd	r7, Z+11	; 0x0b
    2288:	a3 01       	movw	r20, r6
    228a:	92 01       	movw	r18, r4
    228c:	28 19       	sub	r18, r8
    228e:	39 09       	sbc	r19, r9
    2290:	4a 09       	sbc	r20, r10
    2292:	5b 09       	sbc	r21, r11
    2294:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <__divmodsi4>
    2298:	57 ff       	sbrs	r21, 7
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    229c:	1b a6       	std	Y+43, r1	; 0x2b
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    22a0:	2f 3f       	cpi	r18, 0xFF	; 255
    22a2:	31 05       	cpc	r19, r1
    22a4:	41 05       	cpc	r20, r1
    22a6:	51 05       	cpc	r21, r1
    22a8:	19 f0       	breq	.+6      	; 0x22b0 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    22aa:	14 f0       	brlt	.+4      	; 0x22b0 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    22ac:	db a6       	std	Y+43, r13	; 0x2b
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    22b0:	2b a7       	std	Y+43, r18	; 0x2b
    22b2:	21 96       	adiw	r28, 0x01	; 1
    22b4:	0e 15       	cp	r16, r14
    22b6:	1f 05       	cpc	r17, r15
    22b8:	69 f6       	brne	.-102    	; 0x2254 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	bf 90       	pop	r11
    22ca:	af 90       	pop	r10
    22cc:	9f 90       	pop	r9
    22ce:	8f 90       	pop	r8
    22d0:	7f 90       	pop	r7
    22d2:	6f 90       	pop	r6
    22d4:	5f 90       	pop	r5
    22d6:	4f 90       	pop	r4
    22d8:	08 95       	ret

000022da <_ZN9MD_TCS2307readFSMEh>:
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	8c 01       	movw	r16, r24
    22e4:	c6 2f       	mov	r28, r22
    22e6:	61 30       	cpi	r22, 0x01	; 1
    22e8:	49 f0       	breq	.+18     	; 0x22fc <_ZN9MD_TCS2307readFSMEh+0x22>
    22ea:	18 f0       	brcs	.+6      	; 0x22f2 <_ZN9MD_TCS2307readFSMEh+0x18>
    22ec:	62 30       	cpi	r22, 0x02	; 2
    22ee:	d9 f0       	breq	.+54     	; 0x2326 <_ZN9MD_TCS2307readFSMEh+0x4c>
    22f0:	4c c0       	rjmp	.+152    	; 0x238a <_ZN9MD_TCS2307readFSMEh+0xb0>
    22f2:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    22f6:	61 e0       	ldi	r22, 0x01	; 1
    22f8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9MD_TCS2309setEnableEb>
    22fc:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	e6 56       	subi	r30, 0x66	; 102
    2304:	fe 4f       	sbci	r31, 0xFE	; 254
    2306:	60 81       	ld	r22, Z
    2308:	c8 01       	movw	r24, r16
    230a:	0e 94 a4 10 	call	0x2148	; 0x2148 <_ZN9MD_TCS2309setFilterEh>
    230e:	f8 01       	movw	r30, r16
    2310:	65 81       	ldd	r22, Z+5	; 0x05
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	88 ee       	ldi	r24, 0xE8	; 232
    2316:	93 e0       	ldi	r25, 0x03	; 3
    2318:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__divmodhi4>
    231c:	cb 01       	movw	r24, r22
    231e:	0e 94 83 16 	call	0x2d06	; 0x2d06 <_ZN14FreqCountClass5beginEj>
    2322:	c2 e0       	ldi	r28, 0x02	; 2
    2324:	32 c0       	rjmp	.+100    	; 0x238a <_ZN9MD_TCS2307readFSMEh+0xb0>
    2326:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <_ZN14FreqCountClass9availableEv>
    232a:	88 23       	and	r24, r24
    232c:	71 f1       	breq	.+92     	; 0x238a <_ZN9MD_TCS2307readFSMEh+0xb0>
    232e:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	8e 0f       	add	r24, r30
    2336:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	e6 56       	subi	r30, 0x66	; 102
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	c0 81       	ld	r28, Z
    2342:	d0 e0       	ldi	r29, 0x00	; 0
    2344:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <_ZN14FreqCountClass4readEv>
    2348:	9b 01       	movw	r18, r22
    234a:	ac 01       	movw	r20, r24
    234c:	cc 0f       	add	r28, r28
    234e:	dd 1f       	adc	r29, r29
    2350:	cc 0f       	add	r28, r28
    2352:	dd 1f       	adc	r29, r29
    2354:	c0 0f       	add	r28, r16
    2356:	d1 1f       	adc	r29, r17
    2358:	f8 01       	movw	r30, r16
    235a:	a5 81       	ldd	r26, Z+5	; 0x05
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <__muluhisi3>
    2362:	6f 8f       	std	Y+31, r22	; 0x1f
    2364:	78 a3       	std	Y+32, r23	; 0x20
    2366:	89 a3       	std	Y+33, r24	; 0x21
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <_ZZN9MD_TCS2307readFSMEhE7currCol>
    236e:	83 30       	cpi	r24, 0x03	; 3
    2370:	58 f0       	brcs	.+22     	; 0x2388 <_ZN9MD_TCS2307readFSMEh+0xae>
    2372:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <_ZN14FreqCountClass3endEv>
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	c8 01       	movw	r24, r16
    237a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <_ZN9MD_TCS2309setEnableEb>
    237e:	c8 01       	movw	r24, r16
    2380:	0e 94 11 11 	call	0x2222	; 0x2222 <_ZN9MD_TCS23017RGBTransformationEv>
    2384:	c0 e0       	ldi	r28, 0x00	; 0
    2386:	01 c0       	rjmp	.+2      	; 0x238a <_ZN9MD_TCS2307readFSMEh+0xb0>
    2388:	c1 e0       	ldi	r28, 0x01	; 1
    238a:	8c 2f       	mov	r24, r28
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	08 95       	ret

00002396 <_ZN9MD_TCS2304readEv>:
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	ec 01       	movw	r28, r24
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN9MD_TCS2307readFSMEh>
    23a2:	8e a7       	std	Y+46, r24	; 0x2e
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <_ZN9MD_TCS2309availableEv>:
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	ec 01       	movw	r28, r24
    23b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    23b2:	0e 94 6d 11 	call	0x22da	; 0x22da <_ZN9MD_TCS2307readFSMEh>
    23b6:	98 2f       	mov	r25, r24
    23b8:	8e a7       	std	Y+46, r24	; 0x2e
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	91 11       	cpse	r25, r1
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret

000023c6 <pvPortMalloc>:
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	ec 01       	movw	r28, r24
    23cc:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    23d0:	ce 01       	movw	r24, r28
    23d2:	0e 94 22 18 	call	0x3044	; 0x3044 <malloc>
    23d6:	ec 01       	movw	r28, r24
    23d8:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    23dc:	20 97       	sbiw	r28, 0x00	; 0
    23de:	11 f4       	brne	.+4      	; 0x23e4 <pvPortMalloc+0x1e>
    23e0:	0e 94 4e 10 	call	0x209c	; 0x209c <vApplicationMallocFailedHook>
    23e4:	ce 01       	movw	r24, r28
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <vPortFree>:
    23ec:	cf 93       	push	r28
    23ee:	df 93       	push	r29
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	51 f0       	breq	.+20     	; 0x2408 <vPortFree+0x1c>
    23f4:	ec 01       	movw	r28, r24
    23f6:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 ba 18 	call	0x3174	; 0x3174 <free>
    2400:	df 91       	pop	r29
    2402:	cf 91       	pop	r28
    2404:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <xTaskResumeAll>
    2408:	df 91       	pop	r29
    240a:	cf 91       	pop	r28
    240c:	08 95       	ret

0000240e <vListInitialise>:
    240e:	fc 01       	movw	r30, r24
    2410:	03 96       	adiw	r24, 0x03	; 3
    2412:	92 83       	std	Z+2, r25	; 0x02
    2414:	81 83       	std	Z+1, r24	; 0x01
    2416:	2f ef       	ldi	r18, 0xFF	; 255
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	34 83       	std	Z+4, r19	; 0x04
    241c:	23 83       	std	Z+3, r18	; 0x03
    241e:	96 83       	std	Z+6, r25	; 0x06
    2420:	85 83       	std	Z+5, r24	; 0x05
    2422:	90 87       	std	Z+8, r25	; 0x08
    2424:	87 83       	std	Z+7, r24	; 0x07
    2426:	10 82       	st	Z, r1
    2428:	08 95       	ret

0000242a <vListInitialiseItem>:
    242a:	fc 01       	movw	r30, r24
    242c:	11 86       	std	Z+9, r1	; 0x09
    242e:	10 86       	std	Z+8, r1	; 0x08
    2430:	08 95       	ret

00002432 <vListInsertEnd>:
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	9c 01       	movw	r18, r24
    2438:	fb 01       	movw	r30, r22
    243a:	dc 01       	movw	r26, r24
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	cd 91       	ld	r28, X+
    2440:	dc 91       	ld	r29, X
    2442:	12 97       	sbiw	r26, 0x02	; 2
    2444:	d3 83       	std	Z+3, r29	; 0x03
    2446:	c2 83       	std	Z+2, r28	; 0x02
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	9d 81       	ldd	r25, Y+5	; 0x05
    244c:	95 83       	std	Z+5, r25	; 0x05
    244e:	84 83       	std	Z+4, r24	; 0x04
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	9d 81       	ldd	r25, Y+5	; 0x05
    2454:	dc 01       	movw	r26, r24
    2456:	13 96       	adiw	r26, 0x03	; 3
    2458:	7c 93       	st	X, r23
    245a:	6e 93       	st	-X, r22
    245c:	12 97       	sbiw	r26, 0x02	; 2
    245e:	7d 83       	std	Y+5, r23	; 0x05
    2460:	6c 83       	std	Y+4, r22	; 0x04
    2462:	31 87       	std	Z+9, r19	; 0x09
    2464:	20 87       	std	Z+8, r18	; 0x08
    2466:	f9 01       	movw	r30, r18
    2468:	80 81       	ld	r24, Z
    246a:	8f 5f       	subi	r24, 0xFF	; 255
    246c:	80 83       	st	Z, r24
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <vListInsert>:
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
    2478:	cf 93       	push	r28
    247a:	df 93       	push	r29
    247c:	8c 01       	movw	r16, r24
    247e:	fb 01       	movw	r30, r22
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	8f 3f       	cpi	r24, 0xFF	; 255
    2486:	2f ef       	ldi	r18, 0xFF	; 255
    2488:	92 07       	cpc	r25, r18
    248a:	21 f4       	brne	.+8      	; 0x2494 <vListInsert+0x20>
    248c:	e8 01       	movw	r28, r16
    248e:	af 81       	ldd	r26, Y+7	; 0x07
    2490:	b8 85       	ldd	r27, Y+8	; 0x08
    2492:	0e c0       	rjmp	.+28     	; 0x24b0 <vListInsert+0x3c>
    2494:	d8 01       	movw	r26, r16
    2496:	13 96       	adiw	r26, 0x03	; 3
    2498:	12 96       	adiw	r26, 0x02	; 2
    249a:	2d 91       	ld	r18, X+
    249c:	3c 91       	ld	r19, X
    249e:	13 97       	sbiw	r26, 0x03	; 3
    24a0:	e9 01       	movw	r28, r18
    24a2:	48 81       	ld	r20, Y
    24a4:	59 81       	ldd	r21, Y+1	; 0x01
    24a6:	84 17       	cp	r24, r20
    24a8:	95 07       	cpc	r25, r21
    24aa:	10 f0       	brcs	.+4      	; 0x24b0 <vListInsert+0x3c>
    24ac:	d9 01       	movw	r26, r18
    24ae:	f4 cf       	rjmp	.-24     	; 0x2498 <vListInsert+0x24>
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	8d 91       	ld	r24, X+
    24b4:	9c 91       	ld	r25, X
    24b6:	13 97       	sbiw	r26, 0x03	; 3
    24b8:	93 83       	std	Z+3, r25	; 0x03
    24ba:	82 83       	std	Z+2, r24	; 0x02
    24bc:	ec 01       	movw	r28, r24
    24be:	fd 83       	std	Y+5, r31	; 0x05
    24c0:	ec 83       	std	Y+4, r30	; 0x04
    24c2:	b5 83       	std	Z+5, r27	; 0x05
    24c4:	a4 83       	std	Z+4, r26	; 0x04
    24c6:	13 96       	adiw	r26, 0x03	; 3
    24c8:	fc 93       	st	X, r31
    24ca:	ee 93       	st	-X, r30
    24cc:	12 97       	sbiw	r26, 0x02	; 2
    24ce:	11 87       	std	Z+9, r17	; 0x09
    24d0:	00 87       	std	Z+8, r16	; 0x08
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 81       	ld	r24, Z
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	80 83       	st	Z, r24
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	08 95       	ret

000024e4 <uxListRemove>:
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	fc 01       	movw	r30, r24
    24ea:	a0 85       	ldd	r26, Z+8	; 0x08
    24ec:	b1 85       	ldd	r27, Z+9	; 0x09
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	24 81       	ldd	r18, Z+4	; 0x04
    24f4:	35 81       	ldd	r19, Z+5	; 0x05
    24f6:	ec 01       	movw	r28, r24
    24f8:	3d 83       	std	Y+5, r19	; 0x05
    24fa:	2c 83       	std	Y+4, r18	; 0x04
    24fc:	c4 81       	ldd	r28, Z+4	; 0x04
    24fe:	d5 81       	ldd	r29, Z+5	; 0x05
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
    2504:	11 96       	adiw	r26, 0x01	; 1
    2506:	8d 91       	ld	r24, X+
    2508:	9c 91       	ld	r25, X
    250a:	12 97       	sbiw	r26, 0x02	; 2
    250c:	e8 17       	cp	r30, r24
    250e:	f9 07       	cpc	r31, r25
    2510:	21 f4       	brne	.+8      	; 0x251a <uxListRemove+0x36>
    2512:	12 96       	adiw	r26, 0x02	; 2
    2514:	dc 93       	st	X, r29
    2516:	ce 93       	st	-X, r28
    2518:	11 97       	sbiw	r26, 0x01	; 1
    251a:	11 86       	std	Z+9, r1	; 0x09
    251c:	10 86       	std	Z+8, r1	; 0x08
    251e:	8c 91       	ld	r24, X
    2520:	81 50       	subi	r24, 0x01	; 1
    2522:	8c 93       	st	X, r24
    2524:	8c 91       	ld	r24, X
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    252c:	31 e1       	ldi	r19, 0x11	; 17
    252e:	fc 01       	movw	r30, r24
    2530:	30 83       	st	Z, r19
    2532:	31 97       	sbiw	r30, 0x01	; 1
    2534:	22 e2       	ldi	r18, 0x22	; 34
    2536:	20 83       	st	Z, r18
    2538:	31 97       	sbiw	r30, 0x01	; 1
    253a:	a3 e3       	ldi	r26, 0x33	; 51
    253c:	a0 83       	st	Z, r26
    253e:	31 97       	sbiw	r30, 0x01	; 1
    2540:	60 83       	st	Z, r22
    2542:	31 97       	sbiw	r30, 0x01	; 1
    2544:	70 83       	st	Z, r23
    2546:	31 97       	sbiw	r30, 0x01	; 1
    2548:	10 82       	st	Z, r1
    254a:	31 97       	sbiw	r30, 0x01	; 1
    254c:	60 e8       	ldi	r22, 0x80	; 128
    254e:	60 83       	st	Z, r22
    2550:	31 97       	sbiw	r30, 0x01	; 1
    2552:	10 82       	st	Z, r1
    2554:	31 97       	sbiw	r30, 0x01	; 1
    2556:	62 e0       	ldi	r22, 0x02	; 2
    2558:	60 83       	st	Z, r22
    255a:	31 97       	sbiw	r30, 0x01	; 1
    255c:	63 e0       	ldi	r22, 0x03	; 3
    255e:	60 83       	st	Z, r22
    2560:	31 97       	sbiw	r30, 0x01	; 1
    2562:	64 e0       	ldi	r22, 0x04	; 4
    2564:	60 83       	st	Z, r22
    2566:	31 97       	sbiw	r30, 0x01	; 1
    2568:	65 e0       	ldi	r22, 0x05	; 5
    256a:	60 83       	st	Z, r22
    256c:	31 97       	sbiw	r30, 0x01	; 1
    256e:	66 e0       	ldi	r22, 0x06	; 6
    2570:	60 83       	st	Z, r22
    2572:	31 97       	sbiw	r30, 0x01	; 1
    2574:	67 e0       	ldi	r22, 0x07	; 7
    2576:	60 83       	st	Z, r22
    2578:	31 97       	sbiw	r30, 0x01	; 1
    257a:	68 e0       	ldi	r22, 0x08	; 8
    257c:	60 83       	st	Z, r22
    257e:	31 97       	sbiw	r30, 0x01	; 1
    2580:	69 e0       	ldi	r22, 0x09	; 9
    2582:	60 83       	st	Z, r22
    2584:	31 97       	sbiw	r30, 0x01	; 1
    2586:	60 e1       	ldi	r22, 0x10	; 16
    2588:	60 83       	st	Z, r22
    258a:	31 97       	sbiw	r30, 0x01	; 1
    258c:	30 83       	st	Z, r19
    258e:	31 97       	sbiw	r30, 0x01	; 1
    2590:	32 e1       	ldi	r19, 0x12	; 18
    2592:	30 83       	st	Z, r19
    2594:	31 97       	sbiw	r30, 0x01	; 1
    2596:	33 e1       	ldi	r19, 0x13	; 19
    2598:	30 83       	st	Z, r19
    259a:	31 97       	sbiw	r30, 0x01	; 1
    259c:	34 e1       	ldi	r19, 0x14	; 20
    259e:	30 83       	st	Z, r19
    25a0:	31 97       	sbiw	r30, 0x01	; 1
    25a2:	35 e1       	ldi	r19, 0x15	; 21
    25a4:	30 83       	st	Z, r19
    25a6:	31 97       	sbiw	r30, 0x01	; 1
    25a8:	36 e1       	ldi	r19, 0x16	; 22
    25aa:	30 83       	st	Z, r19
    25ac:	31 97       	sbiw	r30, 0x01	; 1
    25ae:	37 e1       	ldi	r19, 0x17	; 23
    25b0:	30 83       	st	Z, r19
    25b2:	31 97       	sbiw	r30, 0x01	; 1
    25b4:	38 e1       	ldi	r19, 0x18	; 24
    25b6:	30 83       	st	Z, r19
    25b8:	31 97       	sbiw	r30, 0x01	; 1
    25ba:	39 e1       	ldi	r19, 0x19	; 25
    25bc:	30 83       	st	Z, r19
    25be:	31 97       	sbiw	r30, 0x01	; 1
    25c0:	30 e2       	ldi	r19, 0x20	; 32
    25c2:	30 83       	st	Z, r19
    25c4:	31 97       	sbiw	r30, 0x01	; 1
    25c6:	31 e2       	ldi	r19, 0x21	; 33
    25c8:	30 83       	st	Z, r19
    25ca:	31 97       	sbiw	r30, 0x01	; 1
    25cc:	20 83       	st	Z, r18
    25ce:	31 97       	sbiw	r30, 0x01	; 1
    25d0:	23 e2       	ldi	r18, 0x23	; 35
    25d2:	20 83       	st	Z, r18
    25d4:	31 97       	sbiw	r30, 0x01	; 1
    25d6:	40 83       	st	Z, r20
    25d8:	31 97       	sbiw	r30, 0x01	; 1
    25da:	50 83       	st	Z, r21
    25dc:	31 97       	sbiw	r30, 0x01	; 1
    25de:	26 e2       	ldi	r18, 0x26	; 38
    25e0:	20 83       	st	Z, r18
    25e2:	31 97       	sbiw	r30, 0x01	; 1
    25e4:	27 e2       	ldi	r18, 0x27	; 39
    25e6:	20 83       	st	Z, r18
    25e8:	31 97       	sbiw	r30, 0x01	; 1
    25ea:	28 e2       	ldi	r18, 0x28	; 40
    25ec:	20 83       	st	Z, r18
    25ee:	31 97       	sbiw	r30, 0x01	; 1
    25f0:	29 e2       	ldi	r18, 0x29	; 41
    25f2:	20 83       	st	Z, r18
    25f4:	31 97       	sbiw	r30, 0x01	; 1
    25f6:	20 e3       	ldi	r18, 0x30	; 48
    25f8:	20 83       	st	Z, r18
    25fa:	31 97       	sbiw	r30, 0x01	; 1
    25fc:	21 e3       	ldi	r18, 0x31	; 49
    25fe:	20 83       	st	Z, r18
    2600:	86 97       	sbiw	r24, 0x26	; 38
    2602:	08 95       	ret

00002604 <xPortStartScheduler>:
    2604:	a8 95       	wdr
    2606:	90 ec       	ldi	r25, 0xC0	; 192
    2608:	88 e1       	ldi	r24, 0x18	; 24
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	a8 95       	wdr
    2610:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    261a:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    261e:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    2622:	cd 91       	ld	r28, X+
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	dd 91       	ld	r29, X+
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	ff 91       	pop	r31
    262c:	ef 91       	pop	r30
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	bf 91       	pop	r27
    2634:	af 91       	pop	r26
    2636:	9f 91       	pop	r25
    2638:	8f 91       	pop	r24
    263a:	7f 91       	pop	r23
    263c:	6f 91       	pop	r22
    263e:	5f 91       	pop	r21
    2640:	4f 91       	pop	r20
    2642:	3f 91       	pop	r19
    2644:	2f 91       	pop	r18
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	ff 90       	pop	r15
    264c:	ef 90       	pop	r14
    264e:	df 90       	pop	r13
    2650:	cf 90       	pop	r12
    2652:	bf 90       	pop	r11
    2654:	af 90       	pop	r10
    2656:	9f 90       	pop	r9
    2658:	8f 90       	pop	r8
    265a:	7f 90       	pop	r7
    265c:	6f 90       	pop	r6
    265e:	5f 90       	pop	r5
    2660:	4f 90       	pop	r4
    2662:	3f 90       	pop	r3
    2664:	2f 90       	pop	r2
    2666:	1f 90       	pop	r1
    2668:	0f 90       	pop	r0
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	0f 90       	pop	r0
    266e:	08 95       	ret
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	08 95       	ret

00002674 <vPortYield>:
    2674:	0f 92       	push	r0
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	0f 92       	push	r0
    267c:	1f 92       	push	r1
    267e:	11 24       	eor	r1, r1
    2680:	2f 92       	push	r2
    2682:	3f 92       	push	r3
    2684:	4f 92       	push	r4
    2686:	5f 92       	push	r5
    2688:	6f 92       	push	r6
    268a:	7f 92       	push	r7
    268c:	8f 92       	push	r8
    268e:	9f 92       	push	r9
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	2f 93       	push	r18
    26a2:	3f 93       	push	r19
    26a4:	4f 93       	push	r20
    26a6:	5f 93       	push	r21
    26a8:	6f 93       	push	r22
    26aa:	7f 93       	push	r23
    26ac:	8f 93       	push	r24
    26ae:	9f 93       	push	r25
    26b0:	af 93       	push	r26
    26b2:	bf 93       	push	r27
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
    26bc:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    26c0:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    26c4:	0d b6       	in	r0, 0x3d	; 61
    26c6:	0d 92       	st	X+, r0
    26c8:	0e b6       	in	r0, 0x3e	; 62
    26ca:	0d 92       	st	X+, r0
    26cc:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <vTaskSwitchContext>
    26d0:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    26d4:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    26d8:	cd 91       	ld	r28, X+
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	dd 91       	ld	r29, X+
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	ff 91       	pop	r31
    26e2:	ef 91       	pop	r30
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	bf 91       	pop	r27
    26ea:	af 91       	pop	r26
    26ec:	9f 91       	pop	r25
    26ee:	8f 91       	pop	r24
    26f0:	7f 91       	pop	r23
    26f2:	6f 91       	pop	r22
    26f4:	5f 91       	pop	r21
    26f6:	4f 91       	pop	r20
    26f8:	3f 91       	pop	r19
    26fa:	2f 91       	pop	r18
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	df 90       	pop	r13
    2706:	cf 90       	pop	r12
    2708:	bf 90       	pop	r11
    270a:	af 90       	pop	r10
    270c:	9f 90       	pop	r9
    270e:	8f 90       	pop	r8
    2710:	7f 90       	pop	r7
    2712:	6f 90       	pop	r6
    2714:	5f 90       	pop	r5
    2716:	4f 90       	pop	r4
    2718:	3f 90       	pop	r3
    271a:	2f 90       	pop	r2
    271c:	1f 90       	pop	r1
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0f 90       	pop	r0
    2724:	08 95       	ret

00002726 <vPortYieldFromTick>:
    2726:	0f 92       	push	r0
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	0f 92       	push	r0
    272e:	1f 92       	push	r1
    2730:	11 24       	eor	r1, r1
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	2f 93       	push	r18
    2754:	3f 93       	push	r19
    2756:	4f 93       	push	r20
    2758:	5f 93       	push	r21
    275a:	6f 93       	push	r22
    275c:	7f 93       	push	r23
    275e:	8f 93       	push	r24
    2760:	9f 93       	push	r25
    2762:	af 93       	push	r26
    2764:	bf 93       	push	r27
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	ef 93       	push	r30
    276c:	ff 93       	push	r31
    276e:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    2772:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    2776:	0d b6       	in	r0, 0x3d	; 61
    2778:	0d 92       	st	X+, r0
    277a:	0e b6       	in	r0, 0x3e	; 62
    277c:	0d 92       	st	X+, r0
    277e:	13 be       	out	0x33, r1	; 51
    2780:	0e 94 96 0b 	call	0x172c	; 0x172c <xTaskIncrementTick>
    2784:	81 11       	cpse	r24, r1
    2786:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <vTaskSwitchContext>
    278a:	a0 91 d8 03 	lds	r26, 0x03D8	; 0x8003d8 <pxCurrentTCB>
    278e:	b0 91 d9 03 	lds	r27, 0x03D9	; 0x8003d9 <pxCurrentTCB+0x1>
    2792:	cd 91       	ld	r28, X+
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	dd 91       	ld	r29, X+
    2798:	de bf       	out	0x3e, r29	; 62
    279a:	ff 91       	pop	r31
    279c:	ef 91       	pop	r30
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	1f 91       	pop	r17
    27b8:	0f 91       	pop	r16
    27ba:	ff 90       	pop	r15
    27bc:	ef 90       	pop	r14
    27be:	df 90       	pop	r13
    27c0:	cf 90       	pop	r12
    27c2:	bf 90       	pop	r11
    27c4:	af 90       	pop	r10
    27c6:	9f 90       	pop	r9
    27c8:	8f 90       	pop	r8
    27ca:	7f 90       	pop	r7
    27cc:	6f 90       	pop	r6
    27ce:	5f 90       	pop	r5
    27d0:	4f 90       	pop	r4
    27d2:	3f 90       	pop	r3
    27d4:	2f 90       	pop	r2
    27d6:	1f 90       	pop	r1
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	0f 90       	pop	r0
    27de:	08 95       	ret

000027e0 <__vector_6>:
    27e0:	0e 94 93 13 	call	0x2726	; 0x2726 <vPortYieldFromTick>
    27e4:	18 95       	reti

000027e6 <prvIsQueueEmpty>:
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	0f 92       	push	r0
    27ec:	fc 01       	movw	r30, r24
    27ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    27f0:	0f 90       	pop	r0
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	91 11       	cpse	r25, r1
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	08 95       	ret

000027fc <prvCopyDataToQueue>:
    27fc:	0f 93       	push	r16
    27fe:	1f 93       	push	r17
    2800:	cf 93       	push	r28
    2802:	df 93       	push	r29
    2804:	ec 01       	movw	r28, r24
    2806:	04 2f       	mov	r16, r20
    2808:	1a 8d       	ldd	r17, Y+26	; 0x1a
    280a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    280c:	41 11       	cpse	r20, r1
    280e:	0b c0       	rjmp	.+22     	; 0x2826 <prvCopyDataToQueue+0x2a>
    2810:	88 81       	ld	r24, Y
    2812:	99 81       	ldd	r25, Y+1	; 0x01
    2814:	89 2b       	or	r24, r25
    2816:	e9 f5       	brne	.+122    	; 0x2892 <prvCopyDataToQueue+0x96>
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <xTaskPriorityDisinherit>
    2820:	1d 82       	std	Y+5, r1	; 0x05
    2822:	1c 82       	std	Y+4, r1	; 0x04
    2824:	37 c0       	rjmp	.+110    	; 0x2894 <prvCopyDataToQueue+0x98>
    2826:	50 e0       	ldi	r21, 0x00	; 0
    2828:	01 11       	cpse	r16, r1
    282a:	15 c0       	rjmp	.+42     	; 0x2856 <prvCopyDataToQueue+0x5a>
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
    282e:	9b 81       	ldd	r25, Y+3	; 0x03
    2830:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
    2834:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	9b 81       	ldd	r25, Y+3	; 0x03
    283a:	82 0f       	add	r24, r18
    283c:	91 1d       	adc	r25, r1
    283e:	9b 83       	std	Y+3, r25	; 0x03
    2840:	8a 83       	std	Y+2, r24	; 0x02
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	82 17       	cp	r24, r18
    2848:	93 07       	cpc	r25, r19
    284a:	18 f1       	brcs	.+70     	; 0x2892 <prvCopyDataToQueue+0x96>
    284c:	88 81       	ld	r24, Y
    284e:	99 81       	ldd	r25, Y+1	; 0x01
    2850:	9b 83       	std	Y+3, r25	; 0x03
    2852:	8a 83       	std	Y+2, r24	; 0x02
    2854:	1e c0       	rjmp	.+60     	; 0x2892 <prvCopyDataToQueue+0x96>
    2856:	8e 81       	ldd	r24, Y+6	; 0x06
    2858:	9f 81       	ldd	r25, Y+7	; 0x07
    285a:	0e 94 43 19 	call	0x3286	; 0x3286 <memcpy>
    285e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	91 95       	neg	r25
    2864:	81 95       	neg	r24
    2866:	91 09       	sbc	r25, r1
    2868:	2e 81       	ldd	r18, Y+6	; 0x06
    286a:	3f 81       	ldd	r19, Y+7	; 0x07
    286c:	28 0f       	add	r18, r24
    286e:	39 1f       	adc	r19, r25
    2870:	3f 83       	std	Y+7, r19	; 0x07
    2872:	2e 83       	std	Y+6, r18	; 0x06
    2874:	48 81       	ld	r20, Y
    2876:	59 81       	ldd	r21, Y+1	; 0x01
    2878:	24 17       	cp	r18, r20
    287a:	35 07       	cpc	r19, r21
    287c:	30 f4       	brcc	.+12     	; 0x288a <prvCopyDataToQueue+0x8e>
    287e:	2c 81       	ldd	r18, Y+4	; 0x04
    2880:	3d 81       	ldd	r19, Y+5	; 0x05
    2882:	82 0f       	add	r24, r18
    2884:	93 1f       	adc	r25, r19
    2886:	9f 83       	std	Y+7, r25	; 0x07
    2888:	8e 83       	std	Y+6, r24	; 0x06
    288a:	02 30       	cpi	r16, 0x02	; 2
    288c:	11 f4       	brne	.+4      	; 0x2892 <prvCopyDataToQueue+0x96>
    288e:	11 11       	cpse	r17, r1
    2890:	11 50       	subi	r17, 0x01	; 1
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	1f 5f       	subi	r17, 0xFF	; 255
    2896:	1a 8f       	std	Y+26, r17	; 0x1a
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <prvCopyDataFromQueue>:
    28a2:	fc 01       	movw	r30, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	44 8d       	ldd	r20, Z+28	; 0x1c
    28a8:	44 23       	and	r20, r20
    28aa:	a1 f0       	breq	.+40     	; 0x28d4 <prvCopyDataFromQueue+0x32>
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	26 81       	ldd	r18, Z+6	; 0x06
    28b0:	37 81       	ldd	r19, Z+7	; 0x07
    28b2:	24 0f       	add	r18, r20
    28b4:	35 1f       	adc	r19, r21
    28b6:	37 83       	std	Z+7, r19	; 0x07
    28b8:	26 83       	std	Z+6, r18	; 0x06
    28ba:	64 81       	ldd	r22, Z+4	; 0x04
    28bc:	75 81       	ldd	r23, Z+5	; 0x05
    28be:	26 17       	cp	r18, r22
    28c0:	37 07       	cpc	r19, r23
    28c2:	20 f0       	brcs	.+8      	; 0x28cc <prvCopyDataFromQueue+0x2a>
    28c4:	20 81       	ld	r18, Z
    28c6:	31 81       	ldd	r19, Z+1	; 0x01
    28c8:	37 83       	std	Z+7, r19	; 0x07
    28ca:	26 83       	std	Z+6, r18	; 0x06
    28cc:	66 81       	ldd	r22, Z+6	; 0x06
    28ce:	77 81       	ldd	r23, Z+7	; 0x07
    28d0:	0c 94 43 19 	jmp	0x3286	; 0x3286 <memcpy>
    28d4:	08 95       	ret

000028d6 <prvUnlockQueue>:
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	ec 01       	movw	r28, r24
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	0f 92       	push	r0
    28e8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    28ea:	7c 01       	movw	r14, r24
    28ec:	81 e1       	ldi	r24, 0x11	; 17
    28ee:	e8 0e       	add	r14, r24
    28f0:	f1 1c       	adc	r15, r1
    28f2:	11 16       	cp	r1, r17
    28f4:	5c f4       	brge	.+22     	; 0x290c <prvUnlockQueue+0x36>
    28f6:	89 89       	ldd	r24, Y+17	; 0x11
    28f8:	88 23       	and	r24, r24
    28fa:	41 f0       	breq	.+16     	; 0x290c <prvUnlockQueue+0x36>
    28fc:	c7 01       	movw	r24, r14
    28fe:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    2902:	81 11       	cpse	r24, r1
    2904:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <vTaskMissedYield>
    2908:	11 50       	subi	r17, 0x01	; 1
    290a:	f3 cf       	rjmp	.-26     	; 0x28f2 <prvUnlockQueue+0x1c>
    290c:	8f ef       	ldi	r24, 0xFF	; 255
    290e:	8e 8f       	std	Y+30, r24	; 0x1e
    2910:	0f 90       	pop	r0
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	0f 92       	push	r0
    291a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    291c:	7e 01       	movw	r14, r28
    291e:	88 e0       	ldi	r24, 0x08	; 8
    2920:	e8 0e       	add	r14, r24
    2922:	f1 1c       	adc	r15, r1
    2924:	11 16       	cp	r1, r17
    2926:	5c f4       	brge	.+22     	; 0x293e <prvUnlockQueue+0x68>
    2928:	88 85       	ldd	r24, Y+8	; 0x08
    292a:	88 23       	and	r24, r24
    292c:	41 f0       	breq	.+16     	; 0x293e <prvUnlockQueue+0x68>
    292e:	c7 01       	movw	r24, r14
    2930:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    2934:	81 11       	cpse	r24, r1
    2936:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <vTaskMissedYield>
    293a:	11 50       	subi	r17, 0x01	; 1
    293c:	f3 cf       	rjmp	.-26     	; 0x2924 <prvUnlockQueue+0x4e>
    293e:	8f ef       	ldi	r24, 0xFF	; 255
    2940:	8d 8f       	std	Y+29, r24	; 0x1d
    2942:	0f 90       	pop	r0
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	1f 91       	pop	r17
    294c:	ff 90       	pop	r15
    294e:	ef 90       	pop	r14
    2950:	08 95       	ret

00002952 <xQueueGenericReset>:
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	ec 01       	movw	r28, r24
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	0f 92       	push	r0
    295e:	48 81       	ld	r20, Y
    2960:	59 81       	ldd	r21, Y+1	; 0x01
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2966:	9a 01       	movw	r18, r20
    2968:	87 9f       	mul	r24, r23
    296a:	20 0d       	add	r18, r0
    296c:	31 1d       	adc	r19, r1
    296e:	11 24       	eor	r1, r1
    2970:	3d 83       	std	Y+5, r19	; 0x05
    2972:	2c 83       	std	Y+4, r18	; 0x04
    2974:	1a 8e       	std	Y+26, r1	; 0x1a
    2976:	5b 83       	std	Y+3, r21	; 0x03
    2978:	4a 83       	std	Y+2, r20	; 0x02
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	78 9f       	mul	r23, r24
    2980:	90 01       	movw	r18, r0
    2982:	79 9f       	mul	r23, r25
    2984:	30 0d       	add	r19, r0
    2986:	11 24       	eor	r1, r1
    2988:	ca 01       	movw	r24, r20
    298a:	82 0f       	add	r24, r18
    298c:	93 1f       	adc	r25, r19
    298e:	9f 83       	std	Y+7, r25	; 0x07
    2990:	8e 83       	std	Y+6, r24	; 0x06
    2992:	8f ef       	ldi	r24, 0xFF	; 255
    2994:	8d 8f       	std	Y+29, r24	; 0x1d
    2996:	8e 8f       	std	Y+30, r24	; 0x1e
    2998:	61 11       	cpse	r22, r1
    299a:	0c c0       	rjmp	.+24     	; 0x29b4 <xQueueGenericReset+0x62>
    299c:	88 85       	ldd	r24, Y+8	; 0x08
    299e:	88 23       	and	r24, r24
    29a0:	89 f0       	breq	.+34     	; 0x29c4 <xQueueGenericReset+0x72>
    29a2:	ce 01       	movw	r24, r28
    29a4:	08 96       	adiw	r24, 0x08	; 8
    29a6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    29aa:	88 23       	and	r24, r24
    29ac:	59 f0       	breq	.+22     	; 0x29c4 <xQueueGenericReset+0x72>
    29ae:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <xQueueGenericReset+0x72>
    29b4:	ce 01       	movw	r24, r28
    29b6:	08 96       	adiw	r24, 0x08	; 8
    29b8:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    29bc:	ce 01       	movw	r24, r28
    29be:	41 96       	adiw	r24, 0x11	; 17
    29c0:	0e 94 07 12 	call	0x240e	; 0x240e <vListInitialise>
    29c4:	0f 90       	pop	r0
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	08 95       	ret

000029d0 <xQueueGenericCreate>:
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	08 2f       	mov	r16, r24
    29da:	16 2f       	mov	r17, r22
    29dc:	66 23       	and	r22, r22
    29de:	21 f0       	breq	.+8      	; 0x29e8 <xQueueGenericCreate+0x18>
    29e0:	86 9f       	mul	r24, r22
    29e2:	c0 01       	movw	r24, r0
    29e4:	11 24       	eor	r1, r1
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <xQueueGenericCreate+0x1c>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	4f 96       	adiw	r24, 0x1f	; 31
    29ee:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <pvPortMalloc>
    29f2:	ec 01       	movw	r28, r24
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	71 f0       	breq	.+28     	; 0x2a14 <xQueueGenericCreate+0x44>
    29f8:	11 11       	cpse	r17, r1
    29fa:	03 c0       	rjmp	.+6      	; 0x2a02 <xQueueGenericCreate+0x32>
    29fc:	99 83       	std	Y+1, r25	; 0x01
    29fe:	88 83       	st	Y, r24
    2a00:	03 c0       	rjmp	.+6      	; 0x2a08 <xQueueGenericCreate+0x38>
    2a02:	4f 96       	adiw	r24, 0x1f	; 31
    2a04:	99 83       	std	Y+1, r25	; 0x01
    2a06:	88 83       	st	Y, r24
    2a08:	0b 8f       	std	Y+27, r16	; 0x1b
    2a0a:	1c 8f       	std	Y+28, r17	; 0x1c
    2a0c:	61 e0       	ldi	r22, 0x01	; 1
    2a0e:	ce 01       	movw	r24, r28
    2a10:	0e 94 a9 14 	call	0x2952	; 0x2952 <xQueueGenericReset>
    2a14:	ce 01       	movw	r24, r28
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	08 95       	ret

00002a20 <xQueueGenericSend>:
    2a20:	af 92       	push	r10
    2a22:	bf 92       	push	r11
    2a24:	cf 92       	push	r12
    2a26:	df 92       	push	r13
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	00 d0       	rcall	.+0      	; 0x2a34 <xQueueGenericSend+0x14>
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <xQueueGenericSend+0x16>
    2a36:	1f 92       	push	r1
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	8c 01       	movw	r16, r24
    2a3e:	6b 01       	movw	r12, r22
    2a40:	5d 83       	std	Y+5, r21	; 0x05
    2a42:	4c 83       	std	Y+4, r20	; 0x04
    2a44:	f2 2e       	mov	r15, r18
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	58 01       	movw	r10, r16
    2a4a:	98 e0       	ldi	r25, 0x08	; 8
    2a4c:	a9 0e       	add	r10, r25
    2a4e:	b1 1c       	adc	r11, r1
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	0f 92       	push	r0
    2a56:	f8 01       	movw	r30, r16
    2a58:	22 8d       	ldd	r18, Z+26	; 0x1a
    2a5a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2a5c:	29 17       	cp	r18, r25
    2a5e:	18 f0       	brcs	.+6      	; 0x2a66 <xQueueGenericSend+0x46>
    2a60:	f2 e0       	ldi	r31, 0x02	; 2
    2a62:	ff 12       	cpse	r15, r31
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <xQueueGenericSend+0x6e>
    2a66:	4f 2d       	mov	r20, r15
    2a68:	b6 01       	movw	r22, r12
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <prvCopyDataToQueue>
    2a70:	f8 01       	movw	r30, r16
    2a72:	91 89       	ldd	r25, Z+17	; 0x11
    2a74:	99 23       	and	r25, r25
    2a76:	21 f0       	breq	.+8      	; 0x2a80 <xQueueGenericSend+0x60>
    2a78:	c8 01       	movw	r24, r16
    2a7a:	41 96       	adiw	r24, 0x11	; 17
    2a7c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    2a80:	81 11       	cpse	r24, r1
    2a82:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    2a86:	0f 90       	pop	r0
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	50 c0       	rjmp	.+160    	; 0x2b2e <xQueueGenericSend+0x10e>
    2a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a90:	3d 81       	ldd	r19, Y+5	; 0x05
    2a92:	23 2b       	or	r18, r19
    2a94:	19 f4       	brne	.+6      	; 0x2a9c <xQueueGenericSend+0x7c>
    2a96:	0f 90       	pop	r0
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	48 c0       	rjmp	.+144    	; 0x2b2c <xQueueGenericSend+0x10c>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <xQueueGenericSend+0x88>
    2aa0:	ce 01       	movw	r24, r28
    2aa2:	01 96       	adiw	r24, 0x01	; 1
    2aa4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <vTaskInternalSetTimeOutState>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	0f 92       	push	r0
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	85 8d       	ldd	r24, Z+29	; 0x1d
    2aba:	8f 3f       	cpi	r24, 0xFF	; 255
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <xQueueGenericSend+0xa0>
    2abe:	15 8e       	std	Z+29, r1	; 0x1d
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ac6:	09 f4       	brne	.+2      	; 0x2aca <xQueueGenericSend+0xaa>
    2ac8:	16 8e       	std	Z+30, r1	; 0x1e
    2aca:	0f 90       	pop	r0
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	be 01       	movw	r22, r28
    2ad0:	6c 5f       	subi	r22, 0xFC	; 252
    2ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <xTaskCheckForTimeOut>
    2adc:	81 11       	cpse	r24, r1
    2ade:	21 c0       	rjmp	.+66     	; 0x2b22 <xQueueGenericSend+0x102>
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	0f 92       	push	r0
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2aea:	83 8d       	ldd	r24, Z+27	; 0x1b
    2aec:	0f 90       	pop	r0
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	98 13       	cpse	r25, r24
    2af2:	11 c0       	rjmp	.+34     	; 0x2b16 <xQueueGenericSend+0xf6>
    2af4:	6c 81       	ldd	r22, Y+4	; 0x04
    2af6:	7d 81       	ldd	r23, Y+5	; 0x05
    2af8:	c5 01       	movw	r24, r10
    2afa:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <vTaskPlaceOnEventList>
    2afe:	c8 01       	movw	r24, r16
    2b00:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2b04:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2b08:	88 23       	and	r24, r24
    2b0a:	11 f0       	breq	.+4      	; 0x2b10 <xQueueGenericSend+0xf0>
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	a0 cf       	rjmp	.-192    	; 0x2a50 <xQueueGenericSend+0x30>
    2b10:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    2b14:	fb cf       	rjmp	.-10     	; 0x2b0c <xQueueGenericSend+0xec>
    2b16:	c8 01       	movw	r24, r16
    2b18:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2b1c:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2b20:	f5 cf       	rjmp	.-22     	; 0x2b0c <xQueueGenericSend+0xec>
    2b22:	c8 01       	movw	r24, r16
    2b24:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2b28:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	df 91       	pop	r29
    2b3a:	cf 91       	pop	r28
    2b3c:	1f 91       	pop	r17
    2b3e:	0f 91       	pop	r16
    2b40:	ff 90       	pop	r15
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	bf 90       	pop	r11
    2b48:	af 90       	pop	r10
    2b4a:	08 95       	ret

00002b4c <xQueueGenericSendFromISR>:
    2b4c:	ef 92       	push	r14
    2b4e:	ff 92       	push	r15
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	ec 01       	movw	r28, r24
    2b58:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5c:	98 17       	cp	r25, r24
    2b5e:	10 f0       	brcs	.+4      	; 0x2b64 <xQueueGenericSendFromISR+0x18>
    2b60:	22 30       	cpi	r18, 0x02	; 2
    2b62:	e1 f4       	brne	.+56     	; 0x2b9c <xQueueGenericSendFromISR+0x50>
    2b64:	7a 01       	movw	r14, r20
    2b66:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2b68:	42 2f       	mov	r20, r18
    2b6a:	ce 01       	movw	r24, r28
    2b6c:	0e 94 fe 13 	call	0x27fc	; 0x27fc <prvCopyDataToQueue>
    2b70:	1f 3f       	cpi	r17, 0xFF	; 255
    2b72:	81 f4       	brne	.+32     	; 0x2b94 <xQueueGenericSendFromISR+0x48>
    2b74:	89 89       	ldd	r24, Y+17	; 0x11
    2b76:	88 23       	and	r24, r24
    2b78:	79 f0       	breq	.+30     	; 0x2b98 <xQueueGenericSendFromISR+0x4c>
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	41 96       	adiw	r24, 0x11	; 17
    2b7e:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    2b82:	88 23       	and	r24, r24
    2b84:	49 f0       	breq	.+18     	; 0x2b98 <xQueueGenericSendFromISR+0x4c>
    2b86:	e1 14       	cp	r14, r1
    2b88:	f1 04       	cpc	r15, r1
    2b8a:	31 f0       	breq	.+12     	; 0x2b98 <xQueueGenericSendFromISR+0x4c>
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	f7 01       	movw	r30, r14
    2b90:	80 83       	st	Z, r24
    2b92:	05 c0       	rjmp	.+10     	; 0x2b9e <xQueueGenericSendFromISR+0x52>
    2b94:	1f 5f       	subi	r17, 0xFF	; 255
    2b96:	1e 8f       	std	Y+30, r17	; 0x1e
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <xQueueGenericSendFromISR+0x52>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	ff 90       	pop	r15
    2ba6:	ef 90       	pop	r14
    2ba8:	08 95       	ret

00002baa <xQueueReceive>:
    2baa:	af 92       	push	r10
    2bac:	bf 92       	push	r11
    2bae:	cf 92       	push	r12
    2bb0:	df 92       	push	r13
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <xQueueReceive+0x14>
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <xQueueReceive+0x16>
    2bc0:	1f 92       	push	r1
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	8c 01       	movw	r16, r24
    2bc8:	6b 01       	movw	r12, r22
    2bca:	5d 83       	std	Y+5, r21	; 0x05
    2bcc:	4c 83       	std	Y+4, r20	; 0x04
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	58 01       	movw	r10, r16
    2bd2:	91 e1       	ldi	r25, 0x11	; 17
    2bd4:	a9 0e       	add	r10, r25
    2bd6:	b1 1c       	adc	r11, r1
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	0f 92       	push	r0
    2bde:	f8 01       	movw	r30, r16
    2be0:	f2 8c       	ldd	r15, Z+26	; 0x1a
    2be2:	ff 20       	and	r15, r15
    2be4:	a9 f0       	breq	.+42     	; 0x2c10 <xQueueReceive+0x66>
    2be6:	b6 01       	movw	r22, r12
    2be8:	c8 01       	movw	r24, r16
    2bea:	0e 94 51 14 	call	0x28a2	; 0x28a2 <prvCopyDataFromQueue>
    2bee:	fa 94       	dec	r15
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	f2 8e       	std	Z+26, r15	; 0x1a
    2bf4:	80 85       	ldd	r24, Z+8	; 0x08
    2bf6:	88 23       	and	r24, r24
    2bf8:	39 f0       	breq	.+14     	; 0x2c08 <xQueueReceive+0x5e>
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	08 96       	adiw	r24, 0x08	; 8
    2bfe:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <xTaskRemoveFromEventList>
    2c02:	81 11       	cpse	r24, r1
    2c04:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    2c08:	0f 90       	pop	r0
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	50 c0       	rjmp	.+160    	; 0x2cb0 <xQueueReceive+0x106>
    2c10:	2c 81       	ldd	r18, Y+4	; 0x04
    2c12:	3d 81       	ldd	r19, Y+5	; 0x05
    2c14:	23 2b       	or	r18, r19
    2c16:	19 f4       	brne	.+6      	; 0x2c1e <xQueueReceive+0x74>
    2c18:	0f 90       	pop	r0
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	48 c0       	rjmp	.+144    	; 0x2cae <xQueueReceive+0x104>
    2c1e:	81 11       	cpse	r24, r1
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <xQueueReceive+0x80>
    2c22:	ce 01       	movw	r24, r28
    2c24:	01 96       	adiw	r24, 0x01	; 1
    2c26:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <vTaskInternalSetTimeOutState>
    2c2a:	0f 90       	pop	r0
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	0e 94 86 0b 	call	0x170c	; 0x170c <vTaskSuspendAll>
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	0f 92       	push	r0
    2c38:	f8 01       	movw	r30, r16
    2c3a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <xQueueReceive+0x98>
    2c40:	15 8e       	std	Z+29, r1	; 0x1d
    2c42:	f8 01       	movw	r30, r16
    2c44:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c46:	8f 3f       	cpi	r24, 0xFF	; 255
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <xQueueReceive+0xa2>
    2c4a:	16 8e       	std	Z+30, r1	; 0x1e
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	be 01       	movw	r22, r28
    2c52:	6c 5f       	subi	r22, 0xFC	; 252
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
    2c56:	ce 01       	movw	r24, r28
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <xTaskCheckForTimeOut>
    2c5e:	81 11       	cpse	r24, r1
    2c60:	1c c0       	rjmp	.+56     	; 0x2c9a <xQueueReceive+0xf0>
    2c62:	c8 01       	movw	r24, r16
    2c64:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <prvIsQueueEmpty>
    2c68:	88 23       	and	r24, r24
    2c6a:	89 f0       	breq	.+34     	; 0x2c8e <xQueueReceive+0xe4>
    2c6c:	6c 81       	ldd	r22, Y+4	; 0x04
    2c6e:	7d 81       	ldd	r23, Y+5	; 0x05
    2c70:	c5 01       	movw	r24, r10
    2c72:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <vTaskPlaceOnEventList>
    2c76:	c8 01       	movw	r24, r16
    2c78:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2c7c:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2c80:	88 23       	and	r24, r24
    2c82:	11 f0       	breq	.+4      	; 0x2c88 <xQueueReceive+0xde>
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	a8 cf       	rjmp	.-176    	; 0x2bd8 <xQueueReceive+0x2e>
    2c88:	0e 94 3a 13 	call	0x2674	; 0x2674 <vPortYield>
    2c8c:	fb cf       	rjmp	.-10     	; 0x2c84 <xQueueReceive+0xda>
    2c8e:	c8 01       	movw	r24, r16
    2c90:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2c94:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2c98:	f5 cf       	rjmp	.-22     	; 0x2c84 <xQueueReceive+0xda>
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <prvUnlockQueue>
    2ca0:	0e 94 42 0c 	call	0x1884	; 0x1884 <xTaskResumeAll>
    2ca4:	c8 01       	movw	r24, r16
    2ca6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <prvIsQueueEmpty>
    2caa:	88 23       	and	r24, r24
    2cac:	59 f3       	breq	.-42     	; 0x2c84 <xQueueReceive+0xda>
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	1f 91       	pop	r17
    2cc0:	0f 91       	pop	r16
    2cc2:	ff 90       	pop	r15
    2cc4:	df 90       	pop	r13
    2cc6:	cf 90       	pop	r12
    2cc8:	bf 90       	pop	r11
    2cca:	af 90       	pop	r10
    2ccc:	08 95       	ret

00002cce <vQueueWaitForMessageRestricted>:
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	ec 01       	movw	r28, r24
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	0f 92       	push	r0
    2cda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cdc:	8f 3f       	cpi	r24, 0xFF	; 255
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <vQueueWaitForMessageRestricted+0x14>
    2ce0:	1d 8e       	std	Y+29, r1	; 0x1d
    2ce2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <vQueueWaitForMessageRestricted+0x1c>
    2ce8:	1e 8e       	std	Y+30, r1	; 0x1e
    2cea:	0f 90       	pop	r0
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cf0:	81 11       	cpse	r24, r1
    2cf2:	04 c0       	rjmp	.+8      	; 0x2cfc <vQueueWaitForMessageRestricted+0x2e>
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	41 96       	adiw	r24, 0x11	; 17
    2cf8:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <vTaskPlaceOnEventListRestricted>
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <prvUnlockQueue>

00002d06 <_ZN14FreqCountClass5beginEj>:
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <_ZN14FreqCountClass5beginEj+0x6>
    2d0a:	74 c0       	rjmp	.+232    	; 0x2df4 <L_130_loop+0xc>
    2d0c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <_ZL10gate_index+0x1>
    2d10:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <_ZL10gate_index>
    2d14:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <_ZL9count_msw+0x1>
    2d18:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <_ZL9count_msw>
    2d1c:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZL10count_prev>
    2d20:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZL10count_prev+0x1>
    2d24:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_ZL10count_prev+0x2>
    2d28:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <_ZL10count_prev+0x3>
    2d2c:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_ZL11count_ready>
    2d30:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2d34:	20 93 0a 04 	sts	0x040A, r18	; 0x80040a <_ZL10saveTCCR1A>
    2d38:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2d3c:	20 93 09 04 	sts	0x0409, r18	; 0x800409 <_ZL10saveTCCR1B>
    2d40:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2d44:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2d48:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2d4c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    2d50:	21 e0       	ldi	r18, 0x01	; 1
    2d52:	26 bb       	out	0x16, r18	; 22
    2d54:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    2d58:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2d5c:	20 93 08 04 	sts	0x0408, r18	; 0x800408 <_ZL10saveTCCR2A>
    2d60:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    2d64:	20 93 07 04 	sts	0x0407, r18	; 0x800407 <_ZL10saveTCCR2B>
    2d68:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    2d6c:	22 e0       	ldi	r18, 0x02	; 2
    2d6e:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2d72:	9c 01       	movw	r18, r24
    2d74:	27 70       	andi	r18, 0x07	; 7
    2d76:	33 27       	eor	r19, r19
    2d78:	23 2b       	or	r18, r19
    2d7a:	51 f4       	brne	.+20     	; 0x2d90 <_ZN14FreqCountClass5beginEj+0x8a>
    2d7c:	43 e0       	ldi	r20, 0x03	; 3
    2d7e:	96 95       	lsr	r25
    2d80:	87 95       	ror	r24
    2d82:	4a 95       	dec	r20
    2d84:	e1 f7       	brne	.-8      	; 0x2d7e <_ZN14FreqCountClass5beginEj+0x78>
    2d86:	2c e7       	ldi	r18, 0x7C	; 124
    2d88:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    2d8c:	27 e0       	ldi	r18, 0x07	; 7
    2d8e:	18 c0       	rjmp	.+48     	; 0x2dc0 <_ZN14FreqCountClass5beginEj+0xba>
    2d90:	9c 01       	movw	r18, r24
    2d92:	23 70       	andi	r18, 0x03	; 3
    2d94:	33 27       	eor	r19, r19
    2d96:	23 2b       	or	r18, r19
    2d98:	31 f4       	brne	.+12     	; 0x2da6 <_ZN14FreqCountClass5beginEj+0xa0>
    2d9a:	96 95       	lsr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	96 95       	lsr	r25
    2da0:	87 95       	ror	r24
    2da2:	29 ef       	ldi	r18, 0xF9	; 249
    2da4:	05 c0       	rjmp	.+10     	; 0x2db0 <_ZN14FreqCountClass5beginEj+0xaa>
    2da6:	80 fd       	sbrc	r24, 0
    2da8:	07 c0       	rjmp	.+14     	; 0x2db8 <_ZN14FreqCountClass5beginEj+0xb2>
    2daa:	96 95       	lsr	r25
    2dac:	87 95       	ror	r24
    2dae:	2c e7       	ldi	r18, 0x7C	; 124
    2db0:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    2db4:	26 e0       	ldi	r18, 0x06	; 6
    2db6:	04 c0       	rjmp	.+8      	; 0x2dc0 <_ZN14FreqCountClass5beginEj+0xba>
    2db8:	2c e7       	ldi	r18, 0x7C	; 124
    2dba:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    2dbe:	25 e0       	ldi	r18, 0x05	; 5
    2dc0:	20 93 06 04 	sts	0x0406, r18	; 0x800406 <_ZL11startTCCR2B>
    2dc4:	22 e0       	ldi	r18, 0x02	; 2
    2dc6:	27 bb       	out	0x17, r18	; 23
    2dc8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    2dcc:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <_ZL11gate_length+0x1>
    2dd0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <_ZL11gate_length>
    2dd4:	9f b7       	in	r25, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	23 bd       	out	0x23, r18	; 35
    2dda:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <_ZL11startTCCR2B>
    2dde:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    2de2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    2de6:	8b e0       	ldi	r24, 0x0B	; 11

00002de8 <L_130_loop>:
    2de8:	81 50       	subi	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <L_130_loop>
    2dec:	87 e0       	ldi	r24, 0x07	; 7
    2dee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    2df2:	9f bf       	out	0x3f, r25	; 63
    2df4:	08 95       	ret

00002df6 <_ZN14FreqCountClass9availableEv>:
    2df6:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <_ZL11count_ready>
    2dfa:	08 95       	ret

00002dfc <_ZN14FreqCountClass4readEv>:
    2dfc:	2f b7       	in	r18, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <_ZL12count_output>
    2e04:	70 91 fd 03 	lds	r23, 0x03FD	; 0x8003fd <_ZL12count_output+0x1>
    2e08:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <_ZL12count_output+0x2>
    2e0c:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <_ZL12count_output+0x3>
    2e10:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_ZL11count_ready>
    2e14:	2f bf       	out	0x3f, r18	; 63
    2e16:	08 95       	ret

00002e18 <_ZN14FreqCountClass3endEv>:
    2e18:	e1 eb       	ldi	r30, 0xB1	; 177
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	10 82       	st	Z, r1
    2e1e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    2e22:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_ZL10saveTCCR2A>
    2e26:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    2e2a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <_ZL10saveTCCR2B>
    2e2e:	80 83       	st	Z, r24
    2e30:	e1 e8       	ldi	r30, 0x81	; 129
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	10 82       	st	Z, r1
    2e36:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <_ZL10saveTCCR1A>
    2e3a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    2e3e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <_ZL10saveTCCR1B>
    2e42:	80 83       	st	Z, r24
    2e44:	08 95       	ret

00002e46 <__vector_7>:
    2e46:	1f 92       	push	r1
    2e48:	0f 92       	push	r0
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	0f 92       	push	r0
    2e4e:	11 24       	eor	r1, r1
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	2f 93       	push	r18
    2e56:	3f 93       	push	r19
    2e58:	4f 93       	push	r20
    2e5a:	5f 93       	push	r21
    2e5c:	6f 93       	push	r22
    2e5e:	7f 93       	push	r23
    2e60:	8f 93       	push	r24
    2e62:	9f 93       	push	r25
    2e64:	af 93       	push	r26
    2e66:	bf 93       	push	r27
    2e68:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    2e6c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2e70:	b0 9b       	sbis	0x16, 0	; 22
    2e72:	0b c0       	rjmp	.+22     	; 0x2e8a <__vector_7+0x44>
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	86 bb       	out	0x16, r24	; 22
    2e78:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZL9count_msw>
    2e7c:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZL9count_msw+0x1>
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <_ZL9count_msw+0x1>
    2e86:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <_ZL9count_msw>
    2e8a:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <_ZL10gate_index>
    2e8e:	90 91 f8 03 	lds	r25, 0x03F8	; 0x8003f8 <_ZL10gate_index+0x1>
    2e92:	01 96       	adiw	r24, 0x01	; 1
    2e94:	40 91 f9 03 	lds	r20, 0x03F9	; 0x8003f9 <_ZL11gate_length>
    2e98:	50 91 fa 03 	lds	r21, 0x03FA	; 0x8003fa <_ZL11gate_length+0x1>
    2e9c:	84 17       	cp	r24, r20
    2e9e:	95 07       	cpc	r25, r21
    2ea0:	98 f1       	brcs	.+102    	; 0x2f08 <__vector_7+0xc2>
    2ea2:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <_ZL10gate_index+0x1>
    2ea6:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <_ZL10gate_index>
    2eaa:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <_ZL9count_msw>
    2eae:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <_ZL9count_msw+0x1>
    2eb2:	a0 e0       	ldi	r26, 0x00	; 0
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	99 27       	eor	r25, r25
    2eba:	88 27       	eor	r24, r24
    2ebc:	82 0f       	add	r24, r18
    2ebe:	93 1f       	adc	r25, r19
    2ec0:	a1 1d       	adc	r26, r1
    2ec2:	b1 1d       	adc	r27, r1
    2ec4:	40 91 00 04 	lds	r20, 0x0400	; 0x800400 <_ZL10count_prev>
    2ec8:	50 91 01 04 	lds	r21, 0x0401	; 0x800401 <_ZL10count_prev+0x1>
    2ecc:	60 91 02 04 	lds	r22, 0x0402	; 0x800402 <_ZL10count_prev+0x2>
    2ed0:	70 91 03 04 	lds	r23, 0x0403	; 0x800403 <_ZL10count_prev+0x3>
    2ed4:	8c 01       	movw	r16, r24
    2ed6:	9d 01       	movw	r18, r26
    2ed8:	04 1b       	sub	r16, r20
    2eda:	15 0b       	sbc	r17, r21
    2edc:	26 0b       	sbc	r18, r22
    2ede:	37 0b       	sbc	r19, r23
    2ee0:	00 93 fc 03 	sts	0x03FC, r16	; 0x8003fc <_ZL12count_output>
    2ee4:	10 93 fd 03 	sts	0x03FD, r17	; 0x8003fd <_ZL12count_output+0x1>
    2ee8:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <_ZL12count_output+0x2>
    2eec:	30 93 ff 03 	sts	0x03FF, r19	; 0x8003ff <_ZL12count_output+0x3>
    2ef0:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <_ZL10count_prev>
    2ef4:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <_ZL10count_prev+0x1>
    2ef8:	a0 93 02 04 	sts	0x0402, r26	; 0x800402 <_ZL10count_prev+0x2>
    2efc:	b0 93 03 04 	sts	0x0403, r27	; 0x800403 <_ZL10count_prev+0x3>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_ZL11count_ready>
    2f06:	04 c0       	rjmp	.+8      	; 0x2f10 <__vector_7+0xca>
    2f08:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <_ZL10gate_index+0x1>
    2f0c:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <_ZL10gate_index>
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	0f 90       	pop	r0
    2f2e:	1f 90       	pop	r1
    2f30:	18 95       	reti

00002f32 <__divmodhi4>:
    2f32:	97 fb       	bst	r25, 7
    2f34:	07 2e       	mov	r0, r23
    2f36:	16 f4       	brtc	.+4      	; 0x2f3c <__divmodhi4+0xa>
    2f38:	00 94       	com	r0
    2f3a:	07 d0       	rcall	.+14     	; 0x2f4a <__divmodhi4_neg1>
    2f3c:	77 fd       	sbrc	r23, 7
    2f3e:	09 d0       	rcall	.+18     	; 0x2f52 <__divmodhi4_neg2>
    2f40:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <__udivmodhi4>
    2f44:	07 fc       	sbrc	r0, 7
    2f46:	05 d0       	rcall	.+10     	; 0x2f52 <__divmodhi4_neg2>
    2f48:	3e f4       	brtc	.+14     	; 0x2f58 <__divmodhi4_exit>

00002f4a <__divmodhi4_neg1>:
    2f4a:	90 95       	com	r25
    2f4c:	81 95       	neg	r24
    2f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f50:	08 95       	ret

00002f52 <__divmodhi4_neg2>:
    2f52:	70 95       	com	r23
    2f54:	61 95       	neg	r22
    2f56:	7f 4f       	sbci	r23, 0xFF	; 255

00002f58 <__divmodhi4_exit>:
    2f58:	08 95       	ret

00002f5a <__udivmodsi4>:
    2f5a:	a1 e2       	ldi	r26, 0x21	; 33
    2f5c:	1a 2e       	mov	r1, r26
    2f5e:	aa 1b       	sub	r26, r26
    2f60:	bb 1b       	sub	r27, r27
    2f62:	fd 01       	movw	r30, r26
    2f64:	0d c0       	rjmp	.+26     	; 0x2f80 <__udivmodsi4_ep>

00002f66 <__udivmodsi4_loop>:
    2f66:	aa 1f       	adc	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	ee 1f       	adc	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	a2 17       	cp	r26, r18
    2f70:	b3 07       	cpc	r27, r19
    2f72:	e4 07       	cpc	r30, r20
    2f74:	f5 07       	cpc	r31, r21
    2f76:	20 f0       	brcs	.+8      	; 0x2f80 <__udivmodsi4_ep>
    2f78:	a2 1b       	sub	r26, r18
    2f7a:	b3 0b       	sbc	r27, r19
    2f7c:	e4 0b       	sbc	r30, r20
    2f7e:	f5 0b       	sbc	r31, r21

00002f80 <__udivmodsi4_ep>:
    2f80:	66 1f       	adc	r22, r22
    2f82:	77 1f       	adc	r23, r23
    2f84:	88 1f       	adc	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	1a 94       	dec	r1
    2f8a:	69 f7       	brne	.-38     	; 0x2f66 <__udivmodsi4_loop>
    2f8c:	60 95       	com	r22
    2f8e:	70 95       	com	r23
    2f90:	80 95       	com	r24
    2f92:	90 95       	com	r25
    2f94:	9b 01       	movw	r18, r22
    2f96:	ac 01       	movw	r20, r24
    2f98:	bd 01       	movw	r22, r26
    2f9a:	cf 01       	movw	r24, r30
    2f9c:	08 95       	ret

00002f9e <__divmodsi4>:
    2f9e:	05 2e       	mov	r0, r21
    2fa0:	97 fb       	bst	r25, 7
    2fa2:	1e f4       	brtc	.+6      	; 0x2faa <__divmodsi4+0xc>
    2fa4:	00 94       	com	r0
    2fa6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <__negsi2>
    2faa:	57 fd       	sbrc	r21, 7
    2fac:	07 d0       	rcall	.+14     	; 0x2fbc <__divmodsi4_neg2>
    2fae:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__udivmodsi4>
    2fb2:	07 fc       	sbrc	r0, 7
    2fb4:	03 d0       	rcall	.+6      	; 0x2fbc <__divmodsi4_neg2>
    2fb6:	4e f4       	brtc	.+18     	; 0x2fca <__divmodsi4_exit>
    2fb8:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__negsi2>

00002fbc <__divmodsi4_neg2>:
    2fbc:	50 95       	com	r21
    2fbe:	40 95       	com	r20
    2fc0:	30 95       	com	r19
    2fc2:	21 95       	neg	r18
    2fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fc8:	5f 4f       	sbci	r21, 0xFF	; 255

00002fca <__divmodsi4_exit>:
    2fca:	08 95       	ret

00002fcc <__negsi2>:
    2fcc:	90 95       	com	r25
    2fce:	80 95       	com	r24
    2fd0:	70 95       	com	r23
    2fd2:	61 95       	neg	r22
    2fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    2fda:	08 95       	ret

00002fdc <__tablejump2__>:
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	05 90       	lpm	r0, Z+
    2fe2:	f4 91       	lpm	r31, Z
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	09 94       	ijmp

00002fe8 <__muluhisi3>:
    2fe8:	0e 94 13 18 	call	0x3026	; 0x3026 <__umulhisi3>
    2fec:	a5 9f       	mul	r26, r21
    2fee:	90 0d       	add	r25, r0
    2ff0:	b4 9f       	mul	r27, r20
    2ff2:	90 0d       	add	r25, r0
    2ff4:	a4 9f       	mul	r26, r20
    2ff6:	80 0d       	add	r24, r0
    2ff8:	91 1d       	adc	r25, r1
    2ffa:	11 24       	eor	r1, r1
    2ffc:	08 95       	ret

00002ffe <__udivmodhi4>:
    2ffe:	aa 1b       	sub	r26, r26
    3000:	bb 1b       	sub	r27, r27
    3002:	51 e1       	ldi	r21, 0x11	; 17
    3004:	07 c0       	rjmp	.+14     	; 0x3014 <__udivmodhi4_ep>

00003006 <__udivmodhi4_loop>:
    3006:	aa 1f       	adc	r26, r26
    3008:	bb 1f       	adc	r27, r27
    300a:	a6 17       	cp	r26, r22
    300c:	b7 07       	cpc	r27, r23
    300e:	10 f0       	brcs	.+4      	; 0x3014 <__udivmodhi4_ep>
    3010:	a6 1b       	sub	r26, r22
    3012:	b7 0b       	sbc	r27, r23

00003014 <__udivmodhi4_ep>:
    3014:	88 1f       	adc	r24, r24
    3016:	99 1f       	adc	r25, r25
    3018:	5a 95       	dec	r21
    301a:	a9 f7       	brne	.-22     	; 0x3006 <__udivmodhi4_loop>
    301c:	80 95       	com	r24
    301e:	90 95       	com	r25
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	08 95       	ret

00003026 <__umulhisi3>:
    3026:	a2 9f       	mul	r26, r18
    3028:	b0 01       	movw	r22, r0
    302a:	b3 9f       	mul	r27, r19
    302c:	c0 01       	movw	r24, r0
    302e:	a3 9f       	mul	r26, r19
    3030:	70 0d       	add	r23, r0
    3032:	81 1d       	adc	r24, r1
    3034:	11 24       	eor	r1, r1
    3036:	91 1d       	adc	r25, r1
    3038:	b2 9f       	mul	r27, r18
    303a:	70 0d       	add	r23, r0
    303c:	81 1d       	adc	r24, r1
    303e:	11 24       	eor	r1, r1
    3040:	91 1d       	adc	r25, r1
    3042:	08 95       	ret

00003044 <malloc>:
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	82 30       	cpi	r24, 0x02	; 2
    304e:	91 05       	cpc	r25, r1
    3050:	10 f4       	brcc	.+4      	; 0x3056 <malloc+0x12>
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <__flp>
    305a:	f0 91 0e 04 	lds	r31, 0x040E	; 0x80040e <__flp+0x1>
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	a0 e0       	ldi	r26, 0x00	; 0
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	30 97       	sbiw	r30, 0x00	; 0
    3068:	19 f1       	breq	.+70     	; 0x30b0 <malloc+0x6c>
    306a:	40 81       	ld	r20, Z
    306c:	51 81       	ldd	r21, Z+1	; 0x01
    306e:	02 81       	ldd	r16, Z+2	; 0x02
    3070:	13 81       	ldd	r17, Z+3	; 0x03
    3072:	48 17       	cp	r20, r24
    3074:	59 07       	cpc	r21, r25
    3076:	c8 f0       	brcs	.+50     	; 0x30aa <malloc+0x66>
    3078:	84 17       	cp	r24, r20
    307a:	95 07       	cpc	r25, r21
    307c:	69 f4       	brne	.+26     	; 0x3098 <malloc+0x54>
    307e:	10 97       	sbiw	r26, 0x00	; 0
    3080:	31 f0       	breq	.+12     	; 0x308e <malloc+0x4a>
    3082:	12 96       	adiw	r26, 0x02	; 2
    3084:	0c 93       	st	X, r16
    3086:	12 97       	sbiw	r26, 0x02	; 2
    3088:	13 96       	adiw	r26, 0x03	; 3
    308a:	1c 93       	st	X, r17
    308c:	27 c0       	rjmp	.+78     	; 0x30dc <malloc+0x98>
    308e:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <__flp>
    3092:	10 93 0e 04 	sts	0x040E, r17	; 0x80040e <__flp+0x1>
    3096:	22 c0       	rjmp	.+68     	; 0x30dc <malloc+0x98>
    3098:	21 15       	cp	r18, r1
    309a:	31 05       	cpc	r19, r1
    309c:	19 f0       	breq	.+6      	; 0x30a4 <malloc+0x60>
    309e:	42 17       	cp	r20, r18
    30a0:	53 07       	cpc	r21, r19
    30a2:	18 f4       	brcc	.+6      	; 0x30aa <malloc+0x66>
    30a4:	9a 01       	movw	r18, r20
    30a6:	bd 01       	movw	r22, r26
    30a8:	ef 01       	movw	r28, r30
    30aa:	df 01       	movw	r26, r30
    30ac:	f8 01       	movw	r30, r16
    30ae:	db cf       	rjmp	.-74     	; 0x3066 <malloc+0x22>
    30b0:	21 15       	cp	r18, r1
    30b2:	31 05       	cpc	r19, r1
    30b4:	f9 f0       	breq	.+62     	; 0x30f4 <malloc+0xb0>
    30b6:	28 1b       	sub	r18, r24
    30b8:	39 0b       	sbc	r19, r25
    30ba:	24 30       	cpi	r18, 0x04	; 4
    30bc:	31 05       	cpc	r19, r1
    30be:	80 f4       	brcc	.+32     	; 0x30e0 <malloc+0x9c>
    30c0:	8a 81       	ldd	r24, Y+2	; 0x02
    30c2:	9b 81       	ldd	r25, Y+3	; 0x03
    30c4:	61 15       	cp	r22, r1
    30c6:	71 05       	cpc	r23, r1
    30c8:	21 f0       	breq	.+8      	; 0x30d2 <malloc+0x8e>
    30ca:	fb 01       	movw	r30, r22
    30cc:	93 83       	std	Z+3, r25	; 0x03
    30ce:	82 83       	std	Z+2, r24	; 0x02
    30d0:	04 c0       	rjmp	.+8      	; 0x30da <malloc+0x96>
    30d2:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <__flp+0x1>
    30d6:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <__flp>
    30da:	fe 01       	movw	r30, r28
    30dc:	32 96       	adiw	r30, 0x02	; 2
    30de:	44 c0       	rjmp	.+136    	; 0x3168 <malloc+0x124>
    30e0:	fe 01       	movw	r30, r28
    30e2:	e2 0f       	add	r30, r18
    30e4:	f3 1f       	adc	r31, r19
    30e6:	81 93       	st	Z+, r24
    30e8:	91 93       	st	Z+, r25
    30ea:	22 50       	subi	r18, 0x02	; 2
    30ec:	31 09       	sbc	r19, r1
    30ee:	39 83       	std	Y+1, r19	; 0x01
    30f0:	28 83       	st	Y, r18
    30f2:	3a c0       	rjmp	.+116    	; 0x3168 <malloc+0x124>
    30f4:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <__brkval>
    30f8:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <__brkval+0x1>
    30fc:	23 2b       	or	r18, r19
    30fe:	41 f4       	brne	.+16     	; 0x3110 <malloc+0xcc>
    3100:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3104:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3108:	30 93 0c 04 	sts	0x040C, r19	; 0x80040c <__brkval+0x1>
    310c:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <__brkval>
    3110:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3114:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3118:	21 15       	cp	r18, r1
    311a:	31 05       	cpc	r19, r1
    311c:	41 f4       	brne	.+16     	; 0x312e <malloc+0xea>
    311e:	2d b7       	in	r18, 0x3d	; 61
    3120:	3e b7       	in	r19, 0x3e	; 62
    3122:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3126:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    312a:	24 1b       	sub	r18, r20
    312c:	35 0b       	sbc	r19, r21
    312e:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <__brkval>
    3132:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <__brkval+0x1>
    3136:	e2 17       	cp	r30, r18
    3138:	f3 07       	cpc	r31, r19
    313a:	a0 f4       	brcc	.+40     	; 0x3164 <malloc+0x120>
    313c:	2e 1b       	sub	r18, r30
    313e:	3f 0b       	sbc	r19, r31
    3140:	28 17       	cp	r18, r24
    3142:	39 07       	cpc	r19, r25
    3144:	78 f0       	brcs	.+30     	; 0x3164 <malloc+0x120>
    3146:	ac 01       	movw	r20, r24
    3148:	4e 5f       	subi	r20, 0xFE	; 254
    314a:	5f 4f       	sbci	r21, 0xFF	; 255
    314c:	24 17       	cp	r18, r20
    314e:	35 07       	cpc	r19, r21
    3150:	48 f0       	brcs	.+18     	; 0x3164 <malloc+0x120>
    3152:	4e 0f       	add	r20, r30
    3154:	5f 1f       	adc	r21, r31
    3156:	50 93 0c 04 	sts	0x040C, r21	; 0x80040c <__brkval+0x1>
    315a:	40 93 0b 04 	sts	0x040B, r20	; 0x80040b <__brkval>
    315e:	81 93       	st	Z+, r24
    3160:	91 93       	st	Z+, r25
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <malloc+0x124>
    3164:	e0 e0       	ldi	r30, 0x00	; 0
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	cf 01       	movw	r24, r30
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	08 95       	ret

00003174 <free>:
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	00 97       	sbiw	r24, 0x00	; 0
    317a:	09 f4       	brne	.+2      	; 0x317e <free+0xa>
    317c:	81 c0       	rjmp	.+258    	; 0x3280 <free+0x10c>
    317e:	fc 01       	movw	r30, r24
    3180:	32 97       	sbiw	r30, 0x02	; 2
    3182:	13 82       	std	Z+3, r1	; 0x03
    3184:	12 82       	std	Z+2, r1	; 0x02
    3186:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <__flp>
    318a:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <__flp+0x1>
    318e:	10 97       	sbiw	r26, 0x00	; 0
    3190:	81 f4       	brne	.+32     	; 0x31b2 <free+0x3e>
    3192:	20 81       	ld	r18, Z
    3194:	31 81       	ldd	r19, Z+1	; 0x01
    3196:	82 0f       	add	r24, r18
    3198:	93 1f       	adc	r25, r19
    319a:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <__brkval>
    319e:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <__brkval+0x1>
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	51 f5       	brne	.+84     	; 0x31fc <free+0x88>
    31a8:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <__brkval+0x1>
    31ac:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <__brkval>
    31b0:	67 c0       	rjmp	.+206    	; 0x3280 <free+0x10c>
    31b2:	ed 01       	movw	r28, r26
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	ce 17       	cp	r28, r30
    31ba:	df 07       	cpc	r29, r31
    31bc:	40 f4       	brcc	.+16     	; 0x31ce <free+0x5a>
    31be:	4a 81       	ldd	r20, Y+2	; 0x02
    31c0:	5b 81       	ldd	r21, Y+3	; 0x03
    31c2:	9e 01       	movw	r18, r28
    31c4:	41 15       	cp	r20, r1
    31c6:	51 05       	cpc	r21, r1
    31c8:	f1 f0       	breq	.+60     	; 0x3206 <free+0x92>
    31ca:	ea 01       	movw	r28, r20
    31cc:	f5 cf       	rjmp	.-22     	; 0x31b8 <free+0x44>
    31ce:	d3 83       	std	Z+3, r29	; 0x03
    31d0:	c2 83       	std	Z+2, r28	; 0x02
    31d2:	40 81       	ld	r20, Z
    31d4:	51 81       	ldd	r21, Z+1	; 0x01
    31d6:	84 0f       	add	r24, r20
    31d8:	95 1f       	adc	r25, r21
    31da:	c8 17       	cp	r28, r24
    31dc:	d9 07       	cpc	r29, r25
    31de:	59 f4       	brne	.+22     	; 0x31f6 <free+0x82>
    31e0:	88 81       	ld	r24, Y
    31e2:	99 81       	ldd	r25, Y+1	; 0x01
    31e4:	84 0f       	add	r24, r20
    31e6:	95 1f       	adc	r25, r21
    31e8:	02 96       	adiw	r24, 0x02	; 2
    31ea:	91 83       	std	Z+1, r25	; 0x01
    31ec:	80 83       	st	Z, r24
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	93 83       	std	Z+3, r25	; 0x03
    31f4:	82 83       	std	Z+2, r24	; 0x02
    31f6:	21 15       	cp	r18, r1
    31f8:	31 05       	cpc	r19, r1
    31fa:	29 f4       	brne	.+10     	; 0x3206 <free+0x92>
    31fc:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <__flp+0x1>
    3200:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <__flp>
    3204:	3d c0       	rjmp	.+122    	; 0x3280 <free+0x10c>
    3206:	e9 01       	movw	r28, r18
    3208:	fb 83       	std	Y+3, r31	; 0x03
    320a:	ea 83       	std	Y+2, r30	; 0x02
    320c:	49 91       	ld	r20, Y+
    320e:	59 91       	ld	r21, Y+
    3210:	c4 0f       	add	r28, r20
    3212:	d5 1f       	adc	r29, r21
    3214:	ec 17       	cp	r30, r28
    3216:	fd 07       	cpc	r31, r29
    3218:	61 f4       	brne	.+24     	; 0x3232 <free+0xbe>
    321a:	80 81       	ld	r24, Z
    321c:	91 81       	ldd	r25, Z+1	; 0x01
    321e:	84 0f       	add	r24, r20
    3220:	95 1f       	adc	r25, r21
    3222:	02 96       	adiw	r24, 0x02	; 2
    3224:	e9 01       	movw	r28, r18
    3226:	99 83       	std	Y+1, r25	; 0x01
    3228:	88 83       	st	Y, r24
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	9b 83       	std	Y+3, r25	; 0x03
    3230:	8a 83       	std	Y+2, r24	; 0x02
    3232:	e0 e0       	ldi	r30, 0x00	; 0
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	12 96       	adiw	r26, 0x02	; 2
    3238:	8d 91       	ld	r24, X+
    323a:	9c 91       	ld	r25, X
    323c:	13 97       	sbiw	r26, 0x03	; 3
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	19 f0       	breq	.+6      	; 0x3248 <free+0xd4>
    3242:	fd 01       	movw	r30, r26
    3244:	dc 01       	movw	r26, r24
    3246:	f7 cf       	rjmp	.-18     	; 0x3236 <free+0xc2>
    3248:	8d 91       	ld	r24, X+
    324a:	9c 91       	ld	r25, X
    324c:	11 97       	sbiw	r26, 0x01	; 1
    324e:	9d 01       	movw	r18, r26
    3250:	2e 5f       	subi	r18, 0xFE	; 254
    3252:	3f 4f       	sbci	r19, 0xFF	; 255
    3254:	82 0f       	add	r24, r18
    3256:	93 1f       	adc	r25, r19
    3258:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <__brkval>
    325c:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <__brkval+0x1>
    3260:	28 17       	cp	r18, r24
    3262:	39 07       	cpc	r19, r25
    3264:	69 f4       	brne	.+26     	; 0x3280 <free+0x10c>
    3266:	30 97       	sbiw	r30, 0x00	; 0
    3268:	29 f4       	brne	.+10     	; 0x3274 <free+0x100>
    326a:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <__flp+0x1>
    326e:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <__flp>
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <free+0x104>
    3274:	13 82       	std	Z+3, r1	; 0x03
    3276:	12 82       	std	Z+2, r1	; 0x02
    3278:	b0 93 0c 04 	sts	0x040C, r27	; 0x80040c <__brkval+0x1>
    327c:	a0 93 0b 04 	sts	0x040B, r26	; 0x80040b <__brkval>
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	08 95       	ret

00003286 <memcpy>:
    3286:	fb 01       	movw	r30, r22
    3288:	dc 01       	movw	r26, r24
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <memcpy+0xa>
    328c:	01 90       	ld	r0, Z+
    328e:	0d 92       	st	X+, r0
    3290:	41 50       	subi	r20, 0x01	; 1
    3292:	50 40       	sbci	r21, 0x00	; 0
    3294:	d8 f7       	brcc	.-10     	; 0x328c <memcpy+0x6>
    3296:	08 95       	ret

00003298 <memset>:
    3298:	dc 01       	movw	r26, r24
    329a:	01 c0       	rjmp	.+2      	; 0x329e <memset+0x6>
    329c:	6d 93       	st	X+, r22
    329e:	41 50       	subi	r20, 0x01	; 1
    32a0:	50 40       	sbci	r21, 0x00	; 0
    32a2:	e0 f7       	brcc	.-8      	; 0x329c <memset+0x4>
    32a4:	08 95       	ret

000032a6 <__do_global_dtors>:
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    32a8:	c8 e7       	ldi	r28, 0x78	; 120
    32aa:	d0 e0       	ldi	r29, 0x00	; 0
    32ac:	04 c0       	rjmp	.+8      	; 0x32b6 <__do_global_dtors+0x10>
    32ae:	fe 01       	movw	r30, r28
    32b0:	0e 94 ee 17 	call	0x2fdc	; 0x2fdc <__tablejump2__>
    32b4:	21 96       	adiw	r28, 0x01	; 1
    32b6:	c9 37       	cpi	r28, 0x79	; 121
    32b8:	d1 07       	cpc	r29, r17
    32ba:	c9 f7       	brne	.-14     	; 0x32ae <__do_global_dtors+0x8>
    32bc:	f8 94       	cli

000032be <__stop_program>:
    32be:	ff cf       	rjmp	.-2      	; 0x32be <__stop_program>
