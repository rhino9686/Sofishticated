
lil_fish_tanks_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b2  00800100  00004f44  00004fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002eb  008002b2  008002b2  0000518a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000518a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000051bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000aa8  00000000  00000000  00005200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016389  00000000  00000000  00005ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042fb  00000000  00000000  0001c031  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072a3  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002098  00000000  00000000  000275d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005144  00000000  00000000  00029668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c4be  00000000  00000000  0002e7ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a00  00000000  00000000  0003ac6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__dtors_end>
       4:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__vector_1>
       8:	0c 94 81 22 	jmp	0x4502	; 0x4502 <__vector_2>
       c:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_3>
      10:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_3>
      14:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_3>
      18:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_6>
      1c:	0c 94 49 25 	jmp	0x4a92	; 0x4a92 <__vector_7>
      20:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      24:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      28:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      2c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      30:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      3c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      40:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__vector_16>
      44:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      48:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__vector_18>
      4c:	0c 94 9d 1f 	jmp	0x3f3a	; 0x3f3a <__vector_19>
      50:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      54:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      58:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      5c:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      60:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      64:	0c 94 b3 00 	jmp	0x166	; 0x166 <__bad_interrupt>
      68:	6a 17       	cp	r22, r26
      6a:	6a 17       	cp	r22, r26
      6c:	6a 17       	cp	r22, r26
      6e:	a9 17       	cp	r26, r25
      70:	94 17       	cp	r25, r20
      72:	a3 17       	cp	r26, r19
      74:	6a 17       	cp	r22, r26
      76:	6a 17       	cp	r22, r26
      78:	a9 17       	cp	r26, r25
      7a:	94 17       	cp	r25, r20

0000007c <__trampolines_end>:
      7c:	0a 46       	sbci	r16, 0x6A	; 106
      7e:	6f 75       	andi	r22, 0x5F	; 95
      80:	6e 64       	ori	r22, 0x4E	; 78
      82:	20 4d       	sbci	r18, 0xD0	; 208
      84:	61 74       	andi	r22, 0x41	; 65
      86:	63 68       	ori	r22, 0x83	; 131
      88:	69 6e       	ori	r22, 0xE9	; 233
      8a:	67 20       	and	r6, r7
      8c:	43 6f       	ori	r20, 0xF3	; 243
      8e:	6c 6f       	ori	r22, 0xFC	; 252
      90:	72 00       	.word	0x0072	; ????

00000092 <_ZL15dscrc2x16_table>:
      92:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      a2:	00 9d 23 be 46 db 65 f8 8c 11 af 32 ca 57 e9 74     ..#.F.e....2.W.t

000000b2 <digital_pin_to_timer_PGM>:
      b2:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c2:	00 00 00 00                                         ....

000000c6 <digital_pin_to_bit_mask_PGM>:
      c6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d6:	04 08 10 20                                         ... 

000000da <digital_pin_to_port_PGM>:
      da:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ea:	03 03 03 03                                         ....

000000ee <port_to_input_PGM>:
      ee:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000f8 <port_to_output_PGM>:
      f8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000102 <port_to_mode_PGM>:
     102:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000010c <__ctors_start>:
     10c:	59 07       	cpc	r21, r25
     10e:	6e 0a       	sbc	r6, r30
     110:	cd 1f       	adc	r28, r29

00000112 <__ctors_end>:
     112:	6c 07       	cpc	r22, r28
     114:	72 0a       	sbc	r7, r18

00000116 <__dtors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	12 e0       	ldi	r17, 0x02	; 2
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e4 e4       	ldi	r30, 0x44	; 68
     12a:	ff e4       	ldi	r31, 0x4F	; 79
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a2 3b       	cpi	r26, 0xB2	; 178
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	25 e0       	ldi	r18, 0x05	; 5
     13a:	a2 eb       	ldi	r26, 0xB2	; 178
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	ad 39       	cpi	r26, 0x9D	; 157
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>

00000148 <__do_global_ctors>:
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	c9 e8       	ldi	r28, 0x89	; 137
     14c:	d0 e0       	ldi	r29, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <__do_global_ctors+0x10>
     150:	21 97       	sbiw	r28, 0x01	; 1
     152:	fe 01       	movw	r30, r28
     154:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <__tablejump2__>
     158:	c6 38       	cpi	r28, 0x86	; 134
     15a:	d1 07       	cpc	r29, r17
     15c:	c9 f7       	brne	.-14     	; 0x150 <__do_global_ctors+0x8>
     15e:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <main>
     162:	0c 94 95 27 	jmp	0x4f2a	; 0x4f2a <__do_global_dtors>

00000166 <__bad_interrupt>:
     166:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016a <_ZN11EEPROMClass4readEi.isra.0>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     16a:	0c 94 7f 27 	jmp	0x4efe	; 0x4efe <eeprom_read_byte>

0000016e <_ZN10DFRobot_PHC1Ev>:
#define EEPROM_read(address, p)  {int i = 0; byte *pp = (byte*)&(p);for(; i < sizeof(p); i++) pp[i]=EEPROM.read(address+i);}

#define PHVALUEADDR 0x00    //the start address of the pH calibration parameters stored in the EEPROM


DFRobot_PH::DFRobot_PH()
     16e:	fc 01       	movw	r30, r24
{
    this->_temperature    = 25.0;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a8 ec       	ldi	r26, 0xC8	; 200
     176:	b1 e4       	ldi	r27, 0x41	; 65
     178:	80 8b       	std	Z+16, r24	; 0x10
     17a:	91 8b       	std	Z+17, r25	; 0x11
     17c:	a2 8b       	std	Z+18, r26	; 0x12
     17e:	b3 8b       	std	Z+19, r27	; 0x13
    this->_phValue        = 7.0;
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	a0 ee       	ldi	r26, 0xE0	; 224
     186:	b0 e4       	ldi	r27, 0x40	; 64
     188:	80 83       	st	Z, r24
     18a:	91 83       	std	Z+1, r25	; 0x01
     18c:	a2 83       	std	Z+2, r26	; 0x02
     18e:	b3 83       	std	Z+3, r27	; 0x03
    this->_acidVoltage    = 2032.44;    //buffer solution 4.0 at 25C
     190:	84 e1       	ldi	r24, 0x14	; 20
     192:	9e e0       	ldi	r25, 0x0E	; 14
     194:	ae ef       	ldi	r26, 0xFE	; 254
     196:	b4 e4       	ldi	r27, 0x44	; 68
     198:	84 83       	std	Z+4, r24	; 0x04
     19a:	95 83       	std	Z+5, r25	; 0x05
     19c:	a6 83       	std	Z+6, r26	; 0x06
     19e:	b7 83       	std	Z+7, r27	; 0x07
    this->_neutralVoltage = 1500.0;     //buffer solution 7.0 at 25C
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	90 e8       	ldi	r25, 0x80	; 128
     1a4:	ab eb       	ldi	r26, 0xBB	; 187
     1a6:	b4 e4       	ldi	r27, 0x44	; 68
     1a8:	80 87       	std	Z+8, r24	; 0x08
     1aa:	91 87       	std	Z+9, r25	; 0x09
     1ac:	a2 87       	std	Z+10, r26	; 0x0a
     1ae:	b3 87       	std	Z+11, r27	; 0x0b
    this->_voltage        = 1500.0;
     1b0:	84 87       	std	Z+12, r24	; 0x0c
     1b2:	95 87       	std	Z+13, r25	; 0x0d
     1b4:	a6 87       	std	Z+14, r26	; 0x0e
     1b6:	b7 87       	std	Z+15, r27	; 0x0f
     1b8:	08 95       	ret

000001ba <_ZN10DFRobot_PHD1Ev>:
}

DFRobot_PH::~DFRobot_PH()
     1ba:	08 95       	ret

000001bc <_ZN10DFRobot_PH5beginEv>:
{

}

void DFRobot_PH::begin()
{
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
    EEPROM_read(PHVALUEADDR, this->_neutralVoltage);  //load the neutral (pH = 7.0)voltage of the pH board from the EEPROM
     1ce:	7c 01       	movw	r14, r24
     1d0:	88 e0       	ldi	r24, 0x08	; 8
     1d2:	e8 0e       	add	r14, r24
     1d4:	f1 1c       	adc	r15, r1
     1d6:	67 01       	movw	r12, r14
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	c8 01       	movw	r24, r16
     1de:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     1e2:	f6 01       	movw	r30, r12
     1e4:	81 93       	st	Z+, r24
     1e6:	6f 01       	movw	r12, r30
     1e8:	0f 5f       	subi	r16, 0xFF	; 255
     1ea:	1f 4f       	sbci	r17, 0xFF	; 255
     1ec:	04 30       	cpi	r16, 0x04	; 4
     1ee:	11 05       	cpc	r17, r1
     1f0:	a9 f7       	brne	.-22     	; 0x1dc <_ZN10DFRobot_PH5beginEv+0x20>
    Serial.print("_neutralVoltage:");
     1f2:	60 e4       	ldi	r22, 0x40	; 64
     1f4:	71 e0       	ldi	r23, 0x01	; 1
     1f6:	8f ed       	ldi	r24, 0xDF	; 223
     1f8:	94 e0       	ldi	r25, 0x04	; 4
     1fa:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
    Serial.println(this->_neutralVoltage);
     1fe:	48 85       	ldd	r20, Y+8	; 0x08
     200:	59 85       	ldd	r21, Y+9	; 0x09
     202:	6a 85       	ldd	r22, Y+10	; 0x0a
     204:	7b 85       	ldd	r23, Y+11	; 0x0b
     206:	22 e0       	ldi	r18, 0x02	; 2
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	8f ed       	ldi	r24, 0xDF	; 223
     20c:	94 e0       	ldi	r25, 0x04	; 4
     20e:	0e 94 27 22 	call	0x444e	; 0x444e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR)==0xFF && EEPROM.read(PHVALUEADDR+1)==0xFF && EEPROM.read(PHVALUEADDR+2)==0xFF && EEPROM.read(PHVALUEADDR+3)==0xFF){
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     21a:	8f 3f       	cpi	r24, 0xFF	; 255
     21c:	39 f5       	brne	.+78     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	09 f5       	brne	.+66     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     232:	8f 3f       	cpi	r24, 0xFF	; 255
     234:	d9 f4       	brne	.+54     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
     236:	83 e0       	ldi	r24, 0x03	; 3
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     23e:	8f 3f       	cpi	r24, 0xFF	; 255
     240:	a9 f4       	brne	.+42     	; 0x26c <_ZN10DFRobot_PH5beginEv+0xb0>
        this->_neutralVoltage = 1500.0;  // new EEPROM, write typical voltage
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e8       	ldi	r25, 0x80	; 128
     246:	ab eb       	ldi	r26, 0xBB	; 187
     248:	b4 e4       	ldi	r27, 0x44	; 68
     24a:	88 87       	std	Y+8, r24	; 0x08
     24c:	99 87       	std	Y+9, r25	; 0x09
     24e:	aa 87       	std	Y+10, r26	; 0x0a
     250:	bb 87       	std	Y+11, r27	; 0x0b
        EEPROM_write(PHVALUEADDR, this->_neutralVoltage);
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	f7 01       	movw	r30, r14
     258:	61 91       	ld	r22, Z+
     25a:	7f 01       	movw	r14, r30
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     25c:	c8 01       	movw	r24, r16
     25e:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eeprom_write_byte>
     262:	0f 5f       	subi	r16, 0xFF	; 255
     264:	1f 4f       	sbci	r17, 0xFF	; 255
     266:	04 30       	cpi	r16, 0x04	; 4
     268:	11 05       	cpc	r17, r1
     26a:	a9 f7       	brne	.-22     	; 0x256 <_ZN10DFRobot_PH5beginEv+0x9a>
    }
    EEPROM_read(PHVALUEADDR+4, this->_acidVoltage);//load the acid (pH = 4.0) voltage of the pH board from the EEPROM
     26c:	7e 01       	movw	r14, r28
     26e:	f4 e0       	ldi	r31, 0x04	; 4
     270:	ef 0e       	add	r14, r31
     272:	f1 1c       	adc	r15, r1
     274:	67 01       	movw	r12, r14
     276:	04 e0       	ldi	r16, 0x04	; 4
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	c8 01       	movw	r24, r16
     27c:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     280:	f6 01       	movw	r30, r12
     282:	81 93       	st	Z+, r24
     284:	6f 01       	movw	r12, r30
     286:	0f 5f       	subi	r16, 0xFF	; 255
     288:	1f 4f       	sbci	r17, 0xFF	; 255
     28a:	08 30       	cpi	r16, 0x08	; 8
     28c:	11 05       	cpc	r17, r1
     28e:	a9 f7       	brne	.-22     	; 0x27a <_ZN10DFRobot_PH5beginEv+0xbe>
    Serial.print("_acidVoltage:");
     290:	61 e5       	ldi	r22, 0x51	; 81
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	8f ed       	ldi	r24, 0xDF	; 223
     296:	94 e0       	ldi	r25, 0x04	; 4
     298:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
    Serial.println(this->_acidVoltage);
     29c:	4c 81       	ldd	r20, Y+4	; 0x04
     29e:	5d 81       	ldd	r21, Y+5	; 0x05
     2a0:	6e 81       	ldd	r22, Y+6	; 0x06
     2a2:	7f 81       	ldd	r23, Y+7	; 0x07
     2a4:	22 e0       	ldi	r18, 0x02	; 2
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	8f ed       	ldi	r24, 0xDF	; 223
     2aa:	94 e0       	ldi	r25, 0x04	; 4
     2ac:	0e 94 27 22 	call	0x444e	; 0x444e <_ZN5Print7printlnEdi>
    if(EEPROM.read(PHVALUEADDR+4)==0xFF && EEPROM.read(PHVALUEADDR+5)==0xFF && EEPROM.read(PHVALUEADDR+6)==0xFF && EEPROM.read(PHVALUEADDR+7)==0xFF){
     2b0:	84 e0       	ldi	r24, 0x04	; 4
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2b8:	8f 3f       	cpi	r24, 0xFF	; 255
     2ba:	31 f5       	brne	.+76     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2c4:	8f 3f       	cpi	r24, 0xFF	; 255
     2c6:	01 f5       	brne	.+64     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2c8:	86 e0       	ldi	r24, 0x06	; 6
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2d0:	8f 3f       	cpi	r24, 0xFF	; 255
     2d2:	d1 f4       	brne	.+52     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
     2d4:	87 e0       	ldi	r24, 0x07	; 7
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN11EEPROMClass4readEi.isra.0>
     2dc:	8f 3f       	cpi	r24, 0xFF	; 255
     2de:	a1 f4       	brne	.+40     	; 0x308 <_ZN10DFRobot_PH5beginEv+0x14c>
        this->_acidVoltage = 2032.44;  // new EEPROM, write typical voltage
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	9e e0       	ldi	r25, 0x0E	; 14
     2e4:	ae ef       	ldi	r26, 0xFE	; 254
     2e6:	b4 e4       	ldi	r27, 0x44	; 68
     2e8:	8c 83       	std	Y+4, r24	; 0x04
     2ea:	9d 83       	std	Y+5, r25	; 0x05
     2ec:	ae 83       	std	Y+6, r26	; 0x06
     2ee:	bf 83       	std	Y+7, r27	; 0x07
     2f0:	c4 e0       	ldi	r28, 0x04	; 4
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
        EEPROM_write(PHVALUEADDR+4, this->_acidVoltage);
     2f4:	f7 01       	movw	r30, r14
     2f6:	61 91       	ld	r22, Z+
     2f8:	7f 01       	movw	r14, r30
     2fa:	ce 01       	movw	r24, r28
     2fc:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <eeprom_write_byte>
     300:	21 96       	adiw	r28, 0x01	; 1
     302:	c8 30       	cpi	r28, 0x08	; 8
     304:	d1 05       	cpc	r29, r1
     306:	b1 f7       	brne	.-20     	; 0x2f4 <_ZN10DFRobot_PH5beginEv+0x138>
    }
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	08 95       	ret

0000031a <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     31a:	61 15       	cp	r22, r1
     31c:	71 05       	cpc	r23, r1
     31e:	79 f0       	breq	.+30     	; 0x33e <_ZN5Print5writeEPKc+0x24>
      return write((const uint8_t *)str, strlen(str));
     320:	fb 01       	movw	r30, r22
     322:	01 90       	ld	r0, Z+
     324:	00 20       	and	r0, r0
     326:	e9 f7       	brne	.-6      	; 0x322 <_ZN5Print5writeEPKc+0x8>
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	af 01       	movw	r20, r30
     32c:	46 1b       	sub	r20, r22
     32e:	57 0b       	sbc	r21, r23
     330:	dc 01       	movw	r26, r24
     332:	ed 91       	ld	r30, X+
     334:	fc 91       	ld	r31, X
     336:	02 80       	ldd	r0, Z+2	; 0x02
     338:	f3 81       	ldd	r31, Z+3	; 0x03
     33a:	e0 2d       	mov	r30, r0
     33c:	09 94       	ijmp
    }
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	08 95       	ret

00000344 <_Z11measureTempv>:

OneWire ds(TEMP_PIN); // Temp sensor on pin 7


/* measureTemp() returns the measured temperature in degrees Celsius */
float measureTemp() {
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	64 97       	sbiw	r28, 0x14	; 20
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	f8 94       	cli
     35c:	de bf       	out	0x3e, r29	; 62
     35e:	0f be       	out	0x3f, r0	; 63
     360:	cd bf       	out	0x3d, r28	; 61
	byte type_s;
	byte data[12];
	byte addr[8];
	float celsius, fahrenheit;
	
	ds.reset_search();
     362:	8b ee       	ldi	r24, 0xEB	; 235
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	0e 94 45 09 	call	0x128a	; 0x128a <_ZN7OneWire12reset_searchEv>
	delay(250);
     36a:	6a ef       	ldi	r22, 0xFA	; 250
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
	ds.search(addr);
     376:	41 e0       	ldi	r20, 0x01	; 1
     378:	be 01       	movw	r22, r28
     37a:	63 5f       	subi	r22, 0xF3	; 243
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	8b ee       	ldi	r24, 0xEB	; 235
     380:	93 e0       	ldi	r25, 0x03	; 3
     382:	0e 94 74 09 	call	0x12e8	; 0x12e8 <_ZN7OneWire6searchEPhb>

	if (OneWire::crc8(addr, 7) != addr[7]) {
     386:	67 e0       	ldi	r22, 0x07	; 7
     388:	ce 01       	movw	r24, r28
     38a:	0d 96       	adiw	r24, 0x0d	; 13
     38c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN7OneWire4crc8EPKhh>
     390:	9c 89       	ldd	r25, Y+20	; 0x14
     392:	89 17       	cp	r24, r25
     394:	19 f0       	breq	.+6      	; 0x39c <_Z11measureTempv+0x58>
		Serial.println("CRC is not valid!");
     396:	64 e7       	ldi	r22, 0x74	; 116
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	09 c0       	rjmp	.+18     	; 0x3ae <_Z11measureTempv+0x6a>
		return -1;
	}
//	Serial.println();
	
	// the first ROM byte indicates which chip
	switch (addr[0]) {
     39c:	8d 85       	ldd	r24, Y+13	; 0x0d
     39e:	82 32       	cpi	r24, 0x22	; 34
     3a0:	91 f0       	breq	.+36     	; 0x3c6 <_Z11measureTempv+0x82>
     3a2:	88 32       	cpi	r24, 0x28	; 40
     3a4:	81 f0       	breq	.+32     	; 0x3c6 <_Z11measureTempv+0x82>
     3a6:	80 31       	cpi	r24, 0x10	; 16
     3a8:	59 f0       	breq	.+22     	; 0x3c0 <_Z11measureTempv+0x7c>
		case 0x22:
		//Serial.println("  Chip = DS1822");
		type_s = 0;
		break;
		default:
		Serial.println("Device is not a DS18x20 family device.");
     3aa:	66 e8       	ldi	r22, 0x86	; 134
     3ac:	71 e0       	ldi	r23, 0x01	; 1
     3ae:	8f ed       	ldi	r24, 0xDF	; 223
     3b0:	94 e0       	ldi	r25, 0x04	; 4
     3b2:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN5Print7printlnEPKc>
		return -1;
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e8       	ldi	r24, 0x80	; 128
     3bc:	9f eb       	ldi	r25, 0xBF	; 191
     3be:	6a c0       	rjmp	.+212    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	
	// the first ROM byte indicates which chip
	switch (addr[0]) {
		case 0x10:
		//Serial.println("  Chip = DS18S20");  // or old DS1820
		type_s = 1;
     3c0:	ff 24       	eor	r15, r15
     3c2:	f3 94       	inc	r15
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <_Z11measureTempv+0x84>
		break;
		case 0x28:
		//Serial.println("  Chip = DS18B20");
		type_s = 0;
     3c6:	f1 2c       	mov	r15, r1
		default:
		Serial.println("Device is not a DS18x20 family device.");
		return -1;
	}

	ds.reset();
     3c8:	8b ee       	ldi	r24, 0xEB	; 235
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7OneWire5resetEv>
	ds.select(addr);
     3d0:	be 01       	movw	r22, r28
     3d2:	63 5f       	subi	r22, 0xF3	; 243
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	8b ee       	ldi	r24, 0xEB	; 235
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	0e 94 26 09 	call	0x124c	; 0x124c <_ZN7OneWire6selectEPKh>
	ds.write(0x44, 1);        // start conversion, with parasite power on at the end
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	64 e4       	ldi	r22, 0x44	; 68
     3e2:	8b ee       	ldi	r24, 0xEB	; 235
     3e4:	93 e0       	ldi	r25, 0x03	; 3
     3e6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire5writeEhh>
	
	delay(1000);     // maybe 750ms is enough, maybe not
     3ea:	68 ee       	ldi	r22, 0xE8	; 232
     3ec:	73 e0       	ldi	r23, 0x03	; 3
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
	// we might do a ds.depower() here, but the reset will take care of it.
	
	present = ds.reset();
     3f6:	8b ee       	ldi	r24, 0xEB	; 235
     3f8:	93 e0       	ldi	r25, 0x03	; 3
     3fa:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7OneWire5resetEv>
	ds.select(addr);
     3fe:	be 01       	movw	r22, r28
     400:	63 5f       	subi	r22, 0xF3	; 243
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	8b ee       	ldi	r24, 0xEB	; 235
     406:	93 e0       	ldi	r25, 0x03	; 3
     408:	0e 94 26 09 	call	0x124c	; 0x124c <_ZN7OneWire6selectEPKh>
	ds.write(0xBE);         // Read Scratchpad
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	6e eb       	ldi	r22, 0xBE	; 190
     410:	8b ee       	ldi	r24, 0xEB	; 235
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire5writeEhh>
     418:	8e 01       	movw	r16, r28
     41a:	0f 5f       	subi	r16, 0xFF	; 255
     41c:	1f 4f       	sbci	r17, 0xFF	; 255
     41e:	6e 01       	movw	r12, r28
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	c8 0e       	add	r12, r24
     424:	d1 1c       	adc	r13, r1

	//Serial.print("  Data = ");
	//Serial.print(present, HEX);
	//Serial.print(" ");
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
		data[i] = ds.read();
     426:	8b ee       	ldi	r24, 0xEB	; 235
     428:	93 e0       	ldi	r25, 0x03	; 3
     42a:	0e 94 0a 09 	call	0x1214	; 0x1214 <_ZN7OneWire4readEv>
     42e:	f8 01       	movw	r30, r16
     430:	81 93       	st	Z+, r24
     432:	8f 01       	movw	r16, r30
	ds.write(0xBE);         // Read Scratchpad

	//Serial.print("  Data = ");
	//Serial.print(present, HEX);
	//Serial.print(" ");
	for ( i = 0; i < 9; i++) {           // we need 9 bytes
     434:	ec 15       	cp	r30, r12
     436:	fd 05       	cpc	r31, r13
     438:	b1 f7       	brne	.-20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

	// Convert the data to actual temperature
	// because the result is a 16 bit signed integer, it should
	// be stored to an "int16_t" type, which is always 16 bits
	// even when compiled on a 32 bit processor.
	int16_t raw = (data[1] << 8) | data[0];
     43a:	69 81       	ldd	r22, Y+1	; 0x01
     43c:	7a 81       	ldd	r23, Y+2	; 0x02
	if (type_s) {
     43e:	ff 20       	and	r15, r15
     440:	89 f0       	breq	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
		raw = raw << 3; // 9 bit resolution default
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	66 0f       	add	r22, r22
     446:	77 1f       	adc	r23, r23
     448:	8a 95       	dec	r24
     44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		if (data[7] == 0x10) {
     44c:	88 85       	ldd	r24, Y+8	; 0x08
     44e:	80 31       	cpi	r24, 0x10	; 16
     450:	a9 f4       	brne	.+42     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			// "count remain" gives full 12 bit resolution
			raw = (raw & 0xFFF0) + 12 - data[6];
     452:	2f 81       	ldd	r18, Y+7	; 0x07
     454:	8c e0       	ldi	r24, 0x0C	; 12
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	82 1b       	sub	r24, r18
     45a:	91 09       	sbc	r25, r1
     45c:	60 7f       	andi	r22, 0xF0	; 240
     45e:	68 0f       	add	r22, r24
     460:	79 1f       	adc	r23, r25
     462:	0c c0       	rjmp	.+24     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}
		} else {
		byte cfg = (data[4] & 0x60);
     464:	8d 81       	ldd	r24, Y+5	; 0x05
     466:	80 76       	andi	r24, 0x60	; 96
		// at lower res, the low bits are undefined, so let's zero them
		if (cfg == 0x00) raw = raw & ~7;  // 9 bit resolution, 93.75 ms
     468:	11 f4       	brne	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46a:	68 7f       	andi	r22, 0xF8	; 248
     46c:	07 c0       	rjmp	.+14     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		else if (cfg == 0x20) raw = raw & ~3; // 10 bit res, 187.5 ms
     46e:	80 32       	cpi	r24, 0x20	; 32
     470:	11 f4       	brne	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	6c 7f       	andi	r22, 0xFC	; 252
     474:	03 c0       	rjmp	.+6      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		else if (cfg == 0x40) raw = raw & ~1; // 11 bit res, 375 ms
     476:	80 34       	cpi	r24, 0x40	; 64
     478:	09 f4       	brne	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	6e 7f       	andi	r22, 0xFE	; 254
		//// default is 12 bit resolution, 750 ms conversion time
	}
	celsius = (float)raw / 16.0;
     47c:	07 2e       	mov	r0, r23
     47e:	00 0c       	add	r0, r0
     480:	88 0b       	sbc	r24, r24
     482:	99 0b       	sbc	r25, r25
     484:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__floatsisf>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e8       	ldi	r20, 0x80	; 128
     48e:	5d e3       	ldi	r21, 0x3D	; 61
     490:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
	//Serial.print(celsius);
	//Serial.print(" Celsius, ");
	//Serial.print(fahrenheit);
	//Serial.println(" Fahrenheit");
	return celsius;
     494:	64 96       	adiw	r28, 0x14	; 20
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	df 90       	pop	r13
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret

000004b0 <_Z9addColorsv>:
MD_TCS230  CS(S2, S3, OE);


// add possible color strip values to specific arrays
void addColors()
{
     4b0:	0f 93       	push	r16
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
	int index = 0;
	Color c;
	c.ppm = 0.0;
	c.p = {55, 55, 80};
	Ammonia[index] = c;
     4b8:	c8 eb       	ldi	r28, 0xB8	; 184
     4ba:	d3 e0       	ldi	r29, 0x03	; 3
     4bc:	18 82       	st	Y, r1
     4be:	19 82       	std	Y+1, r1	; 0x01
     4c0:	1a 82       	std	Y+2, r1	; 0x02
     4c2:	1b 82       	std	Y+3, r1	; 0x03
     4c4:	87 e3       	ldi	r24, 0x37	; 55
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	9d 83       	std	Y+5, r25	; 0x05
     4ca:	8c 83       	std	Y+4, r24	; 0x04
     4cc:	9f 83       	std	Y+7, r25	; 0x07
     4ce:	8e 83       	std	Y+6, r24	; 0x06
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	99 87       	std	Y+9, r25	; 0x09
     4d6:	88 87       	std	Y+8, r24	; 0x08

	c.ppm = 0.0;
	c.p = {65, 65, 110};
	Nitrite[index] = c;
     4d8:	a2 e7       	ldi	r26, 0x72	; 114
     4da:	b3 e0       	ldi	r27, 0x03	; 3
     4dc:	1d 92       	st	X+, r1
     4de:	1d 92       	st	X+, r1
     4e0:	1d 92       	st	X+, r1
     4e2:	1c 92       	st	X, r1
     4e4:	13 97       	sbiw	r26, 0x03	; 3
     4e6:	81 e4       	ldi	r24, 0x41	; 65
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	15 96       	adiw	r26, 0x05	; 5
     4ec:	9c 93       	st	X, r25
     4ee:	8e 93       	st	-X, r24
     4f0:	14 97       	sbiw	r26, 0x04	; 4
     4f2:	17 96       	adiw	r26, 0x07	; 7
     4f4:	9c 93       	st	X, r25
     4f6:	8e 93       	st	-X, r24
     4f8:	16 97       	sbiw	r26, 0x06	; 6
     4fa:	8e e6       	ldi	r24, 0x6E	; 110
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	19 96       	adiw	r26, 0x09	; 9
     500:	9c 93       	st	X, r25
     502:	8e 93       	st	-X, r24
     504:	18 97       	sbiw	r26, 0x08	; 8

	c.ppm = 0.0;
	c.p = {49, 50, 90};
	Nitrate[index] = c;
     506:	ec e2       	ldi	r30, 0x2C	; 44
     508:	f3 e0       	ldi	r31, 0x03	; 3
     50a:	10 82       	st	Z, r1
     50c:	11 82       	std	Z+1, r1	; 0x01
     50e:	12 82       	std	Z+2, r1	; 0x02
     510:	13 82       	std	Z+3, r1	; 0x03
     512:	81 e3       	ldi	r24, 0x31	; 49
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	95 83       	std	Z+5, r25	; 0x05
     518:	84 83       	std	Z+4, r24	; 0x04
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	97 83       	std	Z+7, r25	; 0x07
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	8a e5       	ldi	r24, 0x5A	; 90
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	91 87       	std	Z+9, r25	; 0x09
     528:	80 87       	std	Z+8, r24	; 0x08

	++index;

	c.ppm = 0.5;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	7f e3       	ldi	r23, 0x3F	; 63
     532:	4a 87       	std	Y+10, r20	; 0x0a
     534:	5b 87       	std	Y+11, r21	; 0x0b
     536:	6c 87       	std	Y+12, r22	; 0x0c
     538:	7d 87       	std	Y+13, r23	; 0x0d
     53a:	1f 86       	std	Y+15, r1	; 0x0f
     53c:	1e 86       	std	Y+14, r1	; 0x0e
     53e:	19 8a       	std	Y+17, r1	; 0x11
     540:	18 8a       	std	Y+16, r1	; 0x10
     542:	1b 8a       	std	Y+19, r1	; 0x13
     544:	1a 8a       	std	Y+18, r1	; 0x12

	c.ppm = 0.15;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     546:	0a e9       	ldi	r16, 0x9A	; 154
     548:	19 e9       	ldi	r17, 0x99	; 153
     54a:	29 e1       	ldi	r18, 0x19	; 25
     54c:	3e e3       	ldi	r19, 0x3E	; 62
     54e:	1a 96       	adiw	r26, 0x0a	; 10
     550:	0d 93       	st	X+, r16
     552:	1d 93       	st	X+, r17
     554:	2d 93       	st	X+, r18
     556:	3c 93       	st	X, r19
     558:	1d 97       	sbiw	r26, 0x0d	; 13
     55a:	1f 96       	adiw	r26, 0x0f	; 15
     55c:	1c 92       	st	X, r1
     55e:	1e 92       	st	-X, r1
     560:	1e 97       	sbiw	r26, 0x0e	; 14
     562:	51 96       	adiw	r26, 0x11	; 17
     564:	1c 92       	st	X, r1
     566:	1e 92       	st	-X, r1
     568:	50 97       	sbiw	r26, 0x10	; 16
     56a:	53 96       	adiw	r26, 0x13	; 19
     56c:	1c 92       	st	X, r1
     56e:	1e 92       	st	-X, r1
     570:	52 97       	sbiw	r26, 0x12	; 18

	c.ppm = 0.5;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     572:	42 87       	std	Z+10, r20	; 0x0a
     574:	53 87       	std	Z+11, r21	; 0x0b
     576:	64 87       	std	Z+12, r22	; 0x0c
     578:	75 87       	std	Z+13, r23	; 0x0d
     57a:	17 86       	std	Z+15, r1	; 0x0f
     57c:	16 86       	std	Z+14, r1	; 0x0e
     57e:	11 8a       	std	Z+17, r1	; 0x11
     580:	10 8a       	std	Z+16, r1	; 0x10
     582:	13 8a       	std	Z+19, r1	; 0x13
     584:	12 8a       	std	Z+18, r1	; 0x12

	++index;

	c.ppm = 1.0;
	c.p = {57, 58, 85};
	Ammonia[index] = c;
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	60 e8       	ldi	r22, 0x80	; 128
     58c:	7f e3       	ldi	r23, 0x3F	; 63
     58e:	4c 8b       	std	Y+20, r20	; 0x14
     590:	5d 8b       	std	Y+21, r21	; 0x15
     592:	6e 8b       	std	Y+22, r22	; 0x16
     594:	7f 8b       	std	Y+23, r23	; 0x17
     596:	89 e3       	ldi	r24, 0x39	; 57
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	99 8f       	std	Y+25, r25	; 0x19
     59c:	88 8f       	std	Y+24, r24	; 0x18
     59e:	8a e3       	ldi	r24, 0x3A	; 58
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	9b 8f       	std	Y+27, r25	; 0x1b
     5a4:	8a 8f       	std	Y+26, r24	; 0x1a
     5a6:	85 e5       	ldi	r24, 0x55	; 85
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9d 8f       	std	Y+29, r25	; 0x1d
     5ac:	8c 8f       	std	Y+28, r24	; 0x1c

	c.ppm = 0.3;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     5ae:	0a e9       	ldi	r16, 0x9A	; 154
     5b0:	19 e9       	ldi	r17, 0x99	; 153
     5b2:	29 e9       	ldi	r18, 0x99	; 153
     5b4:	3e e3       	ldi	r19, 0x3E	; 62
     5b6:	54 96       	adiw	r26, 0x14	; 20
     5b8:	0d 93       	st	X+, r16
     5ba:	1d 93       	st	X+, r17
     5bc:	2d 93       	st	X+, r18
     5be:	3c 93       	st	X, r19
     5c0:	57 97       	sbiw	r26, 0x17	; 23
     5c2:	59 96       	adiw	r26, 0x19	; 25
     5c4:	1c 92       	st	X, r1
     5c6:	1e 92       	st	-X, r1
     5c8:	58 97       	sbiw	r26, 0x18	; 24
     5ca:	5b 96       	adiw	r26, 0x1b	; 27
     5cc:	1c 92       	st	X, r1
     5ce:	1e 92       	st	-X, r1
     5d0:	5a 97       	sbiw	r26, 0x1a	; 26
     5d2:	5d 96       	adiw	r26, 0x1d	; 29
     5d4:	1c 92       	st	X, r1
     5d6:	1e 92       	st	-X, r1
     5d8:	5c 97       	sbiw	r26, 0x1c	; 28

	c.ppm = 2.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e4       	ldi	r19, 0x40	; 64
     5e2:	04 8b       	std	Z+20, r16	; 0x14
     5e4:	15 8b       	std	Z+21, r17	; 0x15
     5e6:	26 8b       	std	Z+22, r18	; 0x16
     5e8:	37 8b       	std	Z+23, r19	; 0x17
     5ea:	11 8e       	std	Z+25, r1	; 0x19
     5ec:	10 8e       	std	Z+24, r1	; 0x18
     5ee:	13 8e       	std	Z+27, r1	; 0x1b
     5f0:	12 8e       	std	Z+26, r1	; 0x1a
     5f2:	15 8e       	std	Z+29, r1	; 0x1d
     5f4:	14 8e       	std	Z+28, r1	; 0x1c

	++index;

	c.ppm = 3.0;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     5f6:	00 e0       	ldi	r16, 0x00	; 0
     5f8:	10 e0       	ldi	r17, 0x00	; 0
     5fa:	20 e4       	ldi	r18, 0x40	; 64
     5fc:	30 e4       	ldi	r19, 0x40	; 64
     5fe:	0e 8f       	std	Y+30, r16	; 0x1e
     600:	1f 8f       	std	Y+31, r17	; 0x1f
     602:	28 a3       	std	Y+32, r18	; 0x20
     604:	39 a3       	std	Y+33, r19	; 0x21
     606:	1b a2       	std	Y+35, r1	; 0x23
     608:	1a a2       	std	Y+34, r1	; 0x22
     60a:	1d a2       	std	Y+37, r1	; 0x25
     60c:	1c a2       	std	Y+36, r1	; 0x24
     60e:	1f a2       	std	Y+39, r1	; 0x27
     610:	1e a2       	std	Y+38, r1	; 0x26

	c.ppm = 1.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     612:	5e 96       	adiw	r26, 0x1e	; 30
     614:	4d 93       	st	X+, r20
     616:	5d 93       	st	X+, r21
     618:	6d 93       	st	X+, r22
     61a:	7c 93       	st	X, r23
     61c:	91 97       	sbiw	r26, 0x21	; 33
     61e:	93 96       	adiw	r26, 0x23	; 35
     620:	1c 92       	st	X, r1
     622:	1e 92       	st	-X, r1
     624:	92 97       	sbiw	r26, 0x22	; 34
     626:	95 96       	adiw	r26, 0x25	; 37
     628:	1c 92       	st	X, r1
     62a:	1e 92       	st	-X, r1
     62c:	94 97       	sbiw	r26, 0x24	; 36
     62e:	97 96       	adiw	r26, 0x27	; 39
     630:	1c 92       	st	X, r1
     632:	1e 92       	st	-X, r1
     634:	96 97       	sbiw	r26, 0x26	; 38

	c.ppm = 5.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	60 ea       	ldi	r22, 0xA0	; 160
     63c:	70 e4       	ldi	r23, 0x40	; 64
     63e:	46 8f       	std	Z+30, r20	; 0x1e
     640:	57 8f       	std	Z+31, r21	; 0x1f
     642:	60 a3       	std	Z+32, r22	; 0x20
     644:	71 a3       	std	Z+33, r23	; 0x21
     646:	13 a2       	std	Z+35, r1	; 0x23
     648:	12 a2       	std	Z+34, r1	; 0x22
     64a:	15 a2       	std	Z+37, r1	; 0x25
     64c:	14 a2       	std	Z+36, r1	; 0x24
     64e:	17 a2       	std	Z+39, r1	; 0x27
     650:	16 a2       	std	Z+38, r1	; 0x26

	++index;

	c.ppm = 6.0;
	c.p = {0, 0, 0};
	Ammonia[index] = c;
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	60 ec       	ldi	r22, 0xC0	; 192
     658:	70 e4       	ldi	r23, 0x40	; 64
     65a:	48 a7       	std	Y+40, r20	; 0x28
     65c:	59 a7       	std	Y+41, r21	; 0x29
     65e:	6a a7       	std	Y+42, r22	; 0x2a
     660:	7b a7       	std	Y+43, r23	; 0x2b
     662:	1d a6       	std	Y+45, r1	; 0x2d
     664:	1c a6       	std	Y+44, r1	; 0x2c
     666:	1f a6       	std	Y+47, r1	; 0x2f
     668:	1e a6       	std	Y+46, r1	; 0x2e
     66a:	19 aa       	std	Y+49, r1	; 0x31
     66c:	18 aa       	std	Y+48, r1	; 0x30

	c.ppm = 1.5;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	60 ec       	ldi	r22, 0xC0	; 192
     674:	7f e3       	ldi	r23, 0x3F	; 63
     676:	98 96       	adiw	r26, 0x28	; 40
     678:	4d 93       	st	X+, r20
     67a:	5d 93       	st	X+, r21
     67c:	6d 93       	st	X+, r22
     67e:	7c 93       	st	X, r23
     680:	9b 97       	sbiw	r26, 0x2b	; 43
     682:	9d 96       	adiw	r26, 0x2d	; 45
     684:	1c 92       	st	X, r1
     686:	1e 92       	st	-X, r1
     688:	9c 97       	sbiw	r26, 0x2c	; 44
     68a:	9f 96       	adiw	r26, 0x2f	; 47
     68c:	1c 92       	st	X, r1
     68e:	1e 92       	st	-X, r1
     690:	9e 97       	sbiw	r26, 0x2e	; 46
     692:	d1 96       	adiw	r26, 0x31	; 49
     694:	1c 92       	st	X, r1
     696:	1e 92       	st	-X, r1
     698:	d0 97       	sbiw	r26, 0x30	; 48

	c.ppm = 10.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e2       	ldi	r22, 0x20	; 32
     6a0:	71 e4       	ldi	r23, 0x41	; 65
     6a2:	40 a7       	std	Z+40, r20	; 0x28
     6a4:	51 a7       	std	Z+41, r21	; 0x29
     6a6:	62 a7       	std	Z+42, r22	; 0x2a
     6a8:	73 a7       	std	Z+43, r23	; 0x2b
     6aa:	15 a6       	std	Z+45, r1	; 0x2d
     6ac:	14 a6       	std	Z+44, r1	; 0x2c
     6ae:	17 a6       	std	Z+47, r1	; 0x2f
     6b0:	16 a6       	std	Z+46, r1	; 0x2e
     6b2:	11 aa       	std	Z+49, r1	; 0x31
     6b4:	10 aa       	std	Z+48, r1	; 0x30

	++index;

	c.ppm = 3.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     6b6:	d2 96       	adiw	r26, 0x32	; 50
     6b8:	0d 93       	st	X+, r16
     6ba:	1d 93       	st	X+, r17
     6bc:	2d 93       	st	X+, r18
     6be:	3c 93       	st	X, r19
     6c0:	d5 97       	sbiw	r26, 0x35	; 53
     6c2:	d7 96       	adiw	r26, 0x37	; 55
     6c4:	1c 92       	st	X, r1
     6c6:	1e 92       	st	-X, r1
     6c8:	d6 97       	sbiw	r26, 0x36	; 54
     6ca:	d9 96       	adiw	r26, 0x39	; 57
     6cc:	1c 92       	st	X, r1
     6ce:	1e 92       	st	-X, r1
     6d0:	d8 97       	sbiw	r26, 0x38	; 56
     6d2:	db 96       	adiw	r26, 0x3b	; 59
     6d4:	1c 92       	st	X, r1
     6d6:	1e 92       	st	-X, r1
     6d8:	da 97       	sbiw	r26, 0x3a	; 58

	c.ppm = 20.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     6da:	00 e0       	ldi	r16, 0x00	; 0
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	20 ea       	ldi	r18, 0xA0	; 160
     6e0:	31 e4       	ldi	r19, 0x41	; 65
     6e2:	02 ab       	std	Z+50, r16	; 0x32
     6e4:	13 ab       	std	Z+51, r17	; 0x33
     6e6:	24 ab       	std	Z+52, r18	; 0x34
     6e8:	35 ab       	std	Z+53, r19	; 0x35
     6ea:	17 aa       	std	Z+55, r1	; 0x37
     6ec:	16 aa       	std	Z+54, r1	; 0x36
     6ee:	11 ae       	std	Z+57, r1	; 0x39
     6f0:	10 ae       	std	Z+56, r1	; 0x38
     6f2:	13 ae       	std	Z+59, r1	; 0x3b
     6f4:	12 ae       	std	Z+58, r1	; 0x3a

	++index;

	c.ppm = 10.0;
	c.p = {0, 0, 0};
	Nitrite[index] = c;
     6f6:	dc 96       	adiw	r26, 0x3c	; 60
     6f8:	4d 93       	st	X+, r20
     6fa:	5d 93       	st	X+, r21
     6fc:	6d 93       	st	X+, r22
     6fe:	7c 93       	st	X, r23
     700:	df 97       	sbiw	r26, 0x3f	; 63
     702:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <Nitrite+0x41>
     706:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <Nitrite+0x40>
     70a:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <Nitrite+0x43>
     70e:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <Nitrite+0x42>
     712:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <Nitrite+0x45>
     716:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <Nitrite+0x44>

	c.ppm = 50.0;
	c.p = {0, 0, 0};
	Nitrate[index] = c;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a8 e4       	ldi	r26, 0x48	; 72
     720:	b2 e4       	ldi	r27, 0x42	; 66
     722:	84 af       	std	Z+60, r24	; 0x3c
     724:	95 af       	std	Z+61, r25	; 0x3d
     726:	a6 af       	std	Z+62, r26	; 0x3e
     728:	b7 af       	std	Z+63, r27	; 0x3f
     72a:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <Nitrate+0x41>
     72e:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <Nitrate+0x40>
     732:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <Nitrate+0x43>
     736:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <Nitrate+0x42>
     73a:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <Nitrate+0x45>
     73e:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <Nitrate+0x44>
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <_Z9SameColorv>:


bool SameColor()
{
	Serial.print("c: ");
     74c:	6d ea       	ldi	r22, 0xAD	; 173
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	8f ed       	ldi	r24, 0xDF	; 223
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(c.p.R);
     758:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <c+0x4>
     75c:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <c+0x5>
     760:	4a e0       	ldi	r20, 0x0A	; 10
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	8f ed       	ldi	r24, 0xDF	; 223
     766:	94 e0       	ldi	r25, 0x04	; 4
     768:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN5Print5printEii>
	Serial.print(" ");
     76c:	6f ea       	ldi	r22, 0xAF	; 175
     76e:	71 e0       	ldi	r23, 0x01	; 1
     770:	8f ed       	ldi	r24, 0xDF	; 223
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(c.p.G);
     778:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <c+0x6>
     77c:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <c+0x7>
     780:	4a e0       	ldi	r20, 0x0A	; 10
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	8f ed       	ldi	r24, 0xDF	; 223
     786:	94 e0       	ldi	r25, 0x04	; 4
     788:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN5Print5printEii>
	Serial.print(" ");
     78c:	6f ea       	ldi	r22, 0xAF	; 175
     78e:	71 e0       	ldi	r23, 0x01	; 1
     790:	8f ed       	ldi	r24, 0xDF	; 223
     792:	94 e0       	ldi	r25, 0x04	; 4
     794:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(c.p.B);
     798:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <c+0x8>
     79c:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <c+0x9>
     7a0:	4a e0       	ldi	r20, 0x0A	; 10
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	8f ed       	ldi	r24, 0xDF	; 223
     7a6:	94 e0       	ldi	r25, 0x04	; 4
     7a8:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN5Print5printEii>
	Serial.print("read_in: ");
     7ac:	61 eb       	ldi	r22, 0xB1	; 177
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	8f ed       	ldi	r24, 0xDF	; 223
     7b2:	94 e0       	ldi	r25, 0x04	; 4
     7b4:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(redScanned);
     7b8:	4a e0       	ldi	r20, 0x0A	; 10
     7ba:	50 e0       	ldi	r21, 0x00	; 0
     7bc:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <redScanned>
     7c0:	8f ed       	ldi	r24, 0xDF	; 223
     7c2:	94 e0       	ldi	r25, 0x04	; 4
     7c4:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN5Print5printEhi>
	Serial.print(" ");
     7c8:	6f ea       	ldi	r22, 0xAF	; 175
     7ca:	71 e0       	ldi	r23, 0x01	; 1
     7cc:	8f ed       	ldi	r24, 0xDF	; 223
     7ce:	94 e0       	ldi	r25, 0x04	; 4
     7d0:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(greenScanned);
     7d4:	4a e0       	ldi	r20, 0x0A	; 10
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <greenScanned>
     7dc:	8f ed       	ldi	r24, 0xDF	; 223
     7de:	94 e0       	ldi	r25, 0x04	; 4
     7e0:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN5Print5printEhi>
	Serial.print(" ");
     7e4:	6f ea       	ldi	r22, 0xAF	; 175
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	8f ed       	ldi	r24, 0xDF	; 223
     7ea:	94 e0       	ldi	r25, 0x04	; 4
     7ec:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.print(blueScanned);
     7f0:	4a e0       	ldi	r20, 0x0A	; 10
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <blueScanned>
     7f8:	8f ed       	ldi	r24, 0xDF	; 223
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN5Print5printEhi>
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
     800:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <redScanned>
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <c+0x4>
     80a:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <c+0x5>
     80e:	ac 01       	movw	r20, r24
     810:	45 50       	subi	r20, 0x05	; 5
     812:	51 09       	sbc	r21, r1
     814:	24 17       	cp	r18, r20
     816:	35 07       	cpc	r19, r21
     818:	74 f1       	brlt	.+92     	; 0x876 <_Z9SameColorv+0x12a>
     81a:	05 96       	adiw	r24, 0x05	; 5
     81c:	82 17       	cp	r24, r18
     81e:	93 07       	cpc	r25, r19
     820:	54 f1       	brlt	.+84     	; 0x876 <_Z9SameColorv+0x12a>
		return false;
	if (greenScanned < (c.p.G - TOLERANCE) || greenScanned > (c.p.G + TOLERANCE))
     822:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <greenScanned>
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <c+0x6>
     82c:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <c+0x7>
     830:	ac 01       	movw	r20, r24
     832:	45 50       	subi	r20, 0x05	; 5
     834:	51 09       	sbc	r21, r1
     836:	24 17       	cp	r18, r20
     838:	35 07       	cpc	r19, r21
     83a:	ec f0       	brlt	.+58     	; 0x876 <_Z9SameColorv+0x12a>
     83c:	05 96       	adiw	r24, 0x05	; 5
     83e:	82 17       	cp	r24, r18
     840:	93 07       	cpc	r25, r19
     842:	cc f0       	brlt	.+50     	; 0x876 <_Z9SameColorv+0x12a>
		return false;
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
     844:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <blueScanned>
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <c+0x8>
     84e:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <c+0x9>
     852:	ac 01       	movw	r20, r24
     854:	45 50       	subi	r20, 0x05	; 5
     856:	51 09       	sbc	r21, r1
     858:	24 17       	cp	r18, r20
     85a:	35 07       	cpc	r19, r21
     85c:	64 f0       	brlt	.+24     	; 0x876 <_Z9SameColorv+0x12a>
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	82 17       	cp	r24, r18
     862:	93 07       	cpc	r25, r19
     864:	44 f0       	brlt	.+16     	; 0x876 <_Z9SameColorv+0x12a>
		return false;
	
	Serial.print(F("\nFound Matching Color"));
     866:	6c e7       	ldi	r22, 0x7C	; 124
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	8f ed       	ldi	r24, 0xDF	; 223
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	0e 94 33 20 	call	0x4066	; 0x4066 <_ZN5Print5printEPK19__FlashStringHelper>
	return true;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
	Serial.print(greenScanned);
	Serial.print(" ");
	Serial.print(blueScanned);
	// check if RGB values are within range specified by tolerance
	if (redScanned < (c.p.R - TOLERANCE) || redScanned > (c.p.R + TOLERANCE))
		return false;
     876:	80 e0       	ldi	r24, 0x00	; 0
	if (blueScanned < (c.p.B - TOLERANCE) || blueScanned > (c.p.B + TOLERANCE))
		return false;
	
	Serial.print(F("\nFound Matching Color"));
	return true;
}
     878:	08 95       	ret

0000087a <_Z9FindMatchv>:

double FindMatch()
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
	switch(typeToRead)
     882:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <typeToRead>
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	09 f4       	brne	.+2      	; 0x88c <_Z9FindMatchv+0x12>
     88a:	48 c0       	rjmp	.+144    	; 0x91c <__stack+0x1d>
     88c:	40 f0       	brcs	.+16     	; 0x89e <_Z9FindMatchv+0x24>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	09 f0       	breq	.+2      	; 0x894 <_Z9FindMatchv+0x1a>
     892:	6e c0       	rjmp	.+220    	; 0x970 <__stack+0x71>
     894:	02 e7       	ldi	r16, 0x72	; 114
     896:	13 e0       	ldi	r17, 0x03	; 3
     898:	c6 e0       	ldi	r28, 0x06	; 6
     89a:	d0 e0       	ldi	r29, 0x00	; 0
     89c:	29 c0       	rjmp	.+82     	; 0x8f0 <_Z9FindMatchv+0x76>
     89e:	08 eb       	ldi	r16, 0xB8	; 184
     8a0:	13 e0       	ldi	r17, 0x03	; 3
     8a2:	c4 e0       	ldi	r28, 0x04	; 4
     8a4:	d0 e0       	ldi	r29, 0x00	; 0
		case AMMONIA:
		{
			// start at highest ammonia level - false positive better than false negative
			for(int i = MAX_AMMONIA_COLORS - 1; i >= 0; --i)
			{
				c = Ammonia[i];
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	f8 01       	movw	r30, r16
     8aa:	b8 96       	adiw	r30, 0x28	; 40
     8ac:	af e1       	ldi	r26, 0x1F	; 31
     8ae:	b3 e0       	ldi	r27, 0x03	; 3
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	8a 95       	dec	r24
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <_Z9FindMatchv+0x36>
				if(SameColor())
     8b8:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z9SameColorv>
     8bc:	88 23       	and	r24, r24
     8be:	49 f0       	breq	.+18     	; 0x8d2 <_Z9FindMatchv+0x58>
				return Ammonia[i].ppm;
     8c0:	8a e0       	ldi	r24, 0x0A	; 10
     8c2:	8c 9f       	mul	r24, r28
     8c4:	f0 01       	movw	r30, r0
     8c6:	8d 9f       	mul	r24, r29
     8c8:	f0 0d       	add	r31, r0
     8ca:	11 24       	eor	r1, r1
     8cc:	e8 54       	subi	r30, 0x48	; 72
     8ce:	fc 4f       	sbci	r31, 0xFC	; 252
     8d0:	3e c0       	rjmp	.+124    	; 0x94e <__stack+0x4f>
	switch(typeToRead)
	{
		case AMMONIA:
		{
			// start at highest ammonia level - false positive better than false negative
			for(int i = MAX_AMMONIA_COLORS - 1; i >= 0; --i)
     8d2:	21 97       	sbiw	r28, 0x01	; 1
     8d4:	0a 50       	subi	r16, 0x0A	; 10
     8d6:	11 09       	sbc	r17, r1
     8d8:	cf 3f       	cpi	r28, 0xFF	; 255
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	d8 07       	cpc	r29, r24
     8de:	19 f7       	brne	.-58     	; 0x8a6 <_Z9FindMatchv+0x2c>
     8e0:	42 c0       	rjmp	.+132    	; 0x966 <__stack+0x67>
			break;
		}
		case NITRITE:
		{
			// start at highest nitrite level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
     8e2:	21 97       	sbiw	r28, 0x01	; 1
     8e4:	0a 50       	subi	r16, 0x0A	; 10
     8e6:	11 09       	sbc	r17, r1
     8e8:	cf 3f       	cpi	r28, 0xFF	; 255
     8ea:	8f ef       	ldi	r24, 0xFF	; 255
     8ec:	d8 07       	cpc	r29, r24
     8ee:	d9 f1       	breq	.+118    	; 0x966 <__stack+0x67>
			{
				c = Nitrite[i];
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	f8 01       	movw	r30, r16
     8f4:	fc 96       	adiw	r30, 0x3c	; 60
     8f6:	af e1       	ldi	r26, 0x1F	; 31
     8f8:	b3 e0       	ldi	r27, 0x03	; 3
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	8a 95       	dec	r24
     900:	e1 f7       	brne	.-8      	; 0x8fa <_Z9FindMatchv+0x80>
				if(SameColor())
     902:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z9SameColorv>
     906:	88 23       	and	r24, r24
     908:	61 f3       	breq	.-40     	; 0x8e2 <_Z9FindMatchv+0x68>
				return Nitrite[i].ppm;
     90a:	8a e0       	ldi	r24, 0x0A	; 10
     90c:	8c 9f       	mul	r24, r28
     90e:	f0 01       	movw	r30, r0
     910:	8d 9f       	mul	r24, r29
     912:	f0 0d       	add	r31, r0
     914:	11 24       	eor	r1, r1
     916:	ee 58       	subi	r30, 0x8E	; 142
     918:	fc 4f       	sbci	r31, 0xFC	; 252
     91a:	19 c0       	rjmp	.+50     	; 0x94e <__stack+0x4f>
     91c:	0c e2       	ldi	r16, 0x2C	; 44
     91e:	13 e0       	ldi	r17, 0x03	; 3
	return true;
}

double FindMatch()
{
	switch(typeToRead)
     920:	c6 e0       	ldi	r28, 0x06	; 6
     922:	d0 e0       	ldi	r29, 0x00	; 0
		case NITRATE:
		{
			// start at highest nitrate level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
			{
				c = Nitrate[i];
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	f8 01       	movw	r30, r16
     928:	fc 96       	adiw	r30, 0x3c	; 60
     92a:	af e1       	ldi	r26, 0x1F	; 31
     92c:	b3 e0       	ldi	r27, 0x03	; 3
     92e:	01 90       	ld	r0, Z+
     930:	0d 92       	st	X+, r0
     932:	8a 95       	dec	r24
     934:	e1 f7       	brne	.-8      	; 0x92e <__stack+0x2f>
				if(SameColor())
     936:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z9SameColorv>
     93a:	88 23       	and	r24, r24
     93c:	69 f0       	breq	.+26     	; 0x958 <__stack+0x59>
				return Nitrate[i].ppm;
     93e:	8a e0       	ldi	r24, 0x0A	; 10
     940:	8c 9f       	mul	r24, r28
     942:	f0 01       	movw	r30, r0
     944:	8d 9f       	mul	r24, r29
     946:	f0 0d       	add	r31, r0
     948:	11 24       	eor	r1, r1
     94a:	e4 5d       	subi	r30, 0xD4	; 212
     94c:	fc 4f       	sbci	r31, 0xFC	; 252
     94e:	30 81       	ld	r19, Z
     950:	21 81       	ldd	r18, Z+1	; 0x01
     952:	92 81       	ldd	r25, Z+2	; 0x02
     954:	83 81       	ldd	r24, Z+3	; 0x03
     956:	0b c0       	rjmp	.+22     	; 0x96e <__stack+0x6f>
			break;
		}
		case NITRATE:
		{
			// start at highest nitrate level - false positive better than false negative
			for(int i = MAX_NITRITE_NITRATE_COLORS - 1; i >= 0; --i)
     958:	21 97       	sbiw	r28, 0x01	; 1
     95a:	0a 50       	subi	r16, 0x0A	; 10
     95c:	11 09       	sbc	r17, r1
     95e:	cf 3f       	cpi	r28, 0xFF	; 255
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	d8 07       	cpc	r29, r24
     964:	f9 f6       	brne	.-66     	; 0x924 <__stack+0x25>
			{
				c = Ammonia[i];
				if(SameColor())
				return Ammonia[i].ppm;
			}
			return -1;
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	90 e8       	ldi	r25, 0x80	; 128
     96c:	8f eb       	ldi	r24, 0xBF	; 191
     96e:	ac 01       	movw	r20, r24
			}
			return -1;
			break;
		}
	}
}
     970:	63 2f       	mov	r22, r19
     972:	72 2f       	mov	r23, r18
     974:	85 2f       	mov	r24, r21
     976:	94 2f       	mov	r25, r20
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <_Z9ScanColorv>:

long ScanColor()
{
	CS.read();
     982:	8d ee       	ldi	r24, 0xED	; 237
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_ZN9MD_TCS2304readEv>
	while(CS.available() == 0);  // wait for read to complete
     98a:	8d ee       	ldi	r24, 0xED	; 237
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_ZN9MD_TCS2309availableEv>
     992:	88 23       	and	r24, r24
     994:	d1 f3       	breq	.-12     	; 0x98a <_Z9ScanColorv+0x8>
	CS.getRGB(&rgb);
     996:	69 e2       	ldi	r22, 0x29	; 41
     998:	73 e0       	ldi	r23, 0x03	; 3
     99a:	8d ee       	ldi	r24, 0xED	; 237
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     9a2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rgb+0x1>
     9a6:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     9aa:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <rgb>
     9ae:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     9b2:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <rgb+0x2>
     9b6:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <blueScanned>
	// look for match
	Serial.println("RGB");
     9ba:	6b eb       	ldi	r22, 0xBB	; 187
     9bc:	71 e0       	ldi	r23, 0x01	; 1
     9be:	8f ed       	ldi	r24, 0xDF	; 223
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN5Print7printlnEPKc>
	Serial.println(redScanned);
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <redScanned>
     9ce:	8f ed       	ldi	r24, 0xDF	; 223
     9d0:	94 e0       	ldi	r25, 0x04	; 4
     9d2:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <_ZN5Print7printlnEhi>
	Serial.println(greenScanned);
     9d6:	4a e0       	ldi	r20, 0x0A	; 10
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <greenScanned>
     9de:	8f ed       	ldi	r24, 0xDF	; 223
     9e0:	94 e0       	ldi	r25, 0x04	; 4
     9e2:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <_ZN5Print7printlnEhi>
	Serial.println(blueScanned);
     9e6:	4a e0       	ldi	r20, 0x0A	; 10
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <blueScanned>
     9ee:	8f ed       	ldi	r24, 0xDF	; 223
     9f0:	94 e0       	ldi	r25, 0x04	; 4
     9f2:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <_ZN5Print7printlnEhi>
	//return FindMatch();
}
     9f6:	08 95       	ret

000009f8 <_Z13findTestStripv>:

bool findTestStrip()
{
     9f8:	cf 93       	push	r28
	// Scan for color
	CS.read();
     9fa:	8d ee       	ldi	r24, 0xED	; 237
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 64 19 	call	0x32c8	; 0x32c8 <_ZN9MD_TCS2304readEv>
	while (CS.available() == 0);
     a02:	8d ee       	ldi	r24, 0xED	; 237
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_ZN9MD_TCS2309availableEv>
     a0a:	88 23       	and	r24, r24
     a0c:	d1 f3       	breq	.-12     	; 0xa02 <_Z13findTestStripv+0xa>
	CS.getRGB(&rgb);
     a0e:	69 e2       	ldi	r22, 0x29	; 41
     a10:	73 e0       	ldi	r23, 0x03	; 3
     a12:	8d ee       	ldi	r24, 0xED	; 237
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 9a 18 	call	0x3134	; 0x3134 <_ZN9MD_TCS2306getRGBEP9colorData>
	greenScanned = rgb.value[TCS230_RGB_G];
     a1a:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rgb+0x1>
     a1e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <greenScanned>
	redScanned = rgb.value[TCS230_RGB_R];
     a22:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <rgb>
     a26:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <redScanned>
	blueScanned = rgb.value[TCS230_RGB_B];
     a2a:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <rgb+0x2>
     a2e:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <blueScanned>
	// look for match against black
	c = EmptyTestBox;
     a32:	8a e0       	ldi	r24, 0x0A	; 10
     a34:	e9 e2       	ldi	r30, 0x29	; 41
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	af e1       	ldi	r26, 0x1F	; 31
     a3a:	b3 e0       	ldi	r27, 0x03	; 3
     a3c:	01 90       	ld	r0, Z+
     a3e:	0d 92       	st	X+, r0
     a40:	8a 95       	dec	r24
     a42:	e1 f7       	brne	.-8      	; 0xa3c <_Z13findTestStripv+0x44>
	bool foundEmptyBox = SameColor();
     a44:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z9SameColorv>
     a48:	c8 2f       	mov	r28, r24
	Serial.print(" foundEmptyBox ");
     a4a:	6f eb       	ldi	r22, 0xBF	; 191
     a4c:	71 e0       	ldi	r23, 0x01	; 1
     a4e:	8f ed       	ldi	r24, 0xDF	; 223
     a50:	94 e0       	ldi	r25, 0x04	; 4
     a52:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.println(foundEmptyBox);
     a56:	6c 2f       	mov	r22, r28
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	4a e0       	ldi	r20, 0x0A	; 10
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	8f ed       	ldi	r24, 0xDF	; 223
     a60:	94 e0       	ldi	r25, 0x04	; 4
     a62:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN5Print7printlnEii>
	Serial.print("\n");
     a66:	64 ea       	ldi	r22, 0xA4	; 164
     a68:	72 e0       	ldi	r23, 0x02	; 2
     a6a:	8f ed       	ldi	r24, 0xDF	; 223
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	c = WhiteTestStrip;
     a72:	8a e0       	ldi	r24, 0x0A	; 10
     a74:	ef e1       	ldi	r30, 0x1F	; 31
     a76:	f1 e0       	ldi	r31, 0x01	; 1
     a78:	af e1       	ldi	r26, 0x1F	; 31
     a7a:	b3 e0       	ldi	r27, 0x03	; 3
     a7c:	01 90       	ld	r0, Z+
     a7e:	0d 92       	st	X+, r0
     a80:	8a 95       	dec	r24
     a82:	e1 f7       	brne	.-8      	; 0xa7c <_Z13findTestStripv+0x84>
	foundEmptyBox =  foundEmptyBox || SameColor();
     a84:	c1 11       	cpse	r28, r1
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <_Z13findTestStripv+0x96>
     a88:	0e 94 a6 03 	call	0x74c	; 0x74c <_Z9SameColorv>
     a8c:	c8 2f       	mov	r28, r24
	Serial.print(" foundEmptyBoxOrTestStrip ");
     a8e:	6f ec       	ldi	r22, 0xCF	; 207
     a90:	71 e0       	ldi	r23, 0x01	; 1
     a92:	8f ed       	ldi	r24, 0xDF	; 223
     a94:	94 e0       	ldi	r25, 0x04	; 4
     a96:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	Serial.println(foundEmptyBox);
     a9a:	6c 2f       	mov	r22, r28
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	4a e0       	ldi	r20, 0x0A	; 10
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	8f ed       	ldi	r24, 0xDF	; 223
     aa4:	94 e0       	ldi	r25, 0x04	; 4
     aa6:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN5Print7printlnEii>
	Serial.print("\n");
     aaa:	64 ea       	ldi	r22, 0xA4	; 164
     aac:	72 e0       	ldi	r23, 0x02	; 2
     aae:	8f ed       	ldi	r24, 0xDF	; 223
     ab0:	94 e0       	ldi	r25, 0x04	; 4
     ab2:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	return foundEmptyBox && (FindMatch() == -1);
     ab6:	cc 23       	and	r28, r28
     ab8:	51 f0       	breq	.+20     	; 0xace <_Z13findTestStripv+0xd6>
     aba:	0e 94 3d 04 	call	0x87a	; 0x87a <_Z9FindMatchv>
     abe:	c1 e0       	ldi	r28, 0x01	; 1
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e8       	ldi	r20, 0x80	; 128
     ac6:	5f eb       	ldi	r21, 0xBF	; 191
     ac8:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <__cmpsf2>
     acc:	81 11       	cpse	r24, r1
     ace:	c0 e0       	ldi	r28, 0x00	; 0
     ad0:	8c 2f       	mov	r24, r28
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_Z6setLED8LEDColor>:
LEDColor White = {255, 255, 255};
LEDColor Off = {0, 0, 0};


void setLED(LEDColor c)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	00 d0       	rcall	.+0      	; 0xadc <_Z6setLED8LEDColor+0x6>
     adc:	00 d0       	rcall	.+0      	; 0xade <_Z6setLED8LEDColor+0x8>
     ade:	00 d0       	rcall	.+0      	; 0xae0 <_Z6setLED8LEDColor+0xa>
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	49 83       	std	Y+1, r20	; 0x01
     ae6:	5a 83       	std	Y+2, r21	; 0x02
     ae8:	6b 83       	std	Y+3, r22	; 0x03
     aea:	7c 83       	std	Y+4, r23	; 0x04
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	9e 83       	std	Y+6, r25	; 0x06
	analogWrite(R_LED, c.r);
     af0:	69 81       	ldd	r22, Y+1	; 0x01
     af2:	7a 81       	ldd	r23, Y+2	; 0x02
     af4:	8f e0       	ldi	r24, 0x0F	; 15
     af6:	0e 94 b6 23 	call	0x476c	; 0x476c <analogWrite>
	analogWrite(G_LED, c.g);
     afa:	6b 81       	ldd	r22, Y+3	; 0x03
     afc:	7c 81       	ldd	r23, Y+4	; 0x04
     afe:	80 e1       	ldi	r24, 0x10	; 16
     b00:	0e 94 b6 23 	call	0x476c	; 0x476c <analogWrite>
	analogWrite(B_LED, c.b);
     b04:	6d 81       	ldd	r22, Y+5	; 0x05
     b06:	7e 81       	ldd	r23, Y+6	; 0x06
     b08:	81 e1       	ldi	r24, 0x11	; 17
}
     b0a:	26 96       	adiw	r28, 0x06	; 6
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28

void setLED(LEDColor c)
{
	analogWrite(R_LED, c.r);
	analogWrite(G_LED, c.g);
	analogWrite(B_LED, c.b);
     b1a:	0c 94 b6 23 	jmp	0x476c	; 0x476c <analogWrite>

00000b1e <_Z15TaskColorSensorPv>:
// get Ammonia, Nitrite, and Nitrate reading from color sensor
void TaskColorSensor(void *pvParameters)
{
	(void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
     b1e:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskGetTickCount>
				typeToRead = NITRATE;
				while (findTestStrip());
				setLED(Green);
				delay(250); // allow user to see LED and stop moving test strip

				nitrateValue = ScanColor() * 100;
     b22:	c4 e6       	ldi	r28, 0x64	; 100
				
				setLED(Off);
				
				typeToRead = NITRITE;
     b24:	12 e0       	ldi	r17, 0x02	; 2
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
	{
		//Serial.println("Inside dead task");
		//vTaskDelayUntil( &xLastWakeTime, 500 / portTICK_PERIOD_MS );
		if ( xSemaphoreTake( xSerialSemaphoreColorSensor, ( TickType_t ) 100 ) == pdTRUE )
     b26:	64 e6       	ldi	r22, 0x64	; 100
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSerialSemaphoreColorSensor>
     b2e:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xSerialSemaphoreColorSensor+0x1>
     b32:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <xQueueSemaphoreTake>
     b36:	d8 2f       	mov	r29, r24
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	09 f0       	breq	.+2      	; 0xb3e <_Z15TaskColorSensorPv+0x20>
     b3c:	97 c0       	rjmp	.+302    	; 0xc6c <_Z15TaskColorSensorPv+0x14e>
		{
			setLED(White);
     b3e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <White>
     b42:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <White+0x1>
     b46:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <White+0x2>
     b4a:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <White+0x3>
     b4e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <White+0x4>
     b52:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <White+0x5>
     b56:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
			//Serial.println("checking color");
			if (colorToRead == 'a')
     b5a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <colorToRead>
     b5e:	81 36       	cpi	r24, 0x61	; 97
     b60:	a1 f4       	brne	.+40     	; 0xb8a <_Z15TaskColorSensorPv+0x6c>
			{
				
				
				//while (findTestStrip());
				//setLED(Green);
				delay(1000); // let user see LED and stop moving before measuring
     b62:	68 ee       	ldi	r22, 0xE8	; 232
     b64:	73 e0       	ldi	r23, 0x03	; 3
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
				
				typeToRead = AMMONIA;
     b6e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <typeToRead>
				ammoniaValue = ScanColor() * 100;
     b72:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9ScanColorv>
     b76:	c6 9f       	mul	r28, r22
     b78:	90 01       	movw	r18, r0
     b7a:	c7 9f       	mul	r28, r23
     b7c:	30 0d       	add	r19, r0
     b7e:	11 24       	eor	r1, r1
     b80:	30 93 e0 02 	sts	0x02E0, r19	; 0x8002e0 <ammoniaValue+0x1>
     b84:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <ammoniaValue>
     b88:	58 c0       	rjmp	.+176    	; 0xc3a <_Z15TaskColorSensorPv+0x11c>
			}
			else
			{
				setLED(Red);
     b8a:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <Red>
     b8e:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <Red+0x1>
     b92:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Red+0x2>
     b96:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <Red+0x3>
     b9a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Red+0x4>
     b9e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Red+0x5>
     ba2:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
				typeToRead = NITRATE;
     ba6:	d0 93 ea 03 	sts	0x03EA, r29	; 0x8003ea <typeToRead>
				while (findTestStrip());
     baa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z13findTestStripv>
     bae:	81 11       	cpse	r24, r1
     bb0:	fc cf       	rjmp	.-8      	; 0xbaa <_Z15TaskColorSensorPv+0x8c>
				setLED(Green);
     bb2:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <Green>
     bb6:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <Green+0x1>
     bba:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Green+0x2>
     bbe:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <Green+0x3>
     bc2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Green+0x4>
     bc6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Green+0x5>
     bca:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
				delay(250); // allow user to see LED and stop moving test strip
     bce:	6a ef       	ldi	r22, 0xFA	; 250
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 17 23 	call	0x462e	; 0x462e <delay>

				nitrateValue = ScanColor() * 100;
     bda:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9ScanColorv>
     bde:	c6 9f       	mul	r28, r22
     be0:	90 01       	movw	r18, r0
     be2:	c7 9f       	mul	r28, r23
     be4:	30 0d       	add	r19, r0
     be6:	11 24       	eor	r1, r1
     be8:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <nitrateValue+0x1>
     bec:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <nitrateValue>
				
				setLED(Off);
     bf0:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     bf4:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     bf8:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     bfc:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     c00:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     c04:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     c08:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
				
				typeToRead = NITRITE;
     c0c:	10 93 ea 03 	sts	0x03EA, r17	; 0x8003ea <typeToRead>
				while (findTestStrip());
     c10:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_Z13findTestStripv>
     c14:	81 11       	cpse	r24, r1
     c16:	fc cf       	rjmp	.-8      	; 0xc10 <_Z15TaskColorSensorPv+0xf2>
				//setLED(Blue);
				delay(250);
     c18:	6a ef       	ldi	r22, 0xFA	; 250
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
				
				nitriteValue = ScanColor() * 100;
     c24:	0e 94 c1 04 	call	0x982	; 0x982 <_Z9ScanColorv>
     c28:	c6 9f       	mul	r28, r22
     c2a:	90 01       	movw	r18, r0
     c2c:	c7 9f       	mul	r28, r23
     c2e:	30 0d       	add	r19, r0
     c30:	11 24       	eor	r1, r1
     c32:	30 93 dc 02 	sts	0x02DC, r19	; 0x8002dc <nitriteValue+0x1>
     c36:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <nitriteValue>
			}
			setLED(Off);	  
     c3a:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     c3e:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     c42:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     c46:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     c4a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     c4e:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     c52:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
			xSemaphoreGive( xSerialSemaphoreColorSensor );
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSerialSemaphoreColorSensor>
     c64:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xSerialSemaphoreColorSensor+0x1>
     c68:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <xQueueGenericSend>
		}
		vTaskDelay(1); // 1 tick delay between reads for stability*/
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 86 13 	call	0x270c	; 0x270c <vTaskDelay>
void TaskColorSensor(void *pvParameters)
{
	(void) pvParameters;
  
	TickType_t xLastWakeTime = xTaskGetTickCount();
	for (;;) // A Task shall never return or exit.
     c74:	58 cf       	rjmp	.-336    	; 0xb26 <_Z15TaskColorSensorPv+0x8>

00000c76 <_Z20TaskPHandTemperaturePv>:
}


// get pH and temp reading from sensors
void TaskPHandTemperature(void *pvParameters)
{
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <_Z20TaskPHandTemperaturePv+0x6>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
  (void) pvParameters;
  
  TickType_t xLastWakeTime = xTaskGetTickCount();
     c80:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskGetTickCount>
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
  for (;;) // A Task shall never return or exit.
  {
	// Gets pH value
	//delay(500);
	setLED(Green);
     c88:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <Green>
     c8c:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <Green+0x1>
     c90:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <Green+0x2>
     c94:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <Green+0x3>
     c98:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Green+0x4>
     c9c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Green+0x5>
     ca0:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
	//Serial.print("p\n");
	phValue = calcPH() * 100;
     ca4:	0e 94 17 0a 	call	0x142e	; 0x142e <_Z6calcPHv>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	48 ec       	ldi	r20, 0xC8	; 200
     cae:	52 e4       	ldi	r21, 0x42	; 66
     cb0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
     cb4:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__fixsfsi>
     cb8:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <phValue>
     cbc:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <phValue+0x1>
     cc0:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <phValue+0x2>
     cc4:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <phValue+0x3>
	//Serial.print("\npH Value:");
	//Serial.print(phValue);
	delay(250);
     cc8:	6a ef       	ldi	r22, 0xFA	; 250
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
	setLED(Off);
     cd4:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     cd8:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     cdc:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     ce0:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     ce4:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     ce8:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     cec:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
	
	setLED(Red);
     cf0:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <Red>
     cf4:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <Red+0x1>
     cf8:	60 91 1b 01 	lds	r22, 0x011B	; 0x80011b <Red+0x2>
     cfc:	70 91 1c 01 	lds	r23, 0x011C	; 0x80011c <Red+0x3>
     d00:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Red+0x4>
     d04:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Red+0x5>
     d08:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
	// Gets temperature value in Celsius
	tempValue = measureTemp() * 100;
     d0c:	0e 94 a2 01 	call	0x344	; 0x344 <_Z11measureTempv>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	48 ec       	ldi	r20, 0xC8	; 200
     d16:	52 e4       	ldi	r21, 0x42	; 66
     d18:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
     d1c:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__fixsfsi>
     d20:	70 93 e2 02 	sts	0x02E2, r23	; 0x8002e2 <tempValue+0x1>
     d24:	60 93 e1 02 	sts	0x02E1, r22	; 0x8002e1 <tempValue>
	//Serial.print("t\n");
	//Serial.print(tempValue);
	
	delay(100);
     d28:	64 e6       	ldi	r22, 0x64	; 100
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
	setLED(Off);
     d34:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     d38:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     d3c:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     d40:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     d44:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     d48:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     d4c:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
    // check pH and temp every 15 min
    vTaskDelayUntil( &xLastWakeTime, 10000 / portTICK_PERIOD_MS );
     d50:	61 e7       	ldi	r22, 0x71	; 113
     d52:	72 e0       	ldi	r23, 0x02	; 2
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	0e 94 4e 13 	call	0x269c	; 0x269c <vTaskDelayUntil>
     d5c:	95 cf       	rjmp	.-214    	; 0xc88 <_Z20TaskPHandTemperaturePv+0x12>

00000d5e <_Z8setupLEDv>:
}

void setupLED()
{
	pinMode(R_LED, OUTPUT);
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	8f e0       	ldi	r24, 0x0F	; 15
     d62:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
	pinMode(G_LED, OUTPUT);
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
	pinMode(B_LED, OUTPUT);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	81 e1       	ldi	r24, 0x11	; 17
     d72:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
	setLED(Off);
     d76:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     d7a:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     d7e:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     d82:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     d86:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     d8a:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     d8e:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <_Z6setLED8LEDColor>

00000d92 <setup>:
TaskHandle_t xPHandTemperature;

SoftwareSerial serial(rxPin, txPin);

// the setup function runs once when you press reset or power the board
void setup() {  
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
	// initialize serial communication at 115200 bits per second:
	serial.begin(115200);
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	52 ec       	ldi	r21, 0xC2	; 194
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	83 eb       	ldi	r24, 0xB3	; 179
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <_ZN14SoftwareSerial5beginEl>
	pinMode(wifiRst, OUTPUT);
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	8a e0       	ldi	r24, 0x0A	; 10
     dac:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     db0:	26 e0       	ldi	r18, 0x06	; 6
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	52 ec       	ldi	r21, 0xC2	; 194
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	8f ed       	ldi	r24, 0xDF	; 223
     dbc:	94 e0       	ldi	r25, 0x04	; 4
     dbe:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <_ZN14HardwareSerial5beginEmh>
		; // wait for serial port to connect. Needed for native USB, on LEONARDO, MICRO, YUN, and other 32u4 based boards.
	}
  
	// initialize Wifi module (Maybe?)
	// drive Wifi Enable pin High
	digitalWrite(wifiRst, HIGH);
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	8a e0       	ldi	r24, 0x0A	; 10
     dc6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
	// load test strip color data and initialize indicator LED
	CS.begin();
     dca:	8d ee       	ldi	r24, 0xED	; 237
     dcc:	92 e0       	ldi	r25, 0x02	; 2
     dce:	0e 94 6f 18 	call	0x30de	; 0x30de <_ZN9MD_TCS2305beginEv>
	addColors();
     dd2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z9addColorsv>
	setupLED();
     dd6:	0e 94 af 06 	call	0xd5e	; 0xd5e <_Z8setupLEDv>
	Serial.print("Starting setup");
     dda:	6a ee       	ldi	r22, 0xEA	; 234
     ddc:	71 e0       	ldi	r23, 0x01	; 1
     dde:	8f ed       	ldi	r24, 0xDF	; 223
     de0:	94 e0       	ldi	r25, 0x04	; 4
     de2:	0e 94 57 20 	call	0x40ae	; 0x40ae <_ZN5Print5printEPKc>
	
	setLED(Blue);
     de6:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <Blue>
     dea:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <Blue+0x1>
     dee:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Blue+0x2>
     df2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <Blue+0x3>
     df6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Blue+0x4>
     dfa:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Blue+0x5>
     dfe:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
  
	// initialize pH sensor
	phInit();
     e02:	0e 94 13 0a 	call	0x1426	; 0x1426 <_Z6phInitv>
 
	// TODO: Not sure how Wifi module indicates that it is getting data - replace that with the interrupt from pin2 
	attachInterrupt(digitalPinToInterrupt(2), fromWifi, RISING);
     e06:	43 e0       	ldi	r20, 0x03	; 3
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	64 e7       	ldi	r22, 0x74	; 116
     e0c:	77 e0       	ldi	r23, 0x07	; 7
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0e 94 3a 22 	call	0x4474	; 0x4474 <attachInterrupt>
	
	if (xSerialSemaphoreColorSensor == NULL)
     e14:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSerialSemaphoreColorSensor>
     e18:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xSerialSemaphoreColorSensor+0x1>
     e1c:	89 2b       	or	r24, r25
     e1e:	91 f4       	brne	.+36     	; 0xe44 <setup+0xb2>
	{
		xSerialSemaphoreColorSensor = xSemaphoreCreateBinary();
     e20:	43 e0       	ldi	r20, 0x03	; 3
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <xQueueGenericCreate>
     e2a:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <xSerialSemaphoreColorSensor+0x1>
     e2e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xSerialSemaphoreColorSensor>
		if (xSerialSemaphoreColorSensor != NULL )
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	39 f0       	breq	.+14     	; 0xe44 <setup+0xb2>
		{
			xSemaphoreGive(xSerialSemaphoreColorSensor);	
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <xQueueGenericSend>
	TaskColorSensor
	,  (const portCHAR *)"ColorSensor"
	,  128
	,  NULL
	,  2
	,  &xColorSensor );
     e44:	84 ed       	ldi	r24, 0xD4	; 212
     e46:	e8 2e       	mov	r14, r24
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	f8 2e       	mov	r15, r24
     e4c:	02 e0       	ldi	r16, 0x02	; 2
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e8       	ldi	r20, 0x80	; 128
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	69 ef       	ldi	r22, 0xF9	; 249
     e58:	71 e0       	ldi	r23, 0x01	; 1
     e5a:	8f e8       	ldi	r24, 0x8F	; 143
     e5c:	95 e0       	ldi	r25, 0x05	; 5
     e5e:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCreate>
	TaskPHandTemperature
	,  (const portCHAR *) "PHandTemperature"
	,  128
	,  NULL
	,  2
	,  &xPHandTemperature );
     e62:	92 ed       	ldi	r25, 0xD2	; 210
     e64:	e9 2e       	mov	r14, r25
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	f9 2e       	mov	r15, r25
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e8       	ldi	r20, 0x80	; 128
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	8b e3       	ldi	r24, 0x3B	; 59
     e78:	96 e0       	ldi	r25, 0x06	; 6
     e7a:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCreate>
	
	
	delay(1000);
     e7e:	68 ee       	ldi	r22, 0xE8	; 232
     e80:	73 e0       	ldi	r23, 0x03	; 3
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
	setLED(Off);
     e8a:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
     e8e:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
     e92:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
     e96:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
     e9a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
     e9e:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
     ea2:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
	//Serial.print("Inside setup");

	// Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
	vTaskStartScheduler();
}
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
	delay(1000);
	setLED(Off);
	//Serial.print("Inside setup");

	// Now the task scheduler, which takes over control of scheduling individual tasks, is automatically started.
	vTaskStartScheduler();
     eac:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <vTaskStartScheduler>

00000eb0 <loop>:
}

void loop()
{
     eb0:	08 95       	ret

00000eb2 <_GLOBAL__sub_I_ds>:
    bool LastDeviceFlag;
#endif

  public:
    OneWire() { }
    OneWire(uint8_t pin) { begin(pin); }
     eb2:	66 e0       	ldi	r22, 0x06	; 6
     eb4:	8b ee       	ldi	r24, 0xEB	; 235
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <_ZN7OneWire5beginEh>

uint8_t greenScanned;
uint8_t redScanned;
uint8_t blueScanned;

MD_TCS230  CS(S2, S3, OE);
     ebc:	28 e0       	ldi	r18, 0x08	; 8
     ebe:	4d e0       	ldi	r20, 0x0D	; 13
     ec0:	6c e0       	ldi	r22, 0x0C	; 12
     ec2:	8d ee       	ldi	r24, 0xED	; 237
     ec4:	92 e0       	ldi	r25, 0x02	; 2
     ec6:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <_ZN9MD_TCS230C1Ehhh>
SemaphoreHandle_t xSerialSemaphoreColorSensor;

TaskHandle_t xColorSensor;
TaskHandle_t xPHandTemperature;

SoftwareSerial serial(rxPin, txPin);
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	43 e0       	ldi	r20, 0x03	; 3
     ece:	62 e0       	ldi	r22, 0x02	; 2
     ed0:	83 eb       	ldi	r24, 0xB3	; 179
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <_ZN14SoftwareSerialC1Ehhb>

00000ed8 <_GLOBAL__sub_D_ds>:
     ed8:	83 eb       	ldi	r24, 0xB3	; 179
     eda:	92 e0       	ldi	r25, 0x02	; 2
     edc:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <_ZN14SoftwareSerialD1Ev>
     ee0:	8d ee       	ldi	r24, 0xED	; 237
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	0c 94 11 18 	jmp	0x3022	; 0x3022 <_ZN9MD_TCS230D1Ev>

00000ee8 <_Z8fromWifiv>:
  }
}


void fromWifi()
{
     ee8:	cf 93       	push	r28
	int i = 0;
	char action = '\0';
	// check for data from Wifi
	if (serial.available())
     eea:	83 eb       	ldi	r24, 0xB3	; 179
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN14SoftwareSerial9availableEv>
     ef2:	89 2b       	or	r24, r25
     ef4:	99 f0       	breq	.+38     	; 0xf1c <_Z8fromWifiv+0x34>
	{
		delay(100); // allows all serial sent to be received together
     ef6:	64 e6       	ldi	r22, 0x64	; 100
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 17 23 	call	0x462e	; 0x462e <delay>


void fromWifi()
{
	int i = 0;
	char action = '\0';
     f02:	c0 e0       	ldi	r28, 0x00	; 0
	// check for data from Wifi
	if (serial.available())
	{
		delay(100); // allows all serial sent to be received together
		while (serial.available())
     f04:	83 eb       	ldi	r24, 0xB3	; 179
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 09 1a 	call	0x3412	; 0x3412 <_ZN14SoftwareSerial9availableEv>
     f0c:	89 2b       	or	r24, r25
     f0e:	39 f0       	breq	.+14     	; 0xf1e <_Z8fromWifiv+0x36>
		{
			action = serial.read();
     f10:	83 eb       	ldi	r24, 0xB3	; 179
     f12:	92 e0       	ldi	r25, 0x02	; 2
     f14:	0e 94 7f 19 	call	0x32fe	; 0x32fe <_ZN14SoftwareSerial4readEv>
     f18:	c8 2f       	mov	r28, r24
	char action = '\0';
	// check for data from Wifi
	if (serial.available())
	{
		delay(100); // allows all serial sent to be received together
		while (serial.available())
     f1a:	f4 cf       	rjmp	.-24     	; 0xf04 <_Z8fromWifiv+0x1c>


void fromWifi()
{
	int i = 0;
	char action = '\0';
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
		while (serial.available())
		{
			action = serial.read();
		}
	}
	if (alreadyStarted){
     f1e:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <alreadyStarted>
     f22:	88 23       	and	r24, r24
     f24:	99 f0       	breq	.+38     	; 0xf4c <_Z8fromWifiv+0x64>
		action = 'a';
		Serial.println("already started");
     f26:	66 e1       	ldi	r22, 0x16	; 22
     f28:	72 e0       	ldi	r23, 0x02	; 2
     f2a:	8f ed       	ldi	r24, 0xDF	; 223
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN5Print7printlnEPKc>
		++count;
     f32:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <count>
     f36:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <count+0x1>
     f3a:	01 96       	adiw	r24, 0x01	; 1
		//Serial.println(count);
		if (count == 10)
     f3c:	8a 30       	cpi	r24, 0x0A	; 10
     f3e:	91 05       	cpc	r25, r1
     f40:	69 f5       	brne	.+90     	; 0xf9c <_Z8fromWifiv+0xb4>
		{
			count = 0;
     f42:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <count+0x1>
     f46:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <count>
     f4a:	08 c0       	rjmp	.+16     	; 0xf5c <_Z8fromWifiv+0x74>
			action = 'p';
		}
	}

	switch(action)
     f4c:	ce 36       	cpi	r28, 0x6E	; 110
     f4e:	e9 f0       	breq	.+58     	; 0xf8a <_Z8fromWifiv+0xa2>
     f50:	c0 37       	cpi	r28, 0x70	; 112
     f52:	21 f0       	breq	.+8      	; 0xf5c <_Z8fromWifiv+0x74>
     f54:	c1 36       	cpi	r28, 0x61	; 97
     f56:	09 f0       	breq	.+2      	; 0xf5a <_Z8fromWifiv+0x72>
     f58:	8a c0       	rjmp	.+276    	; 0x106e <_Z8fromWifiv+0x186>
     f5a:	24 c0       	rjmp	.+72     	; 0xfa4 <_Z8fromWifiv+0xbc>
	{
	case 'p':
	{
		Serial.println("inside case color");
     f5c:	66 e2       	ldi	r22, 0x26	; 38
     f5e:	72 e0       	ldi	r23, 0x02	; 2
     f60:	8f ed       	ldi	r24, 0xDF	; 223
     f62:	94 e0       	ldi	r25, 0x04	; 4
     f64:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN5Print7printlnEPKc>
		colorToRead = 'a';
     f68:	81 e6       	ldi	r24, 0x61	; 97
     f6a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <colorToRead>
		alreadyStarted = true;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <alreadyStarted>
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
     f74:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <__data_end>
		xSemaphoreGiveFromISR(xSerialSemaphoreColorSensor, &xHigherPriorityTaskWoken);
     f78:	62 eb       	ldi	r22, 0xB2	; 178
     f7a:	72 e0       	ldi	r23, 0x02	; 2
     f7c:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xSerialSemaphoreColorSensor>
     f80:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xSerialSemaphoreColorSensor+0x1>
		setLED(Off);
	}
	default:
		break;
	}
}
     f84:	cf 91       	pop	r28
		Serial.println("inside case color");
		colorToRead = 'a';
		alreadyStarted = true;
		static BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR(xSerialSemaphoreColorSensor, &xHigherPriorityTaskWoken);
     f86:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <xQueueGiveFromISR>
		setLED(Off);*/
		break;
	}
	case 'n':
	{
		colorToRead = 'n';
     f8a:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <colorToRead>
		vTaskResume(xColorSensor);
     f8e:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <xColorSensor>
     f92:	90 91 d5 02 	lds	r25, 0x02D5	; 0x8002d5 <xColorSensor+0x1>
		setLED(Off);
	}
	default:
		break;
	}
}
     f96:	cf 91       	pop	r28
		break;
	}
	case 'n':
	{
		colorToRead = 'n';
		vTaskResume(xColorSensor);
     f98:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <vTaskResume>
		}
	}
	if (alreadyStarted){
		action = 'a';
		Serial.println("already started");
		++count;
     f9c:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <count+0x1>
     fa0:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <count>
		vTaskResume(xColorSensor);
		break;
	}
	case 'a':
	{
		serial.println("inside case print");
     fa4:	68 e3       	ldi	r22, 0x38	; 56
     fa6:	72 e0       	ldi	r23, 0x02	; 2
     fa8:	83 eb       	ldi	r24, 0xB3	; 179
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 64 20 	call	0x40c8	; 0x40c8 <_ZN5Print7printlnEPKc>
		setLED(Blue);
     fb0:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <Blue>
     fb4:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <Blue+0x1>
     fb8:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <Blue+0x2>
     fbc:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <Blue+0x3>
     fc0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Blue+0x4>
     fc4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <Blue+0x5>
     fc8:	0e 94 6b 05 	call	0xad6	; 0xad6 <_Z6setLED8LEDColor>
		serial.write("ph:");
     fcc:	6a e4       	ldi	r22, 0x4A	; 74
     fce:	72 e0       	ldi	r23, 0x02	; 2
     fd0:	83 eb       	ldi	r24, 0xB3	; 179
     fd2:	92 e0       	ldi	r25, 0x02	; 2
     fd4:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
		serial.write(phValue);
     fd8:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <phValue>
     fdc:	83 eb       	ldi	r24, 0xB3	; 179
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN14SoftwareSerial5writeEh>
		serial.write("temp:");
     fe4:	6e e4       	ldi	r22, 0x4E	; 78
     fe6:	72 e0       	ldi	r23, 0x02	; 2
     fe8:	83 eb       	ldi	r24, 0xB3	; 179
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
		serial.write(tempValue);
     ff0:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <tempValue>
     ff4:	83 eb       	ldi	r24, 0xB3	; 179
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN14SoftwareSerial5writeEh>
		serial.write("ammonia:");
     ffc:	64 e5       	ldi	r22, 0x54	; 84
     ffe:	72 e0       	ldi	r23, 0x02	; 2
    1000:	83 eb       	ldi	r24, 0xB3	; 179
    1002:	92 e0       	ldi	r25, 0x02	; 2
    1004:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
		serial.write(ammoniaValue);
    1008:	60 91 df 02 	lds	r22, 0x02DF	; 0x8002df <ammoniaValue>
    100c:	83 eb       	ldi	r24, 0xB3	; 179
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN14SoftwareSerial5writeEh>
		serial.write("nitrite:");
    1014:	6d e5       	ldi	r22, 0x5D	; 93
    1016:	72 e0       	ldi	r23, 0x02	; 2
    1018:	83 eb       	ldi	r24, 0xB3	; 179
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
		serial.write(nitriteValue);
    1020:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <nitriteValue>
    1024:	83 eb       	ldi	r24, 0xB3	; 179
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN14SoftwareSerial5writeEh>
		serial.write("nitrate:");
    102c:	66 e6       	ldi	r22, 0x66	; 102
    102e:	72 e0       	ldi	r23, 0x02	; 2
    1030:	83 eb       	ldi	r24, 0xB3	; 179
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
		serial.write(nitrateValue);
    1038:	60 91 dd 02 	lds	r22, 0x02DD	; 0x8002dd <nitrateValue>
    103c:	83 eb       	ldi	r24, 0xB3	; 179
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 a0 19 	call	0x3340	; 0x3340 <_ZN14SoftwareSerial5writeEh>
		delay(200);
    1044:	68 ec       	ldi	r22, 0xC8	; 200
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 17 23 	call	0x462e	; 0x462e <delay>
		setLED(Off);
    1050:	40 91 e7 02 	lds	r20, 0x02E7	; 0x8002e7 <Off>
    1054:	50 91 e8 02 	lds	r21, 0x02E8	; 0x8002e8 <Off+0x1>
    1058:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <Off+0x2>
    105c:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <Off+0x3>
    1060:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Off+0x4>
    1064:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <Off+0x5>
	}
	default:
		break;
	}
}
    1068:	cf 91       	pop	r28
		serial.write("nitrite:");
		serial.write(nitriteValue);
		serial.write("nitrate:");
		serial.write(nitrateValue);
		delay(200);
		setLED(Off);
    106a:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <_Z6setLED8LEDColor>
	}
	default:
		break;
	}
}
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = false;
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	fc 01       	movw	r30, r24
    107e:	f0 80       	ld	r15, Z
    1080:	c1 81       	ldd	r28, Z+1	; 0x01
    1082:	d2 81       	ldd	r29, Z+2	; 0x02
    1084:	f8 94       	cli
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	0f 2d       	mov	r16, r15
    108a:	00 95       	com	r16
    108c:	80 23       	and	r24, r16
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	78 94       	sei
    1092:	1d e7       	ldi	r17, 0x7D	; 125
    1094:	11 50       	subi	r17, 0x01	; 1
    1096:	29 f1       	breq	.+74     	; 0x10e2 <_ZN7OneWire5resetEv+0x70>
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    10a0:	88 81       	ld	r24, Y
    10a2:	8f 21       	and	r24, r15
    10a4:	b9 f3       	breq	.-18     	; 0x1094 <_ZN7OneWire5resetEv+0x22>
    10a6:	f8 94       	cli
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	80 23       	and	r24, r16
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	8f 29       	or	r24, r15
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	78 94       	sei
    10b6:	80 ee       	ldi	r24, 0xE0	; 224
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    10be:	f8 94       	cli
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	08 23       	and	r16, r24
    10c4:	09 83       	std	Y+1, r16	; 0x01
    10c6:	86 e4       	ldi	r24, 0x46	; 70
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    10ce:	88 81       	ld	r24, Y
    10d0:	f8 22       	and	r15, r24
    10d2:	11 e0       	ldi	r17, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_ZN7OneWire5resetEv+0x66>
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	78 94       	sei
    10da:	8a e9       	ldi	r24, 0x9A	; 154
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    10e2:	81 2f       	mov	r24, r17
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	08 95       	ret

000010f0 <_ZN7OneWire9write_bitEh>:
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	fc 01       	movw	r30, r24
    10f8:	10 81       	ld	r17, Z
    10fa:	c1 81       	ldd	r28, Z+1	; 0x01
    10fc:	d2 81       	ldd	r29, Z+2	; 0x02
    10fe:	81 2f       	mov	r24, r17
    1100:	80 95       	com	r24
    1102:	60 ff       	sbrs	r22, 0
    1104:	12 c0       	rjmp	.+36     	; 0x112a <_ZN7OneWire9write_bitEh+0x3a>
    1106:	f8 94       	cli
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	89 23       	and	r24, r25
    110c:	8a 83       	std	Y+2, r24	; 0x02
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	81 2b       	or	r24, r17
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	18 2b       	or	r17, r24
    1120:	1a 83       	std	Y+2, r17	; 0x02
    1122:	78 94       	sei
    1124:	87 e3       	ldi	r24, 0x37	; 55
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	11 c0       	rjmp	.+34     	; 0x114c <_ZN7OneWire9write_bitEh+0x5c>
    112a:	f8 94       	cli
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	89 23       	and	r24, r25
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	81 2b       	or	r24, r17
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	81 e4       	ldi	r24, 0x41	; 65
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	18 2b       	or	r17, r24
    1144:	1a 83       	std	Y+2, r17	; 0x02
    1146:	78 94       	sei
    1148:	85 e0       	ldi	r24, 0x05	; 5
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0c 94 53 23 	jmp	0x46a6	; 0x46a6 <delayMicroseconds>

00001156 <_ZN7OneWire8read_bitEv>:
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	fc 01       	movw	r30, r24
    1160:	00 81       	ld	r16, Z
    1162:	c1 81       	ldd	r28, Z+1	; 0x01
    1164:	d2 81       	ldd	r29, Z+2	; 0x02
    1166:	f8 94       	cli
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	80 2b       	or	r24, r16
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	10 2f       	mov	r17, r16
    1172:	10 95       	com	r17
    1174:	81 23       	and	r24, r17
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	18 23       	and	r17, r24
    1184:	19 83       	std	Y+1, r17	; 0x01
    1186:	8a e0       	ldi	r24, 0x0A	; 10
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    118e:	c8 81       	ld	r28, Y
    1190:	78 94       	sei
    1192:	85 e3       	ldi	r24, 0x35	; 53
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 53 23 	call	0x46a6	; 0x46a6 <delayMicroseconds>
    119a:	c0 23       	and	r28, r16
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <_ZN7OneWire8read_bitEv+0x4c>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	08 95       	ret

000011ac <_ZN7OneWire5writeEhh>:
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	ec 01       	movw	r28, r24
    11bc:	d6 2e       	mov	r13, r22
    11be:	e4 2e       	mov	r14, r20
    11c0:	08 e0       	ldi	r16, 0x08	; 8
    11c2:	10 e0       	ldi	r17, 0x00	; 0
    11c4:	ff 24       	eor	r15, r15
    11c6:	f3 94       	inc	r15
    11c8:	61 e0       	ldi	r22, 0x01	; 1
    11ca:	8d 2d       	mov	r24, r13
    11cc:	8f 21       	and	r24, r15
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <_ZN7OneWire5writeEhh+0x26>
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	ce 01       	movw	r24, r28
    11d4:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN7OneWire9write_bitEh>
    11d8:	ff 0c       	add	r15, r15
    11da:	01 50       	subi	r16, 0x01	; 1
    11dc:	11 09       	sbc	r17, r1
    11de:	a1 f7       	brne	.-24     	; 0x11c8 <_ZN7OneWire5writeEhh+0x1c>
    11e0:	e1 10       	cpse	r14, r1
    11e2:	10 c0       	rjmp	.+32     	; 0x1204 <_ZN7OneWire5writeEhh+0x58>
    11e4:	f8 94       	cli
    11e6:	e9 81       	ldd	r30, Y+1	; 0x01
    11e8:	fa 81       	ldd	r31, Y+2	; 0x02
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	88 81       	ld	r24, Y
    11ee:	80 95       	com	r24
    11f0:	89 23       	and	r24, r25
    11f2:	81 83       	std	Z+1, r24	; 0x01
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	92 81       	ldd	r25, Z+2	; 0x02
    11fa:	88 81       	ld	r24, Y
    11fc:	80 95       	com	r24
    11fe:	89 23       	and	r24, r25
    1200:	82 83       	std	Z+2, r24	; 0x02
    1202:	78 94       	sei
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	08 95       	ret

00001214 <_ZN7OneWire4readEv>:
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	7c 01       	movw	r14, r24
    1222:	08 e0       	ldi	r16, 0x08	; 8
    1224:	10 e0       	ldi	r17, 0x00	; 0
    1226:	c0 e0       	ldi	r28, 0x00	; 0
    1228:	d1 e0       	ldi	r29, 0x01	; 1
    122a:	c7 01       	movw	r24, r14
    122c:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7OneWire8read_bitEv>
    1230:	81 11       	cpse	r24, r1
    1232:	cd 2b       	or	r28, r29
    1234:	dd 0f       	add	r29, r29
    1236:	01 50       	subi	r16, 0x01	; 1
    1238:	11 09       	sbc	r17, r1
    123a:	b9 f7       	brne	.-18     	; 0x122a <_ZN7OneWire4readEv+0x16>
    123c:	8c 2f       	mov	r24, r28
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	08 95       	ret

0000124c <_ZN7OneWire6selectEPKh>:
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	8c 01       	movw	r16, r24
    125a:	7b 01       	movw	r14, r22
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	65 e5       	ldi	r22, 0x55	; 85
    1260:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire5writeEhh>
    1264:	e7 01       	movw	r28, r14
    1266:	88 e0       	ldi	r24, 0x08	; 8
    1268:	e8 0e       	add	r14, r24
    126a:	f1 1c       	adc	r15, r1
    126c:	69 91       	ld	r22, Y+
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire5writeEhh>
    1276:	ce 15       	cp	r28, r14
    1278:	df 05       	cpc	r29, r15
    127a:	c1 f7       	brne	.-16     	; 0x126c <_ZN7OneWire6selectEPKh+0x20>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	08 95       	ret

0000128a <_ZN7OneWire12reset_searchEv>:
    128a:	fc 01       	movw	r30, r24
    128c:	13 86       	std	Z+11, r1	; 0x0b
    128e:	15 86       	std	Z+13, r1	; 0x0d
    1290:	14 86       	std	Z+12, r1	; 0x0c
    1292:	dc 01       	movw	r26, r24
    1294:	1b 96       	adiw	r26, 0x0b	; 11
    1296:	33 96       	adiw	r30, 0x03	; 3
    1298:	1e 92       	st	-X, r1
    129a:	ae 17       	cp	r26, r30
    129c:	bf 07       	cpc	r27, r31
    129e:	e1 f7       	brne	.-8      	; 0x1298 <_ZN7OneWire12reset_searchEv+0xe>
    12a0:	08 95       	ret

000012a2 <_ZN7OneWire5beginEh>:
    12a2:	1f 93       	push	r17
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
    12aa:	16 2f       	mov	r17, r22
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	81 2f       	mov	r24, r17
    12b0:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    12b4:	61 2f       	mov	r22, r17
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	fb 01       	movw	r30, r22
    12ba:	ea 53       	subi	r30, 0x3A	; 58
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	e4 91       	lpm	r30, Z
    12c0:	e8 83       	st	Y, r30
    12c2:	fb 01       	movw	r30, r22
    12c4:	e6 52       	subi	r30, 0x26	; 38
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	e4 91       	lpm	r30, Z
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	e2 51       	subi	r30, 0x12	; 18
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	85 91       	lpm	r24, Z+
    12d6:	94 91       	lpm	r25, Z
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	ce 01       	movw	r24, r28
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0c 94 45 09 	jmp	0x128a	; 0x128a <_ZN7OneWire12reset_searchEv>

000012e8 <_ZN7OneWire6searchEPhb>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
    12fc:	6b 01       	movw	r12, r22
    12fe:	14 2f       	mov	r17, r20
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = false;

   // if the last call was not the last one
   if (!LastDeviceFlag) {
    1300:	8d 85       	ldd	r24, Y+13	; 0x0d
    1302:	81 11       	cpse	r24, r1
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <_ZN7OneWire6searchEPhb+0x28>
      // 1-Wire reset
      if (!reset()) {
    1306:	ce 01       	movw	r24, r28
    1308:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN7OneWire5resetEv>
    130c:	81 11       	cpse	r24, r1
    130e:	05 c0       	rjmp	.+10     	; 0x131a <_ZN7OneWire6searchEPhb+0x32>
         // reset the search
         LastDiscrepancy = 0;
    1310:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = false;
    1312:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1314:	1c 86       	std	Y+12, r1	; 0x0c
         return false;
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	64 c0       	rjmp	.+200    	; 0x13e2 <_ZN7OneWire6searchEPhb+0xfa>
      }

      // issue the search command
      if (search_mode == true) {
        write(0xF0);   // NORMAL SEARCH
    131a:	40 e0       	ldi	r20, 0x00	; 0
         LastFamilyDiscrepancy = 0;
         return false;
      }

      // issue the search command
      if (search_mode == true) {
    131c:	11 23       	and	r17, r17
    131e:	11 f0       	breq	.+4      	; 0x1324 <_ZN7OneWire6searchEPhb+0x3c>
        write(0xF0);   // NORMAL SEARCH
    1320:	60 ef       	ldi	r22, 0xF0	; 240
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <_ZN7OneWire6searchEPhb+0x3e>
      } else {
        write(0xEC);   // CONDITIONAL SEARCH
    1324:	6c ee       	ldi	r22, 0xEC	; 236
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN7OneWire5writeEhh>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    132c:	01 e0       	ldi	r16, 0x01	; 1
    132e:	e1 2c       	mov	r14, r1
    1330:	b1 2c       	mov	r11, r1
    1332:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7OneWire8read_bitEv>
    133a:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    133c:	ce 01       	movw	r24, r28
    133e:	0e 94 ab 08 	call	0x1156	; 0x1156 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1)) {
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	f9 12       	cpse	r15, r25
    1346:	03 c0       	rjmp	.+6      	; 0x134e <_ZN7OneWire6searchEPhb+0x66>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	b1 f4       	brne	.+44     	; 0x1378 <_ZN7OneWire6searchEPhb+0x90>
    134c:	34 c0       	rjmp	.+104    	; 0x13b6 <_ZN7OneWire6searchEPhb+0xce>
    134e:	2e 2d       	mov	r18, r14
    1350:	30 e0       	ldi	r19, 0x00	; 0
            break;
         } else {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit) {
    1352:	f8 12       	cpse	r15, r24
    1354:	1b c0       	rjmp	.+54     	; 0x138c <_ZN7OneWire6searchEPhb+0xa4>
               search_direction = id_bit;  // bit write value for search
            } else {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy) {
    1356:	8b 85       	ldd	r24, Y+11	; 0x0b
    1358:	18 17       	cp	r17, r24
    135a:	38 f4       	brcc	.+14     	; 0x136a <_ZN7OneWire6searchEPhb+0x82>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    135c:	fe 01       	movw	r30, r28
    135e:	e2 0f       	add	r30, r18
    1360:	f3 1f       	adc	r31, r19
    1362:	83 81       	ldd	r24, Z+3	; 0x03
    1364:	80 23       	and	r24, r16
    1366:	41 f4       	brne	.+16     	; 0x1378 <_ZN7OneWire6searchEPhb+0x90>
    1368:	02 c0       	rjmp	.+4      	; 0x136e <_ZN7OneWire6searchEPhb+0x86>
               } else {
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    136a:	18 17       	cp	r17, r24
    136c:	29 f0       	breq	.+10     	; 0x1378 <_ZN7OneWire6searchEPhb+0x90>
    136e:	f1 2c       	mov	r15, r1
               // if 0 was picked then record its position in LastZero
               if (search_direction == 0) {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    1370:	19 30       	cpi	r17, 0x09	; 9
    1372:	58 f4       	brcc	.+22     	; 0x138a <_ZN7OneWire6searchEPhb+0xa2>
                     LastFamilyDiscrepancy = last_zero;
    1374:	1c 87       	std	Y+12, r17	; 0x0c
    1376:	09 c0       	rjmp	.+18     	; 0x138a <_ZN7OneWire6searchEPhb+0xa2>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1378:	fe 01       	movw	r30, r28
    137a:	ee 0d       	add	r30, r14
    137c:	f1 1d       	adc	r31, r1
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	80 2b       	or	r24, r16
    1382:	83 83       	std	Z+3, r24	; 0x03
    1384:	ff 24       	eor	r15, r15
    1386:	f3 94       	inc	r15
    1388:	09 c0       	rjmp	.+18     	; 0x139c <_ZN7OneWire6searchEPhb+0xb4>
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
bool OneWire::search(uint8_t *newAddr, bool search_mode /* = true */)
{
    138a:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    138c:	fe 01       	movw	r30, r28
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	80 2f       	mov	r24, r16
    1396:	80 95       	com	r24
    1398:	89 23       	and	r24, r25
    139a:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    139c:	6f 2d       	mov	r22, r15
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 78 08 	call	0x10f0	; 0x10f0 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    13a4:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    13a6:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0) {
    13a8:	11 f4       	brne	.+4      	; 0x13ae <_ZN7OneWire6searchEPhb+0xc6>
                rom_byte_number++;
    13aa:	e3 94       	inc	r14
                rom_byte_mask = 1;
    13ac:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    13ae:	87 e0       	ldi	r24, 0x07	; 7
    13b0:	8e 15       	cp	r24, r14
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <_ZN7OneWire6searchEPhb+0xce>
    13b4:	bf cf       	rjmp	.-130    	; 0x1334 <_ZN7OneWire6searchEPhb+0x4c>

      // if the search was successful then
      if (!(id_bit_number < 65)) {
    13b6:	11 34       	cpi	r17, 0x41	; 65
    13b8:	08 f4       	brcc	.+2      	; 0x13bc <_ZN7OneWire6searchEPhb+0xd4>
    13ba:	aa cf       	rjmp	.-172    	; 0x1310 <_ZN7OneWire6searchEPhb+0x28>
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    13bc:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0) {
    13be:	b1 10       	cpse	r11, r1
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <_ZN7OneWire6searchEPhb+0xde>
            LastDeviceFlag = true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	8d 87       	std	Y+13, r24	; 0x0d
         search_result = true;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0]) {
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 23       	and	r24, r24
    13ca:	09 f4       	brne	.+2      	; 0x13ce <_ZN7OneWire6searchEPhb+0xe6>
    13cc:	a1 cf       	rjmp	.-190    	; 0x1310 <_ZN7OneWire6searchEPhb+0x28>
    13ce:	de 01       	movw	r26, r28
    13d0:	13 96       	adiw	r26, 0x03	; 3
    13d2:	f6 01       	movw	r30, r12
    13d4:	2b 96       	adiw	r28, 0x0b	; 11
      LastDiscrepancy = 0;
      LastDeviceFlag = false;
      LastFamilyDiscrepancy = 0;
      search_result = false;
   } else {
      for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    13d6:	8d 91       	ld	r24, X+
    13d8:	81 93       	st	Z+, r24
    13da:	ca 17       	cp	r28, r26
    13dc:	db 07       	cpc	r29, r27
    13de:	d9 f7       	brne	.-10     	; 0x13d6 <_ZN7OneWire6searchEPhb+0xee>
    13e0:	81 e0       	ldi	r24, 0x01	; 1
   }
   return search_result;
  }
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	ff 90       	pop	r15
    13ec:	ef 90       	pop	r14
    13ee:	df 90       	pop	r13
    13f0:	cf 90       	pop	r12
    13f2:	bf 90       	pop	r11
    13f4:	08 95       	ret

000013f6 <_ZN7OneWire4crc8EPKhh>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    13f6:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    13f8:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    13fa:	61 50       	subi	r22, 0x01	; 1
    13fc:	98 f0       	brcs	.+38     	; 0x1424 <_ZN7OneWire4crc8EPKhh+0x2e>
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
    13fe:	2d 91       	ld	r18, X+
    1400:	98 2f       	mov	r25, r24
    1402:	92 27       	eor	r25, r18
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
    1404:	e9 2f       	mov	r30, r25
    1406:	ef 70       	andi	r30, 0x0F	; 15
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	ee 56       	subi	r30, 0x6E	; 110
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	24 91       	lpm	r18, Z
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
    1410:	92 95       	swap	r25
    1412:	9f 70       	andi	r25, 0x0F	; 15
    1414:	e9 2f       	mov	r30, r25
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	ee 55       	subi	r30, 0x5E	; 94
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	e4 91       	lpm	r30, Z
    141e:	82 2f       	mov	r24, r18
    1420:	8e 27       	eor	r24, r30
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1422:	eb cf       	rjmp	.-42     	; 0x13fa <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc2x16_table + (crc & 0x0f)) ^
		pgm_read_byte(dscrc2x16_table + 16 + ((crc >> 4) & 0x0f));
	}

	return crc;
}
    1424:	08 95       	ret

00001426 <_Z6phInitv>:
}

void calibratePH(long temperaturePH) {
	float voltage = analogRead(PH_PIN)/1024.0*5000;
	ph.calibration(voltage, temperaturePH);
}
    1426:	89 ef       	ldi	r24, 0xF9	; 249
    1428:	93 e0       	ldi	r25, 0x03	; 3
    142a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_ZN10DFRobot_PH5beginEv>

0000142e <_Z6calcPHv>:

float calcPH()
{
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
	float voltage = analogRead(PH_PIN);
    1442:	8e e0       	ldi	r24, 0x0E	; 14
    1444:	0e 94 99 23 	call	0x4732	; 0x4732 <analogRead>
    1448:	ec 01       	movw	r28, r24
	float slope = (7.0 - 4.0)/(neutralVoltage - acidVoltage);
    144a:	80 90 37 01 	lds	r8, 0x0137	; 0x800137 <neutralVoltage>
    144e:	90 90 38 01 	lds	r9, 0x0138	; 0x800138 <neutralVoltage+0x1>
    1452:	a0 90 39 01 	lds	r10, 0x0139	; 0x800139 <neutralVoltage+0x2>
    1456:	b0 90 3a 01 	lds	r11, 0x013A	; 0x80013a <neutralVoltage+0x3>
    145a:	20 91 33 01 	lds	r18, 0x0133	; 0x800133 <acidVoltage>
    145e:	30 91 34 01 	lds	r19, 0x0134	; 0x800134 <acidVoltage+0x1>
    1462:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <acidVoltage+0x2>
    1466:	50 91 36 01 	lds	r21, 0x0136	; 0x800136 <acidVoltage+0x3>
    146a:	c5 01       	movw	r24, r10
    146c:	b4 01       	movw	r22, r8
    146e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__subsf3>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	80 e4       	ldi	r24, 0x40	; 64
    147c:	90 e4       	ldi	r25, 0x40	; 64
    147e:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__divsf3>
    1482:	6b 01       	movw	r12, r22
    1484:	7c 01       	movw	r14, r24
	Serial.print(neutralVoltage);
	Serial.write("\nAcid Voltage:");
	Serial.print(acidVoltage);
	Serial.write("\nVoltage Measured:");
	Serial.print(voltage);*/
	return (slope * voltage) + intercept;
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	c5 01       	movw	r24, r10
    148c:	b4 01       	movw	r22, r8
    148e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 ee       	ldi	r24, 0xE0	; 224
    149c:	90 e4       	ldi	r25, 0x40	; 64
    149e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__subsf3>
    14a2:	4b 01       	movw	r8, r22
    14a4:	5c 01       	movw	r10, r24
    14a6:	be 01       	movw	r22, r28
    14a8:	dd 0f       	add	r29, r29
    14aa:	88 0b       	sbc	r24, r24
    14ac:	99 0b       	sbc	r25, r25
    14ae:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__floatsisf>
    14b2:	a7 01       	movw	r20, r14
    14b4:	96 01       	movw	r18, r12
    14b6:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	c5 01       	movw	r24, r10
    14c0:	b4 01       	movw	r22, r8
    14c2:	0e 94 ed 1b 	call	0x37da	; 0x37da <__addsf3>
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	af 90       	pop	r10
    14d6:	9f 90       	pop	r9
    14d8:	8f 90       	pop	r8
    14da:	08 95       	ret

000014dc <_GLOBAL__sub_I_ph>:
#include "phSensor.h"

DFRobot_PH ph;
    14dc:	89 ef       	ldi	r24, 0xF9	; 249
    14de:	93 e0       	ldi	r25, 0x03	; 3
    14e0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_ZN10DFRobot_PHC1Ev>

000014e4 <_GLOBAL__sub_D_ph>:
    14e4:	89 ef       	ldi	r24, 0xF9	; 249
    14e6:	93 e0       	ldi	r25, 0x03	; 3
    14e8:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_ZN10DFRobot_PHD1Ev>

000014ec <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    14f2:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 4e 26 	call	0x4c9c	; 0x4c9c <malloc>
    14fc:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    14fe:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	11 f4       	brne	.+4      	; 0x150a <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    1506:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    150a:	ce 01       	movw	r24, r28
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1512:	cf 93       	push	r28
    1514:	df 93       	push	r29
    if( pv )
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	51 f0       	breq	.+20     	; 0x152e <vPortFree+0x1c>
    151a:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    151c:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
        {
            free( pv );
    1520:	ce 01       	movw	r24, r28
    1522:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    }
}
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
        vTaskSuspendAll();
        {
            free( pv );
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    152a:	0c 94 df 12 	jmp	0x25be	; 0x25be <xTaskResumeAll>
    }
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1534:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1536:	03 96       	adiw	r24, 0x03	; 3
    1538:	92 83       	std	Z+2, r25	; 0x02
    153a:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    153c:	2f ef       	ldi	r18, 0xFF	; 255
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	34 83       	std	Z+4, r19	; 0x04
    1542:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1544:	96 83       	std	Z+6, r25	; 0x06
    1546:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1548:	90 87       	std	Z+8, r25	; 0x08
    154a:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    154c:	10 82       	st	Z, r1
    154e:	08 95       	ret

00001550 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1550:	fc 01       	movw	r30, r24
    1552:	11 86       	std	Z+9, r1	; 0x09
    1554:	10 86       	std	Z+8, r1	; 0x08
    1556:	08 95       	ret

00001558 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	9c 01       	movw	r18, r24
    155e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1560:	dc 01       	movw	r26, r24
    1562:	11 96       	adiw	r26, 0x01	; 1
    1564:	cd 91       	ld	r28, X+
    1566:	dc 91       	ld	r29, X
    1568:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    156a:	d3 83       	std	Z+3, r29	; 0x03
    156c:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	95 83       	std	Z+5, r25	; 0x05
    1574:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	9d 81       	ldd	r25, Y+5	; 0x05
    157a:	dc 01       	movw	r26, r24
    157c:	13 96       	adiw	r26, 0x03	; 3
    157e:	7c 93       	st	X, r23
    1580:	6e 93       	st	-X, r22
    1582:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1584:	7d 83       	std	Y+5, r23	; 0x05
    1586:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1588:	31 87       	std	Z+9, r19	; 0x09
    158a:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    158c:	f9 01       	movw	r30, r18
    158e:	80 81       	ld	r24, Z
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	8c 01       	movw	r16, r24
    15a4:	fb 01       	movw	r30, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    15aa:	8f 3f       	cpi	r24, 0xFF	; 255
    15ac:	2f ef       	ldi	r18, 0xFF	; 255
    15ae:	92 07       	cpc	r25, r18
    15b0:	21 f4       	brne	.+8      	; 0x15ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    15b2:	e8 01       	movw	r28, r16
    15b4:	af 81       	ldd	r26, Y+7	; 0x07
    15b6:	b8 85       	ldd	r27, Y+8	; 0x08
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <vListInsert+0x3c>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    15ba:	d8 01       	movw	r26, r16
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	12 96       	adiw	r26, 0x02	; 2
    15c0:	2d 91       	ld	r18, X+
    15c2:	3c 91       	ld	r19, X
    15c4:	13 97       	sbiw	r26, 0x03	; 3
    15c6:	e9 01       	movw	r28, r18
    15c8:	48 81       	ld	r20, Y
    15ca:	59 81       	ldd	r21, Y+1	; 0x01
    15cc:	84 17       	cp	r24, r20
    15ce:	95 07       	cpc	r25, r21
    15d0:	10 f0       	brcs	.+4      	; 0x15d6 <vListInsert+0x3c>
    15d2:	d9 01       	movw	r26, r18
    15d4:	f4 cf       	rjmp	.-24     	; 0x15be <vListInsert+0x24>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	8d 91       	ld	r24, X+
    15da:	9c 91       	ld	r25, X
    15dc:	13 97       	sbiw	r26, 0x03	; 3
    15de:	93 83       	std	Z+3, r25	; 0x03
    15e0:	82 83       	std	Z+2, r24	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15e2:	ec 01       	movw	r28, r24
    15e4:	fd 83       	std	Y+5, r31	; 0x05
    15e6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    15e8:	b5 83       	std	Z+5, r27	; 0x05
    15ea:	a4 83       	std	Z+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    15ec:	13 96       	adiw	r26, 0x03	; 3
    15ee:	fc 93       	st	X, r31
    15f0:	ee 93       	st	-X, r30
    15f2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    15f4:	11 87       	std	Z+9, r17	; 0x09
    15f6:	00 87       	std	Z+8, r16	; 0x08

    ( pxList->uxNumberOfItems )++;
    15f8:	f8 01       	movw	r30, r16
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1610:	a0 85       	ldd	r26, Z+8	; 0x08
    1612:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	24 81       	ldd	r18, Z+4	; 0x04
    161a:	35 81       	ldd	r19, Z+5	; 0x05
    161c:	ec 01       	movw	r28, r24
    161e:	3d 83       	std	Y+5, r19	; 0x05
    1620:	2c 83       	std	Y+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1622:	c4 81       	ldd	r28, Z+4	; 0x04
    1624:	d5 81       	ldd	r29, Z+5	; 0x05
    1626:	9b 83       	std	Y+3, r25	; 0x03
    1628:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    162a:	11 96       	adiw	r26, 0x01	; 1
    162c:	8d 91       	ld	r24, X+
    162e:	9c 91       	ld	r25, X
    1630:	12 97       	sbiw	r26, 0x02	; 2
    1632:	e8 17       	cp	r30, r24
    1634:	f9 07       	cpc	r31, r25
    1636:	21 f4       	brne	.+8      	; 0x1640 <uxListRemove+0x36>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1638:	12 96       	adiw	r26, 0x02	; 2
    163a:	dc 93       	st	X, r29
    163c:	ce 93       	st	-X, r28
    163e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1640:	11 86       	std	Z+9, r1	; 0x09
    1642:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1644:	8c 91       	ld	r24, X
    1646:	81 50       	subi	r24, 0x01	; 1
    1648:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    164a:	8c 91       	ld	r24, X
}
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1652:	31 e1       	ldi	r19, 0x11	; 17
    1654:	fc 01       	movw	r30, r24
    1656:	30 83       	st	Z, r19
    1658:	31 97       	sbiw	r30, 0x01	; 1
    165a:	22 e2       	ldi	r18, 0x22	; 34
    165c:	20 83       	st	Z, r18
    165e:	31 97       	sbiw	r30, 0x01	; 1
    1660:	a3 e3       	ldi	r26, 0x33	; 51
    1662:	a0 83       	st	Z, r26
    1664:	31 97       	sbiw	r30, 0x01	; 1
    1666:	60 83       	st	Z, r22
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	70 83       	st	Z, r23
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	10 82       	st	Z, r1
    1670:	31 97       	sbiw	r30, 0x01	; 1
    1672:	60 e8       	ldi	r22, 0x80	; 128
    1674:	60 83       	st	Z, r22
    1676:	31 97       	sbiw	r30, 0x01	; 1
    1678:	10 82       	st	Z, r1
    167a:	31 97       	sbiw	r30, 0x01	; 1
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	60 83       	st	Z, r22
    1680:	31 97       	sbiw	r30, 0x01	; 1
    1682:	63 e0       	ldi	r22, 0x03	; 3
    1684:	60 83       	st	Z, r22
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	64 e0       	ldi	r22, 0x04	; 4
    168a:	60 83       	st	Z, r22
    168c:	31 97       	sbiw	r30, 0x01	; 1
    168e:	65 e0       	ldi	r22, 0x05	; 5
    1690:	60 83       	st	Z, r22
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	66 e0       	ldi	r22, 0x06	; 6
    1696:	60 83       	st	Z, r22
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	67 e0       	ldi	r22, 0x07	; 7
    169c:	60 83       	st	Z, r22
    169e:	31 97       	sbiw	r30, 0x01	; 1
    16a0:	68 e0       	ldi	r22, 0x08	; 8
    16a2:	60 83       	st	Z, r22
    16a4:	31 97       	sbiw	r30, 0x01	; 1
    16a6:	69 e0       	ldi	r22, 0x09	; 9
    16a8:	60 83       	st	Z, r22
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	60 e1       	ldi	r22, 0x10	; 16
    16ae:	60 83       	st	Z, r22
    16b0:	31 97       	sbiw	r30, 0x01	; 1
    16b2:	30 83       	st	Z, r19
    16b4:	31 97       	sbiw	r30, 0x01	; 1
    16b6:	32 e1       	ldi	r19, 0x12	; 18
    16b8:	30 83       	st	Z, r19
    16ba:	31 97       	sbiw	r30, 0x01	; 1
    16bc:	33 e1       	ldi	r19, 0x13	; 19
    16be:	30 83       	st	Z, r19
    16c0:	31 97       	sbiw	r30, 0x01	; 1
    16c2:	34 e1       	ldi	r19, 0x14	; 20
    16c4:	30 83       	st	Z, r19
    16c6:	31 97       	sbiw	r30, 0x01	; 1
    16c8:	35 e1       	ldi	r19, 0x15	; 21
    16ca:	30 83       	st	Z, r19
    16cc:	31 97       	sbiw	r30, 0x01	; 1
    16ce:	36 e1       	ldi	r19, 0x16	; 22
    16d0:	30 83       	st	Z, r19
    16d2:	31 97       	sbiw	r30, 0x01	; 1
    16d4:	37 e1       	ldi	r19, 0x17	; 23
    16d6:	30 83       	st	Z, r19
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	38 e1       	ldi	r19, 0x18	; 24
    16dc:	30 83       	st	Z, r19
    16de:	31 97       	sbiw	r30, 0x01	; 1
    16e0:	39 e1       	ldi	r19, 0x19	; 25
    16e2:	30 83       	st	Z, r19
    16e4:	31 97       	sbiw	r30, 0x01	; 1
    16e6:	30 e2       	ldi	r19, 0x20	; 32
    16e8:	30 83       	st	Z, r19
    16ea:	31 97       	sbiw	r30, 0x01	; 1
    16ec:	31 e2       	ldi	r19, 0x21	; 33
    16ee:	30 83       	st	Z, r19
    16f0:	31 97       	sbiw	r30, 0x01	; 1
    16f2:	20 83       	st	Z, r18
    16f4:	31 97       	sbiw	r30, 0x01	; 1
    16f6:	23 e2       	ldi	r18, 0x23	; 35
    16f8:	20 83       	st	Z, r18
    16fa:	31 97       	sbiw	r30, 0x01	; 1
    16fc:	40 83       	st	Z, r20
    16fe:	31 97       	sbiw	r30, 0x01	; 1
    1700:	50 83       	st	Z, r21
    1702:	31 97       	sbiw	r30, 0x01	; 1
    1704:	26 e2       	ldi	r18, 0x26	; 38
    1706:	20 83       	st	Z, r18
    1708:	31 97       	sbiw	r30, 0x01	; 1
    170a:	27 e2       	ldi	r18, 0x27	; 39
    170c:	20 83       	st	Z, r18
    170e:	31 97       	sbiw	r30, 0x01	; 1
    1710:	28 e2       	ldi	r18, 0x28	; 40
    1712:	20 83       	st	Z, r18
    1714:	31 97       	sbiw	r30, 0x01	; 1
    1716:	29 e2       	ldi	r18, 0x29	; 41
    1718:	20 83       	st	Z, r18
    171a:	31 97       	sbiw	r30, 0x01	; 1
    171c:	20 e3       	ldi	r18, 0x30	; 48
    171e:	20 83       	st	Z, r18
    1720:	31 97       	sbiw	r30, 0x01	; 1
    1722:	21 e3       	ldi	r18, 0x31	; 49
    1724:	20 83       	st	Z, r18
    1726:	86 97       	sbiw	r24, 0x26	; 38
    1728:	08 95       	ret

0000172a <xPortStartScheduler>:
    172a:	a8 95       	wdr
    172c:	90 ec       	ldi	r25, 0xC0	; 192
    172e:	88 e1       	ldi	r24, 0x18	; 24
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	a8 95       	wdr
    1736:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    1740:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    1744:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    1748:	cd 91       	ld	r28, X+
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	dd 91       	ld	r29, X+
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	ff 91       	pop	r31
    1752:	ef 91       	pop	r30
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	1f 90       	pop	r1
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	0f 90       	pop	r0
    1794:	08 95       	ret
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	08 95       	ret

0000179a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    179a:	0f 92       	push	r0
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	0f 92       	push	r0
    17a2:	1f 92       	push	r1
    17a4:	11 24       	eor	r1, r1
    17a6:	2f 92       	push	r2
    17a8:	3f 92       	push	r3
    17aa:	4f 92       	push	r4
    17ac:	5f 92       	push	r5
    17ae:	6f 92       	push	r6
    17b0:	7f 92       	push	r7
    17b2:	8f 92       	push	r8
    17b4:	9f 92       	push	r9
    17b6:	af 92       	push	r10
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    17e6:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    17ea:	0d b6       	in	r0, 0x3d	; 61
    17ec:	0d 92       	st	X+, r0
    17ee:	0e b6       	in	r0, 0x3e	; 62
    17f0:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    17f2:	0e 94 9b 13 	call	0x2736	; 0x2736 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    17f6:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    17fa:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    17fe:	cd 91       	ld	r28, X+
    1800:	cd bf       	out	0x3d, r28	; 61
    1802:	dd 91       	ld	r29, X+
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	ff 91       	pop	r31
    1808:	ef 91       	pop	r30
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	bf 91       	pop	r27
    1810:	af 91       	pop	r26
    1812:	9f 91       	pop	r25
    1814:	8f 91       	pop	r24
    1816:	7f 91       	pop	r23
    1818:	6f 91       	pop	r22
    181a:	5f 91       	pop	r21
    181c:	4f 91       	pop	r20
    181e:	3f 91       	pop	r19
    1820:	2f 91       	pop	r18
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	7f 90       	pop	r7
    1838:	6f 90       	pop	r6
    183a:	5f 90       	pop	r5
    183c:	4f 90       	pop	r4
    183e:	3f 90       	pop	r3
    1840:	2f 90       	pop	r2
    1842:	1f 90       	pop	r1
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    184a:	08 95       	ret

0000184c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	0f 92       	push	r0
    1854:	1f 92       	push	r1
    1856:	11 24       	eor	r1, r1
    1858:	2f 92       	push	r2
    185a:	3f 92       	push	r3
    185c:	4f 92       	push	r4
    185e:	5f 92       	push	r5
    1860:	6f 92       	push	r6
    1862:	7f 92       	push	r7
    1864:	8f 92       	push	r8
    1866:	9f 92       	push	r9
    1868:	af 92       	push	r10
    186a:	bf 92       	push	r11
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    1898:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    189c:	0d b6       	in	r0, 0x3d	; 61
    189e:	0d 92       	st	X+, r0
    18a0:	0e b6       	in	r0, 0x3e	; 62
    18a2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    18a4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
    18a6:	0e 94 33 12 	call	0x2466	; 0x2466 <xTaskIncrementTick>
    18aa:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    18ac:	0e 94 9b 13 	call	0x2736	; 0x2736 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    18b0:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    18b4:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    18b8:	cd 91       	ld	r28, X+
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	dd 91       	ld	r29, X+
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	bf 91       	pop	r27
    18ca:	af 91       	pop	r26
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	7f 91       	pop	r23
    18d2:	6f 91       	pop	r22
    18d4:	5f 91       	pop	r21
    18d6:	4f 91       	pop	r20
    18d8:	3f 91       	pop	r19
    18da:	2f 91       	pop	r18
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	cf 90       	pop	r12
    18e8:	bf 90       	pop	r11
    18ea:	af 90       	pop	r10
    18ec:	9f 90       	pop	r9
    18ee:	8f 90       	pop	r8
    18f0:	7f 90       	pop	r7
    18f2:	6f 90       	pop	r6
    18f4:	5f 90       	pop	r5
    18f6:	4f 90       	pop	r4
    18f8:	3f 90       	pop	r3
    18fa:	2f 90       	pop	r2
    18fc:	1f 90       	pop	r1
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1904:	08 95       	ret

00001906 <__vector_6>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1906:	0e 94 26 0c 	call	0x184c	; 0x184c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    190a:	18 95       	reti

0000190c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	0f 92       	push	r0
    1912:	fc 01       	movw	r30, r24
    1914:	92 8d       	ldd	r25, Z+26	; 0x1a
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	91 11       	cpse	r25, r1
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	08 95       	ret

00001922 <prvCopyDataToQueue>:
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
    192c:	04 2f       	mov	r16, r20
    192e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1930:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1932:	41 11       	cpse	r20, r1
    1934:	0b c0       	rjmp	.+22     	; 0x194c <prvCopyDataToQueue+0x2a>
    1936:	88 81       	ld	r24, Y
    1938:	99 81       	ldd	r25, Y+1	; 0x01
    193a:	89 2b       	or	r24, r25
    193c:	e9 f5       	brne	.+122    	; 0x19b8 <prvCopyDataToQueue+0x96>
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9d 81       	ldd	r25, Y+5	; 0x05
    1942:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <xTaskPriorityDisinherit>
    1946:	1d 82       	std	Y+5, r1	; 0x05
    1948:	1c 82       	std	Y+4, r1	; 0x04
    194a:	37 c0       	rjmp	.+110    	; 0x19ba <prvCopyDataToQueue+0x98>
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	01 11       	cpse	r16, r1
    1950:	15 c0       	rjmp	.+42     	; 0x197c <prvCopyDataToQueue+0x5a>
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	9b 81       	ldd	r25, Y+3	; 0x03
    1956:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
    195a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	82 0f       	add	r24, r18
    1962:	91 1d       	adc	r25, r1
    1964:	9b 83       	std	Y+3, r25	; 0x03
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	2c 81       	ldd	r18, Y+4	; 0x04
    196a:	3d 81       	ldd	r19, Y+5	; 0x05
    196c:	82 17       	cp	r24, r18
    196e:	93 07       	cpc	r25, r19
    1970:	18 f1       	brcs	.+70     	; 0x19b8 <prvCopyDataToQueue+0x96>
    1972:	88 81       	ld	r24, Y
    1974:	99 81       	ldd	r25, Y+1	; 0x01
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	8a 83       	std	Y+2, r24	; 0x02
    197a:	1e c0       	rjmp	.+60     	; 0x19b8 <prvCopyDataToQueue+0x96>
    197c:	8e 81       	ldd	r24, Y+6	; 0x06
    197e:	9f 81       	ldd	r25, Y+7	; 0x07
    1980:	0e 94 6f 27 	call	0x4ede	; 0x4ede <memcpy>
    1984:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	91 95       	neg	r25
    198a:	81 95       	neg	r24
    198c:	91 09       	sbc	r25, r1
    198e:	2e 81       	ldd	r18, Y+6	; 0x06
    1990:	3f 81       	ldd	r19, Y+7	; 0x07
    1992:	28 0f       	add	r18, r24
    1994:	39 1f       	adc	r19, r25
    1996:	3f 83       	std	Y+7, r19	; 0x07
    1998:	2e 83       	std	Y+6, r18	; 0x06
    199a:	48 81       	ld	r20, Y
    199c:	59 81       	ldd	r21, Y+1	; 0x01
    199e:	24 17       	cp	r18, r20
    19a0:	35 07       	cpc	r19, r21
    19a2:	30 f4       	brcc	.+12     	; 0x19b0 <prvCopyDataToQueue+0x8e>
    19a4:	2c 81       	ldd	r18, Y+4	; 0x04
    19a6:	3d 81       	ldd	r19, Y+5	; 0x05
    19a8:	82 0f       	add	r24, r18
    19aa:	93 1f       	adc	r25, r19
    19ac:	9f 83       	std	Y+7, r25	; 0x07
    19ae:	8e 83       	std	Y+6, r24	; 0x06
    19b0:	02 30       	cpi	r16, 0x02	; 2
    19b2:	11 f4       	brne	.+4      	; 0x19b8 <prvCopyDataToQueue+0x96>
    19b4:	11 11       	cpse	r17, r1
    19b6:	11 50       	subi	r17, 0x01	; 1
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	1f 5f       	subi	r17, 0xFF	; 255
    19bc:	1a 8f       	std	Y+26, r17	; 0x1a
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <prvCopyDataFromQueue>:
    19c8:	fc 01       	movw	r30, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	44 8d       	ldd	r20, Z+28	; 0x1c
    19ce:	44 23       	and	r20, r20
    19d0:	a1 f0       	breq	.+40     	; 0x19fa <prvCopyDataFromQueue+0x32>
    19d2:	50 e0       	ldi	r21, 0x00	; 0
    19d4:	26 81       	ldd	r18, Z+6	; 0x06
    19d6:	37 81       	ldd	r19, Z+7	; 0x07
    19d8:	24 0f       	add	r18, r20
    19da:	35 1f       	adc	r19, r21
    19dc:	37 83       	std	Z+7, r19	; 0x07
    19de:	26 83       	std	Z+6, r18	; 0x06
    19e0:	64 81       	ldd	r22, Z+4	; 0x04
    19e2:	75 81       	ldd	r23, Z+5	; 0x05
    19e4:	26 17       	cp	r18, r22
    19e6:	37 07       	cpc	r19, r23
    19e8:	20 f0       	brcs	.+8      	; 0x19f2 <prvCopyDataFromQueue+0x2a>
    19ea:	20 81       	ld	r18, Z
    19ec:	31 81       	ldd	r19, Z+1	; 0x01
    19ee:	37 83       	std	Z+7, r19	; 0x07
    19f0:	26 83       	std	Z+6, r18	; 0x06
    19f2:	66 81       	ldd	r22, Z+6	; 0x06
    19f4:	77 81       	ldd	r23, Z+7	; 0x07
    19f6:	0c 94 6f 27 	jmp	0x4ede	; 0x4ede <memcpy>
    19fa:	08 95       	ret

000019fc <prvUnlockQueue>:
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	ec 01       	movw	r28, r24
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	0f 92       	push	r0
    1a0e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a10:	7c 01       	movw	r14, r24
    1a12:	81 e1       	ldi	r24, 0x11	; 17
    1a14:	e8 0e       	add	r14, r24
    1a16:	f1 1c       	adc	r15, r1
    1a18:	11 16       	cp	r1, r17
    1a1a:	5c f4       	brge	.+22     	; 0x1a32 <prvUnlockQueue+0x36>
    1a1c:	89 89       	ldd	r24, Y+17	; 0x11
    1a1e:	88 23       	and	r24, r24
    1a20:	41 f0       	breq	.+16     	; 0x1a32 <prvUnlockQueue+0x36>
    1a22:	c7 01       	movw	r24, r14
    1a24:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1a28:	81 11       	cpse	r24, r1
    1a2a:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskMissedYield>
    1a2e:	11 50       	subi	r17, 0x01	; 1
    1a30:	f3 cf       	rjmp	.-26     	; 0x1a18 <prvUnlockQueue+0x1c>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	8e 8f       	std	Y+30, r24	; 0x1e
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	0f 92       	push	r0
    1a40:	1d 8d       	ldd	r17, Y+29	; 0x1d
    1a42:	7e 01       	movw	r14, r28
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	e8 0e       	add	r14, r24
    1a48:	f1 1c       	adc	r15, r1
    1a4a:	11 16       	cp	r1, r17
    1a4c:	5c f4       	brge	.+22     	; 0x1a64 <prvUnlockQueue+0x68>
    1a4e:	88 85       	ldd	r24, Y+8	; 0x08
    1a50:	88 23       	and	r24, r24
    1a52:	41 f0       	breq	.+16     	; 0x1a64 <prvUnlockQueue+0x68>
    1a54:	c7 01       	movw	r24, r14
    1a56:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	0e 94 a0 14 	call	0x2940	; 0x2940 <vTaskMissedYield>
    1a60:	11 50       	subi	r17, 0x01	; 1
    1a62:	f3 cf       	rjmp	.-26     	; 0x1a4a <prvUnlockQueue+0x4e>
    1a64:	8f ef       	ldi	r24, 0xFF	; 255
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	08 95       	ret

00001a78 <xQueueGenericReset>:
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	ec 01       	movw	r28, r24
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	0f 92       	push	r0
    1a84:	48 81       	ld	r20, Y
    1a86:	59 81       	ldd	r21, Y+1	; 0x01
    1a88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a8a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a8c:	9a 01       	movw	r18, r20
    1a8e:	87 9f       	mul	r24, r23
    1a90:	20 0d       	add	r18, r0
    1a92:	31 1d       	adc	r19, r1
    1a94:	11 24       	eor	r1, r1
    1a96:	3d 83       	std	Y+5, r19	; 0x05
    1a98:	2c 83       	std	Y+4, r18	; 0x04
    1a9a:	1a 8e       	std	Y+26, r1	; 0x1a
    1a9c:	5b 83       	std	Y+3, r21	; 0x03
    1a9e:	4a 83       	std	Y+2, r20	; 0x02
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	78 9f       	mul	r23, r24
    1aa6:	90 01       	movw	r18, r0
    1aa8:	79 9f       	mul	r23, r25
    1aaa:	30 0d       	add	r19, r0
    1aac:	11 24       	eor	r1, r1
    1aae:	ca 01       	movw	r24, r20
    1ab0:	82 0f       	add	r24, r18
    1ab2:	93 1f       	adc	r25, r19
    1ab4:	9f 83       	std	Y+7, r25	; 0x07
    1ab6:	8e 83       	std	Y+6, r24	; 0x06
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	8d 8f       	std	Y+29, r24	; 0x1d
    1abc:	8e 8f       	std	Y+30, r24	; 0x1e
    1abe:	61 11       	cpse	r22, r1
    1ac0:	0c c0       	rjmp	.+24     	; 0x1ada <xQueueGenericReset+0x62>
    1ac2:	88 85       	ldd	r24, Y+8	; 0x08
    1ac4:	88 23       	and	r24, r24
    1ac6:	89 f0       	breq	.+34     	; 0x1aea <xQueueGenericReset+0x72>
    1ac8:	ce 01       	movw	r24, r28
    1aca:	08 96       	adiw	r24, 0x08	; 8
    1acc:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1ad0:	88 23       	and	r24, r24
    1ad2:	59 f0       	breq	.+22     	; 0x1aea <xQueueGenericReset+0x72>
    1ad4:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <xQueueGenericReset+0x72>
    1ada:	ce 01       	movw	r24, r28
    1adc:	08 96       	adiw	r24, 0x08	; 8
    1ade:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	41 96       	adiw	r24, 0x11	; 17
    1ae6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    1aea:	0f 90       	pop	r0
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <xQueueGenericCreate>:
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	08 2f       	mov	r16, r24
    1b00:	16 2f       	mov	r17, r22
    1b02:	66 23       	and	r22, r22
    1b04:	21 f0       	breq	.+8      	; 0x1b0e <xQueueGenericCreate+0x18>
    1b06:	86 9f       	mul	r24, r22
    1b08:	c0 01       	movw	r24, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <xQueueGenericCreate+0x1c>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	4f 96       	adiw	r24, 0x1f	; 31
    1b14:	0e 94 76 0a 	call	0x14ec	; 0x14ec <pvPortMalloc>
    1b18:	ec 01       	movw	r28, r24
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	71 f0       	breq	.+28     	; 0x1b3a <xQueueGenericCreate+0x44>
    1b1e:	11 11       	cpse	r17, r1
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <xQueueGenericCreate+0x32>
    1b22:	99 83       	std	Y+1, r25	; 0x01
    1b24:	88 83       	st	Y, r24
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <xQueueGenericCreate+0x38>
    1b28:	4f 96       	adiw	r24, 0x1f	; 31
    1b2a:	99 83       	std	Y+1, r25	; 0x01
    1b2c:	88 83       	st	Y, r24
    1b2e:	0b 8f       	std	Y+27, r16	; 0x1b
    1b30:	1c 8f       	std	Y+28, r17	; 0x1c
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	ce 01       	movw	r24, r28
    1b36:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <xQueueGenericReset>
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	df 91       	pop	r29
    1b3e:	cf 91       	pop	r28
    1b40:	1f 91       	pop	r17
    1b42:	0f 91       	pop	r16
    1b44:	08 95       	ret

00001b46 <xQueueGenericSend>:
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <xQueueGenericSend+0x14>
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <xQueueGenericSend+0x16>
    1b5c:	1f 92       	push	r1
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	8c 01       	movw	r16, r24
    1b64:	6b 01       	movw	r12, r22
    1b66:	5d 83       	std	Y+5, r21	; 0x05
    1b68:	4c 83       	std	Y+4, r20	; 0x04
    1b6a:	f2 2e       	mov	r15, r18
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	58 01       	movw	r10, r16
    1b70:	98 e0       	ldi	r25, 0x08	; 8
    1b72:	a9 0e       	add	r10, r25
    1b74:	b1 1c       	adc	r11, r1
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	0f 92       	push	r0
    1b7c:	f8 01       	movw	r30, r16
    1b7e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1b80:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b82:	29 17       	cp	r18, r25
    1b84:	18 f0       	brcs	.+6      	; 0x1b8c <xQueueGenericSend+0x46>
    1b86:	f2 e0       	ldi	r31, 0x02	; 2
    1b88:	ff 12       	cpse	r15, r31
    1b8a:	14 c0       	rjmp	.+40     	; 0x1bb4 <xQueueGenericSend+0x6e>
    1b8c:	4f 2d       	mov	r20, r15
    1b8e:	b6 01       	movw	r22, r12
    1b90:	c8 01       	movw	r24, r16
    1b92:	0e 94 91 0c 	call	0x1922	; 0x1922 <prvCopyDataToQueue>
    1b96:	f8 01       	movw	r30, r16
    1b98:	91 89       	ldd	r25, Z+17	; 0x11
    1b9a:	99 23       	and	r25, r25
    1b9c:	21 f0       	breq	.+8      	; 0x1ba6 <xQueueGenericSend+0x60>
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	41 96       	adiw	r24, 0x11	; 17
    1ba2:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	50 c0       	rjmp	.+160    	; 0x1c54 <xQueueGenericSend+0x10e>
    1bb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb8:	23 2b       	or	r18, r19
    1bba:	19 f4       	brne	.+6      	; 0x1bc2 <xQueueGenericSend+0x7c>
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	48 c0       	rjmp	.+144    	; 0x1c52 <xQueueGenericSend+0x10c>
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <xQueueGenericSend+0x88>
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
    1bca:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskInternalSetTimeOutState>
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	0f 92       	push	r0
    1bdc:	f8 01       	movw	r30, r16
    1bde:	85 8d       	ldd	r24, Z+29	; 0x1d
    1be0:	8f 3f       	cpi	r24, 0xFF	; 255
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <xQueueGenericSend+0xa0>
    1be4:	15 8e       	std	Z+29, r1	; 0x1d
    1be6:	f8 01       	movw	r30, r16
    1be8:	86 8d       	ldd	r24, Z+30	; 0x1e
    1bea:	8f 3f       	cpi	r24, 0xFF	; 255
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <xQueueGenericSend+0xaa>
    1bee:	16 8e       	std	Z+30, r1	; 0x1e
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	be 01       	movw	r22, r28
    1bf6:	6c 5f       	subi	r22, 0xFC	; 252
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskCheckForTimeOut>
    1c02:	81 11       	cpse	r24, r1
    1c04:	21 c0       	rjmp	.+66     	; 0x1c48 <xQueueGenericSend+0x102>
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	0f 92       	push	r0
    1c0c:	f8 01       	movw	r30, r16
    1c0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c10:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	98 13       	cpse	r25, r24
    1c18:	11 c0       	rjmp	.+34     	; 0x1c3c <xQueueGenericSend+0xf6>
    1c1a:	6c 81       	ldd	r22, Y+4	; 0x04
    1c1c:	7d 81       	ldd	r23, Y+5	; 0x05
    1c1e:	c5 01       	movw	r24, r10
    1c20:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskPlaceOnEventList>
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1c2a:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1c2e:	88 23       	and	r24, r24
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <xQueueGenericSend+0xf0>
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	a0 cf       	rjmp	.-192    	; 0x1b76 <xQueueGenericSend+0x30>
    1c36:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1c3a:	fb cf       	rjmp	.-10     	; 0x1c32 <xQueueGenericSend+0xec>
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1c42:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1c46:	f5 cf       	rjmp	.-22     	; 0x1c32 <xQueueGenericSend+0xec>
    1c48:	c8 01       	movw	r24, r16
    1c4a:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1c4e:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	df 91       	pop	r29
    1c60:	cf 91       	pop	r28
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	08 95       	ret

00001c72 <xQueueGenericSendFromISR>:
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	ec 01       	movw	r28, r24
    1c7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c82:	98 17       	cp	r25, r24
    1c84:	10 f0       	brcs	.+4      	; 0x1c8a <xQueueGenericSendFromISR+0x18>
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	e1 f4       	brne	.+56     	; 0x1cc2 <xQueueGenericSendFromISR+0x50>
    1c8a:	7a 01       	movw	r14, r20
    1c8c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c8e:	42 2f       	mov	r20, r18
    1c90:	ce 01       	movw	r24, r28
    1c92:	0e 94 91 0c 	call	0x1922	; 0x1922 <prvCopyDataToQueue>
    1c96:	1f 3f       	cpi	r17, 0xFF	; 255
    1c98:	81 f4       	brne	.+32     	; 0x1cba <xQueueGenericSendFromISR+0x48>
    1c9a:	89 89       	ldd	r24, Y+17	; 0x11
    1c9c:	88 23       	and	r24, r24
    1c9e:	79 f0       	breq	.+30     	; 0x1cbe <xQueueGenericSendFromISR+0x4c>
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	41 96       	adiw	r24, 0x11	; 17
    1ca4:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1ca8:	88 23       	and	r24, r24
    1caa:	49 f0       	breq	.+18     	; 0x1cbe <xQueueGenericSendFromISR+0x4c>
    1cac:	e1 14       	cp	r14, r1
    1cae:	f1 04       	cpc	r15, r1
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <xQueueGenericSendFromISR+0x4c>
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	80 83       	st	Z, r24
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <xQueueGenericSendFromISR+0x52>
    1cba:	1f 5f       	subi	r17, 0xFF	; 255
    1cbc:	1e 8f       	std	Y+30, r17	; 0x1e
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <xQueueGenericSendFromISR+0x52>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	08 95       	ret

00001cd0 <xQueueGiveFromISR>:
    1cd0:	cf 93       	push	r28
    1cd2:	df 93       	push	r29
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cd8:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cda:	98 17       	cp	r25, r24
    1cdc:	c0 f4       	brcc	.+48     	; 0x1d0e <xQueueGiveFromISR+0x3e>
    1cde:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ce0:	9f 5f       	subi	r25, 0xFF	; 255
    1ce2:	92 8f       	std	Z+26, r25	; 0x1a
    1ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce6:	79 f4       	brne	.+30     	; 0x1d06 <xQueueGiveFromISR+0x36>
    1ce8:	81 89       	ldd	r24, Z+17	; 0x11
    1cea:	88 23       	and	r24, r24
    1cec:	71 f0       	breq	.+28     	; 0x1d0a <xQueueGiveFromISR+0x3a>
    1cee:	eb 01       	movw	r28, r22
    1cf0:	cf 01       	movw	r24, r30
    1cf2:	41 96       	adiw	r24, 0x11	; 17
    1cf4:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1cf8:	88 23       	and	r24, r24
    1cfa:	39 f0       	breq	.+14     	; 0x1d0a <xQueueGiveFromISR+0x3a>
    1cfc:	20 97       	sbiw	r28, 0x00	; 0
    1cfe:	29 f0       	breq	.+10     	; 0x1d0a <xQueueGiveFromISR+0x3a>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	88 83       	st	Y, r24
    1d04:	05 c0       	rjmp	.+10     	; 0x1d10 <xQueueGiveFromISR+0x40>
    1d06:	8f 5f       	subi	r24, 0xFF	; 255
    1d08:	86 8f       	std	Z+30, r24	; 0x1e
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <xQueueGiveFromISR+0x40>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	08 95       	ret

00001d16 <xQueueReceive>:
    1d16:	af 92       	push	r10
    1d18:	bf 92       	push	r11
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <xQueueReceive+0x14>
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <xQueueReceive+0x16>
    1d2c:	1f 92       	push	r1
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	8c 01       	movw	r16, r24
    1d34:	6b 01       	movw	r12, r22
    1d36:	5d 83       	std	Y+5, r21	; 0x05
    1d38:	4c 83       	std	Y+4, r20	; 0x04
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	58 01       	movw	r10, r16
    1d3e:	91 e1       	ldi	r25, 0x11	; 17
    1d40:	a9 0e       	add	r10, r25
    1d42:	b1 1c       	adc	r11, r1
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	0f 92       	push	r0
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1d4e:	ff 20       	and	r15, r15
    1d50:	a9 f0       	breq	.+42     	; 0x1d7c <xQueueReceive+0x66>
    1d52:	b6 01       	movw	r22, r12
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <prvCopyDataFromQueue>
    1d5a:	fa 94       	dec	r15
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	f2 8e       	std	Z+26, r15	; 0x1a
    1d60:	80 85       	ldd	r24, Z+8	; 0x08
    1d62:	88 23       	and	r24, r24
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <xQueueReceive+0x5e>
    1d66:	c8 01       	movw	r24, r16
    1d68:	08 96       	adiw	r24, 0x08	; 8
    1d6a:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1d74:	0f 90       	pop	r0
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	50 c0       	rjmp	.+160    	; 0x1e1c <xQueueReceive+0x106>
    1d7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d80:	23 2b       	or	r18, r19
    1d82:	19 f4       	brne	.+6      	; 0x1d8a <xQueueReceive+0x74>
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	48 c0       	rjmp	.+144    	; 0x1e1a <xQueueReceive+0x104>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <xQueueReceive+0x80>
    1d8e:	ce 01       	movw	r24, r28
    1d90:	01 96       	adiw	r24, 0x01	; 1
    1d92:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskInternalSetTimeOutState>
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	0f 92       	push	r0
    1da4:	f8 01       	movw	r30, r16
    1da6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1da8:	8f 3f       	cpi	r24, 0xFF	; 255
    1daa:	09 f4       	brne	.+2      	; 0x1dae <xQueueReceive+0x98>
    1dac:	15 8e       	std	Z+29, r1	; 0x1d
    1dae:	f8 01       	movw	r30, r16
    1db0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1db2:	8f 3f       	cpi	r24, 0xFF	; 255
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <xQueueReceive+0xa2>
    1db6:	16 8e       	std	Z+30, r1	; 0x1e
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	be 01       	movw	r22, r28
    1dbe:	6c 5f       	subi	r22, 0xFC	; 252
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskCheckForTimeOut>
    1dca:	81 11       	cpse	r24, r1
    1dcc:	1c c0       	rjmp	.+56     	; 0x1e06 <xQueueReceive+0xf0>
    1dce:	c8 01       	movw	r24, r16
    1dd0:	0e 94 86 0c 	call	0x190c	; 0x190c <prvIsQueueEmpty>
    1dd4:	88 23       	and	r24, r24
    1dd6:	89 f0       	breq	.+34     	; 0x1dfa <xQueueReceive+0xe4>
    1dd8:	6c 81       	ldd	r22, Y+4	; 0x04
    1dda:	7d 81       	ldd	r23, Y+5	; 0x05
    1ddc:	c5 01       	movw	r24, r10
    1dde:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskPlaceOnEventList>
    1de2:	c8 01       	movw	r24, r16
    1de4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1de8:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1dec:	88 23       	and	r24, r24
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <xQueueReceive+0xde>
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	a8 cf       	rjmp	.-176    	; 0x1d44 <xQueueReceive+0x2e>
    1df4:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1df8:	fb cf       	rjmp	.-10     	; 0x1df0 <xQueueReceive+0xda>
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1e00:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1e04:	f5 cf       	rjmp	.-22     	; 0x1df0 <xQueueReceive+0xda>
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1e0c:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1e10:	c8 01       	movw	r24, r16
    1e12:	0e 94 86 0c 	call	0x190c	; 0x190c <prvIsQueueEmpty>
    1e16:	88 23       	and	r24, r24
    1e18:	59 f3       	breq	.-42     	; 0x1df0 <xQueueReceive+0xda>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	08 95       	ret

00001e3a <xQueueSemaphoreTake>:
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <xQueueSemaphoreTake+0x10>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <xQueueSemaphoreTake+0x12>
    1e4c:	1f 92       	push	r1
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8c 01       	movw	r16, r24
    1e54:	7d 83       	std	Y+5, r23	; 0x05
    1e56:	6c 83       	std	Y+4, r22	; 0x04
    1e58:	f1 2c       	mov	r15, r1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	68 01       	movw	r12, r16
    1e5e:	81 e1       	ldi	r24, 0x11	; 17
    1e60:	c8 0e       	add	r12, r24
    1e62:	d1 1c       	adc	r13, r1
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	0f 92       	push	r0
    1e6a:	d8 01       	movw	r26, r16
    1e6c:	5a 96       	adiw	r26, 0x1a	; 26
    1e6e:	8c 91       	ld	r24, X
    1e70:	5a 97       	sbiw	r26, 0x1a	; 26
    1e72:	88 23       	and	r24, r24
    1e74:	e9 f0       	breq	.+58     	; 0x1eb0 <xQueueSemaphoreTake+0x76>
    1e76:	81 50       	subi	r24, 0x01	; 1
    1e78:	5a 96       	adiw	r26, 0x1a	; 26
    1e7a:	8c 93       	st	X, r24
    1e7c:	5a 97       	sbiw	r26, 0x1a	; 26
    1e7e:	8d 91       	ld	r24, X+
    1e80:	9c 91       	ld	r25, X
    1e82:	89 2b       	or	r24, r25
    1e84:	29 f4       	brne	.+10     	; 0x1e90 <xQueueSemaphoreTake+0x56>
    1e86:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <pvTaskIncrementMutexHeldCount>
    1e8a:	f8 01       	movw	r30, r16
    1e8c:	95 83       	std	Z+5, r25	; 0x05
    1e8e:	84 83       	std	Z+4, r24	; 0x04
    1e90:	d8 01       	movw	r26, r16
    1e92:	18 96       	adiw	r26, 0x08	; 8
    1e94:	8c 91       	ld	r24, X
    1e96:	88 23       	and	r24, r24
    1e98:	39 f0       	breq	.+14     	; 0x1ea8 <xQueueSemaphoreTake+0x6e>
    1e9a:	c8 01       	movw	r24, r16
    1e9c:	08 96       	adiw	r24, 0x08	; 8
    1e9e:	0e 94 22 14 	call	0x2844	; 0x2844 <xTaskRemoveFromEventList>
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	7a c0       	rjmp	.+244    	; 0x1fa4 <xQueueSemaphoreTake+0x16a>
    1eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb4:	23 2b       	or	r18, r19
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <xQueueSemaphoreTake+0x80>
    1eb8:	72 c0       	rjmp	.+228    	; 0x1f9e <xQueueSemaphoreTake+0x164>
    1eba:	91 11       	cpse	r25, r1
    1ebc:	04 c0       	rjmp	.+8      	; 0x1ec6 <xQueueSemaphoreTake+0x8c>
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskInternalSetTimeOutState>
    1ec6:	0f 90       	pop	r0
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	0f 92       	push	r0
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eda:	09 f4       	brne	.+2      	; 0x1ede <xQueueSemaphoreTake+0xa4>
    1edc:	15 8e       	std	Z+29, r1	; 0x1d
    1ede:	d8 01       	movw	r26, r16
    1ee0:	5e 96       	adiw	r26, 0x1e	; 30
    1ee2:	8c 91       	ld	r24, X
    1ee4:	5e 97       	sbiw	r26, 0x1e	; 30
    1ee6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee8:	11 f4       	brne	.+4      	; 0x1eee <xQueueSemaphoreTake+0xb4>
    1eea:	5e 96       	adiw	r26, 0x1e	; 30
    1eec:	1c 92       	st	X, r1
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	be 01       	movw	r22, r28
    1ef4:	6c 5f       	subi	r22, 0xFC	; 252
    1ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	0e 94 6d 14 	call	0x28da	; 0x28da <xTaskCheckForTimeOut>
    1f00:	81 11       	cpse	r24, r1
    1f02:	2b c0       	rjmp	.+86     	; 0x1f5a <xQueueSemaphoreTake+0x120>
    1f04:	c8 01       	movw	r24, r16
    1f06:	0e 94 86 0c 	call	0x190c	; 0x190c <prvIsQueueEmpty>
    1f0a:	88 23       	and	r24, r24
    1f0c:	01 f1       	breq	.+64     	; 0x1f4e <xQueueSemaphoreTake+0x114>
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 81       	ld	r24, Z
    1f12:	91 81       	ldd	r25, Z+1	; 0x01
    1f14:	89 2b       	or	r24, r25
    1f16:	51 f4       	brne	.+20     	; 0x1f2c <xQueueSemaphoreTake+0xf2>
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	0f 92       	push	r0
    1f1e:	84 81       	ldd	r24, Z+4	; 0x04
    1f20:	95 81       	ldd	r25, Z+5	; 0x05
    1f22:	0e 94 b2 14 	call	0x2964	; 0x2964 <xTaskPriorityInherit>
    1f26:	f8 2e       	mov	r15, r24
    1f28:	0f 90       	pop	r0
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	6c 81       	ldd	r22, Y+4	; 0x04
    1f2e:	7d 81       	ldd	r23, Y+5	; 0x05
    1f30:	c6 01       	movw	r24, r12
    1f32:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <vTaskPlaceOnEventList>
    1f36:	c8 01       	movw	r24, r16
    1f38:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1f3c:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1f40:	88 23       	and	r24, r24
    1f42:	11 f0       	breq	.+4      	; 0x1f48 <xQueueSemaphoreTake+0x10e>
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	8e cf       	rjmp	.-228    	; 0x1e64 <xQueueSemaphoreTake+0x2a>
    1f48:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    1f4c:	fb cf       	rjmp	.-10     	; 0x1f44 <xQueueSemaphoreTake+0x10a>
    1f4e:	c8 01       	movw	r24, r16
    1f50:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1f54:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1f58:	f5 cf       	rjmp	.-22     	; 0x1f44 <xQueueSemaphoreTake+0x10a>
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <prvUnlockQueue>
    1f60:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    1f64:	c8 01       	movw	r24, r16
    1f66:	0e 94 86 0c 	call	0x190c	; 0x190c <prvIsQueueEmpty>
    1f6a:	88 23       	and	r24, r24
    1f6c:	59 f3       	breq	.-42     	; 0x1f44 <xQueueSemaphoreTake+0x10a>
    1f6e:	ff 20       	and	r15, r15
    1f70:	c1 f0       	breq	.+48     	; 0x1fa2 <xQueueSemaphoreTake+0x168>
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	0f 92       	push	r0
    1f78:	f8 01       	movw	r30, r16
    1f7a:	81 89       	ldd	r24, Z+17	; 0x11
    1f7c:	88 23       	and	r24, r24
    1f7e:	39 f0       	breq	.+14     	; 0x1f8e <xQueueSemaphoreTake+0x154>
    1f80:	06 88       	ldd	r0, Z+22	; 0x16
    1f82:	f7 89       	ldd	r31, Z+23	; 0x17
    1f84:	e0 2d       	mov	r30, r0
    1f86:	80 81       	ld	r24, Z
    1f88:	64 e0       	ldi	r22, 0x04	; 4
    1f8a:	68 1b       	sub	r22, r24
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <xQueueSemaphoreTake+0x156>
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	d8 01       	movw	r26, r16
    1f92:	14 96       	adiw	r26, 0x04	; 4
    1f94:	8d 91       	ld	r24, X+
    1f96:	9c 91       	ld	r25, X
    1f98:	15 97       	sbiw	r26, 0x05	; 5
    1f9a:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <vTaskPriorityDisinheritAfterTimeout>
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	1f 91       	pop	r17
    1fb4:	0f 91       	pop	r16
    1fb6:	ff 90       	pop	r15
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	08 95       	ret

00001fbe <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	0f 92       	push	r0
    1fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <vQueueWaitForMessageRestricted+0x14>
    1fd0:	1d 8e       	std	Y+29, r1	; 0x1d
    1fd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <vQueueWaitForMessageRestricted+0x1c>
    1fd8:	1e 8e       	std	Y+30, r1	; 0x1e
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	41 96       	adiw	r24, 0x11	; 17
    1fe8:	0e 94 0a 14 	call	0x2814	; 0x2814 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1fec:	ce 01       	movw	r24, r28
    }
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1ff2:	0c 94 fe 0c 	jmp	0x19fc	; 0x19fc <prvUnlockQueue>

00001ff6 <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    1ff6:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <pxDelayedTaskList>
    1ffa:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    1ffe:	80 81       	ld	r24, Z
    2000:	81 11       	cpse	r24, r1
    2002:	03 c0       	rjmp	.+6      	; 0x200a <prvResetNextTaskUnblockTime+0x14>
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	0c c0       	rjmp	.+24     	; 0x2022 <prvResetNextTaskUnblockTime+0x2c>
    200a:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <pxDelayedTaskList>
    200e:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    2012:	05 80       	ldd	r0, Z+5	; 0x05
    2014:	f6 81       	ldd	r31, Z+6	; 0x06
    2016:	e0 2d       	mov	r30, r0
    2018:	06 80       	ldd	r0, Z+6	; 0x06
    201a:	f7 81       	ldd	r31, Z+7	; 0x07
    201c:	e0 2d       	mov	r30, r0
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	93 81       	ldd	r25, Z+3	; 0x03
    2022:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <xNextTaskUnblockTime+0x1>
    2026:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <xNextTaskUnblockTime>
    202a:	08 95       	ret

0000202c <prvAddCurrentTaskToDelayedList>:
    202c:	ff 92       	push	r15
    202e:	0f 93       	push	r16
    2030:	1f 93       	push	r17
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	ec 01       	movw	r28, r24
    2038:	f6 2e       	mov	r15, r22
    203a:	00 91 23 04 	lds	r16, 0x0423	; 0x800423 <xTickCount>
    203e:	10 91 24 04 	lds	r17, 0x0424	; 0x800424 <xTickCount+0x1>
    2042:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <pxCurrentTCB>
    2046:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    204a:	02 96       	adiw	r24, 0x02	; 2
    204c:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2050:	cf 3f       	cpi	r28, 0xFF	; 255
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	d8 07       	cpc	r29, r24
    2056:	89 f4       	brne	.+34     	; 0x207a <prvAddCurrentTaskToDelayedList+0x4e>
    2058:	ff 20       	and	r15, r15
    205a:	79 f0       	breq	.+30     	; 0x207a <prvAddCurrentTaskToDelayedList+0x4e>
    205c:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <pxCurrentTCB>
    2060:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2064:	6e 5f       	subi	r22, 0xFE	; 254
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	86 e2       	ldi	r24, 0x26	; 38
    206a:	94 e0       	ldi	r25, 0x04	; 4
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <vListInsertEnd>
    207a:	c0 0f       	add	r28, r16
    207c:	d1 1f       	adc	r29, r17
    207e:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2082:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2086:	d3 83       	std	Z+3, r29	; 0x03
    2088:	c2 83       	std	Z+2, r28	; 0x02
    208a:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <pxCurrentTCB>
    208e:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2092:	c0 17       	cp	r28, r16
    2094:	d1 07       	cpc	r29, r17
    2096:	68 f4       	brcc	.+26     	; 0x20b2 <prvAddCurrentTaskToDelayedList+0x86>
    2098:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <pxOverflowDelayedTaskList>
    209c:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <pxOverflowDelayedTaskList+0x1>
    20a0:	6e 5f       	subi	r22, 0xFE	; 254
    20a2:	7f 4f       	sbci	r23, 0xFF	; 255
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	ff 90       	pop	r15
    20ae:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <vListInsert>
    20b2:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <pxDelayedTaskList>
    20b6:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    20ba:	6e 5f       	subi	r22, 0xFE	; 254
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255
    20be:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInsert>
    20c2:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <xNextTaskUnblockTime>
    20c6:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <xNextTaskUnblockTime+0x1>
    20ca:	c8 17       	cp	r28, r24
    20cc:	d9 07       	cpc	r29, r25
    20ce:	20 f4       	brcc	.+8      	; 0x20d8 <prvAddCurrentTaskToDelayedList+0xac>
    20d0:	d0 93 1c 04 	sts	0x041C, r29	; 0x80041c <xNextTaskUnblockTime+0x1>
    20d4:	c0 93 1b 04 	sts	0x041B, r28	; 0x80041b <xNextTaskUnblockTime>
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	08 95       	ret

000020e4 <prvIdleTask>:
    20e4:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <uxDeletedTasksWaitingCleanUp>
    20e8:	88 23       	and	r24, r24
    20ea:	09 f1       	breq	.+66     	; 0x212e <prvIdleTask+0x4a>
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	0f 92       	push	r0
    20f2:	e0 91 35 04 	lds	r30, 0x0435	; 0x800435 <xTasksWaitingTermination+0x5>
    20f6:	f0 91 36 04 	lds	r31, 0x0436	; 0x800436 <xTasksWaitingTermination+0x6>
    20fa:	c6 81       	ldd	r28, Z+6	; 0x06
    20fc:	d7 81       	ldd	r29, Z+7	; 0x07
    20fe:	ce 01       	movw	r24, r28
    2100:	02 96       	adiw	r24, 0x02	; 2
    2102:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2106:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <uxCurrentNumberOfTasks>
    210a:	81 50       	subi	r24, 0x01	; 1
    210c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <uxCurrentNumberOfTasks>
    2110:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <uxDeletedTasksWaitingCleanUp>
    2114:	81 50       	subi	r24, 0x01	; 1
    2116:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <uxDeletedTasksWaitingCleanUp>
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	8f 89       	ldd	r24, Y+23	; 0x17
    2120:	98 8d       	ldd	r25, Y+24	; 0x18
    2122:	0e 94 89 0a 	call	0x1512	; 0x1512 <vPortFree>
    2126:	ce 01       	movw	r24, r28
    2128:	0e 94 89 0a 	call	0x1512	; 0x1512 <vPortFree>
    212c:	db cf       	rjmp	.-74     	; 0x20e4 <prvIdleTask>
    212e:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <pxReadyTasksLists>
    2132:	82 30       	cpi	r24, 0x02	; 2
    2134:	10 f0       	brcs	.+4      	; 0x213a <prvIdleTask+0x56>
    2136:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    213a:	0e 94 b3 17 	call	0x2f66	; 0x2f66 <vApplicationIdleHook>
    213e:	d2 cf       	rjmp	.-92     	; 0x20e4 <prvIdleTask>

00002140 <xTaskCreate>:
    2140:	5f 92       	push	r5
    2142:	6f 92       	push	r6
    2144:	7f 92       	push	r7
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	3c 01       	movw	r6, r24
    2160:	6b 01       	movw	r12, r22
    2162:	5a 01       	movw	r10, r20
    2164:	49 01       	movw	r8, r18
    2166:	50 2e       	mov	r5, r16
    2168:	ca 01       	movw	r24, r20
    216a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <pvPortMalloc>
    216e:	8c 01       	movw	r16, r24
    2170:	89 2b       	or	r24, r25
    2172:	09 f4       	brne	.+2      	; 0x2176 <xTaskCreate+0x36>
    2174:	e0 c0       	rjmp	.+448    	; 0x2336 <xTaskCreate+0x1f6>
    2176:	88 e2       	ldi	r24, 0x28	; 40
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <pvPortMalloc>
    217e:	ec 01       	movw	r28, r24
    2180:	89 2b       	or	r24, r25
    2182:	c9 f0       	breq	.+50     	; 0x21b6 <xTaskCreate+0x76>
    2184:	18 8f       	std	Y+24, r17	; 0x18
    2186:	0f 8b       	std	Y+23, r16	; 0x17
    2188:	a5 01       	movw	r20, r10
    218a:	65 ea       	ldi	r22, 0xA5	; 165
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	c8 01       	movw	r24, r16
    2190:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <memset>
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	a2 1a       	sub	r10, r18
    2198:	b1 08       	sbc	r11, r1
    219a:	8f 89       	ldd	r24, Y+23	; 0x17
    219c:	98 8d       	ldd	r25, Y+24	; 0x18
    219e:	a8 0e       	add	r10, r24
    21a0:	b9 1e       	adc	r11, r25
    21a2:	c1 14       	cp	r12, r1
    21a4:	d1 04       	cpc	r13, r1
    21a6:	c9 f0       	breq	.+50     	; 0x21da <xTaskCreate+0x9a>
    21a8:	be 01       	movw	r22, r28
    21aa:	67 5e       	subi	r22, 0xE7	; 231
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	f6 01       	movw	r30, r12
    21b0:	c6 01       	movw	r24, r12
    21b2:	08 96       	adiw	r24, 0x08	; 8
    21b4:	07 c0       	rjmp	.+14     	; 0x21c4 <xTaskCreate+0x84>
    21b6:	c8 01       	movw	r24, r16
    21b8:	0e 94 89 0a 	call	0x1512	; 0x1512 <vPortFree>
    21bc:	bc c0       	rjmp	.+376    	; 0x2336 <xTaskCreate+0x1f6>
    21be:	e8 17       	cp	r30, r24
    21c0:	f9 07       	cpc	r31, r25
    21c2:	49 f0       	breq	.+18     	; 0x21d6 <xTaskCreate+0x96>
    21c4:	9f 01       	movw	r18, r30
    21c6:	41 91       	ld	r20, Z+
    21c8:	db 01       	movw	r26, r22
    21ca:	4d 93       	st	X+, r20
    21cc:	bd 01       	movw	r22, r26
    21ce:	d9 01       	movw	r26, r18
    21d0:	2c 91       	ld	r18, X
    21d2:	21 11       	cpse	r18, r1
    21d4:	f4 cf       	rjmp	.-24     	; 0x21be <xTaskCreate+0x7e>
    21d6:	18 a2       	std	Y+32, r1	; 0x20
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <xTaskCreate+0x9c>
    21da:	19 8e       	std	Y+25, r1	; 0x19
    21dc:	05 2d       	mov	r16, r5
    21de:	04 30       	cpi	r16, 0x04	; 4
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <xTaskCreate+0xa4>
    21e2:	03 e0       	ldi	r16, 0x03	; 3
    21e4:	0e 8b       	std	Y+22, r16	; 0x16
    21e6:	09 a3       	std	Y+33, r16	; 0x21
    21e8:	1a a2       	std	Y+34, r1	; 0x22
    21ea:	6e 01       	movw	r12, r28
    21ec:	b2 e0       	ldi	r27, 0x02	; 2
    21ee:	cb 0e       	add	r12, r27
    21f0:	d1 1c       	adc	r13, r1
    21f2:	c6 01       	movw	r24, r12
    21f4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <vListInitialiseItem>
    21f8:	ce 01       	movw	r24, r28
    21fa:	0c 96       	adiw	r24, 0x0c	; 12
    21fc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <vListInitialiseItem>
    2200:	d9 87       	std	Y+9, r29	; 0x09
    2202:	c8 87       	std	Y+8, r28	; 0x08
    2204:	84 e0       	ldi	r24, 0x04	; 4
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	80 1b       	sub	r24, r16
    220a:	91 09       	sbc	r25, r1
    220c:	9d 87       	std	Y+13, r25	; 0x0d
    220e:	8c 87       	std	Y+12, r24	; 0x0c
    2210:	db 8b       	std	Y+19, r29	; 0x13
    2212:	ca 8b       	std	Y+18, r28	; 0x12
    2214:	1b a2       	std	Y+35, r1	; 0x23
    2216:	1c a2       	std	Y+36, r1	; 0x24
    2218:	1d a2       	std	Y+37, r1	; 0x25
    221a:	1e a2       	std	Y+38, r1	; 0x26
    221c:	1f a2       	std	Y+39, r1	; 0x27
    221e:	a4 01       	movw	r20, r8
    2220:	b3 01       	movw	r22, r6
    2222:	c5 01       	movw	r24, r10
    2224:	0e 94 29 0b 	call	0x1652	; 0x1652 <pxPortInitialiseStack>
    2228:	99 83       	std	Y+1, r25	; 0x01
    222a:	88 83       	st	Y, r24
    222c:	e1 14       	cp	r14, r1
    222e:	f1 04       	cpc	r15, r1
    2230:	19 f0       	breq	.+6      	; 0x2238 <xTaskCreate+0xf8>
    2232:	f7 01       	movw	r30, r14
    2234:	d1 83       	std	Z+1, r29	; 0x01
    2236:	c0 83       	st	Z, r28
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	0f 92       	push	r0
    223e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <uxCurrentNumberOfTasks>
    2242:	8f 5f       	subi	r24, 0xFF	; 255
    2244:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <uxCurrentNumberOfTasks>
    2248:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <pxCurrentTCB>
    224c:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2250:	89 2b       	or	r24, r25
    2252:	d1 f5       	brne	.+116    	; 0x22c8 <xTaskCreate+0x188>
    2254:	d0 93 7d 04 	sts	0x047D, r29	; 0x80047d <pxCurrentTCB+0x1>
    2258:	c0 93 7c 04 	sts	0x047C, r28	; 0x80047c <pxCurrentTCB>
    225c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <uxCurrentNumberOfTasks>
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	09 f0       	breq	.+2      	; 0x2266 <xTaskCreate+0x126>
    2264:	41 c0       	rjmp	.+130    	; 0x22e8 <xTaskCreate+0x1a8>
    2266:	88 e5       	ldi	r24, 0x58	; 88
    2268:	94 e0       	ldi	r25, 0x04	; 4
    226a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    226e:	81 e6       	ldi	r24, 0x61	; 97
    2270:	94 e0       	ldi	r25, 0x04	; 4
    2272:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    2276:	8a e6       	ldi	r24, 0x6A	; 106
    2278:	94 e0       	ldi	r25, 0x04	; 4
    227a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    227e:	83 e7       	ldi	r24, 0x73	; 115
    2280:	94 e0       	ldi	r25, 0x04	; 4
    2282:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    2286:	8f e4       	ldi	r24, 0x4F	; 79
    2288:	94 e0       	ldi	r25, 0x04	; 4
    228a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    228e:	86 e4       	ldi	r24, 0x46	; 70
    2290:	94 e0       	ldi	r25, 0x04	; 4
    2292:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    2296:	89 e3       	ldi	r24, 0x39	; 57
    2298:	94 e0       	ldi	r25, 0x04	; 4
    229a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    229e:	80 e3       	ldi	r24, 0x30	; 48
    22a0:	94 e0       	ldi	r25, 0x04	; 4
    22a2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    22a6:	86 e2       	ldi	r24, 0x26	; 38
    22a8:	94 e0       	ldi	r25, 0x04	; 4
    22aa:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    22ae:	8f e4       	ldi	r24, 0x4F	; 79
    22b0:	94 e0       	ldi	r25, 0x04	; 4
    22b2:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <pxDelayedTaskList+0x1>
    22b6:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <pxDelayedTaskList>
    22ba:	86 e4       	ldi	r24, 0x46	; 70
    22bc:	94 e0       	ldi	r25, 0x04	; 4
    22be:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <pxOverflowDelayedTaskList+0x1>
    22c2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <pxOverflowDelayedTaskList>
    22c6:	10 c0       	rjmp	.+32     	; 0x22e8 <xTaskCreate+0x1a8>
    22c8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xSchedulerRunning>
    22cc:	81 11       	cpse	r24, r1
    22ce:	0c c0       	rjmp	.+24     	; 0x22e8 <xTaskCreate+0x1a8>
    22d0:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    22d4:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    22d8:	96 89       	ldd	r25, Z+22	; 0x16
    22da:	8e 89       	ldd	r24, Y+22	; 0x16
    22dc:	89 17       	cp	r24, r25
    22de:	20 f0       	brcs	.+8      	; 0x22e8 <xTaskCreate+0x1a8>
    22e0:	d0 93 7d 04 	sts	0x047D, r29	; 0x80047d <pxCurrentTCB+0x1>
    22e4:	c0 93 7c 04 	sts	0x047C, r28	; 0x80047c <pxCurrentTCB>
    22e8:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <uxTaskNumber>
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <uxTaskNumber>
    22f2:	8e 89       	ldd	r24, Y+22	; 0x16
    22f4:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    22f8:	98 17       	cp	r25, r24
    22fa:	10 f4       	brcc	.+4      	; 0x2300 <xTaskCreate+0x1c0>
    22fc:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    2300:	f9 e0       	ldi	r31, 0x09	; 9
    2302:	8f 9f       	mul	r24, r31
    2304:	c0 01       	movw	r24, r0
    2306:	11 24       	eor	r1, r1
    2308:	b6 01       	movw	r22, r12
    230a:	88 5a       	subi	r24, 0xA8	; 168
    230c:	9b 4f       	sbci	r25, 0xFB	; 251
    230e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    2312:	0f 90       	pop	r0
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xSchedulerRunning>
    231a:	88 23       	and	r24, r24
    231c:	51 f0       	breq	.+20     	; 0x2332 <xTaskCreate+0x1f2>
    231e:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2322:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2326:	96 89       	ldd	r25, Z+22	; 0x16
    2328:	8e 89       	ldd	r24, Y+22	; 0x16
    232a:	98 17       	cp	r25, r24
    232c:	10 f4       	brcc	.+4      	; 0x2332 <xTaskCreate+0x1f2>
    232e:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <xTaskCreate+0x1f8>
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	ff 90       	pop	r15
    2342:	ef 90       	pop	r14
    2344:	df 90       	pop	r13
    2346:	cf 90       	pop	r12
    2348:	bf 90       	pop	r11
    234a:	af 90       	pop	r10
    234c:	9f 90       	pop	r9
    234e:	8f 90       	pop	r8
    2350:	7f 90       	pop	r7
    2352:	6f 90       	pop	r6
    2354:	5f 90       	pop	r5
    2356:	08 95       	ret

00002358 <vTaskResume>:
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <pxCurrentTCB>
    2364:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2368:	82 17       	cp	r24, r18
    236a:	93 07       	cpc	r25, r19
    236c:	09 f4       	brne	.+2      	; 0x2370 <vTaskResume+0x18>
    236e:	38 c0       	rjmp	.+112    	; 0x23e0 <vTaskResume+0x88>
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	09 f4       	brne	.+2      	; 0x2376 <vTaskResume+0x1e>
    2374:	35 c0       	rjmp	.+106    	; 0x23e0 <vTaskResume+0x88>
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	0f 92       	push	r0
    237c:	fc 01       	movw	r30, r24
    237e:	22 85       	ldd	r18, Z+10	; 0x0a
    2380:	33 85       	ldd	r19, Z+11	; 0x0b
    2382:	26 52       	subi	r18, 0x26	; 38
    2384:	34 40       	sbci	r19, 0x04	; 4
    2386:	51 f5       	brne	.+84     	; 0x23dc <vTaskResume+0x84>
    2388:	fc 01       	movw	r30, r24
    238a:	24 89       	ldd	r18, Z+20	; 0x14
    238c:	35 89       	ldd	r19, Z+21	; 0x15
    238e:	f4 e0       	ldi	r31, 0x04	; 4
    2390:	29 33       	cpi	r18, 0x39	; 57
    2392:	3f 07       	cpc	r19, r31
    2394:	19 f1       	breq	.+70     	; 0x23dc <vTaskResume+0x84>
    2396:	23 2b       	or	r18, r19
    2398:	09 f5       	brne	.+66     	; 0x23dc <vTaskResume+0x84>
    239a:	ec 01       	movw	r28, r24
    239c:	8c 01       	movw	r16, r24
    239e:	0e 5f       	subi	r16, 0xFE	; 254
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	c8 01       	movw	r24, r16
    23a4:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    23a8:	8e 89       	ldd	r24, Y+22	; 0x16
    23aa:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    23ae:	98 17       	cp	r25, r24
    23b0:	10 f4       	brcc	.+4      	; 0x23b6 <vTaskResume+0x5e>
    23b2:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    23b6:	29 e0       	ldi	r18, 0x09	; 9
    23b8:	82 9f       	mul	r24, r18
    23ba:	c0 01       	movw	r24, r0
    23bc:	11 24       	eor	r1, r1
    23be:	b8 01       	movw	r22, r16
    23c0:	88 5a       	subi	r24, 0xA8	; 168
    23c2:	9b 4f       	sbci	r25, 0xFB	; 251
    23c4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    23c8:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    23cc:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    23d0:	9e 89       	ldd	r25, Y+22	; 0x16
    23d2:	86 89       	ldd	r24, Z+22	; 0x16
    23d4:	98 17       	cp	r25, r24
    23d6:	10 f0       	brcs	.+4      	; 0x23dc <vTaskResume+0x84>
    23d8:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    23dc:	0f 90       	pop	r0
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <vTaskStartScheduler>:
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	89 e1       	ldi	r24, 0x19	; 25
    23f2:	e8 2e       	mov	r14, r24
    23f4:	84 e0       	ldi	r24, 0x04	; 4
    23f6:	f8 2e       	mov	r15, r24
    23f8:	00 e0       	ldi	r16, 0x00	; 0
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 ec       	ldi	r20, 0xC0	; 192
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	6f e6       	ldi	r22, 0x6F	; 111
    2404:	72 e0       	ldi	r23, 0x02	; 2
    2406:	82 e7       	ldi	r24, 0x72	; 114
    2408:	90 e1       	ldi	r25, 0x10	; 16
    240a:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCreate>
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	b1 f4       	brne	.+44     	; 0x243e <vTaskStartScheduler+0x54>
    2412:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <xTimerCreateTimerTask>
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	91 f4       	brne	.+36     	; 0x243e <vTaskStartScheduler+0x54>
    241a:	f8 94       	cli
    241c:	2f ef       	ldi	r18, 0xFF	; 255
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	30 93 1c 04 	sts	0x041C, r19	; 0x80041c <xNextTaskUnblockTime+0x1>
    2424:	20 93 1b 04 	sts	0x041B, r18	; 0x80041b <xNextTaskUnblockTime>
    2428:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <xSchedulerRunning>
    242c:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <xTickCount+0x1>
    2430:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <xTickCount>
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	0c 94 95 0b 	jmp	0x172a	; 0x172a <xPortStartScheduler>
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	08 95       	ret

00002446 <vTaskSuspendAll>:
    2446:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <uxSchedulerSuspended>
    2450:	08 95       	ret

00002452 <xTaskGetTickCount>:
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	0f 92       	push	r0
    2458:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <xTickCount>
    245c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <xTickCount+0x1>
    2460:	0f 90       	pop	r0
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	08 95       	ret

00002466 <xTaskIncrementTick>:
    2466:	cf 92       	push	r12
    2468:	df 92       	push	r13
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    247a:	81 11       	cpse	r24, r1
    247c:	8c c0       	rjmp	.+280    	; 0x2596 <xTaskIncrementTick+0x130>
    247e:	00 91 23 04 	lds	r16, 0x0423	; 0x800423 <xTickCount>
    2482:	10 91 24 04 	lds	r17, 0x0424	; 0x800424 <xTickCount+0x1>
    2486:	0f 5f       	subi	r16, 0xFF	; 255
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	10 93 24 04 	sts	0x0424, r17	; 0x800424 <xTickCount+0x1>
    248e:	00 93 23 04 	sts	0x0423, r16	; 0x800423 <xTickCount>
    2492:	01 15       	cp	r16, r1
    2494:	11 05       	cpc	r17, r1
    2496:	b9 f4       	brne	.+46     	; 0x24c6 <xTaskIncrementTick+0x60>
    2498:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <pxDelayedTaskList>
    249c:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    24a0:	20 91 42 04 	lds	r18, 0x0442	; 0x800442 <pxOverflowDelayedTaskList>
    24a4:	30 91 43 04 	lds	r19, 0x0443	; 0x800443 <pxOverflowDelayedTaskList+0x1>
    24a8:	30 93 45 04 	sts	0x0445, r19	; 0x800445 <pxDelayedTaskList+0x1>
    24ac:	20 93 44 04 	sts	0x0444, r18	; 0x800444 <pxDelayedTaskList>
    24b0:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <pxOverflowDelayedTaskList+0x1>
    24b4:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <pxOverflowDelayedTaskList>
    24b8:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <xNumOfOverflows>
    24bc:	8f 5f       	subi	r24, 0xFF	; 255
    24be:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <xNumOfOverflows>
    24c2:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <prvResetNextTaskUnblockTime>
    24c6:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <xNextTaskUnblockTime>
    24ca:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <xNextTaskUnblockTime+0x1>
    24ce:	c0 e0       	ldi	r28, 0x00	; 0
    24d0:	08 17       	cp	r16, r24
    24d2:	19 07       	cpc	r17, r25
    24d4:	08 f4       	brcc	.+2      	; 0x24d8 <xTaskIncrementTick+0x72>
    24d6:	4f c0       	rjmp	.+158    	; 0x2576 <xTaskIncrementTick+0x110>
    24d8:	d9 e0       	ldi	r29, 0x09	; 9
    24da:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <pxDelayedTaskList>
    24de:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    24e2:	80 81       	ld	r24, Z
    24e4:	81 11       	cpse	r24, r1
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <xTaskIncrementTick+0x88>
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
    24ea:	9f ef       	ldi	r25, 0xFF	; 255
    24ec:	11 c0       	rjmp	.+34     	; 0x2510 <xTaskIncrementTick+0xaa>
    24ee:	e0 91 44 04 	lds	r30, 0x0444	; 0x800444 <pxDelayedTaskList>
    24f2:	f0 91 45 04 	lds	r31, 0x0445	; 0x800445 <pxDelayedTaskList+0x1>
    24f6:	05 80       	ldd	r0, Z+5	; 0x05
    24f8:	f6 81       	ldd	r31, Z+6	; 0x06
    24fa:	e0 2d       	mov	r30, r0
    24fc:	e6 80       	ldd	r14, Z+6	; 0x06
    24fe:	f7 80       	ldd	r15, Z+7	; 0x07
    2500:	d7 01       	movw	r26, r14
    2502:	12 96       	adiw	r26, 0x02	; 2
    2504:	8d 91       	ld	r24, X+
    2506:	9c 91       	ld	r25, X
    2508:	13 97       	sbiw	r26, 0x03	; 3
    250a:	08 17       	cp	r16, r24
    250c:	19 07       	cpc	r17, r25
    250e:	28 f4       	brcc	.+10     	; 0x251a <xTaskIncrementTick+0xb4>
    2510:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <xNextTaskUnblockTime+0x1>
    2514:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <xNextTaskUnblockTime>
    2518:	2e c0       	rjmp	.+92     	; 0x2576 <xTaskIncrementTick+0x110>
    251a:	67 01       	movw	r12, r14
    251c:	b2 e0       	ldi	r27, 0x02	; 2
    251e:	cb 0e       	add	r12, r27
    2520:	d1 1c       	adc	r13, r1
    2522:	c6 01       	movw	r24, r12
    2524:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2528:	f7 01       	movw	r30, r14
    252a:	84 89       	ldd	r24, Z+20	; 0x14
    252c:	95 89       	ldd	r25, Z+21	; 0x15
    252e:	89 2b       	or	r24, r25
    2530:	21 f0       	breq	.+8      	; 0x253a <xTaskIncrementTick+0xd4>
    2532:	c7 01       	movw	r24, r14
    2534:	0c 96       	adiw	r24, 0x0c	; 12
    2536:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    253a:	d7 01       	movw	r26, r14
    253c:	56 96       	adiw	r26, 0x16	; 22
    253e:	8c 91       	ld	r24, X
    2540:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    2544:	98 17       	cp	r25, r24
    2546:	10 f4       	brcc	.+4      	; 0x254c <xTaskIncrementTick+0xe6>
    2548:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    254c:	d8 9f       	mul	r29, r24
    254e:	c0 01       	movw	r24, r0
    2550:	11 24       	eor	r1, r1
    2552:	b6 01       	movw	r22, r12
    2554:	88 5a       	subi	r24, 0xA8	; 168
    2556:	9b 4f       	sbci	r25, 0xFB	; 251
    2558:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    255c:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2560:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2564:	d7 01       	movw	r26, r14
    2566:	56 96       	adiw	r26, 0x16	; 22
    2568:	9c 91       	ld	r25, X
    256a:	86 89       	ldd	r24, Z+22	; 0x16
    256c:	98 17       	cp	r25, r24
    256e:	08 f4       	brcc	.+2      	; 0x2572 <xTaskIncrementTick+0x10c>
    2570:	b4 cf       	rjmp	.-152    	; 0x24da <xTaskIncrementTick+0x74>
    2572:	c1 e0       	ldi	r28, 0x01	; 1
    2574:	b2 cf       	rjmp	.-156    	; 0x24da <xTaskIncrementTick+0x74>
    2576:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    257a:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    257e:	e6 89       	ldd	r30, Z+22	; 0x16
    2580:	b9 e0       	ldi	r27, 0x09	; 9
    2582:	eb 9f       	mul	r30, r27
    2584:	f0 01       	movw	r30, r0
    2586:	11 24       	eor	r1, r1
    2588:	e8 5a       	subi	r30, 0xA8	; 168
    258a:	fb 4f       	sbci	r31, 0xFB	; 251
    258c:	80 81       	ld	r24, Z
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	40 f0       	brcs	.+16     	; 0x25a2 <xTaskIncrementTick+0x13c>
    2592:	c1 e0       	ldi	r28, 0x01	; 1
    2594:	06 c0       	rjmp	.+12     	; 0x25a2 <xTaskIncrementTick+0x13c>
    2596:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <uxPendedTicks>
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <uxPendedTicks>
    25a0:	c0 e0       	ldi	r28, 0x00	; 0
    25a2:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <xYieldPending>
    25a6:	81 11       	cpse	r24, r1
    25a8:	c1 e0       	ldi	r28, 0x01	; 1
    25aa:	8c 2f       	mov	r24, r28
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	08 95       	ret

000025be <xTaskResumeAll>:
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	0f 92       	push	r0
    25d0:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    25d4:	81 50       	subi	r24, 0x01	; 1
    25d6:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <uxSchedulerSuspended>
    25da:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    25de:	88 23       	and	r24, r24
    25e0:	11 f0       	breq	.+4      	; 0x25e6 <xTaskResumeAll+0x28>
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	52 c0       	rjmp	.+164    	; 0x268a <xTaskResumeAll+0xcc>
    25e6:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <uxCurrentNumberOfTasks>
    25ea:	88 23       	and	r24, r24
    25ec:	d1 f3       	breq	.-12     	; 0x25e2 <xTaskResumeAll+0x24>
    25ee:	c0 e0       	ldi	r28, 0x00	; 0
    25f0:	d0 e0       	ldi	r29, 0x00	; 0
    25f2:	89 e0       	ldi	r24, 0x09	; 9
    25f4:	f8 2e       	mov	r15, r24
    25f6:	ee 24       	eor	r14, r14
    25f8:	e3 94       	inc	r14
    25fa:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <xPendingReadyList>
    25fe:	88 23       	and	r24, r24
    2600:	51 f1       	breq	.+84     	; 0x2656 <xTaskResumeAll+0x98>
    2602:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <xPendingReadyList+0x5>
    2606:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <xPendingReadyList+0x6>
    260a:	c6 81       	ldd	r28, Z+6	; 0x06
    260c:	d7 81       	ldd	r29, Z+7	; 0x07
    260e:	ce 01       	movw	r24, r28
    2610:	0c 96       	adiw	r24, 0x0c	; 12
    2612:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2616:	8e 01       	movw	r16, r28
    2618:	0e 5f       	subi	r16, 0xFE	; 254
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	c8 01       	movw	r24, r16
    261e:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2622:	8e 89       	ldd	r24, Y+22	; 0x16
    2624:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    2628:	98 17       	cp	r25, r24
    262a:	10 f4       	brcc	.+4      	; 0x2630 <xTaskResumeAll+0x72>
    262c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    2630:	f8 9e       	mul	r15, r24
    2632:	c0 01       	movw	r24, r0
    2634:	11 24       	eor	r1, r1
    2636:	b8 01       	movw	r22, r16
    2638:	88 5a       	subi	r24, 0xA8	; 168
    263a:	9b 4f       	sbci	r25, 0xFB	; 251
    263c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    2640:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2644:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2648:	9e 89       	ldd	r25, Y+22	; 0x16
    264a:	86 89       	ldd	r24, Z+22	; 0x16
    264c:	98 17       	cp	r25, r24
    264e:	a8 f2       	brcs	.-86     	; 0x25fa <xTaskResumeAll+0x3c>
    2650:	e0 92 1f 04 	sts	0x041F, r14	; 0x80041f <xYieldPending>
    2654:	d2 cf       	rjmp	.-92     	; 0x25fa <xTaskResumeAll+0x3c>
    2656:	cd 2b       	or	r28, r29
    2658:	11 f0       	breq	.+4      	; 0x265e <xTaskResumeAll+0xa0>
    265a:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <prvResetNextTaskUnblockTime>
    265e:	c0 91 20 04 	lds	r28, 0x0420	; 0x800420 <uxPendedTicks>
    2662:	cc 23       	and	r28, r28
    2664:	51 f0       	breq	.+20     	; 0x267a <xTaskResumeAll+0xbc>
    2666:	d1 e0       	ldi	r29, 0x01	; 1
    2668:	0e 94 33 12 	call	0x2466	; 0x2466 <xTaskIncrementTick>
    266c:	81 11       	cpse	r24, r1
    266e:	d0 93 1f 04 	sts	0x041F, r29	; 0x80041f <xYieldPending>
    2672:	c1 50       	subi	r28, 0x01	; 1
    2674:	c9 f7       	brne	.-14     	; 0x2668 <xTaskResumeAll+0xaa>
    2676:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <uxPendedTicks>
    267a:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <xYieldPending>
    267e:	88 23       	and	r24, r24
    2680:	09 f4       	brne	.+2      	; 0x2684 <xTaskResumeAll+0xc6>
    2682:	af cf       	rjmp	.-162    	; 0x25e2 <xTaskResumeAll+0x24>
    2684:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	ff 90       	pop	r15
    2698:	ef 90       	pop	r14
    269a:	08 95       	ret

0000269c <vTaskDelayUntil>:
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	8c 01       	movw	r16, r24
    26a6:	eb 01       	movw	r28, r22
    26a8:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    26ac:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <xTickCount>
    26b0:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <xTickCount+0x1>
    26b4:	f8 01       	movw	r30, r16
    26b6:	20 81       	ld	r18, Z
    26b8:	31 81       	ldd	r19, Z+1	; 0x01
    26ba:	c9 01       	movw	r24, r18
    26bc:	8c 0f       	add	r24, r28
    26be:	9d 1f       	adc	r25, r29
    26c0:	42 17       	cp	r20, r18
    26c2:	53 07       	cpc	r21, r19
    26c4:	20 f4       	brcc	.+8      	; 0x26ce <vTaskDelayUntil+0x32>
    26c6:	82 17       	cp	r24, r18
    26c8:	93 07       	cpc	r25, r19
    26ca:	40 f4       	brcc	.+16     	; 0x26dc <vTaskDelayUntil+0x40>
    26cc:	03 c0       	rjmp	.+6      	; 0x26d4 <vTaskDelayUntil+0x38>
    26ce:	82 17       	cp	r24, r18
    26d0:	93 07       	cpc	r25, r19
    26d2:	30 f0       	brcs	.+12     	; 0x26e0 <vTaskDelayUntil+0x44>
    26d4:	21 e0       	ldi	r18, 0x01	; 1
    26d6:	48 17       	cp	r20, r24
    26d8:	59 07       	cpc	r21, r25
    26da:	18 f0       	brcs	.+6      	; 0x26e2 <vTaskDelayUntil+0x46>
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	01 c0       	rjmp	.+2      	; 0x26e2 <vTaskDelayUntil+0x46>
    26e0:	21 e0       	ldi	r18, 0x01	; 1
    26e2:	f8 01       	movw	r30, r16
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	22 23       	and	r18, r18
    26ea:	29 f0       	breq	.+10     	; 0x26f6 <vTaskDelayUntil+0x5a>
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	84 1b       	sub	r24, r20
    26f0:	95 0b       	sbc	r25, r21
    26f2:	0e 94 16 10 	call	0x202c	; 0x202c <prvAddCurrentTaskToDelayedList>
    26f6:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    26fa:	81 11       	cpse	r24, r1
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <vTaskDelayUntil+0x66>
    26fe:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	08 95       	ret

0000270c <vTaskDelay>:
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	ec 01       	movw	r28, r24
    2712:	89 2b       	or	r24, r25
    2714:	19 f4       	brne	.+6      	; 0x271c <vTaskDelay+0x10>
    2716:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    271a:	0a c0       	rjmp	.+20     	; 0x2730 <vTaskDelay+0x24>
    271c:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	ce 01       	movw	r24, r28
    2724:	0e 94 16 10 	call	0x202c	; 0x202c <prvAddCurrentTaskToDelayedList>
    2728:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    272c:	88 23       	and	r24, r24
    272e:	99 f3       	breq	.-26     	; 0x2716 <vTaskDelay+0xa>
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <vTaskSwitchContext>:
    2736:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    273a:	88 23       	and	r24, r24
    273c:	21 f0       	breq	.+8      	; 0x2746 <vTaskSwitchContext+0x10>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <xYieldPending>
    2744:	08 95       	ret
    2746:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <xYieldPending>
    274a:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    274e:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2752:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2756:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    275a:	2d 91       	ld	r18, X+
    275c:	3c 91       	ld	r19, X
    275e:	87 89       	ldd	r24, Z+23	; 0x17
    2760:	90 8d       	ldd	r25, Z+24	; 0x18
    2762:	82 17       	cp	r24, r18
    2764:	93 07       	cpc	r25, r19
    2766:	60 f0       	brcs	.+24     	; 0x2780 <vTaskSwitchContext+0x4a>
    2768:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <pxCurrentTCB>
    276c:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2770:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <pxCurrentTCB>
    2774:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2778:	67 5e       	subi	r22, 0xE7	; 231
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vApplicationStackOverflowHook>
    2780:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <uxTopReadyPriority>
    2784:	69 e0       	ldi	r22, 0x09	; 9
    2786:	48 2f       	mov	r20, r24
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	64 9f       	mul	r22, r20
    278c:	90 01       	movw	r18, r0
    278e:	65 9f       	mul	r22, r21
    2790:	30 0d       	add	r19, r0
    2792:	11 24       	eor	r1, r1
    2794:	f9 01       	movw	r30, r18
    2796:	e8 5a       	subi	r30, 0xA8	; 168
    2798:	fb 4f       	sbci	r31, 0xFB	; 251
    279a:	90 81       	ld	r25, Z
    279c:	91 11       	cpse	r25, r1
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <vTaskSwitchContext+0x6e>
    27a0:	81 50       	subi	r24, 0x01	; 1
    27a2:	f1 cf       	rjmp	.-30     	; 0x2786 <vTaskSwitchContext+0x50>
    27a4:	a1 81       	ldd	r26, Z+1	; 0x01
    27a6:	b2 81       	ldd	r27, Z+2	; 0x02
    27a8:	12 96       	adiw	r26, 0x02	; 2
    27aa:	0d 90       	ld	r0, X+
    27ac:	bc 91       	ld	r27, X
    27ae:	a0 2d       	mov	r26, r0
    27b0:	b2 83       	std	Z+2, r27	; 0x02
    27b2:	a1 83       	std	Z+1, r26	; 0x01
    27b4:	25 5a       	subi	r18, 0xA5	; 165
    27b6:	3b 4f       	sbci	r19, 0xFB	; 251
    27b8:	a2 17       	cp	r26, r18
    27ba:	b3 07       	cpc	r27, r19
    27bc:	31 f4       	brne	.+12     	; 0x27ca <vTaskSwitchContext+0x94>
    27be:	12 96       	adiw	r26, 0x02	; 2
    27c0:	2d 91       	ld	r18, X+
    27c2:	3c 91       	ld	r19, X
    27c4:	13 97       	sbiw	r26, 0x03	; 3
    27c6:	32 83       	std	Z+2, r19	; 0x02
    27c8:	21 83       	std	Z+1, r18	; 0x01
    27ca:	99 e0       	ldi	r25, 0x09	; 9
    27cc:	94 9f       	mul	r25, r20
    27ce:	f0 01       	movw	r30, r0
    27d0:	95 9f       	mul	r25, r21
    27d2:	f0 0d       	add	r31, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	e8 5a       	subi	r30, 0xA8	; 168
    27d8:	fb 4f       	sbci	r31, 0xFB	; 251
    27da:	01 80       	ldd	r0, Z+1	; 0x01
    27dc:	f2 81       	ldd	r31, Z+2	; 0x02
    27de:	e0 2d       	mov	r30, r0
    27e0:	26 81       	ldd	r18, Z+6	; 0x06
    27e2:	37 81       	ldd	r19, Z+7	; 0x07
    27e4:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <pxCurrentTCB+0x1>
    27e8:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <pxCurrentTCB>
    27ec:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    27f0:	08 95       	ret

000027f2 <vTaskPlaceOnEventList>:
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	eb 01       	movw	r28, r22
    27f8:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <pxCurrentTCB>
    27fc:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2800:	64 5f       	subi	r22, 0xF4	; 244
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInsert>
    2808:	61 e0       	ldi	r22, 0x01	; 1
    280a:	ce 01       	movw	r24, r28
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	0c 94 16 10 	jmp	0x202c	; 0x202c <prvAddCurrentTaskToDelayedList>

00002814 <vTaskPlaceOnEventListRestricted>:
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	eb 01       	movw	r28, r22
    281c:	14 2f       	mov	r17, r20
    281e:	60 91 7c 04 	lds	r22, 0x047C	; 0x80047c <pxCurrentTCB>
    2822:	70 91 7d 04 	lds	r23, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2826:	64 5f       	subi	r22, 0xF4	; 244
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    282e:	11 23       	and	r17, r17
    2830:	11 f0       	breq	.+4      	; 0x2836 <vTaskPlaceOnEventListRestricted+0x22>
    2832:	cf ef       	ldi	r28, 0xFF	; 255
    2834:	df ef       	ldi	r29, 0xFF	; 255
    2836:	61 2f       	mov	r22, r17
    2838:	ce 01       	movw	r24, r28
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0c 94 16 10 	jmp	0x202c	; 0x202c <prvAddCurrentTaskToDelayedList>

00002844 <xTaskRemoveFromEventList>:
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	dc 01       	movw	r26, r24
    284e:	15 96       	adiw	r26, 0x05	; 5
    2850:	ed 91       	ld	r30, X+
    2852:	fc 91       	ld	r31, X
    2854:	16 97       	sbiw	r26, 0x06	; 6
    2856:	c6 81       	ldd	r28, Z+6	; 0x06
    2858:	d7 81       	ldd	r29, Z+7	; 0x07
    285a:	8e 01       	movw	r16, r28
    285c:	04 5f       	subi	r16, 0xF4	; 244
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	c8 01       	movw	r24, r16
    2862:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2866:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    286a:	81 11       	cpse	r24, r1
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <xTaskRemoveFromEventList+0x52>
    286e:	0a 50       	subi	r16, 0x0A	; 10
    2870:	11 09       	sbc	r17, r1
    2872:	c8 01       	movw	r24, r16
    2874:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2878:	8e 89       	ldd	r24, Y+22	; 0x16
    287a:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    287e:	98 17       	cp	r25, r24
    2880:	10 f4       	brcc	.+4      	; 0x2886 <xTaskRemoveFromEventList+0x42>
    2882:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    2886:	b9 e0       	ldi	r27, 0x09	; 9
    2888:	8b 9f       	mul	r24, r27
    288a:	c0 01       	movw	r24, r0
    288c:	11 24       	eor	r1, r1
    288e:	b8 01       	movw	r22, r16
    2890:	88 5a       	subi	r24, 0xA8	; 168
    2892:	9b 4f       	sbci	r25, 0xFB	; 251
    2894:	03 c0       	rjmp	.+6      	; 0x289c <xTaskRemoveFromEventList+0x58>
    2896:	b8 01       	movw	r22, r16
    2898:	89 e3       	ldi	r24, 0x39	; 57
    289a:	94 e0       	ldi	r25, 0x04	; 4
    289c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    28a0:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    28a4:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    28a8:	9e 89       	ldd	r25, Y+22	; 0x16
    28aa:	86 89       	ldd	r24, Z+22	; 0x16
    28ac:	89 17       	cp	r24, r25
    28ae:	20 f4       	brcc	.+8      	; 0x28b8 <xTaskRemoveFromEventList+0x74>
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <xYieldPending>
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <xTaskRemoveFromEventList+0x76>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	08 95       	ret

000028c4 <vTaskInternalSetTimeOutState>:
    28c4:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <xNumOfOverflows>
    28c8:	fc 01       	movw	r30, r24
    28ca:	20 83       	st	Z, r18
    28cc:	20 91 23 04 	lds	r18, 0x0423	; 0x800423 <xTickCount>
    28d0:	30 91 24 04 	lds	r19, 0x0424	; 0x800424 <xTickCount+0x1>
    28d4:	32 83       	std	Z+2, r19	; 0x02
    28d6:	21 83       	std	Z+1, r18	; 0x01
    28d8:	08 95       	ret

000028da <xTaskCheckForTimeOut>:
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	0f 92       	push	r0
    28e4:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <xTickCount>
    28e8:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <xTickCount+0x1>
    28ec:	db 01       	movw	r26, r22
    28ee:	2d 91       	ld	r18, X+
    28f0:	3c 91       	ld	r19, X
    28f2:	2f 3f       	cpi	r18, 0xFF	; 255
    28f4:	bf ef       	ldi	r27, 0xFF	; 255
    28f6:	3b 07       	cpc	r19, r27
    28f8:	d9 f0       	breq	.+54     	; 0x2930 <xTaskCheckForTimeOut+0x56>
    28fa:	ec 01       	movw	r28, r24
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	a0 91 1e 04 	lds	r26, 0x041E	; 0x80041e <xNumOfOverflows>
    2904:	b8 81       	ld	r27, Y
    2906:	ba 17       	cp	r27, r26
    2908:	19 f0       	breq	.+6      	; 0x2910 <xTaskCheckForTimeOut+0x36>
    290a:	4e 17       	cp	r20, r30
    290c:	5f 07       	cpc	r21, r31
    290e:	90 f4       	brcc	.+36     	; 0x2934 <xTaskCheckForTimeOut+0x5a>
    2910:	4e 1b       	sub	r20, r30
    2912:	5f 0b       	sbc	r21, r31
    2914:	fb 01       	movw	r30, r22
    2916:	42 17       	cp	r20, r18
    2918:	53 07       	cpc	r21, r19
    291a:	38 f4       	brcc	.+14     	; 0x292a <xTaskCheckForTimeOut+0x50>
    291c:	24 1b       	sub	r18, r20
    291e:	35 0b       	sbc	r19, r21
    2920:	31 83       	std	Z+1, r19	; 0x01
    2922:	20 83       	st	Z, r18
    2924:	0e 94 62 14 	call	0x28c4	; 0x28c4 <vTaskInternalSetTimeOutState>
    2928:	03 c0       	rjmp	.+6      	; 0x2930 <xTaskCheckForTimeOut+0x56>
    292a:	11 82       	std	Z+1, r1	; 0x01
    292c:	10 82       	st	Z, r1
    292e:	02 c0       	rjmp	.+4      	; 0x2934 <xTaskCheckForTimeOut+0x5a>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <xTaskCheckForTimeOut+0x5c>
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <vTaskMissedYield>:
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <xYieldPending>
    2946:	08 95       	ret

00002948 <xTaskGetSchedulerState>:
    2948:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <xSchedulerRunning>
    294c:	88 23       	and	r24, r24
    294e:	31 f0       	breq	.+12     	; 0x295c <xTaskGetSchedulerState+0x14>
    2950:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <uxSchedulerSuspended>
    2954:	88 23       	and	r24, r24
    2956:	21 f0       	breq	.+8      	; 0x2960 <xTaskGetSchedulerState+0x18>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	08 95       	ret
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	08 95       	ret
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	08 95       	ret

00002964 <xTaskPriorityInherit>:
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	fc 01       	movw	r30, r24
    296e:	89 2b       	or	r24, r25
    2970:	09 f4       	brne	.+2      	; 0x2974 <xTaskPriorityInherit+0x10>
    2972:	55 c0       	rjmp	.+170    	; 0x2a1e <xTaskPriorityInherit+0xba>
    2974:	86 89       	ldd	r24, Z+22	; 0x16
    2976:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    297a:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    297e:	56 96       	adiw	r26, 0x16	; 22
    2980:	9c 91       	ld	r25, X
    2982:	89 17       	cp	r24, r25
    2984:	08 f0       	brcs	.+2      	; 0x2988 <xTaskPriorityInherit+0x24>
    2986:	41 c0       	rjmp	.+130    	; 0x2a0a <xTaskPriorityInherit+0xa6>
    2988:	24 85       	ldd	r18, Z+12	; 0x0c
    298a:	35 85       	ldd	r19, Z+13	; 0x0d
    298c:	37 fd       	sbrc	r19, 7
    298e:	0c c0       	rjmp	.+24     	; 0x29a8 <xTaskPriorityInherit+0x44>
    2990:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    2994:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2998:	56 96       	adiw	r26, 0x16	; 22
    299a:	9c 91       	ld	r25, X
    299c:	24 e0       	ldi	r18, 0x04	; 4
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	29 1b       	sub	r18, r25
    29a2:	31 09       	sbc	r19, r1
    29a4:	35 87       	std	Z+13, r19	; 0x0d
    29a6:	24 87       	std	Z+12, r18	; 0x0c
    29a8:	29 e0       	ldi	r18, 0x09	; 9
    29aa:	82 9f       	mul	r24, r18
    29ac:	c0 01       	movw	r24, r0
    29ae:	11 24       	eor	r1, r1
    29b0:	88 5a       	subi	r24, 0xA8	; 168
    29b2:	9b 4f       	sbci	r25, 0xFB	; 251
    29b4:	22 85       	ldd	r18, Z+10	; 0x0a
    29b6:	33 85       	ldd	r19, Z+11	; 0x0b
    29b8:	28 17       	cp	r18, r24
    29ba:	39 07       	cpc	r19, r25
    29bc:	e9 f4       	brne	.+58     	; 0x29f8 <xTaskPriorityInherit+0x94>
    29be:	8f 01       	movw	r16, r30
    29c0:	ef 01       	movw	r28, r30
    29c2:	22 96       	adiw	r28, 0x02	; 2
    29c4:	ce 01       	movw	r24, r28
    29c6:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    29ca:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    29ce:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    29d2:	86 89       	ldd	r24, Z+22	; 0x16
    29d4:	f8 01       	movw	r30, r16
    29d6:	86 8b       	std	Z+22, r24	; 0x16
    29d8:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    29dc:	98 17       	cp	r25, r24
    29de:	10 f4       	brcc	.+4      	; 0x29e4 <xTaskPriorityInherit+0x80>
    29e0:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    29e4:	f9 e0       	ldi	r31, 0x09	; 9
    29e6:	8f 9f       	mul	r24, r31
    29e8:	c0 01       	movw	r24, r0
    29ea:	11 24       	eor	r1, r1
    29ec:	be 01       	movw	r22, r28
    29ee:	88 5a       	subi	r24, 0xA8	; 168
    29f0:	9b 4f       	sbci	r25, 0xFB	; 251
    29f2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    29f6:	07 c0       	rjmp	.+14     	; 0x2a06 <xTaskPriorityInherit+0xa2>
    29f8:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    29fc:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2a00:	56 96       	adiw	r26, 0x16	; 22
    2a02:	8c 91       	ld	r24, X
    2a04:	86 8b       	std	Z+22, r24	; 0x16
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <xTaskPriorityInherit+0xbc>
    2a0a:	a0 91 7c 04 	lds	r26, 0x047C	; 0x80047c <pxCurrentTCB>
    2a0e:	b0 91 7d 04 	lds	r27, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	21 a1       	ldd	r18, Z+33	; 0x21
    2a16:	56 96       	adiw	r26, 0x16	; 22
    2a18:	9c 91       	ld	r25, X
    2a1a:	29 17       	cp	r18, r25
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <xTaskPriorityInherit+0xbc>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	08 95       	ret

00002a2a <xTaskPriorityDisinherit>:
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	fc 01       	movw	r30, r24
    2a34:	89 2b       	or	r24, r25
    2a36:	11 f4       	brne	.+4      	; 0x2a3c <xTaskPriorityDisinherit+0x12>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	2c c0       	rjmp	.+88     	; 0x2a94 <xTaskPriorityDisinherit+0x6a>
    2a3c:	82 a1       	ldd	r24, Z+34	; 0x22
    2a3e:	81 50       	subi	r24, 0x01	; 1
    2a40:	82 a3       	std	Z+34, r24	; 0x22
    2a42:	26 89       	ldd	r18, Z+22	; 0x16
    2a44:	91 a1       	ldd	r25, Z+33	; 0x21
    2a46:	29 17       	cp	r18, r25
    2a48:	b9 f3       	breq	.-18     	; 0x2a38 <xTaskPriorityDisinherit+0xe>
    2a4a:	81 11       	cpse	r24, r1
    2a4c:	f5 cf       	rjmp	.-22     	; 0x2a38 <xTaskPriorityDisinherit+0xe>
    2a4e:	ef 01       	movw	r28, r30
    2a50:	8f 01       	movw	r16, r30
    2a52:	0e 5f       	subi	r16, 0xFE	; 254
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	c8 01       	movw	r24, r16
    2a58:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	8e 8b       	std	Y+22, r24	; 0x16
    2a60:	48 2f       	mov	r20, r24
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	24 e0       	ldi	r18, 0x04	; 4
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	24 1b       	sub	r18, r20
    2a6a:	35 0b       	sbc	r19, r21
    2a6c:	3d 87       	std	Y+13, r19	; 0x0d
    2a6e:	2c 87       	std	Y+12, r18	; 0x0c
    2a70:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    2a74:	98 17       	cp	r25, r24
    2a76:	10 f4       	brcc	.+4      	; 0x2a7c <xTaskPriorityDisinherit+0x52>
    2a78:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    2a7c:	29 e0       	ldi	r18, 0x09	; 9
    2a7e:	24 9f       	mul	r18, r20
    2a80:	c0 01       	movw	r24, r0
    2a82:	25 9f       	mul	r18, r21
    2a84:	90 0d       	add	r25, r0
    2a86:	11 24       	eor	r1, r1
    2a88:	b8 01       	movw	r22, r16
    2a8a:	88 5a       	subi	r24, 0xA8	; 168
    2a8c:	9b 4f       	sbci	r25, 0xFB	; 251
    2a8e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <vListInsertEnd>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	df 91       	pop	r29
    2a96:	cf 91       	pop	r28
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <vTaskPriorityDisinheritAfterTimeout>:
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	89 2b       	or	r24, r25
    2aaa:	d9 f1       	breq	.+118    	; 0x2b22 <vTaskPriorityDisinheritAfterTimeout+0x84>
    2aac:	91 a1       	ldd	r25, Z+33	; 0x21
    2aae:	96 17       	cp	r25, r22
    2ab0:	08 f4       	brcc	.+2      	; 0x2ab4 <vTaskPriorityDisinheritAfterTimeout+0x16>
    2ab2:	96 2f       	mov	r25, r22
    2ab4:	86 89       	ldd	r24, Z+22	; 0x16
    2ab6:	89 17       	cp	r24, r25
    2ab8:	a1 f1       	breq	.+104    	; 0x2b22 <vTaskPriorityDisinheritAfterTimeout+0x84>
    2aba:	22 a1       	ldd	r18, Z+34	; 0x22
    2abc:	21 30       	cpi	r18, 0x01	; 1
    2abe:	89 f5       	brne	.+98     	; 0x2b22 <vTaskPriorityDisinheritAfterTimeout+0x84>
    2ac0:	96 8b       	std	Z+22, r25	; 0x16
    2ac2:	24 85       	ldd	r18, Z+12	; 0x0c
    2ac4:	35 85       	ldd	r19, Z+13	; 0x0d
    2ac6:	37 fd       	sbrc	r19, 7
    2ac8:	06 c0       	rjmp	.+12     	; 0x2ad6 <vTaskPriorityDisinheritAfterTimeout+0x38>
    2aca:	24 e0       	ldi	r18, 0x04	; 4
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	29 1b       	sub	r18, r25
    2ad0:	31 09       	sbc	r19, r1
    2ad2:	35 87       	std	Z+13, r19	; 0x0d
    2ad4:	24 87       	std	Z+12, r18	; 0x0c
    2ad6:	29 e0       	ldi	r18, 0x09	; 9
    2ad8:	82 9f       	mul	r24, r18
    2ada:	c0 01       	movw	r24, r0
    2adc:	11 24       	eor	r1, r1
    2ade:	88 5a       	subi	r24, 0xA8	; 168
    2ae0:	9b 4f       	sbci	r25, 0xFB	; 251
    2ae2:	22 85       	ldd	r18, Z+10	; 0x0a
    2ae4:	33 85       	ldd	r19, Z+11	; 0x0b
    2ae6:	28 17       	cp	r18, r24
    2ae8:	39 07       	cpc	r19, r25
    2aea:	d9 f4       	brne	.+54     	; 0x2b22 <vTaskPriorityDisinheritAfterTimeout+0x84>
    2aec:	ef 01       	movw	r28, r30
    2aee:	8f 01       	movw	r16, r30
    2af0:	0e 5f       	subi	r16, 0xFE	; 254
    2af2:	1f 4f       	sbci	r17, 0xFF	; 255
    2af4:	c8 01       	movw	r24, r16
    2af6:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    2afa:	8e 89       	ldd	r24, Y+22	; 0x16
    2afc:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <uxTopReadyPriority>
    2b00:	98 17       	cp	r25, r24
    2b02:	10 f4       	brcc	.+4      	; 0x2b08 <vTaskPriorityDisinheritAfterTimeout+0x6a>
    2b04:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <uxTopReadyPriority>
    2b08:	29 e0       	ldi	r18, 0x09	; 9
    2b0a:	82 9f       	mul	r24, r18
    2b0c:	c0 01       	movw	r24, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	b8 01       	movw	r22, r16
    2b12:	88 5a       	subi	r24, 0xA8	; 168
    2b14:	9b 4f       	sbci	r25, 0xFB	; 251
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <vListInsertEnd>
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2b2c:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <pxCurrentTCB>
    2b30:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2b34:	89 2b       	or	r24, r25
    2b36:	39 f0       	breq	.+14     	; 0x2b46 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2b38:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <pxCurrentTCB>
    2b3c:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    2b40:	82 a1       	ldd	r24, Z+34	; 0x22
    2b42:	8f 5f       	subi	r24, 0xFF	; 255
    2b44:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    2b46:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <pxCurrentTCB>
    2b4a:	90 91 7d 04 	lds	r25, 0x047D	; 0x80047d <pxCurrentTCB+0x1>
    }
    2b4e:	08 95       	ret

00002b50 <prvCheckForValidListAndQueue>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2b50:	0f b6       	in	r0, 0x3f	; 63
    2b52:	f8 94       	cli
    2b54:	0f 92       	push	r0
    2b56:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <xTimerQueue>
    2b5a:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <xTimerQueue+0x1>
    2b5e:	89 2b       	or	r24, r25
    2b60:	e9 f4       	brne	.+58     	; 0x2b9c <prvCheckForValidListAndQueue+0x4c>
    2b62:	81 e9       	ldi	r24, 0x91	; 145
    2b64:	94 e0       	ldi	r25, 0x04	; 4
    2b66:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    2b6a:	88 e8       	ldi	r24, 0x88	; 136
    2b6c:	94 e0       	ldi	r25, 0x04	; 4
    2b6e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <vListInitialise>
    2b72:	81 e9       	ldi	r24, 0x91	; 145
    2b74:	94 e0       	ldi	r25, 0x04	; 4
    2b76:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <pxCurrentTimerList+0x1>
    2b7a:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <pxCurrentTimerList>
    2b7e:	88 e8       	ldi	r24, 0x88	; 136
    2b80:	94 e0       	ldi	r25, 0x04	; 4
    2b82:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <pxOverflowTimerList+0x1>
    2b86:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <pxOverflowTimerList>
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	65 e0       	ldi	r22, 0x05	; 5
    2b8e:	8a e0       	ldi	r24, 0x0A	; 10
    2b90:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <xQueueGenericCreate>
    2b94:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <xTimerQueue+0x1>
    2b98:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <xTimerQueue>
    2b9c:	0f 90       	pop	r0
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	08 95       	ret

00002ba2 <prvInsertTimerInActiveList>:
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	73 83       	std	Z+3, r23	; 0x03
    2ba6:	62 83       	std	Z+2, r22	; 0x02
    2ba8:	91 87       	std	Z+9, r25	; 0x09
    2baa:	80 87       	std	Z+8, r24	; 0x08
    2bac:	46 17       	cp	r20, r22
    2bae:	57 07       	cpc	r21, r23
    2bb0:	78 f0       	brcs	.+30     	; 0x2bd0 <prvInsertTimerInActiveList+0x2e>
    2bb2:	42 1b       	sub	r20, r18
    2bb4:	53 0b       	sbc	r21, r19
    2bb6:	84 85       	ldd	r24, Z+12	; 0x0c
    2bb8:	95 85       	ldd	r25, Z+13	; 0x0d
    2bba:	48 17       	cp	r20, r24
    2bbc:	59 07       	cpc	r21, r25
    2bbe:	c8 f4       	brcc	.+50     	; 0x2bf2 <prvInsertTimerInActiveList+0x50>
    2bc0:	bf 01       	movw	r22, r30
    2bc2:	6e 5f       	subi	r22, 0xFE	; 254
    2bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc6:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <pxOverflowTimerList>
    2bca:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <pxOverflowTimerList+0x1>
    2bce:	0d c0       	rjmp	.+26     	; 0x2bea <prvInsertTimerInActiveList+0x48>
    2bd0:	42 17       	cp	r20, r18
    2bd2:	53 07       	cpc	r21, r19
    2bd4:	18 f4       	brcc	.+6      	; 0x2bdc <prvInsertTimerInActiveList+0x3a>
    2bd6:	62 17       	cp	r22, r18
    2bd8:	73 07       	cpc	r23, r19
    2bda:	58 f4       	brcc	.+22     	; 0x2bf2 <prvInsertTimerInActiveList+0x50>
    2bdc:	bf 01       	movw	r22, r30
    2bde:	6e 5f       	subi	r22, 0xFE	; 254
    2be0:	7f 4f       	sbci	r23, 0xFF	; 255
    2be2:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxCurrentTimerList>
    2be6:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxCurrentTimerList+0x1>
    2bea:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInsert>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	08 95       	ret
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	08 95       	ret

00002bf6 <xTimerCreateTimerTask>:
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
    2bfa:	0f 93       	push	r16
    2bfc:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <prvCheckForValidListAndQueue>
    2c00:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <xTimerQueue>
    2c04:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <xTimerQueue+0x1>
    2c08:	89 2b       	or	r24, r25
    2c0a:	81 f0       	breq	.+32     	; 0x2c2c <xTimerCreateTimerTask+0x36>
    2c0c:	80 e8       	ldi	r24, 0x80	; 128
    2c0e:	e8 2e       	mov	r14, r24
    2c10:	84 e0       	ldi	r24, 0x04	; 4
    2c12:	f8 2e       	mov	r15, r24
    2c14:	03 e0       	ldi	r16, 0x03	; 3
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	45 e5       	ldi	r20, 0x55	; 85
    2c1c:	50 e0       	ldi	r21, 0x00	; 0
    2c1e:	64 e7       	ldi	r22, 0x74	; 116
    2c20:	72 e0       	ldi	r23, 0x02	; 2
    2c22:	8b ea       	ldi	r24, 0xAB	; 171
    2c24:	96 e1       	ldi	r25, 0x16	; 22
    2c26:	0e 94 a0 10 	call	0x2140	; 0x2140 <xTaskCreate>
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <xTimerCreateTimerTask+0x38>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	08 95       	ret

00002c36 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <xTimerGenericCommand+0xa>
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <xTimerGenericCommand+0xc>
    2c42:	1f 92       	push	r1
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2c48:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <xTimerQueue>
    2c4c:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <xTimerQueue+0x1>
    2c50:	10 97       	sbiw	r26, 0x00	; 0
    2c52:	29 f1       	breq	.+74     	; 0x2c9e <xTimerGenericCommand+0x68>
    2c54:	f9 01       	movw	r30, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2c56:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2c58:	5b 83       	std	Y+3, r21	; 0x03
    2c5a:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2c5c:	9d 83       	std	Y+5, r25	; 0x05
    2c5e:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2c60:	66 30       	cpi	r22, 0x06	; 6
    2c62:	a4 f4       	brge	.+40     	; 0x2c8c <xTimerGenericCommand+0x56>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c64:	0e 94 a4 14 	call	0x2948	; 0x2948 <xTaskGetSchedulerState>
    2c68:	e0 91 82 04 	lds	r30, 0x0482	; 0x800482 <xTimerQueue>
    2c6c:	f0 91 83 04 	lds	r31, 0x0483	; 0x800483 <xTimerQueue+0x1>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c70:	20 e0       	ldi	r18, 0x00	; 0
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
        xMessage.u.xTimerParameters.pxTimer = xTimer;

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c72:	82 30       	cpi	r24, 0x02	; 2
    2c74:	11 f4       	brne	.+4      	; 0x2c7a <xTimerGenericCommand+0x44>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c76:	a8 01       	movw	r20, r16
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <xTimerGenericCommand+0x48>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	be 01       	movw	r22, r28
    2c80:	6f 5f       	subi	r22, 0xFF	; 255
    2c82:	7f 4f       	sbci	r23, 0xFF	; 255
    2c84:	cf 01       	movw	r24, r30
    2c86:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <xQueueGenericSend>
    2c8a:	0a c0       	rjmp	.+20     	; 0x2ca0 <xTimerGenericCommand+0x6a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	af 01       	movw	r20, r30
    2c90:	be 01       	movw	r22, r28
    2c92:	6f 5f       	subi	r22, 0xFF	; 255
    2c94:	7f 4f       	sbci	r23, 0xFF	; 255
    2c96:	cd 01       	movw	r24, r26
    2c98:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <xQueueGenericSendFromISR>
    2c9c:	01 c0       	rjmp	.+2      	; 0x2ca0 <xTimerGenericCommand+0x6a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	1f 91       	pop	r17
    2cb0:	0f 91       	pop	r16
    2cb2:	08 95       	ret

00002cb4 <prvSwitchTimerLists>:
    }
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    2cb4:	ef 92       	push	r14
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2cc0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxCurrentTimerList>
    2cc4:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxCurrentTimerList+0x1>
    2cc8:	80 81       	ld	r24, Z
    2cca:	88 23       	and	r24, r24
    2ccc:	89 f1       	breq	.+98     	; 0x2d30 <prvSwitchTimerLists+0x7c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2cce:	05 80       	ldd	r0, Z+5	; 0x05
    2cd0:	f6 81       	ldd	r31, Z+6	; 0x06
    2cd2:	e0 2d       	mov	r30, r0
    2cd4:	e0 80       	ld	r14, Z
    2cd6:	f1 80       	ldd	r15, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cd8:	c6 81       	ldd	r28, Z+6	; 0x06
    2cda:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2cdc:	8e 01       	movw	r16, r28
    2cde:	0e 5f       	subi	r16, 0xFE	; 254
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ce8:	e8 89       	ldd	r30, Y+16	; 0x10
    2cea:	f9 89       	ldd	r31, Y+17	; 0x11
    2cec:	ce 01       	movw	r24, r28
    2cee:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cf0:	8a 89       	ldd	r24, Y+18	; 0x12
    2cf2:	82 ff       	sbrs	r24, 2
    2cf4:	e5 cf       	rjmp	.-54     	; 0x2cc0 <prvSwitchTimerLists+0xc>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2cf6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cf8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cfa:	8e 0d       	add	r24, r14
    2cfc:	9f 1d       	adc	r25, r15
            if( xReloadTime > xNextExpireTime )
    2cfe:	e8 16       	cp	r14, r24
    2d00:	f9 06       	cpc	r15, r25
    2d02:	60 f4       	brcc	.+24     	; 0x2d1c <prvSwitchTimerLists+0x68>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2d04:	9b 83       	std	Y+3, r25	; 0x03
    2d06:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2d08:	d9 87       	std	Y+9, r29	; 0x09
    2d0a:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2d0c:	b8 01       	movw	r22, r16
    2d0e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <pxCurrentTimerList>
    2d12:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <pxCurrentTimerList+0x1>
    2d16:	0e 94 cd 0a 	call	0x159a	; 0x159a <vListInsert>
    2d1a:	d2 cf       	rjmp	.-92     	; 0x2cc0 <prvSwitchTimerLists+0xc>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d1c:	00 e0       	ldi	r16, 0x00	; 0
    2d1e:	10 e0       	ldi	r17, 0x00	; 0
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	a7 01       	movw	r20, r14
    2d26:	60 e0       	ldi	r22, 0x00	; 0
    2d28:	ce 01       	movw	r24, r28
    2d2a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTimerGenericCommand>
    2d2e:	c8 cf       	rjmp	.-112    	; 0x2cc0 <prvSwitchTimerLists+0xc>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2d30:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <pxOverflowTimerList>
    2d34:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <pxOverflowTimerList+0x1>
    2d38:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <pxCurrentTimerList+0x1>
    2d3c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2d40:	f0 93 85 04 	sts	0x0485, r31	; 0x800485 <pxOverflowTimerList+0x1>
    2d44:	e0 93 84 04 	sts	0x0484, r30	; 0x800484 <pxOverflowTimerList>
}
    2d48:	df 91       	pop	r29
    2d4a:	cf 91       	pop	r28
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	ff 90       	pop	r15
    2d52:	ef 90       	pop	r14
    2d54:	08 95       	ret

00002d56 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2d56:	cf 93       	push	r28
    2d58:	df 93       	push	r29
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <prvTimerTask+0x6>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <prvTimerTask+0x8>
    2d5e:	1f 92       	push	r1
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2d64:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxCurrentTimerList>
    2d68:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxCurrentTimerList+0x1>
    2d6c:	d0 80       	ld	r13, Z
    if( *pxListWasEmpty == pdFALSE )
    2d6e:	dd 20       	and	r13, r13
    2d70:	31 f0       	breq	.+12     	; 0x2d7e <prvTimerTask+0x28>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2d72:	05 80       	ldd	r0, Z+5	; 0x05
    2d74:	f6 81       	ldd	r31, Z+6	; 0x06
    2d76:	e0 2d       	mov	r30, r0
    2d78:	e0 80       	ld	r14, Z
    2d7a:	f1 80       	ldd	r15, Z+1	; 0x01
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <prvTimerTask+0x2c>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2d7e:	e1 2c       	mov	r14, r1
    2d80:	f1 2c       	mov	r15, r1
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2d82:	0e 94 23 12 	call	0x2446	; 0x2446 <vTaskSuspendAll>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2d86:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskGetTickCount>
    2d8a:	8c 01       	movw	r16, r24

    if( xTimeNow < xLastTime )
    2d8c:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <xLastTime.2412>
    2d90:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <xLastTime.2412+0x1>
    2d94:	08 17       	cp	r16, r24
    2d96:	19 07       	cpc	r17, r25
    2d98:	20 f4       	brcc	.+8      	; 0x2da2 <prvTimerTask+0x4c>
    {
        prvSwitchTimerLists();
    2d9a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <prvTimerTask+0x4e>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    }

    xLastTime = xTimeNow;
    2da4:	10 93 7f 04 	sts	0x047F, r17	; 0x80047f <xLastTime.2412+0x1>
    2da8:	00 93 7e 04 	sts	0x047E, r16	; 0x80047e <xLastTime.2412>
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
    2dac:	81 11       	cpse	r24, r1
    2dae:	55 c0       	rjmp	.+170    	; 0x2e5a <prvTimerTask+0x104>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2db0:	dd 20       	and	r13, r13
    2db2:	d9 f1       	breq	.+118    	; 0x2e2a <prvTimerTask+0xd4>
    2db4:	0e 15       	cp	r16, r14
    2db6:	1f 05       	cpc	r17, r15
    2db8:	08 f4       	brcc	.+2      	; 0x2dbc <prvTimerTask+0x66>
    2dba:	3e c0       	rjmp	.+124    	; 0x2e38 <prvTimerTask+0xe2>
            {
                ( void ) xTaskResumeAll();
    2dbc:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2dc0:	e0 91 86 04 	lds	r30, 0x0486	; 0x800486 <pxCurrentTimerList>
    2dc4:	f0 91 87 04 	lds	r31, 0x0487	; 0x800487 <pxCurrentTimerList+0x1>
    2dc8:	05 80       	ldd	r0, Z+5	; 0x05
    2dca:	f6 81       	ldd	r31, Z+6	; 0x06
    2dcc:	e0 2d       	mov	r30, r0
    2dce:	c6 80       	ldd	r12, Z+6	; 0x06
    2dd0:	d7 80       	ldd	r13, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2dd2:	c6 01       	movw	r24, r12
    2dd4:	02 96       	adiw	r24, 0x02	; 2
    2dd6:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2dda:	d6 01       	movw	r26, r12
    2ddc:	52 96       	adiw	r26, 0x12	; 18
    2dde:	8c 91       	ld	r24, X
    2de0:	52 97       	sbiw	r26, 0x12	; 18
    2de2:	82 ff       	sbrs	r24, 2
    2de4:	17 c0       	rjmp	.+46     	; 0x2e14 <prvTimerTask+0xbe>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2de6:	1c 96       	adiw	r26, 0x0c	; 12
    2de8:	6d 91       	ld	r22, X+
    2dea:	7c 91       	ld	r23, X
    2dec:	1d 97       	sbiw	r26, 0x0d	; 13
    2dee:	6e 0d       	add	r22, r14
    2df0:	7f 1d       	adc	r23, r15
    2df2:	97 01       	movw	r18, r14
    2df4:	a8 01       	movw	r20, r16
    2df6:	c6 01       	movw	r24, r12
    2df8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <prvInsertTimerInActiveList>
    2dfc:	88 23       	and	r24, r24
    2dfe:	69 f0       	breq	.+26     	; 0x2e1a <prvTimerTask+0xc4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2e00:	00 e0       	ldi	r16, 0x00	; 0
    2e02:	10 e0       	ldi	r17, 0x00	; 0
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	a7 01       	movw	r20, r14
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	c6 01       	movw	r24, r12
    2e0e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTimerGenericCommand>
    2e12:	03 c0       	rjmp	.+6      	; 0x2e1a <prvTimerTask+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2e14:	8e 7f       	andi	r24, 0xFE	; 254
    2e16:	f6 01       	movw	r30, r12
    2e18:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e1a:	d6 01       	movw	r26, r12
    2e1c:	50 96       	adiw	r26, 0x10	; 16
    2e1e:	ed 91       	ld	r30, X+
    2e20:	fc 91       	ld	r31, X
    2e22:	51 97       	sbiw	r26, 0x11	; 17
    2e24:	c6 01       	movw	r24, r12
    2e26:	09 95       	icall
    2e28:	1e c0       	rjmp	.+60     	; 0x2e66 <prvTimerTask+0x110>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2e2a:	e0 91 84 04 	lds	r30, 0x0484	; 0x800484 <pxOverflowTimerList>
    2e2e:	f0 91 85 04 	lds	r31, 0x0485	; 0x800485 <pxOverflowTimerList+0x1>
    2e32:	80 81       	ld	r24, Z
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	81 11       	cpse	r24, r1
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2e38:	40 e0       	ldi	r20, 0x00	; 0
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e3a:	b7 01       	movw	r22, r14
    2e3c:	60 1b       	sub	r22, r16
    2e3e:	71 0b       	sbc	r23, r17
    2e40:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <xTimerQueue>
    2e44:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <xTimerQueue+0x1>
    2e48:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2e4c:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    2e50:	81 11       	cpse	r24, r1
    2e52:	09 c0       	rjmp	.+18     	; 0x2e66 <prvTimerTask+0x110>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2e54:	0e 94 cd 0b 	call	0x179a	; 0x179a <vPortYield>
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <prvTimerTask+0x110>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2e5a:	0e 94 df 12 	call	0x25be	; 0x25be <xTaskResumeAll>
    2e5e:	03 c0       	rjmp	.+6      	; 0x2e66 <prvTimerTask+0x110>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e60:	89 81       	ldd	r24, Y+1	; 0x01
    2e62:	87 ff       	sbrs	r24, 7
    2e64:	0e c0       	rjmp	.+28     	; 0x2e82 <prvTimerTask+0x12c>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	50 e0       	ldi	r21, 0x00	; 0
    2e6a:	be 01       	movw	r22, r28
    2e6c:	6f 5f       	subi	r22, 0xFF	; 255
    2e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e70:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <xTimerQueue>
    2e74:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <xTimerQueue+0x1>
    2e78:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <xQueueReceive>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	f0 cf       	rjmp	.-32     	; 0x2e60 <prvTimerTask+0x10a>
    2e80:	71 cf       	rjmp	.-286    	; 0x2d64 <prvTimerTask+0xe>
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e82:	ec 80       	ldd	r14, Y+4	; 0x04
    2e84:	fd 80       	ldd	r15, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e86:	f7 01       	movw	r30, r14
    2e88:	82 85       	ldd	r24, Z+10	; 0x0a
    2e8a:	93 85       	ldd	r25, Z+11	; 0x0b
    2e8c:	89 2b       	or	r24, r25
    2e8e:	21 f0       	breq	.+8      	; 0x2e98 <prvTimerTask+0x142>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e90:	c7 01       	movw	r24, r14
    2e92:	02 96       	adiw	r24, 0x02	; 2
    2e94:	0e 94 05 0b 	call	0x160a	; 0x160a <uxListRemove>
static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2e98:	0e 94 29 12 	call	0x2452	; 0x2452 <xTaskGetTickCount>
    2e9c:	6c 01       	movw	r12, r24

    if( xTimeNow < xLastTime )
    2e9e:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <xLastTime.2412>
    2ea2:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <xLastTime.2412+0x1>
    2ea6:	c8 16       	cp	r12, r24
    2ea8:	d9 06       	cpc	r13, r25
    2eaa:	10 f4       	brcc	.+4      	; 0x2eb0 <prvTimerTask+0x15a>
    {
        prvSwitchTimerLists();
    2eac:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <prvSwitchTimerLists>
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    }

    xLastTime = xTimeNow;
    2eb0:	d0 92 7f 04 	sts	0x047F, r13	; 0x80047f <xLastTime.2412+0x1>
    2eb4:	c0 92 7e 04 	sts	0x047E, r12	; 0x80047e <xLastTime.2412>
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

            switch( xMessage.xMessageID )
    2eb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eba:	0e 2e       	mov	r0, r30
    2ebc:	00 0c       	add	r0, r0
    2ebe:	ff 0b       	sbc	r31, r31
    2ec0:	ea 30       	cpi	r30, 0x0A	; 10
    2ec2:	f1 05       	cpc	r31, r1
    2ec4:	80 f6       	brcc	.-96     	; 0x2e66 <prvTimerTask+0x110>
    2ec6:	ec 5c       	subi	r30, 0xCC	; 204
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	d7 01       	movw	r26, r14
    2ecc:	52 96       	adiw	r26, 0x12	; 18
    2ece:	8c 91       	ld	r24, X
    2ed0:	0c 94 1a 26 	jmp	0x4c34	; 0x4c34 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ed4:	81 60       	ori	r24, 0x01	; 1
    2ed6:	f7 01       	movw	r30, r14
    2ed8:	82 8b       	std	Z+18, r24	; 0x12
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2eda:	2a 81       	ldd	r18, Y+2	; 0x02
    2edc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ede:	64 85       	ldd	r22, Z+12	; 0x0c
    2ee0:	75 85       	ldd	r23, Z+13	; 0x0d
    2ee2:	62 0f       	add	r22, r18
    2ee4:	73 1f       	adc	r23, r19
    2ee6:	a6 01       	movw	r20, r12
    2ee8:	c7 01       	movw	r24, r14
    2eea:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <prvInsertTimerInActiveList>
    2eee:	88 23       	and	r24, r24
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <prvTimerTask+0x19e>
    2ef2:	b9 cf       	rjmp	.-142    	; 0x2e66 <prvTimerTask+0x110>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ef4:	d7 01       	movw	r26, r14
    2ef6:	50 96       	adiw	r26, 0x10	; 16
    2ef8:	ed 91       	ld	r30, X+
    2efa:	fc 91       	ld	r31, X
    2efc:	51 97       	sbiw	r26, 0x11	; 17
    2efe:	c7 01       	movw	r24, r14
    2f00:	09 95       	icall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2f02:	f7 01       	movw	r30, r14
    2f04:	82 89       	ldd	r24, Z+18	; 0x12
    2f06:	82 ff       	sbrs	r24, 2
    2f08:	ae cf       	rjmp	.-164    	; 0x2e66 <prvTimerTask+0x110>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2f0a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f0c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f0e:	84 85       	ldd	r24, Z+12	; 0x0c
    2f10:	95 85       	ldd	r25, Z+13	; 0x0d
    2f12:	48 0f       	add	r20, r24
    2f14:	59 1f       	adc	r21, r25
    2f16:	00 e0       	ldi	r16, 0x00	; 0
    2f18:	10 e0       	ldi	r17, 0x00	; 0
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	60 e0       	ldi	r22, 0x00	; 0
    2f20:	c7 01       	movw	r24, r14
    2f22:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTimerGenericCommand>
    2f26:	9f cf       	rjmp	.-194    	; 0x2e66 <prvTimerTask+0x110>
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2f28:	81 60       	ori	r24, 0x01	; 1
    2f2a:	f7 01       	movw	r30, r14
    2f2c:	82 8b       	std	Z+18, r24	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2f2e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f30:	7b 81       	ldd	r23, Y+3	; 0x03
    2f32:	75 87       	std	Z+13, r23	; 0x0d
    2f34:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f36:	6c 0d       	add	r22, r12
    2f38:	7d 1d       	adc	r23, r13
    2f3a:	96 01       	movw	r18, r12
    2f3c:	a6 01       	movw	r20, r12
    2f3e:	c7 01       	movw	r24, r14
    2f40:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <prvInsertTimerInActiveList>
    2f44:	90 cf       	rjmp	.-224    	; 0x2e66 <prvTimerTask+0x110>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f46:	81 fd       	sbrc	r24, 1
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <prvTimerTask+0x1fc>
                        {
                            vPortFree( pxTimer );
    2f4a:	c7 01       	movw	r24, r14
    2f4c:	0e 94 89 0a 	call	0x1512	; 0x1512 <vPortFree>
    2f50:	8a cf       	rjmp	.-236    	; 0x2e66 <prvTimerTask+0x110>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f52:	8e 7f       	andi	r24, 0xFE	; 254
    2f54:	d7 01       	movw	r26, r14
    2f56:	52 96       	adiw	r26, 0x12	; 18
    2f58:	8c 93       	st	X, r24
    2f5a:	85 cf       	rjmp	.-246    	; 0x2e66 <prvTimerTask+0x110>

00002f5c <initVariant>:
{
#if defined(USBCON)
    USBDevice.attach();
#endif

    setup();        // the normal Arduino setup() function is run here.
    2f5c:	0e 94 c9 06 	call	0xd92	; 0xd92 <setup>
    vTaskStartScheduler(); // initialise and run the freeRTOS scheduler. Execution should never return here.
    2f60:	0e 94 f5 11 	call	0x23ea	; 0x23ea <vTaskStartScheduler>
    2f64:	08 95       	ret

00002f66 <vApplicationIdleHook>:
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    loop();        // the normal Arduino loop() function is run here.
    2f66:	0e 94 58 07 	call	0xeb0	; 0xeb0 <loop>
    if (serialEventRun) serialEventRun();
    2f6a:	87 e6       	ldi	r24, 0x67	; 103
    2f6c:	9e e1       	ldi	r25, 0x1E	; 30
    2f6e:	89 2b       	or	r24, r25
    2f70:	11 f0       	breq	.+4      	; 0x2f76 <vApplicationIdleHook+0x10>
    2f72:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <_Z14serialEventRunv>
    2f76:	08 95       	ret

00002f78 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    2f78:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    2f7a:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f7c:	2f ef       	ldi	r18, 0xFF	; 255
    2f7e:	80 e7       	ldi	r24, 0x70	; 112
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	21 50       	subi	r18, 0x01	; 1
    2f84:	80 40       	sbci	r24, 0x00	; 0
    2f86:	90 40       	sbci	r25, 0x00	; 0
    2f88:	e1 f7       	brne	.-8      	; 0x2f82 <vApplicationMallocFailedHook+0xa>
    2f8a:	00 c0       	rjmp	.+0      	; 0x2f8c <vApplicationMallocFailedHook+0x14>
    2f8c:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED fast blink.
    2f8e:	1d 9a       	sbi	0x03, 5	; 3
    2f90:	f5 cf       	rjmp	.-22     	; 0x2f7c <vApplicationMallocFailedHook+0x4>

00002f92 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    2f92:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (red PB5) LED on. Main LED on.
    2f94:	2d 9a       	sbi	0x05, 5	; 5
    2f96:	2f ef       	ldi	r18, 0xFF	; 255
    2f98:	87 ea       	ldi	r24, 0xA7	; 167
    2f9a:	91 e6       	ldi	r25, 0x61	; 97
    2f9c:	21 50       	subi	r18, 0x01	; 1
    2f9e:	80 40       	sbci	r24, 0x00	; 0
    2fa0:	90 40       	sbci	r25, 0x00	; 0
    2fa2:	e1 f7       	brne	.-8      	; 0x2f9c <vApplicationStackOverflowHook+0xa>
    2fa4:	00 c0       	rjmp	.+0      	; 0x2fa6 <vApplicationStackOverflowHook+0x14>
    2fa6:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (red PB5) LED toggle. Main LED slow blink.
    2fa8:	1d 9a       	sbi	0x03, 5	; 3
    2faa:	f5 cf       	rjmp	.-22     	; 0x2f96 <vApplicationStackOverflowHook+0x4>

00002fac <_ZN9MD_TCS23010initialiseEv>:
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	8f ef       	ldi	r24, 0xFF	; 255
    2fb4:	80 83       	st	Z, r24
    2fb6:	81 83       	std	Z+1, r24	; 0x01
    2fb8:	82 83       	std	Z+2, r24	; 0x02
    2fba:	83 83       	std	Z+3, r24	; 0x03
    2fbc:	84 83       	std	Z+4, r24	; 0x04
    2fbe:	8a e0       	ldi	r24, 0x0A	; 10
    2fc0:	85 83       	std	Z+5, r24	; 0x05
    2fc2:	16 82       	std	Z+6, r1	; 0x06
    2fc4:	df 01       	movw	r26, r30
    2fc6:	17 96       	adiw	r26, 0x07	; 7
    2fc8:	73 96       	adiw	r30, 0x13	; 19
    2fca:	00 e7       	ldi	r16, 0x70	; 112
    2fcc:	17 e1       	ldi	r17, 0x17	; 23
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	48 ed       	ldi	r20, 0xD8	; 216
    2fd4:	56 ed       	ldi	r21, 0xD6	; 214
    2fd6:	60 e0       	ldi	r22, 0x00	; 0
    2fd8:	70 e0       	ldi	r23, 0x00	; 0
    2fda:	0d 93       	st	X+, r16
    2fdc:	1d 93       	st	X+, r17
    2fde:	2d 93       	st	X+, r18
    2fe0:	3d 93       	st	X+, r19
    2fe2:	18 96       	adiw	r26, 0x08	; 8
    2fe4:	4d 93       	st	X+, r20
    2fe6:	5d 93       	st	X+, r21
    2fe8:	6d 93       	st	X+, r22
    2fea:	7c 93       	st	X, r23
    2fec:	1b 97       	sbiw	r26, 0x0b	; 11
    2fee:	ae 17       	cp	r26, r30
    2ff0:	bf 07       	cpc	r27, r31
    2ff2:	99 f7       	brne	.-26     	; 0x2fda <_ZN9MD_TCS23010initialiseEv+0x2e>
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	08 95       	ret

00002ffa <_ZN9MD_TCS230C1Ehhh>:
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	ec 01       	movw	r28, r24
    3006:	f6 2e       	mov	r15, r22
    3008:	04 2f       	mov	r16, r20
    300a:	12 2f       	mov	r17, r18
    300c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_ZN9MD_TCS23010initialiseEv>
    3010:	fb 82       	std	Y+3, r15	; 0x03
    3012:	0c 83       	std	Y+4, r16	; 0x04
    3014:	18 83       	st	Y, r17
    3016:	df 91       	pop	r29
    3018:	cf 91       	pop	r28
    301a:	1f 91       	pop	r17
    301c:	0f 91       	pop	r16
    301e:	ff 90       	pop	r15
    3020:	08 95       	ret

00003022 <_ZN9MD_TCS230D1Ev>:
    3022:	08 95       	ret

00003024 <_ZN9MD_TCS2309setFilterEh>:
    3024:	cf 93       	push	r28
    3026:	df 93       	push	r29
    3028:	ec 01       	movw	r28, r24
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	8f 3f       	cpi	r24, 0xFF	; 255
    302e:	e9 f0       	breq	.+58     	; 0x306a <_ZN9MD_TCS2309setFilterEh+0x46>
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	9f 3f       	cpi	r25, 0xFF	; 255
    3034:	d1 f0       	breq	.+52     	; 0x306a <_ZN9MD_TCS2309setFilterEh+0x46>
    3036:	61 30       	cpi	r22, 0x01	; 1
    3038:	49 f0       	breq	.+18     	; 0x304c <_ZN9MD_TCS2309setFilterEh+0x28>
    303a:	30 f0       	brcs	.+12     	; 0x3048 <_ZN9MD_TCS2309setFilterEh+0x24>
    303c:	62 30       	cpi	r22, 0x02	; 2
    303e:	41 f0       	breq	.+16     	; 0x3050 <_ZN9MD_TCS2309setFilterEh+0x2c>
    3040:	63 30       	cpi	r22, 0x03	; 3
    3042:	99 f4       	brne	.+38     	; 0x306a <_ZN9MD_TCS2309setFilterEh+0x46>
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	09 c0       	rjmp	.+18     	; 0x305a <_ZN9MD_TCS2309setFilterEh+0x36>
    3048:	60 e0       	ldi	r22, 0x00	; 0
    304a:	07 c0       	rjmp	.+14     	; 0x305a <_ZN9MD_TCS2309setFilterEh+0x36>
    304c:	61 e0       	ldi	r22, 0x01	; 1
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <_ZN9MD_TCS2309setFilterEh+0x2e>
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	03 c0       	rjmp	.+6      	; 0x3060 <_ZN9MD_TCS2309setFilterEh+0x3c>
    305a:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    305e:	60 e0       	ldi	r22, 0x00	; 0
    3060:	8c 81       	ldd	r24, Y+4	; 0x04
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <digitalWrite>
    306a:	df 91       	pop	r29
    306c:	cf 91       	pop	r28
    306e:	08 95       	ret

00003070 <_ZN9MD_TCS23013setFrequency2Eh>:
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	ec 01       	movw	r28, r24
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8f 3f       	cpi	r24, 0xFF	; 255
    307a:	e9 f0       	breq	.+58     	; 0x30b6 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	9f 3f       	cpi	r25, 0xFF	; 255
    3080:	d1 f0       	breq	.+52     	; 0x30b6 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3082:	61 30       	cpi	r22, 0x01	; 1
    3084:	49 f0       	breq	.+18     	; 0x3098 <_ZN9MD_TCS23013setFrequency2Eh+0x28>
    3086:	30 f0       	brcs	.+12     	; 0x3094 <_ZN9MD_TCS23013setFrequency2Eh+0x24>
    3088:	62 30       	cpi	r22, 0x02	; 2
    308a:	41 f0       	breq	.+16     	; 0x309c <_ZN9MD_TCS23013setFrequency2Eh+0x2c>
    308c:	63 30       	cpi	r22, 0x03	; 3
    308e:	99 f4       	brne	.+38     	; 0x30b6 <_ZN9MD_TCS23013setFrequency2Eh+0x46>
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	09 c0       	rjmp	.+18     	; 0x30a6 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	03 c0       	rjmp	.+6      	; 0x309e <_ZN9MD_TCS23013setFrequency2Eh+0x2e>
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	05 c0       	rjmp	.+10     	; 0x30a6 <_ZN9MD_TCS23013setFrequency2Eh+0x36>
    309c:	60 e0       	ldi	r22, 0x00	; 0
    309e:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <_ZN9MD_TCS23013setFrequency2Eh+0x3c>
    30a6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    30aa:	60 e0       	ldi	r22, 0x00	; 0
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	df 91       	pop	r29
    30b0:	cf 91       	pop	r28
    30b2:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <digitalWrite>
    30b6:	df 91       	pop	r29
    30b8:	cf 91       	pop	r28
    30ba:	08 95       	ret

000030bc <_ZN9MD_TCS2309setEnableEb>:
    30bc:	fc 01       	movw	r30, r24
    30be:	20 81       	ld	r18, Z
    30c0:	2f 3f       	cpi	r18, 0xFF	; 255
    30c2:	29 f0       	breq	.+10     	; 0x30ce <_ZN9MD_TCS2309setEnableEb+0x12>
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	69 27       	eor	r22, r25
    30c8:	82 2f       	mov	r24, r18
    30ca:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <digitalWrite>
    30ce:	66 23       	and	r22, r22
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <_ZN9MD_TCS2309setEnableEb+0x1c>
    30d2:	fc 01       	movw	r30, r24
    30d4:	66 81       	ldd	r22, Z+6	; 0x06
    30d6:	01 c0       	rjmp	.+2      	; 0x30da <_ZN9MD_TCS2309setEnableEb+0x1e>
    30d8:	63 e0       	ldi	r22, 0x03	; 3
    30da:	0c 94 38 18 	jmp	0x3070	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh>

000030de <_ZN9MD_TCS2305beginEv>:
    30de:	cf 93       	push	r28
    30e0:	df 93       	push	r29
    30e2:	ec 01       	movw	r28, r24
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	8f 3f       	cpi	r24, 0xFF	; 255
    30e8:	19 f0       	breq	.+6      	; 0x30f0 <_ZN9MD_TCS2305beginEv+0x12>
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	8f 3f       	cpi	r24, 0xFF	; 255
    30f4:	19 f0       	breq	.+6      	; 0x30fc <_ZN9MD_TCS2305beginEv+0x1e>
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3100:	19 f0       	breq	.+6      	; 0x3108 <_ZN9MD_TCS2305beginEv+0x2a>
    3102:	61 e0       	ldi	r22, 0x01	; 1
    3104:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    3108:	8c 81       	ldd	r24, Y+4	; 0x04
    310a:	8f 3f       	cpi	r24, 0xFF	; 255
    310c:	19 f0       	breq	.+6      	; 0x3114 <_ZN9MD_TCS2305beginEv+0x36>
    310e:	61 e0       	ldi	r22, 0x01	; 1
    3110:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    3114:	88 81       	ld	r24, Y
    3116:	8f 3f       	cpi	r24, 0xFF	; 255
    3118:	19 f0       	breq	.+6      	; 0x3120 <_ZN9MD_TCS2305beginEv+0x42>
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	ce 01       	movw	r24, r28
    3124:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN9MD_TCS2309setEnableEb>
    3128:	6e 81       	ldd	r22, Y+6	; 0x06
    312a:	ce 01       	movw	r24, r28
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	0c 94 38 18 	jmp	0x3070	; 0x3070 <_ZN9MD_TCS23013setFrequency2Eh>

00003134 <_ZN9MD_TCS2306getRGBEP9colorData>:
    3134:	dc 01       	movw	r26, r24
    3136:	fb 01       	movw	r30, r22
    3138:	30 97       	sbiw	r30, 0x00	; 0
    313a:	59 f0       	breq	.+22     	; 0x3152 <_ZN9MD_TCS2306getRGBEP9colorData+0x1e>
    313c:	9b 96       	adiw	r26, 0x2b	; 43
    313e:	8c 91       	ld	r24, X
    3140:	9b 97       	sbiw	r26, 0x2b	; 43
    3142:	80 83       	st	Z, r24
    3144:	9c 96       	adiw	r26, 0x2c	; 44
    3146:	8c 91       	ld	r24, X
    3148:	9c 97       	sbiw	r26, 0x2c	; 44
    314a:	81 83       	std	Z+1, r24	; 0x01
    314c:	9d 96       	adiw	r26, 0x2d	; 45
    314e:	8c 91       	ld	r24, X
    3150:	82 83       	std	Z+2, r24	; 0x02
    3152:	08 95       	ret

00003154 <_ZN9MD_TCS23017RGBTransformationEv>:
    3154:	4f 92       	push	r4
    3156:	5f 92       	push	r5
    3158:	6f 92       	push	r6
    315a:	7f 92       	push	r7
    315c:	8f 92       	push	r8
    315e:	9f 92       	push	r9
    3160:	af 92       	push	r10
    3162:	bf 92       	push	r11
    3164:	df 92       	push	r13
    3166:	ef 92       	push	r14
    3168:	ff 92       	push	r15
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	8c 01       	movw	r16, r24
    3174:	09 5f       	subi	r16, 0xF9	; 249
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	ec 01       	movw	r28, r24
    317a:	7c 01       	movw	r14, r24
    317c:	83 e1       	ldi	r24, 0x13	; 19
    317e:	e8 0e       	add	r14, r24
    3180:	f1 1c       	adc	r15, r1
    3182:	dd 24       	eor	r13, r13
    3184:	da 94       	dec	r13
    3186:	f8 01       	movw	r30, r16
    3188:	d8 01       	movw	r26, r16
    318a:	8d 90       	ld	r8, X+
    318c:	9d 90       	ld	r9, X+
    318e:	ad 90       	ld	r10, X+
    3190:	bd 90       	ld	r11, X+
    3192:	8d 01       	movw	r16, r26
    3194:	80 8d       	ldd	r24, Z+24	; 0x18
    3196:	91 8d       	ldd	r25, Z+25	; 0x19
    3198:	a2 8d       	ldd	r26, Z+26	; 0x1a
    319a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    319c:	9c 01       	movw	r18, r24
    319e:	ad 01       	movw	r20, r26
    31a0:	28 19       	sub	r18, r8
    31a2:	39 09       	sbc	r19, r9
    31a4:	4a 09       	sbc	r20, r10
    31a6:	5b 09       	sbc	r21, r11
    31a8:	af ef       	ldi	r26, 0xFF	; 255
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__muluhisi3>
    31b0:	f8 01       	movw	r30, r16
    31b2:	40 84       	ldd	r4, Z+8	; 0x08
    31b4:	51 84       	ldd	r5, Z+9	; 0x09
    31b6:	62 84       	ldd	r6, Z+10	; 0x0a
    31b8:	73 84       	ldd	r7, Z+11	; 0x0b
    31ba:	a3 01       	movw	r20, r6
    31bc:	92 01       	movw	r18, r4
    31be:	28 19       	sub	r18, r8
    31c0:	39 09       	sbc	r19, r9
    31c2:	4a 09       	sbc	r20, r10
    31c4:	5b 09       	sbc	r21, r11
    31c6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    31ca:	57 ff       	sbrs	r21, 7
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <_ZN9MD_TCS23017RGBTransformationEv+0x7e>
    31ce:	1b a6       	std	Y+43, r1	; 0x2b
    31d0:	09 c0       	rjmp	.+18     	; 0x31e4 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    31d2:	2f 3f       	cpi	r18, 0xFF	; 255
    31d4:	31 05       	cpc	r19, r1
    31d6:	41 05       	cpc	r20, r1
    31d8:	51 05       	cpc	r21, r1
    31da:	19 f0       	breq	.+6      	; 0x31e2 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    31dc:	14 f0       	brlt	.+4      	; 0x31e2 <_ZN9MD_TCS23017RGBTransformationEv+0x8e>
    31de:	db a6       	std	Y+43, r13	; 0x2b
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <_ZN9MD_TCS23017RGBTransformationEv+0x90>
    31e2:	2b a7       	std	Y+43, r18	; 0x2b
    31e4:	21 96       	adiw	r28, 0x01	; 1
    31e6:	0e 15       	cp	r16, r14
    31e8:	1f 05       	cpc	r17, r15
    31ea:	69 f6       	brne	.-102    	; 0x3186 <_ZN9MD_TCS23017RGBTransformationEv+0x32>
    31ec:	df 91       	pop	r29
    31ee:	cf 91       	pop	r28
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	ff 90       	pop	r15
    31f6:	ef 90       	pop	r14
    31f8:	df 90       	pop	r13
    31fa:	bf 90       	pop	r11
    31fc:	af 90       	pop	r10
    31fe:	9f 90       	pop	r9
    3200:	8f 90       	pop	r8
    3202:	7f 90       	pop	r7
    3204:	6f 90       	pop	r6
    3206:	5f 90       	pop	r5
    3208:	4f 90       	pop	r4
    320a:	08 95       	ret

0000320c <_ZN9MD_TCS2307readFSMEh>:
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	8c 01       	movw	r16, r24
    3216:	c6 2f       	mov	r28, r22
    3218:	61 30       	cpi	r22, 0x01	; 1
    321a:	49 f0       	breq	.+18     	; 0x322e <_ZN9MD_TCS2307readFSMEh+0x22>
    321c:	18 f0       	brcs	.+6      	; 0x3224 <_ZN9MD_TCS2307readFSMEh+0x18>
    321e:	62 30       	cpi	r22, 0x02	; 2
    3220:	d9 f0       	breq	.+54     	; 0x3258 <_ZN9MD_TCS2307readFSMEh+0x4c>
    3222:	4c c0       	rjmp	.+152    	; 0x32bc <_ZN9MD_TCS2307readFSMEh+0xb0>
    3224:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3228:	61 e0       	ldi	r22, 0x01	; 1
    322a:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN9MD_TCS2309setEnableEb>
    322e:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	e4 58       	subi	r30, 0x84	; 132
    3236:	fd 4f       	sbci	r31, 0xFD	; 253
    3238:	60 81       	ld	r22, Z
    323a:	c8 01       	movw	r24, r16
    323c:	0e 94 12 18 	call	0x3024	; 0x3024 <_ZN9MD_TCS2309setFilterEh>
    3240:	f8 01       	movw	r30, r16
    3242:	65 81       	ldd	r22, Z+5	; 0x05
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	88 ee       	ldi	r24, 0xE8	; 232
    3248:	93 e0       	ldi	r25, 0x03	; 3
    324a:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__divmodhi4>
    324e:	cb 01       	movw	r24, r22
    3250:	0e 94 a9 24 	call	0x4952	; 0x4952 <_ZN14FreqCountClass5beginEj>
    3254:	c2 e0       	ldi	r28, 0x02	; 2
    3256:	32 c0       	rjmp	.+100    	; 0x32bc <_ZN9MD_TCS2307readFSMEh+0xb0>
    3258:	0e 94 21 25 	call	0x4a42	; 0x4a42 <_ZN14FreqCountClass9availableEv>
    325c:	88 23       	and	r24, r24
    325e:	71 f1       	breq	.+92     	; 0x32bc <_ZN9MD_TCS2307readFSMEh+0xb0>
    3260:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <_ZZN9MD_TCS2307readFSMEhE7currCol>
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	8e 0f       	add	r24, r30
    3268:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <_ZZN9MD_TCS2307readFSMEhE7currCol>
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	e4 58       	subi	r30, 0x84	; 132
    3270:	fd 4f       	sbci	r31, 0xFD	; 253
    3272:	c0 81       	ld	r28, Z
    3274:	d0 e0       	ldi	r29, 0x00	; 0
    3276:	0e 94 24 25 	call	0x4a48	; 0x4a48 <_ZN14FreqCountClass4readEv>
    327a:	9b 01       	movw	r18, r22
    327c:	ac 01       	movw	r20, r24
    327e:	cc 0f       	add	r28, r28
    3280:	dd 1f       	adc	r29, r29
    3282:	cc 0f       	add	r28, r28
    3284:	dd 1f       	adc	r29, r29
    3286:	c0 0f       	add	r28, r16
    3288:	d1 1f       	adc	r29, r17
    328a:	f8 01       	movw	r30, r16
    328c:	a5 81       	ldd	r26, Z+5	; 0x05
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	0e 94 20 26 	call	0x4c40	; 0x4c40 <__muluhisi3>
    3294:	6f 8f       	std	Y+31, r22	; 0x1f
    3296:	78 a3       	std	Y+32, r23	; 0x20
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	9a a3       	std	Y+34, r25	; 0x22
    329c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <_ZZN9MD_TCS2307readFSMEhE7currCol>
    32a0:	83 30       	cpi	r24, 0x03	; 3
    32a2:	58 f0       	brcs	.+22     	; 0x32ba <_ZN9MD_TCS2307readFSMEh+0xae>
    32a4:	0e 94 32 25 	call	0x4a64	; 0x4a64 <_ZN14FreqCountClass3endEv>
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	c8 01       	movw	r24, r16
    32ac:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN9MD_TCS2309setEnableEb>
    32b0:	c8 01       	movw	r24, r16
    32b2:	0e 94 aa 18 	call	0x3154	; 0x3154 <_ZN9MD_TCS23017RGBTransformationEv>
    32b6:	c0 e0       	ldi	r28, 0x00	; 0
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <_ZN9MD_TCS2307readFSMEh+0xb0>
    32ba:	c1 e0       	ldi	r28, 0x01	; 1
    32bc:	8c 2f       	mov	r24, r28
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	08 95       	ret

000032c8 <_ZN9MD_TCS2304readEv>:
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	ec 01       	movw	r28, r24
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN9MD_TCS2307readFSMEh>
    32d4:	8e a7       	std	Y+46, r24	; 0x2e
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	08 95       	ret

000032dc <_ZN9MD_TCS2309availableEv>:
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	ec 01       	movw	r28, r24
    32e2:	6e a5       	ldd	r22, Y+46	; 0x2e
    32e4:	0e 94 06 19 	call	0x320c	; 0x320c <_ZN9MD_TCS2307readFSMEh>
    32e8:	98 2f       	mov	r25, r24
    32ea:	8e a7       	std	Y+46, r24	; 0x2e
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	91 11       	cpse	r25, r1
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	08 95       	ret

000032f8 <_ZN5Print17availableForWriteEv>:
    32f8:	80 e0       	ldi	r24, 0x00	; 0
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	08 95       	ret

000032fe <_ZN14SoftwareSerial4readEv>:
    32fe:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    3302:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    3306:	28 17       	cp	r18, r24
    3308:	39 07       	cpc	r19, r25
    330a:	b9 f4       	brne	.+46     	; 0x333a <_ZN14SoftwareSerial4readEv+0x3c>
    330c:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3310:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3314:	98 17       	cp	r25, r24
    3316:	89 f0       	breq	.+34     	; 0x333a <_ZN14SoftwareSerial4readEv+0x3c>
    3318:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	e3 56       	subi	r30, 0x63	; 99
    3320:	fb 4f       	sbci	r31, 0xFB	; 251
    3322:	80 81       	ld	r24, Z
    3324:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	2f 5f       	subi	r18, 0xFF	; 255
    332c:	3f 4f       	sbci	r19, 0xFF	; 255
    332e:	2f 73       	andi	r18, 0x3F	; 63
    3330:	33 27       	eor	r19, r19
    3332:	20 93 9b 04 	sts	0x049B, r18	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	08 95       	ret
    333a:	8f ef       	ldi	r24, 0xFF	; 255
    333c:	9f ef       	ldi	r25, 0xFF	; 255
    333e:	08 95       	ret

00003340 <_ZN14SoftwareSerial5writeEh>:
    3340:	1f 93       	push	r17
    3342:	cf 93       	push	r28
    3344:	df 93       	push	r29
    3346:	dc 01       	movw	r26, r24
    3348:	5c 96       	adiw	r26, 0x1c	; 28
    334a:	8d 91       	ld	r24, X+
    334c:	9c 91       	ld	r25, X
    334e:	5d 97       	sbiw	r26, 0x1d	; 29
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	39 f4       	brne	.+14     	; 0x3362 <_ZN14SoftwareSerial5writeEh+0x22>
    3354:	21 e0       	ldi	r18, 0x01	; 1
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	13 96       	adiw	r26, 0x03	; 3
    335a:	3c 93       	st	X, r19
    335c:	2e 93       	st	-X, r18
    335e:	12 97       	sbiw	r26, 0x02	; 2
    3360:	3b c0       	rjmp	.+118    	; 0x33d8 <_ZN14SoftwareSerial5writeEh+0x98>
    3362:	51 96       	adiw	r26, 0x11	; 17
    3364:	ed 91       	ld	r30, X+
    3366:	fc 91       	ld	r31, X
    3368:	52 97       	sbiw	r26, 0x12	; 18
    336a:	50 96       	adiw	r26, 0x10	; 16
    336c:	2c 91       	ld	r18, X
    336e:	50 97       	sbiw	r26, 0x10	; 16
    3370:	32 2f       	mov	r19, r18
    3372:	30 95       	com	r19
    3374:	1f b7       	in	r17, 0x3f	; 63
    3376:	5e 96       	adiw	r26, 0x1e	; 30
    3378:	4c 91       	ld	r20, X
    337a:	5e 97       	sbiw	r26, 0x1e	; 30
    337c:	74 2f       	mov	r23, r20
    337e:	72 70       	andi	r23, 0x02	; 2
    3380:	41 fd       	sbrc	r20, 1
    3382:	60 95       	com	r22
    3384:	f8 94       	cli
    3386:	40 81       	ld	r20, Z
    3388:	77 23       	and	r23, r23
    338a:	11 f0       	breq	.+4      	; 0x3390 <_ZN14SoftwareSerial5writeEh+0x50>
    338c:	42 2b       	or	r20, r18
    338e:	01 c0       	rjmp	.+2      	; 0x3392 <_ZN14SoftwareSerial5writeEh+0x52>
    3390:	43 23       	and	r20, r19
    3392:	40 83       	st	Z, r20
    3394:	ec 01       	movw	r28, r24
    3396:	21 97       	sbiw	r28, 0x01	; 1
    3398:	f1 f7       	brne	.-4      	; 0x3396 <_ZN14SoftwareSerial5writeEh+0x56>
    339a:	48 e0       	ldi	r20, 0x08	; 8
    339c:	50 81       	ld	r21, Z
    339e:	60 ff       	sbrs	r22, 0
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <_ZN14SoftwareSerial5writeEh+0x66>
    33a2:	52 2b       	or	r21, r18
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <_ZN14SoftwareSerial5writeEh+0x68>
    33a6:	53 23       	and	r21, r19
    33a8:	50 83       	st	Z, r21
    33aa:	ec 01       	movw	r28, r24
    33ac:	21 97       	sbiw	r28, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <_ZN14SoftwareSerial5writeEh+0x6c>
    33b0:	66 95       	lsr	r22
    33b2:	41 50       	subi	r20, 0x01	; 1
    33b4:	99 f7       	brne	.-26     	; 0x339c <_ZN14SoftwareSerial5writeEh+0x5c>
    33b6:	80 81       	ld	r24, Z
    33b8:	77 23       	and	r23, r23
    33ba:	19 f0       	breq	.+6      	; 0x33c2 <_ZN14SoftwareSerial5writeEh+0x82>
    33bc:	83 23       	and	r24, r19
    33be:	80 83       	st	Z, r24
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <_ZN14SoftwareSerial5writeEh+0x86>
    33c2:	28 2b       	or	r18, r24
    33c4:	20 83       	st	Z, r18
    33c6:	1f bf       	out	0x3f, r17	; 63
    33c8:	5c 96       	adiw	r26, 0x1c	; 28
    33ca:	8d 91       	ld	r24, X+
    33cc:	9c 91       	ld	r25, X
    33ce:	5d 97       	sbiw	r26, 0x1d	; 29
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <_ZN14SoftwareSerial5writeEh+0x90>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	08 95       	ret

000033e0 <_ZN14SoftwareSerial5flushEv>:
    33e0:	08 95       	ret

000033e2 <_ZN14SoftwareSerial4peekEv>:
    33e2:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    33e6:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    33ea:	28 17       	cp	r18, r24
    33ec:	39 07       	cpc	r19, r25
    33ee:	71 f4       	brne	.+28     	; 0x340c <_ZN14SoftwareSerial4peekEv+0x2a>
    33f0:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    33f4:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    33f8:	98 17       	cp	r25, r24
    33fa:	41 f0       	breq	.+16     	; 0x340c <_ZN14SoftwareSerial4peekEv+0x2a>
    33fc:	e0 91 9b 04 	lds	r30, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	e3 56       	subi	r30, 0x63	; 99
    3404:	fb 4f       	sbci	r31, 0xFB	; 251
    3406:	80 81       	ld	r24, Z
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	08 95       	ret
    340c:	8f ef       	ldi	r24, 0xFF	; 255
    340e:	9f ef       	ldi	r25, 0xFF	; 255
    3410:	08 95       	ret

00003412 <_ZN14SoftwareSerial9availableEv>:
    3412:	20 91 dd 04 	lds	r18, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    3416:	30 91 de 04 	lds	r19, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    341a:	28 17       	cp	r18, r24
    341c:	39 07       	cpc	r19, r25
    341e:	71 f4       	brne	.+28     	; 0x343c <_ZN14SoftwareSerial9availableEv+0x2a>
    3420:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3424:	20 91 9b 04 	lds	r18, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	80 5c       	subi	r24, 0xC0	; 192
    342c:	9f 4f       	sbci	r25, 0xFF	; 255
    342e:	82 1b       	sub	r24, r18
    3430:	91 09       	sbc	r25, r1
    3432:	60 e4       	ldi	r22, 0x40	; 64
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <__divmodhi4>
    343a:	08 95       	ret
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	08 95       	ret

00003442 <_ZN14SoftwareSerial13stopListeningEv>:
    3442:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    3446:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    344a:	e8 17       	cp	r30, r24
    344c:	f9 07       	cpc	r31, r25
    344e:	69 f4       	brne	.+26     	; 0x346a <_ZN14SoftwareSerial13stopListeningEv+0x28>
    3450:	a3 89       	ldd	r26, Z+19	; 0x13
    3452:	b4 89       	ldd	r27, Z+20	; 0x14
    3454:	9c 91       	ld	r25, X
    3456:	85 89       	ldd	r24, Z+21	; 0x15
    3458:	80 95       	com	r24
    345a:	89 23       	and	r24, r25
    345c:	8c 93       	st	X, r24
    345e:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    3462:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    3466:	81 e0       	ldi	r24, 0x01	; 1
    3468:	08 95       	ret
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	08 95       	ret

0000346e <_ZN14SoftwareSerial6listenEv>:
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	ec 01       	movw	r28, r24
    3474:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3476:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3478:	89 2b       	or	r24, r25
    347a:	f1 f0       	breq	.+60     	; 0x34b8 <_ZN14SoftwareSerial6listenEv+0x4a>
    347c:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    3480:	90 91 de 04 	lds	r25, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    3484:	c8 17       	cp	r28, r24
    3486:	d9 07       	cpc	r29, r25
    3488:	b9 f0       	breq	.+46     	; 0x34b8 <_ZN14SoftwareSerial6listenEv+0x4a>
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	11 f0       	breq	.+4      	; 0x3492 <_ZN14SoftwareSerial6listenEv+0x24>
    348e:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN14SoftwareSerial13stopListeningEv>
    3492:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3494:	8e 7f       	andi	r24, 0xFE	; 254
    3496:	8e 8f       	std	Y+30, r24	; 0x1e
    3498:	10 92 9c 04 	sts	0x049C, r1	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    349c:	10 92 9b 04 	sts	0x049B, r1	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    34a0:	d0 93 de 04 	sts	0x04DE, r29	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    34a4:	c0 93 dd 04 	sts	0x04DD, r28	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    34a8:	eb 89       	ldd	r30, Y+19	; 0x13
    34aa:	fc 89       	ldd	r31, Y+20	; 0x14
    34ac:	90 81       	ld	r25, Z
    34ae:	8d 89       	ldd	r24, Y+21	; 0x15
    34b0:	89 2b       	or	r24, r25
    34b2:	80 83       	st	Z, r24
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	01 c0       	rjmp	.+2      	; 0x34ba <_ZN14SoftwareSerial6listenEv+0x4c>
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	08 95       	ret

000034c0 <__vector_3>:
    34c0:	1f 92       	push	r1
    34c2:	0f 92       	push	r0
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	0f 92       	push	r0
    34c8:	11 24       	eor	r1, r1
    34ca:	2f 93       	push	r18
    34cc:	3f 93       	push	r19
    34ce:	4f 93       	push	r20
    34d0:	5f 93       	push	r21
    34d2:	6f 93       	push	r22
    34d4:	7f 93       	push	r23
    34d6:	8f 93       	push	r24
    34d8:	9f 93       	push	r25
    34da:	af 93       	push	r26
    34dc:	bf 93       	push	r27
    34de:	ef 93       	push	r30
    34e0:	ff 93       	push	r31
    34e2:	e0 91 dd 04 	lds	r30, 0x04DD	; 0x8004dd <_ZN14SoftwareSerial13active_objectE>
    34e6:	f0 91 de 04 	lds	r31, 0x04DE	; 0x8004de <_ZN14SoftwareSerial13active_objectE+0x1>
    34ea:	30 97       	sbiw	r30, 0x00	; 0
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <__vector_3+0x30>
    34ee:	51 c0       	rjmp	.+162    	; 0x3592 <__vector_3+0xd2>
    34f0:	96 8d       	ldd	r25, Z+30	; 0x1e
    34f2:	a6 85       	ldd	r26, Z+14	; 0x0e
    34f4:	b7 85       	ldd	r27, Z+15	; 0x0f
    34f6:	85 85       	ldd	r24, Z+13	; 0x0d
    34f8:	91 ff       	sbrs	r25, 1
    34fa:	04 c0       	rjmp	.+8      	; 0x3504 <__vector_3+0x44>
    34fc:	9c 91       	ld	r25, X
    34fe:	89 23       	and	r24, r25
    3500:	29 f4       	brne	.+10     	; 0x350c <__vector_3+0x4c>
    3502:	47 c0       	rjmp	.+142    	; 0x3592 <__vector_3+0xd2>
    3504:	9c 91       	ld	r25, X
    3506:	89 23       	and	r24, r25
    3508:	09 f0       	breq	.+2      	; 0x350c <__vector_3+0x4c>
    350a:	43 c0       	rjmp	.+134    	; 0x3592 <__vector_3+0xd2>
    350c:	a3 89       	ldd	r26, Z+19	; 0x13
    350e:	b4 89       	ldd	r27, Z+20	; 0x14
    3510:	9c 91       	ld	r25, X
    3512:	85 89       	ldd	r24, Z+21	; 0x15
    3514:	80 95       	com	r24
    3516:	89 23       	and	r24, r25
    3518:	8c 93       	st	X, r24
    351a:	86 89       	ldd	r24, Z+22	; 0x16
    351c:	97 89       	ldd	r25, Z+23	; 0x17
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	f1 f7       	brne	.-4      	; 0x351e <__vector_3+0x5e>
    3522:	60 8d       	ldd	r22, Z+24	; 0x18
    3524:	71 8d       	ldd	r23, Z+25	; 0x19
    3526:	a6 85       	ldd	r26, Z+14	; 0x0e
    3528:	b7 85       	ldd	r27, Z+15	; 0x0f
    352a:	55 85       	ldd	r21, Z+13	; 0x0d
    352c:	38 e0       	ldi	r19, 0x08	; 8
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	cb 01       	movw	r24, r22
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <__vector_3+0x72>
    3536:	82 2f       	mov	r24, r18
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	95 95       	asr	r25
    353c:	87 95       	ror	r24
    353e:	28 2f       	mov	r18, r24
    3540:	4c 91       	ld	r20, X
    3542:	45 23       	and	r20, r21
    3544:	09 f0       	breq	.+2      	; 0x3548 <__vector_3+0x88>
    3546:	20 68       	ori	r18, 0x80	; 128
    3548:	31 50       	subi	r19, 0x01	; 1
    354a:	91 f7       	brne	.-28     	; 0x3530 <__vector_3+0x70>
    354c:	86 8d       	ldd	r24, Z+30	; 0x1e
    354e:	81 fd       	sbrc	r24, 1
    3550:	20 95       	com	r18
    3552:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	8f 73       	andi	r24, 0x3F	; 63
    355c:	99 27       	eor	r25, r25
    355e:	30 91 9b 04 	lds	r19, 0x049B	; 0x80049b <_ZN14SoftwareSerial20_receive_buffer_headE>
    3562:	38 17       	cp	r19, r24
    3564:	49 f0       	breq	.+18     	; 0x3578 <__vector_3+0xb8>
    3566:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	a3 56       	subi	r26, 0x63	; 99
    356e:	bb 4f       	sbci	r27, 0xFB	; 251
    3570:	2c 93       	st	X, r18
    3572:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_ZN14SoftwareSerial20_receive_buffer_tailE>
    3576:	03 c0       	rjmp	.+6      	; 0x357e <__vector_3+0xbe>
    3578:	86 8d       	ldd	r24, Z+30	; 0x1e
    357a:	81 60       	ori	r24, 0x01	; 1
    357c:	86 8f       	std	Z+30, r24	; 0x1e
    357e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3580:	93 8d       	ldd	r25, Z+27	; 0x1b
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <__vector_3+0xc2>
    3586:	a3 89       	ldd	r26, Z+19	; 0x13
    3588:	b4 89       	ldd	r27, Z+20	; 0x14
    358a:	9c 91       	ld	r25, X
    358c:	85 89       	ldd	r24, Z+21	; 0x15
    358e:	89 2b       	or	r24, r25
    3590:	8c 93       	st	X, r24
    3592:	ff 91       	pop	r31
    3594:	ef 91       	pop	r30
    3596:	bf 91       	pop	r27
    3598:	af 91       	pop	r26
    359a:	9f 91       	pop	r25
    359c:	8f 91       	pop	r24
    359e:	7f 91       	pop	r23
    35a0:	6f 91       	pop	r22
    35a2:	5f 91       	pop	r21
    35a4:	4f 91       	pop	r20
    35a6:	3f 91       	pop	r19
    35a8:	2f 91       	pop	r18
    35aa:	0f 90       	pop	r0
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	0f 90       	pop	r0
    35b0:	1f 90       	pop	r1
    35b2:	18 95       	reti

000035b4 <_ZN14SoftwareSerialD1Ev>:
    35b4:	23 e8       	ldi	r18, 0x83	; 131
    35b6:	32 e0       	ldi	r19, 0x02	; 2
    35b8:	fc 01       	movw	r30, r24
    35ba:	31 83       	std	Z+1, r19	; 0x01
    35bc:	20 83       	st	Z, r18
    35be:	0c 94 21 1a 	jmp	0x3442	; 0x3442 <_ZN14SoftwareSerial13stopListeningEv>

000035c2 <_ZN14SoftwareSerial5setTXEh>:
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	ec 01       	movw	r28, r24
    35ca:	16 2f       	mov	r17, r22
    35cc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    35ce:	66 95       	lsr	r22
    35d0:	61 70       	andi	r22, 0x01	; 1
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	68 27       	eor	r22, r24
    35d6:	81 2f       	mov	r24, r17
    35d8:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    35dc:	61 e0       	ldi	r22, 0x01	; 1
    35de:	81 2f       	mov	r24, r17
    35e0:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    35e4:	81 2f       	mov	r24, r17
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	fc 01       	movw	r30, r24
    35ea:	ea 53       	subi	r30, 0x3A	; 58
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	e4 91       	lpm	r30, Z
    35f0:	e8 8b       	std	Y+16, r30	; 0x10
    35f2:	fc 01       	movw	r30, r24
    35f4:	e6 52       	subi	r30, 0x26	; 38
    35f6:	ff 4f       	sbci	r31, 0xFF	; 255
    35f8:	e4 91       	lpm	r30, Z
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	ee 0f       	add	r30, r30
    35fe:	ff 1f       	adc	r31, r31
    3600:	e8 50       	subi	r30, 0x08	; 8
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	85 91       	lpm	r24, Z+
    3606:	94 91       	lpm	r25, Z
    3608:	9a 8b       	std	Y+18, r25	; 0x12
    360a:	89 8b       	std	Y+17, r24	; 0x11
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	08 95       	ret

00003614 <_ZN14SoftwareSerial5setRXEh>:
    3614:	1f 93       	push	r17
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ec 01       	movw	r28, r24
    361c:	16 2f       	mov	r17, r22
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	81 2f       	mov	r24, r17
    3622:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    3626:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3628:	81 fd       	sbrc	r24, 1
    362a:	04 c0       	rjmp	.+8      	; 0x3634 <_ZN14SoftwareSerial5setRXEh+0x20>
    362c:	61 e0       	ldi	r22, 0x01	; 1
    362e:	81 2f       	mov	r24, r17
    3630:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <digitalWrite>
    3634:	1c 87       	std	Y+12, r17	; 0x0c
    3636:	81 2f       	mov	r24, r17
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	fc 01       	movw	r30, r24
    363c:	ea 53       	subi	r30, 0x3A	; 58
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	e4 91       	lpm	r30, Z
    3642:	ed 87       	std	Y+13, r30	; 0x0d
    3644:	fc 01       	movw	r30, r24
    3646:	e6 52       	subi	r30, 0x26	; 38
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	e4 91       	lpm	r30, Z
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	ee 0f       	add	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	e2 51       	subi	r30, 0x12	; 18
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	85 91       	lpm	r24, Z+
    3658:	94 91       	lpm	r25, Z
    365a:	9f 87       	std	Y+15, r25	; 0x0f
    365c:	8e 87       	std	Y+14, r24	; 0x0e
    365e:	df 91       	pop	r29
    3660:	cf 91       	pop	r28
    3662:	1f 91       	pop	r17
    3664:	08 95       	ret

00003666 <_ZN14SoftwareSerialC1Ehhb>:
    3666:	1f 93       	push	r17
    3668:	cf 93       	push	r28
    366a:	df 93       	push	r29
    366c:	ec 01       	movw	r28, r24
    366e:	16 2f       	mov	r17, r22
    3670:	1b 82       	std	Y+3, r1	; 0x03
    3672:	1a 82       	std	Y+2, r1	; 0x02
    3674:	88 ee       	ldi	r24, 0xE8	; 232
    3676:	93 e0       	ldi	r25, 0x03	; 3
    3678:	a0 e0       	ldi	r26, 0x00	; 0
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	8c 83       	std	Y+4, r24	; 0x04
    367e:	9d 83       	std	Y+5, r25	; 0x05
    3680:	ae 83       	std	Y+6, r26	; 0x06
    3682:	bf 83       	std	Y+7, r27	; 0x07
    3684:	83 e8       	ldi	r24, 0x83	; 131
    3686:	92 e0       	ldi	r25, 0x02	; 2
    3688:	99 83       	std	Y+1, r25	; 0x01
    368a:	88 83       	st	Y, r24
    368c:	1f 8a       	std	Y+23, r1	; 0x17
    368e:	1e 8a       	std	Y+22, r1	; 0x16
    3690:	19 8e       	std	Y+25, r1	; 0x19
    3692:	18 8e       	std	Y+24, r1	; 0x18
    3694:	1b 8e       	std	Y+27, r1	; 0x1b
    3696:	1a 8e       	std	Y+26, r1	; 0x1a
    3698:	1d 8e       	std	Y+29, r1	; 0x1d
    369a:	1c 8e       	std	Y+28, r1	; 0x1c
    369c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    369e:	8e 7f       	andi	r24, 0xFE	; 254
    36a0:	20 fb       	bst	r18, 0
    36a2:	81 f9       	bld	r24, 1
    36a4:	8e 8f       	std	Y+30, r24	; 0x1e
    36a6:	64 2f       	mov	r22, r20
    36a8:	ce 01       	movw	r24, r28
    36aa:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <_ZN14SoftwareSerial5setTXEh>
    36ae:	61 2f       	mov	r22, r17
    36b0:	ce 01       	movw	r24, r28
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	1f 91       	pop	r17
    36b8:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <_ZN14SoftwareSerial5setRXEh>

000036bc <_ZN14SoftwareSerial5beginEl>:
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	ec 01       	movw	r28, r24
    36c2:	9a 01       	movw	r18, r20
    36c4:	ab 01       	movw	r20, r22
    36c6:	1b 8e       	std	Y+27, r1	; 0x1b
    36c8:	1a 8e       	std	Y+26, r1	; 0x1a
    36ca:	19 8e       	std	Y+25, r1	; 0x19
    36cc:	18 8e       	std	Y+24, r1	; 0x18
    36ce:	1f 8a       	std	Y+23, r1	; 0x17
    36d0:	1e 8a       	std	Y+22, r1	; 0x16
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	79 e0       	ldi	r23, 0x09	; 9
    36d6:	8d e3       	ldi	r24, 0x3D	; 61
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    36de:	f9 01       	movw	r30, r18
    36e0:	24 30       	cpi	r18, 0x04	; 4
    36e2:	31 05       	cpc	r19, r1
    36e4:	18 f0       	brcs	.+6      	; 0x36ec <_ZN14SoftwareSerial5beginEl+0x30>
    36e6:	c9 01       	movw	r24, r18
    36e8:	03 97       	sbiw	r24, 0x03	; 3
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <_ZN14SoftwareSerial5beginEl+0x34>
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	9d 8f       	std	Y+29, r25	; 0x1d
    36f2:	8c 8f       	std	Y+28, r24	; 0x1c
    36f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    36f6:	66 31       	cpi	r22, 0x16	; 22
    36f8:	08 f0       	brcs	.+2      	; 0x36fc <_ZN14SoftwareSerial5beginEl+0x40>
    36fa:	69 c0       	rjmp	.+210    	; 0x37ce <_ZN14SoftwareSerial5beginEl+0x112>
    36fc:	c9 01       	movw	r24, r18
    36fe:	96 95       	lsr	r25
    3700:	87 95       	ror	r24
    3702:	84 31       	cpi	r24, 0x14	; 20
    3704:	91 05       	cpc	r25, r1
    3706:	10 f0       	brcs	.+4      	; 0x370c <_ZN14SoftwareSerial5beginEl+0x50>
    3708:	43 97       	sbiw	r24, 0x13	; 19
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <_ZN14SoftwareSerial5beginEl+0x54>
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9f 8b       	std	Y+23, r25	; 0x17
    3712:	8e 8b       	std	Y+22, r24	; 0x16
    3714:	36 97       	sbiw	r30, 0x06	; 6
    3716:	18 f0       	brcs	.+6      	; 0x371e <_ZN14SoftwareSerial5beginEl+0x62>
    3718:	c9 01       	movw	r24, r18
    371a:	05 97       	sbiw	r24, 0x05	; 5
    371c:	02 c0       	rjmp	.+4      	; 0x3722 <_ZN14SoftwareSerial5beginEl+0x66>
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	99 8f       	std	Y+25, r25	; 0x19
    3724:	88 8f       	std	Y+24, r24	; 0x18
    3726:	c9 01       	movw	r24, r18
    3728:	88 0f       	add	r24, r24
    372a:	99 1f       	adc	r25, r25
    372c:	28 0f       	add	r18, r24
    372e:	39 1f       	adc	r19, r25
    3730:	36 95       	lsr	r19
    3732:	27 95       	ror	r18
    3734:	36 95       	lsr	r19
    3736:	27 95       	ror	r18
    3738:	2d 30       	cpi	r18, 0x0D	; 13
    373a:	31 05       	cpc	r19, r1
    373c:	18 f0       	brcs	.+6      	; 0x3744 <_ZN14SoftwareSerial5beginEl+0x88>
    373e:	2c 50       	subi	r18, 0x0C	; 12
    3740:	31 09       	sbc	r19, r1
    3742:	02 c0       	rjmp	.+4      	; 0x3748 <_ZN14SoftwareSerial5beginEl+0x8c>
    3744:	21 e0       	ldi	r18, 0x01	; 1
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	3b 8f       	std	Y+27, r19	; 0x1b
    374a:	2a 8f       	std	Y+26, r18	; 0x1a
    374c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3750:	68 30       	cpi	r22, 0x08	; 8
    3752:	50 f0       	brcs	.+20     	; 0x3768 <_ZN14SoftwareSerial5beginEl+0xac>
    3754:	21 e0       	ldi	r18, 0x01	; 1
    3756:	6e 30       	cpi	r22, 0x0E	; 14
    3758:	08 f4       	brcc	.+2      	; 0x375c <_ZN14SoftwareSerial5beginEl+0xa0>
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <_ZN14SoftwareSerial5beginEl+0xa6>
    3760:	88 0f       	add	r24, r24
    3762:	2a 95       	dec	r18
    3764:	ea f7       	brpl	.-6      	; 0x3760 <_ZN14SoftwareSerial5beginEl+0xa4>
    3766:	01 c0       	rjmp	.+2      	; 0x376a <_ZN14SoftwareSerial5beginEl+0xae>
    3768:	84 e0       	ldi	r24, 0x04	; 4
    376a:	89 2b       	or	r24, r25
    376c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    3770:	9c 85       	ldd	r25, Y+12	; 0x0c
    3772:	98 30       	cpi	r25, 0x08	; 8
    3774:	38 f0       	brcs	.+14     	; 0x3784 <_ZN14SoftwareSerial5beginEl+0xc8>
    3776:	9e 30       	cpi	r25, 0x0E	; 14
    3778:	40 f0       	brcs	.+16     	; 0x378a <_ZN14SoftwareSerial5beginEl+0xce>
    377a:	96 31       	cpi	r25, 0x16	; 22
    377c:	48 f0       	brcs	.+18     	; 0x3790 <_ZN14SoftwareSerial5beginEl+0xd4>
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	08 c0       	rjmp	.+16     	; 0x3794 <_ZN14SoftwareSerial5beginEl+0xd8>
    3784:	2d e6       	ldi	r18, 0x6D	; 109
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	05 c0       	rjmp	.+10     	; 0x3794 <_ZN14SoftwareSerial5beginEl+0xd8>
    378a:	2b e6       	ldi	r18, 0x6B	; 107
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <_ZN14SoftwareSerial5beginEl+0xd8>
    3790:	2c e6       	ldi	r18, 0x6C	; 108
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	3c 8b       	std	Y+20, r19	; 0x14
    3796:	2b 8b       	std	Y+19, r18	; 0x13
    3798:	98 30       	cpi	r25, 0x08	; 8
    379a:	30 f4       	brcc	.+12     	; 0x37a8 <_ZN14SoftwareSerial5beginEl+0xec>
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	01 c0       	rjmp	.+2      	; 0x37a2 <_ZN14SoftwareSerial5beginEl+0xe6>
    37a0:	88 0f       	add	r24, r24
    37a2:	9a 95       	dec	r25
    37a4:	ea f7       	brpl	.-6      	; 0x37a0 <_ZN14SoftwareSerial5beginEl+0xe4>
    37a6:	0e c0       	rjmp	.+28     	; 0x37c4 <_ZN14SoftwareSerial5beginEl+0x108>
    37a8:	29 2f       	mov	r18, r25
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	9e 30       	cpi	r25, 0x0E	; 14
    37ae:	18 f4       	brcc	.+6      	; 0x37b6 <_ZN14SoftwareSerial5beginEl+0xfa>
    37b0:	28 50       	subi	r18, 0x08	; 8
    37b2:	31 09       	sbc	r19, r1
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <_ZN14SoftwareSerial5beginEl+0xfe>
    37b6:	2e 50       	subi	r18, 0x0E	; 14
    37b8:	31 09       	sbc	r19, r1
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <_ZN14SoftwareSerial5beginEl+0x104>
    37be:	88 0f       	add	r24, r24
    37c0:	2a 95       	dec	r18
    37c2:	ea f7       	brpl	.-6      	; 0x37be <_ZN14SoftwareSerial5beginEl+0x102>
    37c4:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    37c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <_ZN14SoftwareSerial5beginEl+0x10e>
    37ce:	ce 01       	movw	r24, r28
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	0c 94 37 1a 	jmp	0x346e	; 0x346e <_ZN14SoftwareSerial6listenEv>

000037d8 <__subsf3>:
    37d8:	50 58       	subi	r21, 0x80	; 128

000037da <__addsf3>:
    37da:	bb 27       	eor	r27, r27
    37dc:	aa 27       	eor	r26, r26
    37de:	0e 94 04 1c 	call	0x3808	; 0x3808 <__addsf3x>
    37e2:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_round>
    37e6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fp_pscA>
    37ea:	38 f0       	brcs	.+14     	; 0x37fa <__addsf3+0x20>
    37ec:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__fp_pscB>
    37f0:	20 f0       	brcs	.+8      	; 0x37fa <__addsf3+0x20>
    37f2:	39 f4       	brne	.+14     	; 0x3802 <__addsf3+0x28>
    37f4:	9f 3f       	cpi	r25, 0xFF	; 255
    37f6:	19 f4       	brne	.+6      	; 0x37fe <__addsf3+0x24>
    37f8:	26 f4       	brtc	.+8      	; 0x3802 <__addsf3+0x28>
    37fa:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_nan>
    37fe:	0e f4       	brtc	.+2      	; 0x3802 <__addsf3+0x28>
    3800:	e0 95       	com	r30
    3802:	e7 fb       	bst	r30, 7
    3804:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__fp_inf>

00003808 <__addsf3x>:
    3808:	e9 2f       	mov	r30, r25
    380a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__fp_split3>
    380e:	58 f3       	brcs	.-42     	; 0x37e6 <__addsf3+0xc>
    3810:	ba 17       	cp	r27, r26
    3812:	62 07       	cpc	r22, r18
    3814:	73 07       	cpc	r23, r19
    3816:	84 07       	cpc	r24, r20
    3818:	95 07       	cpc	r25, r21
    381a:	20 f0       	brcs	.+8      	; 0x3824 <__addsf3x+0x1c>
    381c:	79 f4       	brne	.+30     	; 0x383c <__addsf3x+0x34>
    381e:	a6 f5       	brtc	.+104    	; 0x3888 <__addsf3x+0x80>
    3820:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__fp_zero>
    3824:	0e f4       	brtc	.+2      	; 0x3828 <__addsf3x+0x20>
    3826:	e0 95       	com	r30
    3828:	0b 2e       	mov	r0, r27
    382a:	ba 2f       	mov	r27, r26
    382c:	a0 2d       	mov	r26, r0
    382e:	0b 01       	movw	r0, r22
    3830:	b9 01       	movw	r22, r18
    3832:	90 01       	movw	r18, r0
    3834:	0c 01       	movw	r0, r24
    3836:	ca 01       	movw	r24, r20
    3838:	a0 01       	movw	r20, r0
    383a:	11 24       	eor	r1, r1
    383c:	ff 27       	eor	r31, r31
    383e:	59 1b       	sub	r21, r25
    3840:	99 f0       	breq	.+38     	; 0x3868 <__addsf3x+0x60>
    3842:	59 3f       	cpi	r21, 0xF9	; 249
    3844:	50 f4       	brcc	.+20     	; 0x385a <__addsf3x+0x52>
    3846:	50 3e       	cpi	r21, 0xE0	; 224
    3848:	68 f1       	brcs	.+90     	; 0x38a4 <__addsf3x+0x9c>
    384a:	1a 16       	cp	r1, r26
    384c:	f0 40       	sbci	r31, 0x00	; 0
    384e:	a2 2f       	mov	r26, r18
    3850:	23 2f       	mov	r18, r19
    3852:	34 2f       	mov	r19, r20
    3854:	44 27       	eor	r20, r20
    3856:	58 5f       	subi	r21, 0xF8	; 248
    3858:	f3 cf       	rjmp	.-26     	; 0x3840 <__addsf3x+0x38>
    385a:	46 95       	lsr	r20
    385c:	37 95       	ror	r19
    385e:	27 95       	ror	r18
    3860:	a7 95       	ror	r26
    3862:	f0 40       	sbci	r31, 0x00	; 0
    3864:	53 95       	inc	r21
    3866:	c9 f7       	brne	.-14     	; 0x385a <__addsf3x+0x52>
    3868:	7e f4       	brtc	.+30     	; 0x3888 <__addsf3x+0x80>
    386a:	1f 16       	cp	r1, r31
    386c:	ba 0b       	sbc	r27, r26
    386e:	62 0b       	sbc	r22, r18
    3870:	73 0b       	sbc	r23, r19
    3872:	84 0b       	sbc	r24, r20
    3874:	ba f0       	brmi	.+46     	; 0x38a4 <__addsf3x+0x9c>
    3876:	91 50       	subi	r25, 0x01	; 1
    3878:	a1 f0       	breq	.+40     	; 0x38a2 <__addsf3x+0x9a>
    387a:	ff 0f       	add	r31, r31
    387c:	bb 1f       	adc	r27, r27
    387e:	66 1f       	adc	r22, r22
    3880:	77 1f       	adc	r23, r23
    3882:	88 1f       	adc	r24, r24
    3884:	c2 f7       	brpl	.-16     	; 0x3876 <__addsf3x+0x6e>
    3886:	0e c0       	rjmp	.+28     	; 0x38a4 <__addsf3x+0x9c>
    3888:	ba 0f       	add	r27, r26
    388a:	62 1f       	adc	r22, r18
    388c:	73 1f       	adc	r23, r19
    388e:	84 1f       	adc	r24, r20
    3890:	48 f4       	brcc	.+18     	; 0x38a4 <__addsf3x+0x9c>
    3892:	87 95       	ror	r24
    3894:	77 95       	ror	r23
    3896:	67 95       	ror	r22
    3898:	b7 95       	ror	r27
    389a:	f7 95       	ror	r31
    389c:	9e 3f       	cpi	r25, 0xFE	; 254
    389e:	08 f0       	brcs	.+2      	; 0x38a2 <__addsf3x+0x9a>
    38a0:	b0 cf       	rjmp	.-160    	; 0x3802 <__addsf3+0x28>
    38a2:	93 95       	inc	r25
    38a4:	88 0f       	add	r24, r24
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__addsf3x+0xa2>
    38a8:	99 27       	eor	r25, r25
    38aa:	ee 0f       	add	r30, r30
    38ac:	97 95       	ror	r25
    38ae:	87 95       	ror	r24
    38b0:	08 95       	ret

000038b2 <__cmpsf2>:
    38b2:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__fp_cmp>
    38b6:	08 f4       	brcc	.+2      	; 0x38ba <__cmpsf2+0x8>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
    38ba:	08 95       	ret

000038bc <__divsf3>:
    38bc:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <__divsf3x>
    38c0:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_round>
    38c4:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__fp_pscB>
    38c8:	58 f0       	brcs	.+22     	; 0x38e0 <__divsf3+0x24>
    38ca:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fp_pscA>
    38ce:	40 f0       	brcs	.+16     	; 0x38e0 <__divsf3+0x24>
    38d0:	29 f4       	brne	.+10     	; 0x38dc <__divsf3+0x20>
    38d2:	5f 3f       	cpi	r21, 0xFF	; 255
    38d4:	29 f0       	breq	.+10     	; 0x38e0 <__divsf3+0x24>
    38d6:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__fp_inf>
    38da:	51 11       	cpse	r21, r1
    38dc:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_szero>
    38e0:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_nan>

000038e4 <__divsf3x>:
    38e4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__fp_split3>
    38e8:	68 f3       	brcs	.-38     	; 0x38c4 <__divsf3+0x8>

000038ea <__divsf3_pse>:
    38ea:	99 23       	and	r25, r25
    38ec:	b1 f3       	breq	.-20     	; 0x38da <__divsf3+0x1e>
    38ee:	55 23       	and	r21, r21
    38f0:	91 f3       	breq	.-28     	; 0x38d6 <__divsf3+0x1a>
    38f2:	95 1b       	sub	r25, r21
    38f4:	55 0b       	sbc	r21, r21
    38f6:	bb 27       	eor	r27, r27
    38f8:	aa 27       	eor	r26, r26
    38fa:	62 17       	cp	r22, r18
    38fc:	73 07       	cpc	r23, r19
    38fe:	84 07       	cpc	r24, r20
    3900:	38 f0       	brcs	.+14     	; 0x3910 <__divsf3_pse+0x26>
    3902:	9f 5f       	subi	r25, 0xFF	; 255
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	22 0f       	add	r18, r18
    3908:	33 1f       	adc	r19, r19
    390a:	44 1f       	adc	r20, r20
    390c:	aa 1f       	adc	r26, r26
    390e:	a9 f3       	breq	.-22     	; 0x38fa <__divsf3_pse+0x10>
    3910:	35 d0       	rcall	.+106    	; 0x397c <__divsf3_pse+0x92>
    3912:	0e 2e       	mov	r0, r30
    3914:	3a f0       	brmi	.+14     	; 0x3924 <__divsf3_pse+0x3a>
    3916:	e0 e8       	ldi	r30, 0x80	; 128
    3918:	32 d0       	rcall	.+100    	; 0x397e <__divsf3_pse+0x94>
    391a:	91 50       	subi	r25, 0x01	; 1
    391c:	50 40       	sbci	r21, 0x00	; 0
    391e:	e6 95       	lsr	r30
    3920:	00 1c       	adc	r0, r0
    3922:	ca f7       	brpl	.-14     	; 0x3916 <__divsf3_pse+0x2c>
    3924:	2b d0       	rcall	.+86     	; 0x397c <__divsf3_pse+0x92>
    3926:	fe 2f       	mov	r31, r30
    3928:	29 d0       	rcall	.+82     	; 0x397c <__divsf3_pse+0x92>
    392a:	66 0f       	add	r22, r22
    392c:	77 1f       	adc	r23, r23
    392e:	88 1f       	adc	r24, r24
    3930:	bb 1f       	adc	r27, r27
    3932:	26 17       	cp	r18, r22
    3934:	37 07       	cpc	r19, r23
    3936:	48 07       	cpc	r20, r24
    3938:	ab 07       	cpc	r26, r27
    393a:	b0 e8       	ldi	r27, 0x80	; 128
    393c:	09 f0       	breq	.+2      	; 0x3940 <__divsf3_pse+0x56>
    393e:	bb 0b       	sbc	r27, r27
    3940:	80 2d       	mov	r24, r0
    3942:	bf 01       	movw	r22, r30
    3944:	ff 27       	eor	r31, r31
    3946:	93 58       	subi	r25, 0x83	; 131
    3948:	5f 4f       	sbci	r21, 0xFF	; 255
    394a:	3a f0       	brmi	.+14     	; 0x395a <__divsf3_pse+0x70>
    394c:	9e 3f       	cpi	r25, 0xFE	; 254
    394e:	51 05       	cpc	r21, r1
    3950:	78 f0       	brcs	.+30     	; 0x3970 <__divsf3_pse+0x86>
    3952:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__fp_inf>
    3956:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_szero>
    395a:	5f 3f       	cpi	r21, 0xFF	; 255
    395c:	e4 f3       	brlt	.-8      	; 0x3956 <__divsf3_pse+0x6c>
    395e:	98 3e       	cpi	r25, 0xE8	; 232
    3960:	d4 f3       	brlt	.-12     	; 0x3956 <__divsf3_pse+0x6c>
    3962:	86 95       	lsr	r24
    3964:	77 95       	ror	r23
    3966:	67 95       	ror	r22
    3968:	b7 95       	ror	r27
    396a:	f7 95       	ror	r31
    396c:	9f 5f       	subi	r25, 0xFF	; 255
    396e:	c9 f7       	brne	.-14     	; 0x3962 <__divsf3_pse+0x78>
    3970:	88 0f       	add	r24, r24
    3972:	91 1d       	adc	r25, r1
    3974:	96 95       	lsr	r25
    3976:	87 95       	ror	r24
    3978:	97 f9       	bld	r25, 7
    397a:	08 95       	ret
    397c:	e1 e0       	ldi	r30, 0x01	; 1
    397e:	66 0f       	add	r22, r22
    3980:	77 1f       	adc	r23, r23
    3982:	88 1f       	adc	r24, r24
    3984:	bb 1f       	adc	r27, r27
    3986:	62 17       	cp	r22, r18
    3988:	73 07       	cpc	r23, r19
    398a:	84 07       	cpc	r24, r20
    398c:	ba 07       	cpc	r27, r26
    398e:	20 f0       	brcs	.+8      	; 0x3998 <__divsf3_pse+0xae>
    3990:	62 1b       	sub	r22, r18
    3992:	73 0b       	sbc	r23, r19
    3994:	84 0b       	sbc	r24, r20
    3996:	ba 0b       	sbc	r27, r26
    3998:	ee 1f       	adc	r30, r30
    399a:	88 f7       	brcc	.-30     	; 0x397e <__divsf3_pse+0x94>
    399c:	e0 95       	com	r30
    399e:	08 95       	ret

000039a0 <__fixsfsi>:
    39a0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__fixunssfsi>
    39a4:	68 94       	set
    39a6:	b1 11       	cpse	r27, r1
    39a8:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_szero>
    39ac:	08 95       	ret

000039ae <__fixunssfsi>:
    39ae:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <__fp_splitA>
    39b2:	88 f0       	brcs	.+34     	; 0x39d6 <__fixunssfsi+0x28>
    39b4:	9f 57       	subi	r25, 0x7F	; 127
    39b6:	98 f0       	brcs	.+38     	; 0x39de <__fixunssfsi+0x30>
    39b8:	b9 2f       	mov	r27, r25
    39ba:	99 27       	eor	r25, r25
    39bc:	b7 51       	subi	r27, 0x17	; 23
    39be:	b0 f0       	brcs	.+44     	; 0x39ec <__fixunssfsi+0x3e>
    39c0:	e1 f0       	breq	.+56     	; 0x39fa <__fixunssfsi+0x4c>
    39c2:	66 0f       	add	r22, r22
    39c4:	77 1f       	adc	r23, r23
    39c6:	88 1f       	adc	r24, r24
    39c8:	99 1f       	adc	r25, r25
    39ca:	1a f0       	brmi	.+6      	; 0x39d2 <__fixunssfsi+0x24>
    39cc:	ba 95       	dec	r27
    39ce:	c9 f7       	brne	.-14     	; 0x39c2 <__fixunssfsi+0x14>
    39d0:	14 c0       	rjmp	.+40     	; 0x39fa <__fixunssfsi+0x4c>
    39d2:	b1 30       	cpi	r27, 0x01	; 1
    39d4:	91 f0       	breq	.+36     	; 0x39fa <__fixunssfsi+0x4c>
    39d6:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__fp_zero>
    39da:	b1 e0       	ldi	r27, 0x01	; 1
    39dc:	08 95       	ret
    39de:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__fp_zero>
    39e2:	67 2f       	mov	r22, r23
    39e4:	78 2f       	mov	r23, r24
    39e6:	88 27       	eor	r24, r24
    39e8:	b8 5f       	subi	r27, 0xF8	; 248
    39ea:	39 f0       	breq	.+14     	; 0x39fa <__fixunssfsi+0x4c>
    39ec:	b9 3f       	cpi	r27, 0xF9	; 249
    39ee:	cc f3       	brlt	.-14     	; 0x39e2 <__fixunssfsi+0x34>
    39f0:	86 95       	lsr	r24
    39f2:	77 95       	ror	r23
    39f4:	67 95       	ror	r22
    39f6:	b3 95       	inc	r27
    39f8:	d9 f7       	brne	.-10     	; 0x39f0 <__fixunssfsi+0x42>
    39fa:	3e f4       	brtc	.+14     	; 0x3a0a <__fixunssfsi+0x5c>
    39fc:	90 95       	com	r25
    39fe:	80 95       	com	r24
    3a00:	70 95       	com	r23
    3a02:	61 95       	neg	r22
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	08 95       	ret

00003a0c <__floatunsisf>:
    3a0c:	e8 94       	clt
    3a0e:	09 c0       	rjmp	.+18     	; 0x3a22 <__floatsisf+0x12>

00003a10 <__floatsisf>:
    3a10:	97 fb       	bst	r25, 7
    3a12:	3e f4       	brtc	.+14     	; 0x3a22 <__floatsisf+0x12>
    3a14:	90 95       	com	r25
    3a16:	80 95       	com	r24
    3a18:	70 95       	com	r23
    3a1a:	61 95       	neg	r22
    3a1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a20:	9f 4f       	sbci	r25, 0xFF	; 255
    3a22:	99 23       	and	r25, r25
    3a24:	a9 f0       	breq	.+42     	; 0x3a50 <__floatsisf+0x40>
    3a26:	f9 2f       	mov	r31, r25
    3a28:	96 e9       	ldi	r25, 0x96	; 150
    3a2a:	bb 27       	eor	r27, r27
    3a2c:	93 95       	inc	r25
    3a2e:	f6 95       	lsr	r31
    3a30:	87 95       	ror	r24
    3a32:	77 95       	ror	r23
    3a34:	67 95       	ror	r22
    3a36:	b7 95       	ror	r27
    3a38:	f1 11       	cpse	r31, r1
    3a3a:	f8 cf       	rjmp	.-16     	; 0x3a2c <__floatsisf+0x1c>
    3a3c:	fa f4       	brpl	.+62     	; 0x3a7c <__floatsisf+0x6c>
    3a3e:	bb 0f       	add	r27, r27
    3a40:	11 f4       	brne	.+4      	; 0x3a46 <__floatsisf+0x36>
    3a42:	60 ff       	sbrs	r22, 0
    3a44:	1b c0       	rjmp	.+54     	; 0x3a7c <__floatsisf+0x6c>
    3a46:	6f 5f       	subi	r22, 0xFF	; 255
    3a48:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4e:	16 c0       	rjmp	.+44     	; 0x3a7c <__floatsisf+0x6c>
    3a50:	88 23       	and	r24, r24
    3a52:	11 f0       	breq	.+4      	; 0x3a58 <__floatsisf+0x48>
    3a54:	96 e9       	ldi	r25, 0x96	; 150
    3a56:	11 c0       	rjmp	.+34     	; 0x3a7a <__floatsisf+0x6a>
    3a58:	77 23       	and	r23, r23
    3a5a:	21 f0       	breq	.+8      	; 0x3a64 <__floatsisf+0x54>
    3a5c:	9e e8       	ldi	r25, 0x8E	; 142
    3a5e:	87 2f       	mov	r24, r23
    3a60:	76 2f       	mov	r23, r22
    3a62:	05 c0       	rjmp	.+10     	; 0x3a6e <__floatsisf+0x5e>
    3a64:	66 23       	and	r22, r22
    3a66:	71 f0       	breq	.+28     	; 0x3a84 <__floatsisf+0x74>
    3a68:	96 e8       	ldi	r25, 0x86	; 134
    3a6a:	86 2f       	mov	r24, r22
    3a6c:	70 e0       	ldi	r23, 0x00	; 0
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	2a f0       	brmi	.+10     	; 0x3a7c <__floatsisf+0x6c>
    3a72:	9a 95       	dec	r25
    3a74:	66 0f       	add	r22, r22
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 1f       	adc	r24, r24
    3a7a:	da f7       	brpl	.-10     	; 0x3a72 <__floatsisf+0x62>
    3a7c:	88 0f       	add	r24, r24
    3a7e:	96 95       	lsr	r25
    3a80:	87 95       	ror	r24
    3a82:	97 f9       	bld	r25, 7
    3a84:	08 95       	ret

00003a86 <__fp_cmp>:
    3a86:	99 0f       	add	r25, r25
    3a88:	00 08       	sbc	r0, r0
    3a8a:	55 0f       	add	r21, r21
    3a8c:	aa 0b       	sbc	r26, r26
    3a8e:	e0 e8       	ldi	r30, 0x80	; 128
    3a90:	fe ef       	ldi	r31, 0xFE	; 254
    3a92:	16 16       	cp	r1, r22
    3a94:	17 06       	cpc	r1, r23
    3a96:	e8 07       	cpc	r30, r24
    3a98:	f9 07       	cpc	r31, r25
    3a9a:	c0 f0       	brcs	.+48     	; 0x3acc <__fp_cmp+0x46>
    3a9c:	12 16       	cp	r1, r18
    3a9e:	13 06       	cpc	r1, r19
    3aa0:	e4 07       	cpc	r30, r20
    3aa2:	f5 07       	cpc	r31, r21
    3aa4:	98 f0       	brcs	.+38     	; 0x3acc <__fp_cmp+0x46>
    3aa6:	62 1b       	sub	r22, r18
    3aa8:	73 0b       	sbc	r23, r19
    3aaa:	84 0b       	sbc	r24, r20
    3aac:	95 0b       	sbc	r25, r21
    3aae:	39 f4       	brne	.+14     	; 0x3abe <__fp_cmp+0x38>
    3ab0:	0a 26       	eor	r0, r26
    3ab2:	61 f0       	breq	.+24     	; 0x3acc <__fp_cmp+0x46>
    3ab4:	23 2b       	or	r18, r19
    3ab6:	24 2b       	or	r18, r20
    3ab8:	25 2b       	or	r18, r21
    3aba:	21 f4       	brne	.+8      	; 0x3ac4 <__fp_cmp+0x3e>
    3abc:	08 95       	ret
    3abe:	0a 26       	eor	r0, r26
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <__fp_cmp+0x3e>
    3ac2:	a1 40       	sbci	r26, 0x01	; 1
    3ac4:	a6 95       	lsr	r26
    3ac6:	8f ef       	ldi	r24, 0xFF	; 255
    3ac8:	81 1d       	adc	r24, r1
    3aca:	81 1d       	adc	r24, r1
    3acc:	08 95       	ret

00003ace <__fp_inf>:
    3ace:	97 f9       	bld	r25, 7
    3ad0:	9f 67       	ori	r25, 0x7F	; 127
    3ad2:	80 e8       	ldi	r24, 0x80	; 128
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	08 95       	ret

00003ada <__fp_nan>:
    3ada:	9f ef       	ldi	r25, 0xFF	; 255
    3adc:	80 ec       	ldi	r24, 0xC0	; 192
    3ade:	08 95       	ret

00003ae0 <__fp_pscA>:
    3ae0:	00 24       	eor	r0, r0
    3ae2:	0a 94       	dec	r0
    3ae4:	16 16       	cp	r1, r22
    3ae6:	17 06       	cpc	r1, r23
    3ae8:	18 06       	cpc	r1, r24
    3aea:	09 06       	cpc	r0, r25
    3aec:	08 95       	ret

00003aee <__fp_pscB>:
    3aee:	00 24       	eor	r0, r0
    3af0:	0a 94       	dec	r0
    3af2:	12 16       	cp	r1, r18
    3af4:	13 06       	cpc	r1, r19
    3af6:	14 06       	cpc	r1, r20
    3af8:	05 06       	cpc	r0, r21
    3afa:	08 95       	ret

00003afc <__fp_round>:
    3afc:	09 2e       	mov	r0, r25
    3afe:	03 94       	inc	r0
    3b00:	00 0c       	add	r0, r0
    3b02:	11 f4       	brne	.+4      	; 0x3b08 <__fp_round+0xc>
    3b04:	88 23       	and	r24, r24
    3b06:	52 f0       	brmi	.+20     	; 0x3b1c <__fp_round+0x20>
    3b08:	bb 0f       	add	r27, r27
    3b0a:	40 f4       	brcc	.+16     	; 0x3b1c <__fp_round+0x20>
    3b0c:	bf 2b       	or	r27, r31
    3b0e:	11 f4       	brne	.+4      	; 0x3b14 <__fp_round+0x18>
    3b10:	60 ff       	sbrs	r22, 0
    3b12:	04 c0       	rjmp	.+8      	; 0x3b1c <__fp_round+0x20>
    3b14:	6f 5f       	subi	r22, 0xFF	; 255
    3b16:	7f 4f       	sbci	r23, 0xFF	; 255
    3b18:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1c:	08 95       	ret

00003b1e <__fp_split3>:
    3b1e:	57 fd       	sbrc	r21, 7
    3b20:	90 58       	subi	r25, 0x80	; 128
    3b22:	44 0f       	add	r20, r20
    3b24:	55 1f       	adc	r21, r21
    3b26:	59 f0       	breq	.+22     	; 0x3b3e <__fp_splitA+0x10>
    3b28:	5f 3f       	cpi	r21, 0xFF	; 255
    3b2a:	71 f0       	breq	.+28     	; 0x3b48 <__fp_splitA+0x1a>
    3b2c:	47 95       	ror	r20

00003b2e <__fp_splitA>:
    3b2e:	88 0f       	add	r24, r24
    3b30:	97 fb       	bst	r25, 7
    3b32:	99 1f       	adc	r25, r25
    3b34:	61 f0       	breq	.+24     	; 0x3b4e <__fp_splitA+0x20>
    3b36:	9f 3f       	cpi	r25, 0xFF	; 255
    3b38:	79 f0       	breq	.+30     	; 0x3b58 <__fp_splitA+0x2a>
    3b3a:	87 95       	ror	r24
    3b3c:	08 95       	ret
    3b3e:	12 16       	cp	r1, r18
    3b40:	13 06       	cpc	r1, r19
    3b42:	14 06       	cpc	r1, r20
    3b44:	55 1f       	adc	r21, r21
    3b46:	f2 cf       	rjmp	.-28     	; 0x3b2c <__fp_split3+0xe>
    3b48:	46 95       	lsr	r20
    3b4a:	f1 df       	rcall	.-30     	; 0x3b2e <__fp_splitA>
    3b4c:	08 c0       	rjmp	.+16     	; 0x3b5e <__fp_splitA+0x30>
    3b4e:	16 16       	cp	r1, r22
    3b50:	17 06       	cpc	r1, r23
    3b52:	18 06       	cpc	r1, r24
    3b54:	99 1f       	adc	r25, r25
    3b56:	f1 cf       	rjmp	.-30     	; 0x3b3a <__fp_splitA+0xc>
    3b58:	86 95       	lsr	r24
    3b5a:	71 05       	cpc	r23, r1
    3b5c:	61 05       	cpc	r22, r1
    3b5e:	08 94       	sec
    3b60:	08 95       	ret

00003b62 <__fp_zero>:
    3b62:	e8 94       	clt

00003b64 <__fp_szero>:
    3b64:	bb 27       	eor	r27, r27
    3b66:	66 27       	eor	r22, r22
    3b68:	77 27       	eor	r23, r23
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	97 f9       	bld	r25, 7
    3b6e:	08 95       	ret

00003b70 <__gesf2>:
    3b70:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__fp_cmp>
    3b74:	08 f4       	brcc	.+2      	; 0x3b78 <__gesf2+0x8>
    3b76:	8f ef       	ldi	r24, 0xFF	; 255
    3b78:	08 95       	ret

00003b7a <__mulsf3>:
    3b7a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3x>
    3b7e:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__fp_round>
    3b82:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__fp_pscA>
    3b86:	38 f0       	brcs	.+14     	; 0x3b96 <__mulsf3+0x1c>
    3b88:	0e 94 77 1d 	call	0x3aee	; 0x3aee <__fp_pscB>
    3b8c:	20 f0       	brcs	.+8      	; 0x3b96 <__mulsf3+0x1c>
    3b8e:	95 23       	and	r25, r21
    3b90:	11 f0       	breq	.+4      	; 0x3b96 <__mulsf3+0x1c>
    3b92:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__fp_inf>
    3b96:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__fp_nan>
    3b9a:	11 24       	eor	r1, r1
    3b9c:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_szero>

00003ba0 <__mulsf3x>:
    3ba0:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <__fp_split3>
    3ba4:	70 f3       	brcs	.-36     	; 0x3b82 <__mulsf3+0x8>

00003ba6 <__mulsf3_pse>:
    3ba6:	95 9f       	mul	r25, r21
    3ba8:	c1 f3       	breq	.-16     	; 0x3b9a <__mulsf3+0x20>
    3baa:	95 0f       	add	r25, r21
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	55 1f       	adc	r21, r21
    3bb0:	62 9f       	mul	r22, r18
    3bb2:	f0 01       	movw	r30, r0
    3bb4:	72 9f       	mul	r23, r18
    3bb6:	bb 27       	eor	r27, r27
    3bb8:	f0 0d       	add	r31, r0
    3bba:	b1 1d       	adc	r27, r1
    3bbc:	63 9f       	mul	r22, r19
    3bbe:	aa 27       	eor	r26, r26
    3bc0:	f0 0d       	add	r31, r0
    3bc2:	b1 1d       	adc	r27, r1
    3bc4:	aa 1f       	adc	r26, r26
    3bc6:	64 9f       	mul	r22, r20
    3bc8:	66 27       	eor	r22, r22
    3bca:	b0 0d       	add	r27, r0
    3bcc:	a1 1d       	adc	r26, r1
    3bce:	66 1f       	adc	r22, r22
    3bd0:	82 9f       	mul	r24, r18
    3bd2:	22 27       	eor	r18, r18
    3bd4:	b0 0d       	add	r27, r0
    3bd6:	a1 1d       	adc	r26, r1
    3bd8:	62 1f       	adc	r22, r18
    3bda:	73 9f       	mul	r23, r19
    3bdc:	b0 0d       	add	r27, r0
    3bde:	a1 1d       	adc	r26, r1
    3be0:	62 1f       	adc	r22, r18
    3be2:	83 9f       	mul	r24, r19
    3be4:	a0 0d       	add	r26, r0
    3be6:	61 1d       	adc	r22, r1
    3be8:	22 1f       	adc	r18, r18
    3bea:	74 9f       	mul	r23, r20
    3bec:	33 27       	eor	r19, r19
    3bee:	a0 0d       	add	r26, r0
    3bf0:	61 1d       	adc	r22, r1
    3bf2:	23 1f       	adc	r18, r19
    3bf4:	84 9f       	mul	r24, r20
    3bf6:	60 0d       	add	r22, r0
    3bf8:	21 1d       	adc	r18, r1
    3bfa:	82 2f       	mov	r24, r18
    3bfc:	76 2f       	mov	r23, r22
    3bfe:	6a 2f       	mov	r22, r26
    3c00:	11 24       	eor	r1, r1
    3c02:	9f 57       	subi	r25, 0x7F	; 127
    3c04:	50 40       	sbci	r21, 0x00	; 0
    3c06:	9a f0       	brmi	.+38     	; 0x3c2e <__mulsf3_pse+0x88>
    3c08:	f1 f0       	breq	.+60     	; 0x3c46 <__mulsf3_pse+0xa0>
    3c0a:	88 23       	and	r24, r24
    3c0c:	4a f0       	brmi	.+18     	; 0x3c20 <__mulsf3_pse+0x7a>
    3c0e:	ee 0f       	add	r30, r30
    3c10:	ff 1f       	adc	r31, r31
    3c12:	bb 1f       	adc	r27, r27
    3c14:	66 1f       	adc	r22, r22
    3c16:	77 1f       	adc	r23, r23
    3c18:	88 1f       	adc	r24, r24
    3c1a:	91 50       	subi	r25, 0x01	; 1
    3c1c:	50 40       	sbci	r21, 0x00	; 0
    3c1e:	a9 f7       	brne	.-22     	; 0x3c0a <__mulsf3_pse+0x64>
    3c20:	9e 3f       	cpi	r25, 0xFE	; 254
    3c22:	51 05       	cpc	r21, r1
    3c24:	80 f0       	brcs	.+32     	; 0x3c46 <__mulsf3_pse+0xa0>
    3c26:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__fp_inf>
    3c2a:	0c 94 b2 1d 	jmp	0x3b64	; 0x3b64 <__fp_szero>
    3c2e:	5f 3f       	cpi	r21, 0xFF	; 255
    3c30:	e4 f3       	brlt	.-8      	; 0x3c2a <__mulsf3_pse+0x84>
    3c32:	98 3e       	cpi	r25, 0xE8	; 232
    3c34:	d4 f3       	brlt	.-12     	; 0x3c2a <__mulsf3_pse+0x84>
    3c36:	86 95       	lsr	r24
    3c38:	77 95       	ror	r23
    3c3a:	67 95       	ror	r22
    3c3c:	b7 95       	ror	r27
    3c3e:	f7 95       	ror	r31
    3c40:	e7 95       	ror	r30
    3c42:	9f 5f       	subi	r25, 0xFF	; 255
    3c44:	c1 f7       	brne	.-16     	; 0x3c36 <__mulsf3_pse+0x90>
    3c46:	fe 2b       	or	r31, r30
    3c48:	88 0f       	add	r24, r24
    3c4a:	91 1d       	adc	r25, r1
    3c4c:	96 95       	lsr	r25
    3c4e:	87 95       	ror	r24
    3c50:	97 f9       	bld	r25, 7
    3c52:	08 95       	ret

00003c54 <_ZN14HardwareSerial9availableEv>:
    3c54:	fc 01       	movw	r30, r24
    3c56:	91 8d       	ldd	r25, Z+25	; 0x19
    3c58:	22 8d       	ldd	r18, Z+26	; 0x1a
    3c5a:	89 2f       	mov	r24, r25
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	80 5c       	subi	r24, 0xC0	; 192
    3c60:	9f 4f       	sbci	r25, 0xFF	; 255
    3c62:	82 1b       	sub	r24, r18
    3c64:	91 09       	sbc	r25, r1
    3c66:	8f 73       	andi	r24, 0x3F	; 63
    3c68:	99 27       	eor	r25, r25
    3c6a:	08 95       	ret

00003c6c <_ZN14HardwareSerial4peekEv>:
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	91 8d       	ldd	r25, Z+25	; 0x19
    3c70:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c72:	98 17       	cp	r25, r24
    3c74:	31 f0       	breq	.+12     	; 0x3c82 <_ZN14HardwareSerial4peekEv+0x16>
    3c76:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c78:	e8 0f       	add	r30, r24
    3c7a:	f1 1d       	adc	r31, r1
    3c7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	08 95       	ret
    3c82:	8f ef       	ldi	r24, 0xFF	; 255
    3c84:	9f ef       	ldi	r25, 0xFF	; 255
    3c86:	08 95       	ret

00003c88 <_ZN14HardwareSerial4readEv>:
    3c88:	fc 01       	movw	r30, r24
    3c8a:	91 8d       	ldd	r25, Z+25	; 0x19
    3c8c:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c8e:	98 17       	cp	r25, r24
    3c90:	61 f0       	breq	.+24     	; 0x3caa <_ZN14HardwareSerial4readEv+0x22>
    3c92:	82 8d       	ldd	r24, Z+26	; 0x1a
    3c94:	df 01       	movw	r26, r30
    3c96:	a8 0f       	add	r26, r24
    3c98:	b1 1d       	adc	r27, r1
    3c9a:	5d 96       	adiw	r26, 0x1d	; 29
    3c9c:	8c 91       	ld	r24, X
    3c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ca0:	9f 5f       	subi	r25, 0xFF	; 255
    3ca2:	9f 73       	andi	r25, 0x3F	; 63
    3ca4:	92 8f       	std	Z+26, r25	; 0x1a
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	08 95       	ret
    3caa:	8f ef       	ldi	r24, 0xFF	; 255
    3cac:	9f ef       	ldi	r25, 0xFF	; 255
    3cae:	08 95       	ret

00003cb0 <_ZN14HardwareSerial17availableForWriteEv>:
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	53 8d       	ldd	r21, Z+27	; 0x1b
    3cb4:	44 8d       	ldd	r20, Z+28	; 0x1c
    3cb6:	25 2f       	mov	r18, r21
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	84 2f       	mov	r24, r20
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	82 1b       	sub	r24, r18
    3cc0:	93 0b       	sbc	r25, r19
    3cc2:	54 17       	cp	r21, r20
    3cc4:	10 f0       	brcs	.+4      	; 0x3cca <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    3cc6:	cf 96       	adiw	r24, 0x3f	; 63
    3cc8:	08 95       	ret
    3cca:	01 97       	sbiw	r24, 0x01	; 1
    3ccc:	08 95       	ret

00003cce <_Z14serialEventRunv>:
    3cce:	83 ec       	ldi	r24, 0xC3	; 195
    3cd0:	9f e1       	ldi	r25, 0x1F	; 31
    3cd2:	89 2b       	or	r24, r25
    3cd4:	49 f0       	breq	.+18     	; 0x3ce8 <_Z14serialEventRunv+0x1a>
    3cd6:	80 e0       	ldi	r24, 0x00	; 0
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	89 2b       	or	r24, r25
    3cdc:	29 f0       	breq	.+10     	; 0x3ce8 <_Z14serialEventRunv+0x1a>
    3cde:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_Z17Serial0_availablev>
    3ce2:	81 11       	cpse	r24, r1
    3ce4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3ce8:	08 95       	ret

00003cea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
    3cea:	fc 01       	movw	r30, r24
    3cec:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cee:	df 01       	movw	r26, r30
    3cf0:	a8 0f       	add	r26, r24
    3cf2:	b1 1d       	adc	r27, r1
    3cf4:	a3 5a       	subi	r26, 0xA3	; 163
    3cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    3cf8:	2c 91       	ld	r18, X
    3cfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	01 96       	adiw	r24, 0x01	; 1
    3d00:	8f 73       	andi	r24, 0x3F	; 63
    3d02:	99 27       	eor	r25, r25
    3d04:	84 8f       	std	Z+28, r24	; 0x1c
    3d06:	a6 89       	ldd	r26, Z+22	; 0x16
    3d08:	b7 89       	ldd	r27, Z+23	; 0x17
    3d0a:	2c 93       	st	X, r18
    3d0c:	a0 89       	ldd	r26, Z+16	; 0x10
    3d0e:	b1 89       	ldd	r27, Z+17	; 0x11
    3d10:	8c 91       	ld	r24, X
    3d12:	83 70       	andi	r24, 0x03	; 3
    3d14:	80 64       	ori	r24, 0x40	; 64
    3d16:	8c 93       	st	X, r24
    3d18:	93 8d       	ldd	r25, Z+27	; 0x1b
    3d1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3d1c:	98 13       	cpse	r25, r24
    3d1e:	06 c0       	rjmp	.+12     	; 0x3d2c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    3d20:	02 88       	ldd	r0, Z+18	; 0x12
    3d22:	f3 89       	ldd	r31, Z+19	; 0x13
    3d24:	e0 2d       	mov	r30, r0
    3d26:	80 81       	ld	r24, Z
    3d28:	8f 7d       	andi	r24, 0xDF	; 223
    3d2a:	80 83       	st	Z, r24
    3d2c:	08 95       	ret

00003d2e <_ZN14HardwareSerial5writeEh>:
    3d2e:	ef 92       	push	r14
    3d30:	ff 92       	push	r15
    3d32:	0f 93       	push	r16
    3d34:	1f 93       	push	r17
    3d36:	cf 93       	push	r28
    3d38:	df 93       	push	r29
    3d3a:	ec 01       	movw	r28, r24
    3d3c:	81 e0       	ldi	r24, 0x01	; 1
    3d3e:	88 8f       	std	Y+24, r24	; 0x18
    3d40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d44:	98 13       	cpse	r25, r24
    3d46:	05 c0       	rjmp	.+10     	; 0x3d52 <_ZN14HardwareSerial5writeEh+0x24>
    3d48:	e8 89       	ldd	r30, Y+16	; 0x10
    3d4a:	f9 89       	ldd	r31, Y+17	; 0x11
    3d4c:	80 81       	ld	r24, Z
    3d4e:	85 fd       	sbrc	r24, 5
    3d50:	26 c0       	rjmp	.+76     	; 0x3d9e <_ZN14HardwareSerial5writeEh+0x70>
    3d52:	f6 2e       	mov	r15, r22
    3d54:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3d56:	10 e0       	ldi	r17, 0x00	; 0
    3d58:	0f 5f       	subi	r16, 0xFF	; 255
    3d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5c:	0f 73       	andi	r16, 0x3F	; 63
    3d5e:	11 27       	eor	r17, r17
    3d60:	e0 2e       	mov	r14, r16
    3d62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d64:	e8 12       	cpse	r14, r24
    3d66:	0c c0       	rjmp	.+24     	; 0x3d80 <_ZN14HardwareSerial5writeEh+0x52>
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	07 fc       	sbrc	r0, 7
    3d6c:	fa cf       	rjmp	.-12     	; 0x3d62 <_ZN14HardwareSerial5writeEh+0x34>
    3d6e:	e8 89       	ldd	r30, Y+16	; 0x10
    3d70:	f9 89       	ldd	r31, Y+17	; 0x11
    3d72:	80 81       	ld	r24, Z
    3d74:	85 ff       	sbrs	r24, 5
    3d76:	f5 cf       	rjmp	.-22     	; 0x3d62 <_ZN14HardwareSerial5writeEh+0x34>
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3d7e:	f1 cf       	rjmp	.-30     	; 0x3d62 <_ZN14HardwareSerial5writeEh+0x34>
    3d80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d82:	fe 01       	movw	r30, r28
    3d84:	e8 0f       	add	r30, r24
    3d86:	f1 1d       	adc	r31, r1
    3d88:	e3 5a       	subi	r30, 0xA3	; 163
    3d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8c:	f0 82       	st	Z, r15
    3d8e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3d90:	f8 94       	cli
    3d92:	0b 8f       	std	Y+27, r16	; 0x1b
    3d94:	ea 89       	ldd	r30, Y+18	; 0x12
    3d96:	fb 89       	ldd	r31, Y+19	; 0x13
    3d98:	80 81       	ld	r24, Z
    3d9a:	80 62       	ori	r24, 0x20	; 32
    3d9c:	0a c0       	rjmp	.+20     	; 0x3db2 <_ZN14HardwareSerial5writeEh+0x84>
    3d9e:	9f b7       	in	r25, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	ee 89       	ldd	r30, Y+22	; 0x16
    3da4:	ff 89       	ldd	r31, Y+23	; 0x17
    3da6:	60 83       	st	Z, r22
    3da8:	e8 89       	ldd	r30, Y+16	; 0x10
    3daa:	f9 89       	ldd	r31, Y+17	; 0x11
    3dac:	80 81       	ld	r24, Z
    3dae:	83 70       	andi	r24, 0x03	; 3
    3db0:	80 64       	ori	r24, 0x40	; 64
    3db2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3db4:	9f bf       	out	0x3f, r25	; 63
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	1f 91       	pop	r17
    3dc0:	0f 91       	pop	r16
    3dc2:	ff 90       	pop	r15
    3dc4:	ef 90       	pop	r14
    3dc6:	08 95       	ret

00003dc8 <_ZN14HardwareSerial5flushEv>:
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	ec 01       	movw	r28, r24
    3dce:	88 8d       	ldd	r24, Y+24	; 0x18
    3dd0:	88 23       	and	r24, r24
    3dd2:	c9 f0       	breq	.+50     	; 0x3e06 <_ZN14HardwareSerial5flushEv+0x3e>
    3dd4:	ea 89       	ldd	r30, Y+18	; 0x12
    3dd6:	fb 89       	ldd	r31, Y+19	; 0x13
    3dd8:	80 81       	ld	r24, Z
    3dda:	85 fd       	sbrc	r24, 5
    3ddc:	05 c0       	rjmp	.+10     	; 0x3de8 <_ZN14HardwareSerial5flushEv+0x20>
    3dde:	a8 89       	ldd	r26, Y+16	; 0x10
    3de0:	b9 89       	ldd	r27, Y+17	; 0x11
    3de2:	8c 91       	ld	r24, X
    3de4:	86 fd       	sbrc	r24, 6
    3de6:	0f c0       	rjmp	.+30     	; 0x3e06 <_ZN14HardwareSerial5flushEv+0x3e>
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	07 fc       	sbrc	r0, 7
    3dec:	f5 cf       	rjmp	.-22     	; 0x3dd8 <_ZN14HardwareSerial5flushEv+0x10>
    3dee:	80 81       	ld	r24, Z
    3df0:	85 ff       	sbrs	r24, 5
    3df2:	f2 cf       	rjmp	.-28     	; 0x3dd8 <_ZN14HardwareSerial5flushEv+0x10>
    3df4:	a8 89       	ldd	r26, Y+16	; 0x10
    3df6:	b9 89       	ldd	r27, Y+17	; 0x11
    3df8:	8c 91       	ld	r24, X
    3dfa:	85 ff       	sbrs	r24, 5
    3dfc:	ed cf       	rjmp	.-38     	; 0x3dd8 <_ZN14HardwareSerial5flushEv+0x10>
    3dfe:	ce 01       	movw	r24, r28
    3e00:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3e04:	e7 cf       	rjmp	.-50     	; 0x3dd4 <_ZN14HardwareSerial5flushEv+0xc>
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	08 95       	ret

00003e0c <_ZN14HardwareSerial5beginEmh>:
    3e0c:	cf 92       	push	r12
    3e0e:	df 92       	push	r13
    3e10:	ef 92       	push	r14
    3e12:	ff 92       	push	r15
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	ec 01       	movw	r28, r24
    3e1c:	6a 01       	movw	r12, r20
    3e1e:	7b 01       	movw	r14, r22
    3e20:	12 2f       	mov	r17, r18
    3e22:	e8 89       	ldd	r30, Y+16	; 0x10
    3e24:	f9 89       	ldd	r31, Y+17	; 0x11
    3e26:	82 e0       	ldi	r24, 0x02	; 2
    3e28:	80 83       	st	Z, r24
    3e2a:	41 15       	cp	r20, r1
    3e2c:	51 4e       	sbci	r21, 0xE1	; 225
    3e2e:	61 05       	cpc	r22, r1
    3e30:	71 05       	cpc	r23, r1
    3e32:	b1 f0       	breq	.+44     	; 0x3e60 <_ZN14HardwareSerial5beginEmh+0x54>
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	79 e0       	ldi	r23, 0x09	; 9
    3e38:	8d e3       	ldi	r24, 0x3D	; 61
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	a7 01       	movw	r20, r14
    3e3e:	96 01       	movw	r18, r12
    3e40:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__udivmodsi4>
    3e44:	da 01       	movw	r26, r20
    3e46:	c9 01       	movw	r24, r18
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	a1 09       	sbc	r26, r1
    3e4c:	b1 09       	sbc	r27, r1
    3e4e:	b6 95       	lsr	r27
    3e50:	a7 95       	ror	r26
    3e52:	97 95       	ror	r25
    3e54:	87 95       	ror	r24
    3e56:	9c 01       	movw	r18, r24
    3e58:	21 15       	cp	r18, r1
    3e5a:	80 e1       	ldi	r24, 0x10	; 16
    3e5c:	38 07       	cpc	r19, r24
    3e5e:	a8 f0       	brcs	.+42     	; 0x3e8a <_ZN14HardwareSerial5beginEmh+0x7e>
    3e60:	e8 89       	ldd	r30, Y+16	; 0x10
    3e62:	f9 89       	ldd	r31, Y+17	; 0x11
    3e64:	10 82       	st	Z, r1
    3e66:	60 e8       	ldi	r22, 0x80	; 128
    3e68:	74 e8       	ldi	r23, 0x84	; 132
    3e6a:	8e e1       	ldi	r24, 0x1E	; 30
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	a7 01       	movw	r20, r14
    3e70:	96 01       	movw	r18, r12
    3e72:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__udivmodsi4>
    3e76:	da 01       	movw	r26, r20
    3e78:	c9 01       	movw	r24, r18
    3e7a:	01 97       	sbiw	r24, 0x01	; 1
    3e7c:	a1 09       	sbc	r26, r1
    3e7e:	b1 09       	sbc	r27, r1
    3e80:	b6 95       	lsr	r27
    3e82:	a7 95       	ror	r26
    3e84:	97 95       	ror	r25
    3e86:	87 95       	ror	r24
    3e88:	9c 01       	movw	r18, r24
    3e8a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e8c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e8e:	30 83       	st	Z, r19
    3e90:	ee 85       	ldd	r30, Y+14	; 0x0e
    3e92:	ff 85       	ldd	r31, Y+15	; 0x0f
    3e94:	20 83       	st	Z, r18
    3e96:	18 8e       	std	Y+24, r1	; 0x18
    3e98:	ec 89       	ldd	r30, Y+20	; 0x14
    3e9a:	fd 89       	ldd	r31, Y+21	; 0x15
    3e9c:	10 83       	st	Z, r17
    3e9e:	ea 89       	ldd	r30, Y+18	; 0x12
    3ea0:	fb 89       	ldd	r31, Y+19	; 0x13
    3ea2:	80 81       	ld	r24, Z
    3ea4:	80 61       	ori	r24, 0x10	; 16
    3ea6:	80 83       	st	Z, r24
    3ea8:	ea 89       	ldd	r30, Y+18	; 0x12
    3eaa:	fb 89       	ldd	r31, Y+19	; 0x13
    3eac:	80 81       	ld	r24, Z
    3eae:	88 60       	ori	r24, 0x08	; 8
    3eb0:	80 83       	st	Z, r24
    3eb2:	ea 89       	ldd	r30, Y+18	; 0x12
    3eb4:	fb 89       	ldd	r31, Y+19	; 0x13
    3eb6:	80 81       	ld	r24, Z
    3eb8:	80 68       	ori	r24, 0x80	; 128
    3eba:	80 83       	st	Z, r24
    3ebc:	ea 89       	ldd	r30, Y+18	; 0x12
    3ebe:	fb 89       	ldd	r31, Y+19	; 0x13
    3ec0:	80 81       	ld	r24, Z
    3ec2:	8f 7d       	andi	r24, 0xDF	; 223
    3ec4:	80 83       	st	Z, r24
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	ff 90       	pop	r15
    3ece:	ef 90       	pop	r14
    3ed0:	df 90       	pop	r13
    3ed2:	cf 90       	pop	r12
    3ed4:	08 95       	ret

00003ed6 <__vector_18>:
    3ed6:	1f 92       	push	r1
    3ed8:	0f 92       	push	r0
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	0f 92       	push	r0
    3ede:	11 24       	eor	r1, r1
    3ee0:	2f 93       	push	r18
    3ee2:	8f 93       	push	r24
    3ee4:	9f 93       	push	r25
    3ee6:	ef 93       	push	r30
    3ee8:	ff 93       	push	r31
    3eea:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <Serial+0x10>
    3eee:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <Serial+0x11>
    3ef2:	80 81       	ld	r24, Z
    3ef4:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <Serial+0x16>
    3ef8:	f0 91 f6 04 	lds	r31, 0x04F6	; 0x8004f6 <Serial+0x17>
    3efc:	82 fd       	sbrc	r24, 2
    3efe:	12 c0       	rjmp	.+36     	; 0x3f24 <__vector_18+0x4e>
    3f00:	90 81       	ld	r25, Z
    3f02:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <Serial+0x19>
    3f06:	8f 5f       	subi	r24, 0xFF	; 255
    3f08:	8f 73       	andi	r24, 0x3F	; 63
    3f0a:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <Serial+0x1a>
    3f0e:	82 17       	cp	r24, r18
    3f10:	51 f0       	breq	.+20     	; 0x3f26 <__vector_18+0x50>
    3f12:	e0 91 f8 04 	lds	r30, 0x04F8	; 0x8004f8 <Serial+0x19>
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	e1 52       	subi	r30, 0x21	; 33
    3f1a:	fb 4f       	sbci	r31, 0xFB	; 251
    3f1c:	95 8f       	std	Z+29, r25	; 0x1d
    3f1e:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <Serial+0x19>
    3f22:	01 c0       	rjmp	.+2      	; 0x3f26 <__vector_18+0x50>
    3f24:	80 81       	ld	r24, Z
    3f26:	ff 91       	pop	r31
    3f28:	ef 91       	pop	r30
    3f2a:	9f 91       	pop	r25
    3f2c:	8f 91       	pop	r24
    3f2e:	2f 91       	pop	r18
    3f30:	0f 90       	pop	r0
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	0f 90       	pop	r0
    3f36:	1f 90       	pop	r1
    3f38:	18 95       	reti

00003f3a <__vector_19>:
    3f3a:	1f 92       	push	r1
    3f3c:	0f 92       	push	r0
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	0f 92       	push	r0
    3f42:	11 24       	eor	r1, r1
    3f44:	2f 93       	push	r18
    3f46:	3f 93       	push	r19
    3f48:	4f 93       	push	r20
    3f4a:	5f 93       	push	r21
    3f4c:	6f 93       	push	r22
    3f4e:	7f 93       	push	r23
    3f50:	8f 93       	push	r24
    3f52:	9f 93       	push	r25
    3f54:	af 93       	push	r26
    3f56:	bf 93       	push	r27
    3f58:	ef 93       	push	r30
    3f5a:	ff 93       	push	r31
    3f5c:	8f ed       	ldi	r24, 0xDF	; 223
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3f64:	ff 91       	pop	r31
    3f66:	ef 91       	pop	r30
    3f68:	bf 91       	pop	r27
    3f6a:	af 91       	pop	r26
    3f6c:	9f 91       	pop	r25
    3f6e:	8f 91       	pop	r24
    3f70:	7f 91       	pop	r23
    3f72:	6f 91       	pop	r22
    3f74:	5f 91       	pop	r21
    3f76:	4f 91       	pop	r20
    3f78:	3f 91       	pop	r19
    3f7a:	2f 91       	pop	r18
    3f7c:	0f 90       	pop	r0
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	0f 90       	pop	r0
    3f82:	1f 90       	pop	r1
    3f84:	18 95       	reti

00003f86 <_Z17Serial0_availablev>:
    3f86:	8f ed       	ldi	r24, 0xDF	; 223
    3f88:	94 e0       	ldi	r25, 0x04	; 4
    3f8a:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN14HardwareSerial9availableEv>
    3f8e:	21 e0       	ldi	r18, 0x01	; 1
    3f90:	89 2b       	or	r24, r25
    3f92:	09 f4       	brne	.+2      	; 0x3f96 <_Z17Serial0_availablev+0x10>
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	82 2f       	mov	r24, r18
    3f98:	08 95       	ret

00003f9a <_GLOBAL__sub_I___vector_18>:
    3f9a:	ef ed       	ldi	r30, 0xDF	; 223
    3f9c:	f4 e0       	ldi	r31, 0x04	; 4
    3f9e:	13 82       	std	Z+3, r1	; 0x03
    3fa0:	12 82       	std	Z+2, r1	; 0x02
    3fa2:	88 ee       	ldi	r24, 0xE8	; 232
    3fa4:	93 e0       	ldi	r25, 0x03	; 3
    3fa6:	a0 e0       	ldi	r26, 0x00	; 0
    3fa8:	b0 e0       	ldi	r27, 0x00	; 0
    3faa:	84 83       	std	Z+4, r24	; 0x04
    3fac:	95 83       	std	Z+5, r25	; 0x05
    3fae:	a6 83       	std	Z+6, r26	; 0x06
    3fb0:	b7 83       	std	Z+7, r27	; 0x07
    3fb2:	85 e9       	ldi	r24, 0x95	; 149
    3fb4:	92 e0       	ldi	r25, 0x02	; 2
    3fb6:	91 83       	std	Z+1, r25	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	85 ec       	ldi	r24, 0xC5	; 197
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	95 87       	std	Z+13, r25	; 0x0d
    3fc0:	84 87       	std	Z+12, r24	; 0x0c
    3fc2:	84 ec       	ldi	r24, 0xC4	; 196
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	97 87       	std	Z+15, r25	; 0x0f
    3fc8:	86 87       	std	Z+14, r24	; 0x0e
    3fca:	80 ec       	ldi	r24, 0xC0	; 192
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	91 8b       	std	Z+17, r25	; 0x11
    3fd0:	80 8b       	std	Z+16, r24	; 0x10
    3fd2:	81 ec       	ldi	r24, 0xC1	; 193
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	93 8b       	std	Z+19, r25	; 0x13
    3fd8:	82 8b       	std	Z+18, r24	; 0x12
    3fda:	82 ec       	ldi	r24, 0xC2	; 194
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	95 8b       	std	Z+21, r25	; 0x15
    3fe0:	84 8b       	std	Z+20, r24	; 0x14
    3fe2:	86 ec       	ldi	r24, 0xC6	; 198
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	97 8b       	std	Z+23, r25	; 0x17
    3fe8:	86 8b       	std	Z+22, r24	; 0x16
    3fea:	11 8e       	std	Z+25, r1	; 0x19
    3fec:	12 8e       	std	Z+26, r1	; 0x1a
    3fee:	13 8e       	std	Z+27, r1	; 0x1b
    3ff0:	14 8e       	std	Z+28, r1	; 0x1c
    3ff2:	08 95       	ret

00003ff4 <main>:
    3ff4:	0e 94 5e 23 	call	0x46bc	; 0x46bc <init>
    3ff8:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <initVariant>
    3ffc:	0e 94 c9 06 	call	0xd92	; 0xd92 <setup>
    4000:	c7 e6       	ldi	r28, 0x67	; 103
    4002:	de e1       	ldi	r29, 0x1E	; 30
    4004:	0e 94 58 07 	call	0xeb0	; 0xeb0 <loop>
    4008:	20 97       	sbiw	r28, 0x00	; 0
    400a:	e1 f3       	breq	.-8      	; 0x4004 <main+0x10>
    400c:	0e 94 67 1e 	call	0x3cce	; 0x3cce <_Z14serialEventRunv>
    4010:	f9 cf       	rjmp	.-14     	; 0x4004 <main+0x10>

00004012 <_ZN5Print5writeEPKhj>:
    4012:	cf 92       	push	r12
    4014:	df 92       	push	r13
    4016:	ef 92       	push	r14
    4018:	ff 92       	push	r15
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	cf 93       	push	r28
    4020:	df 93       	push	r29
    4022:	6c 01       	movw	r12, r24
    4024:	7a 01       	movw	r14, r20
    4026:	8b 01       	movw	r16, r22
    4028:	c0 e0       	ldi	r28, 0x00	; 0
    402a:	d0 e0       	ldi	r29, 0x00	; 0
    402c:	ce 15       	cp	r28, r14
    402e:	df 05       	cpc	r29, r15
    4030:	81 f0       	breq	.+32     	; 0x4052 <_ZN5Print5writeEPKhj+0x40>
    4032:	d8 01       	movw	r26, r16
    4034:	6d 91       	ld	r22, X+
    4036:	8d 01       	movw	r16, r26
    4038:	d6 01       	movw	r26, r12
    403a:	ed 91       	ld	r30, X+
    403c:	fc 91       	ld	r31, X
    403e:	01 90       	ld	r0, Z+
    4040:	f0 81       	ld	r31, Z
    4042:	e0 2d       	mov	r30, r0
    4044:	c6 01       	movw	r24, r12
    4046:	09 95       	icall
    4048:	89 2b       	or	r24, r25
    404a:	11 f0       	breq	.+4      	; 0x4050 <_ZN5Print5writeEPKhj+0x3e>
    404c:	21 96       	adiw	r28, 0x01	; 1
    404e:	ee cf       	rjmp	.-36     	; 0x402c <_ZN5Print5writeEPKhj+0x1a>
    4050:	7e 01       	movw	r14, r28
    4052:	c7 01       	movw	r24, r14
    4054:	df 91       	pop	r29
    4056:	cf 91       	pop	r28
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	df 90       	pop	r13
    4062:	cf 90       	pop	r12
    4064:	08 95       	ret

00004066 <_ZN5Print5printEPK19__FlashStringHelper>:
    4066:	ef 92       	push	r14
    4068:	ff 92       	push	r15
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	8c 01       	movw	r16, r24
    4074:	7b 01       	movw	r14, r22
    4076:	c0 e0       	ldi	r28, 0x00	; 0
    4078:	d0 e0       	ldi	r29, 0x00	; 0
    407a:	f7 01       	movw	r30, r14
    407c:	ec 0f       	add	r30, r28
    407e:	fd 1f       	adc	r31, r29
    4080:	64 91       	lpm	r22, Z
    4082:	66 23       	and	r22, r22
    4084:	61 f0       	breq	.+24     	; 0x409e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    4086:	d8 01       	movw	r26, r16
    4088:	ed 91       	ld	r30, X+
    408a:	fc 91       	ld	r31, X
    408c:	01 90       	ld	r0, Z+
    408e:	f0 81       	ld	r31, Z
    4090:	e0 2d       	mov	r30, r0
    4092:	c8 01       	movw	r24, r16
    4094:	09 95       	icall
    4096:	89 2b       	or	r24, r25
    4098:	11 f0       	breq	.+4      	; 0x409e <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    409a:	21 96       	adiw	r28, 0x01	; 1
    409c:	ee cf       	rjmp	.-36     	; 0x407a <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    409e:	ce 01       	movw	r24, r28
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	1f 91       	pop	r17
    40a6:	0f 91       	pop	r16
    40a8:	ff 90       	pop	r15
    40aa:	ef 90       	pop	r14
    40ac:	08 95       	ret

000040ae <_ZN5Print5printEPKc>:
    40ae:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_ZN5Print5writeEPKc>

000040b2 <_ZN5Print5printEc>:
    40b2:	dc 01       	movw	r26, r24
    40b4:	ed 91       	ld	r30, X+
    40b6:	fc 91       	ld	r31, X
    40b8:	01 90       	ld	r0, Z+
    40ba:	f0 81       	ld	r31, Z
    40bc:	e0 2d       	mov	r30, r0
    40be:	09 94       	ijmp

000040c0 <_ZN5Print7printlnEv>:
    40c0:	63 ea       	ldi	r22, 0xA3	; 163
    40c2:	72 e0       	ldi	r23, 0x02	; 2
    40c4:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_ZN5Print5writeEPKc>

000040c8 <_ZN5Print7printlnEPKc>:
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ec 01       	movw	r28, r24
    40d2:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
    40d6:	8c 01       	movw	r16, r24
    40d8:	ce 01       	movw	r24, r28
    40da:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print7printlnEv>
    40de:	80 0f       	add	r24, r16
    40e0:	91 1f       	adc	r25, r17
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	08 95       	ret

000040ec <_ZN5Print11printNumberEmh>:
    40ec:	8f 92       	push	r8
    40ee:	9f 92       	push	r9
    40f0:	af 92       	push	r10
    40f2:	bf 92       	push	r11
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	a1 97       	sbiw	r28, 0x21	; 33
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	7c 01       	movw	r14, r24
    4112:	fa 01       	movw	r30, r20
    4114:	cb 01       	movw	r24, r22
    4116:	19 a2       	std	Y+33, r1	; 0x21
    4118:	22 30       	cpi	r18, 0x02	; 2
    411a:	08 f4       	brcc	.+2      	; 0x411e <_ZN5Print11printNumberEmh+0x32>
    411c:	2a e0       	ldi	r18, 0x0A	; 10
    411e:	8e 01       	movw	r16, r28
    4120:	0f 5d       	subi	r16, 0xDF	; 223
    4122:	1f 4f       	sbci	r17, 0xFF	; 255
    4124:	82 2e       	mov	r8, r18
    4126:	91 2c       	mov	r9, r1
    4128:	a1 2c       	mov	r10, r1
    412a:	b1 2c       	mov	r11, r1
    412c:	bf 01       	movw	r22, r30
    412e:	a5 01       	movw	r20, r10
    4130:	94 01       	movw	r18, r8
    4132:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__udivmodsi4>
    4136:	f9 01       	movw	r30, r18
    4138:	ca 01       	movw	r24, r20
    413a:	01 50       	subi	r16, 0x01	; 1
    413c:	11 09       	sbc	r17, r1
    413e:	6a 30       	cpi	r22, 0x0A	; 10
    4140:	10 f4       	brcc	.+4      	; 0x4146 <_ZN5Print11printNumberEmh+0x5a>
    4142:	60 5d       	subi	r22, 0xD0	; 208
    4144:	01 c0       	rjmp	.+2      	; 0x4148 <_ZN5Print11printNumberEmh+0x5c>
    4146:	69 5c       	subi	r22, 0xC9	; 201
    4148:	d8 01       	movw	r26, r16
    414a:	6c 93       	st	X, r22
    414c:	23 2b       	or	r18, r19
    414e:	24 2b       	or	r18, r20
    4150:	25 2b       	or	r18, r21
    4152:	61 f7       	brne	.-40     	; 0x412c <_ZN5Print11printNumberEmh+0x40>
    4154:	b8 01       	movw	r22, r16
    4156:	c7 01       	movw	r24, r14
    4158:	0e 94 8d 01 	call	0x31a	; 0x31a <_ZN5Print5writeEPKc>
    415c:	a1 96       	adiw	r28, 0x21	; 33
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	ff 90       	pop	r15
    4172:	ef 90       	pop	r14
    4174:	bf 90       	pop	r11
    4176:	af 90       	pop	r10
    4178:	9f 90       	pop	r9
    417a:	8f 90       	pop	r8
    417c:	08 95       	ret

0000417e <_ZN5Print5printEmi>:
    417e:	21 15       	cp	r18, r1
    4180:	31 05       	cpc	r19, r1
    4182:	41 f4       	brne	.+16     	; 0x4194 <_ZN5Print5printEmi+0x16>
    4184:	dc 01       	movw	r26, r24
    4186:	ed 91       	ld	r30, X+
    4188:	fc 91       	ld	r31, X
    418a:	01 90       	ld	r0, Z+
    418c:	f0 81       	ld	r31, Z
    418e:	e0 2d       	mov	r30, r0
    4190:	64 2f       	mov	r22, r20
    4192:	09 94       	ijmp
    4194:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <_ZN5Print11printNumberEmh>

00004198 <_ZN5Print5printEhi>:
    4198:	9a 01       	movw	r18, r20
    419a:	46 2f       	mov	r20, r22
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	60 e0       	ldi	r22, 0x00	; 0
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	0c 94 bf 20 	jmp	0x417e	; 0x417e <_ZN5Print5printEmi>

000041a6 <_ZN5Print7printlnEhi>:
    41a6:	0f 93       	push	r16
    41a8:	1f 93       	push	r17
    41aa:	cf 93       	push	r28
    41ac:	df 93       	push	r29
    41ae:	ec 01       	movw	r28, r24
    41b0:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN5Print5printEhi>
    41b4:	8c 01       	movw	r16, r24
    41b6:	ce 01       	movw	r24, r28
    41b8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print7printlnEv>
    41bc:	80 0f       	add	r24, r16
    41be:	91 1f       	adc	r25, r17
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
    41c4:	1f 91       	pop	r17
    41c6:	0f 91       	pop	r16
    41c8:	08 95       	ret

000041ca <_ZN5Print5printEji>:
    41ca:	9a 01       	movw	r18, r20
    41cc:	ab 01       	movw	r20, r22
    41ce:	60 e0       	ldi	r22, 0x00	; 0
    41d0:	70 e0       	ldi	r23, 0x00	; 0
    41d2:	0c 94 bf 20 	jmp	0x417e	; 0x417e <_ZN5Print5printEmi>

000041d6 <_ZN5Print5printEli>:
    41d6:	cf 92       	push	r12
    41d8:	df 92       	push	r13
    41da:	ef 92       	push	r14
    41dc:	ff 92       	push	r15
    41de:	0f 93       	push	r16
    41e0:	1f 93       	push	r17
    41e2:	cf 93       	push	r28
    41e4:	df 93       	push	r29
    41e6:	21 15       	cp	r18, r1
    41e8:	31 05       	cpc	r19, r1
    41ea:	81 f4       	brne	.+32     	; 0x420c <_ZN5Print5printEli+0x36>
    41ec:	dc 01       	movw	r26, r24
    41ee:	ed 91       	ld	r30, X+
    41f0:	fc 91       	ld	r31, X
    41f2:	01 90       	ld	r0, Z+
    41f4:	f0 81       	ld	r31, Z
    41f6:	e0 2d       	mov	r30, r0
    41f8:	64 2f       	mov	r22, r20
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	df 90       	pop	r13
    4208:	cf 90       	pop	r12
    420a:	09 94       	ijmp
    420c:	2a 30       	cpi	r18, 0x0A	; 10
    420e:	31 05       	cpc	r19, r1
    4210:	01 f5       	brne	.+64     	; 0x4252 <_ZN5Print5printEli+0x7c>
    4212:	77 ff       	sbrs	r23, 7
    4214:	1d c0       	rjmp	.+58     	; 0x4250 <_ZN5Print5printEli+0x7a>
    4216:	6a 01       	movw	r12, r20
    4218:	7b 01       	movw	r14, r22
    421a:	ec 01       	movw	r28, r24
    421c:	6d e2       	ldi	r22, 0x2D	; 45
    421e:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Print5printEc>
    4222:	8c 01       	movw	r16, r24
    4224:	44 27       	eor	r20, r20
    4226:	55 27       	eor	r21, r21
    4228:	ba 01       	movw	r22, r20
    422a:	4c 19       	sub	r20, r12
    422c:	5d 09       	sbc	r21, r13
    422e:	6e 09       	sbc	r22, r14
    4230:	7f 09       	sbc	r23, r15
    4232:	2a e0       	ldi	r18, 0x0A	; 10
    4234:	ce 01       	movw	r24, r28
    4236:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN5Print11printNumberEmh>
    423a:	80 0f       	add	r24, r16
    423c:	91 1f       	adc	r25, r17
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	ff 90       	pop	r15
    4248:	ef 90       	pop	r14
    424a:	df 90       	pop	r13
    424c:	cf 90       	pop	r12
    424e:	08 95       	ret
    4250:	2a e0       	ldi	r18, 0x0A	; 10
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	ff 90       	pop	r15
    425c:	ef 90       	pop	r14
    425e:	df 90       	pop	r13
    4260:	cf 90       	pop	r12
    4262:	0c 94 76 20 	jmp	0x40ec	; 0x40ec <_ZN5Print11printNumberEmh>

00004266 <_ZN5Print5printEii>:
    4266:	9a 01       	movw	r18, r20
    4268:	ab 01       	movw	r20, r22
    426a:	77 0f       	add	r23, r23
    426c:	66 0b       	sbc	r22, r22
    426e:	77 0b       	sbc	r23, r23
    4270:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <_ZN5Print5printEli>

00004274 <_ZN5Print7printlnEii>:
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	0e 94 33 21 	call	0x4266	; 0x4266 <_ZN5Print5printEii>
    4282:	8c 01       	movw	r16, r24
    4284:	ce 01       	movw	r24, r28
    4286:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print7printlnEv>
    428a:	80 0f       	add	r24, r16
    428c:	91 1f       	adc	r25, r17
    428e:	df 91       	pop	r29
    4290:	cf 91       	pop	r28
    4292:	1f 91       	pop	r17
    4294:	0f 91       	pop	r16
    4296:	08 95       	ret

00004298 <_ZN5Print10printFloatEdh>:
    4298:	7f 92       	push	r7
    429a:	8f 92       	push	r8
    429c:	9f 92       	push	r9
    429e:	af 92       	push	r10
    42a0:	bf 92       	push	r11
    42a2:	cf 92       	push	r12
    42a4:	df 92       	push	r13
    42a6:	ef 92       	push	r14
    42a8:	ff 92       	push	r15
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	8c 01       	movw	r16, r24
    42b4:	6a 01       	movw	r12, r20
    42b6:	7b 01       	movw	r14, r22
    42b8:	72 2e       	mov	r7, r18
    42ba:	9a 01       	movw	r18, r20
    42bc:	ab 01       	movw	r20, r22
    42be:	c7 01       	movw	r24, r14
    42c0:	b6 01       	movw	r22, r12
    42c2:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__unordsf2>
    42c6:	88 23       	and	r24, r24
    42c8:	19 f0       	breq	.+6      	; 0x42d0 <_ZN5Print10printFloatEdh+0x38>
    42ca:	66 ea       	ldi	r22, 0xA6	; 166
    42cc:	72 e0       	ldi	r23, 0x02	; 2
    42ce:	27 c0       	rjmp	.+78     	; 0x431e <_ZN5Print10printFloatEdh+0x86>
    42d0:	46 01       	movw	r8, r12
    42d2:	57 01       	movw	r10, r14
    42d4:	e8 94       	clt
    42d6:	b7 f8       	bld	r11, 7
    42d8:	2f ef       	ldi	r18, 0xFF	; 255
    42da:	3f ef       	ldi	r19, 0xFF	; 255
    42dc:	4f e7       	ldi	r20, 0x7F	; 127
    42de:	5f e7       	ldi	r21, 0x7F	; 127
    42e0:	c5 01       	movw	r24, r10
    42e2:	b4 01       	movw	r22, r8
    42e4:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <__unordsf2>
    42e8:	81 11       	cpse	r24, r1
    42ea:	0d c0       	rjmp	.+26     	; 0x4306 <_ZN5Print10printFloatEdh+0x6e>
    42ec:	2f ef       	ldi	r18, 0xFF	; 255
    42ee:	3f ef       	ldi	r19, 0xFF	; 255
    42f0:	4f e7       	ldi	r20, 0x7F	; 127
    42f2:	5f e7       	ldi	r21, 0x7F	; 127
    42f4:	c5 01       	movw	r24, r10
    42f6:	b4 01       	movw	r22, r8
    42f8:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <__cmpsf2>
    42fc:	18 16       	cp	r1, r24
    42fe:	1c f4       	brge	.+6      	; 0x4306 <_ZN5Print10printFloatEdh+0x6e>
    4300:	6a ea       	ldi	r22, 0xAA	; 170
    4302:	72 e0       	ldi	r23, 0x02	; 2
    4304:	0c c0       	rjmp	.+24     	; 0x431e <_ZN5Print10printFloatEdh+0x86>
    4306:	2f ef       	ldi	r18, 0xFF	; 255
    4308:	3f ef       	ldi	r19, 0xFF	; 255
    430a:	4f e7       	ldi	r20, 0x7F	; 127
    430c:	5f e4       	ldi	r21, 0x4F	; 79
    430e:	c7 01       	movw	r24, r14
    4310:	b6 01       	movw	r22, r12
    4312:	0e 94 b8 1d 	call	0x3b70	; 0x3b70 <__gesf2>
    4316:	18 16       	cp	r1, r24
    4318:	94 f4       	brge	.+36     	; 0x433e <_ZN5Print10printFloatEdh+0xa6>
    431a:	6e ea       	ldi	r22, 0xAE	; 174
    431c:	72 e0       	ldi	r23, 0x02	; 2
    431e:	c8 01       	movw	r24, r16
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
    432a:	ef 90       	pop	r14
    432c:	df 90       	pop	r13
    432e:	cf 90       	pop	r12
    4330:	bf 90       	pop	r11
    4332:	af 90       	pop	r10
    4334:	9f 90       	pop	r9
    4336:	8f 90       	pop	r8
    4338:	7f 90       	pop	r7
    433a:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_ZN5Print5writeEPKc>
    433e:	2f ef       	ldi	r18, 0xFF	; 255
    4340:	3f ef       	ldi	r19, 0xFF	; 255
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	5f ec       	ldi	r21, 0xCF	; 207
    4346:	c7 01       	movw	r24, r14
    4348:	b6 01       	movw	r22, r12
    434a:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <__cmpsf2>
    434e:	87 fd       	sbrc	r24, 7
    4350:	e4 cf       	rjmp	.-56     	; 0x431a <_ZN5Print10printFloatEdh+0x82>
    4352:	20 e0       	ldi	r18, 0x00	; 0
    4354:	30 e0       	ldi	r19, 0x00	; 0
    4356:	a9 01       	movw	r20, r18
    4358:	c7 01       	movw	r24, r14
    435a:	b6 01       	movw	r22, r12
    435c:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <__cmpsf2>
    4360:	87 ff       	sbrs	r24, 7
    4362:	0a c0       	rjmp	.+20     	; 0x4378 <_ZN5Print10printFloatEdh+0xe0>
    4364:	6d e2       	ldi	r22, 0x2D	; 45
    4366:	c8 01       	movw	r24, r16
    4368:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Print5printEc>
    436c:	ec 01       	movw	r28, r24
    436e:	f7 fa       	bst	r15, 7
    4370:	f0 94       	com	r15
    4372:	f7 f8       	bld	r15, 7
    4374:	f0 94       	com	r15
    4376:	02 c0       	rjmp	.+4      	; 0x437c <_ZN5Print10printFloatEdh+0xe4>
    4378:	c0 e0       	ldi	r28, 0x00	; 0
    437a:	d0 e0       	ldi	r29, 0x00	; 0
    437c:	b1 2c       	mov	r11, r1
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	80 e0       	ldi	r24, 0x00	; 0
    4384:	9f e3       	ldi	r25, 0x3F	; 63
    4386:	7b 14       	cp	r7, r11
    4388:	41 f0       	breq	.+16     	; 0x439a <_ZN5Print10printFloatEdh+0x102>
    438a:	20 e0       	ldi	r18, 0x00	; 0
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	40 e2       	ldi	r20, 0x20	; 32
    4390:	51 e4       	ldi	r21, 0x41	; 65
    4392:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <__divsf3>
    4396:	b3 94       	inc	r11
    4398:	f6 cf       	rjmp	.-20     	; 0x4386 <_ZN5Print10printFloatEdh+0xee>
    439a:	a7 01       	movw	r20, r14
    439c:	96 01       	movw	r18, r12
    439e:	0e 94 ed 1b 	call	0x37da	; 0x37da <__addsf3>
    43a2:	6b 01       	movw	r12, r22
    43a4:	7c 01       	movw	r14, r24
    43a6:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__fixunssfsi>
    43aa:	4b 01       	movw	r8, r22
    43ac:	5c 01       	movw	r10, r24
    43ae:	2a e0       	ldi	r18, 0x0A	; 10
    43b0:	ab 01       	movw	r20, r22
    43b2:	bc 01       	movw	r22, r24
    43b4:	c8 01       	movw	r24, r16
    43b6:	0e 94 76 20 	call	0x40ec	; 0x40ec <_ZN5Print11printNumberEmh>
    43ba:	c8 0f       	add	r28, r24
    43bc:	d9 1f       	adc	r29, r25
    43be:	77 20       	and	r7, r7
    43c0:	b9 f1       	breq	.+110    	; 0x4430 <_ZN5Print10printFloatEdh+0x198>
    43c2:	c5 01       	movw	r24, r10
    43c4:	b4 01       	movw	r22, r8
    43c6:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__floatunsisf>
    43ca:	9b 01       	movw	r18, r22
    43cc:	ac 01       	movw	r20, r24
    43ce:	c7 01       	movw	r24, r14
    43d0:	b6 01       	movw	r22, r12
    43d2:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__subsf3>
    43d6:	6b 01       	movw	r12, r22
    43d8:	7c 01       	movw	r14, r24
    43da:	6e e2       	ldi	r22, 0x2E	; 46
    43dc:	c8 01       	movw	r24, r16
    43de:	0e 94 59 20 	call	0x40b2	; 0x40b2 <_ZN5Print5printEc>
    43e2:	c8 0f       	add	r28, r24
    43e4:	d9 1f       	adc	r29, r25
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	40 e2       	ldi	r20, 0x20	; 32
    43ec:	51 e4       	ldi	r21, 0x41	; 65
    43ee:	c7 01       	movw	r24, r14
    43f0:	b6 01       	movw	r22, r12
    43f2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <__mulsf3>
    43f6:	4b 01       	movw	r8, r22
    43f8:	5c 01       	movw	r10, r24
    43fa:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <__fixunssfsi>
    43fe:	6b 01       	movw	r12, r22
    4400:	7c 01       	movw	r14, r24
    4402:	4a e0       	ldi	r20, 0x0A	; 10
    4404:	50 e0       	ldi	r21, 0x00	; 0
    4406:	c8 01       	movw	r24, r16
    4408:	0e 94 e5 20 	call	0x41ca	; 0x41ca <_ZN5Print5printEji>
    440c:	c8 0f       	add	r28, r24
    440e:	d9 1f       	adc	r29, r25
    4410:	b6 01       	movw	r22, r12
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__floatunsisf>
    441a:	9b 01       	movw	r18, r22
    441c:	ac 01       	movw	r20, r24
    441e:	c5 01       	movw	r24, r10
    4420:	b4 01       	movw	r22, r8
    4422:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__subsf3>
    4426:	6b 01       	movw	r12, r22
    4428:	7c 01       	movw	r14, r24
    442a:	7a 94       	dec	r7
    442c:	71 10       	cpse	r7, r1
    442e:	db cf       	rjmp	.-74     	; 0x43e6 <_ZN5Print10printFloatEdh+0x14e>
    4430:	ce 01       	movw	r24, r28
    4432:	df 91       	pop	r29
    4434:	cf 91       	pop	r28
    4436:	1f 91       	pop	r17
    4438:	0f 91       	pop	r16
    443a:	ff 90       	pop	r15
    443c:	ef 90       	pop	r14
    443e:	df 90       	pop	r13
    4440:	cf 90       	pop	r12
    4442:	bf 90       	pop	r11
    4444:	af 90       	pop	r10
    4446:	9f 90       	pop	r9
    4448:	8f 90       	pop	r8
    444a:	7f 90       	pop	r7
    444c:	08 95       	ret

0000444e <_ZN5Print7printlnEdi>:
    444e:	0f 93       	push	r16
    4450:	1f 93       	push	r17
    4452:	cf 93       	push	r28
    4454:	df 93       	push	r29
    4456:	ec 01       	movw	r28, r24
    4458:	0e 94 4c 21 	call	0x4298	; 0x4298 <_ZN5Print10printFloatEdh>
    445c:	8c 01       	movw	r16, r24
    445e:	ce 01       	movw	r24, r28
    4460:	0e 94 60 20 	call	0x40c0	; 0x40c0 <_ZN5Print7printlnEv>
    4464:	80 0f       	add	r24, r16
    4466:	91 1f       	adc	r25, r17
    4468:	df 91       	pop	r29
    446a:	cf 91       	pop	r28
    446c:	1f 91       	pop	r17
    446e:	0f 91       	pop	r16
    4470:	08 95       	ret

00004472 <nothing>:
    4472:	08 95       	ret

00004474 <attachInterrupt>:
    4474:	82 30       	cpi	r24, 0x02	; 2
    4476:	e8 f4       	brcc	.+58     	; 0x44b2 <attachInterrupt+0x3e>
    4478:	e8 2f       	mov	r30, r24
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	ee 0f       	add	r30, r30
    447e:	ff 1f       	adc	r31, r31
    4480:	e5 5c       	subi	r30, 0xC5	; 197
    4482:	fe 4f       	sbci	r31, 0xFE	; 254
    4484:	71 83       	std	Z+1, r23	; 0x01
    4486:	60 83       	st	Z, r22
    4488:	81 30       	cpi	r24, 0x01	; 1
    448a:	41 f0       	breq	.+16     	; 0x449c <attachInterrupt+0x28>
    448c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4490:	8c 7f       	andi	r24, 0xFC	; 252
    4492:	48 2b       	or	r20, r24
    4494:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    4498:	e8 9a       	sbi	0x1d, 0	; 29
    449a:	08 95       	ret
    449c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    44a0:	83 7f       	andi	r24, 0xF3	; 243
    44a2:	44 0f       	add	r20, r20
    44a4:	55 1f       	adc	r21, r21
    44a6:	44 0f       	add	r20, r20
    44a8:	55 1f       	adc	r21, r21
    44aa:	48 2b       	or	r20, r24
    44ac:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    44b0:	e9 9a       	sbi	0x1d, 1	; 29
    44b2:	08 95       	ret

000044b4 <__vector_1>:
    44b4:	1f 92       	push	r1
    44b6:	0f 92       	push	r0
    44b8:	0f b6       	in	r0, 0x3f	; 63
    44ba:	0f 92       	push	r0
    44bc:	11 24       	eor	r1, r1
    44be:	2f 93       	push	r18
    44c0:	3f 93       	push	r19
    44c2:	4f 93       	push	r20
    44c4:	5f 93       	push	r21
    44c6:	6f 93       	push	r22
    44c8:	7f 93       	push	r23
    44ca:	8f 93       	push	r24
    44cc:	9f 93       	push	r25
    44ce:	af 93       	push	r26
    44d0:	bf 93       	push	r27
    44d2:	ef 93       	push	r30
    44d4:	ff 93       	push	r31
    44d6:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <intFunc>
    44da:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <intFunc+0x1>
    44de:	09 95       	icall
    44e0:	ff 91       	pop	r31
    44e2:	ef 91       	pop	r30
    44e4:	bf 91       	pop	r27
    44e6:	af 91       	pop	r26
    44e8:	9f 91       	pop	r25
    44ea:	8f 91       	pop	r24
    44ec:	7f 91       	pop	r23
    44ee:	6f 91       	pop	r22
    44f0:	5f 91       	pop	r21
    44f2:	4f 91       	pop	r20
    44f4:	3f 91       	pop	r19
    44f6:	2f 91       	pop	r18
    44f8:	0f 90       	pop	r0
    44fa:	0f be       	out	0x3f, r0	; 63
    44fc:	0f 90       	pop	r0
    44fe:	1f 90       	pop	r1
    4500:	18 95       	reti

00004502 <__vector_2>:
    4502:	1f 92       	push	r1
    4504:	0f 92       	push	r0
    4506:	0f b6       	in	r0, 0x3f	; 63
    4508:	0f 92       	push	r0
    450a:	11 24       	eor	r1, r1
    450c:	2f 93       	push	r18
    450e:	3f 93       	push	r19
    4510:	4f 93       	push	r20
    4512:	5f 93       	push	r21
    4514:	6f 93       	push	r22
    4516:	7f 93       	push	r23
    4518:	8f 93       	push	r24
    451a:	9f 93       	push	r25
    451c:	af 93       	push	r26
    451e:	bf 93       	push	r27
    4520:	ef 93       	push	r30
    4522:	ff 93       	push	r31
    4524:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <intFunc+0x2>
    4528:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <intFunc+0x3>
    452c:	09 95       	icall
    452e:	ff 91       	pop	r31
    4530:	ef 91       	pop	r30
    4532:	bf 91       	pop	r27
    4534:	af 91       	pop	r26
    4536:	9f 91       	pop	r25
    4538:	8f 91       	pop	r24
    453a:	7f 91       	pop	r23
    453c:	6f 91       	pop	r22
    453e:	5f 91       	pop	r21
    4540:	4f 91       	pop	r20
    4542:	3f 91       	pop	r19
    4544:	2f 91       	pop	r18
    4546:	0f 90       	pop	r0
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	0f 90       	pop	r0
    454c:	1f 90       	pop	r1
    454e:	18 95       	reti

00004550 <__vector_16>:
    4550:	1f 92       	push	r1
    4552:	0f 92       	push	r0
    4554:	0f b6       	in	r0, 0x3f	; 63
    4556:	0f 92       	push	r0
    4558:	11 24       	eor	r1, r1
    455a:	2f 93       	push	r18
    455c:	3f 93       	push	r19
    455e:	8f 93       	push	r24
    4560:	9f 93       	push	r25
    4562:	af 93       	push	r26
    4564:	bf 93       	push	r27
    4566:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <timer0_millis>
    456a:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <timer0_millis+0x1>
    456e:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <timer0_millis+0x2>
    4572:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <timer0_millis+0x3>
    4576:	30 91 7c 05 	lds	r19, 0x057C	; 0x80057c <timer0_fract>
    457a:	23 e0       	ldi	r18, 0x03	; 3
    457c:	23 0f       	add	r18, r19
    457e:	2d 37       	cpi	r18, 0x7D	; 125
    4580:	20 f4       	brcc	.+8      	; 0x458a <__vector_16+0x3a>
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	a1 1d       	adc	r26, r1
    4586:	b1 1d       	adc	r27, r1
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <__vector_16+0x44>
    458a:	26 e8       	ldi	r18, 0x86	; 134
    458c:	23 0f       	add	r18, r19
    458e:	02 96       	adiw	r24, 0x02	; 2
    4590:	a1 1d       	adc	r26, r1
    4592:	b1 1d       	adc	r27, r1
    4594:	20 93 7c 05 	sts	0x057C, r18	; 0x80057c <timer0_fract>
    4598:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <timer0_millis>
    459c:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <timer0_millis+0x1>
    45a0:	a0 93 7f 05 	sts	0x057F, r26	; 0x80057f <timer0_millis+0x2>
    45a4:	b0 93 80 05 	sts	0x0580, r27	; 0x800580 <timer0_millis+0x3>
    45a8:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <timer0_overflow_count>
    45ac:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <timer0_overflow_count+0x1>
    45b0:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <timer0_overflow_count+0x2>
    45b4:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <timer0_overflow_count+0x3>
    45b8:	01 96       	adiw	r24, 0x01	; 1
    45ba:	a1 1d       	adc	r26, r1
    45bc:	b1 1d       	adc	r27, r1
    45be:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <timer0_overflow_count>
    45c2:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <timer0_overflow_count+0x1>
    45c6:	a0 93 83 05 	sts	0x0583, r26	; 0x800583 <timer0_overflow_count+0x2>
    45ca:	b0 93 84 05 	sts	0x0584, r27	; 0x800584 <timer0_overflow_count+0x3>
    45ce:	bf 91       	pop	r27
    45d0:	af 91       	pop	r26
    45d2:	9f 91       	pop	r25
    45d4:	8f 91       	pop	r24
    45d6:	3f 91       	pop	r19
    45d8:	2f 91       	pop	r18
    45da:	0f 90       	pop	r0
    45dc:	0f be       	out	0x3f, r0	; 63
    45de:	0f 90       	pop	r0
    45e0:	1f 90       	pop	r1
    45e2:	18 95       	reti

000045e4 <micros>:
    45e4:	3f b7       	in	r19, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <timer0_overflow_count>
    45ec:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <timer0_overflow_count+0x1>
    45f0:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <timer0_overflow_count+0x2>
    45f4:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <timer0_overflow_count+0x3>
    45f8:	26 b5       	in	r18, 0x26	; 38
    45fa:	a8 9b       	sbis	0x15, 0	; 21
    45fc:	05 c0       	rjmp	.+10     	; 0x4608 <micros+0x24>
    45fe:	2f 3f       	cpi	r18, 0xFF	; 255
    4600:	19 f0       	breq	.+6      	; 0x4608 <micros+0x24>
    4602:	01 96       	adiw	r24, 0x01	; 1
    4604:	a1 1d       	adc	r26, r1
    4606:	b1 1d       	adc	r27, r1
    4608:	3f bf       	out	0x3f, r19	; 63
    460a:	ba 2f       	mov	r27, r26
    460c:	a9 2f       	mov	r26, r25
    460e:	98 2f       	mov	r25, r24
    4610:	88 27       	eor	r24, r24
    4612:	82 0f       	add	r24, r18
    4614:	91 1d       	adc	r25, r1
    4616:	a1 1d       	adc	r26, r1
    4618:	b1 1d       	adc	r27, r1
    461a:	bc 01       	movw	r22, r24
    461c:	cd 01       	movw	r24, r26
    461e:	42 e0       	ldi	r20, 0x02	; 2
    4620:	66 0f       	add	r22, r22
    4622:	77 1f       	adc	r23, r23
    4624:	88 1f       	adc	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	4a 95       	dec	r20
    462a:	d1 f7       	brne	.-12     	; 0x4620 <micros+0x3c>
    462c:	08 95       	ret

0000462e <delay>:
    462e:	8f 92       	push	r8
    4630:	9f 92       	push	r9
    4632:	af 92       	push	r10
    4634:	bf 92       	push	r11
    4636:	cf 92       	push	r12
    4638:	df 92       	push	r13
    463a:	ef 92       	push	r14
    463c:	ff 92       	push	r15
    463e:	6b 01       	movw	r12, r22
    4640:	7c 01       	movw	r14, r24
    4642:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <micros>
    4646:	4b 01       	movw	r8, r22
    4648:	5c 01       	movw	r10, r24
    464a:	c1 14       	cp	r12, r1
    464c:	d1 04       	cpc	r13, r1
    464e:	e1 04       	cpc	r14, r1
    4650:	f1 04       	cpc	r15, r1
    4652:	01 f1       	breq	.+64     	; 0x4694 <delay+0x66>
    4654:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <yield>
    4658:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <micros>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	88 19       	sub	r24, r8
    4662:	99 09       	sbc	r25, r9
    4664:	aa 09       	sbc	r26, r10
    4666:	bb 09       	sbc	r27, r11
    4668:	88 3e       	cpi	r24, 0xE8	; 232
    466a:	93 40       	sbci	r25, 0x03	; 3
    466c:	a1 05       	cpc	r26, r1
    466e:	b1 05       	cpc	r27, r1
    4670:	60 f3       	brcs	.-40     	; 0x464a <delay+0x1c>
    4672:	21 e0       	ldi	r18, 0x01	; 1
    4674:	c2 1a       	sub	r12, r18
    4676:	d1 08       	sbc	r13, r1
    4678:	e1 08       	sbc	r14, r1
    467a:	f1 08       	sbc	r15, r1
    467c:	88 ee       	ldi	r24, 0xE8	; 232
    467e:	88 0e       	add	r8, r24
    4680:	83 e0       	ldi	r24, 0x03	; 3
    4682:	98 1e       	adc	r9, r24
    4684:	a1 1c       	adc	r10, r1
    4686:	b1 1c       	adc	r11, r1
    4688:	c1 14       	cp	r12, r1
    468a:	d1 04       	cpc	r13, r1
    468c:	e1 04       	cpc	r14, r1
    468e:	f1 04       	cpc	r15, r1
    4690:	19 f7       	brne	.-58     	; 0x4658 <delay+0x2a>
    4692:	db cf       	rjmp	.-74     	; 0x464a <delay+0x1c>
    4694:	ff 90       	pop	r15
    4696:	ef 90       	pop	r14
    4698:	df 90       	pop	r13
    469a:	cf 90       	pop	r12
    469c:	bf 90       	pop	r11
    469e:	af 90       	pop	r10
    46a0:	9f 90       	pop	r9
    46a2:	8f 90       	pop	r8
    46a4:	08 95       	ret

000046a6 <delayMicroseconds>:
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	91 05       	cpc	r25, r1
    46aa:	38 f0       	brcs	.+14     	; 0x46ba <delayMicroseconds+0x14>
    46ac:	88 0f       	add	r24, r24
    46ae:	99 1f       	adc	r25, r25
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	05 97       	sbiw	r24, 0x05	; 5
    46b6:	01 97       	sbiw	r24, 0x01	; 1
    46b8:	f1 f7       	brne	.-4      	; 0x46b6 <delayMicroseconds+0x10>
    46ba:	08 95       	ret

000046bc <init>:
    46bc:	78 94       	sei
    46be:	84 b5       	in	r24, 0x24	; 36
    46c0:	82 60       	ori	r24, 0x02	; 2
    46c2:	84 bd       	out	0x24, r24	; 36
    46c4:	84 b5       	in	r24, 0x24	; 36
    46c6:	81 60       	ori	r24, 0x01	; 1
    46c8:	84 bd       	out	0x24, r24	; 36
    46ca:	85 b5       	in	r24, 0x25	; 37
    46cc:	82 60       	ori	r24, 0x02	; 2
    46ce:	85 bd       	out	0x25, r24	; 37
    46d0:	85 b5       	in	r24, 0x25	; 37
    46d2:	81 60       	ori	r24, 0x01	; 1
    46d4:	85 bd       	out	0x25, r24	; 37
    46d6:	ee e6       	ldi	r30, 0x6E	; 110
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	80 81       	ld	r24, Z
    46dc:	81 60       	ori	r24, 0x01	; 1
    46de:	80 83       	st	Z, r24
    46e0:	e1 e8       	ldi	r30, 0x81	; 129
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	10 82       	st	Z, r1
    46e6:	80 81       	ld	r24, Z
    46e8:	82 60       	ori	r24, 0x02	; 2
    46ea:	80 83       	st	Z, r24
    46ec:	80 81       	ld	r24, Z
    46ee:	81 60       	ori	r24, 0x01	; 1
    46f0:	80 83       	st	Z, r24
    46f2:	e0 e8       	ldi	r30, 0x80	; 128
    46f4:	f0 e0       	ldi	r31, 0x00	; 0
    46f6:	80 81       	ld	r24, Z
    46f8:	81 60       	ori	r24, 0x01	; 1
    46fa:	80 83       	st	Z, r24
    46fc:	e1 eb       	ldi	r30, 0xB1	; 177
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
    4700:	80 81       	ld	r24, Z
    4702:	84 60       	ori	r24, 0x04	; 4
    4704:	80 83       	st	Z, r24
    4706:	e0 eb       	ldi	r30, 0xB0	; 176
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	80 81       	ld	r24, Z
    470c:	81 60       	ori	r24, 0x01	; 1
    470e:	80 83       	st	Z, r24
    4710:	ea e7       	ldi	r30, 0x7A	; 122
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	84 60       	ori	r24, 0x04	; 4
    4718:	80 83       	st	Z, r24
    471a:	80 81       	ld	r24, Z
    471c:	82 60       	ori	r24, 0x02	; 2
    471e:	80 83       	st	Z, r24
    4720:	80 81       	ld	r24, Z
    4722:	81 60       	ori	r24, 0x01	; 1
    4724:	80 83       	st	Z, r24
    4726:	80 81       	ld	r24, Z
    4728:	80 68       	ori	r24, 0x80	; 128
    472a:	80 83       	st	Z, r24
    472c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    4730:	08 95       	ret

00004732 <analogRead>:
    4732:	8e 30       	cpi	r24, 0x0E	; 14
    4734:	08 f0       	brcs	.+2      	; 0x4738 <analogRead+0x6>
    4736:	8e 50       	subi	r24, 0x0E	; 14
    4738:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <analog_reference>
    473c:	90 e4       	ldi	r25, 0x40	; 64
    473e:	29 9f       	mul	r18, r25
    4740:	90 01       	movw	r18, r0
    4742:	11 24       	eor	r1, r1
    4744:	87 70       	andi	r24, 0x07	; 7
    4746:	82 2b       	or	r24, r18
    4748:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    474c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4750:	80 64       	ori	r24, 0x40	; 64
    4752:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    4756:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    475a:	86 fd       	sbrc	r24, 6
    475c:	fc cf       	rjmp	.-8      	; 0x4756 <analogRead+0x24>
    475e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    4762:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	92 2b       	or	r25, r18
    476a:	08 95       	ret

0000476c <analogWrite>:
    476c:	1f 93       	push	r17
    476e:	cf 93       	push	r28
    4770:	df 93       	push	r29
    4772:	18 2f       	mov	r17, r24
    4774:	eb 01       	movw	r28, r22
    4776:	61 e0       	ldi	r22, 0x01	; 1
    4778:	0e 94 3e 24 	call	0x487c	; 0x487c <pinMode>
    477c:	20 97       	sbiw	r28, 0x00	; 0
    477e:	11 f4       	brne	.+4      	; 0x4784 <analogWrite+0x18>
    4780:	60 e0       	ldi	r22, 0x00	; 0
    4782:	04 c0       	rjmp	.+8      	; 0x478c <analogWrite+0x20>
    4784:	cf 3f       	cpi	r28, 0xFF	; 255
    4786:	d1 05       	cpc	r29, r1
    4788:	39 f4       	brne	.+14     	; 0x4798 <analogWrite+0x2c>
    478a:	61 e0       	ldi	r22, 0x01	; 1
    478c:	81 2f       	mov	r24, r17
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	1f 91       	pop	r17
    4794:	0c 94 7a 24 	jmp	0x48f4	; 0x48f4 <digitalWrite>
    4798:	e1 2f       	mov	r30, r17
    479a:	f0 e0       	ldi	r31, 0x00	; 0
    479c:	ee 54       	subi	r30, 0x4E	; 78
    479e:	ff 4f       	sbci	r31, 0xFF	; 255
    47a0:	e4 91       	lpm	r30, Z
    47a2:	e3 30       	cpi	r30, 0x03	; 3
    47a4:	f9 f0       	breq	.+62     	; 0x47e4 <analogWrite+0x78>
    47a6:	48 f4       	brcc	.+18     	; 0x47ba <analogWrite+0x4e>
    47a8:	e1 30       	cpi	r30, 0x01	; 1
    47aa:	b9 f0       	breq	.+46     	; 0x47da <analogWrite+0x6e>
    47ac:	e2 30       	cpi	r30, 0x02	; 2
    47ae:	a1 f5       	brne	.+104    	; 0x4818 <analogWrite+0xac>
    47b0:	84 b5       	in	r24, 0x24	; 36
    47b2:	80 62       	ori	r24, 0x20	; 32
    47b4:	84 bd       	out	0x24, r24	; 36
    47b6:	c8 bd       	out	0x28, r28	; 40
    47b8:	34 c0       	rjmp	.+104    	; 0x4822 <analogWrite+0xb6>
    47ba:	e7 30       	cpi	r30, 0x07	; 7
    47bc:	e9 f0       	breq	.+58     	; 0x47f8 <analogWrite+0x8c>
    47be:	e8 30       	cpi	r30, 0x08	; 8
    47c0:	19 f1       	breq	.+70     	; 0x4808 <analogWrite+0x9c>
    47c2:	e4 30       	cpi	r30, 0x04	; 4
    47c4:	49 f5       	brne	.+82     	; 0x4818 <analogWrite+0xac>
    47c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    47ca:	80 62       	ori	r24, 0x20	; 32
    47cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    47d0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    47d4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
    47d8:	24 c0       	rjmp	.+72     	; 0x4822 <analogWrite+0xb6>
    47da:	84 b5       	in	r24, 0x24	; 36
    47dc:	80 68       	ori	r24, 0x80	; 128
    47de:	84 bd       	out	0x24, r24	; 36
    47e0:	c7 bd       	out	0x27, r28	; 39
    47e2:	1f c0       	rjmp	.+62     	; 0x4822 <analogWrite+0xb6>
    47e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    47e8:	80 68       	ori	r24, 0x80	; 128
    47ea:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    47ee:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    47f2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    47f6:	15 c0       	rjmp	.+42     	; 0x4822 <analogWrite+0xb6>
    47f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    47fc:	80 68       	ori	r24, 0x80	; 128
    47fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4802:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    4806:	0d c0       	rjmp	.+26     	; 0x4822 <analogWrite+0xb6>
    4808:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    480c:	80 62       	ori	r24, 0x20	; 32
    480e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4812:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    4816:	05 c0       	rjmp	.+10     	; 0x4822 <analogWrite+0xb6>
    4818:	c0 38       	cpi	r28, 0x80	; 128
    481a:	d1 05       	cpc	r29, r1
    481c:	0c f0       	brlt	.+2      	; 0x4820 <analogWrite+0xb4>
    481e:	b5 cf       	rjmp	.-150    	; 0x478a <analogWrite+0x1e>
    4820:	af cf       	rjmp	.-162    	; 0x4780 <analogWrite+0x14>
    4822:	df 91       	pop	r29
    4824:	cf 91       	pop	r28
    4826:	1f 91       	pop	r17
    4828:	08 95       	ret

0000482a <turnOffPWM>:
    482a:	83 30       	cpi	r24, 0x03	; 3
    482c:	81 f0       	breq	.+32     	; 0x484e <turnOffPWM+0x24>
    482e:	28 f4       	brcc	.+10     	; 0x483a <turnOffPWM+0x10>
    4830:	81 30       	cpi	r24, 0x01	; 1
    4832:	99 f0       	breq	.+38     	; 0x485a <turnOffPWM+0x30>
    4834:	82 30       	cpi	r24, 0x02	; 2
    4836:	a1 f0       	breq	.+40     	; 0x4860 <turnOffPWM+0x36>
    4838:	08 95       	ret
    483a:	87 30       	cpi	r24, 0x07	; 7
    483c:	a9 f0       	breq	.+42     	; 0x4868 <turnOffPWM+0x3e>
    483e:	88 30       	cpi	r24, 0x08	; 8
    4840:	b9 f0       	breq	.+46     	; 0x4870 <turnOffPWM+0x46>
    4842:	84 30       	cpi	r24, 0x04	; 4
    4844:	d1 f4       	brne	.+52     	; 0x487a <turnOffPWM+0x50>
    4846:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    484a:	8f 7d       	andi	r24, 0xDF	; 223
    484c:	03 c0       	rjmp	.+6      	; 0x4854 <turnOffPWM+0x2a>
    484e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4852:	8f 77       	andi	r24, 0x7F	; 127
    4854:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4858:	08 95       	ret
    485a:	84 b5       	in	r24, 0x24	; 36
    485c:	8f 77       	andi	r24, 0x7F	; 127
    485e:	02 c0       	rjmp	.+4      	; 0x4864 <turnOffPWM+0x3a>
    4860:	84 b5       	in	r24, 0x24	; 36
    4862:	8f 7d       	andi	r24, 0xDF	; 223
    4864:	84 bd       	out	0x24, r24	; 36
    4866:	08 95       	ret
    4868:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    486c:	8f 77       	andi	r24, 0x7F	; 127
    486e:	03 c0       	rjmp	.+6      	; 0x4876 <turnOffPWM+0x4c>
    4870:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4874:	8f 7d       	andi	r24, 0xDF	; 223
    4876:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    487a:	08 95       	ret

0000487c <pinMode>:
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	fc 01       	movw	r30, r24
    4884:	ea 53       	subi	r30, 0x3A	; 58
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	24 91       	lpm	r18, Z
    488a:	fc 01       	movw	r30, r24
    488c:	e6 52       	subi	r30, 0x26	; 38
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	84 91       	lpm	r24, Z
    4892:	88 23       	and	r24, r24
    4894:	61 f1       	breq	.+88     	; 0x48ee <pinMode+0x72>
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	fc 01       	movw	r30, r24
    489e:	ee 5f       	subi	r30, 0xFE	; 254
    48a0:	fe 4f       	sbci	r31, 0xFE	; 254
    48a2:	c5 91       	lpm	r28, Z+
    48a4:	d4 91       	lpm	r29, Z
    48a6:	fc 01       	movw	r30, r24
    48a8:	e8 50       	subi	r30, 0x08	; 8
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	a5 91       	lpm	r26, Z+
    48ae:	b4 91       	lpm	r27, Z
    48b0:	61 11       	cpse	r22, r1
    48b2:	09 c0       	rjmp	.+18     	; 0x48c6 <pinMode+0x4a>
    48b4:	9f b7       	in	r25, 0x3f	; 63
    48b6:	f8 94       	cli
    48b8:	88 81       	ld	r24, Y
    48ba:	20 95       	com	r18
    48bc:	82 23       	and	r24, r18
    48be:	88 83       	st	Y, r24
    48c0:	ec 91       	ld	r30, X
    48c2:	2e 23       	and	r18, r30
    48c4:	0b c0       	rjmp	.+22     	; 0x48dc <pinMode+0x60>
    48c6:	62 30       	cpi	r22, 0x02	; 2
    48c8:	61 f4       	brne	.+24     	; 0x48e2 <pinMode+0x66>
    48ca:	9f b7       	in	r25, 0x3f	; 63
    48cc:	f8 94       	cli
    48ce:	88 81       	ld	r24, Y
    48d0:	32 2f       	mov	r19, r18
    48d2:	30 95       	com	r19
    48d4:	83 23       	and	r24, r19
    48d6:	88 83       	st	Y, r24
    48d8:	ec 91       	ld	r30, X
    48da:	2e 2b       	or	r18, r30
    48dc:	2c 93       	st	X, r18
    48de:	9f bf       	out	0x3f, r25	; 63
    48e0:	06 c0       	rjmp	.+12     	; 0x48ee <pinMode+0x72>
    48e2:	8f b7       	in	r24, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	e8 81       	ld	r30, Y
    48e8:	2e 2b       	or	r18, r30
    48ea:	28 83       	st	Y, r18
    48ec:	8f bf       	out	0x3f, r24	; 63
    48ee:	df 91       	pop	r29
    48f0:	cf 91       	pop	r28
    48f2:	08 95       	ret

000048f4 <digitalWrite>:
    48f4:	1f 93       	push	r17
    48f6:	cf 93       	push	r28
    48f8:	df 93       	push	r29
    48fa:	28 2f       	mov	r18, r24
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	f9 01       	movw	r30, r18
    4900:	ee 54       	subi	r30, 0x4E	; 78
    4902:	ff 4f       	sbci	r31, 0xFF	; 255
    4904:	84 91       	lpm	r24, Z
    4906:	f9 01       	movw	r30, r18
    4908:	ea 53       	subi	r30, 0x3A	; 58
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	d4 91       	lpm	r29, Z
    490e:	f9 01       	movw	r30, r18
    4910:	e6 52       	subi	r30, 0x26	; 38
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	c4 91       	lpm	r28, Z
    4916:	cc 23       	and	r28, r28
    4918:	c1 f0       	breq	.+48     	; 0x494a <digitalWrite+0x56>
    491a:	16 2f       	mov	r17, r22
    491c:	81 11       	cpse	r24, r1
    491e:	0e 94 15 24 	call	0x482a	; 0x482a <turnOffPWM>
    4922:	ec 2f       	mov	r30, r28
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	ee 0f       	add	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	e8 50       	subi	r30, 0x08	; 8
    492c:	ff 4f       	sbci	r31, 0xFF	; 255
    492e:	a5 91       	lpm	r26, Z+
    4930:	b4 91       	lpm	r27, Z
    4932:	9f b7       	in	r25, 0x3f	; 63
    4934:	f8 94       	cli
    4936:	11 11       	cpse	r17, r1
    4938:	04 c0       	rjmp	.+8      	; 0x4942 <digitalWrite+0x4e>
    493a:	8c 91       	ld	r24, X
    493c:	d0 95       	com	r29
    493e:	d8 23       	and	r29, r24
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <digitalWrite+0x52>
    4942:	ec 91       	ld	r30, X
    4944:	de 2b       	or	r29, r30
    4946:	dc 93       	st	X, r29
    4948:	9f bf       	out	0x3f, r25	; 63
    494a:	df 91       	pop	r29
    494c:	cf 91       	pop	r28
    494e:	1f 91       	pop	r17
    4950:	08 95       	ret

00004952 <_ZN14FreqCountClass5beginEj>:
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	09 f4       	brne	.+2      	; 0x4958 <_ZN14FreqCountClass5beginEj+0x6>
    4956:	74 c0       	rjmp	.+232    	; 0x4a40 <L_130_loop+0xc>
    4958:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZL10gate_index+0x1>
    495c:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZL10gate_index>
    4960:	10 92 93 05 	sts	0x0593, r1	; 0x800593 <_ZL9count_msw+0x1>
    4964:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <_ZL9count_msw>
    4968:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <_ZL10count_prev>
    496c:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <_ZL10count_prev+0x1>
    4970:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <_ZL10count_prev+0x2>
    4974:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <_ZL10count_prev+0x3>
    4978:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <_ZL11count_ready>
    497c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4980:	20 93 98 05 	sts	0x0598, r18	; 0x800598 <_ZL10saveTCCR1A>
    4984:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4988:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <_ZL10saveTCCR1B>
    498c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4990:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4994:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    4998:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    499c:	21 e0       	ldi	r18, 0x01	; 1
    499e:	26 bb       	out	0x16, r18	; 22
    49a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    49a4:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    49a8:	20 93 96 05 	sts	0x0596, r18	; 0x800596 <_ZL10saveTCCR2A>
    49ac:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    49b0:	20 93 95 05 	sts	0x0595, r18	; 0x800595 <_ZL10saveTCCR2B>
    49b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    49b8:	22 e0       	ldi	r18, 0x02	; 2
    49ba:	20 93 b0 00 	sts	0x00B0, r18	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    49be:	9c 01       	movw	r18, r24
    49c0:	27 70       	andi	r18, 0x07	; 7
    49c2:	33 27       	eor	r19, r19
    49c4:	23 2b       	or	r18, r19
    49c6:	51 f4       	brne	.+20     	; 0x49dc <_ZN14FreqCountClass5beginEj+0x8a>
    49c8:	43 e0       	ldi	r20, 0x03	; 3
    49ca:	96 95       	lsr	r25
    49cc:	87 95       	ror	r24
    49ce:	4a 95       	dec	r20
    49d0:	e1 f7       	brne	.-8      	; 0x49ca <_ZN14FreqCountClass5beginEj+0x78>
    49d2:	2c e7       	ldi	r18, 0x7C	; 124
    49d4:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    49d8:	27 e0       	ldi	r18, 0x07	; 7
    49da:	18 c0       	rjmp	.+48     	; 0x4a0c <_ZN14FreqCountClass5beginEj+0xba>
    49dc:	9c 01       	movw	r18, r24
    49de:	23 70       	andi	r18, 0x03	; 3
    49e0:	33 27       	eor	r19, r19
    49e2:	23 2b       	or	r18, r19
    49e4:	31 f4       	brne	.+12     	; 0x49f2 <_ZN14FreqCountClass5beginEj+0xa0>
    49e6:	96 95       	lsr	r25
    49e8:	87 95       	ror	r24
    49ea:	96 95       	lsr	r25
    49ec:	87 95       	ror	r24
    49ee:	29 ef       	ldi	r18, 0xF9	; 249
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <_ZN14FreqCountClass5beginEj+0xaa>
    49f2:	80 fd       	sbrc	r24, 0
    49f4:	07 c0       	rjmp	.+14     	; 0x4a04 <_ZN14FreqCountClass5beginEj+0xb2>
    49f6:	96 95       	lsr	r25
    49f8:	87 95       	ror	r24
    49fa:	2c e7       	ldi	r18, 0x7C	; 124
    49fc:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    4a00:	26 e0       	ldi	r18, 0x06	; 6
    4a02:	04 c0       	rjmp	.+8      	; 0x4a0c <_ZN14FreqCountClass5beginEj+0xba>
    4a04:	2c e7       	ldi	r18, 0x7C	; 124
    4a06:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    4a0a:	25 e0       	ldi	r18, 0x05	; 5
    4a0c:	20 93 94 05 	sts	0x0594, r18	; 0x800594 <_ZL11startTCCR2B>
    4a10:	22 e0       	ldi	r18, 0x02	; 2
    4a12:	27 bb       	out	0x17, r18	; 23
    4a14:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
    4a18:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <_ZL11gate_length+0x1>
    4a1c:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <_ZL11gate_length>
    4a20:	9f b7       	in	r25, 0x3f	; 63
    4a22:	f8 94       	cli
    4a24:	23 bd       	out	0x23, r18	; 35
    4a26:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <_ZL11startTCCR2B>
    4a2a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    4a2e:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    4a32:	8b e0       	ldi	r24, 0x0B	; 11

00004a34 <L_130_loop>:
    4a34:	81 50       	subi	r24, 0x01	; 1
    4a36:	f1 f7       	brne	.-4      	; 0x4a34 <L_130_loop>
    4a38:	87 e0       	ldi	r24, 0x07	; 7
    4a3a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    4a3e:	9f bf       	out	0x3f, r25	; 63
    4a40:	08 95       	ret

00004a42 <_ZN14FreqCountClass9availableEv>:
    4a42:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <_ZL11count_ready>
    4a46:	08 95       	ret

00004a48 <_ZN14FreqCountClass4readEv>:
    4a48:	2f b7       	in	r18, 0x3f	; 63
    4a4a:	f8 94       	cli
    4a4c:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <_ZL12count_output>
    4a50:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <_ZL12count_output+0x1>
    4a54:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <_ZL12count_output+0x2>
    4a58:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <_ZL12count_output+0x3>
    4a5c:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <_ZL11count_ready>
    4a60:	2f bf       	out	0x3f, r18	; 63
    4a62:	08 95       	ret

00004a64 <_ZN14FreqCountClass3endEv>:
    4a64:	e1 eb       	ldi	r30, 0xB1	; 177
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	10 82       	st	Z, r1
    4a6a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    4a6e:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <_ZL10saveTCCR2A>
    4a72:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    4a76:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <_ZL10saveTCCR2B>
    4a7a:	80 83       	st	Z, r24
    4a7c:	e1 e8       	ldi	r30, 0x81	; 129
    4a7e:	f0 e0       	ldi	r31, 0x00	; 0
    4a80:	10 82       	st	Z, r1
    4a82:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <_ZL10saveTCCR1A>
    4a86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    4a8a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <_ZL10saveTCCR1B>
    4a8e:	80 83       	st	Z, r24
    4a90:	08 95       	ret

00004a92 <__vector_7>:
    4a92:	1f 92       	push	r1
    4a94:	0f 92       	push	r0
    4a96:	0f b6       	in	r0, 0x3f	; 63
    4a98:	0f 92       	push	r0
    4a9a:	11 24       	eor	r1, r1
    4a9c:	0f 93       	push	r16
    4a9e:	1f 93       	push	r17
    4aa0:	2f 93       	push	r18
    4aa2:	3f 93       	push	r19
    4aa4:	4f 93       	push	r20
    4aa6:	5f 93       	push	r21
    4aa8:	6f 93       	push	r22
    4aaa:	7f 93       	push	r23
    4aac:	8f 93       	push	r24
    4aae:	9f 93       	push	r25
    4ab0:	af 93       	push	r26
    4ab2:	bf 93       	push	r27
    4ab4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    4ab8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    4abc:	b0 9b       	sbis	0x16, 0	; 22
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <__vector_7+0x44>
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	86 bb       	out	0x16, r24	; 22
    4ac4:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <_ZL9count_msw>
    4ac8:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <_ZL9count_msw+0x1>
    4acc:	01 96       	adiw	r24, 0x01	; 1
    4ace:	90 93 93 05 	sts	0x0593, r25	; 0x800593 <_ZL9count_msw+0x1>
    4ad2:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <_ZL9count_msw>
    4ad6:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <_ZL10gate_index>
    4ada:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <_ZL10gate_index+0x1>
    4ade:	01 96       	adiw	r24, 0x01	; 1
    4ae0:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <_ZL11gate_length>
    4ae4:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <_ZL11gate_length+0x1>
    4ae8:	84 17       	cp	r24, r20
    4aea:	95 07       	cpc	r25, r21
    4aec:	98 f1       	brcs	.+102    	; 0x4b54 <__vector_7+0xc2>
    4aee:	10 92 86 05 	sts	0x0586, r1	; 0x800586 <_ZL10gate_index+0x1>
    4af2:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <_ZL10gate_index>
    4af6:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <_ZL9count_msw>
    4afa:	90 91 93 05 	lds	r25, 0x0593	; 0x800593 <_ZL9count_msw+0x1>
    4afe:	a0 e0       	ldi	r26, 0x00	; 0
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	dc 01       	movw	r26, r24
    4b04:	99 27       	eor	r25, r25
    4b06:	88 27       	eor	r24, r24
    4b08:	82 0f       	add	r24, r18
    4b0a:	93 1f       	adc	r25, r19
    4b0c:	a1 1d       	adc	r26, r1
    4b0e:	b1 1d       	adc	r27, r1
    4b10:	40 91 8e 05 	lds	r20, 0x058E	; 0x80058e <_ZL10count_prev>
    4b14:	50 91 8f 05 	lds	r21, 0x058F	; 0x80058f <_ZL10count_prev+0x1>
    4b18:	60 91 90 05 	lds	r22, 0x0590	; 0x800590 <_ZL10count_prev+0x2>
    4b1c:	70 91 91 05 	lds	r23, 0x0591	; 0x800591 <_ZL10count_prev+0x3>
    4b20:	8c 01       	movw	r16, r24
    4b22:	9d 01       	movw	r18, r26
    4b24:	04 1b       	sub	r16, r20
    4b26:	15 0b       	sbc	r17, r21
    4b28:	26 0b       	sbc	r18, r22
    4b2a:	37 0b       	sbc	r19, r23
    4b2c:	00 93 8a 05 	sts	0x058A, r16	; 0x80058a <_ZL12count_output>
    4b30:	10 93 8b 05 	sts	0x058B, r17	; 0x80058b <_ZL12count_output+0x1>
    4b34:	20 93 8c 05 	sts	0x058C, r18	; 0x80058c <_ZL12count_output+0x2>
    4b38:	30 93 8d 05 	sts	0x058D, r19	; 0x80058d <_ZL12count_output+0x3>
    4b3c:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <_ZL10count_prev>
    4b40:	90 93 8f 05 	sts	0x058F, r25	; 0x80058f <_ZL10count_prev+0x1>
    4b44:	a0 93 90 05 	sts	0x0590, r26	; 0x800590 <_ZL10count_prev+0x2>
    4b48:	b0 93 91 05 	sts	0x0591, r27	; 0x800591 <_ZL10count_prev+0x3>
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <_ZL11count_ready>
    4b52:	04 c0       	rjmp	.+8      	; 0x4b5c <__vector_7+0xca>
    4b54:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <_ZL10gate_index+0x1>
    4b58:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <_ZL10gate_index>
    4b5c:	bf 91       	pop	r27
    4b5e:	af 91       	pop	r26
    4b60:	9f 91       	pop	r25
    4b62:	8f 91       	pop	r24
    4b64:	7f 91       	pop	r23
    4b66:	6f 91       	pop	r22
    4b68:	5f 91       	pop	r21
    4b6a:	4f 91       	pop	r20
    4b6c:	3f 91       	pop	r19
    4b6e:	2f 91       	pop	r18
    4b70:	1f 91       	pop	r17
    4b72:	0f 91       	pop	r16
    4b74:	0f 90       	pop	r0
    4b76:	0f be       	out	0x3f, r0	; 63
    4b78:	0f 90       	pop	r0
    4b7a:	1f 90       	pop	r1
    4b7c:	18 95       	reti

00004b7e <yield>:
    4b7e:	08 95       	ret

00004b80 <__unordsf2>:
    4b80:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__fp_cmp>
    4b84:	88 0b       	sbc	r24, r24
    4b86:	99 0b       	sbc	r25, r25
    4b88:	08 95       	ret

00004b8a <__divmodhi4>:
    4b8a:	97 fb       	bst	r25, 7
    4b8c:	07 2e       	mov	r0, r23
    4b8e:	16 f4       	brtc	.+4      	; 0x4b94 <__divmodhi4+0xa>
    4b90:	00 94       	com	r0
    4b92:	07 d0       	rcall	.+14     	; 0x4ba2 <__divmodhi4_neg1>
    4b94:	77 fd       	sbrc	r23, 7
    4b96:	09 d0       	rcall	.+18     	; 0x4baa <__divmodhi4_neg2>
    4b98:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <__udivmodhi4>
    4b9c:	07 fc       	sbrc	r0, 7
    4b9e:	05 d0       	rcall	.+10     	; 0x4baa <__divmodhi4_neg2>
    4ba0:	3e f4       	brtc	.+14     	; 0x4bb0 <__divmodhi4_exit>

00004ba2 <__divmodhi4_neg1>:
    4ba2:	90 95       	com	r25
    4ba4:	81 95       	neg	r24
    4ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ba8:	08 95       	ret

00004baa <__divmodhi4_neg2>:
    4baa:	70 95       	com	r23
    4bac:	61 95       	neg	r22
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255

00004bb0 <__divmodhi4_exit>:
    4bb0:	08 95       	ret

00004bb2 <__udivmodsi4>:
    4bb2:	a1 e2       	ldi	r26, 0x21	; 33
    4bb4:	1a 2e       	mov	r1, r26
    4bb6:	aa 1b       	sub	r26, r26
    4bb8:	bb 1b       	sub	r27, r27
    4bba:	fd 01       	movw	r30, r26
    4bbc:	0d c0       	rjmp	.+26     	; 0x4bd8 <__udivmodsi4_ep>

00004bbe <__udivmodsi4_loop>:
    4bbe:	aa 1f       	adc	r26, r26
    4bc0:	bb 1f       	adc	r27, r27
    4bc2:	ee 1f       	adc	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	a2 17       	cp	r26, r18
    4bc8:	b3 07       	cpc	r27, r19
    4bca:	e4 07       	cpc	r30, r20
    4bcc:	f5 07       	cpc	r31, r21
    4bce:	20 f0       	brcs	.+8      	; 0x4bd8 <__udivmodsi4_ep>
    4bd0:	a2 1b       	sub	r26, r18
    4bd2:	b3 0b       	sbc	r27, r19
    4bd4:	e4 0b       	sbc	r30, r20
    4bd6:	f5 0b       	sbc	r31, r21

00004bd8 <__udivmodsi4_ep>:
    4bd8:	66 1f       	adc	r22, r22
    4bda:	77 1f       	adc	r23, r23
    4bdc:	88 1f       	adc	r24, r24
    4bde:	99 1f       	adc	r25, r25
    4be0:	1a 94       	dec	r1
    4be2:	69 f7       	brne	.-38     	; 0x4bbe <__udivmodsi4_loop>
    4be4:	60 95       	com	r22
    4be6:	70 95       	com	r23
    4be8:	80 95       	com	r24
    4bea:	90 95       	com	r25
    4bec:	9b 01       	movw	r18, r22
    4bee:	ac 01       	movw	r20, r24
    4bf0:	bd 01       	movw	r22, r26
    4bf2:	cf 01       	movw	r24, r30
    4bf4:	08 95       	ret

00004bf6 <__divmodsi4>:
    4bf6:	05 2e       	mov	r0, r21
    4bf8:	97 fb       	bst	r25, 7
    4bfa:	1e f4       	brtc	.+6      	; 0x4c02 <__divmodsi4+0xc>
    4bfc:	00 94       	com	r0
    4bfe:	0e 94 12 26 	call	0x4c24	; 0x4c24 <__negsi2>
    4c02:	57 fd       	sbrc	r21, 7
    4c04:	07 d0       	rcall	.+14     	; 0x4c14 <__divmodsi4_neg2>
    4c06:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__udivmodsi4>
    4c0a:	07 fc       	sbrc	r0, 7
    4c0c:	03 d0       	rcall	.+6      	; 0x4c14 <__divmodsi4_neg2>
    4c0e:	4e f4       	brtc	.+18     	; 0x4c22 <__divmodsi4_exit>
    4c10:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__negsi2>

00004c14 <__divmodsi4_neg2>:
    4c14:	50 95       	com	r21
    4c16:	40 95       	com	r20
    4c18:	30 95       	com	r19
    4c1a:	21 95       	neg	r18
    4c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1e:	4f 4f       	sbci	r20, 0xFF	; 255
    4c20:	5f 4f       	sbci	r21, 0xFF	; 255

00004c22 <__divmodsi4_exit>:
    4c22:	08 95       	ret

00004c24 <__negsi2>:
    4c24:	90 95       	com	r25
    4c26:	80 95       	com	r24
    4c28:	70 95       	com	r23
    4c2a:	61 95       	neg	r22
    4c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    4c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c30:	9f 4f       	sbci	r25, 0xFF	; 255
    4c32:	08 95       	ret

00004c34 <__tablejump2__>:
    4c34:	ee 0f       	add	r30, r30
    4c36:	ff 1f       	adc	r31, r31
    4c38:	05 90       	lpm	r0, Z+
    4c3a:	f4 91       	lpm	r31, Z
    4c3c:	e0 2d       	mov	r30, r0
    4c3e:	09 94       	ijmp

00004c40 <__muluhisi3>:
    4c40:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <__umulhisi3>
    4c44:	a5 9f       	mul	r26, r21
    4c46:	90 0d       	add	r25, r0
    4c48:	b4 9f       	mul	r27, r20
    4c4a:	90 0d       	add	r25, r0
    4c4c:	a4 9f       	mul	r26, r20
    4c4e:	80 0d       	add	r24, r0
    4c50:	91 1d       	adc	r25, r1
    4c52:	11 24       	eor	r1, r1
    4c54:	08 95       	ret

00004c56 <__udivmodhi4>:
    4c56:	aa 1b       	sub	r26, r26
    4c58:	bb 1b       	sub	r27, r27
    4c5a:	51 e1       	ldi	r21, 0x11	; 17
    4c5c:	07 c0       	rjmp	.+14     	; 0x4c6c <__udivmodhi4_ep>

00004c5e <__udivmodhi4_loop>:
    4c5e:	aa 1f       	adc	r26, r26
    4c60:	bb 1f       	adc	r27, r27
    4c62:	a6 17       	cp	r26, r22
    4c64:	b7 07       	cpc	r27, r23
    4c66:	10 f0       	brcs	.+4      	; 0x4c6c <__udivmodhi4_ep>
    4c68:	a6 1b       	sub	r26, r22
    4c6a:	b7 0b       	sbc	r27, r23

00004c6c <__udivmodhi4_ep>:
    4c6c:	88 1f       	adc	r24, r24
    4c6e:	99 1f       	adc	r25, r25
    4c70:	5a 95       	dec	r21
    4c72:	a9 f7       	brne	.-22     	; 0x4c5e <__udivmodhi4_loop>
    4c74:	80 95       	com	r24
    4c76:	90 95       	com	r25
    4c78:	bc 01       	movw	r22, r24
    4c7a:	cd 01       	movw	r24, r26
    4c7c:	08 95       	ret

00004c7e <__umulhisi3>:
    4c7e:	a2 9f       	mul	r26, r18
    4c80:	b0 01       	movw	r22, r0
    4c82:	b3 9f       	mul	r27, r19
    4c84:	c0 01       	movw	r24, r0
    4c86:	a3 9f       	mul	r26, r19
    4c88:	70 0d       	add	r23, r0
    4c8a:	81 1d       	adc	r24, r1
    4c8c:	11 24       	eor	r1, r1
    4c8e:	91 1d       	adc	r25, r1
    4c90:	b2 9f       	mul	r27, r18
    4c92:	70 0d       	add	r23, r0
    4c94:	81 1d       	adc	r24, r1
    4c96:	11 24       	eor	r1, r1
    4c98:	91 1d       	adc	r25, r1
    4c9a:	08 95       	ret

00004c9c <malloc>:
    4c9c:	0f 93       	push	r16
    4c9e:	1f 93       	push	r17
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	82 30       	cpi	r24, 0x02	; 2
    4ca6:	91 05       	cpc	r25, r1
    4ca8:	10 f4       	brcc	.+4      	; 0x4cae <malloc+0x12>
    4caa:	82 e0       	ldi	r24, 0x02	; 2
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <__flp>
    4cb2:	f0 91 9c 05 	lds	r31, 0x059C	; 0x80059c <__flp+0x1>
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	a0 e0       	ldi	r26, 0x00	; 0
    4cbc:	b0 e0       	ldi	r27, 0x00	; 0
    4cbe:	30 97       	sbiw	r30, 0x00	; 0
    4cc0:	19 f1       	breq	.+70     	; 0x4d08 <malloc+0x6c>
    4cc2:	40 81       	ld	r20, Z
    4cc4:	51 81       	ldd	r21, Z+1	; 0x01
    4cc6:	02 81       	ldd	r16, Z+2	; 0x02
    4cc8:	13 81       	ldd	r17, Z+3	; 0x03
    4cca:	48 17       	cp	r20, r24
    4ccc:	59 07       	cpc	r21, r25
    4cce:	c8 f0       	brcs	.+50     	; 0x4d02 <malloc+0x66>
    4cd0:	84 17       	cp	r24, r20
    4cd2:	95 07       	cpc	r25, r21
    4cd4:	69 f4       	brne	.+26     	; 0x4cf0 <malloc+0x54>
    4cd6:	10 97       	sbiw	r26, 0x00	; 0
    4cd8:	31 f0       	breq	.+12     	; 0x4ce6 <malloc+0x4a>
    4cda:	12 96       	adiw	r26, 0x02	; 2
    4cdc:	0c 93       	st	X, r16
    4cde:	12 97       	sbiw	r26, 0x02	; 2
    4ce0:	13 96       	adiw	r26, 0x03	; 3
    4ce2:	1c 93       	st	X, r17
    4ce4:	27 c0       	rjmp	.+78     	; 0x4d34 <malloc+0x98>
    4ce6:	00 93 9b 05 	sts	0x059B, r16	; 0x80059b <__flp>
    4cea:	10 93 9c 05 	sts	0x059C, r17	; 0x80059c <__flp+0x1>
    4cee:	22 c0       	rjmp	.+68     	; 0x4d34 <malloc+0x98>
    4cf0:	21 15       	cp	r18, r1
    4cf2:	31 05       	cpc	r19, r1
    4cf4:	19 f0       	breq	.+6      	; 0x4cfc <malloc+0x60>
    4cf6:	42 17       	cp	r20, r18
    4cf8:	53 07       	cpc	r21, r19
    4cfa:	18 f4       	brcc	.+6      	; 0x4d02 <malloc+0x66>
    4cfc:	9a 01       	movw	r18, r20
    4cfe:	bd 01       	movw	r22, r26
    4d00:	ef 01       	movw	r28, r30
    4d02:	df 01       	movw	r26, r30
    4d04:	f8 01       	movw	r30, r16
    4d06:	db cf       	rjmp	.-74     	; 0x4cbe <malloc+0x22>
    4d08:	21 15       	cp	r18, r1
    4d0a:	31 05       	cpc	r19, r1
    4d0c:	f9 f0       	breq	.+62     	; 0x4d4c <malloc+0xb0>
    4d0e:	28 1b       	sub	r18, r24
    4d10:	39 0b       	sbc	r19, r25
    4d12:	24 30       	cpi	r18, 0x04	; 4
    4d14:	31 05       	cpc	r19, r1
    4d16:	80 f4       	brcc	.+32     	; 0x4d38 <malloc+0x9c>
    4d18:	8a 81       	ldd	r24, Y+2	; 0x02
    4d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d1c:	61 15       	cp	r22, r1
    4d1e:	71 05       	cpc	r23, r1
    4d20:	21 f0       	breq	.+8      	; 0x4d2a <malloc+0x8e>
    4d22:	fb 01       	movw	r30, r22
    4d24:	93 83       	std	Z+3, r25	; 0x03
    4d26:	82 83       	std	Z+2, r24	; 0x02
    4d28:	04 c0       	rjmp	.+8      	; 0x4d32 <malloc+0x96>
    4d2a:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <__flp+0x1>
    4d2e:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <__flp>
    4d32:	fe 01       	movw	r30, r28
    4d34:	32 96       	adiw	r30, 0x02	; 2
    4d36:	44 c0       	rjmp	.+136    	; 0x4dc0 <malloc+0x124>
    4d38:	fe 01       	movw	r30, r28
    4d3a:	e2 0f       	add	r30, r18
    4d3c:	f3 1f       	adc	r31, r19
    4d3e:	81 93       	st	Z+, r24
    4d40:	91 93       	st	Z+, r25
    4d42:	22 50       	subi	r18, 0x02	; 2
    4d44:	31 09       	sbc	r19, r1
    4d46:	39 83       	std	Y+1, r19	; 0x01
    4d48:	28 83       	st	Y, r18
    4d4a:	3a c0       	rjmp	.+116    	; 0x4dc0 <malloc+0x124>
    4d4c:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    4d50:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    4d54:	23 2b       	or	r18, r19
    4d56:	41 f4       	brne	.+16     	; 0x4d68 <malloc+0xcc>
    4d58:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4d5c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4d60:	30 93 9a 05 	sts	0x059A, r19	; 0x80059a <__brkval+0x1>
    4d64:	20 93 99 05 	sts	0x0599, r18	; 0x800599 <__brkval>
    4d68:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4d6c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4d70:	21 15       	cp	r18, r1
    4d72:	31 05       	cpc	r19, r1
    4d74:	41 f4       	brne	.+16     	; 0x4d86 <malloc+0xea>
    4d76:	2d b7       	in	r18, 0x3d	; 61
    4d78:	3e b7       	in	r19, 0x3e	; 62
    4d7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4d7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4d82:	24 1b       	sub	r18, r20
    4d84:	35 0b       	sbc	r19, r21
    4d86:	e0 91 99 05 	lds	r30, 0x0599	; 0x800599 <__brkval>
    4d8a:	f0 91 9a 05 	lds	r31, 0x059A	; 0x80059a <__brkval+0x1>
    4d8e:	e2 17       	cp	r30, r18
    4d90:	f3 07       	cpc	r31, r19
    4d92:	a0 f4       	brcc	.+40     	; 0x4dbc <malloc+0x120>
    4d94:	2e 1b       	sub	r18, r30
    4d96:	3f 0b       	sbc	r19, r31
    4d98:	28 17       	cp	r18, r24
    4d9a:	39 07       	cpc	r19, r25
    4d9c:	78 f0       	brcs	.+30     	; 0x4dbc <malloc+0x120>
    4d9e:	ac 01       	movw	r20, r24
    4da0:	4e 5f       	subi	r20, 0xFE	; 254
    4da2:	5f 4f       	sbci	r21, 0xFF	; 255
    4da4:	24 17       	cp	r18, r20
    4da6:	35 07       	cpc	r19, r21
    4da8:	48 f0       	brcs	.+18     	; 0x4dbc <malloc+0x120>
    4daa:	4e 0f       	add	r20, r30
    4dac:	5f 1f       	adc	r21, r31
    4dae:	50 93 9a 05 	sts	0x059A, r21	; 0x80059a <__brkval+0x1>
    4db2:	40 93 99 05 	sts	0x0599, r20	; 0x800599 <__brkval>
    4db6:	81 93       	st	Z+, r24
    4db8:	91 93       	st	Z+, r25
    4dba:	02 c0       	rjmp	.+4      	; 0x4dc0 <malloc+0x124>
    4dbc:	e0 e0       	ldi	r30, 0x00	; 0
    4dbe:	f0 e0       	ldi	r31, 0x00	; 0
    4dc0:	cf 01       	movw	r24, r30
    4dc2:	df 91       	pop	r29
    4dc4:	cf 91       	pop	r28
    4dc6:	1f 91       	pop	r17
    4dc8:	0f 91       	pop	r16
    4dca:	08 95       	ret

00004dcc <free>:
    4dcc:	cf 93       	push	r28
    4dce:	df 93       	push	r29
    4dd0:	00 97       	sbiw	r24, 0x00	; 0
    4dd2:	09 f4       	brne	.+2      	; 0x4dd6 <free+0xa>
    4dd4:	81 c0       	rjmp	.+258    	; 0x4ed8 <free+0x10c>
    4dd6:	fc 01       	movw	r30, r24
    4dd8:	32 97       	sbiw	r30, 0x02	; 2
    4dda:	13 82       	std	Z+3, r1	; 0x03
    4ddc:	12 82       	std	Z+2, r1	; 0x02
    4dde:	a0 91 9b 05 	lds	r26, 0x059B	; 0x80059b <__flp>
    4de2:	b0 91 9c 05 	lds	r27, 0x059C	; 0x80059c <__flp+0x1>
    4de6:	10 97       	sbiw	r26, 0x00	; 0
    4de8:	81 f4       	brne	.+32     	; 0x4e0a <free+0x3e>
    4dea:	20 81       	ld	r18, Z
    4dec:	31 81       	ldd	r19, Z+1	; 0x01
    4dee:	82 0f       	add	r24, r18
    4df0:	93 1f       	adc	r25, r19
    4df2:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    4df6:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    4dfa:	28 17       	cp	r18, r24
    4dfc:	39 07       	cpc	r19, r25
    4dfe:	51 f5       	brne	.+84     	; 0x4e54 <free+0x88>
    4e00:	f0 93 9a 05 	sts	0x059A, r31	; 0x80059a <__brkval+0x1>
    4e04:	e0 93 99 05 	sts	0x0599, r30	; 0x800599 <__brkval>
    4e08:	67 c0       	rjmp	.+206    	; 0x4ed8 <free+0x10c>
    4e0a:	ed 01       	movw	r28, r26
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	ce 17       	cp	r28, r30
    4e12:	df 07       	cpc	r29, r31
    4e14:	40 f4       	brcc	.+16     	; 0x4e26 <free+0x5a>
    4e16:	4a 81       	ldd	r20, Y+2	; 0x02
    4e18:	5b 81       	ldd	r21, Y+3	; 0x03
    4e1a:	9e 01       	movw	r18, r28
    4e1c:	41 15       	cp	r20, r1
    4e1e:	51 05       	cpc	r21, r1
    4e20:	f1 f0       	breq	.+60     	; 0x4e5e <free+0x92>
    4e22:	ea 01       	movw	r28, r20
    4e24:	f5 cf       	rjmp	.-22     	; 0x4e10 <free+0x44>
    4e26:	d3 83       	std	Z+3, r29	; 0x03
    4e28:	c2 83       	std	Z+2, r28	; 0x02
    4e2a:	40 81       	ld	r20, Z
    4e2c:	51 81       	ldd	r21, Z+1	; 0x01
    4e2e:	84 0f       	add	r24, r20
    4e30:	95 1f       	adc	r25, r21
    4e32:	c8 17       	cp	r28, r24
    4e34:	d9 07       	cpc	r29, r25
    4e36:	59 f4       	brne	.+22     	; 0x4e4e <free+0x82>
    4e38:	88 81       	ld	r24, Y
    4e3a:	99 81       	ldd	r25, Y+1	; 0x01
    4e3c:	84 0f       	add	r24, r20
    4e3e:	95 1f       	adc	r25, r21
    4e40:	02 96       	adiw	r24, 0x02	; 2
    4e42:	91 83       	std	Z+1, r25	; 0x01
    4e44:	80 83       	st	Z, r24
    4e46:	8a 81       	ldd	r24, Y+2	; 0x02
    4e48:	9b 81       	ldd	r25, Y+3	; 0x03
    4e4a:	93 83       	std	Z+3, r25	; 0x03
    4e4c:	82 83       	std	Z+2, r24	; 0x02
    4e4e:	21 15       	cp	r18, r1
    4e50:	31 05       	cpc	r19, r1
    4e52:	29 f4       	brne	.+10     	; 0x4e5e <free+0x92>
    4e54:	f0 93 9c 05 	sts	0x059C, r31	; 0x80059c <__flp+0x1>
    4e58:	e0 93 9b 05 	sts	0x059B, r30	; 0x80059b <__flp>
    4e5c:	3d c0       	rjmp	.+122    	; 0x4ed8 <free+0x10c>
    4e5e:	e9 01       	movw	r28, r18
    4e60:	fb 83       	std	Y+3, r31	; 0x03
    4e62:	ea 83       	std	Y+2, r30	; 0x02
    4e64:	49 91       	ld	r20, Y+
    4e66:	59 91       	ld	r21, Y+
    4e68:	c4 0f       	add	r28, r20
    4e6a:	d5 1f       	adc	r29, r21
    4e6c:	ec 17       	cp	r30, r28
    4e6e:	fd 07       	cpc	r31, r29
    4e70:	61 f4       	brne	.+24     	; 0x4e8a <free+0xbe>
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
    4e76:	84 0f       	add	r24, r20
    4e78:	95 1f       	adc	r25, r21
    4e7a:	02 96       	adiw	r24, 0x02	; 2
    4e7c:	e9 01       	movw	r28, r18
    4e7e:	99 83       	std	Y+1, r25	; 0x01
    4e80:	88 83       	st	Y, r24
    4e82:	82 81       	ldd	r24, Z+2	; 0x02
    4e84:	93 81       	ldd	r25, Z+3	; 0x03
    4e86:	9b 83       	std	Y+3, r25	; 0x03
    4e88:	8a 83       	std	Y+2, r24	; 0x02
    4e8a:	e0 e0       	ldi	r30, 0x00	; 0
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	12 96       	adiw	r26, 0x02	; 2
    4e90:	8d 91       	ld	r24, X+
    4e92:	9c 91       	ld	r25, X
    4e94:	13 97       	sbiw	r26, 0x03	; 3
    4e96:	00 97       	sbiw	r24, 0x00	; 0
    4e98:	19 f0       	breq	.+6      	; 0x4ea0 <free+0xd4>
    4e9a:	fd 01       	movw	r30, r26
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	f7 cf       	rjmp	.-18     	; 0x4e8e <free+0xc2>
    4ea0:	8d 91       	ld	r24, X+
    4ea2:	9c 91       	ld	r25, X
    4ea4:	11 97       	sbiw	r26, 0x01	; 1
    4ea6:	9d 01       	movw	r18, r26
    4ea8:	2e 5f       	subi	r18, 0xFE	; 254
    4eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4eac:	82 0f       	add	r24, r18
    4eae:	93 1f       	adc	r25, r19
    4eb0:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <__brkval>
    4eb4:	30 91 9a 05 	lds	r19, 0x059A	; 0x80059a <__brkval+0x1>
    4eb8:	28 17       	cp	r18, r24
    4eba:	39 07       	cpc	r19, r25
    4ebc:	69 f4       	brne	.+26     	; 0x4ed8 <free+0x10c>
    4ebe:	30 97       	sbiw	r30, 0x00	; 0
    4ec0:	29 f4       	brne	.+10     	; 0x4ecc <free+0x100>
    4ec2:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <__flp+0x1>
    4ec6:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <__flp>
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <free+0x104>
    4ecc:	13 82       	std	Z+3, r1	; 0x03
    4ece:	12 82       	std	Z+2, r1	; 0x02
    4ed0:	b0 93 9a 05 	sts	0x059A, r27	; 0x80059a <__brkval+0x1>
    4ed4:	a0 93 99 05 	sts	0x0599, r26	; 0x800599 <__brkval>
    4ed8:	df 91       	pop	r29
    4eda:	cf 91       	pop	r28
    4edc:	08 95       	ret

00004ede <memcpy>:
    4ede:	fb 01       	movw	r30, r22
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <memcpy+0xa>
    4ee4:	01 90       	ld	r0, Z+
    4ee6:	0d 92       	st	X+, r0
    4ee8:	41 50       	subi	r20, 0x01	; 1
    4eea:	50 40       	sbci	r21, 0x00	; 0
    4eec:	d8 f7       	brcc	.-10     	; 0x4ee4 <memcpy+0x6>
    4eee:	08 95       	ret

00004ef0 <memset>:
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	01 c0       	rjmp	.+2      	; 0x4ef6 <memset+0x6>
    4ef4:	6d 93       	st	X+, r22
    4ef6:	41 50       	subi	r20, 0x01	; 1
    4ef8:	50 40       	sbci	r21, 0x00	; 0
    4efa:	e0 f7       	brcc	.-8      	; 0x4ef4 <memset+0x4>
    4efc:	08 95       	ret

00004efe <eeprom_read_byte>:
    4efe:	f9 99       	sbic	0x1f, 1	; 31
    4f00:	fe cf       	rjmp	.-4      	; 0x4efe <eeprom_read_byte>
    4f02:	92 bd       	out	0x22, r25	; 34
    4f04:	81 bd       	out	0x21, r24	; 33
    4f06:	f8 9a       	sbi	0x1f, 0	; 31
    4f08:	99 27       	eor	r25, r25
    4f0a:	80 b5       	in	r24, 0x20	; 32
    4f0c:	08 95       	ret

00004f0e <eeprom_write_byte>:
    4f0e:	26 2f       	mov	r18, r22

00004f10 <eeprom_write_r18>:
    4f10:	f9 99       	sbic	0x1f, 1	; 31
    4f12:	fe cf       	rjmp	.-4      	; 0x4f10 <eeprom_write_r18>
    4f14:	1f ba       	out	0x1f, r1	; 31
    4f16:	92 bd       	out	0x22, r25	; 34
    4f18:	81 bd       	out	0x21, r24	; 33
    4f1a:	20 bd       	out	0x20, r18	; 32
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	fa 9a       	sbi	0x1f, 2	; 31
    4f22:	f9 9a       	sbi	0x1f, 1	; 31
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	01 96       	adiw	r24, 0x01	; 1
    4f28:	08 95       	ret

00004f2a <__do_global_dtors>:
    4f2a:	10 e0       	ldi	r17, 0x00	; 0
    4f2c:	c9 e8       	ldi	r28, 0x89	; 137
    4f2e:	d0 e0       	ldi	r29, 0x00	; 0
    4f30:	04 c0       	rjmp	.+8      	; 0x4f3a <__do_global_dtors+0x10>
    4f32:	fe 01       	movw	r30, r28
    4f34:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <__tablejump2__>
    4f38:	21 96       	adiw	r28, 0x01	; 1
    4f3a:	cb 38       	cpi	r28, 0x8B	; 139
    4f3c:	d1 07       	cpc	r29, r17
    4f3e:	c9 f7       	brne	.-14     	; 0x4f32 <__do_global_dtors+0x8>
    4f40:	f8 94       	cli

00004f42 <__stop_program>:
    4f42:	ff cf       	rjmp	.-2      	; 0x4f42 <__stop_program>
